
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002472c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dc8  08024900  08024900  00034900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080296c8  080296c8  00040a50  2**0
                  CONTENTS
  4 .ARM          00000008  080296c8  080296c8  000396c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080296d0  080296d0  00040a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080296d0  080296d0  000396d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080296d8  080296d8  000396d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  080296dc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b434  20000a50  0802a12c  00040a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000be84  0802a12c  0004be84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052fbf  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a533  00000000  00000000  00093a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b0  00000000  00000000  0009df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002608  00000000  00000000  000a0728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bb3b  00000000  00000000  000a2d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f83b  00000000  00000000  000de86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120cf8  00000000  00000000  0011e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023ed9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bf20  00000000  00000000  0023edf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a50 	.word	0x20000a50
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080248e4 	.word	0x080248e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a54 	.word	0x20000a54
 800020c:	080248e4 	.word	0x080248e4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "local_files.h"
#define CONFIGURATION_START_ADDR 0x080c0000
void clearFlash(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstSector = 7;//flash memory sector
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfSectors = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <clearFlash+0x44>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <clearFlash+0x44>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Sector = FirstSector;
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <clearFlash+0x44>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbSectors = NbOfSectors;
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <clearFlash+0x44>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	6093      	str	r3, [r2, #8]
	uint32_t SectorError = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8000fca:	f004 fb0b 	bl	80055e4 <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <clearFlash+0x44>)
 8000fd4:	f004 fc68 	bl	80058a8 <HAL_FLASHEx_Erase>
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();

	}
	HAL_FLASH_Lock();
 8000fd8:	f004 fb26 	bl	8005628 <HAL_FLASH_Lock>

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000a6c 	.word	0x20000a6c

08000fe8 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(char* data, int size, int offset) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <WriteDeviceAddressOffset+0x5c>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000ffc:	f004 faf2 	bl	80055e4 <HAL_FLASH_Unlock>
	for (int i = 0; i<size; i++){
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e012      	b.n	800102c <WriteDeviceAddressOffset+0x44>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address+i, data[i]) != HAL_OK){
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	18d1      	adds	r1, r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f004 fa86 	bl	800552c <HAL_FLASH_Program>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d107      	bne.n	8001036 <WriteDeviceAddressOffset+0x4e>
	for (int i = 0; i<size; i++){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbe8      	blt.n	8001006 <WriteDeviceAddressOffset+0x1e>
 8001034:	e000      	b.n	8001038 <WriteDeviceAddressOffset+0x50>
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			// int error = HAL_FLASH_GetError();

			break;
 8001036:	bf00      	nop
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001038:	f004 faf6 	bl	8005628 <HAL_FLASH_Lock>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	080c0000 	.word	0x080c0000

08001048 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ReadDeviceAddressOffset+0x4c>)
 8001058:	4413      	add	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00c      	b.n	800107c <ReadDeviceAddressOffset+0x34>
		Dout[i] = *(__IO char*)(Address+i);
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4413      	add	r3, r2
 8001068:	4619      	mov	r1, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	780a      	ldrb	r2, [r1, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbee      	blt.n	8001062 <ReadDeviceAddressOffset+0x1a>
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	080c0000 	.word	0x080c0000

08001098 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000a7c 	.word	0x20000a7c
 80010c8:	20000ad0 	.word	0x20000ad0

080010cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010f4:	e000      	b.n	80010f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f9      	beq.n	80010f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001102:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int i=0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc7 	bl	80010cc <ITM_SendChar>
	for(i=0;i<len;i++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x16>
	return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0c0      	sub	sp, #256	; 0x100
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(gps.day,0,sizeof(gps));
 800115e:	221b      	movs	r2, #27
 8001160:	2100      	movs	r1, #0
 8001162:	489c      	ldr	r0, [pc, #624]	; (80013d4 <main+0x27c>)
 8001164:	f01a faf4 	bl	801b750 <memset>
	// ZDA-38;RMC-68



	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8001168:	4b9b      	ldr	r3, [pc, #620]	; (80013d8 <main+0x280>)
 800116a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800116e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8001174:	4a99      	ldr	r2, [pc, #612]	; (80013dc <main+0x284>)
 8001176:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800117a:	ca07      	ldmia	r2, {r0, r1, r2}
 800117c:	c303      	stmia	r3!, {r0, r1}
 800117e:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8001180:	4b97      	ldr	r3, [pc, #604]	; (80013e0 <main+0x288>)
 8001182:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8001186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 800118c:	4a95      	ldr	r2, [pc, #596]	; (80013e4 <main+0x28c>)
 800118e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001192:	ca07      	ldmia	r2, {r0, r1, r2}
 8001194:	c303      	stmia	r3!, {r0, r1}
 8001196:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8001198:	4b93      	ldr	r3, [pc, #588]	; (80013e8 <main+0x290>)
 800119a:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80011a4:	4a91      	ldr	r2, [pc, #580]	; (80013ec <main+0x294>)
 80011a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80011b0:	4b8f      	ldr	r3, [pc, #572]	; (80013f0 <main+0x298>)
 80011b2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 80011bc:	4a8d      	ldr	r2, [pc, #564]	; (80013f4 <main+0x29c>)
 80011be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	c303      	stmia	r3!, {r0, r1}
 80011c6:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 80011c8:	4b8b      	ldr	r3, [pc, #556]	; (80013f8 <main+0x2a0>)
 80011ca:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80011d4:	4a89      	ldr	r2, [pc, #548]	; (80013fc <main+0x2a4>)
 80011d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011da:	ca07      	ldmia	r2, {r0, r1, r2}
 80011dc:	c303      	stmia	r3!, {r0, r1}
 80011de:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80011e0:	4b87      	ldr	r3, [pc, #540]	; (8001400 <main+0x2a8>)
 80011e2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80011ec:	4a85      	ldr	r2, [pc, #532]	; (8001404 <main+0x2ac>)
 80011ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	c303      	stmia	r3!, {r0, r1}
 80011f6:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 80011f8:	4b83      	ldr	r3, [pc, #524]	; (8001408 <main+0x2b0>)
 80011fa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001204:	4a81      	ldr	r2, [pc, #516]	; (800140c <main+0x2b4>)
 8001206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	c303      	stmia	r3!, {r0, r1}
 800120e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 ffd7 	bl	80041c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f908 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //MX_LWIP_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fa6e 	bl	80016f8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800121c:	f000 fa2a 	bl	8001674 <MX_USART6_UART_Init>
  MX_UART7_Init();
 8001220:	f000 f9f8 	bl	8001614 <MX_UART7_Init>
  MX_RTC_Init();
 8001224:	f000 f99a 	bl	800155c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 8001228:	f241 3088 	movw	r0, #5000	; 0x1388
 800122c:	f002 fff6 	bl	800421c <HAL_Delay>
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001230:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	2210      	movs	r2, #16
 800123a:	4875      	ldr	r0, [pc, #468]	; (8001410 <main+0x2b8>)
 800123c:	f006 fd6a 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001240:	2064      	movs	r0, #100	; 0x64
 8001242:	f002 ffeb 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 8001246:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	220a      	movs	r2, #10
 8001250:	486f      	ldr	r0, [pc, #444]	; (8001410 <main+0x2b8>)
 8001252:	f006 fd5f 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001256:	2064      	movs	r0, #100	; 0x64
 8001258:	f002 ffe0 	bl	800421c <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 800125c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	2210      	movs	r2, #16
 8001266:	486a      	ldr	r0, [pc, #424]	; (8001410 <main+0x2b8>)
 8001268:	f006 fd54 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 800126c:	2064      	movs	r0, #100	; 0x64
 800126e:	f002 ffd5 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 8001272:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	220a      	movs	r2, #10
 800127c:	4864      	ldr	r0, [pc, #400]	; (8001410 <main+0x2b8>)
 800127e:	f006 fd49 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f002 ffca 	bl	800421c <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 8001288:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800128c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001290:	2210      	movs	r2, #16
 8001292:	485f      	ldr	r0, [pc, #380]	; (8001410 <main+0x2b8>)
 8001294:	f006 fd3e 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001298:	2064      	movs	r0, #100	; 0x64
 800129a:	f002 ffbf 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 800129e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	220a      	movs	r2, #10
 80012a8:	4859      	ldr	r0, [pc, #356]	; (8001410 <main+0x2b8>)
 80012aa:	f006 fd33 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f002 ffb4 	bl	800421c <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 80012b4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012bc:	2210      	movs	r2, #16
 80012be:	4854      	ldr	r0, [pc, #336]	; (8001410 <main+0x2b8>)
 80012c0:	f006 fd28 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012c4:	2064      	movs	r0, #100	; 0x64
 80012c6:	f002 ffa9 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 80012ca:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	220a      	movs	r2, #10
 80012d4:	484e      	ldr	r0, [pc, #312]	; (8001410 <main+0x2b8>)
 80012d6:	f006 fd1d 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f002 ff9e 	bl	800421c <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80012e0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	2210      	movs	r2, #16
 80012ea:	4849      	ldr	r0, [pc, #292]	; (8001410 <main+0x2b8>)
 80012ec:	f006 fd12 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f002 ff93 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 80012f6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	220a      	movs	r2, #10
 8001300:	4843      	ldr	r0, [pc, #268]	; (8001410 <main+0x2b8>)
 8001302:	f006 fd07 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f002 ff88 	bl	800421c <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 800130c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	2210      	movs	r2, #16
 8001316:	483e      	ldr	r0, [pc, #248]	; (8001410 <main+0x2b8>)
 8001318:	f006 fcfc 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f002 ff7d 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 8001322:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	220a      	movs	r2, #10
 800132c:	4838      	ldr	r0, [pc, #224]	; (8001410 <main+0x2b8>)
 800132e:	f006 fcf1 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f002 ff72 	bl	800421c <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 8001338:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	2210      	movs	r2, #16
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <main+0x2b8>)
 8001344:	f006 fce6 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f002 ff67 	bl	800421c <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 800134e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	220a      	movs	r2, #10
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <main+0x2b8>)
 800135a:	f006 fcdb 	bl	8007d14 <HAL_UART_Transmit>
  HAL_Delay(100);
 800135e:	2064      	movs	r0, #100	; 0x64
 8001360:	f002 ff5c 	bl	800421c <HAL_Delay>

  //start the web server
  int offset =0;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 800136a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800136e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <main+0x2bc>)
 8001374:	f7ff fe68 	bl	8001048 <ReadDeviceAddressOffset>
 offset+=sizeof(user_info);
 8001378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800137c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8001380:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <main+0x2c0>)
 8001386:	f107 041c 	add.w	r4, r7, #28
 800138a:	461d      	mov	r5, r3
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fda2 	bl	8009ee8 <osThreadCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a1d      	ldr	r2, [pc, #116]	; (800141c <main+0x2c4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4a1c      	ldr	r2, [pc, #112]	; (8001420 <main+0x2c8>)
 80013ae:	461c      	mov	r4, r3
 80013b0:	4615      	mov	r5, r2
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80013be:	463b      	mov	r3, r7
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fd90 	bl	8009ee8 <osThreadCreate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <main+0x2cc>)
 80013cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013ce:	f008 fd74 	bl	8009eba <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <main+0x27a>
 80013d4:	2000509c 	.word	0x2000509c
 80013d8:	08024918 	.word	0x08024918
 80013dc:	08024928 	.word	0x08024928
 80013e0:	08024934 	.word	0x08024934
 80013e4:	08024944 	.word	0x08024944
 80013e8:	08024950 	.word	0x08024950
 80013ec:	08024960 	.word	0x08024960
 80013f0:	0802496c 	.word	0x0802496c
 80013f4:	0802497c 	.word	0x0802497c
 80013f8:	08024988 	.word	0x08024988
 80013fc:	08024998 	.word	0x08024998
 8001400:	080249a4 	.word	0x080249a4
 8001404:	080249b4 	.word	0x080249b4
 8001408:	080249c0 	.word	0x080249c0
 800140c:	080249d0 	.word	0x080249d0
 8001410:	200051e0 	.word	0x200051e0
 8001414:	200050b8 	.word	0x200050b8
 8001418:	080249dc 	.word	0x080249dc
 800141c:	200051dc 	.word	0x200051dc
 8001420:	080249f8 	.word	0x080249f8
 8001424:	20005268 	.word	0x20005268

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0b4      	sub	sp, #208	; 0xd0
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001432:	2230      	movs	r2, #48	; 0x30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f01a f98a 	bl	801b750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2284      	movs	r2, #132	; 0x84
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f01a f97b 	bl	801b750 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800145a:	f004 fcfb 	bl	8005e54 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <SystemClock_Config+0x12c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <SystemClock_Config+0x12c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <SystemClock_Config+0x12c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <SystemClock_Config+0x130>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a37      	ldr	r2, [pc, #220]	; (8001558 <SystemClock_Config+0x130>)
 800147c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <SystemClock_Config+0x130>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800148e:	2309      	movs	r3, #9
 8001490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014b0:	2319      	movs	r3, #25
 80014b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80014b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014c4:	2309      	movs	r3, #9
 80014c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fd20 	bl	8005f14 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014da:	f001 fad9 	bl	8002a90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014de:	f004 fcc9 	bl	8005e74 <HAL_PWREx_EnableOverDrive>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014e8:	f001 fad2 	bl	8002a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ec:	230f      	movs	r3, #15
 80014ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800150e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001512:	2106      	movs	r1, #6
 8001514:	4618      	mov	r0, r3
 8001516:	f004 ffa1 	bl	800645c <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001520:	f001 fab6 	bl	8002a90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 8001524:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001528:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001530:	2300      	movs	r3, #0
 8001532:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4618      	mov	r0, r3
 800153e:	f005 f995 	bl	800686c <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001548:	f001 faa2 	bl	8002a90 <Error_Handler>
  }
}
 800154c:	bf00      	nop
 800154e:	37d0      	adds	r7, #208	; 0xd0
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_RTC_Init+0xb0>)
 800157a:	4a25      	ldr	r2, [pc, #148]	; (8001610 <MX_RTC_Init+0xb4>)
 800157c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_RTC_Init+0xb0>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_RTC_Init+0xb0>)
 8001586:	227f      	movs	r2, #127	; 0x7f
 8001588:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_RTC_Init+0xb0>)
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_RTC_Init+0xb0>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_RTC_Init+0xb0>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_RTC_Init+0xb0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015a2:	481a      	ldr	r0, [pc, #104]	; (800160c <MX_RTC_Init+0xb0>)
 80015a4:	f005 fd52 	bl	800704c <HAL_RTC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80015ae:	f001 fa6f 	bl	8002a90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80015b2:	2317      	movs	r3, #23
 80015b4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 80015b6:	233b      	movs	r3, #59	; 0x3b
 80015b8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	; (800160c <MX_RTC_Init+0xb0>)
 80015d0:	f005 fdce 	bl	8007170 <HAL_RTC_SetTime>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80015da:	f001 fa59 	bl	8002a90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015de:	2307      	movs	r3, #7
 80015e0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80015e2:	2312      	movs	r3, #18
 80015e4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80015e6:	231f      	movs	r3, #31
 80015e8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_RTC_Init+0xb0>)
 80015f6:	f005 fed7 	bl	80073a8 <HAL_RTC_SetDate>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001600:	f001 fa46 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000526c 	.word	0x2000526c
 8001610:	40002800 	.word	0x40002800

08001614 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_UART7_Init+0x58>)
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <MX_UART7_Init+0x5c>)
 800161c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_UART7_Init+0x58>)
 8001620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001624:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_UART7_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_UART7_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_UART7_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_UART7_Init+0x58>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_UART7_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_UART7_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_UART7_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_UART7_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_UART7_Init+0x58>)
 8001658:	f006 fb0e 	bl	8007c78 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001662:	f001 fa15 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200051e0 	.word	0x200051e0
 8001670:	40007800 	.word	0x40007800

08001674 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_USART6_UART_Init+0x78>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_USART6_UART_Init+0x78>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0220 	orr.w	r2, r2, #32
 8001686:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_USART6_UART_Init+0x78>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_USART6_UART_Init+0x78>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0210 	orr.w	r2, r2, #16
 8001696:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 800169a:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <MX_USART6_UART_Init+0x80>)
 800169c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <MX_USART6_UART_Init+0x7c>)
 80016d8:	f006 face 	bl	8007c78 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 80016e2:	f001 f9d5 	bl	8002a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200051e0 	.word	0x200051e0
 80016f0:	20005290 	.word	0x20005290
 80016f4:	40011400 	.word	0x40011400

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4bae      	ldr	r3, [pc, #696]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4aad      	ldr	r2, [pc, #692]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4bab      	ldr	r3, [pc, #684]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001726:	4ba8      	ldr	r3, [pc, #672]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4aa7      	ldr	r2, [pc, #668]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4ba5      	ldr	r3, [pc, #660]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4aa1      	ldr	r2, [pc, #644]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b9f      	ldr	r3, [pc, #636]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a9b      	ldr	r2, [pc, #620]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b99      	ldr	r3, [pc, #612]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4b96      	ldr	r3, [pc, #600]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a95      	ldr	r2, [pc, #596]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b93      	ldr	r3, [pc, #588]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a8f      	ldr	r2, [pc, #572]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b8d      	ldr	r3, [pc, #564]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a89      	ldr	r2, [pc, #548]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b87      	ldr	r3, [pc, #540]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017b6:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a83      	ldr	r2, [pc, #524]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017ce:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a7d      	ldr	r2, [pc, #500]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b7b      	ldr	r3, [pc, #492]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	4b78      	ldr	r3, [pc, #480]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a77      	ldr	r2, [pc, #476]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b72      	ldr	r3, [pc, #456]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a71      	ldr	r2, [pc, #452]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <MX_GPIO_Init+0x2d0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2120      	movs	r1, #32
 800181a:	486c      	ldr	r0, [pc, #432]	; (80019cc <MX_GPIO_Init+0x2d4>)
 800181c:	f004 fae6 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|Led1_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	210f      	movs	r1, #15
 8001824:	486a      	ldr	r0, [pc, #424]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001826:	f004 fae1 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2108      	movs	r1, #8
 800182e:	4869      	ldr	r0, [pc, #420]	; (80019d4 <MX_GPIO_Init+0x2dc>)
 8001830:	f004 fadc 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	4865      	ldr	r0, [pc, #404]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800183c:	f004 fad6 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001846:	4864      	ldr	r0, [pc, #400]	; (80019d8 <MX_GPIO_Init+0x2e0>)
 8001848:	f004 fad0 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	21c8      	movs	r1, #200	; 0xc8
 8001850:	4862      	ldr	r0, [pc, #392]	; (80019dc <MX_GPIO_Init+0x2e4>)
 8001852:	f004 facb 	bl	8005dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001856:	2310      	movs	r3, #16
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001866:	230e      	movs	r3, #14
 8001868:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	485b      	ldr	r0, [pc, #364]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 8001872:	f004 f8f7 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001876:	2308      	movs	r3, #8
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	4619      	mov	r1, r3
 8001888:	4855      	ldr	r0, [pc, #340]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 800188a:	f004 f8eb 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800188e:	2304      	movs	r3, #4
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800189e:	2309      	movs	r3, #9
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	4619      	mov	r1, r3
 80018a8:	484d      	ldr	r0, [pc, #308]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80018aa:	f004 f8db 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80018ae:	f64f 7383 	movw	r3, #65411	; 0xff83
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c0:	230c      	movs	r3, #12
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4845      	ldr	r0, [pc, #276]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80018cc:	f004 f8ca 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80018d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d6:	2312      	movs	r3, #18
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018da:	2301      	movs	r3, #1
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e2:	2304      	movs	r3, #4
 80018e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ea:	4619      	mov	r1, r3
 80018ec:	483d      	ldr	r0, [pc, #244]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 80018ee:	f004 f8b9 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80018f2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001904:	230a      	movs	r3, #10
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	4619      	mov	r1, r3
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 8001910:	f004 f8a8 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001914:	2310      	movs	r3, #16
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001924:	2302      	movs	r3, #2
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	482d      	ldr	r0, [pc, #180]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 8001930:	f004 f898 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001944:	2308      	movs	r3, #8
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	481f      	ldr	r0, [pc, #124]	; (80019cc <MX_GPIO_Init+0x2d4>)
 8001950:	f004 f888 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001954:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001966:	230c      	movs	r3, #12
 8001968:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196e:	4619      	mov	r1, r3
 8001970:	481d      	ldr	r0, [pc, #116]	; (80019e8 <MX_GPIO_Init+0x2f0>)
 8001972:	f004 f877 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001988:	2301      	movs	r3, #1
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <MX_GPIO_Init+0x2f4>)
 8001994:	f004 f866 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001998:	2360      	movs	r3, #96	; 0x60
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019a8:	230d      	movs	r3, #13
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80019b4:	f004 f856 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
 80019c4:	e014      	b.n	80019f0 <MX_GPIO_Init+0x2f8>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40022800 	.word	0x40022800
 80019d8:	40021c00 	.word	0x40021c00
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f4:	2307      	movs	r3, #7
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	48bd      	ldr	r0, [pc, #756]	; (8001cf4 <MX_GPIO_Init+0x5fc>)
 8001a00:	f004 f830 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a14:	230a      	movs	r3, #10
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	48b5      	ldr	r0, [pc, #724]	; (8001cf4 <MX_GPIO_Init+0x5fc>)
 8001a20:	f004 f820 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001a24:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a36:	230c      	movs	r3, #12
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	48ad      	ldr	r0, [pc, #692]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001a42:	f004 f80f 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001a46:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a58:	230e      	movs	r3, #14
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	4619      	mov	r1, r3
 8001a62:	48a6      	ldr	r0, [pc, #664]	; (8001cfc <MX_GPIO_Init+0x604>)
 8001a64:	f003 fffe 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	489f      	ldr	r0, [pc, #636]	; (8001cfc <MX_GPIO_Init+0x604>)
 8001a7e:	f003 fff1 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a82:	2340      	movs	r3, #64	; 0x40
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	489a      	ldr	r0, [pc, #616]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001a98:	f003 ffe4 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001a9c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4891      	ldr	r0, [pc, #580]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001aba:	f003 ffd3 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001abe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	488a      	ldr	r0, [pc, #552]	; (8001d04 <MX_GPIO_Init+0x60c>)
 8001adc:	f003 ffc2 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001ae0:	23f0      	movs	r3, #240	; 0xf0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001af0:	230a      	movs	r3, #10
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4883      	ldr	r0, [pc, #524]	; (8001d08 <MX_GPIO_Init+0x610>)
 8001afc:	f003 ffb2 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b00:	23f7      	movs	r3, #247	; 0xf7
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b10:	230e      	movs	r3, #14
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	487c      	ldr	r0, [pc, #496]	; (8001d0c <MX_GPIO_Init+0x614>)
 8001b1c:	f003 ffa2 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b32:	2309      	movs	r3, #9
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	486e      	ldr	r0, [pc, #440]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001b3e:	f003 ff91 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b54:	230a      	movs	r3, #10
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4866      	ldr	r0, [pc, #408]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001b60:	f003 ff80 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b64:	2320      	movs	r3, #32
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001b7c:	f003 ff72 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001b80:	2308      	movs	r3, #8
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b90:	230d      	movs	r3, #13
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4859      	ldr	r0, [pc, #356]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001b9c:	f003 ff62 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin Led_Pin LCD_DISP_Pin
                           Led1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|LCD_DISP_Pin
 8001ba0:	f241 030f 	movw	r3, #4111	; 0x100f
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |Led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4853      	ldr	r0, [pc, #332]	; (8001d08 <MX_GPIO_Init+0x610>)
 8001bba:	f003 ff53 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	484f      	ldr	r0, [pc, #316]	; (8001d10 <MX_GPIO_Init+0x618>)
 8001bd4:	f003 ff46 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001bd8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bea:	230c      	movs	r3, #12
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4847      	ldr	r0, [pc, #284]	; (8001d14 <MX_GPIO_Init+0x61c>)
 8001bf6:	f003 ff35 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001bfa:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c0c:	230e      	movs	r3, #14
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c14:	4619      	mov	r1, r3
 8001c16:	483c      	ldr	r0, [pc, #240]	; (8001d08 <MX_GPIO_Init+0x610>)
 8001c18:	f003 ff24 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c30:	4619      	mov	r1, r3
 8001c32:	4836      	ldr	r0, [pc, #216]	; (8001d0c <MX_GPIO_Init+0x614>)
 8001c34:	f003 ff16 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c4a:	230d      	movs	r3, #13
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c52:	4619      	mov	r1, r3
 8001c54:	4828      	ldr	r0, [pc, #160]	; (8001cf8 <MX_GPIO_Init+0x600>)
 8001c56:	f003 ff05 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4824      	ldr	r0, [pc, #144]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001c6e:	f003 fef9 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001c72:	2304      	movs	r3, #4
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c82:	230c      	movs	r3, #12
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481c      	ldr	r0, [pc, #112]	; (8001d00 <MX_GPIO_Init+0x608>)
 8001c8e:	f003 fee9 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c92:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <MX_GPIO_Init+0x620>)
 8001ca8:	f003 fedc 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4814      	ldr	r0, [pc, #80]	; (8001d18 <MX_GPIO_Init+0x620>)
 8001cc6:	f003 fecd 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001cca:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cdc:	230d      	movs	r3, #13
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x620>)
 8001ce8:	f003 febc 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf0:	e014      	b.n	8001d1c <MX_GPIO_Init+0x624>
 8001cf2:	bf00      	nop
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40022400 	.word	0x40022400
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40022800 	.word	0x40022800
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40021400 	.word	0x40021400
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	488c      	ldr	r0, [pc, #560]	; (8001f68 <MX_GPIO_Init+0x870>)
 8001d36:	f003 fe95 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001d3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4887      	ldr	r0, [pc, #540]	; (8001f6c <MX_GPIO_Init+0x874>)
 8001d50:	f003 fe88 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6e:	4619      	mov	r1, r3
 8001d70:	487d      	ldr	r0, [pc, #500]	; (8001f68 <MX_GPIO_Init+0x870>)
 8001d72:	f003 fe77 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4877      	ldr	r0, [pc, #476]	; (8001f6c <MX_GPIO_Init+0x874>)
 8001d8e:	f003 fe69 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d92:	2310      	movs	r3, #16
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001da2:	230a      	movs	r3, #10
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	4619      	mov	r1, r3
 8001dac:	4870      	ldr	r0, [pc, #448]	; (8001f70 <MX_GPIO_Init+0x878>)
 8001dae:	f003 fe59 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001db2:	2328      	movs	r3, #40	; 0x28
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4868      	ldr	r0, [pc, #416]	; (8001f70 <MX_GPIO_Init+0x878>)
 8001dce:	f003 fe49 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001dd2:	23c8      	movs	r3, #200	; 0xc8
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	4862      	ldr	r0, [pc, #392]	; (8001f74 <MX_GPIO_Init+0x87c>)
 8001dea:	f003 fe3b 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001dee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	2303      	movs	r3, #3
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e00:	4619      	mov	r1, r3
 8001e02:	485d      	ldr	r0, [pc, #372]	; (8001f78 <MX_GPIO_Init+0x880>)
 8001e04:	f003 fe2e 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	4619      	mov	r1, r3
 8001e22:	4856      	ldr	r0, [pc, #344]	; (8001f7c <MX_GPIO_Init+0x884>)
 8001e24:	f003 fe1e 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e38:	230a      	movs	r3, #10
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e40:	4619      	mov	r1, r3
 8001e42:	484e      	ldr	r0, [pc, #312]	; (8001f7c <MX_GPIO_Init+0x884>)
 8001e44:	f003 fe0e 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e58:	2309      	movs	r3, #9
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e60:	4619      	mov	r1, r3
 8001e62:	4847      	ldr	r0, [pc, #284]	; (8001f80 <MX_GPIO_Init+0x888>)
 8001e64:	f003 fdfe 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001e68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e76:	2303      	movs	r3, #3
 8001e78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e7a:	2309      	movs	r3, #9
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e82:	4619      	mov	r1, r3
 8001e84:	483f      	ldr	r0, [pc, #252]	; (8001f84 <MX_GPIO_Init+0x88c>)
 8001e86:	f003 fded 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4835      	ldr	r0, [pc, #212]	; (8001f74 <MX_GPIO_Init+0x87c>)
 8001e9e:	f003 fde1 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	482c      	ldr	r0, [pc, #176]	; (8001f68 <MX_GPIO_Init+0x870>)
 8001eb6:	f003 fdd5 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001eba:	2350      	movs	r3, #80	; 0x50
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001eca:	230d      	movs	r3, #13
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4824      	ldr	r0, [pc, #144]	; (8001f68 <MX_GPIO_Init+0x870>)
 8001ed6:	f003 fdc5 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001eda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee0:	2312      	movs	r3, #18
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eec:	2304      	movs	r3, #4
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <MX_GPIO_Init+0x878>)
 8001ef8:	f003 fdb4 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001efc:	2328      	movs	r3, #40	; 0x28
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	4619      	mov	r1, r3
 8001f16:	4814      	ldr	r0, [pc, #80]	; (8001f68 <MX_GPIO_Init+0x870>)
 8001f18:	f003 fda4 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001f1c:	2340      	movs	r3, #64	; 0x40
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001f2c:	2309      	movs	r3, #9
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f34:	4619      	mov	r1, r3
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <MX_GPIO_Init+0x878>)
 8001f38:	f003 fd94 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001f3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <MX_GPIO_Init+0x888>)
 8001f5a:	f003 fd83 	bl	8005a64 <HAL_GPIO_Init>

}
 8001f5e:	bf00      	nop
 8001f60:	3740      	adds	r7, #64	; 0x40
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40021c00 	.word	0x40021c00
 8001f74:	40021800 	.word	0x40021800
 8001f78:	40021400 	.word	0x40021400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40020c00 	.word	0x40020c00

08001f88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_UART_RxCpltCallback+0x1ac>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	f040 82b9 	bne.w	8002522 <HAL_UART_RxCpltCallback+0x59a>
		//$ message start
		if(buff[0]=='$'){
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_UART_RxCpltCallback+0x1b0>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b24      	cmp	r3, #36	; 0x24
 8001fb6:	d106      	bne.n	8001fc6 <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001fb8:	4b60      	ldr	r3, [pc, #384]	; (800213c <HAL_UART_RxCpltCallback+0x1b4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001fbe:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_UART_RxCpltCallback+0x1b8>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e00f      	b.n	8001fe6 <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_UART_RxCpltCallback+0x1b4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_UART_RxCpltCallback+0x5e>
 8001fce:	4b5a      	ldr	r3, [pc, #360]	; (8002138 <HAL_UART_RxCpltCallback+0x1b0>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b47      	cmp	r3, #71	; 0x47
 8001fd4:	d007      	beq.n	8001fe6 <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001fd6:	4b59      	ldr	r3, [pc, #356]	; (800213c <HAL_UART_RxCpltCallback+0x1b4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_UART_RxCpltCallback+0x1bc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_UART_RxCpltCallback+0x1bc>)
 8001fe4:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001fe6:	4b54      	ldr	r3, [pc, #336]	; (8002138 <HAL_UART_RxCpltCallback+0x1b0>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_UART_RxCpltCallback+0x1b4>)
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fb5f 	bl	80026b4 <calc_crc>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d13e      	bne.n	800207e <HAL_UART_RxCpltCallback+0xf6>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8002000:	f000 fbb4 	bl	800276c <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8002004:	4850      	ldr	r0, [pc, #320]	; (8002148 <HAL_UART_RxCpltCallback+0x1c0>)
 8002006:	f019 fa4f 	bl	801b4a8 <atoi>
 800200a:	4603      	mov	r3, r0
 800200c:	3b01      	subs	r3, #1
 800200e:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 8002010:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8002012:	484f      	ldr	r0, [pc, #316]	; (8002150 <HAL_UART_RxCpltCallback+0x1c8>)
 8002014:	f019 fa48 	bl	801b4a8 <atoi>
 8002018:	4603      	mov	r3, r0
 800201a:	4a4c      	ldr	r2, [pc, #304]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 800201c:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 800201e:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <HAL_UART_RxCpltCallback+0x1cc>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b30      	cmp	r3, #48	; 0x30
 8002024:	d108      	bne.n	8002038 <HAL_UART_RxCpltCallback+0xb0>
 8002026:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_UART_RxCpltCallback+0x1cc>)
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	2b30      	cmp	r3, #48	; 0x30
 800202c:	d104      	bne.n	8002038 <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_UART_RxCpltCallback+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3364      	adds	r3, #100	; 0x64
 8002034:	4a48      	ldr	r2, [pc, #288]	; (8002158 <HAL_UART_RxCpltCallback+0x1d0>)
 8002036:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8002038:	4846      	ldr	r0, [pc, #280]	; (8002154 <HAL_UART_RxCpltCallback+0x1cc>)
 800203a:	f019 fa35 	bl	801b4a8 <atoi>
 800203e:	4602      	mov	r2, r0
 8002040:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_UART_RxCpltCallback+0x1d0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4413      	add	r3, r2
 8002046:	4a41      	ldr	r2, [pc, #260]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 8002048:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 800204a:	4844      	ldr	r0, [pc, #272]	; (800215c <HAL_UART_RxCpltCallback+0x1d4>)
 800204c:	f019 fa2c 	bl	801b4a8 <atoi>
 8002050:	4603      	mov	r3, r0
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 8002054:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8002056:	4842      	ldr	r0, [pc, #264]	; (8002160 <HAL_UART_RxCpltCallback+0x1d8>)
 8002058:	f019 fa26 	bl	801b4a8 <atoi>
 800205c:	4603      	mov	r3, r0
 800205e:	4a3b      	ldr	r2, [pc, #236]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 8002060:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8002062:	4840      	ldr	r0, [pc, #256]	; (8002164 <HAL_UART_RxCpltCallback+0x1dc>)
 8002064:	f019 fa20 	bl	801b4a8 <atoi>
 8002068:	4603      	mov	r3, r0
 800206a:	4a38      	ldr	r2, [pc, #224]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 800206c:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 800206e:	4837      	ldr	r0, [pc, #220]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 8002070:	f019 fc4e 	bl	801b910 <mktime>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	493b      	ldr	r1, [pc, #236]	; (8002168 <HAL_UART_RxCpltCallback+0x1e0>)
 800207a:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	2b01      	cmp	r3, #1
 8002082:	d14a      	bne.n	800211a <HAL_UART_RxCpltCallback+0x192>
 8002084:	f000 fb72 	bl	800276c <rtc_read>
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_UART_RxCpltCallback+0x1e0>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	4299      	cmp	r1, r3
 8002090:	bf08      	it	eq
 8002092:	4290      	cmpeq	r0, r2
 8002094:	d041      	beq.n	800211a <HAL_UART_RxCpltCallback+0x192>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 8002096:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_UART_RxCpltCallback+0x1e0>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_UART_RxCpltCallback+0x1e4>)
 800209e:	4413      	add	r3, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00d fece 	bl	800fe42 <lwip_htonl>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a31      	ldr	r2, [pc, #196]	; (8002170 <HAL_UART_RxCpltCallback+0x1e8>)
 80020aa:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2200      	movs	r2, #0
 80020ce:	4619      	mov	r1, r3
 80020d0:	4828      	ldr	r0, [pc, #160]	; (8002174 <HAL_UART_RxCpltCallback+0x1ec>)
 80020d2:	f005 f84d 	bl	8007170 <HAL_RTC_SetTime>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_RxCpltCallback+0x158>
			{
				Error_Handler();
 80020dc:	f000 fcd8 	bl	8002a90 <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_UART_RxCpltCallback+0x1c4>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_UART_RxCpltCallback+0x1d0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	72fb      	strb	r3, [r7, #11]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	481a      	ldr	r0, [pc, #104]	; (8002174 <HAL_UART_RxCpltCallback+0x1ec>)
 800210c:	f005 f94c 	bl	80073a8 <HAL_RTC_SetDate>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_UART_RxCpltCallback+0x192>
			{
				Error_Handler();
 8002116:	f000 fcbb 	bl	8002a90 <Error_Handler>

		}
		//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_UART_RxCpltCallback+0x1b4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d12c      	bne.n	800217c <HAL_UART_RxCpltCallback+0x1f4>
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_UART_RxCpltCallback+0x1b0>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b5a      	cmp	r3, #90	; 0x5a
 8002128:	d128      	bne.n	800217c <HAL_UART_RxCpltCallback+0x1f4>
			Tipe_Mes=1;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_UART_RxCpltCallback+0x1f0>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e02f      	b.n	8002192 <HAL_UART_RxCpltCallback+0x20a>
 8002132:	bf00      	nop
 8002134:	200051e0 	.word	0x200051e0
 8002138:	20000d0c 	.word	0x20000d0c
 800213c:	20000cf4 	.word	0x20000cf4
 8002140:	20000ce0 	.word	0x20000ce0
 8002144:	20000cd0 	.word	0x20000cd0
 8002148:	2000509f 	.word	0x2000509f
 800214c:	20005318 	.word	0x20005318
 8002150:	2000509c 	.word	0x2000509c
 8002154:	20000d10 	.word	0x20000d10
 8002158:	20000008 	.word	0x20000008
 800215c:	200050a7 	.word	0x200050a7
 8002160:	200050aa 	.word	0x200050aa
 8002164:	200050ad 	.word	0x200050ad
 8002168:	20000cd8 	.word	0x20000cd8
 800216c:	83aa7e80 	.word	0x83aa7e80
 8002170:	20005314 	.word	0x20005314
 8002174:	2000526c 	.word	0x2000526c
 8002178:	20000cd4 	.word	0x20000cd4
		}
		else if(count==3&&buff[0]=='R'){
 800217c:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <HAL_UART_RxCpltCallback+0x43c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d106      	bne.n	8002192 <HAL_UART_RxCpltCallback+0x20a>
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b52      	cmp	r3, #82	; 0x52
 800218a:	d102      	bne.n	8002192 <HAL_UART_RxCpltCallback+0x20a>
			Tipe_Mes=2;
 800218c:	4b8f      	ldr	r3, [pc, #572]	; (80023cc <HAL_UART_RxCpltCallback+0x444>)
 800218e:	2202      	movs	r2, #2
 8002190:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8002192:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <HAL_UART_RxCpltCallback+0x444>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 80d4 	bne.w	8002344 <HAL_UART_RxCpltCallback+0x3bc>

			if(count==6&&buff[0]!=','){
 800219c:	4b89      	ldr	r3, [pc, #548]	; (80023c4 <HAL_UART_RxCpltCallback+0x43c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b06      	cmp	r3, #6
 80021a2:	d10b      	bne.n	80021bc <HAL_UART_RxCpltCallback+0x234>
 80021a4:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b2c      	cmp	r3, #44	; 0x2c
 80021aa:	d007      	beq.n	80021bc <HAL_UART_RxCpltCallback+0x234>
				count=0;
 80021ac:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_UART_RxCpltCallback+0x43c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
				ERRORS++;
 80021b2:	4b87      	ldr	r3, [pc, #540]	; (80023d0 <HAL_UART_RxCpltCallback+0x448>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <HAL_UART_RxCpltCallback+0x448>)
 80021ba:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 80021bc:	4b82      	ldr	r3, [pc, #520]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b2c      	cmp	r3, #44	; 0x2c
 80021c2:	d107      	bne.n	80021d4 <HAL_UART_RxCpltCallback+0x24c>
				zpt++;
 80021c4:	4b83      	ldr	r3, [pc, #524]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4a82      	ldr	r2, [pc, #520]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80021cc:	6013      	str	r3, [r2, #0]
				ind=0;
 80021ce:	4b82      	ldr	r3, [pc, #520]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 80021d4:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10e      	bne.n	80021fa <HAL_UART_RxCpltCallback+0x272>
 80021dc:	4b7a      	ldr	r3, [pc, #488]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b2c      	cmp	r3, #44	; 0x2c
 80021e2:	d00a      	beq.n	80021fa <HAL_UART_RxCpltCallback+0x272>
				time_buff[ind]=buff[0];
 80021e4:	4b7c      	ldr	r3, [pc, #496]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80021ea:	7811      	ldrb	r1, [r2, #0]
 80021ec:	4a7b      	ldr	r2, [pc, #492]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80021ee:	54d1      	strb	r1, [r2, r3]
				ind++;
 80021f0:	4b79      	ldr	r3, [pc, #484]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	4a78      	ldr	r2, [pc, #480]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80021f8:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d127      	bne.n	8002252 <HAL_UART_RxCpltCallback+0x2ca>
 8002202:	4b71      	ldr	r3, [pc, #452]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b2c      	cmp	r3, #44	; 0x2c
 8002208:	d123      	bne.n	8002252 <HAL_UART_RxCpltCallback+0x2ca>
				gps.hours[0]=time_buff[0];
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	4b74      	ldr	r3, [pc, #464]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002210:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002214:	785a      	ldrb	r2, [r3, #1]
 8002216:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002218:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 800221a:	4b70      	ldr	r3, [pc, #448]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800221c:	789a      	ldrb	r2, [r3, #2]
 800221e:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002220:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002224:	78da      	ldrb	r2, [r3, #3]
 8002226:	4b6e      	ldr	r3, [pc, #440]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002228:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 800222a:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800222c:	791a      	ldrb	r2, [r3, #4]
 800222e:	4b6c      	ldr	r3, [pc, #432]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002230:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 8002232:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002234:	795a      	ldrb	r2, [r3, #5]
 8002236:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002238:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 800223a:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800223c:	799a      	ldrb	r2, [r3, #6]
 800223e:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002240:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 8002242:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002244:	79da      	ldrb	r2, [r3, #7]
 8002246:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002248:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 800224a:	4b64      	ldr	r3, [pc, #400]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800224c:	7a1a      	ldrb	r2, [r3, #8]
 800224e:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002250:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 8002252:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d10e      	bne.n	8002278 <HAL_UART_RxCpltCallback+0x2f0>
 800225a:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b2c      	cmp	r3, #44	; 0x2c
 8002260:	d00a      	beq.n	8002278 <HAL_UART_RxCpltCallback+0x2f0>

				time_buff[ind]=buff[0];
 8002262:	4b5d      	ldr	r3, [pc, #372]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002268:	7811      	ldrb	r1, [r2, #0]
 800226a:	4a5c      	ldr	r2, [pc, #368]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800226c:	54d1      	strb	r1, [r2, r3]
				ind++;
 800226e:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 8002276:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8002278:	4b56      	ldr	r3, [pc, #344]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d10b      	bne.n	8002298 <HAL_UART_RxCpltCallback+0x310>
 8002280:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b2c      	cmp	r3, #44	; 0x2c
 8002286:	d107      	bne.n	8002298 <HAL_UART_RxCpltCallback+0x310>
				gps.day[0]=time_buff[0];
 8002288:	4b54      	ldr	r3, [pc, #336]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b54      	ldr	r3, [pc, #336]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 800228e:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002292:	785a      	ldrb	r2, [r3, #1]
 8002294:	4b52      	ldr	r3, [pc, #328]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002296:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 8002298:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d10e      	bne.n	80022be <HAL_UART_RxCpltCallback+0x336>
 80022a0:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b2c      	cmp	r3, #44	; 0x2c
 80022a6:	d00a      	beq.n	80022be <HAL_UART_RxCpltCallback+0x336>

				time_buff[ind]=buff[0];
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a46      	ldr	r2, [pc, #280]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80022ae:	7811      	ldrb	r1, [r2, #0]
 80022b0:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80022b2:	54d1      	strb	r1, [r2, r3]
				ind++;
 80022b4:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a47      	ldr	r2, [pc, #284]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80022bc:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 80022be:	4b45      	ldr	r3, [pc, #276]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d10b      	bne.n	80022de <HAL_UART_RxCpltCallback+0x356>
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b2c      	cmp	r3, #44	; 0x2c
 80022cc:	d107      	bne.n	80022de <HAL_UART_RxCpltCallback+0x356>
				gps.month[0]=time_buff[0];
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 80022d4:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80022d8:	785a      	ldrb	r2, [r3, #1]
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 80022dc:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d10e      	bne.n	8002304 <HAL_UART_RxCpltCallback+0x37c>
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b2c      	cmp	r3, #44	; 0x2c
 80022ec:	d00a      	beq.n	8002304 <HAL_UART_RxCpltCallback+0x37c>

				time_buff[ind]=buff[0];
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a35      	ldr	r2, [pc, #212]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80022f4:	7811      	ldrb	r1, [r2, #0]
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80022f8:	54d1      	strb	r1, [r2, r3]
				ind++;
 80022fa:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	4a35      	ldr	r2, [pc, #212]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 8002302:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8002304:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d11b      	bne.n	8002344 <HAL_UART_RxCpltCallback+0x3bc>
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b2c      	cmp	r3, #44	; 0x2c
 8002312:	d117      	bne.n	8002344 <HAL_UART_RxCpltCallback+0x3bc>
				gps.year[0]=time_buff[0];
 8002314:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 800231a:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800231e:	785a      	ldrb	r2, [r3, #1]
 8002320:	4b2f      	ldr	r3, [pc, #188]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002322:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002326:	789a      	ldrb	r2, [r3, #2]
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 800232a:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800232e:	78da      	ldrb	r2, [r3, #3]
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_UART_RxCpltCallback+0x458>)
 8002332:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 8002336:	789a      	ldrb	r2, [r3, #2]
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_UART_RxCpltCallback+0x45c>)
 800233a:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 800233e:	78da      	ldrb	r2, [r3, #3]
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_UART_RxCpltCallback+0x45c>)
 8002342:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_UART_RxCpltCallback+0x444>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	f040 80c9 	bne.w	80024e0 <HAL_UART_RxCpltCallback+0x558>

			if(count==6&&buff[0]!=','){
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_UART_RxCpltCallback+0x43c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d10b      	bne.n	800236e <HAL_UART_RxCpltCallback+0x3e6>
 8002356:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b2c      	cmp	r3, #44	; 0x2c
 800235c:	d007      	beq.n	800236e <HAL_UART_RxCpltCallback+0x3e6>
				count=0;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_UART_RxCpltCallback+0x43c>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <HAL_UART_RxCpltCallback+0x448>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_UART_RxCpltCallback+0x448>)
 800236c:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b2c      	cmp	r3, #44	; 0x2c
 8002374:	d107      	bne.n	8002386 <HAL_UART_RxCpltCallback+0x3fe>
				zpt++;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 800237e:	6013      	str	r3, [r2, #0]
				ind=0;
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10e      	bne.n	80023ac <HAL_UART_RxCpltCallback+0x424>
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b2c      	cmp	r3, #44	; 0x2c
 8002394:	d00a      	beq.n	80023ac <HAL_UART_RxCpltCallback+0x424>

				time_buff[ind]=buff[0];
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 800239c:	7811      	ldrb	r1, [r2, #0]
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80023a0:	54d1      	strb	r1, [r2, r3]
				ind++;
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_UART_RxCpltCallback+0x450>)
 80023aa:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_UART_RxCpltCallback+0x44c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d13b      	bne.n	800242c <HAL_UART_RxCpltCallback+0x4a4>
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_UART_RxCpltCallback+0x440>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b2c      	cmp	r3, #44	; 0x2c
 80023ba:	d137      	bne.n	800242c <HAL_UART_RxCpltCallback+0x4a4>
				gps.hours[0]=time_buff[0];
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_UART_RxCpltCallback+0x454>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	e012      	b.n	80023e8 <HAL_UART_RxCpltCallback+0x460>
 80023c2:	bf00      	nop
 80023c4:	20000cf4 	.word	0x20000cf4
 80023c8:	20000d0c 	.word	0x20000d0c
 80023cc:	20000cd4 	.word	0x20000cd4
 80023d0:	20000cd0 	.word	0x20000cd0
 80023d4:	20000ce0 	.word	0x20000ce0
 80023d8:	20000cec 	.word	0x20000cec
 80023dc:	20000cfc 	.word	0x20000cfc
 80023e0:	2000509c 	.word	0x2000509c
 80023e4:	20000d10 	.word	0x20000d10
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80023ea:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80023ee:	785a      	ldrb	r2, [r3, #1]
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80023f2:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80023f4:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80023f6:	789a      	ldrb	r2, [r3, #2]
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80023fa:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80023fe:	78da      	ldrb	r2, [r3, #3]
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 8002402:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 8002404:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 8002406:	791a      	ldrb	r2, [r3, #4]
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 800240a:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 800240c:	4b48      	ldr	r3, [pc, #288]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 800240e:	795a      	ldrb	r2, [r3, #5]
 8002410:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 8002412:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 8002414:	4b46      	ldr	r3, [pc, #280]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 8002416:	799a      	ldrb	r2, [r3, #6]
 8002418:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 800241a:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 800241c:	4b44      	ldr	r3, [pc, #272]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 800241e:	79da      	ldrb	r2, [r3, #7]
 8002420:	4b42      	ldr	r3, [pc, #264]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 8002422:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 8002426:	7a1a      	ldrb	r2, [r3, #8]
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 800242a:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_UART_RxCpltCallback+0x5ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d10e      	bne.n	8002452 <HAL_UART_RxCpltCallback+0x4ca>
 8002434:	4b40      	ldr	r3, [pc, #256]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b2c      	cmp	r3, #44	; 0x2c
 800243a:	d00a      	beq.n	8002452 <HAL_UART_RxCpltCallback+0x4ca>

				time_buff[ind]=buff[0];
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_UART_RxCpltCallback+0x5b4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3d      	ldr	r2, [pc, #244]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 8002442:	7811      	ldrb	r1, [r2, #0]
 8002444:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 8002446:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <HAL_UART_RxCpltCallback+0x5b4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a3b      	ldr	r2, [pc, #236]	; (800253c <HAL_UART_RxCpltCallback+0x5b4>)
 8002450:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_UART_RxCpltCallback+0x5ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d107      	bne.n	800246a <HAL_UART_RxCpltCallback+0x4e2>
 800245a:	4b37      	ldr	r3, [pc, #220]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b2c      	cmp	r3, #44	; 0x2c
 8002460:	d103      	bne.n	800246a <HAL_UART_RxCpltCallback+0x4e2>
				gps.sinc[1]=time_buff[0];
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 8002468:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 800246a:	4b32      	ldr	r3, [pc, #200]	; (8002534 <HAL_UART_RxCpltCallback+0x5ac>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b09      	cmp	r3, #9
 8002470:	d10e      	bne.n	8002490 <HAL_UART_RxCpltCallback+0x508>
 8002472:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b2c      	cmp	r3, #44	; 0x2c
 8002478:	d00a      	beq.n	8002490 <HAL_UART_RxCpltCallback+0x508>

				time_buff[ind]=buff[0];
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <HAL_UART_RxCpltCallback+0x5b4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2e      	ldr	r2, [pc, #184]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 8002480:	7811      	ldrb	r1, [r2, #0]
 8002482:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 8002484:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_UART_RxCpltCallback+0x5b4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_UART_RxCpltCallback+0x5b4>)
 800248e:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_UART_RxCpltCallback+0x5ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b0a      	cmp	r3, #10
 8002496:	d123      	bne.n	80024e0 <HAL_UART_RxCpltCallback+0x558>
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b2c      	cmp	r3, #44	; 0x2c
 800249e:	d11f      	bne.n	80024e0 <HAL_UART_RxCpltCallback+0x558>
				gps.day[0]=time_buff[0];
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024a2:	781a      	ldrb	r2, [r3, #0]
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80024a6:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024aa:	785a      	ldrb	r2, [r3, #1]
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80024ae:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024b2:	789a      	ldrb	r2, [r3, #2]
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80024b6:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024ba:	78da      	ldrb	r2, [r3, #3]
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80024be:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024c2:	791a      	ldrb	r2, [r3, #4]
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80024c6:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024ca:	795a      	ldrb	r2, [r3, #5]
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 80024ce:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024d2:	791a      	ldrb	r2, [r3, #4]
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_UART_RxCpltCallback+0x5b8>)
 80024d6:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_UART_RxCpltCallback+0x5a8>)
 80024da:	795a      	ldrb	r2, [r3, #5]
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_RxCpltCallback+0x5b8>)
 80024de:	705a      	strb	r2, [r3, #1]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_UART_RxCpltCallback+0x5bc>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_UART_RxCpltCallback+0x5c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_UART_RxCpltCallback+0x57c>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80024ee:	2201      	movs	r2, #1
 80024f0:	4911      	ldr	r1, [pc, #68]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 80024f2:	4816      	ldr	r0, [pc, #88]	; (800254c <HAL_UART_RxCpltCallback+0x5c4>)
 80024f4:	f005 fca2 	bl	8007e3c <HAL_UART_Transmit_IT>

			dataReceived=0;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_UART_RxCpltCallback+0x5bc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_UART_RxCpltCallback+0x5c0>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 8002504:	2201      	movs	r2, #1
 8002506:	490c      	ldr	r1, [pc, #48]	; (8002538 <HAL_UART_RxCpltCallback+0x5b0>)
 8002508:	4811      	ldr	r0, [pc, #68]	; (8002550 <HAL_UART_RxCpltCallback+0x5c8>)
 800250a:	f005 fd05 	bl	8007f18 <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_UART_RxCpltCallback+0x5cc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_UART_RxCpltCallback+0x5a4>)
 8002516:	761a      	strb	r2, [r3, #24]
		count++;
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_UART_RxCpltCallback+0x5d0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_UART_RxCpltCallback+0x5d0>)
 8002520:	6013      	str	r3, [r2, #0]
	}
}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000509c 	.word	0x2000509c
 8002530:	20000cfc 	.word	0x20000cfc
 8002534:	20000ce0 	.word	0x20000ce0
 8002538:	20000d0c 	.word	0x20000d0c
 800253c:	20000cec 	.word	0x20000cec
 8002540:	20000d10 	.word	0x20000d10
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004
 800254c:	20005290 	.word	0x20005290
 8002550:	200051e0 	.word	0x200051e0
 8002554:	20000cd0 	.word	0x20000cd0
 8002558:	20000cf4 	.word	0x20000cf4

0800255c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

	if(huart == &huart6) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <HAL_UART_TxCpltCallback+0x3c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_UART_TxCpltCallback+0x34>

		dataTransmitted=1;
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_UART_TxCpltCallback+0x40>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_UART_TxCpltCallback+0x44>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_UART_TxCpltCallback+0x34>
			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 800257a:	2201      	movs	r2, #1
 800257c:	4909      	ldr	r1, [pc, #36]	; (80025a4 <HAL_UART_TxCpltCallback+0x48>)
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <HAL_UART_TxCpltCallback+0x3c>)
 8002580:	f005 fc5c 	bl	8007e3c <HAL_UART_Transmit_IT>
			dataReceived=0;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_UART_TxCpltCallback+0x44>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_UART_TxCpltCallback+0x40>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20005290 	.word	0x20005290
 800259c:	20000004 	.word	0x20000004
 80025a0:	20000000 	.word	0x20000000
 80025a4:	20000d0c 	.word	0x20000d0c

080025a8 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 80025a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
    dec = 0;
 80025b6:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <Hex_to_dec+0x108>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fd fe31 	bl	8000224 <strlen>
 80025c2:	4603      	mov	r3, r0
 80025c4:	3b01      	subs	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e060      	b.n	800268c <Hex_to_dec+0xe4>
        switch (hex[i]) {
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	3b41      	subs	r3, #65	; 0x41
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d821      	bhi.n	800261c <Hex_to_dec+0x74>
 80025d8:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <Hex_to_dec+0x38>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	080025f9 	.word	0x080025f9
 80025e4:	080025ff 	.word	0x080025ff
 80025e8:	08002605 	.word	0x08002605
 80025ec:	0800260b 	.word	0x0800260b
 80025f0:	08002611 	.word	0x08002611
 80025f4:	08002617 	.word	0x08002617
        case 'A':
            dig = 10;
 80025f8:	230a      	movs	r3, #10
 80025fa:	613b      	str	r3, [r7, #16]
            break;
 80025fc:	e014      	b.n	8002628 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 80025fe:	230b      	movs	r3, #11
 8002600:	613b      	str	r3, [r7, #16]
            break;
 8002602:	e011      	b.n	8002628 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 8002604:	230c      	movs	r3, #12
 8002606:	613b      	str	r3, [r7, #16]
            break;
 8002608:	e00e      	b.n	8002628 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 800260a:	230d      	movs	r3, #13
 800260c:	613b      	str	r3, [r7, #16]
            break;
 800260e:	e00b      	b.n	8002628 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002610:	230e      	movs	r3, #14
 8002612:	613b      	str	r3, [r7, #16]
            break;
 8002614:	e008      	b.n	8002628 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 8002616:	230f      	movs	r3, #15
 8002618:	613b      	str	r3, [r7, #16]
            break;
 800261a:	e005      	b.n	8002628 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b30      	subs	r3, #48	; 0x30
 8002626:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <Hex_to_dec+0x108>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ffa9 	bl	8000584 <__aeabi_i2d>
 8002632:	4604      	mov	r4, r0
 8002634:	460d      	mov	r5, r1
 8002636:	6938      	ldr	r0, [r7, #16]
 8002638:	f7fd ffa4 	bl	8000584 <__aeabi_i2d>
 800263c:	4680      	mov	r8, r0
 800263e:	4689      	mov	r9, r1
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7fd ff9f 	bl	8000584 <__aeabi_i2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	ec43 2b11 	vmov	d1, r2, r3
 800264e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80026a8 <Hex_to_dec+0x100>
 8002652:	f021 f993 	bl	802397c <pow>
 8002656:	ec53 2b10 	vmov	r2, r3, d0
 800265a:	4640      	mov	r0, r8
 800265c:	4649      	mov	r1, r9
 800265e:	f7fd fffb 	bl	8000658 <__aeabi_dmul>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f7fd fe3f 	bl	80002ec <__adddf3>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe fa9f 	bl	8000bb8 <__aeabi_d2iz>
 800267a:	4603      	mov	r3, r0
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <Hex_to_dec+0x108>)
 800267e:	6013      	str	r3, [r2, #0]
        cont++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3b01      	subs	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da9b      	bge.n	80025ca <Hex_to_dec+0x22>
    }
    return dec;
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <Hex_to_dec+0x108>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b2db      	uxtb	r3, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026a2:	bf00      	nop
 80026a4:	f3af 8000 	nop.w
 80026a8:	00000000 	.word	0x00000000
 80026ac:	40300000 	.word	0x40300000
 80026b0:	20005264 	.word	0x20005264

080026b4 <calc_crc>:


char calc_crc(char c,int cnt){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2b2a      	cmp	r3, #42	; 0x2a
 80026c4:	d108      	bne.n	80026d8 <calc_crc+0x24>
		start_crc=0;
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <calc_crc+0xa0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <calc_crc+0xa4>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
		z=0;
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <calc_crc+0xa8>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <calc_crc+0xa0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <calc_crc+0x38>
		crc^=c;
 80026e0:	79fa      	ldrb	r2, [r7, #7]
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <calc_crc+0xac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4053      	eors	r3, r2
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <calc_crc+0xac>)
 80026ea:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <calc_crc+0xa4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d110      	bne.n	8002716 <calc_crc+0x62>
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b2a      	cmp	r3, #42	; 0x2a
 80026f8:	d00d      	beq.n	8002716 <calc_crc+0x62>
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <calc_crc+0xa8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	dc09      	bgt.n	8002716 <calc_crc+0x62>
		crc_buff[z]=c;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <calc_crc+0xa8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4917      	ldr	r1, [pc, #92]	; (8002764 <calc_crc+0xb0>)
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	54ca      	strb	r2, [r1, r3]
		z++;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <calc_crc+0xa8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <calc_crc+0xa8>)
 8002714:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2b0a      	cmp	r3, #10
 800271a:	d10a      	bne.n	8002732 <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 800271c:	4811      	ldr	r0, [pc, #68]	; (8002764 <calc_crc+0xb0>)
 800271e:	f7ff ff43 	bl	80025a8 <Hex_to_dec>
		if(crc==dec){
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <calc_crc+0xac>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <calc_crc+0xb4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d101      	bne.n	8002732 <calc_crc+0x7e>
			//Test++;
			return 1;
 800272e:	2301      	movs	r3, #1
 8002730:	e00c      	b.n	800274c <calc_crc+0x98>
		}
	}
	if(cnt==0){
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d108      	bne.n	800274a <calc_crc+0x96>
		start_crc=1;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <calc_crc+0xa0>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <calc_crc+0xa4>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
		crc=0;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <calc_crc+0xac>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000ce4 	.word	0x20000ce4
 8002758:	20000cf8 	.word	0x20000cf8
 800275c:	20000ce8 	.word	0x20000ce8
 8002760:	20000cf0 	.word	0x20000cf0
 8002764:	20000d08 	.word	0x20000d08
 8002768:	20005264 	.word	0x20005264

0800276c <rtc_read>:

time_t rtc_read(void) {
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b092      	sub	sp, #72	; 0x48
 8002770:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <rtc_read+0x84>)
 8002774:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <rtc_read+0x88>)
 8002776:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277c:	2200      	movs	r2, #0
 800277e:	4619      	mov	r1, r3
 8002780:	481b      	ldr	r0, [pc, #108]	; (80027f0 <rtc_read+0x84>)
 8002782:	f004 fdb3 	bl	80072ec <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 8002786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	4818      	ldr	r0, [pc, #96]	; (80027f0 <rtc_read+0x84>)
 8002790:	f004 feb2 	bl	80074f8 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 8002794:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002798:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 800279a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800279e:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 80027a0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80027a4:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 80027a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027aa:	3364      	adds	r3, #100	; 0x64
 80027ac:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 80027ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027b2:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 80027b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027b8:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 80027ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027be:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 80027c0:	463b      	mov	r3, r7
 80027c2:	4618      	mov	r0, r3
 80027c4:	f019 f8a4 	bl	801b910 <mktime>
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <rtc_read+0x8c>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <rtc_read+0x90>)
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	461a      	mov	r2, r3
 80027d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027d8:	1884      	adds	r4, r0, r2
 80027da:	eb41 0503 	adc.w	r5, r1, r3
 80027de:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 80027e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	3748      	adds	r7, #72	; 0x48
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bdb0      	pop	{r4, r5, r7, pc}
 80027f0:	2000526c 	.word	0x2000526c
 80027f4:	40002800 	.word	0x40002800
 80027f8:	200050b8 	.word	0x200050b8
 80027fc:	080283c4 	.word	0x080283c4

08002800 <tcpecho_init>:

void tcpecho_init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 8002806:	2301      	movs	r3, #1
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280e:	2200      	movs	r2, #0
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <tcpecho_init+0x20>)
 8002812:	4804      	ldr	r0, [pc, #16]	; (8002824 <tcpecho_init+0x24>)
 8002814:	f018 fe04 	bl	801b420 <sys_thread_new>
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	08002921 	.word	0x08002921
 8002824:	08024a14 	.word	0x08024a14

08002828 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002830:	f006 fe56 	bl	80094e0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8002834:	f00d fad0 	bl	800fdd8 <httpd_init>
	/* Initialize tcp echo server */
	tcpecho_init();
 8002838:	f7ff ffe2 	bl	8002800 <tcpecho_init>


	  ip4_addr_t add;
	  inet_aton(user_info.ip, &add);
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	4619      	mov	r1, r3
 8002842:	4830      	ldr	r0, [pc, #192]	; (8002904 <StartDefaultTask+0xdc>)
 8002844:	f017 fc16 	bl	801a074 <ip4addr_aton>
	  setIP(add.addr);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4618      	mov	r0, r3
 800284c:	f006 fe24 	bl	8009498 <setIP>

	ip4_addr_t mask;
	inet_aton(user_info.netmask, &mask);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	482c      	ldr	r0, [pc, #176]	; (8002908 <StartDefaultTask+0xe0>)
 8002858:	f017 fc0c 	bl	801a074 <ip4addr_aton>
	setNetmask(mask.addr);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4618      	mov	r0, r3
 8002860:	f006 fe2c 	bl	80094bc <setNetmask>
	int IPres=0;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
	/* Infinite loop */
	for(;;)
	{

		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002868:	2201      	movs	r2, #1
 800286a:	4928      	ldr	r1, [pc, #160]	; (800290c <StartDefaultTask+0xe4>)
 800286c:	4828      	ldr	r0, [pc, #160]	; (8002910 <StartDefaultTask+0xe8>)
 800286e:	f005 fb53 	bl	8007f18 <HAL_UART_Receive_IT>

		if(HAL_GPIO_ReadPin (GPIOI, Button_Pin)){
 8002872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002876:	4827      	ldr	r0, [pc, #156]	; (8002914 <StartDefaultTask+0xec>)
 8002878:	f003 faa0 	bl	8005dbc <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <StartDefaultTask+0x62>
			IPres=IPres+1;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3301      	adds	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e032      	b.n	80028f0 <StartDefaultTask+0xc8>
		}
		else
		{
			HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin,GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	2102      	movs	r1, #2
 800288e:	4821      	ldr	r0, [pc, #132]	; (8002914 <StartDefaultTask+0xec>)
 8002890:	f003 faac 	bl	8005dec <HAL_GPIO_WritePin>
			if(IPres>5){
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b05      	cmp	r3, #5
 8002898:	dd28      	ble.n	80028ec <StartDefaultTask+0xc4>
				memset(&user_info,0,sizeof(user_info));
 800289a:	f44f 7292 	mov.w	r2, #292	; 0x124
 800289e:	2100      	movs	r1, #0
 80028a0:	4818      	ldr	r0, [pc, #96]	; (8002904 <StartDefaultTask+0xdc>)
 80028a2:	f018 ff55 	bl	801b750 <memset>
				strncpy(user_info.ip,"192.168.0.55",13);
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <StartDefaultTask+0xdc>)
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <StartDefaultTask+0xf0>)
 80028aa:	4614      	mov	r4, r2
 80028ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028ae:	c407      	stmia	r4!, {r0, r1, r2}
 80028b0:	7023      	strb	r3, [r4, #0]
				strncpy(user_info.netmask,"255.255.255.0",14);
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <StartDefaultTask+0xe0>)
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <StartDefaultTask+0xf4>)
 80028b6:	4614      	mov	r4, r2
 80028b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028ba:	6020      	str	r0, [r4, #0]
 80028bc:	6061      	str	r1, [r4, #4]
 80028be:	60a2      	str	r2, [r4, #8]
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	81a3      	strh	r3, [r4, #12]
				//setIPaddr
				ip4_addr_t add;
				inet_aton(user_info.ip, &add);
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4619      	mov	r1, r3
 80028ca:	480e      	ldr	r0, [pc, #56]	; (8002904 <StartDefaultTask+0xdc>)
 80028cc:	f017 fbd2 	bl	801a074 <ip4addr_aton>
				setIP(add.addr);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f006 fde0 	bl	8009498 <setIP>
				//setNetMask
				ip4_addr_t mask;
				inet_aton(user_info.netmask, &mask);
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	4619      	mov	r1, r3
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <StartDefaultTask+0xe0>)
 80028e0:	f017 fbc8 	bl	801a074 <ip4addr_aton>
				setNetmask(mask.addr);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f006 fde8 	bl	80094bc <setNetmask>
			}
			IPres=0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]

		}
		//HAL_GPIO_TogglePin(Led_GPIO_Port, Led1_Pin);
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80028f0:	2102      	movs	r1, #2
 80028f2:	4808      	ldr	r0, [pc, #32]	; (8002914 <StartDefaultTask+0xec>)
 80028f4:	f003 fa93 	bl	8005e1e <HAL_GPIO_TogglePin>
		//HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
		//HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
		HAL_Delay(1000);
 80028f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028fc:	f001 fc8e 	bl	800421c <HAL_Delay>
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002900:	e7b2      	b.n	8002868 <StartDefaultTask+0x40>
 8002902:	bf00      	nop
 8002904:	200050b8 	.word	0x200050b8
 8002908:	200051cb 	.word	0x200051cb
 800290c:	20000d0c 	.word	0x20000d0c
 8002910:	200051e0 	.word	0x200051e0
 8002914:	40022000 	.word	0x40022000
 8002918:	08024a24 	.word	0x08024a24
 800291c:	08024a34 	.word	0x08024a34

08002920 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
		//struct tm tm_;
		//uint32_t tm_ms_;


		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_UDP);
 8002928:	2200      	movs	r2, #0
 800292a:	2100      	movs	r1, #0
 800292c:	2020      	movs	r0, #32
 800292e:	f00a faa3 	bl	800ce78 <netconn_new_with_proto_and_callback>
 8002932:	61f8      	str	r0, [r7, #28]
		if (conn!=NULL)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8089 	beq.w	8002a4e <tcpecho_thread+0x12e>
		{
			/* Bind connection to well known port number 7. */
			err = netconn_bind(conn, NULL, 123);
 800293c:	227b      	movs	r2, #123	; 0x7b
 800293e:	2100      	movs	r1, #0
 8002940:	69f8      	ldr	r0, [r7, #28]
 8002942:	f00a fb53 	bl	800cfec <netconn_bind>
 8002946:	4603      	mov	r3, r0
 8002948:	76fb      	strb	r3, [r7, #27]
			if (err == ERR_OK)
 800294a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d17a      	bne.n	8002a48 <tcpecho_thread+0x128>
			{
				while (1)
				{
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002952:	e067      	b.n	8002a24 <tcpecho_thread+0x104>
					{
						do
						{
							netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f107 0212 	add.w	r2, r7, #18
 800295a:	f107 010c 	add.w	r1, r7, #12
 800295e:	4618      	mov	r0, r3
 8002960:	f00c f84a 	bl	800e9f8 <netbuf_data>

							if(buf_data_len < 48 || buf_data_len > 2048)
 8002964:	8a7b      	ldrh	r3, [r7, #18]
 8002966:	2b2f      	cmp	r3, #47	; 0x2f
 8002968:	d903      	bls.n	8002972 <tcpecho_thread+0x52>
 800296a:	8a7b      	ldrh	r3, [r7, #18]
 800296c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002970:	d904      	bls.n	800297c <tcpecho_thread+0x5c>
							{
								netbuf_delete(buf);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4618      	mov	r0, r3
 8002976:	f00c f81f 	bl	800e9b8 <netbuf_delete>
								continue;
 800297a:	e048      	b.n	8002a0e <tcpecho_thread+0xee>
							}
							ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	701a      	strb	r2, [r3, #0]
							ntp_packet_ptr->stratum = ntpd_status.stratum;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <tcpecho_thread+0x138>)
 8002986:	7a12      	ldrb	r2, [r2, #8]
 8002988:	705a      	strb	r2, [r3, #1]
							ntp_packet_ptr->poll = 5; // 32s
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2205      	movs	r2, #5
 800298e:	709a      	strb	r2, [r3, #2]
							ntp_packet_ptr->precision = -10; // ~1ms
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	22f6      	movs	r2, #246	; 0xf6
 8002994:	70da      	strb	r2, [r3, #3]

							ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
							ntp_packet_ptr->rootDispersion_s = 0;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	811a      	strh	r2, [r3, #8]
							ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 80029a2:	2041      	movs	r0, #65	; 0x41
 80029a4:	f00d fa4d 	bl	800fe42 <lwip_htonl>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	b292      	uxth	r2, r2
 80029ae:	815a      	strh	r2, [r3, #10]
							ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <tcpecho_thread+0x13c>)
 80029b4:	60da      	str	r2, [r3, #12]
							/* Move client's transmit timestamp into origin fields */
							ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029bc:	619a      	str	r2, [r3, #24]
							ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029c4:	61da      	str	r2, [r3, #28]

							ntp_packet_ptr->refTm_s = time_ref_s;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a25      	ldr	r2, [pc, #148]	; (8002a60 <tcpecho_thread+0x140>)
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	611a      	str	r2, [r3, #16]
							ntp_packet_ptr->refTm_f = time_ref_f;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <tcpecho_thread+0x144>)
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	615a      	str	r2, [r3, #20]

							//rtcGetTime(&RTCD1, &ntpd_datetime);
							//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

							ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 80029d6:	f7ff fec9 	bl	800276c <rtc_read>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <tcpecho_thread+0x148>)
 80029e0:	4413      	add	r3, r2
 80029e2:	68fc      	ldr	r4, [r7, #12]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f00d fa2c 	bl	800fe42 <lwip_htonl>
 80029ea:	4603      	mov	r3, r0
 80029ec:	6223      	str	r3, [r4, #32]
							ntp_packet_ptr->rxTm_f = 0;//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

							/* Copy into transmit timestamp fields */
							ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a12      	ldr	r2, [r2, #32]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
							ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c

							netconn_send(conn, buf);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	4619      	mov	r1, r3
 8002a08:	69f8      	ldr	r0, [r7, #28]
 8002a0a:	f00a fd1d 	bl	800d448 <netconn_send>
						}
						while (netbuf_next(buf) >= 0);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00c f83b 	bl	800ea8c <netbuf_next>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	da9b      	bge.n	8002954 <tcpecho_thread+0x34>

						netbuf_delete(buf);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00b ffca 	bl	800e9b8 <netbuf_delete>
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	69f8      	ldr	r0, [r7, #28]
 8002a2c:	f00a fc92 	bl	800d354 <netconn_recv>
 8002a30:	4603      	mov	r3, r0
 8002a32:	76bb      	strb	r3, [r7, #26]
 8002a34:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d08b      	beq.n	8002954 <tcpecho_thread+0x34>
					}
					/* Close connection and discard connection identifier. */
					//netconn_close(newconn);
					//netconn_delete(newconn);
					ntpd_status.requests_count++;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <tcpecho_thread+0x138>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <tcpecho_thread+0x138>)
 8002a44:	6053      	str	r3, [r2, #4]
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002a46:	e7ed      	b.n	8002a24 <tcpecho_thread+0x104>
				}
			}
			else
			{
				netconn_delete(conn);
 8002a48:	69f8      	ldr	r0, [r7, #28]
 8002a4a:	f00a fab3 	bl	800cfb4 <netconn_delete>
			}
		}
	}
  /* USER CODE END tcpecho_thread */
}
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	00535047 	.word	0x00535047
 8002a60:	20005314 	.word	0x20005314
 8002a64:	2000528c 	.word	0x2000528c
 8002a68:	83aa7e80 	.word	0x83aa7e80

08002a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a7e:	f001 fbad 	bl	80041dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40001000 	.word	0x40001000

08002a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a94:	b672      	cpsid	i
}
 8002a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <Error_Handler+0x8>
	...

08002a9c <fs_open_custom>:
#define JSON_SIZE 1608
struct tm WebPageTime;
int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 8002a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aa0:	f2ad 6df4 	subw	sp, sp, #1780	; 0x6f4
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	6018      	str	r0, [r3, #0]
 8002aaa:	463b      	mov	r3, r7
 8002aac:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 8002aae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ab2:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f018 fe49 	bl	801b750 <memset>
	u16_t offset = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de

	if (!strcmp(name, "/info.json")) {
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	499f      	ldr	r1, [pc, #636]	; (8002d44 <fs_open_custom+0x2a8>)
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	f7fd fba1 	bl	8000210 <strcmp>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d14a      	bne.n	8002b6a <fs_open_custom+0xce>

		char* ip=user_info.ip;
 8002ad4:	4b9c      	ldr	r3, [pc, #624]	; (8002d48 <fs_open_custom+0x2ac>)
 8002ad6:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		int zone=user_info.zone;
 8002ada:	4b9b      	ldr	r3, [pc, #620]	; (8002d48 <fs_open_custom+0x2ac>)
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
		char* contacts=user_info.contacts;
 8002ae2:	4b9a      	ldr	r3, [pc, #616]	; (8002d4c <fs_open_custom+0x2b0>)
 8002ae4:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		char* netmask=user_info.netmask;
 8002ae8:	4b99      	ldr	r3, [pc, #612]	; (8002d50 <fs_open_custom+0x2b4>)
 8002aea:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		char macstr[18]; //string to be displayed on web page
		sprintf (macstr, "%02X:%02X:%02X:%02X:%02X:%02X", getMAC(0), getMAC(1), getMAC(2), getMAC(3), getMAC(4), getMAC(5) );
 8002aee:	2000      	movs	r0, #0
 8002af0:	f006 fcc0 	bl	8009474 <getMAC>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4698      	mov	r8, r3
 8002af8:	2001      	movs	r0, #1
 8002afa:	f006 fcbb 	bl	8009474 <getMAC>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4699      	mov	r9, r3
 8002b02:	2002      	movs	r0, #2
 8002b04:	f006 fcb6 	bl	8009474 <getMAC>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f006 fcb1 	bl	8009474 <getMAC>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461d      	mov	r5, r3
 8002b16:	2004      	movs	r0, #4
 8002b18:	f006 fcac 	bl	8009474 <getMAC>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461e      	mov	r6, r3
 8002b20:	2005      	movs	r0, #5
 8002b22:	f006 fca7 	bl	8009474 <getMAC>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002b2c:	9303      	str	r3, [sp, #12]
 8002b2e:	9602      	str	r6, [sp, #8]
 8002b30:	9501      	str	r5, [sp, #4]
 8002b32:	9400      	str	r4, [sp, #0]
 8002b34:	464b      	mov	r3, r9
 8002b36:	4642      	mov	r2, r8
 8002b38:	4986      	ldr	r1, [pc, #536]	; (8002d54 <fs_open_custom+0x2b8>)
 8002b3a:	f019 f8f3 	bl	801bd24 <sprintf>

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"NetMask\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.00001\",\"mac\":\"%s\"}]",ip,netmask,zone,contacts,macstr);
 8002b3e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8002b58:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8002b5c:	497e      	ldr	r1, [pc, #504]	; (8002d58 <fs_open_custom+0x2bc>)
 8002b5e:	f019 f8e1 	bl	801bd24 <sprintf>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
 8002b68:	e0a7      	b.n	8002cba <fs_open_custom+0x21e>
	}
	else if (!strcmp(name, "/uptime.json")) {
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	497b      	ldr	r1, [pc, #492]	; (8002d5c <fs_open_custom+0x2c0>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	f7fd fb4e 	bl	8000210 <strcmp>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 809f 	bne.w	8002cba <fs_open_custom+0x21e>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'){
 8002b7c:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <fs_open_custom+0x2c4>)
 8002b7e:	799b      	ldrb	r3, [r3, #6]
 8002b80:	2b56      	cmp	r3, #86	; 0x56
 8002b82:	f000 808d 	beq.w	8002ca0 <fs_open_custom+0x204>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002b86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4875      	ldr	r0, [pc, #468]	; (8002d64 <fs_open_custom+0x2c8>)
 8002b90:	f004 fbac 	bl	80072ec <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 8002b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4871      	ldr	r0, [pc, #452]	; (8002d64 <fs_open_custom+0x2c8>)
 8002b9e:	f004 fcab 	bl	80074f8 <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 8002ba2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f107 030c 	add.w	r3, r7, #12
 8002bae:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8002bb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bb4:	785b      	ldrb	r3, [r3, #1]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 8002bbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc2:	789b      	ldrb	r3, [r3, #2]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f107 030c 	add.w	r3, r7, #12
 8002bca:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bd0:	78db      	ldrb	r3, [r3, #3]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002bda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 8002be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f107 030c 	add.w	r3, r7, #12
 8002bf4:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 8002bf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bfa:	789b      	ldrb	r3, [r3, #2]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f018 fe81 	bl	801b910 <mktime>
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <fs_open_custom+0x2ac>)
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	4a55      	ldr	r2, [pc, #340]	; (8002d68 <fs_open_custom+0x2cc>)
 8002c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c1e:	1884      	adds	r4, r0, r2
 8002c20:	eb41 0503 	adc.w	r5, r1, r3
 8002c24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c28:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 8002c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c30:	494e      	ldr	r1, [pc, #312]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f018 fc60 	bl	801b4f8 <localtime_r>

			int Hours=WebPageTime.tm_hour;
 8002c38:	4b4c      	ldr	r3, [pc, #304]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
			int Minutes=WebPageTime.tm_min;
 8002c40:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
			int Seconds=WebPageTime.tm_sec;
 8002c48:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
			int Date=WebPageTime.tm_mday;
 8002c50:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
			int Month=WebPageTime.tm_mon+1;
 8002c58:	4b44      	ldr	r3, [pc, #272]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
			int Year=WebPageTime.tm_year+2000;
 8002c62:	4b42      	ldr	r3, [pc, #264]	; (8002d6c <fs_open_custom+0x2d0>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002c6a:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 8002c6e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002c72:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8002c8e:	f8d7 26d8 	ldr.w	r2, [r7, #1752]	; 0x6d8
 8002c92:	4937      	ldr	r1, [pc, #220]	; (8002d70 <fs_open_custom+0x2d4>)
 8002c94:	f019 f846 	bl	801bd24 <sprintf>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
 8002c9e:	e00c      	b.n	8002cba <fs_open_custom+0x21e>
		}
		else if (gps.year[0]=='V') {
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <fs_open_custom+0x2c4>)
 8002ca2:	799b      	ldrb	r3, [r3, #6]
 8002ca4:	2b56      	cmp	r3, #86	; 0x56
 8002ca6:	d108      	bne.n	8002cba <fs_open_custom+0x21e>
			offset = sprintf(generated_html,"no Reference Timestamp");
 8002ca8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002cac:	4931      	ldr	r1, [pc, #196]	; (8002d74 <fs_open_custom+0x2d8>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f019 f838 	bl	801bd24 <sprintf>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
		}
	}

	if (offset>0){
 8002cba:	f8b7 36de 	ldrh.w	r3, [r7, #1758]	; 0x6de
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00e      	beq.n	8002ce0 <fs_open_custom+0x244>
		memset(file, 0, sizeof(struct fs_file));
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	2214      	movs	r2, #20
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	f018 fd41 	bl	801b750 <memset>
		file->pextension = mem_malloc(offset);
 8002cce:	f8b7 36de 	ldrh.w	r3, [r7, #1758]	; 0x6de
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f00d fc0a 	bl	80104ec <mem_malloc>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d020      	beq.n	8002d2c <fs_open_custom+0x290>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f8b7 26de 	ldrh.w	r2, [r7, #1758]	; 0x6de
 8002cf4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f018 fd01 	bl	801b700 <memcpy>
		file->data = (const char *)file->pextension;
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 8002d0a:	f8b7 26de 	ldrh.w	r2, [r7, #1758]	; 0x6de
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	741a      	strb	r2, [r3, #16]
		return 1;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e005      	b.n	8002d38 <fs_open_custom+0x29c>
	}

	printf("Extension fail %s\n\r",name);
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	4811      	ldr	r0, [pc, #68]	; (8002d78 <fs_open_custom+0x2dc>)
 8002d32:	f018 ff93 	bl	801bc5c <printf>
	return 0;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f207 67e4 	addw	r7, r7, #1764	; 0x6e4
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d44:	08024a44 	.word	0x08024a44
 8002d48:	200050b8 	.word	0x200050b8
 8002d4c:	200050cc 	.word	0x200050cc
 8002d50:	200051cb 	.word	0x200051cb
 8002d54:	08024a50 	.word	0x08024a50
 8002d58:	08024a70 	.word	0x08024a70
 8002d5c:	08024adc 	.word	0x08024adc
 8002d60:	2000509c 	.word	0x2000509c
 8002d64:	2000526c 	.word	0x2000526c
 8002d68:	080283c4 	.word	0x080283c4
 8002d6c:	2000533c 	.word	0x2000533c
 8002d70:	08024aec 	.word	0x08024aec
 8002d74:	08024b0c 	.word	0x08024b0c
 8002d78:	08024b24 	.word	0x08024b24

08002d7c <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <fs_close_custom+0x26>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <fs_close_custom+0x26>
		mem_free(file->pextension);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f00d fa0e 	bl	80101b8 <mem_free>
		file->pextension = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
	}
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d801      	bhi.n	8002dc4 <jsmn_alloc_token+0x1a>
    return NULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e014      	b.n	8002dee <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	1c59      	adds	r1, r3, #1
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6051      	str	r1, [r2, #4]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002dec:	697b      	ldr	r3, [r7, #20]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	7afa      	ldrb	r2, [r7, #11]
 8002e0e:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]
  token->end = end;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
}
 8002e22:	bf00      	nop
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002e44:	e07c      	b.n	8002f40 <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b7d      	cmp	r3, #125	; 0x7d
 8002e52:	f000 8083 	beq.w	8002f5c <jsmn_parse_primitive+0x12c>
 8002e56:	2b7d      	cmp	r3, #125	; 0x7d
 8002e58:	dc58      	bgt.n	8002f0c <jsmn_parse_primitive+0xdc>
 8002e5a:	2b5d      	cmp	r3, #93	; 0x5d
 8002e5c:	d07e      	beq.n	8002f5c <jsmn_parse_primitive+0x12c>
 8002e5e:	2b5d      	cmp	r3, #93	; 0x5d
 8002e60:	dc54      	bgt.n	8002f0c <jsmn_parse_primitive+0xdc>
 8002e62:	2b2c      	cmp	r3, #44	; 0x2c
 8002e64:	dc50      	bgt.n	8002f08 <jsmn_parse_primitive+0xd8>
 8002e66:	2b09      	cmp	r3, #9
 8002e68:	db50      	blt.n	8002f0c <jsmn_parse_primitive+0xdc>
 8002e6a:	3b09      	subs	r3, #9
 8002e6c:	2b23      	cmp	r3, #35	; 0x23
 8002e6e:	d84d      	bhi.n	8002f0c <jsmn_parse_primitive+0xdc>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <jsmn_parse_primitive+0x48>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002f5d 	.word	0x08002f5d
 8002e7c:	08002f5d 	.word	0x08002f5d
 8002e80:	08002f0d 	.word	0x08002f0d
 8002e84:	08002f0d 	.word	0x08002f0d
 8002e88:	08002f5d 	.word	0x08002f5d
 8002e8c:	08002f0d 	.word	0x08002f0d
 8002e90:	08002f0d 	.word	0x08002f0d
 8002e94:	08002f0d 	.word	0x08002f0d
 8002e98:	08002f0d 	.word	0x08002f0d
 8002e9c:	08002f0d 	.word	0x08002f0d
 8002ea0:	08002f0d 	.word	0x08002f0d
 8002ea4:	08002f0d 	.word	0x08002f0d
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002f0d 	.word	0x08002f0d
 8002eb0:	08002f0d 	.word	0x08002f0d
 8002eb4:	08002f0d 	.word	0x08002f0d
 8002eb8:	08002f0d 	.word	0x08002f0d
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002f0d 	.word	0x08002f0d
 8002ec8:	08002f0d 	.word	0x08002f0d
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f5d 	.word	0x08002f5d
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f0d 	.word	0x08002f0d
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	08002f0d 	.word	0x08002f0d
 8002eec:	08002f0d 	.word	0x08002f0d
 8002ef0:	08002f0d 	.word	0x08002f0d
 8002ef4:	08002f0d 	.word	0x08002f0d
 8002ef8:	08002f0d 	.word	0x08002f0d
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f0d 	.word	0x08002f0d
 8002f04:	08002f5d 	.word	0x08002f5d
 8002f08:	2b3a      	cmp	r3, #58	; 0x3a
 8002f0a:	d027      	beq.n	8002f5c <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002f0c:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b1f      	cmp	r3, #31
 8002f1a:	d906      	bls.n	8002f2a <jsmn_parse_primitive+0xfa>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b7e      	cmp	r3, #126	; 0x7e
 8002f28:	d905      	bls.n	8002f36 <jsmn_parse_primitive+0x106>
      parser->pos = start;
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8002f30:	f06f 0301 	mvn.w	r3, #1
 8002f34:	e03b      	b.n	8002fae <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90a      	bls.n	8002f60 <jsmn_parse_primitive+0x130>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4413      	add	r3, r2
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f47f af76 	bne.w	8002e46 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8002f5a:	e001      	b.n	8002f60 <jsmn_parse_primitive+0x130>
      goto found;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <jsmn_parse_primitive+0x132>
found:
 8002f60:	bf00      	nop
  if (tokens == NULL) {
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <jsmn_parse_primitive+0x146>
    parser->pos--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	1e5a      	subs	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	601a      	str	r2, [r3, #0]
    return 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e01b      	b.n	8002fae <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ff15 	bl	8002daa <jsmn_alloc_token>
 8002f80:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e00c      	b.n	8002fae <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	2108      	movs	r1, #8
 8002f9c:	6938      	ldr	r0, [r7, #16]
 8002f9e:	f7ff ff2c 	bl	8002dfa <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	1e5a      	subs	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]
  return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002fd6:	e0e6      	b.n	80031a6 <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b22      	cmp	r3, #34	; 0x22
 8002fe8:	d11d      	bne.n	8003026 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <jsmn_parse_string+0x3c>
        return 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e0ea      	b.n	80031ca <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff6:	6839      	ldr	r1, [r7, #0]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fed6 	bl	8002daa <jsmn_alloc_token>
 8002ffe:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
 8003010:	e0db      	b.n	80031ca <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2104      	movs	r1, #4
 800301c:	6938      	ldr	r0, [r7, #16]
 800301e:	f7ff feec 	bl	8002dfa <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8003022:	2300      	movs	r3, #0
 8003024:	e0d1      	b.n	80031ca <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b5c      	cmp	r3, #92	; 0x5c
 800302a:	f040 80b4 	bne.w	8003196 <jsmn_parse_string+0x1de>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	f240 80ad 	bls.w	8003196 <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b75      	cmp	r3, #117	; 0x75
 8003052:	f300 809a 	bgt.w	800318a <jsmn_parse_string+0x1d2>
 8003056:	2b5c      	cmp	r3, #92	; 0x5c
 8003058:	da06      	bge.n	8003068 <jsmn_parse_string+0xb0>
 800305a:	2b22      	cmp	r3, #34	; 0x22
 800305c:	f000 809d 	beq.w	800319a <jsmn_parse_string+0x1e2>
 8003060:	2b2f      	cmp	r3, #47	; 0x2f
 8003062:	f000 809a 	beq.w	800319a <jsmn_parse_string+0x1e2>
 8003066:	e090      	b.n	800318a <jsmn_parse_string+0x1d2>
 8003068:	3b5c      	subs	r3, #92	; 0x5c
 800306a:	2b19      	cmp	r3, #25
 800306c:	f200 808d 	bhi.w	800318a <jsmn_parse_string+0x1d2>
 8003070:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <jsmn_parse_string+0xc0>)
 8003072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003076:	bf00      	nop
 8003078:	0800319b 	.word	0x0800319b
 800307c:	0800318b 	.word	0x0800318b
 8003080:	0800318b 	.word	0x0800318b
 8003084:	0800318b 	.word	0x0800318b
 8003088:	0800318b 	.word	0x0800318b
 800308c:	0800318b 	.word	0x0800318b
 8003090:	0800319b 	.word	0x0800319b
 8003094:	0800318b 	.word	0x0800318b
 8003098:	0800318b 	.word	0x0800318b
 800309c:	0800318b 	.word	0x0800318b
 80030a0:	0800319b 	.word	0x0800319b
 80030a4:	0800318b 	.word	0x0800318b
 80030a8:	0800318b 	.word	0x0800318b
 80030ac:	0800318b 	.word	0x0800318b
 80030b0:	0800318b 	.word	0x0800318b
 80030b4:	0800318b 	.word	0x0800318b
 80030b8:	0800318b 	.word	0x0800318b
 80030bc:	0800318b 	.word	0x0800318b
 80030c0:	0800319b 	.word	0x0800319b
 80030c4:	0800318b 	.word	0x0800318b
 80030c8:	0800318b 	.word	0x0800318b
 80030cc:	0800318b 	.word	0x0800318b
 80030d0:	0800319b 	.word	0x0800319b
 80030d4:	0800318b 	.word	0x0800318b
 80030d8:	0800319b 	.word	0x0800319b
 80030dc:	080030e1 	.word	0x080030e1
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	e037      	b.n	8003160 <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4413      	add	r3, r2
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b2f      	cmp	r3, #47	; 0x2f
 80030fc:	d906      	bls.n	800310c <jsmn_parse_string+0x154>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	4413      	add	r3, r2
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b39      	cmp	r3, #57	; 0x39
 800310a:	d921      	bls.n	8003150 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d906      	bls.n	8003128 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	4413      	add	r3, r2
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b46      	cmp	r3, #70	; 0x46
 8003126:	d913      	bls.n	8003150 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	4413      	add	r3, r2
 8003130:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8003132:	2b60      	cmp	r3, #96	; 0x60
 8003134:	d906      	bls.n	8003144 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b66      	cmp	r3, #102	; 0x66
 8003142:	d905      	bls.n	8003150 <jsmn_parse_string+0x198>
            parser->pos = start;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 800314a:	f06f 0301 	mvn.w	r3, #1
 800314e:	e03c      	b.n	80031ca <jsmn_parse_string+0x212>
          }
          parser->pos++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	601a      	str	r2, [r3, #0]
             i++) {
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b03      	cmp	r3, #3
 8003164:	dc0b      	bgt.n	800317e <jsmn_parse_string+0x1c6>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d906      	bls.n	800317e <jsmn_parse_string+0x1c6>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1b8      	bne.n	80030f0 <jsmn_parse_string+0x138>
        }
        parser->pos--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]
        break;
 8003188:	e008      	b.n	800319c <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8003190:	f06f 0301 	mvn.w	r3, #1
 8003194:	e019      	b.n	80031ca <jsmn_parse_string+0x212>
      }
    }
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <jsmn_parse_string+0x1e4>
        break;
 800319a:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d907      	bls.n	80031c0 <jsmn_parse_string+0x208>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4413      	add	r3, r2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f47f af0c 	bne.w	8002fd8 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80031c6:	f06f 0302 	mvn.w	r3, #2
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80031e8:	e1bf      	b.n	800356a <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4413      	add	r3, r2
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	2b7d      	cmp	r3, #125	; 0x7d
 80031fa:	f000 80b9 	beq.w	8003370 <jsmn_parse+0x19c>
 80031fe:	2b7d      	cmp	r3, #125	; 0x7d
 8003200:	f300 8181 	bgt.w	8003506 <jsmn_parse+0x332>
 8003204:	2b7b      	cmp	r3, #123	; 0x7b
 8003206:	d07c      	beq.n	8003302 <jsmn_parse+0x12e>
 8003208:	2b7b      	cmp	r3, #123	; 0x7b
 800320a:	f300 817c 	bgt.w	8003506 <jsmn_parse+0x332>
 800320e:	2b5d      	cmp	r3, #93	; 0x5d
 8003210:	f000 80ae 	beq.w	8003370 <jsmn_parse+0x19c>
 8003214:	2b5d      	cmp	r3, #93	; 0x5d
 8003216:	f300 8176 	bgt.w	8003506 <jsmn_parse+0x332>
 800321a:	2b3a      	cmp	r3, #58	; 0x3a
 800321c:	dc6e      	bgt.n	80032fc <jsmn_parse+0x128>
 800321e:	2b09      	cmp	r3, #9
 8003220:	f2c0 8171 	blt.w	8003506 <jsmn_parse+0x332>
 8003224:	3b09      	subs	r3, #9
 8003226:	2b31      	cmp	r3, #49	; 0x31
 8003228:	f200 816d 	bhi.w	8003506 <jsmn_parse+0x332>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <jsmn_parse+0x60>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	0800354b 	.word	0x0800354b
 8003238:	0800354b 	.word	0x0800354b
 800323c:	08003507 	.word	0x08003507
 8003240:	08003507 	.word	0x08003507
 8003244:	0800354b 	.word	0x0800354b
 8003248:	08003507 	.word	0x08003507
 800324c:	08003507 	.word	0x08003507
 8003250:	08003507 	.word	0x08003507
 8003254:	08003507 	.word	0x08003507
 8003258:	08003507 	.word	0x08003507
 800325c:	08003507 	.word	0x08003507
 8003260:	08003507 	.word	0x08003507
 8003264:	08003507 	.word	0x08003507
 8003268:	08003507 	.word	0x08003507
 800326c:	08003507 	.word	0x08003507
 8003270:	08003507 	.word	0x08003507
 8003274:	08003507 	.word	0x08003507
 8003278:	08003507 	.word	0x08003507
 800327c:	08003507 	.word	0x08003507
 8003280:	08003507 	.word	0x08003507
 8003284:	08003507 	.word	0x08003507
 8003288:	08003507 	.word	0x08003507
 800328c:	08003507 	.word	0x08003507
 8003290:	0800354b 	.word	0x0800354b
 8003294:	08003507 	.word	0x08003507
 8003298:	08003425 	.word	0x08003425
 800329c:	08003507 	.word	0x08003507
 80032a0:	08003507 	.word	0x08003507
 80032a4:	08003507 	.word	0x08003507
 80032a8:	08003507 	.word	0x08003507
 80032ac:	08003507 	.word	0x08003507
 80032b0:	08003507 	.word	0x08003507
 80032b4:	08003507 	.word	0x08003507
 80032b8:	08003507 	.word	0x08003507
 80032bc:	08003507 	.word	0x08003507
 80032c0:	08003479 	.word	0x08003479
 80032c4:	08003507 	.word	0x08003507
 80032c8:	08003507 	.word	0x08003507
 80032cc:	08003507 	.word	0x08003507
 80032d0:	08003507 	.word	0x08003507
 80032d4:	08003507 	.word	0x08003507
 80032d8:	08003507 	.word	0x08003507
 80032dc:	08003507 	.word	0x08003507
 80032e0:	08003507 	.word	0x08003507
 80032e4:	08003507 	.word	0x08003507
 80032e8:	08003507 	.word	0x08003507
 80032ec:	08003507 	.word	0x08003507
 80032f0:	08003507 	.word	0x08003507
 80032f4:	08003507 	.word	0x08003507
 80032f8:	0800346b 	.word	0x0800346b
 80032fc:	2b5b      	cmp	r3, #91	; 0x5b
 80032fe:	f040 8102 	bne.w	8003506 <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	3301      	adds	r3, #1
 8003306:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 811f 	beq.w	800354e <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8003310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff fd48 	bl	8002daa <jsmn_alloc_token>
 800331a:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	e14f      	b.n	80035c8 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d00a      	beq.n	8003348 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4413      	add	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8003348:	7ffb      	ldrb	r3, [r7, #31]
 800334a:	2b7b      	cmp	r3, #123	; 0x7b
 800334c:	d101      	bne.n	8003352 <jsmn_parse+0x17e>
 800334e:	2201      	movs	r2, #1
 8003350:	e000      	b.n	8003354 <jsmn_parse+0x180>
 8003352:	2202      	movs	r2, #2
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	609a      	str	r2, [r3, #8]
      break;
 800336e:	e0f7      	b.n	8003560 <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80ed 	beq.w	8003552 <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8003378:	7ffb      	ldrb	r3, [r7, #31]
 800337a:	2b7d      	cmp	r3, #125	; 0x7d
 800337c:	d101      	bne.n	8003382 <jsmn_parse+0x1ae>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <jsmn_parse+0x1b0>
 8003382:	2302      	movs	r3, #2
 8003384:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e024      	b.n	80033da <jsmn_parse+0x206>
        token = &tokens[i];
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	4413      	add	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d017      	beq.n	80033d4 <jsmn_parse+0x200>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d112      	bne.n	80033d4 <jsmn_parse+0x200>
          if (token->type != type) {
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	7fba      	ldrb	r2, [r7, #30]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d002      	beq.n	80033be <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 80033b8:	f06f 0301 	mvn.w	r3, #1
 80033bc:	e104      	b.n	80035c8 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	461a      	mov	r2, r3
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	609a      	str	r2, [r3, #8]
          break;
 80033d2:	e005      	b.n	80033e0 <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dad7      	bge.n	8003390 <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d119      	bne.n	800341c <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 80033e8:	f06f 0301 	mvn.w	r3, #1
 80033ec:	e0ec      	b.n	80035c8 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d009      	beq.n	8003416 <jsmn_parse+0x242>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d104      	bne.n	8003416 <jsmn_parse+0x242>
          parser->toksuper = i;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	609a      	str	r2, [r3, #8]
          break;
 8003412:	bf00      	nop
        }
      }
#endif
      break;
 8003414:	e0a4      	b.n	8003560 <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	3b01      	subs	r3, #1
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	dae5      	bge.n	80033ee <jsmn_parse+0x21a>
      break;
 8003422:	e09d      	b.n	8003560 <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fdc2 	bl	8002fb8 <jsmn_parse_string>
 8003434:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	da01      	bge.n	8003440 <jsmn_parse+0x26c>
        return r;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	e0c3      	b.n	80035c8 <jsmn_parse+0x3f4>
      }
      count++;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	3301      	adds	r3, #1
 8003444:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	f000 8082 	beq.w	8003556 <jsmn_parse+0x382>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d07e      	beq.n	8003556 <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	3201      	adds	r2, #1
 8003466:	60da      	str	r2, [r3, #12]
      }
      break;
 8003468:	e075      	b.n	8003556 <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	461a      	mov	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
      break;
 8003476:	e073      	b.n	8003560 <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d06d      	beq.n	800355a <jsmn_parse+0x386>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d068      	beq.n	800355a <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8003494:	2b02      	cmp	r3, #2
 8003496:	d060      	beq.n	800355a <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d058      	beq.n	800355a <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
 80034b0:	e025      	b.n	80034fe <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d006      	beq.n	80034ce <jsmn_parse+0x2fa>
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d114      	bne.n	80034f8 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d00c      	beq.n	80034f8 <jsmn_parse+0x324>
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d104      	bne.n	80034f8 <jsmn_parse+0x324>
              parser->toksuper = i;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	609a      	str	r2, [r3, #8]
              break;
 80034f4:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 80034f6:	e030      	b.n	800355a <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3b01      	subs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	dad6      	bge.n	80034b2 <jsmn_parse+0x2de>
      break;
 8003504:	e029      	b.n	800355a <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fc8d 	bl	8002e30 <jsmn_parse_primitive>
 8003516:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da01      	bge.n	8003522 <jsmn_parse+0x34e>
        return r;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	e052      	b.n	80035c8 <jsmn_parse+0x3f4>
      }
      count++;
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	3301      	adds	r3, #1
 8003526:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d015      	beq.n	800355e <jsmn_parse+0x38a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d012      	beq.n	800355e <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4413      	add	r3, r2
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	3201      	adds	r2, #1
 8003546:	60da      	str	r2, [r3, #12]
      }
      break;
 8003548:	e009      	b.n	800355e <jsmn_parse+0x38a>
      break;
 800354a:	bf00      	nop
 800354c:	e008      	b.n	8003560 <jsmn_parse+0x38c>
        break;
 800354e:	bf00      	nop
 8003550:	e006      	b.n	8003560 <jsmn_parse+0x38c>
        break;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <jsmn_parse+0x38c>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <jsmn_parse+0x38c>
      break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <jsmn_parse+0x38c>
      break;
 800355e:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	d907      	bls.n	8003584 <jsmn_parse+0x3b0>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4413      	add	r3, r2
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f47f ae33 	bne.w	80031ea <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01d      	beq.n	80035c6 <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e015      	b.n	80035c0 <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a2:	d00a      	beq.n	80035ba <jsmn_parse+0x3e6>
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	4413      	add	r3, r2
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d102      	bne.n	80035ba <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 80035b4:	f06f 0302 	mvn.w	r3, #2
 80035b8:	e006      	b.n	80035c8 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	3b01      	subs	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dae6      	bge.n	8003594 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 80035c6:	6a3b      	ldr	r3, [r7, #32]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <jsoneq>:
int post_offset=0;
//static char last_user[USER_PASS_BUFSIZE];

char buf_data[USER_PASS_BUFSIZE];

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d11e      	bne.n	800364a <jsoneq+0x52>
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7fc fe09 	bl	8000224 <strlen>
 8003612:	4603      	mov	r3, r0
 8003614:	4619      	mov	r1, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	4299      	cmp	r1, r3
 8003622:	d112      	bne.n	800364a <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1898      	adds	r0, r3, r2
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	f018 fb9f 	bl	801bd7e <strncmp>
 8003640:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <jsoneq+0x52>
		return 0;
 8003646:	2300      	movs	r3, #0
 8003648:	e001      	b.n	800364e <jsoneq+0x56>
	}
	return -1;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <httpd_post_begin>:
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	807b      	strh	r3, [r7, #2]
	post_offset=0;
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <httpd_post_begin+0x68>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

	memset(buf_data,0,sizeof(buf_data));
 800366c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003670:	2100      	movs	r1, #0
 8003672:	4814      	ldr	r0, [pc, #80]	; (80036c4 <httpd_post_begin+0x6c>)
 8003674:	f018 f86c 	bl	801b750 <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 8003678:	220a      	movs	r2, #10
 800367a:	4913      	ldr	r1, [pc, #76]	; (80036c8 <httpd_post_begin+0x70>)
 800367c:	68b8      	ldr	r0, [r7, #8]
 800367e:	f018 f831 	bl	801b6e4 <memcmp>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d115      	bne.n	80036b4 <httpd_post_begin+0x5c>
		if (current_connection != connection) {
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <httpd_post_begin+0x74>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	429a      	cmp	r2, r3
 8003690:	d010      	beq.n	80036b4 <httpd_post_begin+0x5c>
			current_connection = connection;
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <httpd_post_begin+0x74>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <httpd_post_begin+0x78>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 800369e:	8c3b      	ldrh	r3, [r7, #32]
 80036a0:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <httpd_post_begin+0x70>)
 80036a2:	4619      	mov	r1, r3
 80036a4:	69f8      	ldr	r0, [r7, #28]
 80036a6:	f018 fb09 	bl	801bcbc <snprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e001      	b.n	80036b8 <httpd_post_begin+0x60>
		}
	}
	return ERR_VAL;
 80036b4:	f06f 0305 	mvn.w	r3, #5
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000d1c 	.word	0x20000d1c
 80036c4:	20005360 	.word	0x20005360
 80036c8:	08024b38 	.word	0x08024b38
 80036cc:	20000d14 	.word	0x20000d14
 80036d0:	20000d18 	.word	0x20000d18

080036d4 <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	4b98      	ldr	r3, [pc, #608]	; (8003940 <httpd_post_receive_data+0x26c>)
 80036e0:	f242 0258 	movw	r2, #8280	; 0x2058
 80036e4:	443a      	add	r2, r7
 80036e6:	4413      	add	r3, r2
 80036e8:	6018      	str	r0, [r3, #0]
 80036ea:	4b96      	ldr	r3, [pc, #600]	; (8003944 <httpd_post_receive_data+0x270>)
 80036ec:	f242 0258 	movw	r2, #8280	; 0x2058
 80036f0:	443a      	add	r2, r7
 80036f2:	4413      	add	r3, r2
 80036f4:	6019      	str	r1, [r3, #0]
	err_t ret;

	if ((post_offset+p->len) <= USER_PASS_BUFSIZE){
 80036f6:	4b93      	ldr	r3, [pc, #588]	; (8003944 <httpd_post_receive_data+0x270>)
 80036f8:	f242 0258 	movw	r2, #8280	; 0x2058
 80036fc:	443a      	add	r2, r7
 80036fe:	4413      	add	r3, r2
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	895b      	ldrh	r3, [r3, #10]
 8003704:	461a      	mov	r2, r3
 8003706:	4b90      	ldr	r3, [pc, #576]	; (8003948 <httpd_post_receive_data+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4413      	add	r3, r2
 800370c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003710:	dc34      	bgt.n	800377c <httpd_post_receive_data+0xa8>
		strncpy(buf_data+post_offset, p->payload,p->len);
 8003712:	4b8d      	ldr	r3, [pc, #564]	; (8003948 <httpd_post_receive_data+0x274>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	4b8c      	ldr	r3, [pc, #560]	; (800394c <httpd_post_receive_data+0x278>)
 800371a:	18d0      	adds	r0, r2, r3
 800371c:	4b89      	ldr	r3, [pc, #548]	; (8003944 <httpd_post_receive_data+0x270>)
 800371e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003722:	443a      	add	r2, r7
 8003724:	4413      	add	r3, r2
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	4b86      	ldr	r3, [pc, #536]	; (8003944 <httpd_post_receive_data+0x270>)
 800372c:	f242 0258 	movw	r2, #8280	; 0x2058
 8003730:	443a      	add	r2, r7
 8003732:	4413      	add	r3, r2
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	895b      	ldrh	r3, [r3, #10]
 8003738:	461a      	mov	r2, r3
 800373a:	f018 fb32 	bl	801bda2 <strncpy>
	else{
		ret = ERR_VAL;
		pbuf_free(p);
		return ret;
	}
	post_offset += p->len;
 800373e:	4b81      	ldr	r3, [pc, #516]	; (8003944 <httpd_post_receive_data+0x270>)
 8003740:	f242 0258 	movw	r2, #8280	; 0x2058
 8003744:	443a      	add	r2, r7
 8003746:	4413      	add	r3, r2
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	895b      	ldrh	r3, [r3, #10]
 800374c:	461a      	mov	r2, r3
 800374e:	4b7e      	ldr	r3, [pc, #504]	; (8003948 <httpd_post_receive_data+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a7c      	ldr	r2, [pc, #496]	; (8003948 <httpd_post_receive_data+0x274>)
 8003756:	6013      	str	r3, [r2, #0]

	int data_len = strlen(buf_data);
 8003758:	487c      	ldr	r0, [pc, #496]	; (800394c <httpd_post_receive_data+0x278>)
 800375a:	f7fc fd63 	bl	8000224 <strlen>
 800375e:	4603      	mov	r3, r0
 8003760:	f242 024c 	movw	r2, #8268	; 0x204c
 8003764:	443a      	add	r2, r7
 8003766:	6013      	str	r3, [r2, #0]
	if (buf_data[data_len-1]!=']'){
 8003768:	f242 034c 	movw	r3, #8268	; 0x204c
 800376c:	443b      	add	r3, r7
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3b01      	subs	r3, #1
 8003772:	4a76      	ldr	r2, [pc, #472]	; (800394c <httpd_post_receive_data+0x278>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
 8003776:	2b5d      	cmp	r3, #93	; 0x5d
 8003778:	d026      	beq.n	80037c8 <httpd_post_receive_data+0xf4>
 800377a:	e012      	b.n	80037a2 <httpd_post_receive_data+0xce>
		ret = ERR_VAL;
 800377c:	23fa      	movs	r3, #250	; 0xfa
 800377e:	f242 0257 	movw	r2, #8279	; 0x2057
 8003782:	443a      	add	r2, r7
 8003784:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 8003786:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <httpd_post_receive_data+0x270>)
 8003788:	f242 0258 	movw	r2, #8280	; 0x2058
 800378c:	443a      	add	r2, r7
 800378e:	4413      	add	r3, r2
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	f00d fefd 	bl	8011590 <pbuf_free>
		return ret;
 8003796:	f242 0357 	movw	r3, #8279	; 0x2057
 800379a:	443b      	add	r3, r7
 800379c:	f993 3000 	ldrsb.w	r3, [r3]
 80037a0:	e284      	b.n	8003cac <httpd_post_receive_data+0x5d8>
		ret = ERR_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	f242 0257 	movw	r2, #8279	; 0x2057
 80037a8:	443a      	add	r2, r7
 80037aa:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 80037ac:	4b65      	ldr	r3, [pc, #404]	; (8003944 <httpd_post_receive_data+0x270>)
 80037ae:	f242 0258 	movw	r2, #8280	; 0x2058
 80037b2:	443a      	add	r2, r7
 80037b4:	4413      	add	r3, r2
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	f00d feea 	bl	8011590 <pbuf_free>
		return ret;
 80037bc:	f242 0357 	movw	r3, #8279	; 0x2057
 80037c0:	443b      	add	r3, r7
 80037c2:	f993 3000 	ldrsb.w	r3, [r3]
 80037c6:	e271      	b.n	8003cac <httpd_post_receive_data+0x5d8>
	}

	LWIP_ASSERT("NULL pbuf", p != NULL);
 80037c8:	4b5e      	ldr	r3, [pc, #376]	; (8003944 <httpd_post_receive_data+0x270>)
 80037ca:	f242 0258 	movw	r2, #8280	; 0x2058
 80037ce:	443a      	add	r2, r7
 80037d0:	4413      	add	r3, r2
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <httpd_post_receive_data+0x110>
 80037d8:	4b5d      	ldr	r3, [pc, #372]	; (8003950 <httpd_post_receive_data+0x27c>)
 80037da:	224d      	movs	r2, #77	; 0x4d
 80037dc:	495d      	ldr	r1, [pc, #372]	; (8003954 <httpd_post_receive_data+0x280>)
 80037de:	485e      	ldr	r0, [pc, #376]	; (8003958 <httpd_post_receive_data+0x284>)
 80037e0:	f018 fa3c 	bl	801bc5c <printf>

	if (current_connection == connection) {
 80037e4:	4b5d      	ldr	r3, [pc, #372]	; (800395c <httpd_post_receive_data+0x288>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <httpd_post_receive_data+0x26c>)
 80037ea:	f242 0158 	movw	r1, #8280	; 0x2058
 80037ee:	4439      	add	r1, r7
 80037f0:	440b      	add	r3, r1
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4293      	cmp	r3, r2
 80037f6:	f040 8247 	bne.w	8003c88 <httpd_post_receive_data+0x5b4>
		jsmn_parser parser;
		jsmntok_t t[512]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 80037fa:	f242 0314 	movw	r3, #8212	; 0x2014
 80037fe:	443b      	add	r3, r7
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fee5 	bl	80035d0 <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 8003806:	4851      	ldr	r0, [pc, #324]	; (800394c <httpd_post_receive_data+0x278>)
 8003808:	f7fc fd0c 	bl	8000224 <strlen>
 800380c:	4602      	mov	r2, r0
 800380e:	4b54      	ldr	r3, [pc, #336]	; (8003960 <httpd_post_receive_data+0x28c>)
 8003810:	f242 0158 	movw	r1, #8280	; 0x2058
 8003814:	4439      	add	r1, r7
 8003816:	440b      	add	r3, r1
 8003818:	f242 0014 	movw	r0, #8212	; 0x2014
 800381c:	4438      	add	r0, r7
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	9100      	str	r1, [sp, #0]
 8003822:	494a      	ldr	r1, [pc, #296]	; (800394c <httpd_post_receive_data+0x278>)
 8003824:	f7ff fcd6 	bl	80031d4 <jsmn_parse>
 8003828:	f242 0348 	movw	r3, #8264	; 0x2048
 800382c:	443b      	add	r3, r7
 800382e:	6018      	str	r0, [r3, #0]
		for (int i = 0; i<tokens; i++){
 8003830:	2300      	movs	r3, #0
 8003832:	f242 0250 	movw	r2, #8272	; 0x2050
 8003836:	443a      	add	r2, r7
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e1de      	b.n	8003bfa <httpd_post_receive_data+0x526>
			if (jsoneq(buf_data, &t[i], "IPaddress") == 0) {
 800383c:	4b48      	ldr	r3, [pc, #288]	; (8003960 <httpd_post_receive_data+0x28c>)
 800383e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003842:	443a      	add	r2, r7
 8003844:	4413      	add	r3, r2
 8003846:	f242 0250 	movw	r2, #8272	; 0x2050
 800384a:	443a      	add	r2, r7
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	4413      	add	r3, r2
 8003852:	4a44      	ldr	r2, [pc, #272]	; (8003964 <httpd_post_receive_data+0x290>)
 8003854:	4619      	mov	r1, r3
 8003856:	483d      	ldr	r0, [pc, #244]	; (800394c <httpd_post_receive_data+0x278>)
 8003858:	f7ff fece 	bl	80035f8 <jsoneq>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 8084 	bne.w	800396c <httpd_post_receive_data+0x298>
				buf_data[t[i+1].end] = '\0';
 8003864:	f242 0350 	movw	r3, #8272	; 0x2050
 8003868:	443b      	add	r3, r7
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	4b3c      	ldr	r3, [pc, #240]	; (8003960 <httpd_post_receive_data+0x28c>)
 8003870:	f242 0158 	movw	r1, #8280	; 0x2058
 8003874:	4439      	add	r1, r7
 8003876:	440b      	add	r3, r1
 8003878:	0112      	lsls	r2, r2, #4
 800387a:	4413      	add	r3, r2
 800387c:	3308      	adds	r3, #8
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a32      	ldr	r2, [pc, #200]	; (800394c <httpd_post_receive_data+0x278>)
 8003882:	2100      	movs	r1, #0
 8003884:	54d1      	strb	r1, [r2, r3]
				memset(user_info.ip,0,16);
 8003886:	2210      	movs	r2, #16
 8003888:	2100      	movs	r1, #0
 800388a:	4837      	ldr	r0, [pc, #220]	; (8003968 <httpd_post_receive_data+0x294>)
 800388c:	f017 ff60 	bl	801b750 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 8003890:	2310      	movs	r3, #16
 8003892:	f242 0228 	movw	r2, #8232	; 0x2028
 8003896:	443a      	add	r2, r7
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	f242 0350 	movw	r3, #8272	; 0x2050
 800389e:	443b      	add	r3, r7
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <httpd_post_receive_data+0x28c>)
 80038a6:	f242 0158 	movw	r1, #8280	; 0x2058
 80038aa:	4439      	add	r1, r7
 80038ac:	440b      	add	r3, r1
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	4413      	add	r3, r2
 80038b2:	3308      	adds	r3, #8
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f242 0350 	movw	r3, #8272	; 0x2050
 80038ba:	443b      	add	r3, r7
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <httpd_post_receive_data+0x28c>)
 80038c2:	f242 0058 	movw	r0, #8280	; 0x2058
 80038c6:	4438      	add	r0, r7
 80038c8:	4403      	add	r3, r0
 80038ca:	0109      	lsls	r1, r1, #4
 80038cc:	440b      	add	r3, r1
 80038ce:	3304      	adds	r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f242 0224 	movw	r2, #8228	; 0x2024
 80038d8:	443a      	add	r2, r7
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	f242 0324 	movw	r3, #8228	; 0x2024
 80038e0:	443b      	add	r3, r7
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	f242 0328 	movw	r3, #8232	; 0x2028
 80038e8:	443b      	add	r3, r7
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bfa8      	it	ge
 80038f0:	4613      	movge	r3, r2
 80038f2:	f242 0220 	movw	r2, #8224	; 0x2020
 80038f6:	443a      	add	r2, r7
 80038f8:	6013      	str	r3, [r2, #0]
				strncpy(user_info.ip,&buf_data[t[i+1].start],len);
 80038fa:	f242 0350 	movw	r3, #8272	; 0x2050
 80038fe:	443b      	add	r3, r7
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <httpd_post_receive_data+0x28c>)
 8003906:	f242 0158 	movw	r1, #8280	; 0x2058
 800390a:	4439      	add	r1, r7
 800390c:	440b      	add	r3, r1
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	4413      	add	r3, r2
 8003912:	3304      	adds	r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a0d      	ldr	r2, [pc, #52]	; (800394c <httpd_post_receive_data+0x278>)
 8003918:	4413      	add	r3, r2
 800391a:	f242 0220 	movw	r2, #8224	; 0x2020
 800391e:	443a      	add	r2, r7
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4810      	ldr	r0, [pc, #64]	; (8003968 <httpd_post_receive_data+0x294>)
 8003926:	f018 fa3c 	bl	801bda2 <strncpy>
				i++;
 800392a:	f242 0350 	movw	r3, #8272	; 0x2050
 800392e:	443b      	add	r3, r7
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	f242 0250 	movw	r2, #8272	; 0x2050
 8003938:	443a      	add	r2, r7
 800393a:	6013      	str	r3, [r2, #0]
				continue;
 800393c:	e154      	b.n	8003be8 <httpd_post_receive_data+0x514>
 800393e:	bf00      	nop
 8003940:	ffffdfac 	.word	0xffffdfac
 8003944:	ffffdfa8 	.word	0xffffdfa8
 8003948:	20000d1c 	.word	0x20000d1c
 800394c:	20005360 	.word	0x20005360
 8003950:	08024b44 	.word	0x08024b44
 8003954:	08024b5c 	.word	0x08024b5c
 8003958:	08024b68 	.word	0x08024b68
 800395c:	20000d14 	.word	0x20000d14
 8003960:	ffffdfb4 	.word	0xffffdfb4
 8003964:	08024b90 	.word	0x08024b90
 8003968:	200050b8 	.word	0x200050b8
			}
			if (jsoneq(buf_data, &t[i], "NetMask") == 0) {
 800396c:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <httpd_post_receive_data+0x400>)
 800396e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003972:	443a      	add	r2, r7
 8003974:	4413      	add	r3, r2
 8003976:	f242 0250 	movw	r2, #8272	; 0x2050
 800397a:	443a      	add	r2, r7
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	4413      	add	r3, r2
 8003982:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <httpd_post_receive_data+0x404>)
 8003984:	4619      	mov	r1, r3
 8003986:	4855      	ldr	r0, [pc, #340]	; (8003adc <httpd_post_receive_data+0x408>)
 8003988:	f7ff fe36 	bl	80035f8 <jsoneq>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d16c      	bne.n	8003a6c <httpd_post_receive_data+0x398>
				buf_data[t[i+1].end] = '\0';
 8003992:	f242 0350 	movw	r3, #8272	; 0x2050
 8003996:	443b      	add	r3, r7
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <httpd_post_receive_data+0x400>)
 800399e:	f242 0158 	movw	r1, #8280	; 0x2058
 80039a2:	4439      	add	r1, r7
 80039a4:	440b      	add	r3, r1
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	4413      	add	r3, r2
 80039aa:	3308      	adds	r3, #8
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a4b      	ldr	r2, [pc, #300]	; (8003adc <httpd_post_receive_data+0x408>)
 80039b0:	2100      	movs	r1, #0
 80039b2:	54d1      	strb	r1, [r2, r3]
				memset(user_info.netmask,0,16);
 80039b4:	2210      	movs	r2, #16
 80039b6:	2100      	movs	r1, #0
 80039b8:	4849      	ldr	r0, [pc, #292]	; (8003ae0 <httpd_post_receive_data+0x40c>)
 80039ba:	f017 fec9 	bl	801b750 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 80039be:	2310      	movs	r3, #16
 80039c0:	f242 0234 	movw	r2, #8244	; 0x2034
 80039c4:	443a      	add	r2, r7
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	f242 0350 	movw	r3, #8272	; 0x2050
 80039cc:	443b      	add	r3, r7
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <httpd_post_receive_data+0x400>)
 80039d4:	f242 0158 	movw	r1, #8280	; 0x2058
 80039d8:	4439      	add	r1, r7
 80039da:	440b      	add	r3, r1
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	4413      	add	r3, r2
 80039e0:	3308      	adds	r3, #8
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	f242 0350 	movw	r3, #8272	; 0x2050
 80039e8:	443b      	add	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	1c59      	adds	r1, r3, #1
 80039ee:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <httpd_post_receive_data+0x400>)
 80039f0:	f242 0058 	movw	r0, #8280	; 0x2058
 80039f4:	4438      	add	r0, r7
 80039f6:	4403      	add	r3, r0
 80039f8:	0109      	lsls	r1, r1, #4
 80039fa:	440b      	add	r3, r1
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f242 0230 	movw	r2, #8240	; 0x2030
 8003a06:	443a      	add	r2, r7
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	f242 0330 	movw	r3, #8240	; 0x2030
 8003a0e:	443b      	add	r3, r7
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	f242 0334 	movw	r3, #8244	; 0x2034
 8003a16:	443b      	add	r3, r7
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	bfa8      	it	ge
 8003a1e:	4613      	movge	r3, r2
 8003a20:	f242 022c 	movw	r2, #8236	; 0x202c
 8003a24:	443a      	add	r2, r7
 8003a26:	6013      	str	r3, [r2, #0]
				strncpy(user_info.netmask,&buf_data[t[i+1].start],len);
 8003a28:	f242 0350 	movw	r3, #8272	; 0x2050
 8003a2c:	443b      	add	r3, r7
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	4b28      	ldr	r3, [pc, #160]	; (8003ad4 <httpd_post_receive_data+0x400>)
 8003a34:	f242 0158 	movw	r1, #8280	; 0x2058
 8003a38:	4439      	add	r1, r7
 8003a3a:	440b      	add	r3, r1
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	4413      	add	r3, r2
 8003a40:	3304      	adds	r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <httpd_post_receive_data+0x408>)
 8003a46:	4413      	add	r3, r2
 8003a48:	f242 022c 	movw	r2, #8236	; 0x202c
 8003a4c:	443a      	add	r2, r7
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <httpd_post_receive_data+0x40c>)
 8003a54:	f018 f9a5 	bl	801bda2 <strncpy>
				i++;
 8003a58:	f242 0350 	movw	r3, #8272	; 0x2050
 8003a5c:	443b      	add	r3, r7
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	f242 0250 	movw	r2, #8272	; 0x2050
 8003a66:	443a      	add	r2, r7
 8003a68:	6013      	str	r3, [r2, #0]
				continue;
 8003a6a:	e0bd      	b.n	8003be8 <httpd_post_receive_data+0x514>
			}
			if (jsoneq(buf_data, &t[i], "Timezone") == 0) {
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <httpd_post_receive_data+0x400>)
 8003a6e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003a72:	443a      	add	r2, r7
 8003a74:	4413      	add	r3, r2
 8003a76:	f242 0250 	movw	r2, #8272	; 0x2050
 8003a7a:	443a      	add	r2, r7
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	0112      	lsls	r2, r2, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <httpd_post_receive_data+0x410>)
 8003a84:	4619      	mov	r1, r3
 8003a86:	4815      	ldr	r0, [pc, #84]	; (8003adc <httpd_post_receive_data+0x408>)
 8003a88:	f7ff fdb6 	bl	80035f8 <jsoneq>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d12c      	bne.n	8003aec <httpd_post_receive_data+0x418>
				user_info.zone = atoi(&buf_data[t[i+1].start]);
 8003a92:	f242 0350 	movw	r3, #8272	; 0x2050
 8003a96:	443b      	add	r3, r7
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <httpd_post_receive_data+0x400>)
 8003a9e:	f242 0158 	movw	r1, #8280	; 0x2058
 8003aa2:	4439      	add	r1, r7
 8003aa4:	440b      	add	r3, r1
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <httpd_post_receive_data+0x408>)
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f017 fcf8 	bl	801b4a8 <atoi>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <httpd_post_receive_data+0x414>)
 8003abc:	6113      	str	r3, [r2, #16]
				i++;
 8003abe:	f242 0350 	movw	r3, #8272	; 0x2050
 8003ac2:	443b      	add	r3, r7
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f242 0250 	movw	r2, #8272	; 0x2050
 8003acc:	443a      	add	r2, r7
 8003ace:	6013      	str	r3, [r2, #0]
				continue;
 8003ad0:	e08a      	b.n	8003be8 <httpd_post_receive_data+0x514>
 8003ad2:	bf00      	nop
 8003ad4:	ffffdfb4 	.word	0xffffdfb4
 8003ad8:	08024b9c 	.word	0x08024b9c
 8003adc:	20005360 	.word	0x20005360
 8003ae0:	200051cb 	.word	0x200051cb
 8003ae4:	08024ba4 	.word	0x08024ba4
 8003ae8:	200050b8 	.word	0x200050b8
			}
			if (jsoneq(buf_data, &t[i], "contacts") == 0) {
 8003aec:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <httpd_post_receive_data+0x5e4>)
 8003aee:	f242 0258 	movw	r2, #8280	; 0x2058
 8003af2:	443a      	add	r2, r7
 8003af4:	4413      	add	r3, r2
 8003af6:	f242 0250 	movw	r2, #8272	; 0x2050
 8003afa:	443a      	add	r2, r7
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	0112      	lsls	r2, r2, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <httpd_post_receive_data+0x5e8>)
 8003b04:	4619      	mov	r1, r3
 8003b06:	486e      	ldr	r0, [pc, #440]	; (8003cc0 <httpd_post_receive_data+0x5ec>)
 8003b08:	f7ff fd76 	bl	80035f8 <jsoneq>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d16a      	bne.n	8003be8 <httpd_post_receive_data+0x514>
				memset(user_info.contacts,0,INFOLEN);
 8003b12:	22ff      	movs	r2, #255	; 0xff
 8003b14:	2100      	movs	r1, #0
 8003b16:	486b      	ldr	r0, [pc, #428]	; (8003cc4 <httpd_post_receive_data+0x5f0>)
 8003b18:	f017 fe1a 	bl	801b750 <memset>
				buf_data[t[i+1].end] = '\0';
 8003b1c:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b20:	443b      	add	r3, r7
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <httpd_post_receive_data+0x5e4>)
 8003b28:	f242 0158 	movw	r1, #8280	; 0x2058
 8003b2c:	4439      	add	r1, r7
 8003b2e:	440b      	add	r3, r1
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	4413      	add	r3, r2
 8003b34:	3308      	adds	r3, #8
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <httpd_post_receive_data+0x5ec>)
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	54d1      	strb	r1, [r2, r3]
				int len = mymin(INFOLEN,t[i+1].end-t[i+1].start);
 8003b3e:	23ff      	movs	r3, #255	; 0xff
 8003b40:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b4a:	443b      	add	r3, r7
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <httpd_post_receive_data+0x5e4>)
 8003b52:	f242 0158 	movw	r1, #8280	; 0x2058
 8003b56:	4439      	add	r1, r7
 8003b58:	440b      	add	r3, r1
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3308      	adds	r3, #8
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b66:	443b      	add	r3, r7
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <httpd_post_receive_data+0x5e4>)
 8003b6e:	f242 0058 	movw	r0, #8280	; 0x2058
 8003b72:	4438      	add	r0, r7
 8003b74:	4403      	add	r3, r0
 8003b76:	0109      	lsls	r1, r1, #4
 8003b78:	440b      	add	r3, r1
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f242 023c 	movw	r2, #8252	; 0x203c
 8003b84:	443a      	add	r2, r7
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	f242 033c 	movw	r3, #8252	; 0x203c
 8003b8c:	443b      	add	r3, r7
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bfa8      	it	ge
 8003b9a:	4613      	movge	r3, r2
 8003b9c:	f242 0238 	movw	r2, #8248	; 0x2038
 8003ba0:	443a      	add	r2, r7
 8003ba2:	6013      	str	r3, [r2, #0]
				strncpy(user_info.contacts,&buf_data[t[i+1].start],len);
 8003ba4:	f242 0350 	movw	r3, #8272	; 0x2050
 8003ba8:	443b      	add	r3, r7
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <httpd_post_receive_data+0x5e4>)
 8003bb0:	f242 0158 	movw	r1, #8280	; 0x2058
 8003bb4:	4439      	add	r1, r7
 8003bb6:	440b      	add	r3, r1
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3f      	ldr	r2, [pc, #252]	; (8003cc0 <httpd_post_receive_data+0x5ec>)
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f242 0238 	movw	r2, #8248	; 0x2038
 8003bc8:	443a      	add	r2, r7
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	483d      	ldr	r0, [pc, #244]	; (8003cc4 <httpd_post_receive_data+0x5f0>)
 8003bd0:	f018 f8e7 	bl	801bda2 <strncpy>
				i++;
 8003bd4:	f242 0350 	movw	r3, #8272	; 0x2050
 8003bd8:	443b      	add	r3, r7
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f242 0250 	movw	r2, #8272	; 0x2050
 8003be2:	443a      	add	r2, r7
 8003be4:	6013      	str	r3, [r2, #0]
				continue;
 8003be6:	bf00      	nop
		for (int i = 0; i<tokens; i++){
 8003be8:	f242 0350 	movw	r3, #8272	; 0x2050
 8003bec:	443b      	add	r3, r7
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f242 0250 	movw	r2, #8272	; 0x2050
 8003bf6:	443a      	add	r2, r7
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	f242 0350 	movw	r3, #8272	; 0x2050
 8003bfe:	443b      	add	r3, r7
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f242 0348 	movw	r3, #8264	; 0x2048
 8003c06:	443b      	add	r3, r7
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	f6ff ae16 	blt.w	800383c <httpd_post_receive_data+0x168>
			}
		}
		//setIPaddr
		ip4_addr_t add;
		inet_aton(user_info.ip, &add);
 8003c10:	f242 0310 	movw	r3, #8208	; 0x2010
 8003c14:	443b      	add	r3, r7
 8003c16:	4619      	mov	r1, r3
 8003c18:	482b      	ldr	r0, [pc, #172]	; (8003cc8 <httpd_post_receive_data+0x5f4>)
 8003c1a:	f016 fa2b 	bl	801a074 <ip4addr_aton>
		setIP(add.addr);
 8003c1e:	f242 0310 	movw	r3, #8208	; 0x2010
 8003c22:	443b      	add	r3, r7
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f005 fc36 	bl	8009498 <setIP>
		//setNetMask
		ip4_addr_t mask;
		inet_aton(user_info.netmask, &mask);
 8003c2c:	f242 030c 	movw	r3, #8204	; 0x200c
 8003c30:	443b      	add	r3, r7
 8003c32:	4619      	mov	r1, r3
 8003c34:	4825      	ldr	r0, [pc, #148]	; (8003ccc <httpd_post_receive_data+0x5f8>)
 8003c36:	f016 fa1d 	bl	801a074 <ip4addr_aton>
		setNetmask(mask.addr);
 8003c3a:	f242 030c 	movw	r3, #8204	; 0x200c
 8003c3e:	443b      	add	r3, r7
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f005 fc3a 	bl	80094bc <setNetmask>

        clearFlash();
 8003c48:	f7fd f9aa 	bl	8000fa0 <clearFlash>
        int offset=0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f242 0244 	movw	r2, #8260	; 0x2044
 8003c52:	443a      	add	r2, r7
 8003c54:	6013      	str	r3, [r2, #0]
        WriteDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8003c56:	f242 0344 	movw	r3, #8260	; 0x2044
 8003c5a:	443b      	add	r3, r7
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003c62:	4819      	ldr	r0, [pc, #100]	; (8003cc8 <httpd_post_receive_data+0x5f4>)
 8003c64:	f7fd f9c0 	bl	8000fe8 <WriteDeviceAddressOffset>
        offset+=sizeof(user_info);
 8003c68:	f242 0344 	movw	r3, #8260	; 0x2044
 8003c6c:	443b      	add	r3, r7
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003c74:	f242 0244 	movw	r2, #8260	; 0x2044
 8003c78:	443a      	add	r2, r7
 8003c7a:	6013      	str	r3, [r2, #0]
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       connection is unknown */
		ret = ERR_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f242 0257 	movw	r2, #8279	; 0x2057
 8003c82:	443a      	add	r2, r7
 8003c84:	7013      	strb	r3, [r2, #0]
 8003c86:	e004      	b.n	8003c92 <httpd_post_receive_data+0x5be>
	} else {
		ret = ERR_VAL;
 8003c88:	23fa      	movs	r3, #250	; 0xfa
 8003c8a:	f242 0257 	movw	r2, #8279	; 0x2057
 8003c8e:	443a      	add	r2, r7
 8003c90:	7013      	strb	r3, [r2, #0]
	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <httpd_post_receive_data+0x5fc>)
 8003c94:	f242 0258 	movw	r2, #8280	; 0x2058
 8003c98:	443a      	add	r2, r7
 8003c9a:	4413      	add	r3, r2
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	f00d fc77 	bl	8011590 <pbuf_free>

	return ret;
 8003ca2:	f242 0357 	movw	r3, #8279	; 0x2057
 8003ca6:	443b      	add	r3, r7
 8003ca8:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	ffffdfb4 	.word	0xffffdfb4
 8003cbc:	08024bb0 	.word	0x08024bb0
 8003cc0:	20005360 	.word	0x20005360
 8003cc4:	200050cc 	.word	0x200050cc
 8003cc8:	200050b8 	.word	0x200050b8
 8003ccc:	200051cb 	.word	0x200051cb
 8003cd0:	ffffdfa8 	.word	0xffffdfa8

08003cd4 <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	4a0f      	ldr	r2, [pc, #60]	; (8003d24 <httpd_post_finished+0x50>)
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	68b8      	ldr	r0, [r7, #8]
 8003cea:	f017 ffe7 	bl	801bcbc <snprintf>
	if (current_connection == connection) {
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <httpd_post_finished+0x54>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d110      	bne.n	8003d1a <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <httpd_post_finished+0x58>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d105      	bne.n	8003d0e <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <httpd_post_finished+0x5c>)
 8003d06:	4619      	mov	r1, r3
 8003d08:	68b8      	ldr	r0, [r7, #8]
 8003d0a:	f017 ffd7 	bl	801bcbc <snprintf>
		}
		current_connection = NULL;
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <httpd_post_finished+0x54>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <httpd_post_finished+0x58>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
	}
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	08024bbc 	.word	0x08024bbc
 8003d28:	20000d14 	.word	0x20000d14
 8003d2c:	20000d18 	.word	0x20000d18
 8003d30:	08024b38 	.word	0x08024b38

08003d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_MspInit+0x4c>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_MspInit+0x4c>)
 8003d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_MspInit+0x4c>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_MspInit+0x4c>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_MspInit+0x4c>)
 8003d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_MspInit+0x4c>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	f06f 0001 	mvn.w	r0, #1
 8003d72:	f000 fb2f 	bl	80043d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800

08003d84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a07      	ldr	r2, [pc, #28]	; (8003db0 <HAL_RTC_MspInit+0x2c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d105      	bne.n	8003da2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RTC_MspInit+0x30>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <HAL_RTC_MspInit+0x30>)
 8003d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40002800 	.word	0x40002800
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08c      	sub	sp, #48	; 0x30
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc0:	f107 031c 	add.w	r3, r7, #28
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a36      	ldr	r2, [pc, #216]	; (8003eb0 <HAL_UART_MspInit+0xf8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d130      	bne.n	8003e3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003dda:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003df8:	f043 0320 	orr.w	r3, r3, #32
 8003dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003e0a:	23c0      	movs	r3, #192	; 0xc0
 8003e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e16:	2303      	movs	r3, #3
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e1e:	f107 031c 	add.w	r3, r7, #28
 8003e22:	4619      	mov	r1, r3
 8003e24:	4824      	ldr	r0, [pc, #144]	; (8003eb8 <HAL_UART_MspInit+0x100>)
 8003e26:	f001 fe1d 	bl	8005a64 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2105      	movs	r1, #5
 8003e2e:	2052      	movs	r0, #82	; 0x52
 8003e30:	f000 fad0 	bl	80043d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003e34:	2052      	movs	r0, #82	; 0x52
 8003e36:	f000 fae9 	bl	800440c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003e3a:	e034      	b.n	8003ea6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <HAL_UART_MspInit+0x104>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d12f      	bne.n	8003ea6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e4c:	f043 0320 	orr.w	r3, r3, #32
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
 8003e52:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_UART_MspInit+0xfc>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003e76:	23c0      	movs	r3, #192	; 0xc0
 8003e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e82:	2303      	movs	r3, #3
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e86:	2308      	movs	r3, #8
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <HAL_UART_MspInit+0x108>)
 8003e92:	f001 fde7 	bl	8005a64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2105      	movs	r1, #5
 8003e9a:	2047      	movs	r0, #71	; 0x47
 8003e9c:	f000 fa9a 	bl	80043d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ea0:	2047      	movs	r0, #71	; 0x47
 8003ea2:	f000 fab3 	bl	800440c <HAL_NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3730      	adds	r7, #48	; 0x30
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40007800 	.word	0x40007800
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40021400 	.word	0x40021400
 8003ebc:	40011400 	.word	0x40011400
 8003ec0:	40020800 	.word	0x40020800

08003ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	; 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	2036      	movs	r0, #54	; 0x36
 8003eda:	f000 fa7b 	bl	80043d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ede:	2036      	movs	r0, #54	; 0x36
 8003ee0:	f000 fa94 	bl	800440c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ee4:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_InitTick+0xa0>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_InitTick+0xa0>)
 8003eea:	f043 0310 	orr.w	r3, r3, #16
 8003eee:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <HAL_InitTick+0xa0>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003efc:	f107 0210 	add.w	r2, r7, #16
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f002 fc7e 	bl	8006808 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003f0c:	f002 fc54 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 8003f10:	4603      	mov	r3, r0
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <HAL_InitTick+0xa4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0c9b      	lsrs	r3, r3, #18
 8003f20:	3b01      	subs	r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <HAL_InitTick+0xac>)
 8003f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003f32:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f46:	f003 fbb7 	bl	80076b8 <HAL_TIM_Base_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003f50:	4806      	ldr	r0, [pc, #24]	; (8003f6c <HAL_InitTick+0xa8>)
 8003f52:	f003 fc13 	bl	800777c <HAL_TIM_Base_Start_IT>
 8003f56:	4603      	mov	r3, r0
 8003f58:	e000      	b.n	8003f5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	; 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	431bde83 	.word	0x431bde83
 8003f6c:	20005560 	.word	0x20005560
 8003f70:	40001000 	.word	0x40001000

08003f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f78:	e7fe      	b.n	8003f78 <NMI_Handler+0x4>

08003f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f7e:	e7fe      	b.n	8003f7e <HardFault_Handler+0x4>

08003f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f84:	e7fe      	b.n	8003f84 <MemManage_Handler+0x4>

08003f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f8a:	e7fe      	b.n	8003f8a <BusFault_Handler+0x4>

08003f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <UsageFault_Handler+0x4>

08003f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f92:	b480      	push	{r7}
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <TIM6_DAC_IRQHandler+0x10>)
 8003fa6:	f003 fc61 	bl	800786c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20005560 	.word	0x20005560

08003fb4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <ETH_IRQHandler+0x10>)
 8003fba:	f000 fea9 	bl	8004d10 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20006ee4 	.word	0x20006ee4

08003fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003fcc:	4802      	ldr	r0, [pc, #8]	; (8003fd8 <USART6_IRQHandler+0x10>)
 8003fce:	f003 fff1 	bl	8007fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20005290 	.word	0x20005290

08003fdc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <UART7_IRQHandler+0x10>)
 8003fe2:	f003 ffe7 	bl	8007fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	200051e0 	.word	0x200051e0

08003ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
	return 1;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_kill>:

int _kill(int pid, int sig)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <_kill+0x20>)
 800400c:	2216      	movs	r2, #22
 800400e:	601a      	str	r2, [r3, #0]
	return -1;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	2000be70 	.word	0x2000be70

08004024 <_exit>:

void _exit (int status)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800402c:	f04f 31ff 	mov.w	r1, #4294967295
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ffe5 	bl	8004000 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004036:	e7fe      	b.n	8004036 <_exit+0x12>

08004038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e00a      	b.n	8004060 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800404a:	f3af 8000 	nop.w
 800404e:	4601      	mov	r1, r0
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	60ba      	str	r2, [r7, #8]
 8004056:	b2ca      	uxtb	r2, r1
 8004058:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	3301      	adds	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	dbf0      	blt.n	800404a <_read+0x12>
	}

return len;
 8004068:	687b      	ldr	r3, [r7, #4]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
	return -1;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800409a:	605a      	str	r2, [r3, #4]
	return 0;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <_isatty>:

int _isatty(int file)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
	return 1;
 80040b2:	2301      	movs	r3, #1
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	return 0;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d205      	bcs.n	8004118 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <_sbrk+0x6c>)
 800410e:	220c      	movs	r2, #12
 8004110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e009      	b.n	800412c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_sbrk+0x64>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	4a06      	ldr	r2, [pc, #24]	; (8004140 <_sbrk+0x64>)
 8004128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20050000 	.word	0x20050000
 800413c:	00000400 	.word	0x00000400
 8004140:	20000d24 	.word	0x20000d24
 8004144:	2000be88 	.word	0x2000be88
 8004148:	2000be70 	.word	0x2000be70

0800414c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <SystemInit+0x20>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <SystemInit+0x20>)
 8004158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800415c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004174:	480d      	ldr	r0, [pc, #52]	; (80041ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004176:	490e      	ldr	r1, [pc, #56]	; (80041b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004178:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800417a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800417c:	e002      	b.n	8004184 <LoopCopyDataInit>

0800417e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004182:	3304      	adds	r3, #4

08004184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004188:	d3f9      	bcc.n	800417e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800418c:	4c0b      	ldr	r4, [pc, #44]	; (80041bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800418e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004190:	e001      	b.n	8004196 <LoopFillZerobss>

08004192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004194:	3204      	adds	r2, #4

08004196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004198:	d3fb      	bcc.n	8004192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800419a:	f7ff ffd7 	bl	800414c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800419e:	f017 f987 	bl	801b4b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a2:	f7fc ffd9 	bl	8001158 <main>
  bx  lr    
 80041a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80041ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041b0:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 80041b4:	080296dc 	.word	0x080296dc
  ldr r2, =_sbss
 80041b8:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 80041bc:	2000be84 	.word	0x2000be84

080041c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c0:	e7fe      	b.n	80041c0 <ADC_IRQHandler>

080041c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c6:	2003      	movs	r0, #3
 80041c8:	f000 f8f9 	bl	80043be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7ff fe79 	bl	8003ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041d2:	f7ff fdaf 	bl	8003d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_IncTick+0x20>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_IncTick+0x24>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <HAL_IncTick+0x24>)
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000024 	.word	0x20000024
 8004200:	200055ac 	.word	0x200055ac

08004204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return uwTick;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_GetTick+0x14>)
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	200055ac 	.word	0x200055ac

0800421c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004224:	f7ff ffee 	bl	8004204 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d005      	beq.n	8004242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <HAL_Delay+0x44>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004242:	bf00      	nop
 8004244:	f7ff ffde 	bl	8004204 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d8f7      	bhi.n	8004244 <HAL_Delay+0x28>
  {
  }
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000024 	.word	0x20000024

08004264 <__NVIC_SetPriorityGrouping>:
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004280:	4013      	ands	r3, r2
 8004282:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <__NVIC_SetPriorityGrouping+0x44>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004292:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	60d3      	str	r3, [r2, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000ed00 	.word	0xe000ed00
 80042a8:	05fa0000 	.word	0x05fa0000

080042ac <__NVIC_GetPriorityGrouping>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <__NVIC_GetPriorityGrouping+0x18>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	f003 0307 	and.w	r3, r3, #7
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <__NVIC_EnableIRQ>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	db0b      	blt.n	80042f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <__NVIC_EnableIRQ+0x38>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2001      	movs	r0, #1
 80042ea:	fa00 f202 	lsl.w	r2, r0, r2
 80042ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_SetPriority>:
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db0a      	blt.n	800432e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	490c      	ldr	r1, [pc, #48]	; (8004350 <__NVIC_SetPriority+0x4c>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	440b      	add	r3, r1
 8004328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800432c:	e00a      	b.n	8004344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <__NVIC_SetPriority+0x50>)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3b04      	subs	r3, #4
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	440b      	add	r3, r1
 8004342:	761a      	strb	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <NVIC_EncodePriority>:
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf28      	it	cs
 8004376:	2304      	movcs	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3304      	adds	r3, #4
 800437e:	2b06      	cmp	r3, #6
 8004380:	d902      	bls.n	8004388 <NVIC_EncodePriority+0x30>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3b03      	subs	r3, #3
 8004386:	e000      	b.n	800438a <NVIC_EncodePriority+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	4313      	orrs	r3, r2
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff4c 	bl	8004264 <__NVIC_SetPriorityGrouping>
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043e6:	f7ff ff61 	bl	80042ac <__NVIC_GetPriorityGrouping>
 80043ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	6978      	ldr	r0, [r7, #20]
 80043f2:	f7ff ffb1 	bl	8004358 <NVIC_EncodePriority>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ff80 	bl	8004304 <__NVIC_SetPriority>
}
 8004404:	bf00      	nop
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff54 	bl	80042c8 <__NVIC_EnableIRQ>
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004436:	f7ff fee5 	bl	8004204 <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d008      	beq.n	800445a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e052      	b.n	8004500 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0216 	bic.w	r2, r2, #22
 8004468:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004478:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <HAL_DMA_Abort+0x62>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0208 	bic.w	r2, r2, #8
 8004498:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044aa:	e013      	b.n	80044d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ac:	f7ff feaa 	bl	8004204 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d90c      	bls.n	80044d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e015      	b.n	8004500 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e4      	bne.n	80044ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	223f      	movs	r2, #63	; 0x3f
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d004      	beq.n	8004526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e00c      	b.n	8004540 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2205      	movs	r2, #5
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800455c:	4ba9      	ldr	r3, [pc, #676]	; (8004804 <HAL_ETH_Init+0x2b8>)
 800455e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e181      	b.n	8004876 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f005 f8d8 	bl	800973c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458c:	4b9e      	ldr	r3, [pc, #632]	; (8004808 <HAL_ETH_Init+0x2bc>)
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	4a9d      	ldr	r2, [pc, #628]	; (8004808 <HAL_ETH_Init+0x2bc>)
 8004592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004596:	6453      	str	r3, [r2, #68]	; 0x44
 8004598:	4b9b      	ldr	r3, [pc, #620]	; (8004808 <HAL_ETH_Init+0x2bc>)
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80045a4:	4b99      	ldr	r3, [pc, #612]	; (800480c <HAL_ETH_Init+0x2c0>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a98      	ldr	r2, [pc, #608]	; (800480c <HAL_ETH_Init+0x2c0>)
 80045aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80045b0:	4b96      	ldr	r3, [pc, #600]	; (800480c <HAL_ETH_Init+0x2c0>)
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4994      	ldr	r1, [pc, #592]	; (800480c <HAL_ETH_Init+0x2c0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80045d6:	f7ff fe15 	bl	8004204 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80045dc:	e011      	b.n	8004602 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80045de:	f7ff fe11 	bl	8004204 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045ec:	d909      	bls.n	8004602 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2203      	movs	r2, #3
 80045f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e139      	b.n	8004876 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e4      	bne.n	80045de <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f023 031c 	bic.w	r3, r3, #28
 8004622:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004624:	f002 f8bc 	bl	80067a0 <HAL_RCC_GetHCLKFreq>
 8004628:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	4a78      	ldr	r2, [pc, #480]	; (8004810 <HAL_ETH_Init+0x2c4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d908      	bls.n	8004644 <HAL_ETH_Init+0xf8>
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4a77      	ldr	r2, [pc, #476]	; (8004814 <HAL_ETH_Init+0x2c8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d804      	bhi.n	8004644 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e027      	b.n	8004694 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4a73      	ldr	r2, [pc, #460]	; (8004814 <HAL_ETH_Init+0x2c8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d908      	bls.n	800465e <HAL_ETH_Init+0x112>
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	4a6d      	ldr	r2, [pc, #436]	; (8004804 <HAL_ETH_Init+0x2b8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d204      	bcs.n	800465e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f043 030c 	orr.w	r3, r3, #12
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	e01a      	b.n	8004694 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	4a68      	ldr	r2, [pc, #416]	; (8004804 <HAL_ETH_Init+0x2b8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d303      	bcc.n	800466e <HAL_ETH_Init+0x122>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4a6b      	ldr	r2, [pc, #428]	; (8004818 <HAL_ETH_Init+0x2cc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d911      	bls.n	8004692 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4a69      	ldr	r2, [pc, #420]	; (8004818 <HAL_ETH_Init+0x2cc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d908      	bls.n	8004688 <HAL_ETH_Init+0x13c>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4a68      	ldr	r2, [pc, #416]	; (800481c <HAL_ETH_Init+0x2d0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d804      	bhi.n	8004688 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f043 0304 	orr.w	r3, r3, #4
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e005      	b.n	8004694 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f043 0310 	orr.w	r3, r3, #16
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	e000      	b.n	8004694 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004692:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800469c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046a0:	2100      	movs	r1, #0
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fc17 	bl	8004ed6 <HAL_ETH_WritePHYRegister>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80046b2:	6939      	ldr	r1, [r7, #16]
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fca3 	bl	8005000 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0d7      	b.n	8004876 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80046c6:	20ff      	movs	r0, #255	; 0xff
 80046c8:	f7ff fda8 	bl	800421c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a5 	beq.w	8004820 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d6:	f7ff fd95 	bl	8004204 <HAL_GetTick>
 80046da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	461a      	mov	r2, r3
 80046e2:	2101      	movs	r1, #1
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fb8e 	bl	8004e06 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80046ea:	f7ff fd8b 	bl	8004204 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d90f      	bls.n	800471c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004700:	6939      	ldr	r1, [r7, #16]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fc7c 	bl	8005000 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0ac      	b.n	8004876 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0da      	beq.n	80046dc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800472a:	2100      	movs	r1, #0
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fbd2 	bl	8004ed6 <HAL_ETH_WritePHYRegister>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fc5e 	bl	8005000 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800474c:	2301      	movs	r3, #1
 800474e:	e092      	b.n	8004876 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004750:	f7ff fd58 	bl	8004204 <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004756:	f107 030c 	add.w	r3, r7, #12
 800475a:	461a      	mov	r2, r3
 800475c:	2101      	movs	r1, #1
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fb51 	bl	8004e06 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004764:	f7ff fd4e 	bl	8004204 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d90f      	bls.n	8004796 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800477a:	6939      	ldr	r1, [r7, #16]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fc3f 	bl	8005000 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e06f      	b.n	8004876 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0da      	beq.n	8004756 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80047a0:	f107 030c 	add.w	r3, r7, #12
 80047a4:	461a      	mov	r2, r3
 80047a6:	2110      	movs	r1, #16
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb2c 	bl	8004e06 <HAL_ETH_ReadPHYRegister>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80047b8:	6939      	ldr	r1, [r7, #16]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fc20 	bl	8005000 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80047c8:	2301      	movs	r3, #1
 80047ca:	e054      	b.n	8004876 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	e002      	b.n	80047e6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	e035      	b.n	8004864 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	e030      	b.n	8004864 <HAL_ETH_Init+0x318>
 8004802:	bf00      	nop
 8004804:	03938700 	.word	0x03938700
 8004808:	40023800 	.word	0x40023800
 800480c:	40013800 	.word	0x40013800
 8004810:	01312cff 	.word	0x01312cff
 8004814:	02160ebf 	.word	0x02160ebf
 8004818:	05f5e0ff 	.word	0x05f5e0ff
 800481c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	08db      	lsrs	r3, r3, #3
 8004826:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004830:	4313      	orrs	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	461a      	mov	r2, r3
 8004836:	2100      	movs	r1, #0
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb4c 	bl	8004ed6 <HAL_ETH_WritePHYRegister>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004848:	6939      	ldr	r1, [r7, #16]
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fbd8 	bl	8005000 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e00c      	b.n	8004876 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800485c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004860:	f7ff fcdc 	bl	800421c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004864:	6939      	ldr	r1, [r7, #16]
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fbca 	bl	8005000 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_ETH_DMATxDescListInit+0x20>
 800489c:	2302      	movs	r3, #2
 800489e:	e052      	b.n	8004946 <HAL_ETH_DMATxDescListInit+0xc6>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e030      	b.n	800491e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	015b      	lsls	r3, r3, #5
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	4413      	add	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80048cc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d208      	bcs.n	8004912 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	3301      	adds	r3, #1
 8004904:	015b      	lsls	r3, r3, #5
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4413      	add	r3, r2
 800490a:	461a      	mov	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	e002      	b.n	8004918 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3301      	adds	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d3ca      	bcc.n	80048bc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6819      	ldr	r1, [r3, #0]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	f241 0310 	movw	r3, #4112	; 0x1010
 8004930:	440b      	add	r3, r1
 8004932:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_ETH_DMARxDescListInit+0x20>
 800496e:	2302      	movs	r3, #2
 8004970:	e056      	b.n	8004a20 <HAL_ETH_DMARxDescListInit+0xce>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e034      	b.n	80049f8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	015b      	lsls	r3, r3, #5
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	4413      	add	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800499e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80049a6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	461a      	mov	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d105      	bne.n	80049d0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d208      	bcs.n	80049ec <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	3301      	adds	r3, #1
 80049de:	015b      	lsls	r3, r3, #5
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	4413      	add	r3, r2
 80049e4:	461a      	mov	r2, r3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	e002      	b.n	80049f2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	3301      	adds	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3c6      	bcc.n	800498e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6819      	ldr	r1, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	f241 030c 	movw	r3, #4108	; 0x100c
 8004a0a:	440b      	add	r3, r1
 8004a0c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_ETH_TransmitFrame+0x24>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0cd      	b.n	8004bec <HAL_ETH_TransmitFrame+0x1c0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004a76:	2301      	movs	r3, #1
 8004a78:	e0b8      	b.n	8004bec <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	da09      	bge.n	8004a98 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2212      	movs	r2, #18
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0a9      	b.n	8004bec <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d915      	bls.n	8004ace <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	4a54      	ldr	r2, [pc, #336]	; (8004bf8 <HAL_ETH_TransmitFrame+0x1cc>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	0a9b      	lsrs	r3, r3, #10
 8004aac:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4b51      	ldr	r3, [pc, #324]	; (8004bf8 <HAL_ETH_TransmitFrame+0x1cc>)
 8004ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e001      	b.n	8004ad2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d11c      	bne.n	8004b12 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004ae6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004af2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b02:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b10:	e04b      	b.n	8004baa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	e044      	b.n	8004ba2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b26:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d107      	bne.n	8004b3e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b3c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b46:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d116      	bne.n	8004b80 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b60:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_ETH_TransmitFrame+0x1d0>)
 8004b66:	fb02 f203 	mul.w	r2, r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004b72:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004b7e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004b8e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3b6      	bcc.n	8004b18 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f241 0314 	movw	r3, #4116	; 0x1014
 8004bb2:	4413      	add	r3, r2
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f241 0314 	movw	r3, #4116	; 0x1014
 8004bc6:	4413      	add	r3, r2
 8004bc8:	2204      	movs	r2, #4
 8004bca:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	f241 0304 	movw	r3, #4100	; 0x1004
 8004bd4:	4413      	add	r3, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	ac02b00b 	.word	0xac02b00b
 8004bfc:	fffffa0c 	.word	0xfffffa0c

08004c00 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e074      	b.n	8004d04 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004c2a:	e05a      	b.n	8004ce2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d10d      	bne.n	8004c5e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c5c:	e041      	b.n	8004ce2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
 8004c82:	e02e      	b.n	8004ce2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d103      	bne.n	8004ca6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004cb2:	1f1a      	subs	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e010      	b.n	8004d04 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db02      	blt.n	8004cf2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d99c      	bls.n	8004c2c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d20:	4413      	add	r3, r2
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d112      	bne.n	8004d52 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f004 fda7 	bl	8009880 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d3a:	4413      	add	r3, r2
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d50:	e01b      	b.n	8004d8a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d5a:	4413      	add	r3, r2
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d111      	bne.n	8004d8a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f839 	bl	8004dde <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d74:	4413      	add	r3, r2
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004d92:	4413      	add	r3, r2
 8004d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d98:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004da2:	4413      	add	r3, r2
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dae:	d112      	bne.n	8004dd6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f81e 	bl	8004df2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	f241 0314 	movw	r3, #4116	; 0x1014
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dc4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b82      	cmp	r3, #130	; 0x82
 8004e26:	d101      	bne.n	8004e2c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e050      	b.n	8004ece <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2282      	movs	r2, #130	; 0x82
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f003 031c 	and.w	r3, r3, #28
 8004e42:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8a1b      	ldrh	r3, [r3, #16]
 8004e48:	02db      	lsls	r3, r3, #11
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004e52:	897b      	ldrh	r3, [r7, #10]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0302 	bic.w	r3, r3, #2
 8004e66:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e78:	f7ff f9c4 	bl	8004204 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e7e:	e015      	b.n	8004eac <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004e80:	f7ff f9c0 	bl	8004204 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8e:	d309      	bcc.n	8004ea4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e014      	b.n	8004ece <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e4      	bne.n	8004e80 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b42      	cmp	r3, #66	; 0x42
 8004ef6:	d101      	bne.n	8004efc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e04e      	b.n	8004f9a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2242      	movs	r2, #66	; 0x42
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 031c 	and.w	r3, r3, #28
 8004f12:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8a1b      	ldrh	r3, [r3, #16]
 8004f18:	02db      	lsls	r3, r3, #11
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f043 0302 	orr.w	r3, r3, #2
 8004f36:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f52:	f7ff f957 	bl	8004204 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f58:	e015      	b.n	8004f86 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004f5a:	f7ff f953 	bl	8004204 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f68:	d309      	bcc.n	8004f7e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e00d      	b.n	8004f9a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e4      	bne.n	8004f5a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ETH_Start+0x16>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e01f      	b.n	8004ff8 <HAL_ETH_Start+0x56>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fa1b 	bl	8005404 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa35 	bl	800543e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa7f 	bl	80054d8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa4c 	bl	8005478 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fa61 	bl	80054a8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b0b0      	sub	sp, #192	; 0xc0
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800501c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005024:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005026:	2300      	movs	r3, #0
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800502a:	2300      	movs	r3, #0
 800502c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800502e:	2300      	movs	r3, #0
 8005030:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005032:	2300      	movs	r3, #0
 8005034:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005036:	2300      	movs	r3, #0
 8005038:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800503a:	2300      	movs	r3, #0
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504a:	663b      	str	r3, [r7, #96]	; 0x60
 800504c:	e001      	b.n	8005052 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800504e:	2300      	movs	r3, #0
 8005050:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005056:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005058:	2300      	movs	r3, #0
 800505a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800505c:	2300      	movs	r3, #0
 800505e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005060:	2300      	movs	r3, #0
 8005062:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005064:	2300      	movs	r3, #0
 8005066:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005068:	2300      	movs	r3, #0
 800506a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005070:	2300      	movs	r3, #0
 8005072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005082:	2300      	movs	r3, #0
 8005084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005088:	2300      	movs	r3, #0
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005094:	2300      	movs	r3, #0
 8005096:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800509a:	2300      	movs	r3, #0
 800509c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80050d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050d8:	4bab      	ldr	r3, [pc, #684]	; (8005388 <ETH_MACDMAConfig+0x388>)
 80050da:	4013      	ands	r3, r2
 80050dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80050e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80050e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80050e4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80050e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80050e8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80050ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80050ec:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80050f2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80050f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80050f6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80050f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80050fa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005100:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005104:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005108:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800510a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800510c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005110:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005114:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005116:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005128:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005134:	2001      	movs	r0, #1
 8005136:	f7ff f871 	bl	800421c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005142:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005144:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005148:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800514a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800514c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800514e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005152:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005158:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800515a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800515e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005164:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005168:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005170:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005172:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800517e:	2001      	movs	r0, #1
 8005180:	f7ff f84c 	bl	800421c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800518c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005196:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80051a0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80051ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051b0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80051b4:	4013      	ands	r3, r2
 80051b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80051ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051be:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80051c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80051c4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80051c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80051ca:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80051cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80051d0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80051d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80051d6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80051d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80051dc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80051de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051f0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80051fc:	2001      	movs	r0, #1
 80051fe:	f7ff f80d 	bl	800421c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800520a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800520c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005210:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005226:	2001      	movs	r0, #1
 8005228:	f7fe fff8 	bl	800421c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005234:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800523a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800523e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005244:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005248:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005252:	2300      	movs	r3, #0
 8005254:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005256:	2300      	movs	r3, #0
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800525a:	2304      	movs	r3, #4
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800525e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005268:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800526a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800527a:	2300      	movs	r3, #0
 800527c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800527e:	2300      	movs	r3, #0
 8005280:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	f241 0318 	movw	r3, #4120	; 0x1018
 800528a:	4413      	add	r3, r2
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8005292:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <ETH_MACDMAConfig+0x38c>)
 8005298:	4013      	ands	r3, r2
 800529a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800529e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80052a0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80052a2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80052a4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80052a6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80052a8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80052aa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80052ac:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80052ae:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80052b0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80052b2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80052b4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80052b6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80052ba:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80052be:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80052c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80052d2:	4413      	add	r3, r2
 80052d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	f241 0318 	movw	r3, #4120	; 0x1018
 80052e2:	4413      	add	r3, r2
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80052ea:	2001      	movs	r0, #1
 80052ec:	f7fe ff96 	bl	800421c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80052f8:	4413      	add	r3, r2
 80052fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052fe:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005304:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005308:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800530c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005310:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005316:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800531a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005328:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005338:	2001      	movs	r0, #1
 800533a:	f7fe ff6f 	bl	800421c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800534a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10d      	bne.n	8005370 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	f241 031c 	movw	r3, #4124	; 0x101c
 800535c:	4413      	add	r3, r2
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6811      	ldr	r1, [r2, #0]
 8005364:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <ETH_MACDMAConfig+0x390>)
 8005366:	431a      	orrs	r2, r3
 8005368:	f241 031c 	movw	r3, #4124	; 0x101c
 800536c:	440b      	add	r3, r1
 800536e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	461a      	mov	r2, r3
 8005376:	2100      	movs	r1, #0
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f80b 	bl	8005394 <ETH_MACAddressConfig>
}
 800537e:	bf00      	nop
 8005380:	37c0      	adds	r7, #192	; 0xc0
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	ff20810f 	.word	0xff20810f
 800538c:	f8de3f23 	.word	0xf8de3f23
 8005390:	00010040 	.word	0x00010040

08005394 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3305      	adds	r3, #5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	3204      	adds	r2, #4
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <ETH_MACAddressConfig+0x68>)
 80053b6:	4413      	add	r3, r2
 80053b8:	461a      	mov	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3303      	adds	r3, #3
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	061a      	lsls	r2, r3, #24
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3302      	adds	r3, #2
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3301      	adds	r3, #1
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	4313      	orrs	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	7812      	ldrb	r2, [r2, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <ETH_MACAddressConfig+0x6c>)
 80053e6:	4413      	add	r3, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	6013      	str	r3, [r2, #0]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40028040 	.word	0x40028040
 8005400:	40028044 	.word	0x40028044

08005404 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005428:	2001      	movs	r0, #1
 800542a:	f7fe fef7 	bl	800421c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0204 	orr.w	r2, r2, #4
 8005458:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005462:	2001      	movs	r0, #1
 8005464:	f7fe feda 	bl	800421c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	f241 0318 	movw	r3, #4120	; 0x1018
 8005488:	4413      	add	r3, r2
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6811      	ldr	r1, [r2, #0]
 8005490:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005494:	f241 0318 	movw	r3, #4120	; 0x1018
 8005498:	440b      	add	r3, r1
 800549a:	601a      	str	r2, [r3, #0]
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80054b8:	4413      	add	r3, r2
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6811      	ldr	r1, [r2, #0]
 80054c0:	f043 0202 	orr.w	r2, r3, #2
 80054c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80054c8:	440b      	add	r3, r1
 80054ca:	601a      	str	r2, [r3, #0]
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80054ec:	4413      	add	r3, r2
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6811      	ldr	r1, [r2, #0]
 80054f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80054fc:	440b      	add	r3, r1
 80054fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	f241 0318 	movw	r3, #4120	; 0x1018
 8005508:	4413      	add	r3, r2
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800550e:	2001      	movs	r0, #1
 8005510:	f7fe fe84 	bl	800421c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6819      	ldr	r1, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f241 0318 	movw	r3, #4120	; 0x1018
 800551e:	440b      	add	r3, r1
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <HAL_FLASH_Program+0xb0>)
 8005540:	7d1b      	ldrb	r3, [r3, #20]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_FLASH_Program+0x1e>
 8005546:	2302      	movs	r3, #2
 8005548:	e043      	b.n	80055d2 <HAL_FLASH_Program+0xa6>
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_FLASH_Program+0xb0>)
 800554c:	2201      	movs	r2, #1
 800554e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005550:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005554:	f000 f878 	bl	8005648 <FLASH_WaitForLastOperation>
 8005558:	4603      	mov	r3, r0
 800555a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d133      	bne.n	80055ca <HAL_FLASH_Program+0x9e>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d823      	bhi.n	80055b0 <HAL_FLASH_Program+0x84>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_FLASH_Program+0x44>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005581 	.word	0x08005581
 8005574:	0800558d 	.word	0x0800558d
 8005578:	08005599 	.word	0x08005599
 800557c:	080055a5 	.word	0x080055a5
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8005580:	783b      	ldrb	r3, [r7, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	68b8      	ldr	r0, [r7, #8]
 8005586:	f000 f921 	bl	80057cc <FLASH_Program_Byte>
        break;
 800558a:	e012      	b.n	80055b2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800558c:	883b      	ldrh	r3, [r7, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	68b8      	ldr	r0, [r7, #8]
 8005592:	f000 f8f5 	bl	8005780 <FLASH_Program_HalfWord>
        break;
 8005596:	e00c      	b.n	80055b2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	f000 f8c9 	bl	8005734 <FLASH_Program_Word>
        break;
 80055a2:	e006      	b.n	80055b2 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80055a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a8:	68b8      	ldr	r0, [r7, #8]
 80055aa:	f000 f88d 	bl	80056c8 <FLASH_Program_DoubleWord>
        break;
 80055ae:	e000      	b.n	80055b2 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80055b0:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055b6:	f000 f847 	bl	8005648 <FLASH_WaitForLastOperation>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_FLASH_Program+0xb4>)
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <HAL_FLASH_Program+0xb4>)
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <HAL_FLASH_Program+0xb0>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	751a      	strb	r2, [r3, #20]

  return status;
 80055d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	200055b0 	.word	0x200055b0
 80055e0:	40023c00 	.word	0x40023c00

080055e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_FLASH_Unlock+0x38>)
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da0b      	bge.n	800560e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_FLASH_Unlock+0x38>)
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <HAL_FLASH_Unlock+0x3c>)
 80055fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80055fc:	4b07      	ldr	r3, [pc, #28]	; (800561c <HAL_FLASH_Unlock+0x38>)
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <HAL_FLASH_Unlock+0x40>)
 8005600:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_FLASH_Unlock+0x38>)
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	da01      	bge.n	800560e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800560e:	79fb      	ldrb	r3, [r7, #7]
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40023c00 	.word	0x40023c00
 8005620:	45670123 	.word	0x45670123
 8005624:	cdef89ab 	.word	0xcdef89ab

08005628 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_FLASH_Lock+0x1c>)
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	4a04      	ldr	r2, [pc, #16]	; (8005644 <HAL_FLASH_Lock+0x1c>)
 8005632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005636:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40023c00 	.word	0x40023c00

08005648 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <FLASH_WaitForLastOperation+0x78>)
 8005656:	2200      	movs	r2, #0
 8005658:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800565a:	f7fe fdd3 	bl	8004204 <HAL_GetTick>
 800565e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005660:	e010      	b.n	8005684 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d00c      	beq.n	8005684 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <FLASH_WaitForLastOperation+0x38>
 8005670:	f7fe fdc8 	bl	8004204 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	429a      	cmp	r2, r3
 800567e:	d201      	bcs.n	8005684 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e019      	b.n	80056b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <FLASH_WaitForLastOperation+0x7c>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e8      	bne.n	8005662 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <FLASH_WaitForLastOperation+0x7c>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800569c:	f000 f8ba 	bl	8005814 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e009      	b.n	80056b8 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <FLASH_WaitForLastOperation+0x7c>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <FLASH_WaitForLastOperation+0x7c>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
  
}  
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200055b0 	.word	0x200055b0
 80056c4:	40023c00 	.word	0x40023c00

080056c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80056d4:	4b16      	ldr	r3, [pc, #88]	; (8005730 <FLASH_Program_DoubleWord+0x68>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <FLASH_Program_DoubleWord+0x68>)
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <FLASH_Program_DoubleWord+0x68>)
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	4a12      	ldr	r2, [pc, #72]	; (8005730 <FLASH_Program_DoubleWord+0x68>)
 80056e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80056ec:	4b10      	ldr	r3, [pc, #64]	; (8005730 <FLASH_Program_DoubleWord+0x68>)
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	4a0f      	ldr	r2, [pc, #60]	; (8005730 <FLASH_Program_DoubleWord+0x68>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80056fe:	f3bf 8f6f 	isb	sy
}
 8005702:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	000a      	movs	r2, r1
 8005712:	2300      	movs	r3, #0
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	3104      	adds	r1, #4
 8005718:	4613      	mov	r3, r2
 800571a:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800571c:	f3bf 8f4f 	dsb	sy
}
 8005720:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40023c00 	.word	0x40023c00

08005734 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <FLASH_Program_Word+0x48>)
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	4a0e      	ldr	r2, [pc, #56]	; (800577c <FLASH_Program_Word+0x48>)
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <FLASH_Program_Word+0x48>)
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	4a0b      	ldr	r2, [pc, #44]	; (800577c <FLASH_Program_Word+0x48>)
 8005750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <FLASH_Program_Word+0x48>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	4a08      	ldr	r2, [pc, #32]	; (800577c <FLASH_Program_Word+0x48>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005768:	f3bf 8f4f 	dsb	sy
}
 800576c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40023c00 	.word	0x40023c00

08005780 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <FLASH_Program_HalfWord+0x48>)
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	4a0d      	ldr	r2, [pc, #52]	; (80057c8 <FLASH_Program_HalfWord+0x48>)
 8005792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005796:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <FLASH_Program_HalfWord+0x48>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <FLASH_Program_HalfWord+0x48>)
 800579e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <FLASH_Program_HalfWord+0x48>)
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <FLASH_Program_HalfWord+0x48>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	887a      	ldrh	r2, [r7, #2]
 80057b4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057b6:	f3bf 8f4f 	dsb	sy
}
 80057ba:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40023c00 	.word	0x40023c00

080057cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80057d8:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <FLASH_Program_Byte+0x44>)
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <FLASH_Program_Byte+0x44>)
 80057de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <FLASH_Program_Byte+0x44>)
 80057e6:	4a0a      	ldr	r2, [pc, #40]	; (8005810 <FLASH_Program_Byte+0x44>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <FLASH_Program_Byte+0x44>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	4a07      	ldr	r2, [pc, #28]	; (8005810 <FLASH_Program_Byte+0x44>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80057fe:	f3bf 8f4f 	dsb	sy
}
 8005802:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40023c00 	.word	0x40023c00

08005814 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <FLASH_SetErrorCode+0x8c>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005824:	4b1f      	ldr	r3, [pc, #124]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f043 0320 	orr.w	r3, r3, #32
 800582c:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 800582e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <FLASH_SetErrorCode+0x8c>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800583c:	4b19      	ldr	r3, [pc, #100]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f043 0310 	orr.w	r3, r3, #16
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 8005846:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <FLASH_SetErrorCode+0x8c>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	4a11      	ldr	r2, [pc, #68]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 800585e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005860:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <FLASH_SetErrorCode+0x8c>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 0304 	orr.w	r3, r3, #4
 8005874:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 8005876:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <FLASH_SetErrorCode+0x8c>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <FLASH_SetErrorCode+0x90>)
 800588e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <FLASH_SetErrorCode+0x8c>)
 8005892:	22f2      	movs	r2, #242	; 0xf2
 8005894:	60da      	str	r2, [r3, #12]
}
 8005896:	bf00      	nop
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40023c00 	.word	0x40023c00
 80058a4:	200055b0 	.word	0x200055b0

080058a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058ba:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <HAL_FLASHEx_Erase+0xd0>)
 80058bc:	7d1b      	ldrb	r3, [r3, #20]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_FLASHEx_Erase+0x1e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e053      	b.n	800596e <HAL_FLASHEx_Erase+0xc6>
 80058c6:	4b2c      	ldr	r3, [pc, #176]	; (8005978 <HAL_FLASHEx_Erase+0xd0>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058d0:	f7ff feba 	bl	8005648 <FLASH_WaitForLastOperation>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d143      	bne.n	8005966 <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d112      	bne.n	8005914 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f843 	bl	8005980 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80058fe:	f7ff fea3 	bl	8005648 <FLASH_WaitForLastOperation>
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_FLASHEx_Erase+0xd4>)
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_FLASHEx_Erase+0xd4>)
 800590c:	f023 0304 	bic.w	r3, r3, #4
 8005910:	6113      	str	r3, [r2, #16]
 8005912:	e028      	b.n	8005966 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	e01c      	b.n	8005956 <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	4619      	mov	r1, r3
 8005924:	68b8      	ldr	r0, [r7, #8]
 8005926:	f000 f851 	bl	80059cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800592a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800592e:	f7ff fe8b 	bl	8005648 <FLASH_WaitForLastOperation>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8005936:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_FLASHEx_Erase+0xd4>)
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <HAL_FLASHEx_Erase+0xd4>)
 800593c:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8005940:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	601a      	str	r2, [r3, #0]
          break;
 800594e:	e00a      	b.n	8005966 <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	3301      	adds	r3, #1
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4413      	add	r3, r2
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	429a      	cmp	r2, r3
 8005964:	d3da      	bcc.n	800591c <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005966:	4b04      	ldr	r3, [pc, #16]	; (8005978 <HAL_FLASHEx_Erase+0xd0>)
 8005968:	2200      	movs	r2, #0
 800596a:	751a      	strb	r2, [r3, #20]

  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200055b0 	.word	0x200055b0
 800597c:	40023c00 	.word	0x40023c00

08005980 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <FLASH_MassErase+0x48>)
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <FLASH_MassErase+0x48>)
 8005990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005994:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <FLASH_MassErase+0x48>)
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	4a0b      	ldr	r2, [pc, #44]	; (80059c8 <FLASH_MassErase+0x48>)
 800599c:	f043 0304 	orr.w	r3, r3, #4
 80059a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <FLASH_MassErase+0x48>)
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	4313      	orrs	r3, r2
 80059ac:	4a06      	ldr	r2, [pc, #24]	; (80059c8 <FLASH_MassErase+0x48>)
 80059ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80059b4:	f3bf 8f4f 	dsb	sy
}
 80059b8:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00

080059cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e010      	b.n	8005a0a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d103      	bne.n	80059f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80059ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e009      	b.n	8005a0a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d103      	bne.n	8005a04 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80059fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	e002      	b.n	8005a0a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8005a0a:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a18:	691a      	ldr	r2, [r3, #16]
 8005a1a:	4911      	ldr	r1, [pc, #68]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4313      	orrs	r3, r2
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	4a06      	ldr	r2, [pc, #24]	; (8005a60 <FLASH_Erase_Sector+0x94>)
 8005a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a4c:	f3bf 8f4f 	dsb	sy
}
 8005a50:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40023c00 	.word	0x40023c00

08005a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b089      	sub	sp, #36	; 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	e175      	b.n	8005d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a84:	2201      	movs	r2, #1
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	f040 8164 	bne.w	8005d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d005      	beq.n	8005aba <HAL_GPIO_Init+0x56>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d130      	bne.n	8005b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005af0:	2201      	movs	r2, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 0201 	and.w	r2, r3, #1
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d017      	beq.n	8005b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	2203      	movs	r2, #3
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d123      	bne.n	8005bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	08da      	lsrs	r2, r3, #3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3208      	adds	r2, #8
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	220f      	movs	r2, #15
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4013      	ands	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	69b9      	ldr	r1, [r7, #24]
 8005ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0203 	and.w	r2, r3, #3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80be 	beq.w	8005d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bee:	4b66      	ldr	r3, [pc, #408]	; (8005d88 <HAL_GPIO_Init+0x324>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	4a65      	ldr	r2, [pc, #404]	; (8005d88 <HAL_GPIO_Init+0x324>)
 8005bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bfa:	4b63      	ldr	r3, [pc, #396]	; (8005d88 <HAL_GPIO_Init+0x324>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c06:	4a61      	ldr	r2, [pc, #388]	; (8005d8c <HAL_GPIO_Init+0x328>)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	220f      	movs	r2, #15
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a58      	ldr	r2, [pc, #352]	; (8005d90 <HAL_GPIO_Init+0x32c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d037      	beq.n	8005ca2 <HAL_GPIO_Init+0x23e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a57      	ldr	r2, [pc, #348]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_GPIO_Init+0x23a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a56      	ldr	r2, [pc, #344]	; (8005d98 <HAL_GPIO_Init+0x334>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d02b      	beq.n	8005c9a <HAL_GPIO_Init+0x236>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a55      	ldr	r2, [pc, #340]	; (8005d9c <HAL_GPIO_Init+0x338>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d025      	beq.n	8005c96 <HAL_GPIO_Init+0x232>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a54      	ldr	r2, [pc, #336]	; (8005da0 <HAL_GPIO_Init+0x33c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d01f      	beq.n	8005c92 <HAL_GPIO_Init+0x22e>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a53      	ldr	r2, [pc, #332]	; (8005da4 <HAL_GPIO_Init+0x340>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d019      	beq.n	8005c8e <HAL_GPIO_Init+0x22a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a52      	ldr	r2, [pc, #328]	; (8005da8 <HAL_GPIO_Init+0x344>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_GPIO_Init+0x226>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a51      	ldr	r2, [pc, #324]	; (8005dac <HAL_GPIO_Init+0x348>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00d      	beq.n	8005c86 <HAL_GPIO_Init+0x222>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a50      	ldr	r2, [pc, #320]	; (8005db0 <HAL_GPIO_Init+0x34c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <HAL_GPIO_Init+0x21e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a4f      	ldr	r2, [pc, #316]	; (8005db4 <HAL_GPIO_Init+0x350>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d101      	bne.n	8005c7e <HAL_GPIO_Init+0x21a>
 8005c7a:	2309      	movs	r3, #9
 8005c7c:	e012      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c7e:	230a      	movs	r3, #10
 8005c80:	e010      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c82:	2308      	movs	r3, #8
 8005c84:	e00e      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c86:	2307      	movs	r3, #7
 8005c88:	e00c      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	e00a      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c8e:	2305      	movs	r3, #5
 8005c90:	e008      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c92:	2304      	movs	r3, #4
 8005c94:	e006      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c96:	2303      	movs	r3, #3
 8005c98:	e004      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e002      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_GPIO_Init+0x240>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	f002 0203 	and.w	r2, r2, #3
 8005caa:	0092      	lsls	r2, r2, #2
 8005cac:	4093      	lsls	r3, r2
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005cb4:	4935      	ldr	r1, [pc, #212]	; (8005d8c <HAL_GPIO_Init+0x328>)
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	3302      	adds	r3, #2
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cc2:	4b3d      	ldr	r3, [pc, #244]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	43db      	mvns	r3, r3
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ce6:	4a34      	ldr	r2, [pc, #208]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cec:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d10:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d16:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	4013      	ands	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d64:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_GPIO_Init+0x354>)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b0f      	cmp	r3, #15
 8005d74:	f67f ae86 	bls.w	8005a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	3724      	adds	r7, #36	; 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40013800 	.word	0x40013800
 8005d90:	40020000 	.word	0x40020000
 8005d94:	40020400 	.word	0x40020400
 8005d98:	40020800 	.word	0x40020800
 8005d9c:	40020c00 	.word	0x40020c00
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40021400 	.word	0x40021400
 8005da8:	40021800 	.word	0x40021800
 8005dac:	40021c00 	.word	0x40021c00
 8005db0:	40022000 	.word	0x40022000
 8005db4:	40022400 	.word	0x40022400
 8005db8:	40013c00 	.word	0x40013c00

08005dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
 8005dd8:	e001      	b.n	8005dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	807b      	strh	r3, [r7, #2]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dfc:	787b      	ldrb	r3, [r7, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e02:	887a      	ldrh	r2, [r7, #2]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e08:	e003      	b.n	8005e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e0a:	887b      	ldrh	r3, [r7, #2]
 8005e0c:	041a      	lsls	r2, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	619a      	str	r2, [r3, #24]
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	460b      	mov	r3, r1
 8005e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e30:	887a      	ldrh	r2, [r7, #2]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4013      	ands	r3, r2
 8005e36:	041a      	lsls	r2, r3, #16
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	43d9      	mvns	r1, r3
 8005e3c:	887b      	ldrh	r3, [r7, #2]
 8005e3e:	400b      	ands	r3, r1
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	619a      	str	r2, [r3, #24]
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40007000 	.word	0x40007000

08005e74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e7e:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8a:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <HAL_PWREx_EnableOverDrive+0x98>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e96:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ea2:	f7fe f9af 	bl	8004204 <HAL_GetTick>
 8005ea6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ea8:	e009      	b.n	8005ebe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005eaa:	f7fe f9ab 	bl	8004204 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eb8:	d901      	bls.n	8005ebe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e022      	b.n	8005f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ebe:	4b14      	ldr	r3, [pc, #80]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eca:	d1ee      	bne.n	8005eaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0f      	ldr	r2, [pc, #60]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ed8:	f7fe f994 	bl	8004204 <HAL_GetTick>
 8005edc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ede:	e009      	b.n	8005ef4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ee0:	f7fe f990 	bl	8004204 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eee:	d901      	bls.n	8005ef4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e007      	b.n	8005f04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f00:	d1ee      	bne.n	8005ee0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40007000 	.word	0x40007000

08005f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e291      	b.n	800644e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8087 	beq.w	8006046 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f38:	4b96      	ldr	r3, [pc, #600]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 030c 	and.w	r3, r3, #12
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d00c      	beq.n	8005f5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f44:	4b93      	ldr	r3, [pc, #588]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 030c 	and.w	r3, r3, #12
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d112      	bne.n	8005f76 <HAL_RCC_OscConfig+0x62>
 8005f50:	4b90      	ldr	r3, [pc, #576]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5e:	4b8d      	ldr	r3, [pc, #564]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d06c      	beq.n	8006044 <HAL_RCC_OscConfig+0x130>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d168      	bne.n	8006044 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e26b      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCC_OscConfig+0x7a>
 8005f80:	4b84      	ldr	r3, [pc, #528]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a83      	ldr	r2, [pc, #524]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e02e      	b.n	8005fec <HAL_RCC_OscConfig+0xd8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x9c>
 8005f96:	4b7f      	ldr	r3, [pc, #508]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a7e      	ldr	r2, [pc, #504]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b7c      	ldr	r3, [pc, #496]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a7b      	ldr	r2, [pc, #492]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e01d      	b.n	8005fec <HAL_RCC_OscConfig+0xd8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fb8:	d10c      	bne.n	8005fd4 <HAL_RCC_OscConfig+0xc0>
 8005fba:	4b76      	ldr	r3, [pc, #472]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a75      	ldr	r2, [pc, #468]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4b73      	ldr	r3, [pc, #460]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a72      	ldr	r2, [pc, #456]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	e00b      	b.n	8005fec <HAL_RCC_OscConfig+0xd8>
 8005fd4:	4b6f      	ldr	r3, [pc, #444]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a6e      	ldr	r2, [pc, #440]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	4b6c      	ldr	r3, [pc, #432]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a6b      	ldr	r2, [pc, #428]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8005fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d013      	beq.n	800601c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fe f906 	bl	8004204 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ffc:	f7fe f902 	bl	8004204 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	; 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e21f      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600e:	4b61      	ldr	r3, [pc, #388]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0xe8>
 800601a:	e014      	b.n	8006046 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fe f8f2 	bl	8004204 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006024:	f7fe f8ee 	bl	8004204 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b64      	cmp	r3, #100	; 0x64
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e20b      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006036:	4b57      	ldr	r3, [pc, #348]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x110>
 8006042:	e000      	b.n	8006046 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d069      	beq.n	8006126 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006052:	4b50      	ldr	r3, [pc, #320]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 030c 	and.w	r3, r3, #12
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800605e:	4b4d      	ldr	r3, [pc, #308]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b08      	cmp	r3, #8
 8006068:	d11c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x190>
 800606a:	4b4a      	ldr	r3, [pc, #296]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d116      	bne.n	80060a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006076:	4b47      	ldr	r3, [pc, #284]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <HAL_RCC_OscConfig+0x17a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d001      	beq.n	800608e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e1df      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608e:	4b41      	ldr	r3, [pc, #260]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	493d      	ldr	r1, [pc, #244]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a2:	e040      	b.n	8006126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d023      	beq.n	80060f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ac:	4b39      	ldr	r3, [pc, #228]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a38      	ldr	r2, [pc, #224]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fe f8a4 	bl	8004204 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c0:	f7fe f8a0 	bl	8004204 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1bd      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d2:	4b30      	ldr	r3, [pc, #192]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	4929      	ldr	r1, [pc, #164]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]
 80060f2:	e018      	b.n	8006126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a26      	ldr	r2, [pc, #152]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 80060fa:	f023 0301 	bic.w	r3, r3, #1
 80060fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006100:	f7fe f880 	bl	8004204 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006108:	f7fe f87c 	bl	8004204 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e199      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800611a:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d038      	beq.n	80061a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d019      	beq.n	800616e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 800613c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006146:	f7fe f85d 	bl	8004204 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614e:	f7fe f859 	bl	8004204 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e176      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006160:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x23a>
 800616c:	e01a      	b.n	80061a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <HAL_RCC_OscConfig+0x280>)
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7fe f843 	bl	8004204 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006182:	f7fe f83f 	bl	8004204 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d903      	bls.n	8006198 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e15c      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
 8006194:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006198:	4b91      	ldr	r3, [pc, #580]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800619a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1ee      	bne.n	8006182 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80a4 	beq.w	80062fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b2:	4b8b      	ldr	r3, [pc, #556]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80061be:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	4a87      	ldr	r2, [pc, #540]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ca:	4b85      	ldr	r3, [pc, #532]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061da:	4b82      	ldr	r3, [pc, #520]	; (80063e4 <HAL_RCC_OscConfig+0x4d0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d118      	bne.n	8006218 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80061e6:	4b7f      	ldr	r3, [pc, #508]	; (80063e4 <HAL_RCC_OscConfig+0x4d0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a7e      	ldr	r2, [pc, #504]	; (80063e4 <HAL_RCC_OscConfig+0x4d0>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f2:	f7fe f807 	bl	8004204 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fa:	f7fe f803 	bl	8004204 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b64      	cmp	r3, #100	; 0x64
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e120      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800620c:	4b75      	ldr	r3, [pc, #468]	; (80063e4 <HAL_RCC_OscConfig+0x4d0>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d106      	bne.n	800622e <HAL_RCC_OscConfig+0x31a>
 8006220:	4b6f      	ldr	r3, [pc, #444]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	4a6e      	ldr	r2, [pc, #440]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	6713      	str	r3, [r2, #112]	; 0x70
 800622c:	e02d      	b.n	800628a <HAL_RCC_OscConfig+0x376>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10c      	bne.n	8006250 <HAL_RCC_OscConfig+0x33c>
 8006236:	4b6a      	ldr	r3, [pc, #424]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a69      	ldr	r2, [pc, #420]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800623c:	f023 0301 	bic.w	r3, r3, #1
 8006240:	6713      	str	r3, [r2, #112]	; 0x70
 8006242:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a66      	ldr	r2, [pc, #408]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006248:	f023 0304 	bic.w	r3, r3, #4
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
 800624e:	e01c      	b.n	800628a <HAL_RCC_OscConfig+0x376>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b05      	cmp	r3, #5
 8006256:	d10c      	bne.n	8006272 <HAL_RCC_OscConfig+0x35e>
 8006258:	4b61      	ldr	r3, [pc, #388]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625c:	4a60      	ldr	r2, [pc, #384]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800625e:	f043 0304 	orr.w	r3, r3, #4
 8006262:	6713      	str	r3, [r2, #112]	; 0x70
 8006264:	4b5e      	ldr	r3, [pc, #376]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	4a5d      	ldr	r2, [pc, #372]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6713      	str	r3, [r2, #112]	; 0x70
 8006270:	e00b      	b.n	800628a <HAL_RCC_OscConfig+0x376>
 8006272:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	4a5a      	ldr	r2, [pc, #360]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006278:	f023 0301 	bic.w	r3, r3, #1
 800627c:	6713      	str	r3, [r2, #112]	; 0x70
 800627e:	4b58      	ldr	r3, [pc, #352]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	4a57      	ldr	r2, [pc, #348]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006284:	f023 0304 	bic.w	r3, r3, #4
 8006288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d015      	beq.n	80062be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006292:	f7fd ffb7 	bl	8004204 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fd ffb3 	bl	8004204 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e0ce      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0ee      	beq.n	800629a <HAL_RCC_OscConfig+0x386>
 80062bc:	e014      	b.n	80062e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062be:	f7fd ffa1 	bl	8004204 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c4:	e00a      	b.n	80062dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fd ff9d 	bl	8004204 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e0b8      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062dc:	4b40      	ldr	r3, [pc, #256]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ee      	bne.n	80062c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d105      	bne.n	80062fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ee:	4b3c      	ldr	r3, [pc, #240]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	4a3b      	ldr	r2, [pc, #236]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80062f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80a4 	beq.w	800644c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006304:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 030c 	and.w	r3, r3, #12
 800630c:	2b08      	cmp	r3, #8
 800630e:	d06b      	beq.n	80063e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d149      	bne.n	80063ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006318:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a30      	ldr	r2, [pc, #192]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800631e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fd ff6e 	bl	8004204 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800632c:	f7fd ff6a 	bl	8004204 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e087      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633e:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	019b      	lsls	r3, r3, #6
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	3b01      	subs	r3, #1
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	061b      	lsls	r3, r3, #24
 800636e:	4313      	orrs	r3, r2
 8006370:	4a1b      	ldr	r2, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 8006372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006376:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 800637e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fd ff3e 	bl	8004204 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638c:	f7fd ff3a 	bl	8004204 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e057      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x478>
 80063aa:	e04f      	b.n	800644c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a0b      	ldr	r2, [pc, #44]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fd ff24 	bl	8004204 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fd ff20 	bl	8004204 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e03d      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <HAL_RCC_OscConfig+0x4cc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x4ac>
 80063de:	e035      	b.n	800644c <HAL_RCC_OscConfig+0x538>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80063e8:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <HAL_RCC_OscConfig+0x544>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d028      	beq.n	8006448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d121      	bne.n	8006448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d11a      	bne.n	8006448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800641e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006420:	4293      	cmp	r3, r2
 8006422:	d111      	bne.n	8006448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	3b01      	subs	r3, #1
 8006432:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d107      	bne.n	8006448 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006444:	429a      	cmp	r2, r3
 8006446:	d001      	beq.n	800644c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40023800 	.word	0x40023800

0800645c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0d0      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d910      	bls.n	80064a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b67      	ldr	r3, [pc, #412]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 020f 	bic.w	r2, r3, #15
 800648a:	4965      	ldr	r1, [pc, #404]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	4313      	orrs	r3, r2
 8006490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b63      	ldr	r3, [pc, #396]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0b8      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064bc:	4b59      	ldr	r3, [pc, #356]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4a58      	ldr	r2, [pc, #352]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80064c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d005      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d4:	4b53      	ldr	r3, [pc, #332]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4a52      	ldr	r2, [pc, #328]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80064da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064e0:	4b50      	ldr	r3, [pc, #320]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	494d      	ldr	r1, [pc, #308]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d040      	beq.n	8006580 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006506:	4b47      	ldr	r3, [pc, #284]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d115      	bne.n	800653e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e07f      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800651e:	4b41      	ldr	r3, [pc, #260]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e073      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652e:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e06b      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800653e:	4b39      	ldr	r3, [pc, #228]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0203 	bic.w	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4936      	ldr	r1, [pc, #216]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006550:	f7fd fe58 	bl	8004204 <HAL_GetTick>
 8006554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	e00a      	b.n	800656e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006558:	f7fd fe54 	bl	8004204 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e053      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 020c 	and.w	r2, r3, #12
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d1eb      	bne.n	8006558 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006580:	4b27      	ldr	r3, [pc, #156]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d210      	bcs.n	80065b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 020f 	bic.w	r2, r3, #15
 8006596:	4922      	ldr	r1, [pc, #136]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e032      	b.n	8006616 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	4916      	ldr	r1, [pc, #88]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	490e      	ldr	r1, [pc, #56]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065ee:	f000 f821 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_ClockConfig+0x1c8>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	091b      	lsrs	r3, r3, #4
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	490a      	ldr	r1, [pc, #40]	; (8006628 <HAL_RCC_ClockConfig+0x1cc>)
 8006600:	5ccb      	ldrb	r3, [r1, r3]
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <HAL_RCC_ClockConfig+0x1d0>)
 8006608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCC_ClockConfig+0x1d4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fd fc58 	bl	8003ec4 <HAL_InitTick>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	40023c00 	.word	0x40023c00
 8006624:	40023800 	.word	0x40023800
 8006628:	0802845c 	.word	0x0802845c
 800662c:	2000001c 	.word	0x2000001c
 8006630:	20000020 	.word	0x20000020

08006634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006634:	b5b0      	push	{r4, r5, r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800663a:	2100      	movs	r1, #0
 800663c:	6079      	str	r1, [r7, #4]
 800663e:	2100      	movs	r1, #0
 8006640:	60f9      	str	r1, [r7, #12]
 8006642:	2100      	movs	r1, #0
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006646:	2100      	movs	r1, #0
 8006648:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800664a:	4952      	ldr	r1, [pc, #328]	; (8006794 <HAL_RCC_GetSysClockFreq+0x160>)
 800664c:	6889      	ldr	r1, [r1, #8]
 800664e:	f001 010c 	and.w	r1, r1, #12
 8006652:	2908      	cmp	r1, #8
 8006654:	d00d      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x3e>
 8006656:	2908      	cmp	r1, #8
 8006658:	f200 8094 	bhi.w	8006784 <HAL_RCC_GetSysClockFreq+0x150>
 800665c:	2900      	cmp	r1, #0
 800665e:	d002      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x32>
 8006660:	2904      	cmp	r1, #4
 8006662:	d003      	beq.n	800666c <HAL_RCC_GetSysClockFreq+0x38>
 8006664:	e08e      	b.n	8006784 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006666:	4b4c      	ldr	r3, [pc, #304]	; (8006798 <HAL_RCC_GetSysClockFreq+0x164>)
 8006668:	60bb      	str	r3, [r7, #8]
      break;
 800666a:	e08e      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800666c:	4b4b      	ldr	r3, [pc, #300]	; (800679c <HAL_RCC_GetSysClockFreq+0x168>)
 800666e:	60bb      	str	r3, [r7, #8]
      break;
 8006670:	e08b      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006672:	4948      	ldr	r1, [pc, #288]	; (8006794 <HAL_RCC_GetSysClockFreq+0x160>)
 8006674:	6849      	ldr	r1, [r1, #4]
 8006676:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800667a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800667c:	4945      	ldr	r1, [pc, #276]	; (8006794 <HAL_RCC_GetSysClockFreq+0x160>)
 800667e:	6849      	ldr	r1, [r1, #4]
 8006680:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006684:	2900      	cmp	r1, #0
 8006686:	d024      	beq.n	80066d2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006688:	4942      	ldr	r1, [pc, #264]	; (8006794 <HAL_RCC_GetSysClockFreq+0x160>)
 800668a:	6849      	ldr	r1, [r1, #4]
 800668c:	0989      	lsrs	r1, r1, #6
 800668e:	4608      	mov	r0, r1
 8006690:	f04f 0100 	mov.w	r1, #0
 8006694:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006698:	f04f 0500 	mov.w	r5, #0
 800669c:	ea00 0204 	and.w	r2, r0, r4
 80066a0:	ea01 0305 	and.w	r3, r1, r5
 80066a4:	493d      	ldr	r1, [pc, #244]	; (800679c <HAL_RCC_GetSysClockFreq+0x168>)
 80066a6:	fb01 f003 	mul.w	r0, r1, r3
 80066aa:	2100      	movs	r1, #0
 80066ac:	fb01 f102 	mul.w	r1, r1, r2
 80066b0:	1844      	adds	r4, r0, r1
 80066b2:	493a      	ldr	r1, [pc, #232]	; (800679c <HAL_RCC_GetSysClockFreq+0x168>)
 80066b4:	fba2 0101 	umull	r0, r1, r2, r1
 80066b8:	1863      	adds	r3, r4, r1
 80066ba:	4619      	mov	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	461a      	mov	r2, r3
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	f7fa faf0 	bl	8000ca8 <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4613      	mov	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e04a      	b.n	8006768 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066d2:	4b30      	ldr	r3, [pc, #192]	; (8006794 <HAL_RCC_GetSysClockFreq+0x160>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	099b      	lsrs	r3, r3, #6
 80066d8:	461a      	mov	r2, r3
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066e2:	f04f 0100 	mov.w	r1, #0
 80066e6:	ea02 0400 	and.w	r4, r2, r0
 80066ea:	ea03 0501 	and.w	r5, r3, r1
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	014b      	lsls	r3, r1, #5
 80066fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006700:	0142      	lsls	r2, r0, #5
 8006702:	4610      	mov	r0, r2
 8006704:	4619      	mov	r1, r3
 8006706:	1b00      	subs	r0, r0, r4
 8006708:	eb61 0105 	sbc.w	r1, r1, r5
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	018b      	lsls	r3, r1, #6
 8006716:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800671a:	0182      	lsls	r2, r0, #6
 800671c:	1a12      	subs	r2, r2, r0
 800671e:	eb63 0301 	sbc.w	r3, r3, r1
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f04f 0100 	mov.w	r1, #0
 800672a:	00d9      	lsls	r1, r3, #3
 800672c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006730:	00d0      	lsls	r0, r2, #3
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	1912      	adds	r2, r2, r4
 8006738:	eb45 0303 	adc.w	r3, r5, r3
 800673c:	f04f 0000 	mov.w	r0, #0
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	0299      	lsls	r1, r3, #10
 8006746:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800674a:	0290      	lsls	r0, r2, #10
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	461a      	mov	r2, r3
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	f7fa faa4 	bl	8000ca8 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4613      	mov	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <HAL_RCC_GetSysClockFreq+0x160>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	3301      	adds	r3, #1
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	60bb      	str	r3, [r7, #8]
      break;
 8006782:	e002      	b.n	800678a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <HAL_RCC_GetSysClockFreq+0x164>)
 8006786:	60bb      	str	r3, [r7, #8]
      break;
 8006788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800678a:	68bb      	ldr	r3, [r7, #8]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bdb0      	pop	{r4, r5, r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	00f42400 	.word	0x00f42400
 800679c:	017d7840 	.word	0x017d7840

080067a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067a6:	681b      	ldr	r3, [r3, #0]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	2000001c 	.word	0x2000001c

080067b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067bc:	f7ff fff0 	bl	80067a0 <HAL_RCC_GetHCLKFreq>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	0a9b      	lsrs	r3, r3, #10
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	4903      	ldr	r1, [pc, #12]	; (80067dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ce:	5ccb      	ldrb	r3, [r1, r3]
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	40023800 	.word	0x40023800
 80067dc:	0802846c 	.word	0x0802846c

080067e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067e4:	f7ff ffdc 	bl	80067a0 <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0b5b      	lsrs	r3, r3, #13
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4903      	ldr	r1, [pc, #12]	; (8006804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40023800 	.word	0x40023800
 8006804:	0802846c 	.word	0x0802846c

08006808 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	220f      	movs	r2, #15
 8006816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006818:	4b12      	ldr	r3, [pc, #72]	; (8006864 <HAL_RCC_GetClockConfig+0x5c>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0203 	and.w	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <HAL_RCC_GetClockConfig+0x5c>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <HAL_RCC_GetClockConfig+0x5c>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_RCC_GetClockConfig+0x5c>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	08db      	lsrs	r3, r3, #3
 8006842:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <HAL_RCC_GetClockConfig+0x60>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	601a      	str	r2, [r3, #0]
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800
 8006868:	40023c00 	.word	0x40023c00

0800686c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d012      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006894:	4b69      	ldr	r3, [pc, #420]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	4a68      	ldr	r2, [pc, #416]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800689a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800689e:	6093      	str	r3, [r2, #8]
 80068a0:	4b66      	ldr	r3, [pc, #408]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a8:	4964      	ldr	r1, [pc, #400]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80068b6:	2301      	movs	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d017      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068c6:	4b5d      	ldr	r3, [pc, #372]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	4959      	ldr	r1, [pc, #356]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e4:	d101      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80068e6:	2301      	movs	r3, #1
 80068e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d017      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006902:	4b4e      	ldr	r3, [pc, #312]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	494a      	ldr	r1, [pc, #296]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006920:	d101      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006922:	2301      	movs	r3, #1
 8006924:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800692e:	2301      	movs	r3, #1
 8006930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800693e:	2301      	movs	r3, #1
 8006940:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 808b 	beq.w	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006950:	4b3a      	ldr	r3, [pc, #232]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	4a39      	ldr	r2, [pc, #228]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695a:	6413      	str	r3, [r2, #64]	; 0x40
 800695c:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006968:	4b35      	ldr	r3, [pc, #212]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a34      	ldr	r2, [pc, #208]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800696e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006974:	f7fd fc46 	bl	8004204 <HAL_GetTick>
 8006978:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800697a:	e008      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697c:	f7fd fc42 	bl	8004204 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b64      	cmp	r3, #100	; 0x64
 8006988:	d901      	bls.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e357      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800698e:	4b2c      	ldr	r3, [pc, #176]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800699a:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d035      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d02e      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069b8:	4b20      	ldr	r3, [pc, #128]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069c2:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c6:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069ce:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069da:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069e0:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d114      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fd fc0a 	bl	8004204 <HAL_GetTick>
 80069f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fd fc06 	bl	8004204 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e319      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ee      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a22:	d111      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a30:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a32:	400b      	ands	r3, r1
 8006a34:	4901      	ldr	r1, [pc, #4]	; (8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
 8006a3a:	e00b      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	40007000 	.word	0x40007000
 8006a44:	0ffffcff 	.word	0x0ffffcff
 8006a48:	4bb1      	ldr	r3, [pc, #708]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4ab0      	ldr	r2, [pc, #704]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a52:	6093      	str	r3, [r2, #8]
 8006a54:	4bae      	ldr	r3, [pc, #696]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a60:	49ab      	ldr	r1, [pc, #684]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d010      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a72:	4ba7      	ldr	r3, [pc, #668]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a78:	4aa5      	ldr	r2, [pc, #660]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a82:	4ba3      	ldr	r3, [pc, #652]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	49a0      	ldr	r1, [pc, #640]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aa0:	4b9b      	ldr	r3, [pc, #620]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aae:	4998      	ldr	r1, [pc, #608]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ac2:	4b93      	ldr	r3, [pc, #588]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ad0:	498f      	ldr	r1, [pc, #572]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ae4:	4b8a      	ldr	r3, [pc, #552]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af2:	4987      	ldr	r1, [pc, #540]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b06:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	497e      	ldr	r1, [pc, #504]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b28:	4b79      	ldr	r3, [pc, #484]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	f023 0203 	bic.w	r2, r3, #3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	4976      	ldr	r1, [pc, #472]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b4a:	4b71      	ldr	r3, [pc, #452]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b50:	f023 020c 	bic.w	r2, r3, #12
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b58:	496d      	ldr	r1, [pc, #436]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7a:	4965      	ldr	r1, [pc, #404]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b8e:	4b60      	ldr	r3, [pc, #384]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9c:	495c      	ldr	r1, [pc, #368]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bb0:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	4954      	ldr	r1, [pc, #336]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006bd2:	4b4f      	ldr	r3, [pc, #316]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	494b      	ldr	r1, [pc, #300]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006bf4:	4b46      	ldr	r3, [pc, #280]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	4943      	ldr	r1, [pc, #268]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006c16:	4b3e      	ldr	r3, [pc, #248]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c24:	493a      	ldr	r1, [pc, #232]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c38:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c46:	4932      	ldr	r1, [pc, #200]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c5a:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c68:	4929      	ldr	r1, [pc, #164]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c78:	d101      	bne.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca8:	4919      	ldr	r1, [pc, #100]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006cbc:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ccc:	4910      	ldr	r1, [pc, #64]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d006      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80d9 	beq.w	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ce8:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a08      	ldr	r2, [pc, #32]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf4:	f7fd fa86 	bl	8004204 <HAL_GetTick>
 8006cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cfc:	f7fd fa82 	bl	8004204 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b64      	cmp	r3, #100	; 0x64
 8006d08:	d904      	bls.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e197      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d14:	4b6c      	ldr	r3, [pc, #432]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ed      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d021      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11d      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d34:	4b64      	ldr	r3, [pc, #400]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d42:	4b61      	ldr	r3, [pc, #388]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d48:	0e1b      	lsrs	r3, r3, #24
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	019a      	lsls	r2, r3, #6
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	041b      	lsls	r3, r3, #16
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	071b      	lsls	r3, r3, #28
 8006d68:	4957      	ldr	r1, [pc, #348]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d84:	d00a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d02e      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d9a:	d129      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d9c:	4b4a      	ldr	r3, [pc, #296]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da2:	0c1b      	lsrs	r3, r3, #16
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006daa:	4b47      	ldr	r3, [pc, #284]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db0:	0f1b      	lsrs	r3, r3, #28
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	019a      	lsls	r2, r3, #6
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	041b      	lsls	r3, r3, #16
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	061b      	lsls	r3, r3, #24
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	071b      	lsls	r3, r3, #28
 8006dd0:	493d      	ldr	r1, [pc, #244]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dd8:	4b3b      	ldr	r3, [pc, #236]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dde:	f023 021f 	bic.w	r2, r3, #31
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	3b01      	subs	r3, #1
 8006de8:	4937      	ldr	r1, [pc, #220]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dfc:	4b32      	ldr	r3, [pc, #200]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e02:	0e1b      	lsrs	r3, r3, #24
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e10:	0f1b      	lsrs	r3, r3, #28
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	019a      	lsls	r2, r3, #6
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	041b      	lsls	r3, r3, #16
 8006e24:	431a      	orrs	r2, r3
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	061b      	lsls	r3, r3, #24
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	071b      	lsls	r3, r3, #28
 8006e30:	4925      	ldr	r1, [pc, #148]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d011      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	019a      	lsls	r2, r3, #6
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	061b      	lsls	r3, r3, #24
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	071b      	lsls	r3, r3, #28
 8006e60:	4919      	ldr	r1, [pc, #100]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e68:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e74:	f7fd f9c6 	bl	8004204 <HAL_GetTick>
 8006e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e7c:	f7fd f9c2 	bl	8004204 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b64      	cmp	r3, #100	; 0x64
 8006e88:	d901      	bls.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e0d7      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e8e:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	f040 80cd 	bne.w	800703c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eae:	f7fd f9a9 	bl	8004204 <HAL_GetTick>
 8006eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006eb4:	e00a      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006eb6:	f7fd f9a5 	bl	8004204 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b64      	cmp	r3, #100	; 0x64
 8006ec2:	d903      	bls.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e0ba      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ecc:	4b5e      	ldr	r3, [pc, #376]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed8:	d0ed      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02e      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d12a      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f02:	4b51      	ldr	r3, [pc, #324]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f10:	4b4d      	ldr	r3, [pc, #308]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	0f1b      	lsrs	r3, r3, #28
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	019a      	lsls	r2, r3, #6
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	061b      	lsls	r3, r3, #24
 8006f30:	431a      	orrs	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	071b      	lsls	r3, r3, #28
 8006f36:	4944      	ldr	r1, [pc, #272]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f3e:	4b42      	ldr	r3, [pc, #264]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	493d      	ldr	r1, [pc, #244]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f6c:	d11d      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f6e:	4b36      	ldr	r3, [pc, #216]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f74:	0e1b      	lsrs	r3, r3, #24
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	0f1b      	lsrs	r3, r3, #28
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	019a      	lsls	r2, r3, #6
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	431a      	orrs	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	071b      	lsls	r3, r3, #28
 8006fa2:	4929      	ldr	r1, [pc, #164]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d028      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fb6:	4b24      	ldr	r3, [pc, #144]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	0e1b      	lsrs	r3, r3, #24
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fc4:	4b20      	ldr	r3, [pc, #128]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	0c1b      	lsrs	r3, r3, #16
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	019a      	lsls	r2, r3, #6
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	071b      	lsls	r3, r3, #28
 8006fea:	4917      	ldr	r1, [pc, #92]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4911      	ldr	r1, [pc, #68]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a0e      	ldr	r2, [pc, #56]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800700e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007014:	f7fd f8f6 	bl	8004204 <HAL_GetTick>
 8007018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800701a:	e008      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800701c:	f7fd f8f2 	bl	8004204 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e007      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703a:	d1ef      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800

0800704c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e081      	b.n	8007162 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7f5b      	ldrb	r3, [r3, #29]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d105      	bne.n	8007074 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fc fe88 	bl	8003d84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	22ca      	movs	r2, #202	; 0xca
 8007080:	625a      	str	r2, [r3, #36]	; 0x24
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2253      	movs	r2, #83	; 0x53
 8007088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 faac 	bl	80075e8 <RTC_EnterInitMode>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d008      	beq.n	80070a8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	22ff      	movs	r2, #255	; 0xff
 800709c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2204      	movs	r2, #4
 80070a2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e05c      	b.n	8007162 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6899      	ldr	r1, [r3, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b2e      	ldr	r3, [pc, #184]	; (800716c <HAL_RTC_Init+0x120>)
 80070b4:	400b      	ands	r3, r1
 80070b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6899      	ldr	r1, [r3, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68d2      	ldr	r2, [r2, #12]
 80070de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6919      	ldr	r1, [r3, #16]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	041a      	lsls	r2, r3, #16
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	430a      	orrs	r2, r1
 80070f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007102:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa40 	bl	8007598 <HAL_RTC_WaitForSynchro>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	22ff      	movs	r2, #255	; 0xff
 8007124:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e018      	b.n	8007162 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0208 	bic.w	r2, r2, #8
 800713e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	22ff      	movs	r2, #255	; 0xff
 8007158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007160:	2300      	movs	r3, #0
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	ff8fffbf 	.word	0xff8fffbf

08007170 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	7f1b      	ldrb	r3, [r3, #28]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_RTC_SetTime+0x1c>
 8007188:	2302      	movs	r3, #2
 800718a:	e0a8      	b.n	80072de <HAL_RTC_SetTime+0x16e>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2202      	movs	r2, #2
 8007196:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d126      	bne.n	80071ec <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fa42 	bl	8007640 <RTC_ByteToBcd2>
 80071bc:	4603      	mov	r3, r0
 80071be:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fa3b 	bl	8007640 <RTC_ByteToBcd2>
 80071ca:	4603      	mov	r3, r0
 80071cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80071ce:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	789b      	ldrb	r3, [r3, #2]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fa33 	bl	8007640 <RTC_ByteToBcd2>
 80071da:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80071dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	7b1b      	ldrb	r3, [r3, #12]
 80071e4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e018      	b.n	800721e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d102      	bne.n	8007200 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800720c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007212:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	7b1b      	ldrb	r3, [r3, #12]
 8007218:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	22ca      	movs	r2, #202	; 0xca
 8007224:	625a      	str	r2, [r3, #36]	; 0x24
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2253      	movs	r2, #83	; 0x53
 800722c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f9da 	bl	80075e8 <RTC_EnterInitMode>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	22ff      	movs	r2, #255	; 0xff
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2204      	movs	r2, #4
 8007246:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e045      	b.n	80072de <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <HAL_RTC_SetTime+0x178>)
 800725a:	400b      	ands	r3, r1
 800725c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800726c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6899      	ldr	r1, [r3, #8]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007294:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d111      	bne.n	80072c8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f977 	bl	8007598 <HAL_RTC_WaitForSynchro>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2204      	movs	r2, #4
 80072bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e00a      	b.n	80072de <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	22ff      	movs	r2, #255	; 0xff
 80072ce:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80072dc:	2300      	movs	r3, #0
  }
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd90      	pop	{r4, r7, pc}
 80072e6:	bf00      	nop
 80072e8:	007f7f7f 	.word	0x007f7f7f

080072ec <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b22      	ldr	r3, [pc, #136]	; (80073a4 <HAL_RTC_GetTime+0xb8>)
 800731c:	4013      	ands	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800732a:	b2da      	uxtb	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733a:	b2da      	uxtb	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	b2da      	uxtb	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11a      	bne.n	800739a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f000 f987 	bl	800767c <RTC_Bcd2ToByte>
 800736e:	4603      	mov	r3, r0
 8007370:	461a      	mov	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f97e 	bl	800767c <RTC_Bcd2ToByte>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	789b      	ldrb	r3, [r3, #2]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 f975 	bl	800767c <RTC_Bcd2ToByte>
 8007392:	4603      	mov	r3, r0
 8007394:	461a      	mov	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	007f7f7f 	.word	0x007f7f7f

080073a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	7f1b      	ldrb	r3, [r3, #28]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_RTC_SetDate+0x1c>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e092      	b.n	80074ea <HAL_RTC_SetDate+0x142>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2202      	movs	r2, #2
 80073ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10e      	bne.n	80073f4 <HAL_RTC_SetDate+0x4c>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d008      	beq.n	80073f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	785b      	ldrb	r3, [r3, #1]
 80073e6:	f023 0310 	bic.w	r3, r3, #16
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	330a      	adds	r3, #10
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d11c      	bne.n	8007434 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	78db      	ldrb	r3, [r3, #3]
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 f91e 	bl	8007640 <RTC_ByteToBcd2>
 8007404:	4603      	mov	r3, r0
 8007406:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	4618      	mov	r0, r3
 800740e:	f000 f917 	bl	8007640 <RTC_ByteToBcd2>
 8007412:	4603      	mov	r3, r0
 8007414:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007416:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	789b      	ldrb	r3, [r3, #2]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f90f 	bl	8007640 <RTC_ByteToBcd2>
 8007422:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007424:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	e00e      	b.n	8007452 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007440:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007446:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	22ca      	movs	r2, #202	; 0xca
 8007458:	625a      	str	r2, [r3, #36]	; 0x24
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2253      	movs	r2, #83	; 0x53
 8007460:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f8c0 	bl	80075e8 <RTC_EnterInitMode>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	22ff      	movs	r2, #255	; 0xff
 8007474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2204      	movs	r2, #4
 800747a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e031      	b.n	80074ea <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	6979      	ldr	r1, [r7, #20]
 800748c:	4b19      	ldr	r3, [pc, #100]	; (80074f4 <HAL_RTC_SetDate+0x14c>)
 800748e:	400b      	ands	r3, r1
 8007490:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d111      	bne.n	80074d4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f871 	bl	8007598 <HAL_RTC_WaitForSynchro>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2204      	movs	r2, #4
 80074c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e00a      	b.n	80074ea <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd90      	pop	{r4, r7, pc}
 80074f2:	bf00      	nop
 80074f4:	00ffff3f 	.word	0x00ffff3f

080074f8 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4b21      	ldr	r3, [pc, #132]	; (8007594 <HAL_RTC_GetDate+0x9c>)
 8007510:	4013      	ands	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	0c1b      	lsrs	r3, r3, #16
 8007518:	b2da      	uxtb	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	0a1b      	lsrs	r3, r3, #8
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007536:	b2da      	uxtb	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	0b5b      	lsrs	r3, r3, #13
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	b2da      	uxtb	r2, r3
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d11a      	bne.n	8007588 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	78db      	ldrb	r3, [r3, #3]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f890 	bl	800767c <RTC_Bcd2ToByte>
 800755c:	4603      	mov	r3, r0
 800755e:	461a      	mov	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f887 	bl	800767c <RTC_Bcd2ToByte>
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	789b      	ldrb	r3, [r3, #2]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f87e 	bl	800767c <RTC_Bcd2ToByte>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	00ffff3f 	.word	0x00ffff3f

08007598 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075b4:	f7fc fe26 	bl	8004204 <HAL_GetTick>
 80075b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80075ba:	e009      	b.n	80075d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80075bc:	f7fc fe22 	bl	8004204 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ca:	d901      	bls.n	80075d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e007      	b.n	80075e0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0ee      	beq.n	80075bc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d119      	bne.n	8007636 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800760c:	f7fc fdfa 	bl	8004204 <HAL_GetTick>
 8007610:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007612:	e009      	b.n	8007628 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007614:	f7fc fdf6 	bl	8004204 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007622:	d901      	bls.n	8007628 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e007      	b.n	8007638 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0ee      	beq.n	8007614 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800764e:	e005      	b.n	800765c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3301      	adds	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	3b0a      	subs	r3, #10
 800765a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	2b09      	cmp	r3, #9
 8007660:	d8f6      	bhi.n	8007650 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	b2da      	uxtb	r2, r3
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	4313      	orrs	r3, r2
 800766e:	b2db      	uxtb	r3, r3
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	b2db      	uxtb	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	b2db      	uxtb	r3, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e049      	b.n	800775e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f841 	bl	8007766 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f000 fa00 	bl	8007afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800776e:	bf00      	nop
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d001      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e054      	b.n	800783e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0201 	orr.w	r2, r2, #1
 80077aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a26      	ldr	r2, [pc, #152]	; (800784c <HAL_TIM_Base_Start_IT+0xd0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077be:	d01d      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_TIM_Base_Start_IT+0xd4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a21      	ldr	r2, [pc, #132]	; (8007854 <HAL_TIM_Base_Start_IT+0xd8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <HAL_TIM_Base_Start_IT+0xdc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1e      	ldr	r2, [pc, #120]	; (800785c <HAL_TIM_Base_Start_IT+0xe0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <HAL_TIM_Base_Start_IT+0xe4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_TIM_Base_Start_IT+0x80>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <HAL_TIM_Base_Start_IT+0xe8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d115      	bne.n	8007828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	4b19      	ldr	r3, [pc, #100]	; (8007868 <HAL_TIM_Base_Start_IT+0xec>)
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b06      	cmp	r3, #6
 800780c:	d015      	beq.n	800783a <HAL_TIM_Base_Start_IT+0xbe>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d011      	beq.n	800783a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007826:	e008      	b.n	800783a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0201 	orr.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	e000      	b.n	800783c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40001800 	.word	0x40001800
 8007868:	00010007 	.word	0x00010007

0800786c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b02      	cmp	r3, #2
 8007880:	d122      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b02      	cmp	r3, #2
 800788e:	d11b      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0202 	mvn.w	r2, #2
 8007898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f905 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 80078b4:	e005      	b.n	80078c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f8f7 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f908 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d122      	bne.n	800791c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d11b      	bne.n	800791c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0204 	mvn.w	r2, #4
 80078ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f8db 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 8007908:	e005      	b.n	8007916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f8cd 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f8de 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b08      	cmp	r3, #8
 8007928:	d122      	bne.n	8007970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b08      	cmp	r3, #8
 8007936:	d11b      	bne.n	8007970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0208 	mvn.w	r2, #8
 8007940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f8b1 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 800795c:	e005      	b.n	800796a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f8a3 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f8b4 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 0310 	and.w	r3, r3, #16
 800797a:	2b10      	cmp	r3, #16
 800797c:	d122      	bne.n	80079c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f003 0310 	and.w	r3, r3, #16
 8007988:	2b10      	cmp	r3, #16
 800798a:	d11b      	bne.n	80079c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0210 	mvn.w	r2, #16
 8007994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2208      	movs	r2, #8
 800799a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f887 	bl	8007abe <HAL_TIM_IC_CaptureCallback>
 80079b0:	e005      	b.n	80079be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f879 	bl	8007aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f88a 	bl	8007ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d10e      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d107      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0201 	mvn.w	r2, #1
 80079e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fb f83e 	bl	8002a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b80      	cmp	r3, #128	; 0x80
 80079fc:	d10e      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d107      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f91a 	bl	8007c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d10e      	bne.n	8007a4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d107      	bne.n	8007a4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f90d 	bl	8007c64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	d10e      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b40      	cmp	r3, #64	; 0x40
 8007a64:	d107      	bne.n	8007a76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f838 	bl	8007ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	d10e      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d107      	bne.n	8007aa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0220 	mvn.w	r2, #32
 8007a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f8cd 	bl	8007c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
	...

08007afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a40      	ldr	r2, [pc, #256]	; (8007c10 <TIM_Base_SetConfig+0x114>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d013      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1a:	d00f      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a3d      	ldr	r2, [pc, #244]	; (8007c14 <TIM_Base_SetConfig+0x118>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a3c      	ldr	r2, [pc, #240]	; (8007c18 <TIM_Base_SetConfig+0x11c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a3b      	ldr	r2, [pc, #236]	; (8007c1c <TIM_Base_SetConfig+0x120>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a3a      	ldr	r2, [pc, #232]	; (8007c20 <TIM_Base_SetConfig+0x124>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d108      	bne.n	8007b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a2f      	ldr	r2, [pc, #188]	; (8007c10 <TIM_Base_SetConfig+0x114>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d02b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5c:	d027      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a2c      	ldr	r2, [pc, #176]	; (8007c14 <TIM_Base_SetConfig+0x118>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d023      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a2b      	ldr	r2, [pc, #172]	; (8007c18 <TIM_Base_SetConfig+0x11c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01f      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a2a      	ldr	r2, [pc, #168]	; (8007c1c <TIM_Base_SetConfig+0x120>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d01b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <TIM_Base_SetConfig+0x124>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d017      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <TIM_Base_SetConfig+0x128>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <TIM_Base_SetConfig+0x12c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00f      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <TIM_Base_SetConfig+0x130>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00b      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a25      	ldr	r2, [pc, #148]	; (8007c30 <TIM_Base_SetConfig+0x134>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d007      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a24      	ldr	r2, [pc, #144]	; (8007c34 <TIM_Base_SetConfig+0x138>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a23      	ldr	r2, [pc, #140]	; (8007c38 <TIM_Base_SetConfig+0x13c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d108      	bne.n	8007bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a0a      	ldr	r2, [pc, #40]	; (8007c10 <TIM_Base_SetConfig+0x114>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_Base_SetConfig+0xf8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <TIM_Base_SetConfig+0x124>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d103      	bne.n	8007bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	615a      	str	r2, [r3, #20]
}
 8007c02:	bf00      	nop
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40010000 	.word	0x40010000
 8007c14:	40000400 	.word	0x40000400
 8007c18:	40000800 	.word	0x40000800
 8007c1c:	40000c00 	.word	0x40000c00
 8007c20:	40010400 	.word	0x40010400
 8007c24:	40014000 	.word	0x40014000
 8007c28:	40014400 	.word	0x40014400
 8007c2c:	40014800 	.word	0x40014800
 8007c30:	40001800 	.word	0x40001800
 8007c34:	40001c00 	.word	0x40001c00
 8007c38:	40002000 	.word	0x40002000

08007c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e040      	b.n	8007d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fc f88c 	bl	8003db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2224      	movs	r2, #36	; 0x24
 8007ca4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fc5c 	bl	8008574 <UART_SetConfig>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e022      	b.n	8007d0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 feb2 	bl	8008a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 ff39 	bl	8008b7c <UART_CheckIdleState>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b08a      	sub	sp, #40	; 0x28
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	4613      	mov	r3, r2
 8007d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	f040 8081 	bne.w	8007e30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_UART_Transmit+0x26>
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e079      	b.n	8007e32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_UART_Transmit+0x38>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e072      	b.n	8007e32 <HAL_UART_Transmit+0x11e>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2221      	movs	r2, #33	; 0x21
 8007d60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d62:	f7fc fa4f 	bl	8004204 <HAL_GetTick>
 8007d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d108      	bne.n	8007d94 <HAL_UART_Transmit+0x80>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d104      	bne.n	8007d94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e003      	b.n	8007d9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007da4:	e02c      	b.n	8007e00 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2200      	movs	r2, #0
 8007dae:	2180      	movs	r1, #128	; 0x80
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 ff16 	bl	8008be2 <UART_WaitOnFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e038      	b.n	8007e32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	881b      	ldrh	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	e007      	b.n	8007dee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1cc      	bne.n	8007da6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2200      	movs	r2, #0
 8007e14:	2140      	movs	r1, #64	; 0x40
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fee3 	bl	8008be2 <UART_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e005      	b.n	8007e32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b08b      	sub	sp, #44	; 0x2c
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d156      	bne.n	8007f00 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_UART_Transmit_IT+0x22>
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e04f      	b.n	8007f02 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Transmit_IT+0x34>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e048      	b.n	8007f02 <HAL_UART_Transmit_IT+0xc6>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	88fa      	ldrh	r2, [r7, #6]
 8007e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2221      	movs	r2, #33	; 0x21
 8007ea0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eaa:	d107      	bne.n	8007ebc <HAL_UART_Transmit_IT+0x80>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d103      	bne.n	8007ebc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a16      	ldr	r2, [pc, #88]	; (8007f10 <HAL_UART_Transmit_IT+0xd4>)
 8007eb8:	669a      	str	r2, [r3, #104]	; 0x68
 8007eba:	e002      	b.n	8007ec2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <HAL_UART_Transmit_IT+0xd8>)
 8007ec0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	623b      	str	r3, [r7, #32]
 8007eea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	69f9      	ldr	r1, [r7, #28]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e6      	bne.n	8007eca <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e000      	b.n	8007f02 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
  }
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	372c      	adds	r7, #44	; 0x2c
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	080090a9 	.word	0x080090a9
 8007f14:	08008ff3 	.word	0x08008ff3

08007f18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	; 0x28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d13d      	bne.n	8007faa <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_UART_Receive_IT+0x22>
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e036      	b.n	8007fac <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_UART_Receive_IT+0x34>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e02f      	b.n	8007fac <HAL_UART_Receive_IT+0x94>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d018      	beq.n	8007f9a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	613b      	str	r3, [r7, #16]
   return(result);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	623b      	str	r3, [r7, #32]
 8007f88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e6      	bne.n	8007f68 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fee3 	bl	8008d6c <UART_Start_Receive_IT>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	e000      	b.n	8007fac <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007faa:	2302      	movs	r3, #2
  }
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3728      	adds	r7, #40	; 0x28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b0ba      	sub	sp, #232	; 0xe8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007fda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007fde:	f640 030f 	movw	r3, #2063	; 0x80f
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d115      	bne.n	800801c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00f      	beq.n	800801c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d009      	beq.n	800801c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 828f 	beq.w	8008530 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
      }
      return;
 800801a:	e289      	b.n	8008530 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800801c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8117 	beq.w	8008254 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008032:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008036:	4b85      	ldr	r3, [pc, #532]	; (800824c <HAL_UART_IRQHandler+0x298>)
 8008038:	4013      	ands	r3, r2
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 810a 	beq.w	8008254 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d011      	beq.n	8008070 <HAL_UART_IRQHandler+0xbc>
 800804c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2201      	movs	r2, #1
 800805e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008066:	f043 0201 	orr.w	r2, r3, #1
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d011      	beq.n	80080a0 <HAL_UART_IRQHandler+0xec>
 800807c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2202      	movs	r2, #2
 800808e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008096:	f043 0204 	orr.w	r2, r3, #4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d011      	beq.n	80080d0 <HAL_UART_IRQHandler+0x11c>
 80080ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2204      	movs	r2, #4
 80080be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c6:	f043 0202 	orr.w	r2, r3, #2
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2208      	movs	r2, #8
 80080fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008102:	f043 0208 	orr.w	r2, r3, #8
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800810c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008114:	2b00      	cmp	r3, #0
 8008116:	d012      	beq.n	800813e <HAL_UART_IRQHandler+0x18a>
 8008118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800811c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800812c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008134:	f043 0220 	orr.w	r2, r3, #32
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 81f5 	beq.w	8008534 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800814a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d005      	beq.n	8008196 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800818a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800818e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008192:	2b00      	cmp	r3, #0
 8008194:	d04f      	beq.n	8008236 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 feb2 	bl	8008f00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	d141      	bne.n	800822e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3308      	adds	r3, #8
 80081b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1d9      	bne.n	80081aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d013      	beq.n	8008226 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008202:	4a13      	ldr	r2, [pc, #76]	; (8008250 <HAL_UART_IRQHandler+0x29c>)
 8008204:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820a:	4618      	mov	r0, r3
 800820c:	f7fc f97c 	bl	8004508 <HAL_DMA_Abort_IT>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d017      	beq.n	8008246 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008220:	4610      	mov	r0, r2
 8008222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008224:	e00f      	b.n	8008246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f98e 	bl	8008548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	e00b      	b.n	8008246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f98a 	bl	8008548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	e007      	b.n	8008246 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f986 	bl	8008548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008244:	e176      	b.n	8008534 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008246:	bf00      	nop
    return;
 8008248:	e174      	b.n	8008534 <HAL_UART_IRQHandler+0x580>
 800824a:	bf00      	nop
 800824c:	04000120 	.word	0x04000120
 8008250:	08008fc7 	.word	0x08008fc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008258:	2b01      	cmp	r3, #1
 800825a:	f040 8144 	bne.w	80084e6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800825e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 813d 	beq.w	80084e6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800826c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8136 	beq.w	80084e6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2210      	movs	r2, #16
 8008280:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	f040 80b2 	bne.w	80083f6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800829e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8148 	beq.w	8008538 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082b2:	429a      	cmp	r2, r3
 80082b4:	f080 8140 	bcs.w	8008538 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082cc:	f000 8085 	beq.w	80083da <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008306:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1da      	bne.n	80082d0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800832a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800832c:	f023 0301 	bic.w	r3, r3, #1
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800833e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008342:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008346:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e1      	bne.n	800831a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3308      	adds	r3, #8
 800835c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800837a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800837c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e3      	bne.n	8008356 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083aa:	f023 0310 	bic.w	r3, r3, #16
 80083ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80083be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e4      	bne.n	800839a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fc f827 	bl	8004428 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f8b4 	bl	800855c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083f4:	e0a0      	b.n	8008538 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008402:	b29b      	uxth	r3, r3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8092 	beq.w	800853c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 808d 	beq.w	800853c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008444:	647b      	str	r3, [r7, #68]	; 0x44
 8008446:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800844a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e4      	bne.n	8008422 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	623b      	str	r3, [r7, #32]
   return(result);
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3308      	adds	r3, #8
 8008478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800847c:	633a      	str	r2, [r7, #48]	; 0x30
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e3      	bne.n	8008458 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0310 	bic.w	r3, r3, #16
 80084b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084c4:	61fb      	str	r3, [r7, #28]
 80084c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	69b9      	ldr	r1, [r7, #24]
 80084ca:	69fa      	ldr	r2, [r7, #28]
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	617b      	str	r3, [r7, #20]
   return(result);
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e4      	bne.n	80084a2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f83c 	bl	800855c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084e4:	e02a      	b.n	800853c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00e      	beq.n	8008510 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d008      	beq.n	8008510 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01c      	beq.n	8008540 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
    }
    return;
 800850e:	e017      	b.n	8008540 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d012      	beq.n	8008542 <HAL_UART_IRQHandler+0x58e>
 800851c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00c      	beq.n	8008542 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fe1d 	bl	8009168 <UART_EndTransmit_IT>
    return;
 800852e:	e008      	b.n	8008542 <HAL_UART_IRQHandler+0x58e>
      return;
 8008530:	bf00      	nop
 8008532:	e006      	b.n	8008542 <HAL_UART_IRQHandler+0x58e>
    return;
 8008534:	bf00      	nop
 8008536:	e004      	b.n	8008542 <HAL_UART_IRQHandler+0x58e>
      return;
 8008538:	bf00      	nop
 800853a:	e002      	b.n	8008542 <HAL_UART_IRQHandler+0x58e>
      return;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <HAL_UART_IRQHandler+0x58e>
    return;
 8008540:	bf00      	nop
  }

}
 8008542:	37e8      	adds	r7, #232	; 0xe8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	431a      	orrs	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	4313      	orrs	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4ba7      	ldr	r3, [pc, #668]	; (800883c <UART_SetConfig+0x2c8>)
 80085a0:	4013      	ands	r3, r2
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	6812      	ldr	r2, [r2, #0]
 80085a6:	6979      	ldr	r1, [r7, #20]
 80085a8:	430b      	orrs	r3, r1
 80085aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a95      	ldr	r2, [pc, #596]	; (8008840 <UART_SetConfig+0x2cc>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d120      	bne.n	8008632 <UART_SetConfig+0xbe>
 80085f0:	4b94      	ldr	r3, [pc, #592]	; (8008844 <UART_SetConfig+0x2d0>)
 80085f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f6:	f003 0303 	and.w	r3, r3, #3
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d816      	bhi.n	800862c <UART_SetConfig+0xb8>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <UART_SetConfig+0x90>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008615 	.word	0x08008615
 8008608:	08008621 	.word	0x08008621
 800860c:	0800861b 	.word	0x0800861b
 8008610:	08008627 	.word	0x08008627
 8008614:	2301      	movs	r3, #1
 8008616:	77fb      	strb	r3, [r7, #31]
 8008618:	e14f      	b.n	80088ba <UART_SetConfig+0x346>
 800861a:	2302      	movs	r3, #2
 800861c:	77fb      	strb	r3, [r7, #31]
 800861e:	e14c      	b.n	80088ba <UART_SetConfig+0x346>
 8008620:	2304      	movs	r3, #4
 8008622:	77fb      	strb	r3, [r7, #31]
 8008624:	e149      	b.n	80088ba <UART_SetConfig+0x346>
 8008626:	2308      	movs	r3, #8
 8008628:	77fb      	strb	r3, [r7, #31]
 800862a:	e146      	b.n	80088ba <UART_SetConfig+0x346>
 800862c:	2310      	movs	r3, #16
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e143      	b.n	80088ba <UART_SetConfig+0x346>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a84      	ldr	r2, [pc, #528]	; (8008848 <UART_SetConfig+0x2d4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d132      	bne.n	80086a2 <UART_SetConfig+0x12e>
 800863c:	4b81      	ldr	r3, [pc, #516]	; (8008844 <UART_SetConfig+0x2d0>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008642:	f003 030c 	and.w	r3, r3, #12
 8008646:	2b0c      	cmp	r3, #12
 8008648:	d828      	bhi.n	800869c <UART_SetConfig+0x128>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0xdc>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008685 	.word	0x08008685
 8008654:	0800869d 	.word	0x0800869d
 8008658:	0800869d 	.word	0x0800869d
 800865c:	0800869d 	.word	0x0800869d
 8008660:	08008691 	.word	0x08008691
 8008664:	0800869d 	.word	0x0800869d
 8008668:	0800869d 	.word	0x0800869d
 800866c:	0800869d 	.word	0x0800869d
 8008670:	0800868b 	.word	0x0800868b
 8008674:	0800869d 	.word	0x0800869d
 8008678:	0800869d 	.word	0x0800869d
 800867c:	0800869d 	.word	0x0800869d
 8008680:	08008697 	.word	0x08008697
 8008684:	2300      	movs	r3, #0
 8008686:	77fb      	strb	r3, [r7, #31]
 8008688:	e117      	b.n	80088ba <UART_SetConfig+0x346>
 800868a:	2302      	movs	r3, #2
 800868c:	77fb      	strb	r3, [r7, #31]
 800868e:	e114      	b.n	80088ba <UART_SetConfig+0x346>
 8008690:	2304      	movs	r3, #4
 8008692:	77fb      	strb	r3, [r7, #31]
 8008694:	e111      	b.n	80088ba <UART_SetConfig+0x346>
 8008696:	2308      	movs	r3, #8
 8008698:	77fb      	strb	r3, [r7, #31]
 800869a:	e10e      	b.n	80088ba <UART_SetConfig+0x346>
 800869c:	2310      	movs	r3, #16
 800869e:	77fb      	strb	r3, [r7, #31]
 80086a0:	e10b      	b.n	80088ba <UART_SetConfig+0x346>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a69      	ldr	r2, [pc, #420]	; (800884c <UART_SetConfig+0x2d8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d120      	bne.n	80086ee <UART_SetConfig+0x17a>
 80086ac:	4b65      	ldr	r3, [pc, #404]	; (8008844 <UART_SetConfig+0x2d0>)
 80086ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086b6:	2b30      	cmp	r3, #48	; 0x30
 80086b8:	d013      	beq.n	80086e2 <UART_SetConfig+0x16e>
 80086ba:	2b30      	cmp	r3, #48	; 0x30
 80086bc:	d814      	bhi.n	80086e8 <UART_SetConfig+0x174>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d009      	beq.n	80086d6 <UART_SetConfig+0x162>
 80086c2:	2b20      	cmp	r3, #32
 80086c4:	d810      	bhi.n	80086e8 <UART_SetConfig+0x174>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <UART_SetConfig+0x15c>
 80086ca:	2b10      	cmp	r3, #16
 80086cc:	d006      	beq.n	80086dc <UART_SetConfig+0x168>
 80086ce:	e00b      	b.n	80086e8 <UART_SetConfig+0x174>
 80086d0:	2300      	movs	r3, #0
 80086d2:	77fb      	strb	r3, [r7, #31]
 80086d4:	e0f1      	b.n	80088ba <UART_SetConfig+0x346>
 80086d6:	2302      	movs	r3, #2
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e0ee      	b.n	80088ba <UART_SetConfig+0x346>
 80086dc:	2304      	movs	r3, #4
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	e0eb      	b.n	80088ba <UART_SetConfig+0x346>
 80086e2:	2308      	movs	r3, #8
 80086e4:	77fb      	strb	r3, [r7, #31]
 80086e6:	e0e8      	b.n	80088ba <UART_SetConfig+0x346>
 80086e8:	2310      	movs	r3, #16
 80086ea:	77fb      	strb	r3, [r7, #31]
 80086ec:	e0e5      	b.n	80088ba <UART_SetConfig+0x346>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a57      	ldr	r2, [pc, #348]	; (8008850 <UART_SetConfig+0x2dc>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d120      	bne.n	800873a <UART_SetConfig+0x1c6>
 80086f8:	4b52      	ldr	r3, [pc, #328]	; (8008844 <UART_SetConfig+0x2d0>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008702:	2bc0      	cmp	r3, #192	; 0xc0
 8008704:	d013      	beq.n	800872e <UART_SetConfig+0x1ba>
 8008706:	2bc0      	cmp	r3, #192	; 0xc0
 8008708:	d814      	bhi.n	8008734 <UART_SetConfig+0x1c0>
 800870a:	2b80      	cmp	r3, #128	; 0x80
 800870c:	d009      	beq.n	8008722 <UART_SetConfig+0x1ae>
 800870e:	2b80      	cmp	r3, #128	; 0x80
 8008710:	d810      	bhi.n	8008734 <UART_SetConfig+0x1c0>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <UART_SetConfig+0x1a8>
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d006      	beq.n	8008728 <UART_SetConfig+0x1b4>
 800871a:	e00b      	b.n	8008734 <UART_SetConfig+0x1c0>
 800871c:	2300      	movs	r3, #0
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	e0cb      	b.n	80088ba <UART_SetConfig+0x346>
 8008722:	2302      	movs	r3, #2
 8008724:	77fb      	strb	r3, [r7, #31]
 8008726:	e0c8      	b.n	80088ba <UART_SetConfig+0x346>
 8008728:	2304      	movs	r3, #4
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e0c5      	b.n	80088ba <UART_SetConfig+0x346>
 800872e:	2308      	movs	r3, #8
 8008730:	77fb      	strb	r3, [r7, #31]
 8008732:	e0c2      	b.n	80088ba <UART_SetConfig+0x346>
 8008734:	2310      	movs	r3, #16
 8008736:	77fb      	strb	r3, [r7, #31]
 8008738:	e0bf      	b.n	80088ba <UART_SetConfig+0x346>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a45      	ldr	r2, [pc, #276]	; (8008854 <UART_SetConfig+0x2e0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d125      	bne.n	8008790 <UART_SetConfig+0x21c>
 8008744:	4b3f      	ldr	r3, [pc, #252]	; (8008844 <UART_SetConfig+0x2d0>)
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800874e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008752:	d017      	beq.n	8008784 <UART_SetConfig+0x210>
 8008754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008758:	d817      	bhi.n	800878a <UART_SetConfig+0x216>
 800875a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875e:	d00b      	beq.n	8008778 <UART_SetConfig+0x204>
 8008760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008764:	d811      	bhi.n	800878a <UART_SetConfig+0x216>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d003      	beq.n	8008772 <UART_SetConfig+0x1fe>
 800876a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876e:	d006      	beq.n	800877e <UART_SetConfig+0x20a>
 8008770:	e00b      	b.n	800878a <UART_SetConfig+0x216>
 8008772:	2300      	movs	r3, #0
 8008774:	77fb      	strb	r3, [r7, #31]
 8008776:	e0a0      	b.n	80088ba <UART_SetConfig+0x346>
 8008778:	2302      	movs	r3, #2
 800877a:	77fb      	strb	r3, [r7, #31]
 800877c:	e09d      	b.n	80088ba <UART_SetConfig+0x346>
 800877e:	2304      	movs	r3, #4
 8008780:	77fb      	strb	r3, [r7, #31]
 8008782:	e09a      	b.n	80088ba <UART_SetConfig+0x346>
 8008784:	2308      	movs	r3, #8
 8008786:	77fb      	strb	r3, [r7, #31]
 8008788:	e097      	b.n	80088ba <UART_SetConfig+0x346>
 800878a:	2310      	movs	r3, #16
 800878c:	77fb      	strb	r3, [r7, #31]
 800878e:	e094      	b.n	80088ba <UART_SetConfig+0x346>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a30      	ldr	r2, [pc, #192]	; (8008858 <UART_SetConfig+0x2e4>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d125      	bne.n	80087e6 <UART_SetConfig+0x272>
 800879a:	4b2a      	ldr	r3, [pc, #168]	; (8008844 <UART_SetConfig+0x2d0>)
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a8:	d017      	beq.n	80087da <UART_SetConfig+0x266>
 80087aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ae:	d817      	bhi.n	80087e0 <UART_SetConfig+0x26c>
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b4:	d00b      	beq.n	80087ce <UART_SetConfig+0x25a>
 80087b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ba:	d811      	bhi.n	80087e0 <UART_SetConfig+0x26c>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <UART_SetConfig+0x254>
 80087c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c4:	d006      	beq.n	80087d4 <UART_SetConfig+0x260>
 80087c6:	e00b      	b.n	80087e0 <UART_SetConfig+0x26c>
 80087c8:	2301      	movs	r3, #1
 80087ca:	77fb      	strb	r3, [r7, #31]
 80087cc:	e075      	b.n	80088ba <UART_SetConfig+0x346>
 80087ce:	2302      	movs	r3, #2
 80087d0:	77fb      	strb	r3, [r7, #31]
 80087d2:	e072      	b.n	80088ba <UART_SetConfig+0x346>
 80087d4:	2304      	movs	r3, #4
 80087d6:	77fb      	strb	r3, [r7, #31]
 80087d8:	e06f      	b.n	80088ba <UART_SetConfig+0x346>
 80087da:	2308      	movs	r3, #8
 80087dc:	77fb      	strb	r3, [r7, #31]
 80087de:	e06c      	b.n	80088ba <UART_SetConfig+0x346>
 80087e0:	2310      	movs	r3, #16
 80087e2:	77fb      	strb	r3, [r7, #31]
 80087e4:	e069      	b.n	80088ba <UART_SetConfig+0x346>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1c      	ldr	r2, [pc, #112]	; (800885c <UART_SetConfig+0x2e8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d137      	bne.n	8008860 <UART_SetConfig+0x2ec>
 80087f0:	4b14      	ldr	r3, [pc, #80]	; (8008844 <UART_SetConfig+0x2d0>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80087fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80087fe:	d017      	beq.n	8008830 <UART_SetConfig+0x2bc>
 8008800:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008804:	d817      	bhi.n	8008836 <UART_SetConfig+0x2c2>
 8008806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800880a:	d00b      	beq.n	8008824 <UART_SetConfig+0x2b0>
 800880c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008810:	d811      	bhi.n	8008836 <UART_SetConfig+0x2c2>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <UART_SetConfig+0x2aa>
 8008816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800881a:	d006      	beq.n	800882a <UART_SetConfig+0x2b6>
 800881c:	e00b      	b.n	8008836 <UART_SetConfig+0x2c2>
 800881e:	2300      	movs	r3, #0
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e04a      	b.n	80088ba <UART_SetConfig+0x346>
 8008824:	2302      	movs	r3, #2
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e047      	b.n	80088ba <UART_SetConfig+0x346>
 800882a:	2304      	movs	r3, #4
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e044      	b.n	80088ba <UART_SetConfig+0x346>
 8008830:	2308      	movs	r3, #8
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e041      	b.n	80088ba <UART_SetConfig+0x346>
 8008836:	2310      	movs	r3, #16
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e03e      	b.n	80088ba <UART_SetConfig+0x346>
 800883c:	efff69f3 	.word	0xefff69f3
 8008840:	40011000 	.word	0x40011000
 8008844:	40023800 	.word	0x40023800
 8008848:	40004400 	.word	0x40004400
 800884c:	40004800 	.word	0x40004800
 8008850:	40004c00 	.word	0x40004c00
 8008854:	40005000 	.word	0x40005000
 8008858:	40011400 	.word	0x40011400
 800885c:	40007800 	.word	0x40007800
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a71      	ldr	r2, [pc, #452]	; (8008a2c <UART_SetConfig+0x4b8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d125      	bne.n	80088b6 <UART_SetConfig+0x342>
 800886a:	4b71      	ldr	r3, [pc, #452]	; (8008a30 <UART_SetConfig+0x4bc>)
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008874:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008878:	d017      	beq.n	80088aa <UART_SetConfig+0x336>
 800887a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800887e:	d817      	bhi.n	80088b0 <UART_SetConfig+0x33c>
 8008880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008884:	d00b      	beq.n	800889e <UART_SetConfig+0x32a>
 8008886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800888a:	d811      	bhi.n	80088b0 <UART_SetConfig+0x33c>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d003      	beq.n	8008898 <UART_SetConfig+0x324>
 8008890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008894:	d006      	beq.n	80088a4 <UART_SetConfig+0x330>
 8008896:	e00b      	b.n	80088b0 <UART_SetConfig+0x33c>
 8008898:	2300      	movs	r3, #0
 800889a:	77fb      	strb	r3, [r7, #31]
 800889c:	e00d      	b.n	80088ba <UART_SetConfig+0x346>
 800889e:	2302      	movs	r3, #2
 80088a0:	77fb      	strb	r3, [r7, #31]
 80088a2:	e00a      	b.n	80088ba <UART_SetConfig+0x346>
 80088a4:	2304      	movs	r3, #4
 80088a6:	77fb      	strb	r3, [r7, #31]
 80088a8:	e007      	b.n	80088ba <UART_SetConfig+0x346>
 80088aa:	2308      	movs	r3, #8
 80088ac:	77fb      	strb	r3, [r7, #31]
 80088ae:	e004      	b.n	80088ba <UART_SetConfig+0x346>
 80088b0:	2310      	movs	r3, #16
 80088b2:	77fb      	strb	r3, [r7, #31]
 80088b4:	e001      	b.n	80088ba <UART_SetConfig+0x346>
 80088b6:	2310      	movs	r3, #16
 80088b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c2:	d15a      	bne.n	800897a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80088c4:	7ffb      	ldrb	r3, [r7, #31]
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d827      	bhi.n	800891a <UART_SetConfig+0x3a6>
 80088ca:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <UART_SetConfig+0x35c>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	08008905 	.word	0x08008905
 80088dc:	0800891b 	.word	0x0800891b
 80088e0:	0800890b 	.word	0x0800890b
 80088e4:	0800891b 	.word	0x0800891b
 80088e8:	0800891b 	.word	0x0800891b
 80088ec:	0800891b 	.word	0x0800891b
 80088f0:	08008913 	.word	0x08008913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088f4:	f7fd ff60 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 80088f8:	61b8      	str	r0, [r7, #24]
        break;
 80088fa:	e013      	b.n	8008924 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088fc:	f7fd ff70 	bl	80067e0 <HAL_RCC_GetPCLK2Freq>
 8008900:	61b8      	str	r0, [r7, #24]
        break;
 8008902:	e00f      	b.n	8008924 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008904:	4b4b      	ldr	r3, [pc, #300]	; (8008a34 <UART_SetConfig+0x4c0>)
 8008906:	61bb      	str	r3, [r7, #24]
        break;
 8008908:	e00c      	b.n	8008924 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800890a:	f7fd fe93 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 800890e:	61b8      	str	r0, [r7, #24]
        break;
 8008910:	e008      	b.n	8008924 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008916:	61bb      	str	r3, [r7, #24]
        break;
 8008918:	e004      	b.n	8008924 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	77bb      	strb	r3, [r7, #30]
        break;
 8008922:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d074      	beq.n	8008a14 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	005a      	lsls	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	441a      	add	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	2b0f      	cmp	r3, #15
 8008944:	d916      	bls.n	8008974 <UART_SetConfig+0x400>
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800894c:	d212      	bcs.n	8008974 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	b29b      	uxth	r3, r3
 8008952:	f023 030f 	bic.w	r3, r3, #15
 8008956:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	b29b      	uxth	r3, r3
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	b29a      	uxth	r2, r3
 8008964:	89fb      	ldrh	r3, [r7, #14]
 8008966:	4313      	orrs	r3, r2
 8008968:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	89fa      	ldrh	r2, [r7, #14]
 8008970:	60da      	str	r2, [r3, #12]
 8008972:	e04f      	b.n	8008a14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	77bb      	strb	r3, [r7, #30]
 8008978:	e04c      	b.n	8008a14 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800897a:	7ffb      	ldrb	r3, [r7, #31]
 800897c:	2b08      	cmp	r3, #8
 800897e:	d828      	bhi.n	80089d2 <UART_SetConfig+0x45e>
 8008980:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <UART_SetConfig+0x414>)
 8008982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008986:	bf00      	nop
 8008988:	080089ad 	.word	0x080089ad
 800898c:	080089b5 	.word	0x080089b5
 8008990:	080089bd 	.word	0x080089bd
 8008994:	080089d3 	.word	0x080089d3
 8008998:	080089c3 	.word	0x080089c3
 800899c:	080089d3 	.word	0x080089d3
 80089a0:	080089d3 	.word	0x080089d3
 80089a4:	080089d3 	.word	0x080089d3
 80089a8:	080089cb 	.word	0x080089cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ac:	f7fd ff04 	bl	80067b8 <HAL_RCC_GetPCLK1Freq>
 80089b0:	61b8      	str	r0, [r7, #24]
        break;
 80089b2:	e013      	b.n	80089dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089b4:	f7fd ff14 	bl	80067e0 <HAL_RCC_GetPCLK2Freq>
 80089b8:	61b8      	str	r0, [r7, #24]
        break;
 80089ba:	e00f      	b.n	80089dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089bc:	4b1d      	ldr	r3, [pc, #116]	; (8008a34 <UART_SetConfig+0x4c0>)
 80089be:	61bb      	str	r3, [r7, #24]
        break;
 80089c0:	e00c      	b.n	80089dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089c2:	f7fd fe37 	bl	8006634 <HAL_RCC_GetSysClockFreq>
 80089c6:	61b8      	str	r0, [r7, #24]
        break;
 80089c8:	e008      	b.n	80089dc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ce:	61bb      	str	r3, [r7, #24]
        break;
 80089d0:	e004      	b.n	80089dc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	77bb      	strb	r3, [r7, #30]
        break;
 80089da:	bf00      	nop
    }

    if (pclk != 0U)
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d018      	beq.n	8008a14 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	085a      	lsrs	r2, r3, #1
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	441a      	add	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b0f      	cmp	r3, #15
 80089fa:	d909      	bls.n	8008a10 <UART_SetConfig+0x49c>
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a02:	d205      	bcs.n	8008a10 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60da      	str	r2, [r3, #12]
 8008a0e:	e001      	b.n	8008a14 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a20:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3720      	adds	r7, #32
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40007c00 	.word	0x40007c00
 8008a30:	40023800 	.word	0x40023800
 8008a34:	00f42400 	.word	0x00f42400

08008a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01a      	beq.n	8008b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b36:	d10a      	bne.n	8008b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	605a      	str	r2, [r3, #4]
  }
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b8c:	f7fb fb3a 	bl	8004204 <HAL_GetTick>
 8008b90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d10e      	bne.n	8008bbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f817 	bl	8008be2 <UART_WaitOnFlagUntilTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e00d      	b.n	8008bda <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b09c      	sub	sp, #112	; 0x70
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf2:	e0a5      	b.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfa:	f000 80a1 	beq.w	8008d40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bfe:	f7fb fb01 	bl	8004204 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d302      	bcc.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d13e      	bne.n	8008c92 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c28:	667b      	str	r3, [r7, #100]	; 0x64
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e6      	bne.n	8008c14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3308      	adds	r3, #8
 8008c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c66:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e5      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2220      	movs	r2, #32
 8008c84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e067      	b.n	8008d62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d04f      	beq.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cae:	d147      	bne.n	8008d40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	f023 0301 	bic.w	r3, r3, #1
 8008d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3308      	adds	r3, #8
 8008d0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d0c:	623a      	str	r2, [r7, #32]
 8008d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	69f9      	ldr	r1, [r7, #28]
 8008d12:	6a3a      	ldr	r2, [r7, #32]
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e5      	bne.n	8008cec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2220      	movs	r2, #32
 8008d24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e010      	b.n	8008d62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69da      	ldr	r2, [r3, #28]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	4013      	ands	r3, r2
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	bf0c      	ite	eq
 8008d50:	2301      	moveq	r3, #1
 8008d52:	2300      	movne	r3, #0
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	461a      	mov	r2, r3
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	f43f af4a 	beq.w	8008bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3770      	adds	r7, #112	; 0x70
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b097      	sub	sp, #92	; 0x5c
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	88fa      	ldrh	r2, [r7, #6]
 8008d84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	88fa      	ldrh	r2, [r7, #6]
 8008d8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d9e:	d10e      	bne.n	8008dbe <UART_Start_Receive_IT+0x52>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <UART_Start_Receive_IT+0x48>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008db2:	e02d      	b.n	8008e10 <UART_Start_Receive_IT+0xa4>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	22ff      	movs	r2, #255	; 0xff
 8008db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008dbc:	e028      	b.n	8008e10 <UART_Start_Receive_IT+0xa4>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <UART_Start_Receive_IT+0x76>
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <UART_Start_Receive_IT+0x6c>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	22ff      	movs	r2, #255	; 0xff
 8008dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008dd6:	e01b      	b.n	8008e10 <UART_Start_Receive_IT+0xa4>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	227f      	movs	r2, #127	; 0x7f
 8008ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008de0:	e016      	b.n	8008e10 <UART_Start_Receive_IT+0xa4>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dea:	d10d      	bne.n	8008e08 <UART_Start_Receive_IT+0x9c>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <UART_Start_Receive_IT+0x92>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	227f      	movs	r2, #127	; 0x7f
 8008df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008dfc:	e008      	b.n	8008e10 <UART_Start_Receive_IT+0xa4>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	223f      	movs	r2, #63	; 0x3f
 8008e02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e06:	e003      	b.n	8008e10 <UART_Start_Receive_IT+0xa4>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2222      	movs	r2, #34	; 0x22
 8008e1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3308      	adds	r3, #8
 8008e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	f043 0301 	orr.w	r3, r3, #1
 8008e34:	657b      	str	r3, [r7, #84]	; 0x54
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5a:	d107      	bne.n	8008e6c <UART_Start_Receive_IT+0x100>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d103      	bne.n	8008e6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4a24      	ldr	r2, [pc, #144]	; (8008ef8 <UART_Start_Receive_IT+0x18c>)
 8008e68:	665a      	str	r2, [r3, #100]	; 0x64
 8008e6a:	e002      	b.n	8008e72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4a23      	ldr	r2, [pc, #140]	; (8008efc <UART_Start_Receive_IT+0x190>)
 8008e70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d019      	beq.n	8008eb6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e6      	bne.n	8008e82 <UART_Start_Receive_IT+0x116>
 8008eb4:	e018      	b.n	8008ee8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	653b      	str	r3, [r7, #80]	; 0x50
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed4:	623b      	str	r3, [r7, #32]
 8008ed6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	69f9      	ldr	r1, [r7, #28]
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	375c      	adds	r7, #92	; 0x5c
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	08009319 	.word	0x08009319
 8008efc:	080091bd 	.word	0x080091bd

08008f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b095      	sub	sp, #84	; 0x54
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
 8008f28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e6      	bne.n	8008f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	f023 0301 	bic.w	r3, r3, #1
 8008f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3308      	adds	r3, #8
 8008f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d118      	bne.n	8008fa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f023 0310 	bic.w	r3, r3, #16
 8008f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6979      	ldr	r1, [r7, #20]
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008fba:	bf00      	nop
 8008fbc:	3754      	adds	r7, #84	; 0x54
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr

08008fc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff faaf 	bl	8008548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b08f      	sub	sp, #60	; 0x3c
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ffe:	2b21      	cmp	r3, #33	; 0x21
 8009000:	d14c      	bne.n	800909c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009008:	b29b      	uxth	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d132      	bne.n	8009074 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	61fb      	str	r3, [r7, #28]
   return(result);
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800902e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e6      	bne.n	800900e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	60bb      	str	r3, [r7, #8]
   return(result);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009054:	633b      	str	r3, [r7, #48]	; 0x30
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	6979      	ldr	r1, [r7, #20]
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	613b      	str	r3, [r7, #16]
   return(result);
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e6      	bne.n	8009040 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009072:	e013      	b.n	800909c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009078:	781a      	ldrb	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009090:	b29b      	uxth	r3, r3
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800909c:	bf00      	nop
 800909e:	373c      	adds	r7, #60	; 0x3c
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b091      	sub	sp, #68	; 0x44
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090b4:	2b21      	cmp	r3, #33	; 0x21
 80090b6:	d151      	bne.n	800915c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d132      	bne.n	800912a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	623b      	str	r3, [r7, #32]
   return(result);
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	633b      	str	r3, [r7, #48]	; 0x30
 80090e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e6      	bne.n	80090c4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	e853 3f00 	ldrex	r3, [r3]
 8009102:	60fb      	str	r3, [r7, #12]
   return(result);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910a:	637b      	str	r3, [r7, #52]	; 0x34
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	61fb      	str	r3, [r7, #28]
 8009116:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	69b9      	ldr	r1, [r7, #24]
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	617b      	str	r3, [r7, #20]
   return(result);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e6      	bne.n	80090f6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009128:	e018      	b.n	800915c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	461a      	mov	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800913e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009144:	1c9a      	adds	r2, r3, #2
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29a      	uxth	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800915c:	bf00      	nop
 800915e:	3744      	adds	r7, #68	; 0x44
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	60bb      	str	r3, [r7, #8]
   return(result);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009184:	61fb      	str	r3, [r7, #28]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	461a      	mov	r2, r3
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	61bb      	str	r3, [r7, #24]
 8009190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6979      	ldr	r1, [r7, #20]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	613b      	str	r3, [r7, #16]
   return(result);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e6      	bne.n	8009170 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7f9 f9d4 	bl	800255c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b4:	bf00      	nop
 80091b6:	3720      	adds	r7, #32
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b096      	sub	sp, #88	; 0x58
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091d2:	2b22      	cmp	r3, #34	; 0x22
 80091d4:	f040 8094 	bne.w	8009300 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80091e6:	b2d9      	uxtb	r1, r3
 80091e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	400a      	ands	r2, r1
 80091f4:	b2d2      	uxtb	r2, r2
 80091f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800921a:	b29b      	uxth	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d177      	bne.n	8009310 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009234:	653b      	str	r3, [r7, #80]	; 0x50
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923e:	647b      	str	r3, [r7, #68]	; 0x44
 8009240:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800924c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1e6      	bne.n	8009220 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	623b      	str	r3, [r7, #32]
   return(result);
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3308      	adds	r3, #8
 8009270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009272:	633a      	str	r2, [r7, #48]	; 0x30
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e5      	bne.n	8009252 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009296:	2b01      	cmp	r3, #1
 8009298:	d12e      	bne.n	80092f8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f023 0310 	bic.w	r3, r3, #16
 80092b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092be:	61fb      	str	r3, [r7, #28]
 80092c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c2:	69b9      	ldr	r1, [r7, #24]
 80092c4:	69fa      	ldr	r2, [r7, #28]
 80092c6:	e841 2300 	strex	r3, r2, [r1]
 80092ca:	617b      	str	r3, [r7, #20]
   return(result);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e6      	bne.n	80092a0 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	69db      	ldr	r3, [r3, #28]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d103      	bne.n	80092e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2210      	movs	r2, #16
 80092e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff f933 	bl	800855c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092f6:	e00b      	b.n	8009310 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7f8 fe45 	bl	8001f88 <HAL_UART_RxCpltCallback>
}
 80092fe:	e007      	b.n	8009310 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0208 	orr.w	r2, r2, #8
 800930e:	619a      	str	r2, [r3, #24]
}
 8009310:	bf00      	nop
 8009312:	3758      	adds	r7, #88	; 0x58
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b096      	sub	sp, #88	; 0x58
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009326:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932e:	2b22      	cmp	r3, #34	; 0x22
 8009330:	f040 8094 	bne.w	800945c <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009342:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009344:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009348:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800934c:	4013      	ands	r3, r2
 800934e:	b29a      	uxth	r2, r3
 8009350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009352:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009358:	1c9a      	adds	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009376:	b29b      	uxth	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d177      	bne.n	800946c <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939a:	643b      	str	r3, [r7, #64]	; 0x40
 800939c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093a2:	e841 2300 	strex	r3, r2, [r1]
 80093a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e6      	bne.n	800937c <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	f023 0301 	bic.w	r3, r3, #1
 80093c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3308      	adds	r3, #8
 80093cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e5      	bne.n	80093ae <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d12e      	bne.n	8009454 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	60bb      	str	r3, [r7, #8]
   return(result);
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f023 0310 	bic.w	r3, r3, #16
 8009410:	647b      	str	r3, [r7, #68]	; 0x44
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941a:	61bb      	str	r3, [r7, #24]
 800941c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6979      	ldr	r1, [r7, #20]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	613b      	str	r3, [r7, #16]
   return(result);
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e6      	bne.n	80093fc <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b10      	cmp	r3, #16
 800943a:	d103      	bne.n	8009444 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2210      	movs	r2, #16
 8009442:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff f885 	bl	800855c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009452:	e00b      	b.n	800946c <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7f8 fd97 	bl	8001f88 <HAL_UART_RxCpltCallback>
}
 800945a:	e007      	b.n	800946c <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	619a      	str	r2, [r3, #24]
}
 800946c:	bf00      	nop
 800946e:	3758      	adds	r7, #88	; 0x58
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <getMAC>:
uint8_t IP_ADDRESS[4];
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
uint8_t getMAC(int n){
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
	/* get MAC hardware address */
	return gnetif.hwaddr[n];
 800947c:	4a05      	ldr	r2, [pc, #20]	; (8009494 <getMAC+0x20>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4413      	add	r3, r2
 8009482:	3322      	adds	r3, #34	; 0x22
 8009484:	781b      	ldrb	r3, [r3, #0]
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	200055d0 	.word	0x200055d0

08009498 <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 80094a4:	f107 030c 	add.w	r3, r7, #12
 80094a8:	4619      	mov	r1, r3
 80094aa:	4803      	ldr	r0, [pc, #12]	; (80094b8 <setIP+0x20>)
 80094ac:	f007 fb4c 	bl	8010b48 <netif_set_ipaddr>
}
 80094b0:	bf00      	nop
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	200055d0 	.word	0x200055d0

080094bc <setNetmask>:
	ip4_addr_t temp;
	temp.addr = addr;
	netif_set_gw(&gnetif,&temp);
}

void setNetmask(u32_t addr){
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	60fb      	str	r3, [r7, #12]
	netif_set_netmask(&gnetif,&temp);
 80094c8:	f107 030c 	add.w	r3, r7, #12
 80094cc:	4619      	mov	r1, r3
 80094ce:	4803      	ldr	r0, [pc, #12]	; (80094dc <setNetmask+0x20>)
 80094d0:	f007 fb82 	bl	8010bd8 <netif_set_netmask>
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200055d0 	.word	0x200055d0

080094e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80094e6:	4b8c      	ldr	r3, [pc, #560]	; (8009718 <MX_LWIP_Init+0x238>)
 80094e8:	22c0      	movs	r2, #192	; 0xc0
 80094ea:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80094ec:	4b8a      	ldr	r3, [pc, #552]	; (8009718 <MX_LWIP_Init+0x238>)
 80094ee:	22a8      	movs	r2, #168	; 0xa8
 80094f0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80094f2:	4b89      	ldr	r3, [pc, #548]	; (8009718 <MX_LWIP_Init+0x238>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 80094f8:	4b87      	ldr	r3, [pc, #540]	; (8009718 <MX_LWIP_Init+0x238>)
 80094fa:	2237      	movs	r2, #55	; 0x37
 80094fc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80094fe:	4b87      	ldr	r3, [pc, #540]	; (800971c <MX_LWIP_Init+0x23c>)
 8009500:	22ff      	movs	r2, #255	; 0xff
 8009502:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009504:	4b85      	ldr	r3, [pc, #532]	; (800971c <MX_LWIP_Init+0x23c>)
 8009506:	22ff      	movs	r2, #255	; 0xff
 8009508:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800950a:	4b84      	ldr	r3, [pc, #528]	; (800971c <MX_LWIP_Init+0x23c>)
 800950c:	22ff      	movs	r2, #255	; 0xff
 800950e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009510:	4b82      	ldr	r3, [pc, #520]	; (800971c <MX_LWIP_Init+0x23c>)
 8009512:	2200      	movs	r2, #0
 8009514:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009516:	4b82      	ldr	r3, [pc, #520]	; (8009720 <MX_LWIP_Init+0x240>)
 8009518:	22c0      	movs	r2, #192	; 0xc0
 800951a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800951c:	4b80      	ldr	r3, [pc, #512]	; (8009720 <MX_LWIP_Init+0x240>)
 800951e:	22a8      	movs	r2, #168	; 0xa8
 8009520:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009522:	4b7f      	ldr	r3, [pc, #508]	; (8009720 <MX_LWIP_Init+0x240>)
 8009524:	2200      	movs	r2, #0
 8009526:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009528:	4b7d      	ldr	r3, [pc, #500]	; (8009720 <MX_LWIP_Init+0x240>)
 800952a:	2201      	movs	r2, #1
 800952c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800952e:	2100      	movs	r1, #0
 8009530:	2000      	movs	r0, #0
 8009532:	f005 fc49 	bl	800edc8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009536:	4b78      	ldr	r3, [pc, #480]	; (8009718 <MX_LWIP_Init+0x238>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	061a      	lsls	r2, r3, #24
 800953c:	4b76      	ldr	r3, [pc, #472]	; (8009718 <MX_LWIP_Init+0x238>)
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	041b      	lsls	r3, r3, #16
 8009542:	431a      	orrs	r2, r3
 8009544:	4b74      	ldr	r3, [pc, #464]	; (8009718 <MX_LWIP_Init+0x238>)
 8009546:	789b      	ldrb	r3, [r3, #2]
 8009548:	021b      	lsls	r3, r3, #8
 800954a:	4313      	orrs	r3, r2
 800954c:	4a72      	ldr	r2, [pc, #456]	; (8009718 <MX_LWIP_Init+0x238>)
 800954e:	78d2      	ldrb	r2, [r2, #3]
 8009550:	4313      	orrs	r3, r2
 8009552:	061a      	lsls	r2, r3, #24
 8009554:	4b70      	ldr	r3, [pc, #448]	; (8009718 <MX_LWIP_Init+0x238>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	0619      	lsls	r1, r3, #24
 800955a:	4b6f      	ldr	r3, [pc, #444]	; (8009718 <MX_LWIP_Init+0x238>)
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	041b      	lsls	r3, r3, #16
 8009560:	4319      	orrs	r1, r3
 8009562:	4b6d      	ldr	r3, [pc, #436]	; (8009718 <MX_LWIP_Init+0x238>)
 8009564:	789b      	ldrb	r3, [r3, #2]
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	430b      	orrs	r3, r1
 800956a:	496b      	ldr	r1, [pc, #428]	; (8009718 <MX_LWIP_Init+0x238>)
 800956c:	78c9      	ldrb	r1, [r1, #3]
 800956e:	430b      	orrs	r3, r1
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009576:	431a      	orrs	r2, r3
 8009578:	4b67      	ldr	r3, [pc, #412]	; (8009718 <MX_LWIP_Init+0x238>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	0619      	lsls	r1, r3, #24
 800957e:	4b66      	ldr	r3, [pc, #408]	; (8009718 <MX_LWIP_Init+0x238>)
 8009580:	785b      	ldrb	r3, [r3, #1]
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	4319      	orrs	r1, r3
 8009586:	4b64      	ldr	r3, [pc, #400]	; (8009718 <MX_LWIP_Init+0x238>)
 8009588:	789b      	ldrb	r3, [r3, #2]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	430b      	orrs	r3, r1
 800958e:	4962      	ldr	r1, [pc, #392]	; (8009718 <MX_LWIP_Init+0x238>)
 8009590:	78c9      	ldrb	r1, [r1, #3]
 8009592:	430b      	orrs	r3, r1
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800959a:	431a      	orrs	r2, r3
 800959c:	4b5e      	ldr	r3, [pc, #376]	; (8009718 <MX_LWIP_Init+0x238>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	0619      	lsls	r1, r3, #24
 80095a2:	4b5d      	ldr	r3, [pc, #372]	; (8009718 <MX_LWIP_Init+0x238>)
 80095a4:	785b      	ldrb	r3, [r3, #1]
 80095a6:	041b      	lsls	r3, r3, #16
 80095a8:	4319      	orrs	r1, r3
 80095aa:	4b5b      	ldr	r3, [pc, #364]	; (8009718 <MX_LWIP_Init+0x238>)
 80095ac:	789b      	ldrb	r3, [r3, #2]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	430b      	orrs	r3, r1
 80095b2:	4959      	ldr	r1, [pc, #356]	; (8009718 <MX_LWIP_Init+0x238>)
 80095b4:	78c9      	ldrb	r1, [r1, #3]
 80095b6:	430b      	orrs	r3, r1
 80095b8:	0e1b      	lsrs	r3, r3, #24
 80095ba:	4313      	orrs	r3, r2
 80095bc:	4a59      	ldr	r2, [pc, #356]	; (8009724 <MX_LWIP_Init+0x244>)
 80095be:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80095c0:	4b56      	ldr	r3, [pc, #344]	; (800971c <MX_LWIP_Init+0x23c>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	061a      	lsls	r2, r3, #24
 80095c6:	4b55      	ldr	r3, [pc, #340]	; (800971c <MX_LWIP_Init+0x23c>)
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	041b      	lsls	r3, r3, #16
 80095cc:	431a      	orrs	r2, r3
 80095ce:	4b53      	ldr	r3, [pc, #332]	; (800971c <MX_LWIP_Init+0x23c>)
 80095d0:	789b      	ldrb	r3, [r3, #2]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	4313      	orrs	r3, r2
 80095d6:	4a51      	ldr	r2, [pc, #324]	; (800971c <MX_LWIP_Init+0x23c>)
 80095d8:	78d2      	ldrb	r2, [r2, #3]
 80095da:	4313      	orrs	r3, r2
 80095dc:	061a      	lsls	r2, r3, #24
 80095de:	4b4f      	ldr	r3, [pc, #316]	; (800971c <MX_LWIP_Init+0x23c>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	0619      	lsls	r1, r3, #24
 80095e4:	4b4d      	ldr	r3, [pc, #308]	; (800971c <MX_LWIP_Init+0x23c>)
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	041b      	lsls	r3, r3, #16
 80095ea:	4319      	orrs	r1, r3
 80095ec:	4b4b      	ldr	r3, [pc, #300]	; (800971c <MX_LWIP_Init+0x23c>)
 80095ee:	789b      	ldrb	r3, [r3, #2]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	430b      	orrs	r3, r1
 80095f4:	4949      	ldr	r1, [pc, #292]	; (800971c <MX_LWIP_Init+0x23c>)
 80095f6:	78c9      	ldrb	r1, [r1, #3]
 80095f8:	430b      	orrs	r3, r1
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009600:	431a      	orrs	r2, r3
 8009602:	4b46      	ldr	r3, [pc, #280]	; (800971c <MX_LWIP_Init+0x23c>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	0619      	lsls	r1, r3, #24
 8009608:	4b44      	ldr	r3, [pc, #272]	; (800971c <MX_LWIP_Init+0x23c>)
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	041b      	lsls	r3, r3, #16
 800960e:	4319      	orrs	r1, r3
 8009610:	4b42      	ldr	r3, [pc, #264]	; (800971c <MX_LWIP_Init+0x23c>)
 8009612:	789b      	ldrb	r3, [r3, #2]
 8009614:	021b      	lsls	r3, r3, #8
 8009616:	430b      	orrs	r3, r1
 8009618:	4940      	ldr	r1, [pc, #256]	; (800971c <MX_LWIP_Init+0x23c>)
 800961a:	78c9      	ldrb	r1, [r1, #3]
 800961c:	430b      	orrs	r3, r1
 800961e:	0a1b      	lsrs	r3, r3, #8
 8009620:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009624:	431a      	orrs	r2, r3
 8009626:	4b3d      	ldr	r3, [pc, #244]	; (800971c <MX_LWIP_Init+0x23c>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	0619      	lsls	r1, r3, #24
 800962c:	4b3b      	ldr	r3, [pc, #236]	; (800971c <MX_LWIP_Init+0x23c>)
 800962e:	785b      	ldrb	r3, [r3, #1]
 8009630:	041b      	lsls	r3, r3, #16
 8009632:	4319      	orrs	r1, r3
 8009634:	4b39      	ldr	r3, [pc, #228]	; (800971c <MX_LWIP_Init+0x23c>)
 8009636:	789b      	ldrb	r3, [r3, #2]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	430b      	orrs	r3, r1
 800963c:	4937      	ldr	r1, [pc, #220]	; (800971c <MX_LWIP_Init+0x23c>)
 800963e:	78c9      	ldrb	r1, [r1, #3]
 8009640:	430b      	orrs	r3, r1
 8009642:	0e1b      	lsrs	r3, r3, #24
 8009644:	4313      	orrs	r3, r2
 8009646:	4a38      	ldr	r2, [pc, #224]	; (8009728 <MX_LWIP_Init+0x248>)
 8009648:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800964a:	4b35      	ldr	r3, [pc, #212]	; (8009720 <MX_LWIP_Init+0x240>)
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	061a      	lsls	r2, r3, #24
 8009650:	4b33      	ldr	r3, [pc, #204]	; (8009720 <MX_LWIP_Init+0x240>)
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	041b      	lsls	r3, r3, #16
 8009656:	431a      	orrs	r2, r3
 8009658:	4b31      	ldr	r3, [pc, #196]	; (8009720 <MX_LWIP_Init+0x240>)
 800965a:	789b      	ldrb	r3, [r3, #2]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	4313      	orrs	r3, r2
 8009660:	4a2f      	ldr	r2, [pc, #188]	; (8009720 <MX_LWIP_Init+0x240>)
 8009662:	78d2      	ldrb	r2, [r2, #3]
 8009664:	4313      	orrs	r3, r2
 8009666:	061a      	lsls	r2, r3, #24
 8009668:	4b2d      	ldr	r3, [pc, #180]	; (8009720 <MX_LWIP_Init+0x240>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	0619      	lsls	r1, r3, #24
 800966e:	4b2c      	ldr	r3, [pc, #176]	; (8009720 <MX_LWIP_Init+0x240>)
 8009670:	785b      	ldrb	r3, [r3, #1]
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	4319      	orrs	r1, r3
 8009676:	4b2a      	ldr	r3, [pc, #168]	; (8009720 <MX_LWIP_Init+0x240>)
 8009678:	789b      	ldrb	r3, [r3, #2]
 800967a:	021b      	lsls	r3, r3, #8
 800967c:	430b      	orrs	r3, r1
 800967e:	4928      	ldr	r1, [pc, #160]	; (8009720 <MX_LWIP_Init+0x240>)
 8009680:	78c9      	ldrb	r1, [r1, #3]
 8009682:	430b      	orrs	r3, r1
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800968a:	431a      	orrs	r2, r3
 800968c:	4b24      	ldr	r3, [pc, #144]	; (8009720 <MX_LWIP_Init+0x240>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	0619      	lsls	r1, r3, #24
 8009692:	4b23      	ldr	r3, [pc, #140]	; (8009720 <MX_LWIP_Init+0x240>)
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	041b      	lsls	r3, r3, #16
 8009698:	4319      	orrs	r1, r3
 800969a:	4b21      	ldr	r3, [pc, #132]	; (8009720 <MX_LWIP_Init+0x240>)
 800969c:	789b      	ldrb	r3, [r3, #2]
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	430b      	orrs	r3, r1
 80096a2:	491f      	ldr	r1, [pc, #124]	; (8009720 <MX_LWIP_Init+0x240>)
 80096a4:	78c9      	ldrb	r1, [r1, #3]
 80096a6:	430b      	orrs	r3, r1
 80096a8:	0a1b      	lsrs	r3, r3, #8
 80096aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80096ae:	431a      	orrs	r2, r3
 80096b0:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <MX_LWIP_Init+0x240>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	0619      	lsls	r1, r3, #24
 80096b6:	4b1a      	ldr	r3, [pc, #104]	; (8009720 <MX_LWIP_Init+0x240>)
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	041b      	lsls	r3, r3, #16
 80096bc:	4319      	orrs	r1, r3
 80096be:	4b18      	ldr	r3, [pc, #96]	; (8009720 <MX_LWIP_Init+0x240>)
 80096c0:	789b      	ldrb	r3, [r3, #2]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	430b      	orrs	r3, r1
 80096c6:	4916      	ldr	r1, [pc, #88]	; (8009720 <MX_LWIP_Init+0x240>)
 80096c8:	78c9      	ldrb	r1, [r1, #3]
 80096ca:	430b      	orrs	r3, r1
 80096cc:	0e1b      	lsrs	r3, r3, #24
 80096ce:	4313      	orrs	r3, r2
 80096d0:	4a16      	ldr	r2, [pc, #88]	; (800972c <MX_LWIP_Init+0x24c>)
 80096d2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80096d4:	4b16      	ldr	r3, [pc, #88]	; (8009730 <MX_LWIP_Init+0x250>)
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	4b16      	ldr	r3, [pc, #88]	; (8009734 <MX_LWIP_Init+0x254>)
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	2300      	movs	r3, #0
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4b12      	ldr	r3, [pc, #72]	; (800972c <MX_LWIP_Init+0x24c>)
 80096e2:	4a11      	ldr	r2, [pc, #68]	; (8009728 <MX_LWIP_Init+0x248>)
 80096e4:	490f      	ldr	r1, [pc, #60]	; (8009724 <MX_LWIP_Init+0x244>)
 80096e6:	4814      	ldr	r0, [pc, #80]	; (8009738 <MX_LWIP_Init+0x258>)
 80096e8:	f007 f906 	bl	80108f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80096ec:	4812      	ldr	r0, [pc, #72]	; (8009738 <MX_LWIP_Init+0x258>)
 80096ee:	f007 fb05 	bl	8010cfc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80096f2:	4b11      	ldr	r3, [pc, #68]	; (8009738 <MX_LWIP_Init+0x258>)
 80096f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80096f8:	089b      	lsrs	r3, r3, #2
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009704:	480c      	ldr	r0, [pc, #48]	; (8009738 <MX_LWIP_Init+0x258>)
 8009706:	f007 fb09 	bl	8010d1c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800970a:	e002      	b.n	8009712 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800970c:	480a      	ldr	r0, [pc, #40]	; (8009738 <MX_LWIP_Init+0x258>)
 800970e:	f007 fb71 	bl	8010df4 <netif_set_down>
}
 8009712:	bf00      	nop
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20005608 	.word	0x20005608
 800971c:	20005604 	.word	0x20005604
 8009720:	200055cc 	.word	0x200055cc
 8009724:	20005600 	.word	0x20005600
 8009728:	2000560c 	.word	0x2000560c
 800972c:	20005610 	.word	0x20005610
 8009730:	0800ecd9 	.word	0x0800ecd9
 8009734:	08009dfd 	.word	0x08009dfd
 8009738:	200055d0 	.word	0x200055d0

0800973c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	; 0x38
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	60da      	str	r2, [r3, #12]
 8009752:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a44      	ldr	r2, [pc, #272]	; (800986c <HAL_ETH_MspInit+0x130>)
 800975a:	4293      	cmp	r3, r2
 800975c:	f040 8081 	bne.w	8009862 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009760:	4b43      	ldr	r3, [pc, #268]	; (8009870 <HAL_ETH_MspInit+0x134>)
 8009762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009764:	4a42      	ldr	r2, [pc, #264]	; (8009870 <HAL_ETH_MspInit+0x134>)
 8009766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800976a:	6313      	str	r3, [r2, #48]	; 0x30
 800976c:	4b40      	ldr	r3, [pc, #256]	; (8009870 <HAL_ETH_MspInit+0x134>)
 800976e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009774:	623b      	str	r3, [r7, #32]
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	4b3d      	ldr	r3, [pc, #244]	; (8009870 <HAL_ETH_MspInit+0x134>)
 800977a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977c:	4a3c      	ldr	r2, [pc, #240]	; (8009870 <HAL_ETH_MspInit+0x134>)
 800977e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009782:	6313      	str	r3, [r2, #48]	; 0x30
 8009784:	4b3a      	ldr	r3, [pc, #232]	; (8009870 <HAL_ETH_MspInit+0x134>)
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800978c:	61fb      	str	r3, [r7, #28]
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4b37      	ldr	r3, [pc, #220]	; (8009870 <HAL_ETH_MspInit+0x134>)
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	4a36      	ldr	r2, [pc, #216]	; (8009870 <HAL_ETH_MspInit+0x134>)
 8009796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800979a:	6313      	str	r3, [r2, #48]	; 0x30
 800979c:	4b34      	ldr	r3, [pc, #208]	; (8009870 <HAL_ETH_MspInit+0x134>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097a4:	61bb      	str	r3, [r7, #24]
 80097a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80097a8:	4b31      	ldr	r3, [pc, #196]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ac:	4a30      	ldr	r2, [pc, #192]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b2:	6313      	str	r3, [r2, #48]	; 0x30
 80097b4:	4b2e      	ldr	r3, [pc, #184]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097c0:	4b2b      	ldr	r3, [pc, #172]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	4a2a      	ldr	r2, [pc, #168]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097c6:	f043 0304 	orr.w	r3, r3, #4
 80097ca:	6313      	str	r3, [r2, #48]	; 0x30
 80097cc:	4b28      	ldr	r3, [pc, #160]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097d8:	4b25      	ldr	r3, [pc, #148]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	4a24      	ldr	r2, [pc, #144]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	6313      	str	r3, [r2, #48]	; 0x30
 80097e4:	4b22      	ldr	r3, [pc, #136]	; (8009870 <HAL_ETH_MspInit+0x134>)
 80097e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80097f0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80097f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097f6:	2302      	movs	r3, #2
 80097f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097fe:	2303      	movs	r3, #3
 8009800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009802:	230b      	movs	r3, #11
 8009804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980a:	4619      	mov	r1, r3
 800980c:	4819      	ldr	r0, [pc, #100]	; (8009874 <HAL_ETH_MspInit+0x138>)
 800980e:	f7fc f929 	bl	8005a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009812:	2332      	movs	r3, #50	; 0x32
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009816:	2302      	movs	r3, #2
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981a:	2300      	movs	r3, #0
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800981e:	2303      	movs	r3, #3
 8009820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009822:	230b      	movs	r3, #11
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800982a:	4619      	mov	r1, r3
 800982c:	4812      	ldr	r0, [pc, #72]	; (8009878 <HAL_ETH_MspInit+0x13c>)
 800982e:	f7fc f919 	bl	8005a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009832:	2386      	movs	r3, #134	; 0x86
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009836:	2302      	movs	r3, #2
 8009838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800983a:	2300      	movs	r3, #0
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800983e:	2303      	movs	r3, #3
 8009840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009842:	230b      	movs	r3, #11
 8009844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800984a:	4619      	mov	r1, r3
 800984c:	480b      	ldr	r0, [pc, #44]	; (800987c <HAL_ETH_MspInit+0x140>)
 800984e:	f7fc f909 	bl	8005a64 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009852:	2200      	movs	r2, #0
 8009854:	2105      	movs	r1, #5
 8009856:	203d      	movs	r0, #61	; 0x3d
 8009858:	f7fa fdbc 	bl	80043d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800985c:	203d      	movs	r0, #61	; 0x3d
 800985e:	f7fa fdd5 	bl	800440c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009862:	bf00      	nop
 8009864:	3738      	adds	r7, #56	; 0x38
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	40028000 	.word	0x40028000
 8009870:	40023800 	.word	0x40023800
 8009874:	40021800 	.word	0x40021800
 8009878:	40020800 	.word	0x40020800
 800987c:	40020000 	.word	0x40020000

08009880 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009888:	4b04      	ldr	r3, [pc, #16]	; (800989c <HAL_ETH_RxCpltCallback+0x1c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fc93 	bl	800a1b8 <osSemaphoreRelease>
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000d28 	.word	0x20000d28

080098a0 <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 80098a0:	b480      	push	{r7}
 80098a2:	b089      	sub	sp, #36	; 0x24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
	int i, j;
	uint32_t byte, crc, mask;

	i = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	61fb      	str	r3, [r7, #28]
	crc = 0xFFFFFFFF;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295
 80098b2:	617b      	str	r3, [r7, #20]
	for(int k = 0; k<size;k++) {
 80098b4:	2300      	movs	r3, #0
 80098b6:	613b      	str	r3, [r7, #16]
 80098b8:	e023      	b.n	8009902 <crc32b+0x62>
		byte = message[k]; // Get next byte.
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
		crc = crc ^ byte;
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4053      	eors	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) { // Do eight times.
 80098cc:	2307      	movs	r3, #7
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e00e      	b.n	80098f0 <crc32b+0x50>
			mask = -(crc & 1);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	425b      	negs	r3, r3
 80098da:	60bb      	str	r3, [r7, #8]
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	085a      	lsrs	r2, r3, #1
 80098e0:	68b9      	ldr	r1, [r7, #8]
 80098e2:	4b0e      	ldr	r3, [pc, #56]	; (800991c <crc32b+0x7c>)
 80098e4:	400b      	ands	r3, r1
 80098e6:	4053      	eors	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) { // Do eight times.
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	61bb      	str	r3, [r7, #24]
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	daed      	bge.n	80098d2 <crc32b+0x32>
		}
		i = i + 1;
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	3301      	adds	r3, #1
 80098fa:	61fb      	str	r3, [r7, #28]
	for(int k = 0; k<size;k++) {
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	3301      	adds	r3, #1
 8009900:	613b      	str	r3, [r7, #16]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d8d7      	bhi.n	80098ba <crc32b+0x1a>
	}
	return ~crc;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	43db      	mvns	r3, r3
}
 800990e:	4618      	mov	r0, r3
 8009910:	3724      	adds	r7, #36	; 0x24
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	edb88320 	.word	0xedb88320

08009920 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009920:	b5b0      	push	{r4, r5, r7, lr}
 8009922:	b090      	sub	sp, #64	; 0x40
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800992c:	4b69      	ldr	r3, [pc, #420]	; (8009ad4 <low_level_init+0x1b4>)
 800992e:	4a6a      	ldr	r2, [pc, #424]	; (8009ad8 <low_level_init+0x1b8>)
 8009930:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009932:	4b68      	ldr	r3, [pc, #416]	; (8009ad4 <low_level_init+0x1b4>)
 8009934:	2201      	movs	r2, #1
 8009936:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009938:	4b66      	ldr	r3, [pc, #408]	; (8009ad4 <low_level_init+0x1b4>)
 800993a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800993e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009940:	4b64      	ldr	r3, [pc, #400]	; (8009ad4 <low_level_init+0x1b4>)
 8009942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009946:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009948:	4b62      	ldr	r3, [pc, #392]	; (8009ad4 <low_level_init+0x1b4>)
 800994a:	2200      	movs	r2, #0
 800994c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800994e:	2300      	movs	r3, #0
 8009950:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[1] = 0x80;
 8009954:	2380      	movs	r3, #128	; 0x80
 8009956:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  MACAddr[2] = 0xE1;
 800995a:	23e1      	movs	r3, #225	; 0xe1
 800995c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  MACAddr[3] = 0x00;
 8009960:	2300      	movs	r3, #0
 8009962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  MACAddr[4] = 0x00;
 8009966:	2300      	movs	r3, #0
 8009968:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[5] = 0x00;
 800996c:	2300      	movs	r3, #0
 800996e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  heth.Init.MACAddr = &MACAddr[0];
 8009972:	4a58      	ldr	r2, [pc, #352]	; (8009ad4 <low_level_init+0x1b4>)
 8009974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009978:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800997a:	4b56      	ldr	r3, [pc, #344]	; (8009ad4 <low_level_init+0x1b4>)
 800997c:	2201      	movs	r2, #1
 800997e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009980:	4b54      	ldr	r3, [pc, #336]	; (8009ad4 <low_level_init+0x1b4>)
 8009982:	2200      	movs	r2, #0
 8009984:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009986:	4b53      	ldr	r3, [pc, #332]	; (8009ad4 <low_level_init+0x1b4>)
 8009988:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800998c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  u32_t id = crc32b((uint8_t *)UID_BASE, 8);
 800998e:	2108      	movs	r1, #8
 8009990:	4852      	ldr	r0, [pc, #328]	; (8009adc <low_level_init+0x1bc>)
 8009992:	f7ff ff85 	bl	80098a0 <crc32b>
 8009996:	63f8      	str	r0, [r7, #60]	; 0x3c

    MACAddr[3] = (id>>16)&0xFF;
 8009998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999a:	0c1b      	lsrs	r3, r3, #16
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MACAddr[4] =(id>>8)&0xFF;
 80099a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a4:	0a1b      	lsrs	r3, r3, #8
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    MACAddr[5] = id&0xFF;
 80099ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80099b4:	4847      	ldr	r0, [pc, #284]	; (8009ad4 <low_level_init+0x1b4>)
 80099b6:	f7fa fdc9 	bl	800454c <HAL_ETH_Init>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  if (hal_eth_init_status == HAL_OK)
 80099c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d108      	bne.n	80099da <low_level_init+0xba>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80099ce:	f043 0304 	orr.w	r3, r3, #4
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80099da:	2304      	movs	r3, #4
 80099dc:	4a40      	ldr	r2, [pc, #256]	; (8009ae0 <low_level_init+0x1c0>)
 80099de:	4941      	ldr	r1, [pc, #260]	; (8009ae4 <low_level_init+0x1c4>)
 80099e0:	483c      	ldr	r0, [pc, #240]	; (8009ad4 <low_level_init+0x1b4>)
 80099e2:	f7fa ff4d 	bl	8004880 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80099e6:	2304      	movs	r3, #4
 80099e8:	4a3f      	ldr	r2, [pc, #252]	; (8009ae8 <low_level_init+0x1c8>)
 80099ea:	4940      	ldr	r1, [pc, #256]	; (8009aec <low_level_init+0x1cc>)
 80099ec:	4839      	ldr	r0, [pc, #228]	; (8009ad4 <low_level_init+0x1b4>)
 80099ee:	f7fa ffb0 	bl	8004952 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2206      	movs	r2, #6
 80099f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80099fa:	4b36      	ldr	r3, [pc, #216]	; (8009ad4 <low_level_init+0x1b4>)
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	781a      	ldrb	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009a06:	4b33      	ldr	r3, [pc, #204]	; (8009ad4 <low_level_init+0x1b4>)
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	785a      	ldrb	r2, [r3, #1]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009a12:	4b30      	ldr	r3, [pc, #192]	; (8009ad4 <low_level_init+0x1b4>)
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	789a      	ldrb	r2, [r3, #2]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009a1e:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <low_level_init+0x1b4>)
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	78da      	ldrb	r2, [r3, #3]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009a2a:	4b2a      	ldr	r3, [pc, #168]	; (8009ad4 <low_level_init+0x1b4>)
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	791a      	ldrb	r2, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009a36:	4b27      	ldr	r3, [pc, #156]	; (8009ad4 <low_level_init+0x1b4>)
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	795a      	ldrb	r2, [r3, #5]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009a48:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009a50:	f043 030a 	orr.w	r3, r3, #10
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a60:	2300      	movs	r3, #0
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a68:	2101      	movs	r1, #1
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fb24 	bl	800a0b8 <osSemaphoreCreate>
 8009a70:	4603      	mov	r3, r0
 8009a72:	4a1f      	ldr	r2, [pc, #124]	; (8009af0 <low_level_init+0x1d0>)
 8009a74:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009a76:	4b1f      	ldr	r3, [pc, #124]	; (8009af4 <low_level_init+0x1d4>)
 8009a78:	f107 0408 	add.w	r4, r7, #8
 8009a7c:	461d      	mov	r5, r3
 8009a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fa29 	bl	8009ee8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009a96:	480f      	ldr	r0, [pc, #60]	; (8009ad4 <low_level_init+0x1b4>)
 8009a98:	f7fb fa83 	bl	8004fa2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	211d      	movs	r1, #29
 8009aa4:	480b      	ldr	r0, [pc, #44]	; (8009ad4 <low_level_init+0x1b4>)
 8009aa6:	f7fb f9ae 	bl	8004e06 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aac:	f043 030b 	orr.w	r3, r3, #11
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	211d      	movs	r1, #29
 8009ab8:	4806      	ldr	r0, [pc, #24]	; (8009ad4 <low_level_init+0x1b4>)
 8009aba:	f7fb fa0c 	bl	8004ed6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009abe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	211d      	movs	r1, #29
 8009ac6:	4803      	ldr	r0, [pc, #12]	; (8009ad4 <low_level_init+0x1b4>)
 8009ac8:	f7fb f99d 	bl	8004e06 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009acc:	bf00      	nop
 8009ace:	3740      	adds	r7, #64	; 0x40
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ad4:	20006ee4 	.word	0x20006ee4
 8009ad8:	40028000 	.word	0x40028000
 8009adc:	1ff0f420 	.word	0x1ff0f420
 8009ae0:	20006f2c 	.word	0x20006f2c
 8009ae4:	20005614 	.word	0x20005614
 8009ae8:	20005694 	.word	0x20005694
 8009aec:	20006e64 	.word	0x20006e64
 8009af0:	20000d28 	.word	0x20000d28
 8009af4:	08024bd0 	.word	0x08024bd0

08009af8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009b02:	4b4b      	ldr	r3, [pc, #300]	; (8009c30 <low_level_output+0x138>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8009b1a:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <low_level_output+0x138>)
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	623b      	str	r3, [r7, #32]
 8009b28:	e05a      	b.n	8009be0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	da03      	bge.n	8009b3a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009b32:	23f8      	movs	r3, #248	; 0xf8
 8009b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009b38:	e05c      	b.n	8009bf4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	895b      	ldrh	r3, [r3, #10]
 8009b3e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b44:	e02f      	b.n	8009ba6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	18d0      	adds	r0, r2, r3
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	18d1      	adds	r1, r2, r3
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	f011 fdcf 	bl	801b700 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	da03      	bge.n	8009b78 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009b70:	23f8      	movs	r3, #248	; 0xf8
 8009b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009b76:	e03d      	b.n	8009bf4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009b88:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009b94:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009ba0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	4413      	add	r3, r2
 8009bac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d8c8      	bhi.n	8009b46 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009bb4:	69fa      	ldr	r2, [r7, #28]
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	18d0      	adds	r0, r2, r3
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f011 fd9b 	bl	801b700 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	623b      	str	r3, [r7, #32]
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1a1      	bne.n	8009b2a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009be6:	6979      	ldr	r1, [r7, #20]
 8009be8:	4811      	ldr	r0, [pc, #68]	; (8009c30 <low_level_output+0x138>)
 8009bea:	f7fa ff1f 	bl	8004a2c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009bf4:	4b0e      	ldr	r3, [pc, #56]	; (8009c30 <low_level_output+0x138>)
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	f241 0314 	movw	r3, #4116	; 0x1014
 8009bfc:	4413      	add	r3, r2
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00d      	beq.n	8009c24 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <low_level_output+0x138>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8009c10:	4413      	add	r3, r2
 8009c12:	2220      	movs	r2, #32
 8009c14:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <low_level_output+0x138>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	f241 0304 	movw	r3, #4100	; 0x1004
 8009c1e:	4413      	add	r3, r2
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009c24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3728      	adds	r7, #40	; 0x28
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20006ee4 	.word	0x20006ee4

08009c34 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08c      	sub	sp, #48	; 0x30
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009c40:	2300      	movs	r3, #0
 8009c42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009c58:	484f      	ldr	r0, [pc, #316]	; (8009d98 <low_level_input+0x164>)
 8009c5a:	f7fa ffd1 	bl	8004c00 <HAL_ETH_GetReceivedFrame_IT>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <low_level_input+0x34>

    return NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	e092      	b.n	8009d8e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009c68:	4b4b      	ldr	r3, [pc, #300]	; (8009d98 <low_level_input+0x164>)
 8009c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c6c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009c6e:	4b4a      	ldr	r3, [pc, #296]	; (8009d98 <low_level_input+0x164>)
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009c74:	89fb      	ldrh	r3, [r7, #14]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d007      	beq.n	8009c8a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009c7a:	89fb      	ldrh	r3, [r7, #14]
 8009c7c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009c80:	4619      	mov	r1, r3
 8009c82:	2000      	movs	r0, #0
 8009c84:	f007 f9a0 	bl	8010fc8 <pbuf_alloc>
 8009c88:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d04b      	beq.n	8009d28 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009c90:	4b41      	ldr	r3, [pc, #260]	; (8009d98 <low_level_input+0x164>)
 8009c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c94:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c9e:	e040      	b.n	8009d22 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	895b      	ldrh	r3, [r3, #10]
 8009ca4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009caa:	e021      	b.n	8009cf0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	18d0      	adds	r0, r2, r3
 8009cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	18d1      	adds	r1, r2, r3
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f011 fd1c 	bl	801b700 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009cde:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009cea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d8d6      	bhi.n	8009cac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	18d0      	adds	r0, r2, r3
 8009d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f011 fcf6 	bl	801b700 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1bb      	bne.n	8009ca0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009d28:	4b1b      	ldr	r3, [pc, #108]	; (8009d98 <low_level_input+0x164>)
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009d2e:	2300      	movs	r3, #0
 8009d30:	613b      	str	r3, [r7, #16]
 8009d32:	e00b      	b.n	8009d4c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <low_level_input+0x164>)
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d3ee      	bcc.n	8009d34 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009d56:	4b10      	ldr	r3, [pc, #64]	; (8009d98 <low_level_input+0x164>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8009d5c:	4b0e      	ldr	r3, [pc, #56]	; (8009d98 <low_level_input+0x164>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	f241 0314 	movw	r3, #4116	; 0x1014
 8009d64:	4413      	add	r3, r2
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00d      	beq.n	8009d8c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009d70:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <low_level_input+0x164>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	f241 0314 	movw	r3, #4116	; 0x1014
 8009d78:	4413      	add	r3, r2
 8009d7a:	2280      	movs	r2, #128	; 0x80
 8009d7c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009d7e:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <low_level_input+0x164>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	f241 0308 	movw	r3, #4104	; 0x1008
 8009d86:	4413      	add	r3, r2
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3730      	adds	r7, #48	; 0x30
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20006ee4 	.word	0x20006ee4

08009d9c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009da8:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <ethernetif_input+0x58>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f04f 31ff 	mov.w	r1, #4294967295
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 f9b3 	bl	800a11c <osSemaphoreWait>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1f5      	bne.n	8009da8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009dbc:	480e      	ldr	r0, [pc, #56]	; (8009df8 <ethernetif_input+0x5c>)
 8009dbe:	f011 fb13 	bl	801b3e8 <sys_mutex_lock>
        p = low_level_input( netif );
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7ff ff36 	bl	8009c34 <low_level_input>
 8009dc8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00a      	beq.n	8009de6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	68b8      	ldr	r0, [r7, #8]
 8009dd8:	4798      	blx	r3
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009de0:	68b8      	ldr	r0, [r7, #8]
 8009de2:	f007 fbd5 	bl	8011590 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009de6:	4804      	ldr	r0, [pc, #16]	; (8009df8 <ethernetif_input+0x5c>)
 8009de8:	f011 fb0d 	bl	801b406 <sys_mutex_unlock>
      } while(p!=NULL);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1e4      	bne.n	8009dbc <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009df2:	e7d9      	b.n	8009da8 <ethernetif_input+0xc>
 8009df4:	20000d28 	.word	0x20000d28
 8009df8:	2000873c 	.word	0x2000873c

08009dfc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <ethernetif_init+0x1c>
 8009e0a:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <ethernetif_init+0x48>)
 8009e0c:	f240 223f 	movw	r2, #575	; 0x23f
 8009e10:	490d      	ldr	r1, [pc, #52]	; (8009e48 <ethernetif_init+0x4c>)
 8009e12:	480e      	ldr	r0, [pc, #56]	; (8009e4c <ethernetif_init+0x50>)
 8009e14:	f011 ff22 	bl	801bc5c <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2273      	movs	r2, #115	; 0x73
 8009e1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2274      	movs	r2, #116	; 0x74
 8009e24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a09      	ldr	r2, [pc, #36]	; (8009e50 <ethernetif_init+0x54>)
 8009e2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a08      	ldr	r2, [pc, #32]	; (8009e54 <ethernetif_init+0x58>)
 8009e32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fd73 	bl	8009920 <low_level_init>

  return ERR_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	08024bec 	.word	0x08024bec
 8009e48:	08024c08 	.word	0x08024c08
 8009e4c:	08024c18 	.word	0x08024c18
 8009e50:	080191a9 	.word	0x080191a9
 8009e54:	08009af9 	.word	0x08009af9

08009e58 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009e5c:	f7fa f9d2 	bl	8004204 <HAL_GetTick>
 8009e60:	4603      	mov	r3, r0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b085      	sub	sp, #20
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e78:	2b84      	cmp	r3, #132	; 0x84
 8009e7a:	d005      	beq.n	8009e88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	3303      	adds	r3, #3
 8009e86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e88:	68fb      	ldr	r3, [r7, #12]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e9c:	f3ef 8305 	mrs	r3, IPSR
 8009ea0:	607b      	str	r3, [r7, #4]
  return(result);
 8009ea2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bf14      	ite	ne
 8009ea8:	2301      	movne	r3, #1
 8009eaa:	2300      	moveq	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ebe:	f001 fd29 	bl	800b914 <vTaskStartScheduler>
  
  return osOK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009ecc:	f7ff ffe3 	bl	8009e96 <inHandlerMode>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009ed6:	f001 fe3d 	bl	800bb54 <xTaskGetTickCountFromISR>
 8009eda:	4603      	mov	r3, r0
 8009edc:	e002      	b.n	8009ee4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009ede:	f001 fe29 	bl	800bb34 <xTaskGetTickCount>
 8009ee2:	4603      	mov	r3, r0
  }
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eea:	b089      	sub	sp, #36	; 0x24
 8009eec:	af04      	add	r7, sp, #16
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d020      	beq.n	8009f3c <osThreadCreate+0x54>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d01c      	beq.n	8009f3c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685c      	ldr	r4, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681d      	ldr	r5, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691e      	ldr	r6, [r3, #16]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff ffa6 	bl	8009e66 <makeFreeRtosPriority>
 8009f1a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f24:	9202      	str	r2, [sp, #8]
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	9100      	str	r1, [sp, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4620      	mov	r0, r4
 8009f32:	f001 fb53 	bl	800b5dc <xTaskCreateStatic>
 8009f36:	4603      	mov	r3, r0
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e01c      	b.n	8009f76 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685c      	ldr	r4, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f48:	b29e      	uxth	r6, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff ff88 	bl	8009e66 <makeFreeRtosPriority>
 8009f56:	4602      	mov	r2, r0
 8009f58:	f107 030c 	add.w	r3, r7, #12
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	9200      	str	r2, [sp, #0]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	4632      	mov	r2, r6
 8009f64:	4629      	mov	r1, r5
 8009f66:	4620      	mov	r0, r4
 8009f68:	f001 fb9b 	bl	800b6a2 <xTaskCreate>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d001      	beq.n	8009f76 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e000      	b.n	8009f78 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f76:	68fb      	ldr	r3, [r7, #12]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	4619      	mov	r1, r3
 8009f96:	2001      	movs	r0, #1
 8009f98:	f000 fc91 	bl	800a8be <xQueueCreateMutexStatic>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	e003      	b.n	8009fa8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	f000 fc74 	bl	800a88e <xQueueCreateMutex>
 8009fa6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d101      	bne.n	8009fc8 <osMutexWait+0x18>
    return osErrorParameter;
 8009fc4:	2380      	movs	r3, #128	; 0x80
 8009fc6:	e03a      	b.n	800a03e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd2:	d103      	bne.n	8009fdc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e009      	b.n	8009ff0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d006      	beq.n	8009ff0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <osMutexWait+0x40>
      ticks = 1;
 8009fec:	2301      	movs	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009ff0:	f7ff ff51 	bl	8009e96 <inHandlerMode>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d017      	beq.n	800a02a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ffa:	f107 0308 	add.w	r3, r7, #8
 8009ffe:	461a      	mov	r2, r3
 800a000:	2100      	movs	r1, #0
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 f8ac 	bl	800b160 <xQueueReceiveFromISR>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d001      	beq.n	800a012 <osMutexWait+0x62>
      return osErrorOS;
 800a00e:	23ff      	movs	r3, #255	; 0xff
 800a010:	e015      	b.n	800a03e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d011      	beq.n	800a03c <osMutexWait+0x8c>
 800a018:	4b0b      	ldr	r3, [pc, #44]	; (800a048 <osMutexWait+0x98>)
 800a01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	e008      	b.n	800a03c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a02a:	68f9      	ldr	r1, [r7, #12]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 ff83 	bl	800af38 <xQueueSemaphoreTake>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d001      	beq.n	800a03c <osMutexWait+0x8c>
    return osErrorOS;
 800a038:	23ff      	movs	r3, #255	; 0xff
 800a03a:	e000      	b.n	800a03e <osMutexWait+0x8e>
  }
  
  return osOK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a058:	2300      	movs	r3, #0
 800a05a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a05c:	f7ff ff1b 	bl	8009e96 <inHandlerMode>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d016      	beq.n	800a094 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a066:	f107 0308 	add.w	r3, r7, #8
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fde7 	bl	800ac40 <xQueueGiveFromISR>
 800a072:	4603      	mov	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d001      	beq.n	800a07c <osMutexRelease+0x30>
      return osErrorOS;
 800a078:	23ff      	movs	r3, #255	; 0xff
 800a07a:	e017      	b.n	800a0ac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d013      	beq.n	800a0aa <osMutexRelease+0x5e>
 800a082:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <osMutexRelease+0x68>)
 800a084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	e00a      	b.n	800a0aa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a094:	2300      	movs	r3, #0
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fc2a 	bl	800a8f4 <xQueueGenericSend>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d001      	beq.n	800a0aa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a0a6:	23ff      	movs	r3, #255	; 0xff
 800a0a8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	e000ed04 	.word	0xe000ed04

0800a0b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af02      	add	r7, sp, #8
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00f      	beq.n	800a0ea <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d10a      	bne.n	800a0e6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2203      	movs	r2, #3
 800a0d6:	9200      	str	r2, [sp, #0]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2100      	movs	r1, #0
 800a0dc:	2001      	movs	r0, #1
 800a0de:	f000 fad9 	bl	800a694 <xQueueGenericCreateStatic>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	e016      	b.n	800a114 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e014      	b.n	800a114 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d110      	bne.n	800a112 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	f000 fb4f 	bl	800a798 <xQueueGenericCreate>
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <osSemaphoreCreate+0x56>
 800a102:	2300      	movs	r3, #0
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 fbf3 	bl	800a8f4 <xQueueGenericSend>
      return sema;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	e000      	b.n	800a114 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a112:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a126:	2300      	movs	r3, #0
 800a128:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	e03a      	b.n	800a1aa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d103      	bne.n	800a148 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a140:	f04f 33ff 	mov.w	r3, #4294967295
 800a144:	60fb      	str	r3, [r7, #12]
 800a146:	e009      	b.n	800a15c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d006      	beq.n	800a15c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <osSemaphoreWait+0x40>
      ticks = 1;
 800a158:	2301      	movs	r3, #1
 800a15a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a15c:	f7ff fe9b 	bl	8009e96 <inHandlerMode>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d017      	beq.n	800a196 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a166:	f107 0308 	add.w	r3, r7, #8
 800a16a:	461a      	mov	r2, r3
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fff6 	bl	800b160 <xQueueReceiveFromISR>
 800a174:	4603      	mov	r3, r0
 800a176:	2b01      	cmp	r3, #1
 800a178:	d001      	beq.n	800a17e <osSemaphoreWait+0x62>
      return osErrorOS;
 800a17a:	23ff      	movs	r3, #255	; 0xff
 800a17c:	e015      	b.n	800a1aa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d011      	beq.n	800a1a8 <osSemaphoreWait+0x8c>
 800a184:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <osSemaphoreWait+0x98>)
 800a186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	e008      	b.n	800a1a8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a196:	68f9      	ldr	r1, [r7, #12]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fecd 	bl	800af38 <xQueueSemaphoreTake>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d001      	beq.n	800a1a8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a1a4:	23ff      	movs	r3, #255	; 0xff
 800a1a6:	e000      	b.n	800a1aa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a1c8:	f7ff fe65 	bl	8009e96 <inHandlerMode>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d016      	beq.n	800a200 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a1d2:	f107 0308 	add.w	r3, r7, #8
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fd31 	bl	800ac40 <xQueueGiveFromISR>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d001      	beq.n	800a1e8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a1e4:	23ff      	movs	r3, #255	; 0xff
 800a1e6:	e017      	b.n	800a218 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d013      	beq.n	800a216 <osSemaphoreRelease+0x5e>
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <osSemaphoreRelease+0x68>)
 800a1f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	e00a      	b.n	800a216 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a200:	2300      	movs	r3, #0
 800a202:	2200      	movs	r2, #0
 800a204:	2100      	movs	r1, #0
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fb74 	bl	800a8f4 <xQueueGenericSend>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d001      	beq.n	800a216 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a212:	23ff      	movs	r3, #255	; 0xff
 800a214:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a216:	68fb      	ldr	r3, [r7, #12]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a22c:	f7ff fe33 	bl	8009e96 <inHandlerMode>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a236:	2382      	movs	r3, #130	; 0x82
 800a238:	e003      	b.n	800a242 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f001 f856 	bl	800b2ec <vQueueDelete>

  return osOK; 
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a24a:	b590      	push	{r4, r7, lr}
 800a24c:	b085      	sub	sp, #20
 800a24e:	af02      	add	r7, sp, #8
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d011      	beq.n	800a280 <osMessageCreate+0x36>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00d      	beq.n	800a280 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6859      	ldr	r1, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2400      	movs	r4, #0
 800a276:	9400      	str	r4, [sp, #0]
 800a278:	f000 fa0c 	bl	800a694 <xQueueGenericCreateStatic>
 800a27c:	4603      	mov	r3, r0
 800a27e:	e008      	b.n	800a292 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6818      	ldr	r0, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	4619      	mov	r1, r3
 800a28c:	f000 fa84 	bl	800a798 <xQueueGenericCreate>
 800a290:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a292:	4618      	mov	r0, r3
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	bd90      	pop	{r4, r7, pc}
	...

0800a29c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <osMessagePut+0x1e>
    ticks = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a2ba:	f7ff fdec 	bl	8009e96 <inHandlerMode>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d018      	beq.n	800a2f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a2c4:	f107 0210 	add.w	r2, r7, #16
 800a2c8:	f107 0108 	add.w	r1, r7, #8
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 fc16 	bl	800ab00 <xQueueGenericSendFromISR>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d001      	beq.n	800a2de <osMessagePut+0x42>
      return osErrorOS;
 800a2da:	23ff      	movs	r3, #255	; 0xff
 800a2dc:	e018      	b.n	800a310 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d014      	beq.n	800a30e <osMessagePut+0x72>
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <osMessagePut+0x7c>)
 800a2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	e00b      	b.n	800a30e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a2f6:	f107 0108 	add.w	r1, r7, #8
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 faf8 	bl	800a8f4 <xQueueGenericSend>
 800a304:	4603      	mov	r3, r0
 800a306:	2b01      	cmp	r3, #1
 800a308:	d001      	beq.n	800a30e <osMessagePut+0x72>
      return osErrorOS;
 800a30a:	23ff      	movs	r3, #255	; 0xff
 800a30c:	e000      	b.n	800a310 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b08b      	sub	sp, #44	; 0x2c
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a336:	2380      	movs	r3, #128	; 0x80
 800a338:	617b      	str	r3, [r7, #20]
    return event;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	461c      	mov	r4, r3
 800a33e:	f107 0314 	add.w	r3, r7, #20
 800a342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a34a:	e054      	b.n	800a3f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a34c:	2300      	movs	r3, #0
 800a34e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a350:	2300      	movs	r3, #0
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d103      	bne.n	800a364 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
 800a362:	e009      	b.n	800a378 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d006      	beq.n	800a378 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <osMessageGet+0x5c>
      ticks = 1;
 800a374:	2301      	movs	r3, #1
 800a376:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a378:	f7ff fd8d 	bl	8009e96 <inHandlerMode>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01c      	beq.n	800a3bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a382:	f107 0220 	add.w	r2, r7, #32
 800a386:	f107 0314 	add.w	r3, r7, #20
 800a38a:	3304      	adds	r3, #4
 800a38c:	4619      	mov	r1, r3
 800a38e:	68b8      	ldr	r0, [r7, #8]
 800a390:	f000 fee6 	bl	800b160 <xQueueReceiveFromISR>
 800a394:	4603      	mov	r3, r0
 800a396:	2b01      	cmp	r3, #1
 800a398:	d102      	bne.n	800a3a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a39a:	2310      	movs	r3, #16
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	e001      	b.n	800a3a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a3a4:	6a3b      	ldr	r3, [r7, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d01d      	beq.n	800a3e6 <osMessageGet+0xca>
 800a3aa:	4b15      	ldr	r3, [pc, #84]	; (800a400 <osMessageGet+0xe4>)
 800a3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	e014      	b.n	800a3e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a3bc:	f107 0314 	add.w	r3, r7, #20
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68b8      	ldr	r0, [r7, #8]
 800a3c8:	f000 fcd0 	bl	800ad6c <xQueueReceive>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d102      	bne.n	800a3d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a3d2:	2310      	movs	r3, #16
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	e006      	b.n	800a3e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <osMessageGet+0xc6>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	e000      	b.n	800a3e4 <osMessageGet+0xc8>
 800a3e2:	2340      	movs	r3, #64	; 0x40
 800a3e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	461c      	mov	r4, r3
 800a3ea:	f107 0314 	add.w	r3, r7, #20
 800a3ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	372c      	adds	r7, #44	; 0x2c
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd90      	pop	{r4, r7, pc}
 800a3fe:	bf00      	nop
 800a400:	e000ed04 	.word	0xe000ed04

0800a404 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a40c:	f7ff fd43 	bl	8009e96 <inHandlerMode>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d004      	beq.n	800a420 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 ff48 	bl	800b2ac <uxQueueMessagesWaitingFromISR>
 800a41c:	4603      	mov	r3, r0
 800a41e:	e003      	b.n	800a428 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 ff23 	bl	800b26c <uxQueueMessagesWaiting>
 800a426:	4603      	mov	r3, r0
  }
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a438:	f7ff fd2d 	bl	8009e96 <inHandlerMode>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <osMessageDelete+0x16>
    return osErrorISR;
 800a442:	2382      	movs	r3, #130	; 0x82
 800a444:	e003      	b.n	800a44e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 ff50 	bl	800b2ec <vQueueDelete>

  return osOK; 
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f103 0208 	add.w	r2, r3, #8
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f103 0208 	add.w	r2, r3, #8
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f103 0208 	add.w	r2, r3, #8
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]
}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50e:	d103      	bne.n	800a518 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e00c      	b.n	800a532 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3308      	adds	r3, #8
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	e002      	b.n	800a526 <vListInsert+0x2e>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d2f6      	bcs.n	800a520 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
}
 800a55e:	bf00      	nop
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6892      	ldr	r2, [r2, #8]
 800a580:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	6852      	ldr	r2, [r2, #4]
 800a58a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d103      	bne.n	800a59e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	689a      	ldr	r2, [r3, #8]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	1e5a      	subs	r2, r3, #1
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10c      	bne.n	800a5ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	b672      	cpsid	i
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	b662      	cpsie	i
 800a5e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a5ee:	f002 f915 	bl	800c81c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	68f9      	ldr	r1, [r7, #12]
 800a5fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5fe:	fb01 f303 	mul.w	r3, r1, r3
 800a602:	441a      	add	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61e:	3b01      	subs	r3, #1
 800a620:	68f9      	ldr	r1, [r7, #12]
 800a622:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	441a      	add	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	22ff      	movs	r2, #255	; 0xff
 800a632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	22ff      	movs	r2, #255	; 0xff
 800a63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d114      	bne.n	800a66e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01a      	beq.n	800a682 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3310      	adds	r3, #16
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fbcf 	bl	800bdf4 <xTaskRemoveFromEventList>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d012      	beq.n	800a682 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <xQueueGenericReset+0xd0>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	e009      	b.n	800a682 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff feef 	bl	800a456 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff feea 	bl	800a456 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a682:	f002 f8ff 	bl	800c884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a686:	2301      	movs	r3, #1
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08e      	sub	sp, #56	; 0x38
 800a698:	af02      	add	r7, sp, #8
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10c      	bne.n	800a6c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	b672      	cpsid	i
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	b662      	cpsie	i
 800a6bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10c      	bne.n	800a6e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	b672      	cpsid	i
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	b662      	cpsie	i
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <xQueueGenericCreateStatic+0x5a>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <xQueueGenericCreateStatic+0x5e>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e000      	b.n	800a6f4 <xQueueGenericCreateStatic+0x60>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10c      	bne.n	800a712 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	b672      	cpsid	i
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	b662      	cpsie	i
 800a70c:	623b      	str	r3, [r7, #32]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <xQueueGenericCreateStatic+0x8a>
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <xQueueGenericCreateStatic+0x8e>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueGenericCreateStatic+0x90>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10c      	bne.n	800a742 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	b672      	cpsid	i
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	b662      	cpsie	i
 800a73c:	61fb      	str	r3, [r7, #28]
}
 800a73e:	bf00      	nop
 800a740:	e7fe      	b.n	800a740 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a742:	2348      	movs	r3, #72	; 0x48
 800a744:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b48      	cmp	r3, #72	; 0x48
 800a74a:	d00c      	beq.n	800a766 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	b672      	cpsid	i
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	b662      	cpsie	i
 800a760:	61bb      	str	r3, [r7, #24]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a766:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00d      	beq.n	800a78e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a77a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4613      	mov	r3, r2
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	68b9      	ldr	r1, [r7, #8]
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f847 	bl	800a81c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a790:	4618      	mov	r0, r3
 800a792:	3730      	adds	r7, #48	; 0x30
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	; 0x28
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10c      	bne.n	800a7c6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	613b      	str	r3, [r7, #16]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	61fb      	str	r3, [r7, #28]
 800a7d0:	e004      	b.n	800a7dc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	fb02 f303 	mul.w	r3, r2, r3
 800a7da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	3348      	adds	r3, #72	; 0x48
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f002 f947 	bl	800ca74 <pvPortMalloc>
 800a7e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d011      	beq.n	800a812 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	3348      	adds	r3, #72	; 0x48
 800a7f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a800:	79fa      	ldrb	r2, [r7, #7]
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4613      	mov	r3, r2
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f805 	bl	800a81c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a812:	69bb      	ldr	r3, [r7, #24]
	}
 800a814:	4618      	mov	r0, r3
 800a816:	3720      	adds	r7, #32
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d103      	bne.n	800a838 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	e002      	b.n	800a83e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a84a:	2101      	movs	r1, #1
 800a84c:	69b8      	ldr	r0, [r7, #24]
 800a84e:	f7ff feb7 	bl	800a5c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00e      	beq.n	800a886 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a87a:	2300      	movs	r3, #0
 800a87c:	2200      	movs	r2, #0
 800a87e:	2100      	movs	r1, #0
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f837 	bl	800a8f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b086      	sub	sp, #24
 800a892:	af00      	add	r7, sp, #0
 800a894:	4603      	mov	r3, r0
 800a896:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a898:	2301      	movs	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	2300      	movs	r3, #0
 800a89e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	6939      	ldr	r1, [r7, #16]
 800a8a6:	6978      	ldr	r0, [r7, #20]
 800a8a8:	f7ff ff76 	bl	800a798 <xQueueGenericCreate>
 800a8ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7ff ffd3 	bl	800a85a <prvInitialiseMutex>

		return xNewQueue;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
	}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b088      	sub	sp, #32
 800a8c2:	af02      	add	r7, sp, #8
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	6039      	str	r1, [r7, #0]
 800a8c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	6939      	ldr	r1, [r7, #16]
 800a8dc:	6978      	ldr	r0, [r7, #20]
 800a8de:	f7ff fed9 	bl	800a694 <xQueueGenericCreateStatic>
 800a8e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7ff ffb8 	bl	800a85a <prvInitialiseMutex>

		return xNewQueue;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
	}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08e      	sub	sp, #56	; 0x38
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a902:	2300      	movs	r3, #0
 800a904:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10c      	bne.n	800a92a <xQueueGenericSend+0x36>
	__asm volatile
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	b672      	cpsid	i
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	b662      	cpsie	i
 800a924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d103      	bne.n	800a938 <xQueueGenericSend+0x44>
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <xQueueGenericSend+0x48>
 800a938:	2301      	movs	r3, #1
 800a93a:	e000      	b.n	800a93e <xQueueGenericSend+0x4a>
 800a93c:	2300      	movs	r3, #0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10c      	bne.n	800a95c <xQueueGenericSend+0x68>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	b672      	cpsid	i
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	b662      	cpsie	i
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d103      	bne.n	800a96a <xQueueGenericSend+0x76>
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <xQueueGenericSend+0x7a>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <xQueueGenericSend+0x7c>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10c      	bne.n	800a98e <xQueueGenericSend+0x9a>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	b672      	cpsid	i
 800a97a:	f383 8811 	msr	BASEPRI, r3
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f3bf 8f4f 	dsb	sy
 800a986:	b662      	cpsie	i
 800a988:	623b      	str	r3, [r7, #32]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a98e:	f001 fbf5 	bl	800c17c <xTaskGetSchedulerState>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d102      	bne.n	800a99e <xQueueGenericSend+0xaa>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <xQueueGenericSend+0xae>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e000      	b.n	800a9a4 <xQueueGenericSend+0xb0>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10c      	bne.n	800a9c2 <xQueueGenericSend+0xce>
	__asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	b672      	cpsid	i
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	b662      	cpsie	i
 800a9bc:	61fb      	str	r3, [r7, #28]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9c2:	f001 ff2b 	bl	800c81c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d302      	bcc.n	800a9d8 <xQueueGenericSend+0xe4>
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d129      	bne.n	800aa2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	68b9      	ldr	r1, [r7, #8]
 800a9dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9de:	f000 fcc2 	bl	800b366 <prvCopyDataToQueue>
 800a9e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d010      	beq.n	800aa0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ee:	3324      	adds	r3, #36	; 0x24
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f001 f9ff 	bl	800bdf4 <xTaskRemoveFromEventList>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d013      	beq.n	800aa24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9fc:	4b3f      	ldr	r3, [pc, #252]	; (800aafc <xQueueGenericSend+0x208>)
 800a9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	e00a      	b.n	800aa24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d007      	beq.n	800aa24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa14:	4b39      	ldr	r3, [pc, #228]	; (800aafc <xQueueGenericSend+0x208>)
 800aa16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa24:	f001 ff2e 	bl	800c884 <vPortExitCritical>
				return pdPASS;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e063      	b.n	800aaf4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa32:	f001 ff27 	bl	800c884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	e05c      	b.n	800aaf4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa40:	f107 0314 	add.w	r3, r7, #20
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 fa39 	bl	800bebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa4e:	f001 ff19 	bl	800c884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa52:	f000 ffc3 	bl	800b9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa56:	f001 fee1 	bl	800c81c <vPortEnterCritical>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa60:	b25b      	sxtb	r3, r3
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d103      	bne.n	800aa70 <xQueueGenericSend+0x17c>
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa76:	b25b      	sxtb	r3, r3
 800aa78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7c:	d103      	bne.n	800aa86 <xQueueGenericSend+0x192>
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa86:	f001 fefd 	bl	800c884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa8a:	1d3a      	adds	r2, r7, #4
 800aa8c:	f107 0314 	add.w	r3, r7, #20
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 fa28 	bl	800bee8 <xTaskCheckForTimeOut>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d124      	bne.n	800aae8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa0:	f000 fd59 	bl	800b556 <prvIsQueueFull>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d018      	beq.n	800aadc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	3310      	adds	r3, #16
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 f978 	bl	800bda8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaba:	f000 fce4 	bl	800b486 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aabe:	f000 ff9b 	bl	800b9f8 <xTaskResumeAll>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f47f af7c 	bne.w	800a9c2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800aaca:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <xQueueGenericSend+0x208>)
 800aacc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	e772      	b.n	800a9c2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aadc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aade:	f000 fcd2 	bl	800b486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aae2:	f000 ff89 	bl	800b9f8 <xTaskResumeAll>
 800aae6:	e76c      	b.n	800a9c2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaea:	f000 fccc 	bl	800b486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaee:	f000 ff83 	bl	800b9f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aaf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3738      	adds	r7, #56	; 0x38
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08e      	sub	sp, #56	; 0x38
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
 800ab0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10c      	bne.n	800ab32 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	b672      	cpsid	i
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	b662      	cpsie	i
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <xQueueGenericSendFromISR+0x40>
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d101      	bne.n	800ab44 <xQueueGenericSendFromISR+0x44>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e000      	b.n	800ab46 <xQueueGenericSendFromISR+0x46>
 800ab44:	2300      	movs	r3, #0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10c      	bne.n	800ab64 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	b672      	cpsid	i
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	b662      	cpsie	i
 800ab5e:	623b      	str	r3, [r7, #32]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d103      	bne.n	800ab72 <xQueueGenericSendFromISR+0x72>
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d101      	bne.n	800ab76 <xQueueGenericSendFromISR+0x76>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e000      	b.n	800ab78 <xQueueGenericSendFromISR+0x78>
 800ab76:	2300      	movs	r3, #0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10c      	bne.n	800ab96 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab80:	b672      	cpsid	i
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	b662      	cpsie	i
 800ab90:	61fb      	str	r3, [r7, #28]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab96:	f001 ff29 	bl	800c9ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab9a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	b672      	cpsid	i
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	b662      	cpsie	i
 800abb2:	61ba      	str	r2, [r7, #24]
 800abb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d302      	bcc.n	800abcc <xQueueGenericSendFromISR+0xcc>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d12c      	bne.n	800ac26 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abdc:	f000 fbc3 	bl	800b366 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abe0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800abe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe8:	d112      	bne.n	800ac10 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d016      	beq.n	800ac20 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	3324      	adds	r3, #36	; 0x24
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 f8fc 	bl	800bdf4 <xTaskRemoveFromEventList>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00e      	beq.n	800ac20 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00b      	beq.n	800ac20 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	e007      	b.n	800ac20 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac14:	3301      	adds	r3, #1
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	b25a      	sxtb	r2, r3
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac20:	2301      	movs	r3, #1
 800ac22:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ac24:	e001      	b.n	800ac2a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	637b      	str	r3, [r7, #52]	; 0x34
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3738      	adds	r7, #56	; 0x38
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08e      	sub	sp, #56	; 0x38
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	b672      	cpsid	i
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	b662      	cpsie	i
 800ac68:	623b      	str	r3, [r7, #32]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00c      	beq.n	800ac90 <xQueueGiveFromISR+0x50>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	b672      	cpsid	i
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	b662      	cpsie	i
 800ac8a:	61fb      	str	r3, [r7, #28]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d103      	bne.n	800aca0 <xQueueGiveFromISR+0x60>
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <xQueueGiveFromISR+0x64>
 800aca0:	2301      	movs	r3, #1
 800aca2:	e000      	b.n	800aca6 <xQueueGiveFromISR+0x66>
 800aca4:	2300      	movs	r3, #0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10c      	bne.n	800acc4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	b672      	cpsid	i
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	b662      	cpsie	i
 800acbe:	61bb      	str	r3, [r7, #24]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acc4:	f001 fe92 	bl	800c9ec <vPortValidateInterruptPriority>
	__asm volatile
 800acc8:	f3ef 8211 	mrs	r2, BASEPRI
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	b672      	cpsid	i
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	b662      	cpsie	i
 800ace0:	617a      	str	r2, [r7, #20]
 800ace2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ace4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d22b      	bcs.n	800ad50 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d112      	bne.n	800ad3a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d016      	beq.n	800ad4a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	3324      	adds	r3, #36	; 0x24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 f867 	bl	800bdf4 <xTaskRemoveFromEventList>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00e      	beq.n	800ad4a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2201      	movs	r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	e007      	b.n	800ad4a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad3e:	3301      	adds	r3, #1
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	b25a      	sxtb	r2, r3
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad4e:	e001      	b.n	800ad54 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	637b      	str	r3, [r7, #52]	; 0x34
 800ad54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad56:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f383 8811 	msr	BASEPRI, r3
}
 800ad5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3738      	adds	r7, #56	; 0x38
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08c      	sub	sp, #48	; 0x30
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10c      	bne.n	800ada0 <xQueueReceive+0x34>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	b672      	cpsid	i
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	b662      	cpsie	i
 800ad9a:	623b      	str	r3, [r7, #32]
}
 800ad9c:	bf00      	nop
 800ad9e:	e7fe      	b.n	800ad9e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d103      	bne.n	800adae <xQueueReceive+0x42>
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <xQueueReceive+0x46>
 800adae:	2301      	movs	r3, #1
 800adb0:	e000      	b.n	800adb4 <xQueueReceive+0x48>
 800adb2:	2300      	movs	r3, #0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10c      	bne.n	800add2 <xQueueReceive+0x66>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	b672      	cpsid	i
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	b662      	cpsie	i
 800adcc:	61fb      	str	r3, [r7, #28]
}
 800adce:	bf00      	nop
 800add0:	e7fe      	b.n	800add0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800add2:	f001 f9d3 	bl	800c17c <xTaskGetSchedulerState>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <xQueueReceive+0x76>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <xQueueReceive+0x7a>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <xQueueReceive+0x7c>
 800ade6:	2300      	movs	r3, #0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10c      	bne.n	800ae06 <xQueueReceive+0x9a>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	b672      	cpsid	i
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	b662      	cpsie	i
 800ae00:	61bb      	str	r3, [r7, #24]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae06:	f001 fd09 	bl	800c81c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01f      	beq.n	800ae56 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae1a:	f000 fb0e 	bl	800b43a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	1e5a      	subs	r2, r3, #1
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00f      	beq.n	800ae4e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	3310      	adds	r3, #16
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 ffde 	bl	800bdf4 <xTaskRemoveFromEventList>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d007      	beq.n	800ae4e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae3e:	4b3d      	ldr	r3, [pc, #244]	; (800af34 <xQueueReceive+0x1c8>)
 800ae40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae4e:	f001 fd19 	bl	800c884 <vPortExitCritical>
				return pdPASS;
 800ae52:	2301      	movs	r3, #1
 800ae54:	e069      	b.n	800af2a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d103      	bne.n	800ae64 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae5c:	f001 fd12 	bl	800c884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae60:	2300      	movs	r3, #0
 800ae62:	e062      	b.n	800af2a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d106      	bne.n	800ae78 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae6a:	f107 0310 	add.w	r3, r7, #16
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 f824 	bl	800bebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae74:	2301      	movs	r3, #1
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae78:	f001 fd04 	bl	800c884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae7c:	f000 fdae 	bl	800b9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae80:	f001 fccc 	bl	800c81c <vPortEnterCritical>
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae90:	d103      	bne.n	800ae9a <xQueueReceive+0x12e>
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea0:	b25b      	sxtb	r3, r3
 800aea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea6:	d103      	bne.n	800aeb0 <xQueueReceive+0x144>
 800aea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb0:	f001 fce8 	bl	800c884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeb4:	1d3a      	adds	r2, r7, #4
 800aeb6:	f107 0310 	add.w	r3, r7, #16
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 f813 	bl	800bee8 <xTaskCheckForTimeOut>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d123      	bne.n	800af10 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeca:	f000 fb2e 	bl	800b52a <prvIsQueueEmpty>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d017      	beq.n	800af04 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	3324      	adds	r3, #36	; 0x24
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	4611      	mov	r1, r2
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 ff63 	bl	800bda8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee4:	f000 facf 	bl	800b486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aee8:	f000 fd86 	bl	800b9f8 <xTaskResumeAll>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d189      	bne.n	800ae06 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800aef2:	4b10      	ldr	r3, [pc, #64]	; (800af34 <xQueueReceive+0x1c8>)
 800aef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	e780      	b.n	800ae06 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800af04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af06:	f000 fabe 	bl	800b486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af0a:	f000 fd75 	bl	800b9f8 <xTaskResumeAll>
 800af0e:	e77a      	b.n	800ae06 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af12:	f000 fab8 	bl	800b486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af16:	f000 fd6f 	bl	800b9f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af1c:	f000 fb05 	bl	800b52a <prvIsQueueEmpty>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	f43f af6f 	beq.w	800ae06 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3730      	adds	r7, #48	; 0x30
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800af42:	2300      	movs	r3, #0
 800af44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10c      	bne.n	800af6e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	b672      	cpsid	i
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	b662      	cpsie	i
 800af68:	623b      	str	r3, [r7, #32]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00c      	beq.n	800af90 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	b672      	cpsid	i
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	b662      	cpsie	i
 800af8a:	61fb      	str	r3, [r7, #28]
}
 800af8c:	bf00      	nop
 800af8e:	e7fe      	b.n	800af8e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af90:	f001 f8f4 	bl	800c17c <xTaskGetSchedulerState>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d102      	bne.n	800afa0 <xQueueSemaphoreTake+0x68>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <xQueueSemaphoreTake+0x6c>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e000      	b.n	800afa6 <xQueueSemaphoreTake+0x6e>
 800afa4:	2300      	movs	r3, #0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10c      	bne.n	800afc4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	b672      	cpsid	i
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	b662      	cpsie	i
 800afbe:	61bb      	str	r3, [r7, #24]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afc4:	f001 fc2a 	bl	800c81c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afcc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d024      	beq.n	800b01e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	1e5a      	subs	r2, r3, #1
 800afd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afda:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d104      	bne.n	800afee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800afe4:	f001 fa90 	bl	800c508 <pvTaskIncrementMutexHeldCount>
 800afe8:	4602      	mov	r2, r0
 800afea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00f      	beq.n	800b016 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff8:	3310      	adds	r3, #16
 800affa:	4618      	mov	r0, r3
 800affc:	f000 fefa 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b006:	4b55      	ldr	r3, [pc, #340]	; (800b15c <xQueueSemaphoreTake+0x224>)
 800b008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b016:	f001 fc35 	bl	800c884 <vPortExitCritical>
				return pdPASS;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e099      	b.n	800b152 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d113      	bne.n	800b04c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00c      	beq.n	800b044 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	b672      	cpsid	i
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	b662      	cpsie	i
 800b03e:	617b      	str	r3, [r7, #20]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b044:	f001 fc1e 	bl	800c884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b048:	2300      	movs	r3, #0
 800b04a:	e082      	b.n	800b152 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b052:	f107 030c 	add.w	r3, r7, #12
 800b056:	4618      	mov	r0, r3
 800b058:	f000 ff30 	bl	800bebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b05c:	2301      	movs	r3, #1
 800b05e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b060:	f001 fc10 	bl	800c884 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b064:	f000 fcba 	bl	800b9dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b068:	f001 fbd8 	bl	800c81c <vPortEnterCritical>
 800b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b072:	b25b      	sxtb	r3, r3
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d103      	bne.n	800b082 <xQueueSemaphoreTake+0x14a>
 800b07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b088:	b25b      	sxtb	r3, r3
 800b08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08e:	d103      	bne.n	800b098 <xQueueSemaphoreTake+0x160>
 800b090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b092:	2200      	movs	r2, #0
 800b094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b098:	f001 fbf4 	bl	800c884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b09c:	463a      	mov	r2, r7
 800b09e:	f107 030c 	add.w	r3, r7, #12
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 ff1f 	bl	800bee8 <xTaskCheckForTimeOut>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d132      	bne.n	800b116 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0b2:	f000 fa3a 	bl	800b52a <prvIsQueueEmpty>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d026      	beq.n	800b10a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d109      	bne.n	800b0d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b0c4:	f001 fbaa 	bl	800c81c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 f873 	bl	800c1b8 <xTaskPriorityInherit>
 800b0d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b0d4:	f001 fbd6 	bl	800c884 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	3324      	adds	r3, #36	; 0x24
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	4611      	mov	r1, r2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fe61 	bl	800bda8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0e8:	f000 f9cd 	bl	800b486 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0ec:	f000 fc84 	bl	800b9f8 <xTaskResumeAll>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f47f af66 	bne.w	800afc4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b0f8:	4b18      	ldr	r3, [pc, #96]	; (800b15c <xQueueSemaphoreTake+0x224>)
 800b0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fe:	601a      	str	r2, [r3, #0]
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	e75c      	b.n	800afc4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b10a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b10c:	f000 f9bb 	bl	800b486 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b110:	f000 fc72 	bl	800b9f8 <xTaskResumeAll>
 800b114:	e756      	b.n	800afc4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b118:	f000 f9b5 	bl	800b486 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b11c:	f000 fc6c 	bl	800b9f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b122:	f000 fa02 	bl	800b52a <prvIsQueueEmpty>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f43f af4b 	beq.w	800afc4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00d      	beq.n	800b150 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b134:	f001 fb72 	bl	800c81c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b13a:	f000 f8fc 	bl	800b336 <prvGetDisinheritPriorityAfterTimeout>
 800b13e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b146:	4618      	mov	r0, r3
 800b148:	f001 f940 	bl	800c3cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b14c:	f001 fb9a 	bl	800c884 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b152:	4618      	mov	r0, r3
 800b154:	3738      	adds	r7, #56	; 0x38
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	e000ed04 	.word	0xe000ed04

0800b160 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	; 0x38
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10c      	bne.n	800b190 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	b672      	cpsid	i
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	b662      	cpsie	i
 800b18a:	623b      	str	r3, [r7, #32]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d103      	bne.n	800b19e <xQueueReceiveFromISR+0x3e>
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <xQueueReceiveFromISR+0x42>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e000      	b.n	800b1a4 <xQueueReceiveFromISR+0x44>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10c      	bne.n	800b1c2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ac:	b672      	cpsid	i
 800b1ae:	f383 8811 	msr	BASEPRI, r3
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	b662      	cpsie	i
 800b1bc:	61fb      	str	r3, [r7, #28]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1c2:	f001 fc13 	bl	800c9ec <vPortValidateInterruptPriority>
	__asm volatile
 800b1c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	b672      	cpsid	i
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	b662      	cpsie	i
 800b1de:	61ba      	str	r2, [r7, #24]
 800b1e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b1e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d02f      	beq.n	800b252 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b200:	f000 f91b 	bl	800b43a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	1e5a      	subs	r2, r3, #1
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b20c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b214:	d112      	bne.n	800b23c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d016      	beq.n	800b24c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	3310      	adds	r3, #16
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fde6 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00e      	beq.n	800b24c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00b      	beq.n	800b24c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	e007      	b.n	800b24c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b23c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b240:	3301      	adds	r3, #1
 800b242:	b2db      	uxtb	r3, r3
 800b244:	b25a      	sxtb	r2, r3
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b24c:	2301      	movs	r3, #1
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
 800b250:	e001      	b.n	800b256 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b252:	2300      	movs	r3, #0
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f383 8811 	msr	BASEPRI, r3
}
 800b260:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b264:	4618      	mov	r0, r3
 800b266:	3738      	adds	r7, #56	; 0x38
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10c      	bne.n	800b294 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	b672      	cpsid	i
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	b662      	cpsie	i
 800b28e:	60bb      	str	r3, [r7, #8]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800b294:	f001 fac2 	bl	800c81c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b29e:	f001 faf1 	bl	800c884 <vPortExitCritical>

	return uxReturn;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10c      	bne.n	800b2d8 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	b672      	cpsid	i
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	b662      	cpsie	i
 800b2d2:	60fb      	str	r3, [r7, #12]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2dc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b2de:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	371c      	adds	r7, #28
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10c      	bne.n	800b318 <vQueueDelete+0x2c>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	b672      	cpsid	i
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	b662      	cpsie	i
 800b312:	60bb      	str	r3, [r7, #8]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f935 	bl	800b588 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f001 fc6d 	bl	800cc08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b32e:	bf00      	nop
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b342:	2b00      	cmp	r3, #0
 800b344:	d006      	beq.n	800b354 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f1c3 0307 	rsb	r3, r3, #7
 800b350:	60fb      	str	r3, [r7, #12]
 800b352:	e001      	b.n	800b358 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b354:	2300      	movs	r3, #0
 800b356:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b358:	68fb      	ldr	r3, [r7, #12]
	}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10d      	bne.n	800b3a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d14d      	bne.n	800b428 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 ff91 	bl	800c2b8 <xTaskPriorityDisinherit>
 800b396:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	609a      	str	r2, [r3, #8]
 800b39e:	e043      	b.n	800b428 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d119      	bne.n	800b3da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6858      	ldr	r0, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	f010 f9a5 	bl	801b700 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3be:	441a      	add	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d32b      	bcc.n	800b428 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	605a      	str	r2, [r3, #4]
 800b3d8:	e026      	b.n	800b428 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	68d8      	ldr	r0, [r3, #12]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	68b9      	ldr	r1, [r7, #8]
 800b3e6:	f010 f98b 	bl	801b700 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	68da      	ldr	r2, [r3, #12]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	425b      	negs	r3, r3
 800b3f4:	441a      	add	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	68da      	ldr	r2, [r3, #12]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d207      	bcs.n	800b416 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	425b      	negs	r3, r3
 800b410:	441a      	add	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d105      	bne.n	800b428 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3b01      	subs	r3, #1
 800b426:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b430:	697b      	ldr	r3, [r7, #20]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b082      	sub	sp, #8
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d018      	beq.n	800b47e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	68da      	ldr	r2, [r3, #12]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b454:	441a      	add	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	429a      	cmp	r2, r3
 800b464:	d303      	bcc.n	800b46e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68d9      	ldr	r1, [r3, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b476:	461a      	mov	r2, r3
 800b478:	6838      	ldr	r0, [r7, #0]
 800b47a:	f010 f941 	bl	801b700 <memcpy>
	}
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b48e:	f001 f9c5 	bl	800c81c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b498:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b49a:	e011      	b.n	800b4c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d012      	beq.n	800b4ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	3324      	adds	r3, #36	; 0x24
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 fca3 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b4b4:	f000 fd7e 	bl	800bfb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	3b01      	subs	r3, #1
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	dce9      	bgt.n	800b49c <prvUnlockQueue+0x16>
 800b4c8:	e000      	b.n	800b4cc <prvUnlockQueue+0x46>
					break;
 800b4ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	22ff      	movs	r2, #255	; 0xff
 800b4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b4d4:	f001 f9d6 	bl	800c884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4d8:	f001 f9a0 	bl	800c81c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4e4:	e011      	b.n	800b50a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d012      	beq.n	800b514 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	3310      	adds	r3, #16
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 fc7e 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4fe:	f000 fd59 	bl	800bfb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	3b01      	subs	r3, #1
 800b506:	b2db      	uxtb	r3, r3
 800b508:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b50a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dce9      	bgt.n	800b4e6 <prvUnlockQueue+0x60>
 800b512:	e000      	b.n	800b516 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b514:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	22ff      	movs	r2, #255	; 0xff
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b51e:	f001 f9b1 	bl	800c884 <vPortExitCritical>
}
 800b522:	bf00      	nop
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b532:	f001 f973 	bl	800c81c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d102      	bne.n	800b544 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e001      	b.n	800b548 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b548:	f001 f99c 	bl	800c884 <vPortExitCritical>

	return xReturn;
 800b54c:	68fb      	ldr	r3, [r7, #12]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b55e:	f001 f95d 	bl	800c81c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d102      	bne.n	800b574 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b56e:	2301      	movs	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	e001      	b.n	800b578 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b578:	f001 f984 	bl	800c884 <vPortExitCritical>

	return xReturn;
 800b57c:	68fb      	ldr	r3, [r7, #12]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e016      	b.n	800b5c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b596:	4a10      	ldr	r2, [pc, #64]	; (800b5d8 <vQueueUnregisterQueue+0x50>)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	4413      	add	r3, r2
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d10b      	bne.n	800b5be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b5a6:	4a0c      	ldr	r2, [pc, #48]	; (800b5d8 <vQueueUnregisterQueue+0x50>)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b5b0:	4a09      	ldr	r2, [pc, #36]	; (800b5d8 <vQueueUnregisterQueue+0x50>)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	4413      	add	r3, r2
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	605a      	str	r2, [r3, #4]
				break;
 800b5bc:	e006      	b.n	800b5cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b07      	cmp	r3, #7
 800b5c8:	d9e5      	bls.n	800b596 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	200086fc 	.word	0x200086fc

0800b5dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08e      	sub	sp, #56	; 0x38
 800b5e0:	af04      	add	r7, sp, #16
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
 800b5e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d10c      	bne.n	800b60a <xTaskCreateStatic+0x2e>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	b672      	cpsid	i
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	b662      	cpsie	i
 800b604:	623b      	str	r3, [r7, #32]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10c      	bne.n	800b62a <xTaskCreateStatic+0x4e>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	b672      	cpsid	i
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	b662      	cpsie	i
 800b624:	61fb      	str	r3, [r7, #28]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b62a:	2354      	movs	r3, #84	; 0x54
 800b62c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b54      	cmp	r3, #84	; 0x54
 800b632:	d00c      	beq.n	800b64e <xTaskCreateStatic+0x72>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	b672      	cpsid	i
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	b662      	cpsie	i
 800b648:	61bb      	str	r3, [r7, #24]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b64e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d01e      	beq.n	800b694 <xTaskCreateStatic+0xb8>
 800b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d01b      	beq.n	800b694 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b664:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	2202      	movs	r2, #2
 800b66a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b66e:	2300      	movs	r3, #0
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	f107 0314 	add.w	r3, r7, #20
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	68b9      	ldr	r1, [r7, #8]
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 f850 	bl	800b72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b68e:	f000 f8d7 	bl	800b840 <prvAddNewTaskToReadyList>
 800b692:	e001      	b.n	800b698 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b694:	2300      	movs	r3, #0
 800b696:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b698:	697b      	ldr	r3, [r7, #20]
	}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3728      	adds	r7, #40	; 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b08c      	sub	sp, #48	; 0x30
 800b6a6:	af04      	add	r7, sp, #16
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f001 f9dc 	bl	800ca74 <pvPortMalloc>
 800b6bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00e      	beq.n	800b6e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6c4:	2054      	movs	r0, #84	; 0x54
 800b6c6:	f001 f9d5 	bl	800ca74 <pvPortMalloc>
 800b6ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	631a      	str	r2, [r3, #48]	; 0x30
 800b6d8:	e005      	b.n	800b6e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6da:	6978      	ldr	r0, [r7, #20]
 800b6dc:	f001 fa94 	bl	800cc08 <vPortFree>
 800b6e0:	e001      	b.n	800b6e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d017      	beq.n	800b71c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6f4:	88fa      	ldrh	r2, [r7, #6]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	9302      	str	r3, [sp, #8]
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68b9      	ldr	r1, [r7, #8]
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 f80e 	bl	800b72c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b710:	69f8      	ldr	r0, [r7, #28]
 800b712:	f000 f895 	bl	800b840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b716:	2301      	movs	r3, #1
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	e002      	b.n	800b722 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b71c:	f04f 33ff 	mov.w	r3, #4294967295
 800b720:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b722:	69bb      	ldr	r3, [r7, #24]
	}
 800b724:	4618      	mov	r0, r3
 800b726:	3720      	adds	r7, #32
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b088      	sub	sp, #32
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b744:	440b      	add	r3, r1
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	f023 0307 	bic.w	r3, r3, #7
 800b752:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00c      	beq.n	800b778 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	b672      	cpsid	i
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	b662      	cpsie	i
 800b772:	617b      	str	r3, [r7, #20]
}
 800b774:	bf00      	nop
 800b776:	e7fe      	b.n	800b776 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d01f      	beq.n	800b7be <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b77e:	2300      	movs	r3, #0
 800b780:	61fb      	str	r3, [r7, #28]
 800b782:	e012      	b.n	800b7aa <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	4413      	add	r3, r2
 800b78a:	7819      	ldrb	r1, [r3, #0]
 800b78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	4413      	add	r3, r2
 800b792:	3334      	adds	r3, #52	; 0x34
 800b794:	460a      	mov	r2, r1
 800b796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4413      	add	r3, r2
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	2b0f      	cmp	r3, #15
 800b7ae:	d9e9      	bls.n	800b784 <prvInitialiseNewTask+0x58>
 800b7b0:	e000      	b.n	800b7b4 <prvInitialiseNewTask+0x88>
			{
				break;
 800b7b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7bc:	e003      	b.n	800b7c6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	2b06      	cmp	r3, #6
 800b7ca:	d901      	bls.n	800b7d0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7cc:	2306      	movs	r3, #6
 800b7ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7de:	2200      	movs	r2, #0
 800b7e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe fe55 	bl	800a496 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ee:	3318      	adds	r3, #24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe fe50 	bl	800a496 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	f1c3 0207 	rsb	r2, r3, #7
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b80a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	2200      	movs	r2, #0
 800b810:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	68f9      	ldr	r1, [r7, #12]
 800b81e:	69b8      	ldr	r0, [r7, #24]
 800b820:	f000 feec 	bl	800c5fc <pxPortInitialiseStack>
 800b824:	4602      	mov	r2, r0
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b836:	bf00      	nop
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b848:	f000 ffe8 	bl	800c81c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b84c:	4b2a      	ldr	r3, [pc, #168]	; (800b8f8 <prvAddNewTaskToReadyList+0xb8>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	3301      	adds	r3, #1
 800b852:	4a29      	ldr	r2, [pc, #164]	; (800b8f8 <prvAddNewTaskToReadyList+0xb8>)
 800b854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b856:	4b29      	ldr	r3, [pc, #164]	; (800b8fc <prvAddNewTaskToReadyList+0xbc>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d109      	bne.n	800b872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b85e:	4a27      	ldr	r2, [pc, #156]	; (800b8fc <prvAddNewTaskToReadyList+0xbc>)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b864:	4b24      	ldr	r3, [pc, #144]	; (800b8f8 <prvAddNewTaskToReadyList+0xb8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d110      	bne.n	800b88e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b86c:	f000 fbc6 	bl	800bffc <prvInitialiseTaskLists>
 800b870:	e00d      	b.n	800b88e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b872:	4b23      	ldr	r3, [pc, #140]	; (800b900 <prvAddNewTaskToReadyList+0xc0>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d109      	bne.n	800b88e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b87a:	4b20      	ldr	r3, [pc, #128]	; (800b8fc <prvAddNewTaskToReadyList+0xbc>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	429a      	cmp	r2, r3
 800b886:	d802      	bhi.n	800b88e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b888:	4a1c      	ldr	r2, [pc, #112]	; (800b8fc <prvAddNewTaskToReadyList+0xbc>)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b88e:	4b1d      	ldr	r3, [pc, #116]	; (800b904 <prvAddNewTaskToReadyList+0xc4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3301      	adds	r3, #1
 800b894:	4a1b      	ldr	r2, [pc, #108]	; (800b904 <prvAddNewTaskToReadyList+0xc4>)
 800b896:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	2201      	movs	r2, #1
 800b89e:	409a      	lsls	r2, r3
 800b8a0:	4b19      	ldr	r3, [pc, #100]	; (800b908 <prvAddNewTaskToReadyList+0xc8>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	4a18      	ldr	r2, [pc, #96]	; (800b908 <prvAddNewTaskToReadyList+0xc8>)
 800b8a8:	6013      	str	r3, [r2, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4a15      	ldr	r2, [pc, #84]	; (800b90c <prvAddNewTaskToReadyList+0xcc>)
 800b8b8:	441a      	add	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	f7fe fdf5 	bl	800a4b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8c6:	f000 ffdd 	bl	800c884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <prvAddNewTaskToReadyList+0xc0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00e      	beq.n	800b8f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <prvAddNewTaskToReadyList+0xbc>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d207      	bcs.n	800b8f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8e0:	4b0b      	ldr	r3, [pc, #44]	; (800b910 <prvAddNewTaskToReadyList+0xd0>)
 800b8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20000e2c 	.word	0x20000e2c
 800b8fc:	20000d2c 	.word	0x20000d2c
 800b900:	20000e38 	.word	0x20000e38
 800b904:	20000e48 	.word	0x20000e48
 800b908:	20000e34 	.word	0x20000e34
 800b90c:	20000d30 	.word	0x20000d30
 800b910:	e000ed04 	.word	0xe000ed04

0800b914 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b91e:	2300      	movs	r3, #0
 800b920:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b922:	463a      	mov	r2, r7
 800b924:	1d39      	adds	r1, r7, #4
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f5 fbb4 	bl	8001098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	9202      	str	r2, [sp, #8]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	2300      	movs	r3, #0
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	2300      	movs	r3, #0
 800b940:	460a      	mov	r2, r1
 800b942:	4920      	ldr	r1, [pc, #128]	; (800b9c4 <vTaskStartScheduler+0xb0>)
 800b944:	4820      	ldr	r0, [pc, #128]	; (800b9c8 <vTaskStartScheduler+0xb4>)
 800b946:	f7ff fe49 	bl	800b5dc <xTaskCreateStatic>
 800b94a:	4603      	mov	r3, r0
 800b94c:	4a1f      	ldr	r2, [pc, #124]	; (800b9cc <vTaskStartScheduler+0xb8>)
 800b94e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b950:	4b1e      	ldr	r3, [pc, #120]	; (800b9cc <vTaskStartScheduler+0xb8>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b958:	2301      	movs	r3, #1
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	e001      	b.n	800b962 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b95e:	2300      	movs	r3, #0
 800b960:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d118      	bne.n	800b99a <vTaskStartScheduler+0x86>
	__asm volatile
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	b672      	cpsid	i
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	b662      	cpsie	i
 800b97c:	613b      	str	r3, [r7, #16]
}
 800b97e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b980:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <vTaskStartScheduler+0xbc>)
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b988:	4b12      	ldr	r3, [pc, #72]	; (800b9d4 <vTaskStartScheduler+0xc0>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b98e:	4b12      	ldr	r3, [pc, #72]	; (800b9d8 <vTaskStartScheduler+0xc4>)
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b994:	f000 fec4 	bl	800c720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b998:	e010      	b.n	800b9bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a0:	d10c      	bne.n	800b9bc <vTaskStartScheduler+0xa8>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	b672      	cpsid	i
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	b662      	cpsie	i
 800b9b6:	60fb      	str	r3, [r7, #12]
}
 800b9b8:	bf00      	nop
 800b9ba:	e7fe      	b.n	800b9ba <vTaskStartScheduler+0xa6>
}
 800b9bc:	bf00      	nop
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08024c40 	.word	0x08024c40
 800b9c8:	0800bfcd 	.word	0x0800bfcd
 800b9cc:	20000e50 	.word	0x20000e50
 800b9d0:	20000e4c 	.word	0x20000e4c
 800b9d4:	20000e38 	.word	0x20000e38
 800b9d8:	20000e30 	.word	0x20000e30

0800b9dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b9e0:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <vTaskSuspendAll+0x18>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	4a03      	ldr	r2, [pc, #12]	; (800b9f4 <vTaskSuspendAll+0x18>)
 800b9e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b9ea:	bf00      	nop
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20000e54 	.word	0x20000e54

0800b9f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba06:	4b42      	ldr	r3, [pc, #264]	; (800bb10 <xTaskResumeAll+0x118>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10c      	bne.n	800ba28 <xTaskResumeAll+0x30>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba12:	b672      	cpsid	i
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	b662      	cpsie	i
 800ba22:	603b      	str	r3, [r7, #0]
}
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba28:	f000 fef8 	bl	800c81c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba2c:	4b38      	ldr	r3, [pc, #224]	; (800bb10 <xTaskResumeAll+0x118>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	4a37      	ldr	r2, [pc, #220]	; (800bb10 <xTaskResumeAll+0x118>)
 800ba34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba36:	4b36      	ldr	r3, [pc, #216]	; (800bb10 <xTaskResumeAll+0x118>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d161      	bne.n	800bb02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba3e:	4b35      	ldr	r3, [pc, #212]	; (800bb14 <xTaskResumeAll+0x11c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d05d      	beq.n	800bb02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba46:	e02e      	b.n	800baa6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba48:	4b33      	ldr	r3, [pc, #204]	; (800bb18 <xTaskResumeAll+0x120>)
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3318      	adds	r3, #24
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe fd88 	bl	800a56a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe fd83 	bl	800a56a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	2201      	movs	r2, #1
 800ba6a:	409a      	lsls	r2, r3
 800ba6c:	4b2b      	ldr	r3, [pc, #172]	; (800bb1c <xTaskResumeAll+0x124>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	4a2a      	ldr	r2, [pc, #168]	; (800bb1c <xTaskResumeAll+0x124>)
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4a27      	ldr	r2, [pc, #156]	; (800bb20 <xTaskResumeAll+0x128>)
 800ba84:	441a      	add	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	f7fe fd0f 	bl	800a4b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <xTaskResumeAll+0x12c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d302      	bcc.n	800baa6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800baa0:	4b21      	ldr	r3, [pc, #132]	; (800bb28 <xTaskResumeAll+0x130>)
 800baa2:	2201      	movs	r2, #1
 800baa4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baa6:	4b1c      	ldr	r3, [pc, #112]	; (800bb18 <xTaskResumeAll+0x120>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1cc      	bne.n	800ba48 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bab4:	f000 fb42 	bl	800c13c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bab8:	4b1c      	ldr	r3, [pc, #112]	; (800bb2c <xTaskResumeAll+0x134>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d010      	beq.n	800bae6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bac4:	f000 f858 	bl	800bb78 <xTaskIncrementTick>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bace:	4b16      	ldr	r3, [pc, #88]	; (800bb28 <xTaskResumeAll+0x130>)
 800bad0:	2201      	movs	r2, #1
 800bad2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1f1      	bne.n	800bac4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800bae0:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <xTaskResumeAll+0x134>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bae6:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <xTaskResumeAll+0x130>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baee:	2301      	movs	r3, #1
 800baf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800baf2:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <xTaskResumeAll+0x138>)
 800baf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb02:	f000 febf 	bl	800c884 <vPortExitCritical>

	return xAlreadyYielded;
 800bb06:	68bb      	ldr	r3, [r7, #8]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20000e54 	.word	0x20000e54
 800bb14:	20000e2c 	.word	0x20000e2c
 800bb18:	20000dec 	.word	0x20000dec
 800bb1c:	20000e34 	.word	0x20000e34
 800bb20:	20000d30 	.word	0x20000d30
 800bb24:	20000d2c 	.word	0x20000d2c
 800bb28:	20000e40 	.word	0x20000e40
 800bb2c:	20000e3c 	.word	0x20000e3c
 800bb30:	e000ed04 	.word	0xe000ed04

0800bb34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb3a:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <xTaskGetTickCount+0x1c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb40:	687b      	ldr	r3, [r7, #4]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	20000e30 	.word	0x20000e30

0800bb54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb5a:	f000 ff47 	bl	800c9ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bb5e:	2300      	movs	r3, #0
 800bb60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bb62:	4b04      	ldr	r3, [pc, #16]	; (800bb74 <xTaskGetTickCountFromISR+0x20>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb68:	683b      	ldr	r3, [r7, #0]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	20000e30 	.word	0x20000e30

0800bb78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb82:	4b4f      	ldr	r3, [pc, #316]	; (800bcc0 <xTaskIncrementTick+0x148>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f040 808a 	bne.w	800bca0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb8c:	4b4d      	ldr	r3, [pc, #308]	; (800bcc4 <xTaskIncrementTick+0x14c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3301      	adds	r3, #1
 800bb92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb94:	4a4b      	ldr	r2, [pc, #300]	; (800bcc4 <xTaskIncrementTick+0x14c>)
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d122      	bne.n	800bbe6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800bba0:	4b49      	ldr	r3, [pc, #292]	; (800bcc8 <xTaskIncrementTick+0x150>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00c      	beq.n	800bbc4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	b672      	cpsid	i
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	b662      	cpsie	i
 800bbbe:	603b      	str	r3, [r7, #0]
}
 800bbc0:	bf00      	nop
 800bbc2:	e7fe      	b.n	800bbc2 <xTaskIncrementTick+0x4a>
 800bbc4:	4b40      	ldr	r3, [pc, #256]	; (800bcc8 <xTaskIncrementTick+0x150>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	4b40      	ldr	r3, [pc, #256]	; (800bccc <xTaskIncrementTick+0x154>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a3e      	ldr	r2, [pc, #248]	; (800bcc8 <xTaskIncrementTick+0x150>)
 800bbd0:	6013      	str	r3, [r2, #0]
 800bbd2:	4a3e      	ldr	r2, [pc, #248]	; (800bccc <xTaskIncrementTick+0x154>)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	4b3d      	ldr	r3, [pc, #244]	; (800bcd0 <xTaskIncrementTick+0x158>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	4a3c      	ldr	r2, [pc, #240]	; (800bcd0 <xTaskIncrementTick+0x158>)
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	f000 faab 	bl	800c13c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbe6:	4b3b      	ldr	r3, [pc, #236]	; (800bcd4 <xTaskIncrementTick+0x15c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d348      	bcc.n	800bc82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbf0:	4b35      	ldr	r3, [pc, #212]	; (800bcc8 <xTaskIncrementTick+0x150>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d104      	bne.n	800bc04 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbfa:	4b36      	ldr	r3, [pc, #216]	; (800bcd4 <xTaskIncrementTick+0x15c>)
 800bbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bc00:	601a      	str	r2, [r3, #0]
					break;
 800bc02:	e03e      	b.n	800bc82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc04:	4b30      	ldr	r3, [pc, #192]	; (800bcc8 <xTaskIncrementTick+0x150>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d203      	bcs.n	800bc24 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc1c:	4a2d      	ldr	r2, [pc, #180]	; (800bcd4 <xTaskIncrementTick+0x15c>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc22:	e02e      	b.n	800bc82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe fc9e 	bl	800a56a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	3318      	adds	r3, #24
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fc95 	bl	800a56a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	2201      	movs	r2, #1
 800bc46:	409a      	lsls	r2, r3
 800bc48:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <xTaskIncrementTick+0x160>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	4a22      	ldr	r2, [pc, #136]	; (800bcd8 <xTaskIncrementTick+0x160>)
 800bc50:	6013      	str	r3, [r2, #0]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc56:	4613      	mov	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4a1f      	ldr	r2, [pc, #124]	; (800bcdc <xTaskIncrementTick+0x164>)
 800bc60:	441a      	add	r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	3304      	adds	r3, #4
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f7fe fc21 	bl	800a4b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc72:	4b1b      	ldr	r3, [pc, #108]	; (800bce0 <xTaskIncrementTick+0x168>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d3b9      	bcc.n	800bbf0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc80:	e7b6      	b.n	800bbf0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc82:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <xTaskIncrementTick+0x168>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc88:	4914      	ldr	r1, [pc, #80]	; (800bcdc <xTaskIncrementTick+0x164>)
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	440b      	add	r3, r1
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d907      	bls.n	800bcaa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	617b      	str	r3, [r7, #20]
 800bc9e:	e004      	b.n	800bcaa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bca0:	4b10      	ldr	r3, [pc, #64]	; (800bce4 <xTaskIncrementTick+0x16c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3301      	adds	r3, #1
 800bca6:	4a0f      	ldr	r2, [pc, #60]	; (800bce4 <xTaskIncrementTick+0x16c>)
 800bca8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bcaa:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <xTaskIncrementTick+0x170>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bcb6:	697b      	ldr	r3, [r7, #20]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20000e54 	.word	0x20000e54
 800bcc4:	20000e30 	.word	0x20000e30
 800bcc8:	20000de4 	.word	0x20000de4
 800bccc:	20000de8 	.word	0x20000de8
 800bcd0:	20000e44 	.word	0x20000e44
 800bcd4:	20000e4c 	.word	0x20000e4c
 800bcd8:	20000e34 	.word	0x20000e34
 800bcdc:	20000d30 	.word	0x20000d30
 800bce0:	20000d2c 	.word	0x20000d2c
 800bce4:	20000e3c 	.word	0x20000e3c
 800bce8:	20000e40 	.word	0x20000e40

0800bcec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcf2:	4b28      	ldr	r3, [pc, #160]	; (800bd94 <vTaskSwitchContext+0xa8>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcfa:	4b27      	ldr	r3, [pc, #156]	; (800bd98 <vTaskSwitchContext+0xac>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd00:	e041      	b.n	800bd86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bd02:	4b25      	ldr	r3, [pc, #148]	; (800bd98 <vTaskSwitchContext+0xac>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd08:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <vTaskSwitchContext+0xb0>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	fab3 f383 	clz	r3, r3
 800bd14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bd16:	7afb      	ldrb	r3, [r7, #11]
 800bd18:	f1c3 031f 	rsb	r3, r3, #31
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	4920      	ldr	r1, [pc, #128]	; (800bda0 <vTaskSwitchContext+0xb4>)
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	4613      	mov	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	440b      	add	r3, r1
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10c      	bne.n	800bd4c <vTaskSwitchContext+0x60>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	b672      	cpsid	i
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	b662      	cpsie	i
 800bd46:	607b      	str	r3, [r7, #4]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <vTaskSwitchContext+0x5e>
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4a12      	ldr	r2, [pc, #72]	; (800bda0 <vTaskSwitchContext+0xb4>)
 800bd58:	4413      	add	r3, r2
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	685a      	ldr	r2, [r3, #4]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	605a      	str	r2, [r3, #4]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d104      	bne.n	800bd7c <vTaskSwitchContext+0x90>
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	605a      	str	r2, [r3, #4]
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	4a08      	ldr	r2, [pc, #32]	; (800bda4 <vTaskSwitchContext+0xb8>)
 800bd84:	6013      	str	r3, [r2, #0]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	20000e54 	.word	0x20000e54
 800bd98:	20000e40 	.word	0x20000e40
 800bd9c:	20000e34 	.word	0x20000e34
 800bda0:	20000d30 	.word	0x20000d30
 800bda4:	20000d2c 	.word	0x20000d2c

0800bda8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10c      	bne.n	800bdd2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	b672      	cpsid	i
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	b662      	cpsie	i
 800bdcc:	60fb      	str	r3, [r7, #12]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <vTaskPlaceOnEventList+0x48>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3318      	adds	r3, #24
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7fe fb8c 	bl	800a4f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bde0:	2101      	movs	r1, #1
 800bde2:	6838      	ldr	r0, [r7, #0]
 800bde4:	f000 fba4 	bl	800c530 <prvAddCurrentTaskToDelayedList>
}
 800bde8:	bf00      	nop
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20000d2c 	.word	0x20000d2c

0800bdf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10c      	bne.n	800be24 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	b672      	cpsid	i
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	b662      	cpsie	i
 800be1e:	60fb      	str	r3, [r7, #12]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	3318      	adds	r3, #24
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fb9e 	bl	800a56a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be2e:	4b1d      	ldr	r3, [pc, #116]	; (800bea4 <xTaskRemoveFromEventList+0xb0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d11c      	bne.n	800be70 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	3304      	adds	r3, #4
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fb95 	bl	800a56a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be44:	2201      	movs	r2, #1
 800be46:	409a      	lsls	r2, r3
 800be48:	4b17      	ldr	r3, [pc, #92]	; (800bea8 <xTaskRemoveFromEventList+0xb4>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4313      	orrs	r3, r2
 800be4e:	4a16      	ldr	r2, [pc, #88]	; (800bea8 <xTaskRemoveFromEventList+0xb4>)
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4a13      	ldr	r2, [pc, #76]	; (800beac <xTaskRemoveFromEventList+0xb8>)
 800be60:	441a      	add	r2, r3
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	3304      	adds	r3, #4
 800be66:	4619      	mov	r1, r3
 800be68:	4610      	mov	r0, r2
 800be6a:	f7fe fb21 	bl	800a4b0 <vListInsertEnd>
 800be6e:	e005      	b.n	800be7c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	3318      	adds	r3, #24
 800be74:	4619      	mov	r1, r3
 800be76:	480e      	ldr	r0, [pc, #56]	; (800beb0 <xTaskRemoveFromEventList+0xbc>)
 800be78:	f7fe fb1a 	bl	800a4b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be80:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <xTaskRemoveFromEventList+0xc0>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	429a      	cmp	r2, r3
 800be88:	d905      	bls.n	800be96 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be8a:	2301      	movs	r3, #1
 800be8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be8e:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <xTaskRemoveFromEventList+0xc4>)
 800be90:	2201      	movs	r2, #1
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	e001      	b.n	800be9a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800be96:	2300      	movs	r3, #0
 800be98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be9a:	697b      	ldr	r3, [r7, #20]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20000e54 	.word	0x20000e54
 800bea8:	20000e34 	.word	0x20000e34
 800beac:	20000d30 	.word	0x20000d30
 800beb0:	20000dec 	.word	0x20000dec
 800beb4:	20000d2c 	.word	0x20000d2c
 800beb8:	20000e40 	.word	0x20000e40

0800bebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bec4:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <vTaskInternalSetTimeOutState+0x24>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <vTaskInternalSetTimeOutState+0x28>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	605a      	str	r2, [r3, #4]
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	20000e44 	.word	0x20000e44
 800bee4:	20000e30 	.word	0x20000e30

0800bee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10c      	bne.n	800bf12 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	b672      	cpsid	i
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	b662      	cpsie	i
 800bf0c:	613b      	str	r3, [r7, #16]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10c      	bne.n	800bf32 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1c:	b672      	cpsid	i
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	b662      	cpsie	i
 800bf2c:	60fb      	str	r3, [r7, #12]
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bf32:	f000 fc73 	bl	800c81c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf36:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <xTaskCheckForTimeOut+0xc4>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	69ba      	ldr	r2, [r7, #24]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d102      	bne.n	800bf56 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61fb      	str	r3, [r7, #28]
 800bf54:	e023      	b.n	800bf9e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	4b15      	ldr	r3, [pc, #84]	; (800bfb0 <xTaskCheckForTimeOut+0xc8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d007      	beq.n	800bf72 <xTaskCheckForTimeOut+0x8a>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	69ba      	ldr	r2, [r7, #24]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d302      	bcc.n	800bf72 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	61fb      	str	r3, [r7, #28]
 800bf70:	e015      	b.n	800bf9e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d20b      	bcs.n	800bf94 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	1ad2      	subs	r2, r2, r3
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ff97 	bl	800bebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	e004      	b.n	800bf9e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2200      	movs	r2, #0
 800bf98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf9e:	f000 fc71 	bl	800c884 <vPortExitCritical>

	return xReturn;
 800bfa2:	69fb      	ldr	r3, [r7, #28]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3720      	adds	r7, #32
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20000e30 	.word	0x20000e30
 800bfb0:	20000e44 	.word	0x20000e44

0800bfb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfb8:	4b03      	ldr	r3, [pc, #12]	; (800bfc8 <vTaskMissedYield+0x14>)
 800bfba:	2201      	movs	r2, #1
 800bfbc:	601a      	str	r2, [r3, #0]
}
 800bfbe:	bf00      	nop
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	20000e40 	.word	0x20000e40

0800bfcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfd4:	f000 f852 	bl	800c07c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <prvIdleTask+0x28>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d9f9      	bls.n	800bfd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfe0:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <prvIdleTask+0x2c>)
 800bfe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bff0:	e7f0      	b.n	800bfd4 <prvIdleTask+0x8>
 800bff2:	bf00      	nop
 800bff4:	20000d30 	.word	0x20000d30
 800bff8:	e000ed04 	.word	0xe000ed04

0800bffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c002:	2300      	movs	r3, #0
 800c004:	607b      	str	r3, [r7, #4]
 800c006:	e00c      	b.n	800c022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4a12      	ldr	r2, [pc, #72]	; (800c05c <prvInitialiseTaskLists+0x60>)
 800c014:	4413      	add	r3, r2
 800c016:	4618      	mov	r0, r3
 800c018:	f7fe fa1d 	bl	800a456 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3301      	adds	r3, #1
 800c020:	607b      	str	r3, [r7, #4]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b06      	cmp	r3, #6
 800c026:	d9ef      	bls.n	800c008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c028:	480d      	ldr	r0, [pc, #52]	; (800c060 <prvInitialiseTaskLists+0x64>)
 800c02a:	f7fe fa14 	bl	800a456 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c02e:	480d      	ldr	r0, [pc, #52]	; (800c064 <prvInitialiseTaskLists+0x68>)
 800c030:	f7fe fa11 	bl	800a456 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c034:	480c      	ldr	r0, [pc, #48]	; (800c068 <prvInitialiseTaskLists+0x6c>)
 800c036:	f7fe fa0e 	bl	800a456 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c03a:	480c      	ldr	r0, [pc, #48]	; (800c06c <prvInitialiseTaskLists+0x70>)
 800c03c:	f7fe fa0b 	bl	800a456 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c040:	480b      	ldr	r0, [pc, #44]	; (800c070 <prvInitialiseTaskLists+0x74>)
 800c042:	f7fe fa08 	bl	800a456 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <prvInitialiseTaskLists+0x78>)
 800c048:	4a05      	ldr	r2, [pc, #20]	; (800c060 <prvInitialiseTaskLists+0x64>)
 800c04a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c04c:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <prvInitialiseTaskLists+0x7c>)
 800c04e:	4a05      	ldr	r2, [pc, #20]	; (800c064 <prvInitialiseTaskLists+0x68>)
 800c050:	601a      	str	r2, [r3, #0]
}
 800c052:	bf00      	nop
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20000d30 	.word	0x20000d30
 800c060:	20000dbc 	.word	0x20000dbc
 800c064:	20000dd0 	.word	0x20000dd0
 800c068:	20000dec 	.word	0x20000dec
 800c06c:	20000e00 	.word	0x20000e00
 800c070:	20000e18 	.word	0x20000e18
 800c074:	20000de4 	.word	0x20000de4
 800c078:	20000de8 	.word	0x20000de8

0800c07c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c082:	e019      	b.n	800c0b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c084:	f000 fbca 	bl	800c81c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c088:	4b10      	ldr	r3, [pc, #64]	; (800c0cc <prvCheckTasksWaitingTermination+0x50>)
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	3304      	adds	r3, #4
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe fa68 	bl	800a56a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c09a:	4b0d      	ldr	r3, [pc, #52]	; (800c0d0 <prvCheckTasksWaitingTermination+0x54>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	4a0b      	ldr	r2, [pc, #44]	; (800c0d0 <prvCheckTasksWaitingTermination+0x54>)
 800c0a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0a4:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <prvCheckTasksWaitingTermination+0x58>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	4a0a      	ldr	r2, [pc, #40]	; (800c0d4 <prvCheckTasksWaitingTermination+0x58>)
 800c0ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0ae:	f000 fbe9 	bl	800c884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f810 	bl	800c0d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0b8:	4b06      	ldr	r3, [pc, #24]	; (800c0d4 <prvCheckTasksWaitingTermination+0x58>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d1e1      	bne.n	800c084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20000e00 	.word	0x20000e00
 800c0d0:	20000e2c 	.word	0x20000e2c
 800c0d4:	20000e14 	.word	0x20000e14

0800c0d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d108      	bne.n	800c0fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 fd8a 	bl	800cc08 <vPortFree>
				vPortFree( pxTCB );
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fd87 	bl	800cc08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0fa:	e01a      	b.n	800c132 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c102:	2b01      	cmp	r3, #1
 800c104:	d103      	bne.n	800c10e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fd7e 	bl	800cc08 <vPortFree>
	}
 800c10c:	e011      	b.n	800c132 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c114:	2b02      	cmp	r3, #2
 800c116:	d00c      	beq.n	800c132 <prvDeleteTCB+0x5a>
	__asm volatile
 800c118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11c:	b672      	cpsid	i
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	b662      	cpsie	i
 800c12c:	60fb      	str	r3, [r7, #12]
}
 800c12e:	bf00      	nop
 800c130:	e7fe      	b.n	800c130 <prvDeleteTCB+0x58>
	}
 800c132:	bf00      	nop
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c142:	4b0c      	ldr	r3, [pc, #48]	; (800c174 <prvResetNextTaskUnblockTime+0x38>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d104      	bne.n	800c156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <prvResetNextTaskUnblockTime+0x3c>)
 800c14e:	f04f 32ff 	mov.w	r2, #4294967295
 800c152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c154:	e008      	b.n	800c168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c156:	4b07      	ldr	r3, [pc, #28]	; (800c174 <prvResetNextTaskUnblockTime+0x38>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4a04      	ldr	r2, [pc, #16]	; (800c178 <prvResetNextTaskUnblockTime+0x3c>)
 800c166:	6013      	str	r3, [r2, #0]
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	20000de4 	.word	0x20000de4
 800c178:	20000e4c 	.word	0x20000e4c

0800c17c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c182:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <xTaskGetSchedulerState+0x34>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d102      	bne.n	800c190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c18a:	2301      	movs	r3, #1
 800c18c:	607b      	str	r3, [r7, #4]
 800c18e:	e008      	b.n	800c1a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c190:	4b08      	ldr	r3, [pc, #32]	; (800c1b4 <xTaskGetSchedulerState+0x38>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d102      	bne.n	800c19e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c198:	2302      	movs	r3, #2
 800c19a:	607b      	str	r3, [r7, #4]
 800c19c:	e001      	b.n	800c1a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1a2:	687b      	ldr	r3, [r7, #4]
	}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20000e38 	.word	0x20000e38
 800c1b4:	20000e54 	.word	0x20000e54

0800c1b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d069      	beq.n	800c2a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d2:	4b36      	ldr	r3, [pc, #216]	; (800c2ac <xTaskPriorityInherit+0xf4>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d259      	bcs.n	800c290 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	db06      	blt.n	800c1f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e4:	4b31      	ldr	r3, [pc, #196]	; (800c2ac <xTaskPriorityInherit+0xf4>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	f1c3 0207 	rsb	r2, r3, #7
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	6959      	ldr	r1, [r3, #20]
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4a2b      	ldr	r2, [pc, #172]	; (800c2b0 <xTaskPriorityInherit+0xf8>)
 800c204:	4413      	add	r3, r2
 800c206:	4299      	cmp	r1, r3
 800c208:	d13a      	bne.n	800c280 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	3304      	adds	r3, #4
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe f9ab 	bl	800a56a <uxListRemove>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d115      	bne.n	800c246 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21e:	4924      	ldr	r1, [pc, #144]	; (800c2b0 <xTaskPriorityInherit+0xf8>)
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10a      	bne.n	800c246 <xTaskPriorityInherit+0x8e>
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c234:	2201      	movs	r2, #1
 800c236:	fa02 f303 	lsl.w	r3, r2, r3
 800c23a:	43da      	mvns	r2, r3
 800c23c:	4b1d      	ldr	r3, [pc, #116]	; (800c2b4 <xTaskPriorityInherit+0xfc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4013      	ands	r3, r2
 800c242:	4a1c      	ldr	r2, [pc, #112]	; (800c2b4 <xTaskPriorityInherit+0xfc>)
 800c244:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c246:	4b19      	ldr	r3, [pc, #100]	; (800c2ac <xTaskPriorityInherit+0xf4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	2201      	movs	r2, #1
 800c256:	409a      	lsls	r2, r3
 800c258:	4b16      	ldr	r3, [pc, #88]	; (800c2b4 <xTaskPriorityInherit+0xfc>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	4a15      	ldr	r2, [pc, #84]	; (800c2b4 <xTaskPriorityInherit+0xfc>)
 800c260:	6013      	str	r3, [r2, #0]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c266:	4613      	mov	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4a10      	ldr	r2, [pc, #64]	; (800c2b0 <xTaskPriorityInherit+0xf8>)
 800c270:	441a      	add	r2, r3
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	3304      	adds	r3, #4
 800c276:	4619      	mov	r1, r3
 800c278:	4610      	mov	r0, r2
 800c27a:	f7fe f919 	bl	800a4b0 <vListInsertEnd>
 800c27e:	e004      	b.n	800c28a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <xTaskPriorityInherit+0xf4>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c28a:	2301      	movs	r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	e008      	b.n	800c2a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <xTaskPriorityInherit+0xf4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d201      	bcs.n	800c2a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20000d2c 	.word	0x20000d2c
 800c2b0:	20000d30 	.word	0x20000d30
 800c2b4:	20000e34 	.word	0x20000e34

0800c2b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d072      	beq.n	800c3b4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ce:	4b3c      	ldr	r3, [pc, #240]	; (800c3c0 <xTaskPriorityDisinherit+0x108>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	693a      	ldr	r2, [r7, #16]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d00c      	beq.n	800c2f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2dc:	b672      	cpsid	i
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	b662      	cpsie	i
 800c2ec:	60fb      	str	r3, [r7, #12]
}
 800c2ee:	bf00      	nop
 800c2f0:	e7fe      	b.n	800c2f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10c      	bne.n	800c314 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	b672      	cpsid	i
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	b662      	cpsie	i
 800c30e:	60bb      	str	r3, [r7, #8]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c318:	1e5a      	subs	r2, r3, #1
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c326:	429a      	cmp	r2, r3
 800c328:	d044      	beq.n	800c3b4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d140      	bne.n	800c3b4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	3304      	adds	r3, #4
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe f917 	bl	800a56a <uxListRemove>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d115      	bne.n	800c36e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c346:	491f      	ldr	r1, [pc, #124]	; (800c3c4 <xTaskPriorityDisinherit+0x10c>)
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	440b      	add	r3, r1
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10a      	bne.n	800c36e <xTaskPriorityDisinherit+0xb6>
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35c:	2201      	movs	r2, #1
 800c35e:	fa02 f303 	lsl.w	r3, r2, r3
 800c362:	43da      	mvns	r2, r3
 800c364:	4b18      	ldr	r3, [pc, #96]	; (800c3c8 <xTaskPriorityDisinherit+0x110>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4013      	ands	r3, r2
 800c36a:	4a17      	ldr	r2, [pc, #92]	; (800c3c8 <xTaskPriorityDisinherit+0x110>)
 800c36c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37a:	f1c3 0207 	rsb	r2, r3, #7
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c386:	2201      	movs	r2, #1
 800c388:	409a      	lsls	r2, r3
 800c38a:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <xTaskPriorityDisinherit+0x110>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4313      	orrs	r3, r2
 800c390:	4a0d      	ldr	r2, [pc, #52]	; (800c3c8 <xTaskPriorityDisinherit+0x110>)
 800c392:	6013      	str	r3, [r2, #0]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4a08      	ldr	r2, [pc, #32]	; (800c3c4 <xTaskPriorityDisinherit+0x10c>)
 800c3a2:	441a      	add	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	f7fe f880 	bl	800a4b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3b4:	697b      	ldr	r3, [r7, #20]
	}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20000d2c 	.word	0x20000d2c
 800c3c4:	20000d30 	.word	0x20000d30
 800c3c8:	20000e34 	.word	0x20000e34

0800c3cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 8087 	beq.w	800c4f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10c      	bne.n	800c408 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	b672      	cpsid	i
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	b662      	cpsie	i
 800c402:	60fb      	str	r3, [r7, #12]
}
 800c404:	bf00      	nop
 800c406:	e7fe      	b.n	800c406 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c40c:	683a      	ldr	r2, [r7, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d902      	bls.n	800c418 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	61fb      	str	r3, [r7, #28]
 800c416:	e002      	b.n	800c41e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c422:	69fa      	ldr	r2, [r7, #28]
 800c424:	429a      	cmp	r2, r3
 800c426:	d065      	beq.n	800c4f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c42c:	697a      	ldr	r2, [r7, #20]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d160      	bne.n	800c4f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c432:	4b32      	ldr	r3, [pc, #200]	; (800c4fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69ba      	ldr	r2, [r7, #24]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d10c      	bne.n	800c456 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	b672      	cpsid	i
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	b662      	cpsie	i
 800c450:	60bb      	str	r3, [r7, #8]
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	69fa      	ldr	r2, [r7, #28]
 800c460:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	2b00      	cmp	r3, #0
 800c468:	db04      	blt.n	800c474 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c46a:	69fb      	ldr	r3, [r7, #28]
 800c46c:	f1c3 0207 	rsb	r2, r3, #7
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	6959      	ldr	r1, [r3, #20]
 800c478:	693a      	ldr	r2, [r7, #16]
 800c47a:	4613      	mov	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	4413      	add	r3, r2
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4a1f      	ldr	r2, [pc, #124]	; (800c500 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c484:	4413      	add	r3, r2
 800c486:	4299      	cmp	r1, r3
 800c488:	d134      	bne.n	800c4f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f86b 	bl	800a56a <uxListRemove>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d115      	bne.n	800c4c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c49e:	4918      	ldr	r1, [pc, #96]	; (800c500 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	43da      	mvns	r2, r3
 800c4bc:	4b11      	ldr	r3, [pc, #68]	; (800c504 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	4a10      	ldr	r2, [pc, #64]	; (800c504 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c4c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	409a      	lsls	r2, r3
 800c4ce:	4b0d      	ldr	r3, [pc, #52]	; (800c504 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	4a0b      	ldr	r2, [pc, #44]	; (800c504 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4dc:	4613      	mov	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4a06      	ldr	r2, [pc, #24]	; (800c500 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c4e6:	441a      	add	r2, r3
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	f7fd ffde 	bl	800a4b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4f4:	bf00      	nop
 800c4f6:	3720      	adds	r7, #32
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20000d2c 	.word	0x20000d2c
 800c500:	20000d30 	.word	0x20000d30
 800c504:	20000e34 	.word	0x20000e34

0800c508 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c50c:	4b07      	ldr	r3, [pc, #28]	; (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c51a:	3201      	adds	r2, #1
 800c51c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c51e:	4b03      	ldr	r3, [pc, #12]	; (800c52c <pvTaskIncrementMutexHeldCount+0x24>)
 800c520:	681b      	ldr	r3, [r3, #0]
	}
 800c522:	4618      	mov	r0, r3
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	20000d2c 	.word	0x20000d2c

0800c530 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c53a:	4b29      	ldr	r3, [pc, #164]	; (800c5e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c540:	4b28      	ldr	r3, [pc, #160]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3304      	adds	r3, #4
 800c546:	4618      	mov	r0, r3
 800c548:	f7fe f80f 	bl	800a56a <uxListRemove>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10b      	bne.n	800c56a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c552:	4b24      	ldr	r3, [pc, #144]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c558:	2201      	movs	r2, #1
 800c55a:	fa02 f303 	lsl.w	r3, r2, r3
 800c55e:	43da      	mvns	r2, r3
 800c560:	4b21      	ldr	r3, [pc, #132]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4013      	ands	r3, r2
 800c566:	4a20      	ldr	r2, [pc, #128]	; (800c5e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c568:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c570:	d10a      	bne.n	800c588 <prvAddCurrentTaskToDelayedList+0x58>
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d007      	beq.n	800c588 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c578:	4b1a      	ldr	r3, [pc, #104]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	481a      	ldr	r0, [pc, #104]	; (800c5ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800c582:	f7fd ff95 	bl	800a4b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c586:	e026      	b.n	800c5d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4413      	add	r3, r2
 800c58e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c590:	4b14      	ldr	r3, [pc, #80]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d209      	bcs.n	800c5b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5a0:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3304      	adds	r3, #4
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	f7fd ffa3 	bl	800a4f8 <vListInsert>
}
 800c5b2:	e010      	b.n	800c5d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b4:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3304      	adds	r3, #4
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f7fd ff99 	bl	800a4f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d202      	bcs.n	800c5d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5d0:	4a09      	ldr	r2, [pc, #36]	; (800c5f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	6013      	str	r3, [r2, #0]
}
 800c5d6:	bf00      	nop
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20000e30 	.word	0x20000e30
 800c5e4:	20000d2c 	.word	0x20000d2c
 800c5e8:	20000e34 	.word	0x20000e34
 800c5ec:	20000e18 	.word	0x20000e18
 800c5f0:	20000de8 	.word	0x20000de8
 800c5f4:	20000de4 	.word	0x20000de4
 800c5f8:	20000e4c 	.word	0x20000e4c

0800c5fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3b04      	subs	r3, #4
 800c60c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3b04      	subs	r3, #4
 800c61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f023 0201 	bic.w	r2, r3, #1
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3b04      	subs	r3, #4
 800c62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c62c:	4a0c      	ldr	r2, [pc, #48]	; (800c660 <pxPortInitialiseStack+0x64>)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3b14      	subs	r3, #20
 800c636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3b04      	subs	r3, #4
 800c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f06f 0202 	mvn.w	r2, #2
 800c64a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	3b20      	subs	r3, #32
 800c650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c652:	68fb      	ldr	r3, [r7, #12]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	0800c665 	.word	0x0800c665

0800c664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c66e:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <prvTaskExitError+0x5c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c676:	d00c      	beq.n	800c692 <prvTaskExitError+0x2e>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67c:	b672      	cpsid	i
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	b662      	cpsie	i
 800c68c:	60fb      	str	r3, [r7, #12]
}
 800c68e:	bf00      	nop
 800c690:	e7fe      	b.n	800c690 <prvTaskExitError+0x2c>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	b672      	cpsid	i
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	b662      	cpsie	i
 800c6a6:	60bb      	str	r3, [r7, #8]
}
 800c6a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6aa:	bf00      	nop
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0fc      	beq.n	800c6ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6b2:	bf00      	nop
 800c6b4:	bf00      	nop
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	20000028 	.word	0x20000028
	...

0800c6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <pxCurrentTCBConst2>)
 800c6d2:	6819      	ldr	r1, [r3, #0]
 800c6d4:	6808      	ldr	r0, [r1, #0]
 800c6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6da:	f380 8809 	msr	PSP, r0
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f04f 0000 	mov.w	r0, #0
 800c6e6:	f380 8811 	msr	BASEPRI, r0
 800c6ea:	4770      	bx	lr
 800c6ec:	f3af 8000 	nop.w

0800c6f0 <pxCurrentTCBConst2>:
 800c6f0:	20000d2c 	.word	0x20000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop

0800c6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6f8:	4808      	ldr	r0, [pc, #32]	; (800c71c <prvPortStartFirstTask+0x24>)
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	6800      	ldr	r0, [r0, #0]
 800c6fe:	f380 8808 	msr	MSP, r0
 800c702:	f04f 0000 	mov.w	r0, #0
 800c706:	f380 8814 	msr	CONTROL, r0
 800c70a:	b662      	cpsie	i
 800c70c:	b661      	cpsie	f
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	df00      	svc	0
 800c718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c71a:	bf00      	nop
 800c71c:	e000ed08 	.word	0xe000ed08

0800c720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c726:	4b37      	ldr	r3, [pc, #220]	; (800c804 <xPortStartScheduler+0xe4>)
 800c728:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	22ff      	movs	r2, #255	; 0xff
 800c736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	4b2f      	ldr	r3, [pc, #188]	; (800c808 <xPortStartScheduler+0xe8>)
 800c74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c74e:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <xPortStartScheduler+0xec>)
 800c750:	2207      	movs	r2, #7
 800c752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c754:	e009      	b.n	800c76a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c756:	4b2d      	ldr	r3, [pc, #180]	; (800c80c <xPortStartScheduler+0xec>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3b01      	subs	r3, #1
 800c75c:	4a2b      	ldr	r2, [pc, #172]	; (800c80c <xPortStartScheduler+0xec>)
 800c75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c760:	78fb      	ldrb	r3, [r7, #3]
 800c762:	b2db      	uxtb	r3, r3
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c772:	2b80      	cmp	r3, #128	; 0x80
 800c774:	d0ef      	beq.n	800c756 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c776:	4b25      	ldr	r3, [pc, #148]	; (800c80c <xPortStartScheduler+0xec>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f1c3 0307 	rsb	r3, r3, #7
 800c77e:	2b04      	cmp	r3, #4
 800c780:	d00c      	beq.n	800c79c <xPortStartScheduler+0x7c>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	b672      	cpsid	i
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	b662      	cpsie	i
 800c796:	60bb      	str	r3, [r7, #8]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c79c:	4b1b      	ldr	r3, [pc, #108]	; (800c80c <xPortStartScheduler+0xec>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	4a1a      	ldr	r2, [pc, #104]	; (800c80c <xPortStartScheduler+0xec>)
 800c7a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7a6:	4b19      	ldr	r3, [pc, #100]	; (800c80c <xPortStartScheduler+0xec>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7ae:	4a17      	ldr	r2, [pc, #92]	; (800c80c <xPortStartScheduler+0xec>)
 800c7b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7ba:	4b15      	ldr	r3, [pc, #84]	; (800c810 <xPortStartScheduler+0xf0>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a14      	ldr	r2, [pc, #80]	; (800c810 <xPortStartScheduler+0xf0>)
 800c7c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7c6:	4b12      	ldr	r3, [pc, #72]	; (800c810 <xPortStartScheduler+0xf0>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a11      	ldr	r2, [pc, #68]	; (800c810 <xPortStartScheduler+0xf0>)
 800c7cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7d2:	f000 f8dd 	bl	800c990 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7d6:	4b0f      	ldr	r3, [pc, #60]	; (800c814 <xPortStartScheduler+0xf4>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7dc:	f000 f8fc 	bl	800c9d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7e0:	4b0d      	ldr	r3, [pc, #52]	; (800c818 <xPortStartScheduler+0xf8>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a0c      	ldr	r2, [pc, #48]	; (800c818 <xPortStartScheduler+0xf8>)
 800c7e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7ec:	f7ff ff84 	bl	800c6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7f0:	f7ff fa7c 	bl	800bcec <vTaskSwitchContext>
	prvTaskExitError();
 800c7f4:	f7ff ff36 	bl	800c664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	e000e400 	.word	0xe000e400
 800c808:	20000e58 	.word	0x20000e58
 800c80c:	20000e5c 	.word	0x20000e5c
 800c810:	e000ed20 	.word	0xe000ed20
 800c814:	20000028 	.word	0x20000028
 800c818:	e000ef34 	.word	0xe000ef34

0800c81c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	b672      	cpsid	i
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	b662      	cpsie	i
 800c836:	607b      	str	r3, [r7, #4]
}
 800c838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c83a:	4b10      	ldr	r3, [pc, #64]	; (800c87c <vPortEnterCritical+0x60>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	3301      	adds	r3, #1
 800c840:	4a0e      	ldr	r2, [pc, #56]	; (800c87c <vPortEnterCritical+0x60>)
 800c842:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c844:	4b0d      	ldr	r3, [pc, #52]	; (800c87c <vPortEnterCritical+0x60>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d111      	bne.n	800c870 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c84c:	4b0c      	ldr	r3, [pc, #48]	; (800c880 <vPortEnterCritical+0x64>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00c      	beq.n	800c870 <vPortEnterCritical+0x54>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	b672      	cpsid	i
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	b662      	cpsie	i
 800c86a:	603b      	str	r3, [r7, #0]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <vPortEnterCritical+0x52>
	}
}
 800c870:	bf00      	nop
 800c872:	370c      	adds	r7, #12
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	20000028 	.word	0x20000028
 800c880:	e000ed04 	.word	0xe000ed04

0800c884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c88a:	4b13      	ldr	r3, [pc, #76]	; (800c8d8 <vPortExitCritical+0x54>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10c      	bne.n	800c8ac <vPortExitCritical+0x28>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	b672      	cpsid	i
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	b662      	cpsie	i
 800c8a6:	607b      	str	r3, [r7, #4]
}
 800c8a8:	bf00      	nop
 800c8aa:	e7fe      	b.n	800c8aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <vPortExitCritical+0x54>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	4a09      	ldr	r2, [pc, #36]	; (800c8d8 <vPortExitCritical+0x54>)
 800c8b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8b6:	4b08      	ldr	r3, [pc, #32]	; (800c8d8 <vPortExitCritical+0x54>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d105      	bne.n	800c8ca <vPortExitCritical+0x46>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	f383 8811 	msr	BASEPRI, r3
}
 800c8c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8ca:	bf00      	nop
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	20000028 	.word	0x20000028
 800c8dc:	00000000 	.word	0x00000000

0800c8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8e0:	f3ef 8009 	mrs	r0, PSP
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	4b15      	ldr	r3, [pc, #84]	; (800c940 <pxCurrentTCBConst>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	f01e 0f10 	tst.w	lr, #16
 800c8f0:	bf08      	it	eq
 800c8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	6010      	str	r0, [r2, #0]
 800c8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c904:	b672      	cpsid	i
 800c906:	f380 8811 	msr	BASEPRI, r0
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	b662      	cpsie	i
 800c914:	f7ff f9ea 	bl	800bcec <vTaskSwitchContext>
 800c918:	f04f 0000 	mov.w	r0, #0
 800c91c:	f380 8811 	msr	BASEPRI, r0
 800c920:	bc09      	pop	{r0, r3}
 800c922:	6819      	ldr	r1, [r3, #0]
 800c924:	6808      	ldr	r0, [r1, #0]
 800c926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	f01e 0f10 	tst.w	lr, #16
 800c92e:	bf08      	it	eq
 800c930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c934:	f380 8809 	msr	PSP, r0
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop

0800c940 <pxCurrentTCBConst>:
 800c940:	20000d2c 	.word	0x20000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c944:	bf00      	nop
 800c946:	bf00      	nop

0800c948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	b672      	cpsid	i
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	b662      	cpsie	i
 800c962:	607b      	str	r3, [r7, #4]
}
 800c964:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c966:	f7ff f907 	bl	800bb78 <xTaskIncrementTick>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d003      	beq.n	800c978 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c970:	4b06      	ldr	r3, [pc, #24]	; (800c98c <SysTick_Handler+0x44>)
 800c972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c976:	601a      	str	r2, [r3, #0]
 800c978:	2300      	movs	r3, #0
 800c97a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	f383 8811 	msr	BASEPRI, r3
}
 800c982:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c984:	bf00      	nop
 800c986:	3708      	adds	r7, #8
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	e000ed04 	.word	0xe000ed04

0800c990 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c990:	b480      	push	{r7}
 800c992:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c994:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <vPortSetupTimerInterrupt+0x34>)
 800c996:	2200      	movs	r2, #0
 800c998:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c99a:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <vPortSetupTimerInterrupt+0x38>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <vPortSetupTimerInterrupt+0x3c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a0a      	ldr	r2, [pc, #40]	; (800c9d0 <vPortSetupTimerInterrupt+0x40>)
 800c9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9aa:	099b      	lsrs	r3, r3, #6
 800c9ac:	4a09      	ldr	r2, [pc, #36]	; (800c9d4 <vPortSetupTimerInterrupt+0x44>)
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9b2:	4b04      	ldr	r3, [pc, #16]	; (800c9c4 <vPortSetupTimerInterrupt+0x34>)
 800c9b4:	2207      	movs	r2, #7
 800c9b6:	601a      	str	r2, [r3, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	e000e010 	.word	0xe000e010
 800c9c8:	e000e018 	.word	0xe000e018
 800c9cc:	2000001c 	.word	0x2000001c
 800c9d0:	10624dd3 	.word	0x10624dd3
 800c9d4:	e000e014 	.word	0xe000e014

0800c9d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9e8 <vPortEnableVFP+0x10>
 800c9dc:	6801      	ldr	r1, [r0, #0]
 800c9de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9e2:	6001      	str	r1, [r0, #0]
 800c9e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9e6:	bf00      	nop
 800c9e8:	e000ed88 	.word	0xe000ed88

0800c9ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9f2:	f3ef 8305 	mrs	r3, IPSR
 800c9f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b0f      	cmp	r3, #15
 800c9fc:	d916      	bls.n	800ca2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9fe:	4a19      	ldr	r2, [pc, #100]	; (800ca64 <vPortValidateInterruptPriority+0x78>)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4413      	add	r3, r2
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca08:	4b17      	ldr	r3, [pc, #92]	; (800ca68 <vPortValidateInterruptPriority+0x7c>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	7afa      	ldrb	r2, [r7, #11]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d20c      	bcs.n	800ca2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca16:	b672      	cpsid	i
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	b662      	cpsie	i
 800ca26:	607b      	str	r3, [r7, #4]
}
 800ca28:	bf00      	nop
 800ca2a:	e7fe      	b.n	800ca2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca2c:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <vPortValidateInterruptPriority+0x80>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca34:	4b0e      	ldr	r3, [pc, #56]	; (800ca70 <vPortValidateInterruptPriority+0x84>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d90c      	bls.n	800ca56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	b672      	cpsid	i
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	b662      	cpsie	i
 800ca50:	603b      	str	r3, [r7, #0]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <vPortValidateInterruptPriority+0x68>
	}
 800ca56:	bf00      	nop
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	e000e3f0 	.word	0xe000e3f0
 800ca68:	20000e58 	.word	0x20000e58
 800ca6c:	e000ed0c 	.word	0xe000ed0c
 800ca70:	20000e5c 	.word	0x20000e5c

0800ca74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08a      	sub	sp, #40	; 0x28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca80:	f7fe ffac 	bl	800b9dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca84:	4b5b      	ldr	r3, [pc, #364]	; (800cbf4 <pvPortMalloc+0x180>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca8c:	f000 f91a 	bl	800ccc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca90:	4b59      	ldr	r3, [pc, #356]	; (800cbf8 <pvPortMalloc+0x184>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4013      	ands	r3, r2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f040 8092 	bne.w	800cbc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d01f      	beq.n	800cae4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800caa4:	2208      	movs	r2, #8
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4413      	add	r3, r2
 800caaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d016      	beq.n	800cae4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f023 0307 	bic.w	r3, r3, #7
 800cabc:	3308      	adds	r3, #8
 800cabe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00c      	beq.n	800cae4 <pvPortMalloc+0x70>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	617b      	str	r3, [r7, #20]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d06b      	beq.n	800cbc2 <pvPortMalloc+0x14e>
 800caea:	4b44      	ldr	r3, [pc, #272]	; (800cbfc <pvPortMalloc+0x188>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d866      	bhi.n	800cbc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caf4:	4b42      	ldr	r3, [pc, #264]	; (800cc00 <pvPortMalloc+0x18c>)
 800caf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caf8:	4b41      	ldr	r3, [pc, #260]	; (800cc00 <pvPortMalloc+0x18c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cafe:	e004      	b.n	800cb0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d903      	bls.n	800cb1c <pvPortMalloc+0xa8>
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1f1      	bne.n	800cb00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb1c:	4b35      	ldr	r3, [pc, #212]	; (800cbf4 <pvPortMalloc+0x180>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d04d      	beq.n	800cbc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2208      	movs	r2, #8
 800cb2c:	4413      	add	r3, r2
 800cb2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	2308      	movs	r3, #8
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d921      	bls.n	800cb8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	f003 0307 	and.w	r3, r3, #7
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00c      	beq.n	800cb74 <pvPortMalloc+0x100>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	b672      	cpsid	i
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	b662      	cpsie	i
 800cb6e:	613b      	str	r3, [r7, #16]
}
 800cb70:	bf00      	nop
 800cb72:	e7fe      	b.n	800cb72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	1ad2      	subs	r2, r2, r3
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb86:	69b8      	ldr	r0, [r7, #24]
 800cb88:	f000 f8fe 	bl	800cd88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb8c:	4b1b      	ldr	r3, [pc, #108]	; (800cbfc <pvPortMalloc+0x188>)
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	4a19      	ldr	r2, [pc, #100]	; (800cbfc <pvPortMalloc+0x188>)
 800cb98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb9a:	4b18      	ldr	r3, [pc, #96]	; (800cbfc <pvPortMalloc+0x188>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	4b19      	ldr	r3, [pc, #100]	; (800cc04 <pvPortMalloc+0x190>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d203      	bcs.n	800cbae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cba6:	4b15      	ldr	r3, [pc, #84]	; (800cbfc <pvPortMalloc+0x188>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a16      	ldr	r2, [pc, #88]	; (800cc04 <pvPortMalloc+0x190>)
 800cbac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	4b11      	ldr	r3, [pc, #68]	; (800cbf8 <pvPortMalloc+0x184>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbc2:	f7fe ff19 	bl	800b9f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	f003 0307 	and.w	r3, r3, #7
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00c      	beq.n	800cbea <pvPortMalloc+0x176>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	b672      	cpsid	i
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	b662      	cpsie	i
 800cbe4:	60fb      	str	r3, [r7, #12]
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <pvPortMalloc+0x174>
	return pvReturn;
 800cbea:	69fb      	ldr	r3, [r7, #28]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3728      	adds	r7, #40	; 0x28
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	20004a68 	.word	0x20004a68
 800cbf8:	20004a74 	.word	0x20004a74
 800cbfc:	20004a6c 	.word	0x20004a6c
 800cc00:	20004a60 	.word	0x20004a60
 800cc04:	20004a70 	.word	0x20004a70

0800cc08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d04c      	beq.n	800ccb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc1a:	2308      	movs	r3, #8
 800cc1c:	425b      	negs	r3, r3
 800cc1e:	697a      	ldr	r2, [r7, #20]
 800cc20:	4413      	add	r3, r2
 800cc22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	4b23      	ldr	r3, [pc, #140]	; (800ccbc <vPortFree+0xb4>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4013      	ands	r3, r2
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10c      	bne.n	800cc50 <vPortFree+0x48>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	b672      	cpsid	i
 800cc3c:	f383 8811 	msr	BASEPRI, r3
 800cc40:	f3bf 8f6f 	isb	sy
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	b662      	cpsie	i
 800cc4a:	60fb      	str	r3, [r7, #12]
}
 800cc4c:	bf00      	nop
 800cc4e:	e7fe      	b.n	800cc4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00c      	beq.n	800cc72 <vPortFree+0x6a>
	__asm volatile
 800cc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5c:	b672      	cpsid	i
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	b662      	cpsie	i
 800cc6c:	60bb      	str	r3, [r7, #8]
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	4b11      	ldr	r3, [pc, #68]	; (800ccbc <vPortFree+0xb4>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d019      	beq.n	800ccb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d115      	bne.n	800ccb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	4b0b      	ldr	r3, [pc, #44]	; (800ccbc <vPortFree+0xb4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	43db      	mvns	r3, r3
 800cc92:	401a      	ands	r2, r3
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc98:	f7fe fea0 	bl	800b9dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	4b07      	ldr	r3, [pc, #28]	; (800ccc0 <vPortFree+0xb8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4413      	add	r3, r2
 800cca6:	4a06      	ldr	r2, [pc, #24]	; (800ccc0 <vPortFree+0xb8>)
 800cca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f000 f86c 	bl	800cd88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ccb0:	f7fe fea2 	bl	800b9f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccb4:	bf00      	nop
 800ccb6:	3718      	adds	r7, #24
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	20004a74 	.word	0x20004a74
 800ccc0:	20004a6c 	.word	0x20004a6c

0800ccc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ccce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ccd0:	4b27      	ldr	r3, [pc, #156]	; (800cd70 <prvHeapInit+0xac>)
 800ccd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3307      	adds	r3, #7
 800cce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0307 	bic.w	r3, r3, #7
 800ccea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	4a1f      	ldr	r2, [pc, #124]	; (800cd70 <prvHeapInit+0xac>)
 800ccf4:	4413      	add	r3, r2
 800ccf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccfc:	4a1d      	ldr	r2, [pc, #116]	; (800cd74 <prvHeapInit+0xb0>)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd02:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <prvHeapInit+0xb0>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd10:	2208      	movs	r2, #8
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	1a9b      	subs	r3, r3, r2
 800cd16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f023 0307 	bic.w	r3, r3, #7
 800cd1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	4a15      	ldr	r2, [pc, #84]	; (800cd78 <prvHeapInit+0xb4>)
 800cd24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd26:	4b14      	ldr	r3, [pc, #80]	; (800cd78 <prvHeapInit+0xb4>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd2e:	4b12      	ldr	r3, [pc, #72]	; (800cd78 <prvHeapInit+0xb4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	1ad2      	subs	r2, r2, r3
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd44:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <prvHeapInit+0xb4>)
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	4a0a      	ldr	r2, [pc, #40]	; (800cd7c <prvHeapInit+0xb8>)
 800cd52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4a09      	ldr	r2, [pc, #36]	; (800cd80 <prvHeapInit+0xbc>)
 800cd5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd5c:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <prvHeapInit+0xc0>)
 800cd5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd62:	601a      	str	r2, [r3, #0]
}
 800cd64:	bf00      	nop
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	20000e60 	.word	0x20000e60
 800cd74:	20004a60 	.word	0x20004a60
 800cd78:	20004a68 	.word	0x20004a68
 800cd7c:	20004a70 	.word	0x20004a70
 800cd80:	20004a6c 	.word	0x20004a6c
 800cd84:	20004a74 	.word	0x20004a74

0800cd88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b085      	sub	sp, #20
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd90:	4b28      	ldr	r3, [pc, #160]	; (800ce34 <prvInsertBlockIntoFreeList+0xac>)
 800cd92:	60fb      	str	r3, [r7, #12]
 800cd94:	e002      	b.n	800cd9c <prvInsertBlockIntoFreeList+0x14>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	60fb      	str	r3, [r7, #12]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d8f7      	bhi.n	800cd96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d108      	bne.n	800cdca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	685a      	ldr	r2, [r3, #4]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	441a      	add	r2, r3
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	441a      	add	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d118      	bne.n	800ce10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	4b15      	ldr	r3, [pc, #84]	; (800ce38 <prvInsertBlockIntoFreeList+0xb0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d00d      	beq.n	800ce06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	441a      	add	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	e008      	b.n	800ce18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce06:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <prvInsertBlockIntoFreeList+0xb0>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	601a      	str	r2, [r3, #0]
 800ce0e:	e003      	b.n	800ce18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d002      	beq.n	800ce26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce26:	bf00      	nop
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20004a60 	.word	0x20004a60
 800ce38:	20004a68 	.word	0x20004a68

0800ce3c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	330c      	adds	r3, #12
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 ffa3 	bl	800ed9c <tcpip_send_msg_wait_sem>
 800ce56:	4603      	mov	r3, r0
 800ce58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ce5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d103      	bne.n	800ce6a <netconn_apimsg+0x2e>
    return apimsg->err;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ce68:	e001      	b.n	800ce6e <netconn_apimsg+0x32>
  }
  return err;
 800ce6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08c      	sub	sp, #48	; 0x30
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	603a      	str	r2, [r7, #0]
 800ce82:	71fb      	strb	r3, [r7, #7]
 800ce84:	460b      	mov	r3, r1
 800ce86:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f000 feff 	bl	800dc90 <netconn_alloc>
 800ce92:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d054      	beq.n	800cf44 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ce9a:	79bb      	ldrb	r3, [r7, #6]
 800ce9c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cea2:	f107 0308 	add.w	r3, r7, #8
 800cea6:	4619      	mov	r1, r3
 800cea8:	4829      	ldr	r0, [pc, #164]	; (800cf50 <netconn_new_with_proto_and_callback+0xd8>)
 800ceaa:	f7ff ffc7 	bl	800ce3c <netconn_apimsg>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ceb4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d043      	beq.n	800cf44 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <netconn_new_with_proto_and_callback+0x58>
 800cec4:	4b23      	ldr	r3, [pc, #140]	; (800cf54 <netconn_new_with_proto_and_callback+0xdc>)
 800cec6:	22a3      	movs	r2, #163	; 0xa3
 800cec8:	4923      	ldr	r1, [pc, #140]	; (800cf58 <netconn_new_with_proto_and_callback+0xe0>)
 800ceca:	4824      	ldr	r0, [pc, #144]	; (800cf5c <netconn_new_with_proto_and_callback+0xe4>)
 800cecc:	f00e fec6 	bl	801bc5c <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	3310      	adds	r3, #16
 800ced4:	4618      	mov	r0, r3
 800ced6:	f00e f9ae 	bl	801b236 <sys_mbox_valid>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d105      	bne.n	800ceec <netconn_new_with_proto_and_callback+0x74>
 800cee0:	4b1c      	ldr	r3, [pc, #112]	; (800cf54 <netconn_new_with_proto_and_callback+0xdc>)
 800cee2:	22a4      	movs	r2, #164	; 0xa4
 800cee4:	491e      	ldr	r1, [pc, #120]	; (800cf60 <netconn_new_with_proto_and_callback+0xe8>)
 800cee6:	481d      	ldr	r0, [pc, #116]	; (800cf5c <netconn_new_with_proto_and_callback+0xe4>)
 800cee8:	f00e feb8 	bl	801bc5c <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ceec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceee:	3314      	adds	r3, #20
 800cef0:	4618      	mov	r0, r3
 800cef2:	f00e f9a0 	bl	801b236 <sys_mbox_valid>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d005      	beq.n	800cf08 <netconn_new_with_proto_and_callback+0x90>
 800cefc:	4b15      	ldr	r3, [pc, #84]	; (800cf54 <netconn_new_with_proto_and_callback+0xdc>)
 800cefe:	22a6      	movs	r2, #166	; 0xa6
 800cf00:	4918      	ldr	r1, [pc, #96]	; (800cf64 <netconn_new_with_proto_and_callback+0xec>)
 800cf02:	4816      	ldr	r0, [pc, #88]	; (800cf5c <netconn_new_with_proto_and_callback+0xe4>)
 800cf04:	f00e feaa 	bl	801bc5c <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	330c      	adds	r3, #12
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f00e fa23 	bl	801b358 <sys_sem_valid>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d105      	bne.n	800cf24 <netconn_new_with_proto_and_callback+0xac>
 800cf18:	4b0e      	ldr	r3, [pc, #56]	; (800cf54 <netconn_new_with_proto_and_callback+0xdc>)
 800cf1a:	22a9      	movs	r2, #169	; 0xa9
 800cf1c:	4912      	ldr	r1, [pc, #72]	; (800cf68 <netconn_new_with_proto_and_callback+0xf0>)
 800cf1e:	480f      	ldr	r0, [pc, #60]	; (800cf5c <netconn_new_with_proto_and_callback+0xe4>)
 800cf20:	f00e fe9c 	bl	801bc5c <printf>
      sys_sem_free(&conn->op_completed);
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	330c      	adds	r3, #12
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f00e fa08 	bl	801b33e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf30:	3310      	adds	r3, #16
 800cf32:	4618      	mov	r0, r3
 800cf34:	f00e f8f8 	bl	801b128 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cf38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf3a:	2007      	movs	r0, #7
 800cf3c:	f003 fcaa 	bl	8010894 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cf40:	2300      	movs	r3, #0
 800cf42:	e000      	b.n	800cf46 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3730      	adds	r7, #48	; 0x30
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	0800dc65 	.word	0x0800dc65
 800cf54:	08024c48 	.word	0x08024c48
 800cf58:	08024c7c 	.word	0x08024c7c
 800cf5c:	08024ca0 	.word	0x08024ca0
 800cf60:	08024cc8 	.word	0x08024cc8
 800cf64:	08024ce0 	.word	0x08024ce0
 800cf68:	08024d04 	.word	0x08024d04

0800cf6c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08c      	sub	sp, #48	; 0x30
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e014      	b.n	800cfa8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cf82:	2329      	movs	r3, #41	; 0x29
 800cf84:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800cf86:	f107 030c 	add.w	r3, r7, #12
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4808      	ldr	r0, [pc, #32]	; (800cfb0 <netconn_prepare_delete+0x44>)
 800cf8e:	f7ff ff55 	bl	800ce3c <netconn_apimsg>
 800cf92:	4603      	mov	r3, r0
 800cf94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800cf98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <netconn_prepare_delete+0x3a>
    return err;
 800cfa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cfa4:	e000      	b.n	800cfa8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3730      	adds	r7, #48	; 0x30
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	0800e1c9 	.word	0x0800e1c9

0800cfb4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d101      	bne.n	800cfc6 <netconn_delete+0x12>
    return ERR_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	e00d      	b.n	800cfe2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff ffd0 	bl	800cf6c <netconn_prepare_delete>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800cfd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d102      	bne.n	800cfde <netconn_delete+0x2a>
    netconn_free(conn);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fec7 	bl	800dd6c <netconn_free>
  }
  return err;
 800cfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08e      	sub	sp, #56	; 0x38
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d109      	bne.n	800d014 <netconn_bind+0x28>
 800d000:	4b11      	ldr	r3, [pc, #68]	; (800d048 <netconn_bind+0x5c>)
 800d002:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d006:	4911      	ldr	r1, [pc, #68]	; (800d04c <netconn_bind+0x60>)
 800d008:	4811      	ldr	r0, [pc, #68]	; (800d050 <netconn_bind+0x64>)
 800d00a:	f00e fe27 	bl	801bc5c <printf>
 800d00e:	f06f 030f 	mvn.w	r3, #15
 800d012:	e015      	b.n	800d040 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800d01a:	4b0e      	ldr	r3, [pc, #56]	; (800d054 <netconn_bind+0x68>)
 800d01c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d02a:	f107 0314 	add.w	r3, r7, #20
 800d02e:	4619      	mov	r1, r3
 800d030:	4809      	ldr	r0, [pc, #36]	; (800d058 <netconn_bind+0x6c>)
 800d032:	f7ff ff03 	bl	800ce3c <netconn_apimsg>
 800d036:	4603      	mov	r3, r0
 800d038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800d03c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d040:	4618      	mov	r0, r3
 800d042:	3738      	adds	r7, #56	; 0x38
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	08024c48 	.word	0x08024c48
 800d04c:	08024d80 	.word	0x08024d80
 800d050:	08024ca0 	.word	0x08024ca0
 800d054:	08029188 	.word	0x08029188
 800d058:	0800e391 	.word	0x0800e391

0800d05c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	4613      	mov	r3, r2
 800d068:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d109      	bne.n	800d088 <netconn_recv_data+0x2c>
 800d074:	4b58      	ldr	r3, [pc, #352]	; (800d1d8 <netconn_recv_data+0x17c>)
 800d076:	f44f 7212 	mov.w	r2, #584	; 0x248
 800d07a:	4958      	ldr	r1, [pc, #352]	; (800d1dc <netconn_recv_data+0x180>)
 800d07c:	4858      	ldr	r0, [pc, #352]	; (800d1e0 <netconn_recv_data+0x184>)
 800d07e:	f00e fded 	bl	801bc5c <printf>
 800d082:	f06f 030f 	mvn.w	r3, #15
 800d086:	e0a2      	b.n	800d1ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d109      	bne.n	800d0a8 <netconn_recv_data+0x4c>
 800d094:	4b50      	ldr	r3, [pc, #320]	; (800d1d8 <netconn_recv_data+0x17c>)
 800d096:	f240 224a 	movw	r2, #586	; 0x24a
 800d09a:	4952      	ldr	r1, [pc, #328]	; (800d1e4 <netconn_recv_data+0x188>)
 800d09c:	4850      	ldr	r0, [pc, #320]	; (800d1e0 <netconn_recv_data+0x184>)
 800d09e:	f00e fddd 	bl	801bc5c <printf>
 800d0a2:	f06f 030f 	mvn.w	r3, #15
 800d0a6:	e092      	b.n	800d1ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3310      	adds	r3, #16
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f00e f8c2 	bl	801b236 <sys_mbox_valid>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10e      	bne.n	800d0d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f000 fa23 	bl	800d504 <netconn_err>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800d0c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800d0ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d0ce:	e07e      	b.n	800d1ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800d0d0:	f06f 030a 	mvn.w	r3, #10
 800d0d4:	e07b      	b.n	800d1ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	7f1b      	ldrb	r3, [r3, #28]
 800d0da:	f003 0302 	and.w	r3, r3, #2
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10f      	bne.n	800d102 <netconn_recv_data+0xa6>
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	f003 0304 	and.w	r3, r3, #4
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	7f1b      	ldrb	r3, [r3, #28]
 800d0f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d104      	bne.n	800d102 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d023      	beq.n	800d14a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3310      	adds	r3, #16
 800d106:	f107 0218 	add.w	r2, r7, #24
 800d10a:	4611      	mov	r1, r2
 800d10c:	4618      	mov	r0, r3
 800d10e:	f00e f876 	bl	801b1fe <sys_arch_mbox_tryfetch>
 800d112:	4603      	mov	r3, r0
 800d114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d118:	d11f      	bne.n	800d15a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f000 f9f2 	bl	800d504 <netconn_err>
 800d120:	4603      	mov	r3, r0
 800d122:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800d124:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800d12c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d130:	e04d      	b.n	800d1ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	7f1b      	ldrb	r3, [r3, #28]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800d13e:	f06f 030a 	mvn.w	r3, #10
 800d142:	e044      	b.n	800d1ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800d144:	f06f 0306 	mvn.w	r3, #6
 800d148:	e041      	b.n	800d1ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3310      	adds	r3, #16
 800d14e:	f107 0118 	add.w	r1, r7, #24
 800d152:	2200      	movs	r2, #0
 800d154:	4618      	mov	r0, r3
 800d156:	f00e f813 	bl	801b180 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d162:	2b10      	cmp	r3, #16
 800d164:	d117      	bne.n	800d196 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	f107 0217 	add.w	r2, r7, #23
 800d16c:	4611      	mov	r1, r2
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 fa1a 	bl	800d5a8 <lwip_netconn_is_err_msg>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d009      	beq.n	800d18e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800d17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d17e:	f113 0f0f 	cmn.w	r3, #15
 800d182:	d101      	bne.n	800d188 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	e022      	b.n	800d1ce <netconn_recv_data+0x172>
      }
      return err;
 800d188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d18c:	e01f      	b.n	800d1ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	891b      	ldrh	r3, [r3, #8]
 800d192:	83fb      	strh	r3, [r7, #30]
 800d194:	e00d      	b.n	800d1b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d106      	bne.n	800d1aa <netconn_recv_data+0x14e>
 800d19c:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <netconn_recv_data+0x17c>)
 800d19e:	f240 2291 	movw	r2, #657	; 0x291
 800d1a2:	4911      	ldr	r1, [pc, #68]	; (800d1e8 <netconn_recv_data+0x18c>)
 800d1a4:	480e      	ldr	r0, [pc, #56]	; (800d1e0 <netconn_recv_data+0x184>)
 800d1a6:	f00e fd59 	bl	801bc5c <printf>
    len = netbuf_len((struct netbuf *)buf);
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	891b      	ldrh	r3, [r3, #8]
 800d1b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d005      	beq.n	800d1c6 <netconn_recv_data+0x16a>
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1be:	8bfa      	ldrh	r2, [r7, #30]
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d1c6:	69ba      	ldr	r2, [r7, #24]
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3720      	adds	r7, #32
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	08024c48 	.word	0x08024c48
 800d1dc:	08024e60 	.word	0x08024e60
 800d1e0:	08024ca0 	.word	0x08024ca0
 800d1e4:	08024e80 	.word	0x08024e80
 800d1e8:	08024e9c 	.word	0x08024e9c

0800d1ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d005      	beq.n	800d20a <netconn_tcp_recvd_msg+0x1e>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d206:	2b10      	cmp	r3, #16
 800d208:	d009      	beq.n	800d21e <netconn_tcp_recvd_msg+0x32>
 800d20a:	4b0c      	ldr	r3, [pc, #48]	; (800d23c <netconn_tcp_recvd_msg+0x50>)
 800d20c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800d210:	490b      	ldr	r1, [pc, #44]	; (800d240 <netconn_tcp_recvd_msg+0x54>)
 800d212:	480c      	ldr	r0, [pc, #48]	; (800d244 <netconn_tcp_recvd_msg+0x58>)
 800d214:	f00e fd22 	bl	801bc5c <printf>
 800d218:	f06f 030f 	mvn.w	r3, #15
 800d21c:	e00a      	b.n	800d234 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	4806      	ldr	r0, [pc, #24]	; (800d248 <netconn_tcp_recvd_msg+0x5c>)
 800d22e:	f7ff fe05 	bl	800ce3c <netconn_apimsg>
 800d232:	4603      	mov	r3, r0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	08024c48 	.word	0x08024c48
 800d240:	08024ea8 	.word	0x08024ea8
 800d244:	08024ca0 	.word	0x08024ca0
 800d248:	0800e49f 	.word	0x0800e49f

0800d24c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b090      	sub	sp, #64	; 0x40
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	3310      	adds	r3, #16
 800d25e:	4618      	mov	r0, r3
 800d260:	f00d ffe9 	bl	801b236 <sys_mbox_valid>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d102      	bne.n	800d270 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800d26a:	f06f 030a 	mvn.w	r3, #10
 800d26e:	e06d      	b.n	800d34c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	7f1b      	ldrb	r3, [r3, #28]
 800d274:	b25b      	sxtb	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	da07      	bge.n	800d28a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	7f1b      	ldrb	r3, [r3, #28]
 800d27e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d282:	b2da      	uxtb	r2, r3
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800d288:	e039      	b.n	800d2fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d28a:	79fb      	ldrb	r3, [r7, #7]
 800d28c:	461a      	mov	r2, r3
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7ff fee3 	bl	800d05c <netconn_recv_data>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800d29c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800d2a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2a8:	e050      	b.n	800d34c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10e      	bne.n	800d2d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <netconn_recv_data_tcp+0x7a>
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	891b      	ldrh	r3, [r3, #8]
 800d2c4:	e000      	b.n	800d2c8 <netconn_recv_data_tcp+0x7c>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800d2ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d2cc:	f107 0214 	add.w	r2, r7, #20
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff ff8a 	bl	800d1ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d134      	bne.n	800d348 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d009      	beq.n	800d2fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	7f1b      	ldrb	r3, [r3, #28]
 800d2ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2f0:	b2da      	uxtb	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800d2f6:	f06f 0306 	mvn.w	r3, #6
 800d2fa:	e027      	b.n	800d34c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800d2fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <netconn_recv_data_tcp+0xc6>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30a:	2200      	movs	r2, #0
 800d30c:	2101      	movs	r1, #1
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10f      	bne.n	800d33a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f000 f8f2 	bl	800d504 <netconn_err>
 800d320:	4603      	mov	r3, r0
 800d322:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800d326:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <netconn_recv_data_tcp+0xe8>
          return err;
 800d32e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d332:	e00b      	b.n	800d34c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d334:	f06f 030d 	mvn.w	r3, #13
 800d338:	e008      	b.n	800d34c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d33a:	2101      	movs	r1, #1
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 f8b1 	bl	800d4a4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d342:	f06f 030e 	mvn.w	r3, #14
 800d346:	e001      	b.n	800d34c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d348:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3740      	adds	r7, #64	; 0x40
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d109      	bne.n	800d37c <netconn_recv+0x28>
 800d368:	4b32      	ldr	r3, [pc, #200]	; (800d434 <netconn_recv+0xe0>)
 800d36a:	f240 3263 	movw	r2, #867	; 0x363
 800d36e:	4932      	ldr	r1, [pc, #200]	; (800d438 <netconn_recv+0xe4>)
 800d370:	4832      	ldr	r0, [pc, #200]	; (800d43c <netconn_recv+0xe8>)
 800d372:	f00e fc73 	bl	801bc5c <printf>
 800d376:	f06f 030f 	mvn.w	r3, #15
 800d37a:	e056      	b.n	800d42a <netconn_recv+0xd6>
  *new_buf = NULL;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2200      	movs	r2, #0
 800d380:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <netconn_recv+0x48>
 800d388:	4b2a      	ldr	r3, [pc, #168]	; (800d434 <netconn_recv+0xe0>)
 800d38a:	f240 3265 	movw	r2, #869	; 0x365
 800d38e:	492c      	ldr	r1, [pc, #176]	; (800d440 <netconn_recv+0xec>)
 800d390:	482a      	ldr	r0, [pc, #168]	; (800d43c <netconn_recv+0xe8>)
 800d392:	f00e fc63 	bl	801bc5c <printf>
 800d396:	f06f 030f 	mvn.w	r3, #15
 800d39a:	e046      	b.n	800d42a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3a4:	2b10      	cmp	r3, #16
 800d3a6:	d13a      	bne.n	800d41e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d3ac:	2006      	movs	r0, #6
 800d3ae:	f003 fa1f 	bl	80107f0 <memp_malloc>
 800d3b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d102      	bne.n	800d3c0 <netconn_recv+0x6c>
      return ERR_MEM;
 800d3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d3be:	e034      	b.n	800d42a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800d3c0:	f107 030c 	add.w	r3, r7, #12
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff ff3f 	bl	800d24c <netconn_recv_data_tcp>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d3d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d006      	beq.n	800d3e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800d3da:	6979      	ldr	r1, [r7, #20]
 800d3dc:	2006      	movs	r0, #6
 800d3de:	f003 fa59 	bl	8010894 <memp_free>
      return err;
 800d3e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3e6:	e020      	b.n	800d42a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d106      	bne.n	800d3fc <netconn_recv+0xa8>
 800d3ee:	4b11      	ldr	r3, [pc, #68]	; (800d434 <netconn_recv+0xe0>)
 800d3f0:	f240 3279 	movw	r2, #889	; 0x379
 800d3f4:	4913      	ldr	r1, [pc, #76]	; (800d444 <netconn_recv+0xf0>)
 800d3f6:	4811      	ldr	r0, [pc, #68]	; (800d43c <netconn_recv+0xe8>)
 800d3f8:	f00e fc30 	bl	801bc5c <printf>

    buf->p = p;
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2200      	movs	r2, #0
 800d40c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2200      	movs	r2, #0
 800d412:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	e005      	b.n	800d42a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800d41e:	2200      	movs	r2, #0
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff fe1a 	bl	800d05c <netconn_recv_data>
 800d428:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	08024c48 	.word	0x08024c48
 800d438:	08024e60 	.word	0x08024e60
 800d43c:	08024ca0 	.word	0x08024ca0
 800d440:	08024e80 	.word	0x08024e80
 800d444:	08024ef8 	.word	0x08024ef8

0800d448 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08c      	sub	sp, #48	; 0x30
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d109      	bne.n	800d46c <netconn_send+0x24>
 800d458:	4b0e      	ldr	r3, [pc, #56]	; (800d494 <netconn_send+0x4c>)
 800d45a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800d45e:	490e      	ldr	r1, [pc, #56]	; (800d498 <netconn_send+0x50>)
 800d460:	480e      	ldr	r0, [pc, #56]	; (800d49c <netconn_send+0x54>)
 800d462:	f00e fbfb 	bl	801bc5c <printf>
 800d466:	f06f 030f 	mvn.w	r3, #15
 800d46a:	e00e      	b.n	800d48a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800d474:	f107 030c 	add.w	r3, r7, #12
 800d478:	4619      	mov	r1, r3
 800d47a:	4809      	ldr	r0, [pc, #36]	; (800d4a0 <netconn_send+0x58>)
 800d47c:	f7ff fcde 	bl	800ce3c <netconn_apimsg>
 800d480:	4603      	mov	r3, r0
 800d482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d486:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3730      	adds	r7, #48	; 0x30
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	08024c48 	.word	0x08024c48
 800d498:	08024f04 	.word	0x08024f04
 800d49c:	08024ca0 	.word	0x08024ca0
 800d4a0:	0800e405 	.word	0x0800e405

0800d4a4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08c      	sub	sp, #48	; 0x30
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d109      	bne.n	800d4ca <netconn_close_shutdown+0x26>
 800d4b6:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <netconn_close_shutdown+0x50>)
 800d4b8:	f240 4247 	movw	r2, #1095	; 0x447
 800d4bc:	490e      	ldr	r1, [pc, #56]	; (800d4f8 <netconn_close_shutdown+0x54>)
 800d4be:	480f      	ldr	r0, [pc, #60]	; (800d4fc <netconn_close_shutdown+0x58>)
 800d4c0:	f00e fbcc 	bl	801bc5c <printf>
 800d4c4:	f06f 030f 	mvn.w	r3, #15
 800d4c8:	e010      	b.n	800d4ec <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d4ce:	78fb      	ldrb	r3, [r7, #3]
 800d4d0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d4d2:	2329      	movs	r3, #41	; 0x29
 800d4d4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d4d6:	f107 030c 	add.w	r3, r7, #12
 800d4da:	4619      	mov	r1, r3
 800d4dc:	4808      	ldr	r0, [pc, #32]	; (800d500 <netconn_close_shutdown+0x5c>)
 800d4de:	f7ff fcad 	bl	800ce3c <netconn_apimsg>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d4e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3730      	adds	r7, #48	; 0x30
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	08024c48 	.word	0x08024c48
 800d4f8:	08024f84 	.word	0x08024f84
 800d4fc:	08024ca0 	.word	0x08024ca0
 800d500:	0800e8a1 	.word	0x0800e8a1

0800d504 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <netconn_err+0x12>
    return ERR_OK;
 800d512:	2300      	movs	r3, #0
 800d514:	e00d      	b.n	800d532 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d516:	f00d ffa9 	bl	801b46c <sys_arch_protect>
 800d51a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7a1b      	ldrb	r3, [r3, #8]
 800d520:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f00d ffad 	bl	801b488 <sys_arch_unprotect>
  return err;
 800d52e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
	...

0800d53c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	4603      	mov	r3, r0
 800d544:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d54a:	f113 0f0d 	cmn.w	r3, #13
 800d54e:	d009      	beq.n	800d564 <lwip_netconn_err_to_msg+0x28>
 800d550:	f113 0f0d 	cmn.w	r3, #13
 800d554:	dc0c      	bgt.n	800d570 <lwip_netconn_err_to_msg+0x34>
 800d556:	f113 0f0f 	cmn.w	r3, #15
 800d55a:	d007      	beq.n	800d56c <lwip_netconn_err_to_msg+0x30>
 800d55c:	f113 0f0e 	cmn.w	r3, #14
 800d560:	d002      	beq.n	800d568 <lwip_netconn_err_to_msg+0x2c>
 800d562:	e005      	b.n	800d570 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d564:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <lwip_netconn_err_to_msg+0x54>)
 800d566:	e00e      	b.n	800d586 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d568:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <lwip_netconn_err_to_msg+0x58>)
 800d56a:	e00c      	b.n	800d586 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d56c:	4b0a      	ldr	r3, [pc, #40]	; (800d598 <lwip_netconn_err_to_msg+0x5c>)
 800d56e:	e00a      	b.n	800d586 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d005      	beq.n	800d584 <lwip_netconn_err_to_msg+0x48>
 800d578:	4b08      	ldr	r3, [pc, #32]	; (800d59c <lwip_netconn_err_to_msg+0x60>)
 800d57a:	227d      	movs	r2, #125	; 0x7d
 800d57c:	4908      	ldr	r1, [pc, #32]	; (800d5a0 <lwip_netconn_err_to_msg+0x64>)
 800d57e:	4809      	ldr	r0, [pc, #36]	; (800d5a4 <lwip_netconn_err_to_msg+0x68>)
 800d580:	f00e fb6c 	bl	801bc5c <printf>
      return NULL;
 800d584:	2300      	movs	r3, #0
  }
}
 800d586:	4618      	mov	r0, r3
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	08028474 	.word	0x08028474
 800d594:	08028475 	.word	0x08028475
 800d598:	08028476 	.word	0x08028476
 800d59c:	08024fa0 	.word	0x08024fa0
 800d5a0:	08024fd4 	.word	0x08024fd4
 800d5a4:	08024fe4 	.word	0x08024fe4

0800d5a8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d105      	bne.n	800d5c4 <lwip_netconn_is_err_msg+0x1c>
 800d5b8:	4b12      	ldr	r3, [pc, #72]	; (800d604 <lwip_netconn_is_err_msg+0x5c>)
 800d5ba:	2285      	movs	r2, #133	; 0x85
 800d5bc:	4912      	ldr	r1, [pc, #72]	; (800d608 <lwip_netconn_is_err_msg+0x60>)
 800d5be:	4813      	ldr	r0, [pc, #76]	; (800d60c <lwip_netconn_is_err_msg+0x64>)
 800d5c0:	f00e fb4c 	bl	801bc5c <printf>

  if (msg == &netconn_aborted) {
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a12      	ldr	r2, [pc, #72]	; (800d610 <lwip_netconn_is_err_msg+0x68>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d104      	bne.n	800d5d6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	22f3      	movs	r2, #243	; 0xf3
 800d5d0:	701a      	strb	r2, [r3, #0]
    return 1;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e012      	b.n	800d5fc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a0e      	ldr	r2, [pc, #56]	; (800d614 <lwip_netconn_is_err_msg+0x6c>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d104      	bne.n	800d5e8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	22f2      	movs	r2, #242	; 0xf2
 800d5e2:	701a      	strb	r2, [r3, #0]
    return 1;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e009      	b.n	800d5fc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a0b      	ldr	r2, [pc, #44]	; (800d618 <lwip_netconn_is_err_msg+0x70>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d104      	bne.n	800d5fa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	22f1      	movs	r2, #241	; 0xf1
 800d5f4:	701a      	strb	r2, [r3, #0]
    return 1;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e000      	b.n	800d5fc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	08024fa0 	.word	0x08024fa0
 800d608:	0802500c 	.word	0x0802500c
 800d60c:	08024fe4 	.word	0x08024fe4
 800d610:	08028474 	.word	0x08028474
 800d614:	08028475 	.word	0x08028475
 800d618:	08028476 	.word	0x08028476

0800d61c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d105      	bne.n	800d63c <recv_udp+0x20>
 800d630:	4b34      	ldr	r3, [pc, #208]	; (800d704 <recv_udp+0xe8>)
 800d632:	22e5      	movs	r2, #229	; 0xe5
 800d634:	4934      	ldr	r1, [pc, #208]	; (800d708 <recv_udp+0xec>)
 800d636:	4835      	ldr	r0, [pc, #212]	; (800d70c <recv_udp+0xf0>)
 800d638:	f00e fb10 	bl	801bc5c <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d105      	bne.n	800d64e <recv_udp+0x32>
 800d642:	4b30      	ldr	r3, [pc, #192]	; (800d704 <recv_udp+0xe8>)
 800d644:	22e6      	movs	r2, #230	; 0xe6
 800d646:	4932      	ldr	r1, [pc, #200]	; (800d710 <recv_udp+0xf4>)
 800d648:	4830      	ldr	r0, [pc, #192]	; (800d70c <recv_udp+0xf0>)
 800d64a:	f00e fb07 	bl	801bc5c <printf>
  conn = (struct netconn *)arg;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d103      	bne.n	800d660 <recv_udp+0x44>
    pbuf_free(p);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f003 ff99 	bl	8011590 <pbuf_free>
    return;
 800d65e:	e04d      	b.n	800d6fc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	429a      	cmp	r2, r3
 800d668:	d005      	beq.n	800d676 <recv_udp+0x5a>
 800d66a:	4b26      	ldr	r3, [pc, #152]	; (800d704 <recv_udp+0xe8>)
 800d66c:	22ee      	movs	r2, #238	; 0xee
 800d66e:	4929      	ldr	r1, [pc, #164]	; (800d714 <recv_udp+0xf8>)
 800d670:	4826      	ldr	r0, [pc, #152]	; (800d70c <recv_udp+0xf0>)
 800d672:	f00e faf3 	bl	801bc5c <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	3310      	adds	r3, #16
 800d67a:	4618      	mov	r0, r3
 800d67c:	f00d fddb 	bl	801b236 <sys_mbox_valid>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d103      	bne.n	800d68e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f003 ff82 	bl	8011590 <pbuf_free>
    return;
 800d68c:	e036      	b.n	800d6fc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d68e:	2006      	movs	r0, #6
 800d690:	f003 f8ae 	bl	80107f0 <memp_malloc>
 800d694:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d103      	bne.n	800d6a4 <recv_udp+0x88>
    pbuf_free(p);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f003 ff77 	bl	8011590 <pbuf_free>
    return;
 800d6a2:	e02b      	b.n	800d6fc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d002      	beq.n	800d6bc <recv_udp+0xa0>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	e000      	b.n	800d6be <recv_udp+0xa2>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d6c6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	891b      	ldrh	r3, [r3, #8]
 800d6cc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	3310      	adds	r3, #16
 800d6d2:	69b9      	ldr	r1, [r7, #24]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f00d fd39 	bl	801b14c <sys_mbox_trypost>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d003      	beq.n	800d6e8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d6e0:	69b8      	ldr	r0, [r7, #24]
 800d6e2:	f001 f969 	bl	800e9b8 <netbuf_delete>
    return;
 800d6e6:	e009      	b.n	800d6fc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <recv_udp+0xe0>
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f4:	8afa      	ldrh	r2, [r7, #22]
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	69f8      	ldr	r0, [r7, #28]
 800d6fa:	4798      	blx	r3
  }
}
 800d6fc:	3720      	adds	r7, #32
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	08024fa0 	.word	0x08024fa0
 800d708:	08025018 	.word	0x08025018
 800d70c:	08024fe4 	.word	0x08024fe4
 800d710:	0802503c 	.word	0x0802503c
 800d714:	0802505c 	.word	0x0802505c

0800d718 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d106      	bne.n	800d73a <recv_tcp+0x22>
 800d72c:	4b36      	ldr	r3, [pc, #216]	; (800d808 <recv_tcp+0xf0>)
 800d72e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d732:	4936      	ldr	r1, [pc, #216]	; (800d80c <recv_tcp+0xf4>)
 800d734:	4836      	ldr	r0, [pc, #216]	; (800d810 <recv_tcp+0xf8>)
 800d736:	f00e fa91 	bl	801bc5c <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d106      	bne.n	800d74e <recv_tcp+0x36>
 800d740:	4b31      	ldr	r3, [pc, #196]	; (800d808 <recv_tcp+0xf0>)
 800d742:	f240 122d 	movw	r2, #301	; 0x12d
 800d746:	4933      	ldr	r1, [pc, #204]	; (800d814 <recv_tcp+0xfc>)
 800d748:	4831      	ldr	r0, [pc, #196]	; (800d810 <recv_tcp+0xf8>)
 800d74a:	f00e fa87 	bl	801bc5c <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d74e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d006      	beq.n	800d764 <recv_tcp+0x4c>
 800d756:	4b2c      	ldr	r3, [pc, #176]	; (800d808 <recv_tcp+0xf0>)
 800d758:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d75c:	492e      	ldr	r1, [pc, #184]	; (800d818 <recv_tcp+0x100>)
 800d75e:	482c      	ldr	r0, [pc, #176]	; (800d810 <recv_tcp+0xf8>)
 800d760:	f00e fa7c 	bl	801bc5c <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <recv_tcp+0x5c>
    return ERR_VAL;
 800d76e:	f06f 0305 	mvn.w	r3, #5
 800d772:	e045      	b.n	800d800 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d006      	beq.n	800d78c <recv_tcp+0x74>
 800d77e:	4b22      	ldr	r3, [pc, #136]	; (800d808 <recv_tcp+0xf0>)
 800d780:	f240 1235 	movw	r2, #309	; 0x135
 800d784:	4925      	ldr	r1, [pc, #148]	; (800d81c <recv_tcp+0x104>)
 800d786:	4822      	ldr	r0, [pc, #136]	; (800d810 <recv_tcp+0xf8>)
 800d788:	f00e fa68 	bl	801bc5c <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	3310      	adds	r3, #16
 800d790:	4618      	mov	r0, r3
 800d792:	f00d fd50 	bl	801b236 <sys_mbox_valid>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10d      	bne.n	800d7b8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d008      	beq.n	800d7b4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	891b      	ldrh	r3, [r3, #8]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	68b8      	ldr	r0, [r7, #8]
 800d7aa:	f004 fecb 	bl	8012544 <tcp_recved>
      pbuf_free(p);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f003 feee 	bl	8011590 <pbuf_free>
    }
    return ERR_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	e023      	b.n	800d800 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d005      	beq.n	800d7ca <recv_tcp+0xb2>
    msg = p;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	891b      	ldrh	r3, [r3, #8]
 800d7c6:	83fb      	strh	r3, [r7, #30]
 800d7c8:	e003      	b.n	800d7d2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d7ca:	4b15      	ldr	r3, [pc, #84]	; (800d820 <recv_tcp+0x108>)
 800d7cc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	3310      	adds	r3, #16
 800d7d6:	69b9      	ldr	r1, [r7, #24]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f00d fcb7 	bl	801b14c <sys_mbox_trypost>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7e8:	e00a      	b.n	800d800 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <recv_tcp+0xe6>
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f6:	8bfa      	ldrh	r2, [r7, #30]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	6978      	ldr	r0, [r7, #20]
 800d7fc:	4798      	blx	r3
  }

  return ERR_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3720      	adds	r7, #32
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	08024fa0 	.word	0x08024fa0
 800d80c:	0802507c 	.word	0x0802507c
 800d810:	08024fe4 	.word	0x08024fe4
 800d814:	080250a0 	.word	0x080250a0
 800d818:	080250c0 	.word	0x080250c0
 800d81c:	080250d8 	.word	0x080250d8
 800d820:	08028476 	.word	0x08028476

0800d824 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d106      	bne.n	800d846 <poll_tcp+0x22>
 800d838:	4b29      	ldr	r3, [pc, #164]	; (800d8e0 <poll_tcp+0xbc>)
 800d83a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d83e:	4929      	ldr	r1, [pc, #164]	; (800d8e4 <poll_tcp+0xc0>)
 800d840:	4829      	ldr	r0, [pc, #164]	; (800d8e8 <poll_tcp+0xc4>)
 800d842:	f00e fa0b 	bl	801bc5c <printf>

  if (conn->state == NETCONN_WRITE) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	785b      	ldrb	r3, [r3, #1]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d104      	bne.n	800d858 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d84e:	2101      	movs	r1, #1
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f000 fe59 	bl	800e508 <lwip_netconn_do_writemore>
 800d856:	e016      	b.n	800d886 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	785b      	ldrb	r3, [r3, #1]
 800d85c:	2b04      	cmp	r3, #4
 800d85e:	d112      	bne.n	800d886 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6a1b      	ldr	r3, [r3, #32]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00a      	beq.n	800d87e <poll_tcp+0x5a>
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6a1b      	ldr	r3, [r3, #32]
 800d86c:	7a5b      	ldrb	r3, [r3, #9]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d005      	beq.n	800d87e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6a1b      	ldr	r3, [r3, #32]
 800d876:	7a5a      	ldrb	r2, [r3, #9]
 800d878:	3a01      	subs	r2, #1
 800d87a:	b2d2      	uxtb	r2, r2
 800d87c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d87e:	2101      	movs	r1, #1
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f000 fb3b 	bl	800defc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	7f1b      	ldrb	r3, [r3, #28]
 800d88a:	f003 0310 	and.w	r3, r3, #16
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d021      	beq.n	800d8d6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d01d      	beq.n	800d8d6 <poll_tcp+0xb2>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d8a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d8a6:	d316      	bcc.n	800d8d6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d810      	bhi.n	800d8d6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	7f1b      	ldrb	r3, [r3, #28]
 800d8b8:	f023 0310 	bic.w	r3, r3, #16
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d005      	beq.n	800d8d6 <poll_tcp+0xb2>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	2102      	movs	r1, #2
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	08024fa0 	.word	0x08024fa0
 800d8e4:	080250f8 	.word	0x080250f8
 800d8e8:	08024fe4 	.word	0x08024fe4

0800d8ec <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b086      	sub	sp, #24
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	60b9      	str	r1, [r7, #8]
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d106      	bne.n	800d912 <sent_tcp+0x26>
 800d904:	4b20      	ldr	r3, [pc, #128]	; (800d988 <sent_tcp+0x9c>)
 800d906:	f240 1293 	movw	r2, #403	; 0x193
 800d90a:	4920      	ldr	r1, [pc, #128]	; (800d98c <sent_tcp+0xa0>)
 800d90c:	4820      	ldr	r0, [pc, #128]	; (800d990 <sent_tcp+0xa4>)
 800d90e:	f00e f9a5 	bl	801bc5c <printf>

  if (conn) {
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d032      	beq.n	800d97e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	785b      	ldrb	r3, [r3, #1]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d104      	bne.n	800d92a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d920:	2101      	movs	r1, #1
 800d922:	6978      	ldr	r0, [r7, #20]
 800d924:	f000 fdf0 	bl	800e508 <lwip_netconn_do_writemore>
 800d928:	e007      	b.n	800d93a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	785b      	ldrb	r3, [r3, #1]
 800d92e:	2b04      	cmp	r3, #4
 800d930:	d103      	bne.n	800d93a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d932:	2101      	movs	r1, #1
 800d934:	6978      	ldr	r0, [r7, #20]
 800d936:	f000 fae1 	bl	800defc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d01d      	beq.n	800d97e <sent_tcp+0x92>
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d94a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d94e:	d316      	bcc.n	800d97e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d958:	2b04      	cmp	r3, #4
 800d95a:	d810      	bhi.n	800d97e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	7f1b      	ldrb	r3, [r3, #28]
 800d960:	f023 0310 	bic.w	r3, r3, #16
 800d964:	b2da      	uxtb	r2, r3
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d005      	beq.n	800d97e <sent_tcp+0x92>
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d976:	88fa      	ldrh	r2, [r7, #6]
 800d978:	2102      	movs	r1, #2
 800d97a:	6978      	ldr	r0, [r7, #20]
 800d97c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	08024fa0 	.word	0x08024fa0
 800d98c:	080250f8 	.word	0x080250f8
 800d990:	08024fe4 	.word	0x08024fe4

0800d994 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b088      	sub	sp, #32
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d106      	bne.n	800d9b8 <err_tcp+0x24>
 800d9aa:	4b5f      	ldr	r3, [pc, #380]	; (800db28 <err_tcp+0x194>)
 800d9ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d9b0:	495e      	ldr	r1, [pc, #376]	; (800db2c <err_tcp+0x198>)
 800d9b2:	485f      	ldr	r0, [pc, #380]	; (800db30 <err_tcp+0x19c>)
 800d9b4:	f00e f952 	bl	801bc5c <printf>

  SYS_ARCH_PROTECT(lev);
 800d9b8:	f00d fd58 	bl	801b46c <sys_arch_protect>
 800d9bc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	78fa      	ldrb	r2, [r7, #3]
 800d9c8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	7f1b      	ldrb	r3, [r3, #28]
 800d9ce:	f043 0301 	orr.w	r3, r3, #1
 800d9d2:	b2da      	uxtb	r2, r3
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	785b      	ldrb	r3, [r3, #1]
 800d9dc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d9e4:	69b8      	ldr	r0, [r7, #24]
 800d9e6:	f00d fd4f 	bl	801b488 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d005      	beq.n	800d9fe <err_tcp+0x6a>
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2104      	movs	r1, #4
 800d9fa:	69f8      	ldr	r0, [r7, #28]
 800d9fc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da02:	2b00      	cmp	r3, #0
 800da04:	d005      	beq.n	800da12 <err_tcp+0x7e>
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0a:	2200      	movs	r2, #0
 800da0c:	2100      	movs	r1, #0
 800da0e:	69f8      	ldr	r0, [r7, #28]
 800da10:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da16:	2b00      	cmp	r3, #0
 800da18:	d005      	beq.n	800da26 <err_tcp+0x92>
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2200      	movs	r2, #0
 800da20:	2102      	movs	r1, #2
 800da22:	69f8      	ldr	r0, [r7, #28]
 800da24:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800da26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff fd86 	bl	800d53c <lwip_netconn_err_to_msg>
 800da30:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	3310      	adds	r3, #16
 800da36:	4618      	mov	r0, r3
 800da38:	f00d fbfd 	bl	801b236 <sys_mbox_valid>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d005      	beq.n	800da4e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	3310      	adds	r3, #16
 800da46:	6939      	ldr	r1, [r7, #16]
 800da48:	4618      	mov	r0, r3
 800da4a:	f00d fb7f 	bl	801b14c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	3314      	adds	r3, #20
 800da52:	4618      	mov	r0, r3
 800da54:	f00d fbef 	bl	801b236 <sys_mbox_valid>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d005      	beq.n	800da6a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	3314      	adds	r3, #20
 800da62:	6939      	ldr	r1, [r7, #16]
 800da64:	4618      	mov	r0, r3
 800da66:	f00d fb71 	bl	801b14c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800da6a:	7dfb      	ldrb	r3, [r7, #23]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d005      	beq.n	800da7c <err_tcp+0xe8>
 800da70:	7dfb      	ldrb	r3, [r7, #23]
 800da72:	2b04      	cmp	r3, #4
 800da74:	d002      	beq.n	800da7c <err_tcp+0xe8>
 800da76:	7dfb      	ldrb	r3, [r7, #23]
 800da78:	2b03      	cmp	r3, #3
 800da7a:	d143      	bne.n	800db04 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	7f1b      	ldrb	r3, [r3, #28]
 800da80:	f003 0304 	and.w	r3, r3, #4
 800da84:	2b00      	cmp	r3, #0
 800da86:	bf14      	ite	ne
 800da88:	2301      	movne	r3, #1
 800da8a:	2300      	moveq	r3, #0
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	7f1b      	ldrb	r3, [r3, #28]
 800da94:	f023 0304 	bic.w	r3, r3, #4
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d13b      	bne.n	800db1c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d106      	bne.n	800daba <err_tcp+0x126>
 800daac:	4b1e      	ldr	r3, [pc, #120]	; (800db28 <err_tcp+0x194>)
 800daae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dab2:	4920      	ldr	r1, [pc, #128]	; (800db34 <err_tcp+0x1a0>)
 800dab4:	481e      	ldr	r0, [pc, #120]	; (800db30 <err_tcp+0x19c>)
 800dab6:	f00e f8d1 	bl	801bc5c <printf>
      if (old_state == NETCONN_CLOSE) {
 800daba:	7dfb      	ldrb	r3, [r7, #23]
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	d104      	bne.n	800daca <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	6a1b      	ldr	r3, [r3, #32]
 800dac4:	2200      	movs	r2, #0
 800dac6:	711a      	strb	r2, [r3, #4]
 800dac8:	e003      	b.n	800dad2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	6a1b      	ldr	r3, [r3, #32]
 800dace:	78fa      	ldrb	r2, [r7, #3]
 800dad0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	330c      	adds	r3, #12
 800dada:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800dadc:	68b8      	ldr	r0, [r7, #8]
 800dade:	f00d fc3b 	bl	801b358 <sys_sem_valid>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d106      	bne.n	800daf6 <err_tcp+0x162>
 800dae8:	4b0f      	ldr	r3, [pc, #60]	; (800db28 <err_tcp+0x194>)
 800daea:	f240 12ef 	movw	r2, #495	; 0x1ef
 800daee:	4912      	ldr	r1, [pc, #72]	; (800db38 <err_tcp+0x1a4>)
 800daf0:	480f      	ldr	r0, [pc, #60]	; (800db30 <err_tcp+0x19c>)
 800daf2:	f00e f8b3 	bl	801bc5c <printf>
      conn->current_msg = NULL;
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	2200      	movs	r2, #0
 800dafa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800dafc:	68b8      	ldr	r0, [r7, #8]
 800dafe:	f00d fc11 	bl	801b324 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800db02:	e00b      	b.n	800db1c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d008      	beq.n	800db1e <err_tcp+0x18a>
 800db0c:	4b06      	ldr	r3, [pc, #24]	; (800db28 <err_tcp+0x194>)
 800db0e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800db12:	490a      	ldr	r1, [pc, #40]	; (800db3c <err_tcp+0x1a8>)
 800db14:	4806      	ldr	r0, [pc, #24]	; (800db30 <err_tcp+0x19c>)
 800db16:	f00e f8a1 	bl	801bc5c <printf>
  }
}
 800db1a:	e000      	b.n	800db1e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800db1c:	bf00      	nop
}
 800db1e:	bf00      	nop
 800db20:	3720      	adds	r7, #32
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	08024fa0 	.word	0x08024fa0
 800db2c:	080250f8 	.word	0x080250f8
 800db30:	08024fe4 	.word	0x08024fe4
 800db34:	08025108 	.word	0x08025108
 800db38:	08025124 	.word	0x08025124
 800db3c:	08025140 	.word	0x08025140

0800db40 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800db4e:	6879      	ldr	r1, [r7, #4]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f005 fbdb 	bl	801330c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800db56:	490a      	ldr	r1, [pc, #40]	; (800db80 <setup_tcp+0x40>)
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f005 fbe9 	bl	8013330 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800db5e:	4909      	ldr	r1, [pc, #36]	; (800db84 <setup_tcp+0x44>)
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f005 fc07 	bl	8013374 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800db66:	2202      	movs	r2, #2
 800db68:	4907      	ldr	r1, [pc, #28]	; (800db88 <setup_tcp+0x48>)
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f005 fc5e 	bl	801342c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800db70:	4906      	ldr	r1, [pc, #24]	; (800db8c <setup_tcp+0x4c>)
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f005 fc20 	bl	80133b8 <tcp_err>
}
 800db78:	bf00      	nop
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	0800d719 	.word	0x0800d719
 800db84:	0800d8ed 	.word	0x0800d8ed
 800db88:	0800d825 	.word	0x0800d825
 800db8c:	0800d995 	.word	0x0800d995

0800db90 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800db90:	b590      	push	{r4, r7, lr}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800db98:	2300      	movs	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d006      	beq.n	800dbb4 <pcb_new+0x24>
 800dba6:	4b2b      	ldr	r3, [pc, #172]	; (800dc54 <pcb_new+0xc4>)
 800dba8:	f240 2265 	movw	r2, #613	; 0x265
 800dbac:	492a      	ldr	r1, [pc, #168]	; (800dc58 <pcb_new+0xc8>)
 800dbae:	482b      	ldr	r0, [pc, #172]	; (800dc5c <pcb_new+0xcc>)
 800dbb0:	f00e f854 	bl	801bc5c <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbbe:	2b10      	cmp	r3, #16
 800dbc0:	d022      	beq.n	800dc08 <pcb_new+0x78>
 800dbc2:	2b20      	cmp	r3, #32
 800dbc4:	d133      	bne.n	800dc2e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681c      	ldr	r4, [r3, #0]
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f00a fe62 	bl	8018896 <udp_new_ip_type>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d02a      	beq.n	800dc36 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b22      	cmp	r3, #34	; 0x22
 800dbe8:	d104      	bne.n	800dbf4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6858      	ldr	r0, [r3, #4]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4917      	ldr	r1, [pc, #92]	; (800dc60 <pcb_new+0xd0>)
 800dc02:	f00a fdcf 	bl	80187a4 <udp_recv>
      }
      break;
 800dc06:	e016      	b.n	800dc36 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681c      	ldr	r4, [r3, #0]
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f005 fb6e 	bl	80132f0 <tcp_new_ip_type>
 800dc14:	4603      	mov	r3, r0
 800dc16:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00b      	beq.n	800dc3a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff ff8a 	bl	800db40 <setup_tcp>
      }
      break;
 800dc2c:	e005      	b.n	800dc3a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	22fa      	movs	r2, #250	; 0xfa
 800dc32:	711a      	strb	r2, [r3, #4]
      return;
 800dc34:	e00a      	b.n	800dc4c <pcb_new+0xbc>
      break;
 800dc36:	bf00      	nop
 800dc38:	e000      	b.n	800dc3c <pcb_new+0xac>
      break;
 800dc3a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	22ff      	movs	r2, #255	; 0xff
 800dc4a:	711a      	strb	r2, [r3, #4]
  }
}
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd90      	pop	{r4, r7, pc}
 800dc52:	bf00      	nop
 800dc54:	08024fa0 	.word	0x08024fa0
 800dc58:	08025184 	.word	0x08025184
 800dc5c:	08024fe4 	.word	0x08024fe4
 800dc60:	0800d61d 	.word	0x0800d61d

0800dc64 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d102      	bne.n	800dc86 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800dc80:	68f8      	ldr	r0, [r7, #12]
 800dc82:	f7ff ff85 	bl	800db90 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800dc86:	bf00      	nop
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
	...

0800dc90 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	6039      	str	r1, [r7, #0]
 800dc9a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800dca0:	2007      	movs	r0, #7
 800dca2:	f002 fda5 	bl	80107f0 <memp_malloc>
 800dca6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <netconn_alloc+0x22>
    return NULL;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e052      	b.n	800dd58 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	79fa      	ldrb	r2, [r7, #7]
 800dcbc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800dcc4:	79fb      	ldrb	r3, [r7, #7]
 800dcc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcca:	2b10      	cmp	r3, #16
 800dccc:	d004      	beq.n	800dcd8 <netconn_alloc+0x48>
 800dcce:	2b20      	cmp	r3, #32
 800dcd0:	d105      	bne.n	800dcde <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800dcd2:	2306      	movs	r3, #6
 800dcd4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800dcd6:	e00a      	b.n	800dcee <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800dcd8:	2306      	movs	r3, #6
 800dcda:	617b      	str	r3, [r7, #20]
      break;
 800dcdc:	e007      	b.n	800dcee <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800dcde:	4b20      	ldr	r3, [pc, #128]	; (800dd60 <netconn_alloc+0xd0>)
 800dce0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800dce4:	491f      	ldr	r1, [pc, #124]	; (800dd64 <netconn_alloc+0xd4>)
 800dce6:	4820      	ldr	r0, [pc, #128]	; (800dd68 <netconn_alloc+0xd8>)
 800dce8:	f00d ffb8 	bl	801bc5c <printf>
      goto free_and_return;
 800dcec:	e02f      	b.n	800dd4e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3310      	adds	r3, #16
 800dcf2:	6979      	ldr	r1, [r7, #20]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f00d f9f5 	bl	801b0e4 <sys_mbox_new>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d125      	bne.n	800dd4c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	330c      	adds	r3, #12
 800dd04:	2100      	movs	r1, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f00d fab3 	bl	801b272 <sys_sem_new>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	3310      	adds	r3, #16
 800dd16:	4618      	mov	r0, r3
 800dd18:	f00d fa06 	bl	801b128 <sys_mbox_free>
    goto free_and_return;
 800dd1c:	e017      	b.n	800dd4e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	3314      	adds	r3, #20
 800dd22:	4618      	mov	r0, r3
 800dd24:	f00d fa98 	bl	801b258 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f04f 32ff 	mov.w	r2, #4294967295
 800dd34:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	7cfa      	ldrb	r2, [r7, #19]
 800dd46:	771a      	strb	r2, [r3, #28]
  return conn;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	e005      	b.n	800dd58 <netconn_alloc+0xc8>
    goto free_and_return;
 800dd4c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800dd4e:	68f9      	ldr	r1, [r7, #12]
 800dd50:	2007      	movs	r0, #7
 800dd52:	f002 fd9f 	bl	8010894 <memp_free>
  return NULL;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3718      	adds	r7, #24
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	08024fa0 	.word	0x08024fa0
 800dd64:	080251a4 	.word	0x080251a4
 800dd68:	08024fe4 	.word	0x08024fe4

0800dd6c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d006      	beq.n	800dd8a <netconn_free+0x1e>
 800dd7c:	4b1b      	ldr	r3, [pc, #108]	; (800ddec <netconn_free+0x80>)
 800dd7e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dd82:	491b      	ldr	r1, [pc, #108]	; (800ddf0 <netconn_free+0x84>)
 800dd84:	481b      	ldr	r0, [pc, #108]	; (800ddf4 <netconn_free+0x88>)
 800dd86:	f00d ff69 	bl	801bc5c <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3310      	adds	r3, #16
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f00d fa51 	bl	801b236 <sys_mbox_valid>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d006      	beq.n	800dda8 <netconn_free+0x3c>
 800dd9a:	4b14      	ldr	r3, [pc, #80]	; (800ddec <netconn_free+0x80>)
 800dd9c:	f240 3223 	movw	r2, #803	; 0x323
 800dda0:	4915      	ldr	r1, [pc, #84]	; (800ddf8 <netconn_free+0x8c>)
 800dda2:	4814      	ldr	r0, [pc, #80]	; (800ddf4 <netconn_free+0x88>)
 800dda4:	f00d ff5a 	bl	801bc5c <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3314      	adds	r3, #20
 800ddac:	4618      	mov	r0, r3
 800ddae:	f00d fa42 	bl	801b236 <sys_mbox_valid>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d006      	beq.n	800ddc6 <netconn_free+0x5a>
 800ddb8:	4b0c      	ldr	r3, [pc, #48]	; (800ddec <netconn_free+0x80>)
 800ddba:	f240 3226 	movw	r2, #806	; 0x326
 800ddbe:	490f      	ldr	r1, [pc, #60]	; (800ddfc <netconn_free+0x90>)
 800ddc0:	480c      	ldr	r0, [pc, #48]	; (800ddf4 <netconn_free+0x88>)
 800ddc2:	f00d ff4b 	bl	801bc5c <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	330c      	adds	r3, #12
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f00d fab7 	bl	801b33e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	330c      	adds	r3, #12
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f00d fad0 	bl	801b37a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ddda:	6879      	ldr	r1, [r7, #4]
 800dddc:	2007      	movs	r0, #7
 800ddde:	f002 fd59 	bl	8010894 <memp_free>
}
 800dde2:	bf00      	nop
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	08024fa0 	.word	0x08024fa0
 800ddf0:	080251cc 	.word	0x080251cc
 800ddf4:	08024fe4 	.word	0x08024fe4
 800ddf8:	080251fc 	.word	0x080251fc
 800ddfc:	08025238 	.word	0x08025238

0800de00 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b086      	sub	sp, #24
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	3310      	adds	r3, #16
 800de0c:	4618      	mov	r0, r3
 800de0e:	f00d fa12 	bl	801b236 <sys_mbox_valid>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d02f      	beq.n	800de78 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800de18:	e018      	b.n	800de4c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de22:	2b10      	cmp	r3, #16
 800de24:	d10e      	bne.n	800de44 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	f107 020f 	add.w	r2, r7, #15
 800de2c:	4611      	mov	r1, r2
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fbba 	bl	800d5a8 <lwip_netconn_is_err_msg>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d108      	bne.n	800de4c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f003 fba7 	bl	8011590 <pbuf_free>
 800de42:	e003      	b.n	800de4c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	4618      	mov	r0, r3
 800de48:	f000 fdb6 	bl	800e9b8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3310      	adds	r3, #16
 800de50:	f107 0210 	add.w	r2, r7, #16
 800de54:	4611      	mov	r1, r2
 800de56:	4618      	mov	r0, r3
 800de58:	f00d f9d1 	bl	801b1fe <sys_arch_mbox_tryfetch>
 800de5c:	4603      	mov	r3, r0
 800de5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de62:	d1da      	bne.n	800de1a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3310      	adds	r3, #16
 800de68:	4618      	mov	r0, r3
 800de6a:	f00d f95d 	bl	801b128 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	3310      	adds	r3, #16
 800de72:	4618      	mov	r0, r3
 800de74:	f00d f9f0 	bl	801b258 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3314      	adds	r3, #20
 800de7c:	4618      	mov	r0, r3
 800de7e:	f00d f9da 	bl	801b236 <sys_mbox_valid>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d034      	beq.n	800def2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800de88:	e01d      	b.n	800dec6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	f107 020e 	add.w	r2, r7, #14
 800de90:	4611      	mov	r1, r2
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff fb88 	bl	800d5a8 <lwip_netconn_is_err_msg>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d113      	bne.n	800dec6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800dea2:	6978      	ldr	r0, [r7, #20]
 800dea4:	f7ff ffac 	bl	800de00 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d007      	beq.n	800dec0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	f004 f96b 	bl	8012190 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2200      	movs	r2, #0
 800debe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800dec0:	6978      	ldr	r0, [r7, #20]
 800dec2:	f7ff ff53 	bl	800dd6c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3314      	adds	r3, #20
 800deca:	f107 0210 	add.w	r2, r7, #16
 800dece:	4611      	mov	r1, r2
 800ded0:	4618      	mov	r0, r3
 800ded2:	f00d f994 	bl	801b1fe <sys_arch_mbox_tryfetch>
 800ded6:	4603      	mov	r3, r0
 800ded8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dedc:	d1d5      	bne.n	800de8a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	3314      	adds	r3, #20
 800dee2:	4618      	mov	r0, r3
 800dee4:	f00d f920 	bl	801b128 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	3314      	adds	r3, #20
 800deec:	4618      	mov	r0, r3
 800deee:	f00d f9b3 	bl	801b258 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800def2:	bf00      	nop
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	460b      	mov	r3, r1
 800df06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800df08:	2300      	movs	r3, #0
 800df0a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d106      	bne.n	800df20 <lwip_netconn_do_close_internal+0x24>
 800df12:	4ba1      	ldr	r3, [pc, #644]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800df14:	f240 32a2 	movw	r2, #930	; 0x3a2
 800df18:	49a0      	ldr	r1, [pc, #640]	; (800e19c <lwip_netconn_do_close_internal+0x2a0>)
 800df1a:	48a1      	ldr	r0, [pc, #644]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800df1c:	f00d fe9e 	bl	801bc5c <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df28:	2b10      	cmp	r3, #16
 800df2a:	d006      	beq.n	800df3a <lwip_netconn_do_close_internal+0x3e>
 800df2c:	4b9a      	ldr	r3, [pc, #616]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800df2e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800df32:	499c      	ldr	r1, [pc, #624]	; (800e1a4 <lwip_netconn_do_close_internal+0x2a8>)
 800df34:	489a      	ldr	r0, [pc, #616]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800df36:	f00d fe91 	bl	801bc5c <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	785b      	ldrb	r3, [r3, #1]
 800df3e:	2b04      	cmp	r3, #4
 800df40:	d006      	beq.n	800df50 <lwip_netconn_do_close_internal+0x54>
 800df42:	4b95      	ldr	r3, [pc, #596]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800df44:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800df48:	4997      	ldr	r1, [pc, #604]	; (800e1a8 <lwip_netconn_do_close_internal+0x2ac>)
 800df4a:	4895      	ldr	r0, [pc, #596]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800df4c:	f00d fe86 	bl	801bc5c <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d106      	bne.n	800df66 <lwip_netconn_do_close_internal+0x6a>
 800df58:	4b8f      	ldr	r3, [pc, #572]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800df5a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800df5e:	4993      	ldr	r1, [pc, #588]	; (800e1ac <lwip_netconn_do_close_internal+0x2b0>)
 800df60:	488f      	ldr	r0, [pc, #572]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800df62:	f00d fe7b 	bl	801bc5c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d106      	bne.n	800df7c <lwip_netconn_do_close_internal+0x80>
 800df6e:	4b8a      	ldr	r3, [pc, #552]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800df70:	f240 32a6 	movw	r2, #934	; 0x3a6
 800df74:	498e      	ldr	r1, [pc, #568]	; (800e1b0 <lwip_netconn_do_close_internal+0x2b4>)
 800df76:	488a      	ldr	r0, [pc, #552]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800df78:	f00d fe70 	bl	801bc5c <printf>

  tpcb = conn->pcb.tcp;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a1b      	ldr	r3, [r3, #32]
 800df86:	7a1b      	ldrb	r3, [r3, #8]
 800df88:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
 800df8c:	f003 0301 	and.w	r3, r3, #1
 800df90:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	f003 0302 	and.w	r3, r3, #2
 800df98:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
 800df9c:	2b03      	cmp	r3, #3
 800df9e:	d102      	bne.n	800dfa6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	75bb      	strb	r3, [r7, #22]
 800dfa4:	e01f      	b.n	800dfe6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800dfa6:	7bbb      	ldrb	r3, [r7, #14]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00e      	beq.n	800dfca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800dfb0:	2b05      	cmp	r3, #5
 800dfb2:	d007      	beq.n	800dfc4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800dfb8:	2b06      	cmp	r3, #6
 800dfba:	d003      	beq.n	800dfc4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800dfc0:	2b08      	cmp	r3, #8
 800dfc2:	d102      	bne.n	800dfca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	75bb      	strb	r3, [r7, #22]
 800dfc8:	e00d      	b.n	800dfe6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800dfca:	7b7b      	ldrb	r3, [r7, #13]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d008      	beq.n	800dfe2 <lwip_netconn_do_close_internal+0xe6>
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	8b5b      	ldrh	r3, [r3, #26]
 800dfd4:	f003 0310 	and.w	r3, r3, #16
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d002      	beq.n	800dfe2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	75bb      	strb	r3, [r7, #22]
 800dfe0:	e001      	b.n	800dfe6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800dfe6:	7dbb      	ldrb	r3, [r7, #22]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800dfec:	2100      	movs	r1, #0
 800dfee:	6938      	ldr	r0, [r7, #16]
 800dff0:	f005 f98c 	bl	801330c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	7d1b      	ldrb	r3, [r3, #20]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d104      	bne.n	800e006 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dffc:	2100      	movs	r1, #0
 800dffe:	6938      	ldr	r0, [r7, #16]
 800e000:	f005 f9fc 	bl	80133fc <tcp_accept>
 800e004:	e01d      	b.n	800e042 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e006:	7bbb      	ldrb	r3, [r7, #14]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d007      	beq.n	800e01c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e00c:	2100      	movs	r1, #0
 800e00e:	6938      	ldr	r0, [r7, #16]
 800e010:	f005 f98e 	bl	8013330 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e014:	2100      	movs	r1, #0
 800e016:	6938      	ldr	r0, [r7, #16]
 800e018:	f005 f9f0 	bl	80133fc <tcp_accept>
    }
    if (shut_tx) {
 800e01c:	7b7b      	ldrb	r3, [r7, #13]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e022:	2100      	movs	r1, #0
 800e024:	6938      	ldr	r0, [r7, #16]
 800e026:	f005 f9a5 	bl	8013374 <tcp_sent>
    }
    if (shut_close) {
 800e02a:	7dbb      	ldrb	r3, [r7, #22]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d008      	beq.n	800e042 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e030:	2200      	movs	r2, #0
 800e032:	2100      	movs	r1, #0
 800e034:	6938      	ldr	r0, [r7, #16]
 800e036:	f005 f9f9 	bl	801342c <tcp_poll>
      tcp_err(tpcb, NULL);
 800e03a:	2100      	movs	r1, #0
 800e03c:	6938      	ldr	r0, [r7, #16]
 800e03e:	f005 f9bb 	bl	80133b8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800e042:	7dbb      	ldrb	r3, [r7, #22]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d005      	beq.n	800e054 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e048:	6938      	ldr	r0, [r7, #16]
 800e04a:	f003 ff5b 	bl	8011f04 <tcp_close>
 800e04e:	4603      	mov	r3, r0
 800e050:	75fb      	strb	r3, [r7, #23]
 800e052:	e007      	b.n	800e064 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	7b7a      	ldrb	r2, [r7, #13]
 800e058:	4619      	mov	r1, r3
 800e05a:	6938      	ldr	r0, [r7, #16]
 800e05c:	f003 ff7e 	bl	8011f5c <tcp_shutdown>
 800e060:	4603      	mov	r3, r0
 800e062:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800e064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d102      	bne.n	800e072 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e06c:	2301      	movs	r3, #1
 800e06e:	757b      	strb	r3, [r7, #21]
 800e070:	e016      	b.n	800e0a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07a:	d10f      	bne.n	800e09c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	6a1b      	ldr	r3, [r3, #32]
 800e080:	7a5b      	ldrb	r3, [r3, #9]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d10c      	bne.n	800e0a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e086:	2301      	movs	r3, #1
 800e088:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800e08a:	7dbb      	ldrb	r3, [r7, #22]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e090:	6938      	ldr	r0, [r7, #16]
 800e092:	f004 f87d 	bl	8012190 <tcp_abort>
          err = ERR_OK;
 800e096:	2300      	movs	r3, #0
 800e098:	75fb      	strb	r3, [r7, #23]
 800e09a:	e001      	b.n	800e0a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e09c:	2301      	movs	r3, #1
 800e09e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800e0a0:	7d7b      	ldrb	r3, [r7, #21]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d044      	beq.n	800e130 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a1b      	ldr	r3, [r3, #32]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	330c      	adds	r3, #12
 800e0ae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a1b      	ldr	r3, [r3, #32]
 800e0b4:	7dfa      	ldrb	r2, [r7, #23]
 800e0b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e0c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d129      	bne.n	800e120 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800e0cc:	7dbb      	ldrb	r3, [r7, #22]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d00c      	beq.n	800e0ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d005      	beq.n	800e0ec <lwip_netconn_do_close_internal+0x1f0>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	2104      	movs	r1, #4
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	4798      	blx	r3
      }
      if (shut_rx) {
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d009      	beq.n	800e106 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d005      	beq.n	800e106 <lwip_netconn_do_close_internal+0x20a>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fe:	2200      	movs	r2, #0
 800e100:	2100      	movs	r1, #0
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	4798      	blx	r3
      }
      if (shut_tx) {
 800e106:	7b7b      	ldrb	r3, [r7, #13]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e110:	2b00      	cmp	r3, #0
 800e112:	d005      	beq.n	800e120 <lwip_netconn_do_close_internal+0x224>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e118:	2200      	movs	r2, #0
 800e11a:	2102      	movs	r1, #2
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e120:	78fb      	ldrb	r3, [r7, #3]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d002      	beq.n	800e12c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e126:	68b8      	ldr	r0, [r7, #8]
 800e128:	f00d f8fc 	bl	801b324 <sys_sem_signal>
    }
    return ERR_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	e02e      	b.n	800e18e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800e130:	7d7b      	ldrb	r3, [r7, #21]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d11e      	bne.n	800e174 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	7d1b      	ldrb	r3, [r3, #20]
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d106      	bne.n	800e14c <lwip_netconn_do_close_internal+0x250>
 800e13e:	4b16      	ldr	r3, [pc, #88]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800e140:	f240 4241 	movw	r2, #1089	; 0x441
 800e144:	491b      	ldr	r1, [pc, #108]	; (800e1b4 <lwip_netconn_do_close_internal+0x2b8>)
 800e146:	4816      	ldr	r0, [pc, #88]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800e148:	f00d fd88 	bl	801bc5c <printf>
    if (shut_tx) {
 800e14c:	7b7b      	ldrb	r3, [r7, #13]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d003      	beq.n	800e15a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800e152:	4919      	ldr	r1, [pc, #100]	; (800e1b8 <lwip_netconn_do_close_internal+0x2bc>)
 800e154:	6938      	ldr	r0, [r7, #16]
 800e156:	f005 f90d 	bl	8013374 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e15a:	2201      	movs	r2, #1
 800e15c:	4917      	ldr	r1, [pc, #92]	; (800e1bc <lwip_netconn_do_close_internal+0x2c0>)
 800e15e:	6938      	ldr	r0, [r7, #16]
 800e160:	f005 f964 	bl	801342c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e164:	4916      	ldr	r1, [pc, #88]	; (800e1c0 <lwip_netconn_do_close_internal+0x2c4>)
 800e166:	6938      	ldr	r0, [r7, #16]
 800e168:	f005 f926 	bl	80133b8 <tcp_err>
    tcp_arg(tpcb, conn);
 800e16c:	6879      	ldr	r1, [r7, #4]
 800e16e:	6938      	ldr	r0, [r7, #16]
 800e170:	f005 f8cc 	bl	801330c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d106      	bne.n	800e18a <lwip_netconn_do_close_internal+0x28e>
 800e17c:	4b06      	ldr	r3, [pc, #24]	; (800e198 <lwip_netconn_do_close_internal+0x29c>)
 800e17e:	f240 424d 	movw	r2, #1101	; 0x44d
 800e182:	4910      	ldr	r1, [pc, #64]	; (800e1c4 <lwip_netconn_do_close_internal+0x2c8>)
 800e184:	4806      	ldr	r0, [pc, #24]	; (800e1a0 <lwip_netconn_do_close_internal+0x2a4>)
 800e186:	f00d fd69 	bl	801bc5c <printf>
  return err;
 800e18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	08024fa0 	.word	0x08024fa0
 800e19c:	08025274 	.word	0x08025274
 800e1a0:	08024fe4 	.word	0x08024fe4
 800e1a4:	08025284 	.word	0x08025284
 800e1a8:	080252a4 	.word	0x080252a4
 800e1ac:	080252c8 	.word	0x080252c8
 800e1b0:	08025108 	.word	0x08025108
 800e1b4:	080252dc 	.word	0x080252dc
 800e1b8:	0800d8ed 	.word	0x0800d8ed
 800e1bc:	0800d825 	.word	0x0800d825
 800e1c0:	0800d995 	.word	0x0800d995
 800e1c4:	08025300 	.word	0x08025300

0800e1c8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e1dc:	7afb      	ldrb	r3, [r7, #11]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00d      	beq.n	800e1fe <lwip_netconn_do_delconn+0x36>
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1ec:	2b10      	cmp	r3, #16
 800e1ee:	d006      	beq.n	800e1fe <lwip_netconn_do_delconn+0x36>
 800e1f0:	4b60      	ldr	r3, [pc, #384]	; (800e374 <lwip_netconn_do_delconn+0x1ac>)
 800e1f2:	f240 425e 	movw	r2, #1118	; 0x45e
 800e1f6:	4960      	ldr	r1, [pc, #384]	; (800e378 <lwip_netconn_do_delconn+0x1b0>)
 800e1f8:	4860      	ldr	r0, [pc, #384]	; (800e37c <lwip_netconn_do_delconn+0x1b4>)
 800e1fa:	f00d fd2f 	bl	801bc5c <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e1fe:	7afb      	ldrb	r3, [r7, #11]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d005      	beq.n	800e210 <lwip_netconn_do_delconn+0x48>
 800e204:	7afb      	ldrb	r3, [r7, #11]
 800e206:	2b02      	cmp	r3, #2
 800e208:	d002      	beq.n	800e210 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e20a:	7afb      	ldrb	r3, [r7, #11]
 800e20c:	2b03      	cmp	r3, #3
 800e20e:	d109      	bne.n	800e224 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e210:	7afb      	ldrb	r3, [r7, #11]
 800e212:	2b03      	cmp	r3, #3
 800e214:	d10a      	bne.n	800e22c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	7f1b      	ldrb	r3, [r3, #28]
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	2b00      	cmp	r3, #0
 800e222:	d103      	bne.n	800e22c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	22fb      	movs	r2, #251	; 0xfb
 800e228:	711a      	strb	r2, [r3, #4]
 800e22a:	e097      	b.n	800e35c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e22c:	7afb      	ldrb	r3, [r7, #11]
 800e22e:	2b03      	cmp	r3, #3
 800e230:	d10d      	bne.n	800e24e <lwip_netconn_do_delconn+0x86>
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	7f1b      	ldrb	r3, [r3, #28]
 800e238:	f003 0304 	and.w	r3, r3, #4
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d106      	bne.n	800e24e <lwip_netconn_do_delconn+0x86>
 800e240:	4b4c      	ldr	r3, [pc, #304]	; (800e374 <lwip_netconn_do_delconn+0x1ac>)
 800e242:	f240 427a 	movw	r2, #1146	; 0x47a
 800e246:	494e      	ldr	r1, [pc, #312]	; (800e380 <lwip_netconn_do_delconn+0x1b8>)
 800e248:	484c      	ldr	r0, [pc, #304]	; (800e37c <lwip_netconn_do_delconn+0x1b4>)
 800e24a:	f00d fd07 	bl	801bc5c <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2200      	movs	r2, #0
 800e252:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff fdd1 	bl	800de00 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d05f      	beq.n	800e328 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e272:	2b10      	cmp	r3, #16
 800e274:	d00d      	beq.n	800e292 <lwip_netconn_do_delconn+0xca>
 800e276:	2b20      	cmp	r3, #32
 800e278:	d151      	bne.n	800e31e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f00a faaa 	bl	80187e4 <udp_remove>
          break;
 800e290:	e046      	b.n	800e320 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d006      	beq.n	800e2aa <lwip_netconn_do_delconn+0xe2>
 800e29c:	4b35      	ldr	r3, [pc, #212]	; (800e374 <lwip_netconn_do_delconn+0x1ac>)
 800e29e:	f240 4294 	movw	r2, #1172	; 0x494
 800e2a2:	4938      	ldr	r1, [pc, #224]	; (800e384 <lwip_netconn_do_delconn+0x1bc>)
 800e2a4:	4835      	ldr	r0, [pc, #212]	; (800e37c <lwip_netconn_do_delconn+0x1b4>)
 800e2a6:	f00d fcd9 	bl	801bc5c <printf>
          msg->conn->state = NETCONN_CLOSE;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2204      	movs	r2, #4
 800e2b0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2203      	movs	r2, #3
 800e2b6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff fe18 	bl	800defc <lwip_netconn_do_close_internal>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d04b      	beq.n	800e36a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	785b      	ldrb	r3, [r3, #1]
 800e2d8:	2b04      	cmp	r3, #4
 800e2da:	d006      	beq.n	800e2ea <lwip_netconn_do_delconn+0x122>
 800e2dc:	4b25      	ldr	r3, [pc, #148]	; (800e374 <lwip_netconn_do_delconn+0x1ac>)
 800e2de:	f240 429a 	movw	r2, #1178	; 0x49a
 800e2e2:	4929      	ldr	r1, [pc, #164]	; (800e388 <lwip_netconn_do_delconn+0x1c0>)
 800e2e4:	4825      	ldr	r0, [pc, #148]	; (800e37c <lwip_netconn_do_delconn+0x1b4>)
 800e2e6:	f00d fcb9 	bl	801bc5c <printf>
            UNLOCK_TCPIP_CORE();
 800e2ea:	4828      	ldr	r0, [pc, #160]	; (800e38c <lwip_netconn_do_delconn+0x1c4>)
 800e2ec:	f00d f88b 	bl	801b406 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	330c      	adds	r3, #12
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f00c ffe2 	bl	801b2c2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800e2fe:	4823      	ldr	r0, [pc, #140]	; (800e38c <lwip_netconn_do_delconn+0x1c4>)
 800e300:	f00d f872 	bl	801b3e8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	785b      	ldrb	r3, [r3, #1]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d02d      	beq.n	800e36a <lwip_netconn_do_delconn+0x1a2>
 800e30e:	4b19      	ldr	r3, [pc, #100]	; (800e374 <lwip_netconn_do_delconn+0x1ac>)
 800e310:	f240 429e 	movw	r2, #1182	; 0x49e
 800e314:	491c      	ldr	r1, [pc, #112]	; (800e388 <lwip_netconn_do_delconn+0x1c0>)
 800e316:	4819      	ldr	r0, [pc, #100]	; (800e37c <lwip_netconn_do_delconn+0x1b4>)
 800e318:	f00d fca0 	bl	801bc5c <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800e31c:	e025      	b.n	800e36a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800e31e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2200      	movs	r2, #0
 800e326:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d007      	beq.n	800e342 <lwip_netconn_do_delconn+0x17a>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	6810      	ldr	r0, [r2, #0]
 800e33c:	2200      	movs	r2, #0
 800e33e:	2100      	movs	r1, #0
 800e340:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <lwip_netconn_do_delconn+0x194>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	6810      	ldr	r0, [r2, #0]
 800e356:	2200      	movs	r2, #0
 800e358:	2102      	movs	r1, #2
 800e35a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	330c      	adds	r3, #12
 800e362:	4618      	mov	r0, r3
 800e364:	f00c fff8 	bl	801b358 <sys_sem_valid>
 800e368:	e000      	b.n	800e36c <lwip_netconn_do_delconn+0x1a4>
          return;
 800e36a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	08024fa0 	.word	0x08024fa0
 800e378:	08025310 	.word	0x08025310
 800e37c:	08024fe4 	.word	0x08024fe4
 800e380:	08025324 	.word	0x08025324
 800e384:	08025344 	.word	0x08025344
 800e388:	08025360 	.word	0x08025360
 800e38c:	2000873c 	.word	0x2000873c

0800e390 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d025      	beq.n	800e3f2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3b0:	2b10      	cmp	r3, #16
 800e3b2:	d00e      	beq.n	800e3d2 <lwip_netconn_do_bind+0x42>
 800e3b4:	2b20      	cmp	r3, #32
 800e3b6:	d119      	bne.n	800e3ec <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6858      	ldr	r0, [r3, #4]
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	6899      	ldr	r1, [r3, #8]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	899b      	ldrh	r3, [r3, #12]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	f00a f964 	bl	8018694 <udp_bind>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]
        break;
 800e3d0:	e011      	b.n	800e3f6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6858      	ldr	r0, [r3, #4]
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	6899      	ldr	r1, [r3, #8]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	899b      	ldrh	r3, [r3, #12]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	f003 fee1 	bl	80121a8 <tcp_bind>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	73fb      	strb	r3, [r7, #15]
        break;
 800e3ea:	e004      	b.n	800e3f6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e3ec:	23fa      	movs	r3, #250	; 0xfa
 800e3ee:	73fb      	strb	r3, [r7, #15]
        break;
 800e3f0:	e001      	b.n	800e3f6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e3f2:	23fa      	movs	r3, #250	; 0xfa
 800e3f4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	7bfa      	ldrb	r2, [r7, #15]
 800e3fa:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e3fc:	bf00      	nop
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff f875 	bl	800d504 <netconn_err>
 800e41a:	4603      	mov	r3, r0
 800e41c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d134      	bne.n	800e490 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d02d      	beq.n	800e48c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	d123      	bne.n	800e486 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10c      	bne.n	800e462 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4619      	mov	r1, r3
 800e456:	4610      	mov	r0, r2
 800e458:	f009 ff32 	bl	80182c0 <udp_send>
 800e45c:	4603      	mov	r3, r0
 800e45e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e460:	e016      	b.n	800e490 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6858      	ldr	r0, [r3, #4]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	6819      	ldr	r1, [r3, #0]
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	f103 0208 	add.w	r2, r3, #8
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	899b      	ldrh	r3, [r3, #12]
 800e47c:	f009 ff54 	bl	8018328 <udp_sendto>
 800e480:	4603      	mov	r3, r0
 800e482:	73fb      	strb	r3, [r7, #15]
          break;
 800e484:	e004      	b.n	800e490 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e486:	23f5      	movs	r3, #245	; 0xf5
 800e488:	73fb      	strb	r3, [r7, #15]
          break;
 800e48a:	e001      	b.n	800e490 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800e48c:	23f5      	movs	r3, #245	; 0xf5
 800e48e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	7bfa      	ldrb	r2, [r7, #15]
 800e494:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e496:	bf00      	nop
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b086      	sub	sp, #24
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d022      	beq.n	800e500 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4c4:	2b10      	cmp	r3, #16
 800e4c6:	d11b      	bne.n	800e500 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4d4:	d202      	bcs.n	800e4dc <lwip_netconn_do_recv+0x3e>
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	e001      	b.n	800e4e0 <lwip_netconn_do_recv+0x42>
 800e4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4e0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	89fa      	ldrh	r2, [r7, #14]
 800e4ea:	4611      	mov	r1, r2
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f004 f829 	bl	8012544 <tcp_recved>
        remaining -= recved;
 800e4f2:	89fb      	ldrh	r3, [r7, #14]
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1e6      	bne.n	800e4ce <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e500:	bf00      	nop
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b088      	sub	sp, #32
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d106      	bne.n	800e52c <lwip_netconn_do_writemore+0x24>
 800e51e:	4b96      	ldr	r3, [pc, #600]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e520:	f240 6273 	movw	r2, #1651	; 0x673
 800e524:	4995      	ldr	r1, [pc, #596]	; (800e77c <lwip_netconn_do_writemore+0x274>)
 800e526:	4896      	ldr	r0, [pc, #600]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e528:	f00d fb98 	bl	801bc5c <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	785b      	ldrb	r3, [r3, #1]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d006      	beq.n	800e542 <lwip_netconn_do_writemore+0x3a>
 800e534:	4b90      	ldr	r3, [pc, #576]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e536:	f240 6274 	movw	r2, #1652	; 0x674
 800e53a:	4992      	ldr	r1, [pc, #584]	; (800e784 <lwip_netconn_do_writemore+0x27c>)
 800e53c:	4890      	ldr	r0, [pc, #576]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e53e:	f00d fb8d 	bl	801bc5c <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6a1b      	ldr	r3, [r3, #32]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d106      	bne.n	800e558 <lwip_netconn_do_writemore+0x50>
 800e54a:	4b8b      	ldr	r3, [pc, #556]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e54c:	f240 6275 	movw	r2, #1653	; 0x675
 800e550:	498d      	ldr	r1, [pc, #564]	; (800e788 <lwip_netconn_do_writemore+0x280>)
 800e552:	488b      	ldr	r0, [pc, #556]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e554:	f00d fb82 	bl	801bc5c <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d106      	bne.n	800e56e <lwip_netconn_do_writemore+0x66>
 800e560:	4b85      	ldr	r3, [pc, #532]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e562:	f240 6276 	movw	r2, #1654	; 0x676
 800e566:	4989      	ldr	r1, [pc, #548]	; (800e78c <lwip_netconn_do_writemore+0x284>)
 800e568:	4885      	ldr	r0, [pc, #532]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e56a:	f00d fb77 	bl	801bc5c <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	699a      	ldr	r2, [r3, #24]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a1b      	ldr	r3, [r3, #32]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d306      	bcc.n	800e58c <lwip_netconn_do_writemore+0x84>
 800e57e:	4b7e      	ldr	r3, [pc, #504]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e580:	f240 6277 	movw	r2, #1655	; 0x677
 800e584:	4982      	ldr	r1, [pc, #520]	; (800e790 <lwip_netconn_do_writemore+0x288>)
 800e586:	487e      	ldr	r0, [pc, #504]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e588:	f00d fb68 	bl	801bc5c <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	899b      	ldrh	r3, [r3, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <lwip_netconn_do_writemore+0x9c>
 800e596:	4b78      	ldr	r3, [pc, #480]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e598:	f240 6279 	movw	r2, #1657	; 0x679
 800e59c:	497d      	ldr	r1, [pc, #500]	; (800e794 <lwip_netconn_do_writemore+0x28c>)
 800e59e:	4878      	ldr	r0, [pc, #480]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e5a0:	f00d fb5c 	bl	801bc5c <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
 800e5a8:	7f1b      	ldrb	r3, [r3, #28]
 800e5aa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7f1b      	ldrb	r3, [r3, #28]
 800e5b0:	f003 0302 	and.w	r3, r3, #2
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d104      	bne.n	800e5c2 <lwip_netconn_do_writemore+0xba>
 800e5b8:	7ebb      	ldrb	r3, [r7, #26]
 800e5ba:	f003 0304 	and.w	r3, r3, #4
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <lwip_netconn_do_writemore+0xbe>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e000      	b.n	800e5c8 <lwip_netconn_do_writemore+0xc0>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6a1b      	ldr	r3, [r3, #32]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	4413      	add	r3, r2
 800e5da:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a1b      	ldr	r3, [r3, #32]
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a1b      	ldr	r3, [r3, #32]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f4:	d307      	bcc.n	800e606 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e5f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5fa:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e5fc:	7ebb      	ldrb	r3, [r7, #26]
 800e5fe:	f043 0302 	orr.w	r3, r3, #2
 800e602:	76bb      	strb	r3, [r7, #26]
 800e604:	e001      	b.n	800e60a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e612:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e614:	89fa      	ldrh	r2, [r7, #14]
 800e616:	8bbb      	ldrh	r3, [r7, #28]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d216      	bcs.n	800e64a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e61c:	89fb      	ldrh	r3, [r7, #14]
 800e61e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e620:	7e3b      	ldrb	r3, [r7, #24]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00d      	beq.n	800e642 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e626:	8bbb      	ldrh	r3, [r7, #28]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10e      	bne.n	800e64a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6a1b      	ldr	r3, [r3, #32]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d102      	bne.n	800e63c <lwip_netconn_do_writemore+0x134>
 800e636:	f06f 0306 	mvn.w	r3, #6
 800e63a:	e000      	b.n	800e63e <lwip_netconn_do_writemore+0x136>
 800e63c:	2300      	movs	r3, #0
 800e63e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e640:	e07d      	b.n	800e73e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e642:	7ebb      	ldrb	r3, [r7, #26]
 800e644:	f043 0302 	orr.w	r3, r3, #2
 800e648:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	691a      	ldr	r2, [r3, #16]
 800e650:	8bbb      	ldrh	r3, [r7, #28]
 800e652:	441a      	add	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a1b      	ldr	r3, [r3, #32]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d906      	bls.n	800e66e <lwip_netconn_do_writemore+0x166>
 800e660:	4b45      	ldr	r3, [pc, #276]	; (800e778 <lwip_netconn_do_writemore+0x270>)
 800e662:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e666:	494c      	ldr	r1, [pc, #304]	; (800e798 <lwip_netconn_do_writemore+0x290>)
 800e668:	4845      	ldr	r0, [pc, #276]	; (800e780 <lwip_netconn_do_writemore+0x278>)
 800e66a:	f00d faf7 	bl	801bc5c <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e66e:	8bbb      	ldrh	r3, [r7, #28]
 800e670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e674:	4293      	cmp	r3, r2
 800e676:	d103      	bne.n	800e680 <lwip_netconn_do_writemore+0x178>
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e67e:	d209      	bcs.n	800e694 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e684:	8bba      	ldrh	r2, [r7, #28]
 800e686:	429a      	cmp	r2, r3
 800e688:	d10b      	bne.n	800e6a2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a1b      	ldr	r3, [r3, #32]
 800e68e:	899b      	ldrh	r3, [r3, #12]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d906      	bls.n	800e6a2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e694:	2301      	movs	r3, #1
 800e696:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e698:	7ebb      	ldrb	r3, [r7, #26]
 800e69a:	f043 0302 	orr.w	r3, r3, #2
 800e69e:	76bb      	strb	r3, [r7, #26]
 800e6a0:	e001      	b.n	800e6a6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6858      	ldr	r0, [r3, #4]
 800e6aa:	7ebb      	ldrb	r3, [r7, #26]
 800e6ac:	8bba      	ldrh	r2, [r7, #28]
 800e6ae:	6979      	ldr	r1, [r7, #20]
 800e6b0:	f007 fd6a 	bl	8016188 <tcp_write>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e6b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d12c      	bne.n	800e71a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a1b      	ldr	r3, [r3, #32]
 800e6c4:	6999      	ldr	r1, [r3, #24]
 800e6c6:	8bba      	ldrh	r2, [r7, #28]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a1b      	ldr	r3, [r3, #32]
 800e6cc:	440a      	add	r2, r1
 800e6ce:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a1b      	ldr	r3, [r3, #32]
 800e6d4:	6919      	ldr	r1, [r3, #16]
 800e6d6:	8bba      	ldrh	r2, [r7, #28]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6a1b      	ldr	r3, [r3, #32]
 800e6dc:	440a      	add	r2, r1
 800e6de:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6a1b      	ldr	r3, [r3, #32]
 800e6e4:	691a      	ldr	r2, [r3, #16]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d113      	bne.n	800e71a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	899a      	ldrh	r2, [r3, #12]
 800e6f8:	3a01      	subs	r2, #1
 800e6fa:	b292      	uxth	r2, r2
 800e6fc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	899b      	ldrh	r3, [r3, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d008      	beq.n	800e71a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a1b      	ldr	r3, [r3, #32]
 800e70c:	689a      	ldr	r2, [r3, #8]
 800e70e:	3208      	adds	r2, #8
 800e710:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a1b      	ldr	r3, [r3, #32]
 800e716:	2200      	movs	r2, #0
 800e718:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e71a:	7e7b      	ldrb	r3, [r7, #25]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d004      	beq.n	800e72a <lwip_netconn_do_writemore+0x222>
 800e720:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e724:	2b00      	cmp	r3, #0
 800e726:	f43f af50 	beq.w	800e5ca <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e72a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d004      	beq.n	800e73c <lwip_netconn_do_writemore+0x234>
 800e732:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73a:	d146      	bne.n	800e7ca <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e73c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e73e:	7e3b      	ldrb	r3, [r7, #24]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d02b      	beq.n	800e79c <lwip_netconn_do_writemore+0x294>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a1b      	ldr	r3, [r3, #32]
 800e748:	699a      	ldr	r2, [r3, #24]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	429a      	cmp	r2, r3
 800e752:	d223      	bcs.n	800e79c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d005      	beq.n	800e768 <lwip_netconn_do_writemore+0x260>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e760:	2200      	movs	r2, #0
 800e762:	2103      	movs	r1, #3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	7f1b      	ldrb	r3, [r3, #28]
 800e76c:	f043 0310 	orr.w	r3, r3, #16
 800e770:	b2da      	uxtb	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	771a      	strb	r2, [r3, #28]
 800e776:	e028      	b.n	800e7ca <lwip_netconn_do_writemore+0x2c2>
 800e778:	08024fa0 	.word	0x08024fa0
 800e77c:	080250f8 	.word	0x080250f8
 800e780:	08024fe4 	.word	0x08024fe4
 800e784:	08025400 	.word	0x08025400
 800e788:	08025108 	.word	0x08025108
 800e78c:	08025420 	.word	0x08025420
 800e790:	08025438 	.word	0x08025438
 800e794:	08025478 	.word	0x08025478
 800e798:	080254a0 	.word	0x080254a0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e7a4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e7a8:	d305      	bcc.n	800e7b6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d909      	bls.n	800e7ca <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d005      	beq.n	800e7ca <lwip_netconn_do_writemore+0x2c2>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	2103      	movs	r1, #3
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e7ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d11d      	bne.n	800e80e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6a1b      	ldr	r3, [r3, #32]
 800e7d6:	699a      	ldr	r2, [r3, #24]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a1b      	ldr	r3, [r3, #32]
 800e7dc:	695b      	ldr	r3, [r3, #20]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d002      	beq.n	800e7e8 <lwip_netconn_do_writemore+0x2e0>
 800e7e2:	7e3b      	ldrb	r3, [r7, #24]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f008 fab3 	bl	8016d5c <tcp_output>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e7fa:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e7fe:	f113 0f04 	cmn.w	r3, #4
 800e802:	d12c      	bne.n	800e85e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e804:	7b3b      	ldrb	r3, [r7, #12]
 800e806:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e808:	2301      	movs	r3, #1
 800e80a:	76fb      	strb	r3, [r7, #27]
 800e80c:	e027      	b.n	800e85e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e80e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e816:	d120      	bne.n	800e85a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f008 fa9d 	bl	8016d5c <tcp_output>
 800e822:	4603      	mov	r3, r0
 800e824:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e826:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e82a:	f113 0f04 	cmn.w	r3, #4
 800e82e:	d104      	bne.n	800e83a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e830:	7b7b      	ldrb	r3, [r7, #13]
 800e832:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e834:	2301      	movs	r3, #1
 800e836:	76fb      	strb	r3, [r7, #27]
 800e838:	e011      	b.n	800e85e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e83a:	7e3b      	ldrb	r3, [r7, #24]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00e      	beq.n	800e85e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d102      	bne.n	800e850 <lwip_netconn_do_writemore+0x348>
 800e84a:	f06f 0306 	mvn.w	r3, #6
 800e84e:	e000      	b.n	800e852 <lwip_netconn_do_writemore+0x34a>
 800e850:	2300      	movs	r3, #0
 800e852:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e854:	2301      	movs	r3, #1
 800e856:	76fb      	strb	r3, [r7, #27]
 800e858:	e001      	b.n	800e85e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e85a:	2301      	movs	r3, #1
 800e85c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e85e:	7efb      	ldrb	r3, [r7, #27]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d015      	beq.n	800e890 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a1b      	ldr	r3, [r3, #32]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	330c      	adds	r3, #12
 800e86c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	7ffa      	ldrb	r2, [r7, #31]
 800e874:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e882:	78fb      	ldrb	r3, [r7, #3]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d006      	beq.n	800e896 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e888:	68b8      	ldr	r0, [r7, #8]
 800e88a:	f00c fd4b 	bl	801b324 <sys_sem_signal>
 800e88e:	e002      	b.n	800e896 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e890:	f04f 33ff 	mov.w	r3, #4294967295
 800e894:	e000      	b.n	800e898 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3720      	adds	r7, #32
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	785b      	ldrb	r3, [r3, #1]
 800e8b2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d069      	beq.n	800e992 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e8c8:	2b10      	cmp	r3, #16
 800e8ca:	d162      	bne.n	800e992 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e8d0:	2b03      	cmp	r3, #3
 800e8d2:	d002      	beq.n	800e8da <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e8d4:	7afb      	ldrb	r3, [r7, #11]
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d05b      	beq.n	800e992 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e8da:	7afb      	ldrb	r3, [r7, #11]
 800e8dc:	2b03      	cmp	r3, #3
 800e8de:	d103      	bne.n	800e8e8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	22f5      	movs	r2, #245	; 0xf5
 800e8e4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e8e6:	e059      	b.n	800e99c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e8e8:	7afb      	ldrb	r3, [r7, #11]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d103      	bne.n	800e8f6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	22fb      	movs	r2, #251	; 0xfb
 800e8f2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e8f4:	e052      	b.n	800e99c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	7a1b      	ldrb	r3, [r3, #8]
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d004      	beq.n	800e90c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff fa7a 	bl	800de00 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6a1b      	ldr	r3, [r3, #32]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d006      	beq.n	800e924 <lwip_netconn_do_close+0x84>
 800e916:	4b23      	ldr	r3, [pc, #140]	; (800e9a4 <lwip_netconn_do_close+0x104>)
 800e918:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e91c:	4922      	ldr	r1, [pc, #136]	; (800e9a8 <lwip_netconn_do_close+0x108>)
 800e91e:	4823      	ldr	r0, [pc, #140]	; (800e9ac <lwip_netconn_do_close+0x10c>)
 800e920:	f00d f99c 	bl	801bc5c <printf>
      msg->conn->state = NETCONN_CLOSE;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2204      	movs	r2, #4
 800e92a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2100      	movs	r1, #0
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7ff fade 	bl	800defc <lwip_netconn_do_close_internal>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d029      	beq.n	800e99a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	785b      	ldrb	r3, [r3, #1]
 800e94c:	2b04      	cmp	r3, #4
 800e94e:	d006      	beq.n	800e95e <lwip_netconn_do_close+0xbe>
 800e950:	4b14      	ldr	r3, [pc, #80]	; (800e9a4 <lwip_netconn_do_close+0x104>)
 800e952:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e956:	4916      	ldr	r1, [pc, #88]	; (800e9b0 <lwip_netconn_do_close+0x110>)
 800e958:	4814      	ldr	r0, [pc, #80]	; (800e9ac <lwip_netconn_do_close+0x10c>)
 800e95a:	f00d f97f 	bl	801bc5c <printf>
        UNLOCK_TCPIP_CORE();
 800e95e:	4815      	ldr	r0, [pc, #84]	; (800e9b4 <lwip_netconn_do_close+0x114>)
 800e960:	f00c fd51 	bl	801b406 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	330c      	adds	r3, #12
 800e96a:	2100      	movs	r1, #0
 800e96c:	4618      	mov	r0, r3
 800e96e:	f00c fca8 	bl	801b2c2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e972:	4810      	ldr	r0, [pc, #64]	; (800e9b4 <lwip_netconn_do_close+0x114>)
 800e974:	f00c fd38 	bl	801b3e8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	785b      	ldrb	r3, [r3, #1]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00b      	beq.n	800e99a <lwip_netconn_do_close+0xfa>
 800e982:	4b08      	ldr	r3, [pc, #32]	; (800e9a4 <lwip_netconn_do_close+0x104>)
 800e984:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e988:	4909      	ldr	r1, [pc, #36]	; (800e9b0 <lwip_netconn_do_close+0x110>)
 800e98a:	4808      	ldr	r0, [pc, #32]	; (800e9ac <lwip_netconn_do_close+0x10c>)
 800e98c:	f00d f966 	bl	801bc5c <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e990:	e003      	b.n	800e99a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	22f5      	movs	r2, #245	; 0xf5
 800e996:	711a      	strb	r2, [r3, #4]
 800e998:	e000      	b.n	800e99c <lwip_netconn_do_close+0xfc>
      return;
 800e99a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	08024fa0 	.word	0x08024fa0
 800e9a8:	08025344 	.word	0x08025344
 800e9ac:	08024fe4 	.word	0x08024fe4
 800e9b0:	08025360 	.word	0x08025360
 800e9b4:	2000873c 	.word	0x2000873c

0800e9b8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d013      	beq.n	800e9ee <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00b      	beq.n	800e9e6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f002 fddc 	bl	8011590 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	605a      	str	r2, [r3, #4]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	685a      	ldr	r2, [r3, #4]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e9e6:	6879      	ldr	r1, [r7, #4]
 800e9e8:	2006      	movs	r0, #6
 800e9ea:	f001 ff53 	bl	8010894 <memp_free>
  }
}
 800e9ee:	bf00      	nop
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
	...

0800e9f8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d108      	bne.n	800ea1c <netbuf_data+0x24>
 800ea0a:	4b1b      	ldr	r3, [pc, #108]	; (800ea78 <netbuf_data+0x80>)
 800ea0c:	22c6      	movs	r2, #198	; 0xc6
 800ea0e:	491b      	ldr	r1, [pc, #108]	; (800ea7c <netbuf_data+0x84>)
 800ea10:	481b      	ldr	r0, [pc, #108]	; (800ea80 <netbuf_data+0x88>)
 800ea12:	f00d f923 	bl	801bc5c <printf>
 800ea16:	f06f 030f 	mvn.w	r3, #15
 800ea1a:	e029      	b.n	800ea70 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d108      	bne.n	800ea34 <netbuf_data+0x3c>
 800ea22:	4b15      	ldr	r3, [pc, #84]	; (800ea78 <netbuf_data+0x80>)
 800ea24:	22c7      	movs	r2, #199	; 0xc7
 800ea26:	4917      	ldr	r1, [pc, #92]	; (800ea84 <netbuf_data+0x8c>)
 800ea28:	4815      	ldr	r0, [pc, #84]	; (800ea80 <netbuf_data+0x88>)
 800ea2a:	f00d f917 	bl	801bc5c <printf>
 800ea2e:	f06f 030f 	mvn.w	r3, #15
 800ea32:	e01d      	b.n	800ea70 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d108      	bne.n	800ea4c <netbuf_data+0x54>
 800ea3a:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <netbuf_data+0x80>)
 800ea3c:	22c8      	movs	r2, #200	; 0xc8
 800ea3e:	4912      	ldr	r1, [pc, #72]	; (800ea88 <netbuf_data+0x90>)
 800ea40:	480f      	ldr	r0, [pc, #60]	; (800ea80 <netbuf_data+0x88>)
 800ea42:	f00d f90b 	bl	801bc5c <printf>
 800ea46:	f06f 030f 	mvn.w	r3, #15
 800ea4a:	e011      	b.n	800ea70 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d102      	bne.n	800ea5a <netbuf_data+0x62>
    return ERR_BUF;
 800ea54:	f06f 0301 	mvn.w	r3, #1
 800ea58:	e00a      	b.n	800ea70 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	895a      	ldrh	r2, [r3, #10]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ea6e:	2300      	movs	r3, #0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	080254f8 	.word	0x080254f8
 800ea7c:	08025600 	.word	0x08025600
 800ea80:	08025548 	.word	0x08025548
 800ea84:	0802561c 	.word	0x0802561c
 800ea88:	0802563c 	.word	0x0802563c

0800ea8c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d108      	bne.n	800eaac <netbuf_next+0x20>
 800ea9a:	4b11      	ldr	r3, [pc, #68]	; (800eae0 <netbuf_next+0x54>)
 800ea9c:	22e0      	movs	r2, #224	; 0xe0
 800ea9e:	4911      	ldr	r1, [pc, #68]	; (800eae4 <netbuf_next+0x58>)
 800eaa0:	4811      	ldr	r0, [pc, #68]	; (800eae8 <netbuf_next+0x5c>)
 800eaa2:	f00d f8db 	bl	801bc5c <printf>
 800eaa6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaaa:	e014      	b.n	800ead6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d102      	bne.n	800eabc <netbuf_next+0x30>
    return -1;
 800eab6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaba:	e00c      	b.n	800ead6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <netbuf_next+0x48>
    return 1;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e000      	b.n	800ead6 <netbuf_next+0x4a>
  }
  return 0;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	080254f8 	.word	0x080254f8
 800eae4:	08025658 	.word	0x08025658
 800eae8:	08025548 	.word	0x08025548

0800eaec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800eaf6:	f009 f9e9 	bl	8017ecc <sys_timeouts_sleeptime>
 800eafa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb02:	d10b      	bne.n	800eb1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800eb04:	4813      	ldr	r0, [pc, #76]	; (800eb54 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb06:	f00c fc7e 	bl	801b406 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	6839      	ldr	r1, [r7, #0]
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f00c fb36 	bl	801b180 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800eb14:	480f      	ldr	r0, [pc, #60]	; (800eb54 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb16:	f00c fc67 	bl	801b3e8 <sys_mutex_lock>
    return;
 800eb1a:	e018      	b.n	800eb4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d102      	bne.n	800eb28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800eb22:	f009 f999 	bl	8017e58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eb26:	e7e6      	b.n	800eaf6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800eb28:	480a      	ldr	r0, [pc, #40]	; (800eb54 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb2a:	f00c fc6c 	bl	801b406 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	6839      	ldr	r1, [r7, #0]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f00c fb24 	bl	801b180 <sys_arch_mbox_fetch>
 800eb38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800eb3a:	4806      	ldr	r0, [pc, #24]	; (800eb54 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb3c:	f00c fc54 	bl	801b3e8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb46:	d102      	bne.n	800eb4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800eb48:	f009 f986 	bl	8017e58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eb4c:	e7d3      	b.n	800eaf6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	2000873c 	.word	0x2000873c

0800eb58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800eb60:	4810      	ldr	r0, [pc, #64]	; (800eba4 <tcpip_thread+0x4c>)
 800eb62:	f00c fc41 	bl	801b3e8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800eb66:	4b10      	ldr	r3, [pc, #64]	; (800eba8 <tcpip_thread+0x50>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d005      	beq.n	800eb7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800eb6e:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <tcpip_thread+0x50>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a0e      	ldr	r2, [pc, #56]	; (800ebac <tcpip_thread+0x54>)
 800eb74:	6812      	ldr	r2, [r2, #0]
 800eb76:	4610      	mov	r0, r2
 800eb78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800eb7a:	f107 030c 	add.w	r3, r7, #12
 800eb7e:	4619      	mov	r1, r3
 800eb80:	480b      	ldr	r0, [pc, #44]	; (800ebb0 <tcpip_thread+0x58>)
 800eb82:	f7ff ffb3 	bl	800eaec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d106      	bne.n	800eb9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800eb8c:	4b09      	ldr	r3, [pc, #36]	; (800ebb4 <tcpip_thread+0x5c>)
 800eb8e:	2291      	movs	r2, #145	; 0x91
 800eb90:	4909      	ldr	r1, [pc, #36]	; (800ebb8 <tcpip_thread+0x60>)
 800eb92:	480a      	ldr	r0, [pc, #40]	; (800ebbc <tcpip_thread+0x64>)
 800eb94:	f00d f862 	bl	801bc5c <printf>
      continue;
 800eb98:	e003      	b.n	800eba2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f000 f80f 	bl	800ebc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800eba2:	e7ea      	b.n	800eb7a <tcpip_thread+0x22>
 800eba4:	2000873c 	.word	0x2000873c
 800eba8:	20004a78 	.word	0x20004a78
 800ebac:	20004a7c 	.word	0x20004a7c
 800ebb0:	20004a80 	.word	0x20004a80
 800ebb4:	08025690 	.word	0x08025690
 800ebb8:	080256c0 	.word	0x080256c0
 800ebbc:	080256e0 	.word	0x080256e0

0800ebc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	d026      	beq.n	800ec1e <tcpip_thread_handle_msg+0x5e>
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	dc2b      	bgt.n	800ec2c <tcpip_thread_handle_msg+0x6c>
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <tcpip_thread_handle_msg+0x1e>
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d015      	beq.n	800ec08 <tcpip_thread_handle_msg+0x48>
 800ebdc:	e026      	b.n	800ec2c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	6850      	ldr	r0, [r2, #4]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	6892      	ldr	r2, [r2, #8]
 800ebea:	4611      	mov	r1, r2
 800ebec:	4798      	blx	r3
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d004      	beq.n	800ebfe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f002 fcc9 	bl	8011590 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ebfe:	6879      	ldr	r1, [r7, #4]
 800ec00:	2009      	movs	r0, #9
 800ec02:	f001 fe47 	bl	8010894 <memp_free>
      break;
 800ec06:	e018      	b.n	800ec3a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	6892      	ldr	r2, [r2, #8]
 800ec10:	4610      	mov	r0, r2
 800ec12:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ec14:	6879      	ldr	r1, [r7, #4]
 800ec16:	2008      	movs	r0, #8
 800ec18:	f001 fe3c 	bl	8010894 <memp_free>
      break;
 800ec1c:	e00d      	b.n	800ec3a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	6892      	ldr	r2, [r2, #8]
 800ec26:	4610      	mov	r0, r2
 800ec28:	4798      	blx	r3
      break;
 800ec2a:	e006      	b.n	800ec3a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ec2c:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <tcpip_thread_handle_msg+0x84>)
 800ec2e:	22cf      	movs	r2, #207	; 0xcf
 800ec30:	4905      	ldr	r1, [pc, #20]	; (800ec48 <tcpip_thread_handle_msg+0x88>)
 800ec32:	4806      	ldr	r0, [pc, #24]	; (800ec4c <tcpip_thread_handle_msg+0x8c>)
 800ec34:	f00d f812 	bl	801bc5c <printf>
      break;
 800ec38:	bf00      	nop
  }
}
 800ec3a:	bf00      	nop
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	08025690 	.word	0x08025690
 800ec48:	080256c0 	.word	0x080256c0
 800ec4c:	080256e0 	.word	0x080256e0

0800ec50 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ec5c:	481a      	ldr	r0, [pc, #104]	; (800ecc8 <tcpip_inpkt+0x78>)
 800ec5e:	f00c faea 	bl	801b236 <sys_mbox_valid>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d105      	bne.n	800ec74 <tcpip_inpkt+0x24>
 800ec68:	4b18      	ldr	r3, [pc, #96]	; (800eccc <tcpip_inpkt+0x7c>)
 800ec6a:	22fc      	movs	r2, #252	; 0xfc
 800ec6c:	4918      	ldr	r1, [pc, #96]	; (800ecd0 <tcpip_inpkt+0x80>)
 800ec6e:	4819      	ldr	r0, [pc, #100]	; (800ecd4 <tcpip_inpkt+0x84>)
 800ec70:	f00c fff4 	bl	801bc5c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ec74:	2009      	movs	r0, #9
 800ec76:	f001 fdbb 	bl	80107f0 <memp_malloc>
 800ec7a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ec82:	f04f 33ff 	mov.w	r3, #4294967295
 800ec86:	e01a      	b.n	800ecbe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eca0:	6979      	ldr	r1, [r7, #20]
 800eca2:	4809      	ldr	r0, [pc, #36]	; (800ecc8 <tcpip_inpkt+0x78>)
 800eca4:	f00c fa52 	bl	801b14c <sys_mbox_trypost>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d006      	beq.n	800ecbc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ecae:	6979      	ldr	r1, [r7, #20]
 800ecb0:	2009      	movs	r0, #9
 800ecb2:	f001 fdef 	bl	8010894 <memp_free>
    return ERR_MEM;
 800ecb6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecba:	e000      	b.n	800ecbe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ecbc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20004a80 	.word	0x20004a80
 800eccc:	08025690 	.word	0x08025690
 800ecd0:	08025708 	.word	0x08025708
 800ecd4:	080256e0 	.word	0x080256e0

0800ecd8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ece8:	f003 0318 	and.w	r3, r3, #24
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d006      	beq.n	800ecfe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ecf0:	4a08      	ldr	r2, [pc, #32]	; (800ed14 <tcpip_input+0x3c>)
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff ffab 	bl	800ec50 <tcpip_inpkt>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	e005      	b.n	800ed0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ecfe:	4a06      	ldr	r2, [pc, #24]	; (800ed18 <tcpip_input+0x40>)
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7ff ffa4 	bl	800ec50 <tcpip_inpkt>
 800ed08:	4603      	mov	r3, r0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	0801af39 	.word	0x0801af39
 800ed18:	08019bf9 	.word	0x08019bf9

0800ed1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ed26:	4819      	ldr	r0, [pc, #100]	; (800ed8c <tcpip_try_callback+0x70>)
 800ed28:	f00c fa85 	bl	801b236 <sys_mbox_valid>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <tcpip_try_callback+0x24>
 800ed32:	4b17      	ldr	r3, [pc, #92]	; (800ed90 <tcpip_try_callback+0x74>)
 800ed34:	f240 125d 	movw	r2, #349	; 0x15d
 800ed38:	4916      	ldr	r1, [pc, #88]	; (800ed94 <tcpip_try_callback+0x78>)
 800ed3a:	4817      	ldr	r0, [pc, #92]	; (800ed98 <tcpip_try_callback+0x7c>)
 800ed3c:	f00c ff8e 	bl	801bc5c <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ed40:	2008      	movs	r0, #8
 800ed42:	f001 fd55 	bl	80107f0 <memp_malloc>
 800ed46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d102      	bne.n	800ed54 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ed4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed52:	e017      	b.n	800ed84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2201      	movs	r2, #1
 800ed58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ed66:	68f9      	ldr	r1, [r7, #12]
 800ed68:	4808      	ldr	r0, [pc, #32]	; (800ed8c <tcpip_try_callback+0x70>)
 800ed6a:	f00c f9ef 	bl	801b14c <sys_mbox_trypost>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d006      	beq.n	800ed82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed74:	68f9      	ldr	r1, [r7, #12]
 800ed76:	2008      	movs	r0, #8
 800ed78:	f001 fd8c 	bl	8010894 <memp_free>
    return ERR_MEM;
 800ed7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed80:	e000      	b.n	800ed84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20004a80 	.word	0x20004a80
 800ed90:	08025690 	.word	0x08025690
 800ed94:	08025708 	.word	0x08025708
 800ed98:	080256e0 	.word	0x080256e0

0800ed9c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800eda8:	4806      	ldr	r0, [pc, #24]	; (800edc4 <tcpip_send_msg_wait_sem+0x28>)
 800edaa:	f00c fb1d 	bl	801b3e8 <sys_mutex_lock>
  fn(apimsg);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	68b8      	ldr	r0, [r7, #8]
 800edb2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800edb4:	4803      	ldr	r0, [pc, #12]	; (800edc4 <tcpip_send_msg_wait_sem+0x28>)
 800edb6:	f00c fb26 	bl	801b406 <sys_mutex_unlock>
  return ERR_OK;
 800edba:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	2000873c 	.word	0x2000873c

0800edc8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af02      	add	r7, sp, #8
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800edd2:	f001 f885 	bl	800fee0 <lwip_init>

  tcpip_init_done = initfunc;
 800edd6:	4a17      	ldr	r2, [pc, #92]	; (800ee34 <tcpip_init+0x6c>)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800eddc:	4a16      	ldr	r2, [pc, #88]	; (800ee38 <tcpip_init+0x70>)
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ede2:	2106      	movs	r1, #6
 800ede4:	4815      	ldr	r0, [pc, #84]	; (800ee3c <tcpip_init+0x74>)
 800ede6:	f00c f97d 	bl	801b0e4 <sys_mbox_new>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d006      	beq.n	800edfe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800edf0:	4b13      	ldr	r3, [pc, #76]	; (800ee40 <tcpip_init+0x78>)
 800edf2:	f240 2261 	movw	r2, #609	; 0x261
 800edf6:	4913      	ldr	r1, [pc, #76]	; (800ee44 <tcpip_init+0x7c>)
 800edf8:	4813      	ldr	r0, [pc, #76]	; (800ee48 <tcpip_init+0x80>)
 800edfa:	f00c ff2f 	bl	801bc5c <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800edfe:	4813      	ldr	r0, [pc, #76]	; (800ee4c <tcpip_init+0x84>)
 800ee00:	f00c fad6 	bl	801b3b0 <sys_mutex_new>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d006      	beq.n	800ee18 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ee0a:	4b0d      	ldr	r3, [pc, #52]	; (800ee40 <tcpip_init+0x78>)
 800ee0c:	f240 2265 	movw	r2, #613	; 0x265
 800ee10:	490f      	ldr	r1, [pc, #60]	; (800ee50 <tcpip_init+0x88>)
 800ee12:	480d      	ldr	r0, [pc, #52]	; (800ee48 <tcpip_init+0x80>)
 800ee14:	f00c ff22 	bl	801bc5c <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ee18:	2300      	movs	r3, #0
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee20:	2200      	movs	r2, #0
 800ee22:	490c      	ldr	r1, [pc, #48]	; (800ee54 <tcpip_init+0x8c>)
 800ee24:	480c      	ldr	r0, [pc, #48]	; (800ee58 <tcpip_init+0x90>)
 800ee26:	f00c fafb 	bl	801b420 <sys_thread_new>
}
 800ee2a:	bf00      	nop
 800ee2c:	3708      	adds	r7, #8
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	20004a78 	.word	0x20004a78
 800ee38:	20004a7c 	.word	0x20004a7c
 800ee3c:	20004a80 	.word	0x20004a80
 800ee40:	08025690 	.word	0x08025690
 800ee44:	08025718 	.word	0x08025718
 800ee48:	080256e0 	.word	0x080256e0
 800ee4c:	2000873c 	.word	0x2000873c
 800ee50:	0802573c 	.word	0x0802573c
 800ee54:	0800eb59 	.word	0x0800eb59
 800ee58:	08025760 	.word	0x08025760

0800ee5c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <fs_open+0x16>
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d102      	bne.n	800ee78 <fs_open+0x1c>
    return ERR_ARG;
 800ee72:	f06f 030f 	mvn.w	r3, #15
 800ee76:	e037      	b.n	800eee8 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f7f3 fe0e 	bl	8002a9c <fs_open_custom>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d004      	beq.n	800ee90 <fs_open+0x34>
    file->is_custom_file = 1;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	e02b      	b.n	800eee8 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ee96:	4b16      	ldr	r3, [pc, #88]	; (800eef0 <fs_open+0x94>)
 800ee98:	60fb      	str	r3, [r7, #12]
 800ee9a:	e020      	b.n	800eede <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	4619      	mov	r1, r3
 800eea2:	6838      	ldr	r0, [r7, #0]
 800eea4:	f7f1 f9b4 	bl	8000210 <strcmp>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d114      	bne.n	800eed8 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	689a      	ldr	r2, [r3, #8]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	68da      	ldr	r2, [r3, #12]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	68da      	ldr	r2, [r3, #12]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	7c1a      	ldrb	r2, [r3, #16]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e007      	b.n	800eee8 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	60fb      	str	r3, [r7, #12]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1db      	bne.n	800ee9c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800eee4:	f06f 0305 	mvn.w	r3, #5
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	0802903c 	.word	0x0802903c

0800eef4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	7c5b      	ldrb	r3, [r3, #17]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <fs_close+0x16>
    fs_close_custom(file);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7f3 ff39 	bl	8002d7c <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685a      	ldr	r2, [r3, #4]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	1ad3      	subs	r3, r2, r3
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ef38:	2230      	movs	r2, #48	; 0x30
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f00c fc07 	bl	801b750 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ef42:	bf00      	nop
 800ef44:	3708      	adds	r7, #8
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b082      	sub	sp, #8
 800ef4e:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ef50:	2030      	movs	r0, #48	; 0x30
 800ef52:	f001 facb 	bl	80104ec <mem_malloc>
 800ef56:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff ffe6 	bl	800ef30 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ef64:	687b      	ldr	r3, [r7, #4]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3708      	adds	r7, #8
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b082      	sub	sp, #8
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	695b      	ldr	r3, [r3, #20]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d007      	beq.n	800ef8e <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	695b      	ldr	r3, [r3, #20]
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7ff ffb6 	bl	800eef4 <fs_close>
    hs->handle = NULL;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d007      	beq.n	800efa6 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f002 faf8 	bl	8011590 <pbuf_free>
    hs->req = NULL;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800efa6:	bf00      	nop
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <http_state_free+0x1a>
    http_state_eof(hs);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f7ff ffd6 	bl	800ef6e <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f001 f8f8 	bl	80101b8 <mem_free>
  }
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b086      	sub	sp, #24
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
 800efdc:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d106      	bne.n	800eff2 <http_write+0x22>
 800efe4:	4b2c      	ldr	r3, [pc, #176]	; (800f098 <http_write+0xc8>)
 800efe6:	f240 2219 	movw	r2, #537	; 0x219
 800efea:	492c      	ldr	r1, [pc, #176]	; (800f09c <http_write+0xcc>)
 800efec:	482c      	ldr	r0, [pc, #176]	; (800f0a0 <http_write+0xd0>)
 800efee:	f00c fe35 	bl	801bc5c <printf>
  len = *length;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	881b      	ldrh	r3, [r3, #0]
 800eff6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800eff8:	8afb      	ldrh	r3, [r7, #22]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d101      	bne.n	800f002 <http_write+0x32>
    return ERR_OK;
 800effe:	2300      	movs	r3, #0
 800f000:	e045      	b.n	800f08e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f008:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800f00a:	8aba      	ldrh	r2, [r7, #20]
 800f00c:	8afb      	ldrh	r3, [r7, #22]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d201      	bcs.n	800f016 <http_write+0x46>
    len = max_len;
 800f012:	8abb      	ldrh	r3, [r7, #20]
 800f014:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f01a:	005b      	lsls	r3, r3, #1
 800f01c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800f01e:	8afa      	ldrh	r2, [r7, #22]
 800f020:	8abb      	ldrh	r3, [r7, #20]
 800f022:	429a      	cmp	r2, r3
 800f024:	d901      	bls.n	800f02a <http_write+0x5a>
    len = max_len;
 800f026:	8abb      	ldrh	r3, [r7, #20]
 800f028:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800f02a:	78fb      	ldrb	r3, [r7, #3]
 800f02c:	8afa      	ldrh	r2, [r7, #22]
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f007 f8a9 	bl	8016188 <tcp_write>
 800f036:	4603      	mov	r3, r0
 800f038:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800f03a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f042:	d10f      	bne.n	800f064 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d004      	beq.n	800f058 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800f054:	2b08      	cmp	r3, #8
 800f056:	d902      	bls.n	800f05e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800f058:	2301      	movs	r3, #1
 800f05a:	82fb      	strh	r3, [r7, #22]
 800f05c:	e002      	b.n	800f064 <http_write+0x94>
      } else {
        len /= 2;
 800f05e:	8afb      	ldrh	r3, [r7, #22]
 800f060:	085b      	lsrs	r3, r3, #1
 800f062:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800f064:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06c:	d102      	bne.n	800f074 <http_write+0xa4>
 800f06e:	8afb      	ldrh	r3, [r7, #22]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d8da      	bhi.n	800f02a <http_write+0x5a>

  if (err == ERR_OK) {
 800f074:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d103      	bne.n	800f084 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	8afa      	ldrh	r2, [r7, #22]
 800f080:	801a      	strh	r2, [r3, #0]
 800f082:	e002      	b.n	800f08a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800f08a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	080257b0 	.word	0x080257b0
 800f09c:	080257e8 	.word	0x080257e8
 800f0a0:	080257f8 	.word	0x080257f8

0800f0a4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b086      	sub	sp, #24
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00b      	beq.n	800f0d0 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d007      	beq.n	800f0d0 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800f0c0:	4b1f      	ldr	r3, [pc, #124]	; (800f140 <http_close_or_abort_conn+0x9c>)
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800f0c6:	223f      	movs	r2, #63	; 0x3f
 800f0c8:	491d      	ldr	r1, [pc, #116]	; (800f140 <http_close_or_abort_conn+0x9c>)
 800f0ca:	68b8      	ldr	r0, [r7, #8]
 800f0cc:	f7f4 fe02 	bl	8003cd4 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f004 f91a 	bl	801330c <tcp_arg>
  altcp_recv(pcb, NULL);
 800f0d8:	2100      	movs	r1, #0
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f004 f928 	bl	8013330 <tcp_recv>
  altcp_err(pcb, NULL);
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f004 f968 	bl	80133b8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f004 f99d 	bl	801342c <tcp_poll>
  altcp_sent(pcb, NULL);
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f004 f93d 	bl	8013374 <tcp_sent>
  if (hs != NULL) {
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 800f100:	68b8      	ldr	r0, [r7, #8]
 800f102:	f7ff ff54 	bl	800efae <http_state_free>
  }

  if (abort_conn) {
 800f106:	79fb      	ldrb	r3, [r7, #7]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d004      	beq.n	800f116 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f003 f83f 	bl	8012190 <tcp_abort>
    return ERR_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	e00f      	b.n	800f136 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f002 fef4 	bl	8011f04 <tcp_close>
 800f11c:	4603      	mov	r3, r0
 800f11e:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800f120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d004      	beq.n	800f132 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f128:	2204      	movs	r2, #4
 800f12a:	4906      	ldr	r1, [pc, #24]	; (800f144 <http_close_or_abort_conn+0xa0>)
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f004 f97d 	bl	801342c <tcp_poll>
  }
  return err;
 800f132:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20004e84 	.word	0x20004e84
 800f144:	0800fb17 	.word	0x0800fb17

0800f148 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800f152:	2200      	movs	r2, #0
 800f154:	6839      	ldr	r1, [r7, #0]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f7ff ffa4 	bl	800f0a4 <http_close_or_abort_conn>
 800f15c:	4603      	mov	r3, r0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
 800f16e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7ff ffe8 	bl	800f148 <http_close_conn>
  }
}
 800f178:	bf00      	nop
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d105      	bne.n	800f19e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800f192:	6839      	ldr	r1, [r7, #0]
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f7ff ffe6 	bl	800f166 <http_eof>
    return 0;
 800f19a:	2300      	movs	r3, #0
 800f19c:	e016      	b.n	800f1cc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff feb5 	bl	800ef12 <fs_bytes_left>
 800f1a8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	dc05      	bgt.n	800f1bc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7ff ffd7 	bl	800f166 <http_eof>
    return 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e007      	b.n	800f1cc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800f1bc:	4b05      	ldr	r3, [pc, #20]	; (800f1d4 <http_check_eof+0x54>)
 800f1be:	f240 429d 	movw	r2, #1181	; 0x49d
 800f1c2:	4905      	ldr	r1, [pc, #20]	; (800f1d8 <http_check_eof+0x58>)
 800f1c4:	4805      	ldr	r0, [pc, #20]	; (800f1dc <http_check_eof+0x5c>)
 800f1c6:	f00c fd49 	bl	801bc5c <printf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800f1ca:	2301      	movs	r3, #1
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	080257b0 	.word	0x080257b0
 800f1d8:	08025820 	.word	0x08025820
 800f1dc:	080257f8 	.word	0x080257f8

0800f1e0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d803      	bhi.n	800f202 <http_send_data_nonssi+0x22>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	e001      	b.n	800f206 <http_send_data_nonssi+0x26>
 800f202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f206:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	6999      	ldr	r1, [r3, #24]
 800f20c:	f107 020c 	add.w	r2, r7, #12
 800f210:	2300      	movs	r3, #0
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7ff fedc 	bl	800efd0 <http_write>
 800f218:	4603      	mov	r3, r0
 800f21a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800f21c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10d      	bne.n	800f240 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800f224:	2301      	movs	r3, #1
 800f226:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	699b      	ldr	r3, [r3, #24]
 800f22c:	89ba      	ldrh	r2, [r7, #12]
 800f22e:	441a      	add	r2, r3
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f238:	89ba      	ldrh	r2, [r7, #12]
 800f23a:	1a9a      	subs	r2, r3, r2
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800f240:	7bfb      	ldrb	r3, [r7, #15]
}
 800f242:	4618      	mov	r0, r3
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b084      	sub	sp, #16
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800f254:	2300      	movs	r3, #0
 800f256:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d101      	bne.n	800f262 <http_send+0x18>
    return 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	e025      	b.n	800f2ae <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f266:	2b00      	cmp	r3, #0
 800f268:	d108      	bne.n	800f27c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff ff87 	bl	800f180 <http_check_eof>
 800f272:	4603      	mov	r3, r0
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <http_send+0x32>
      return 0;
 800f278:	2300      	movs	r3, #0
 800f27a:	e018      	b.n	800f2ae <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff ffae 	bl	800f1e0 <http_send_data_nonssi>
 800f284:	4603      	mov	r3, r0
 800f286:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d10d      	bne.n	800f2ac <http_send+0x62>
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff fe3c 	bl	800ef12 <fs_bytes_left>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dc05      	bgt.n	800f2ac <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff ff5f 	bl	800f166 <http_eof>
    return 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e000      	b.n	800f2ae <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800f2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	4a1c      	ldr	r2, [pc, #112]	; (800f338 <http_get_404_file+0x80>)
 800f2c6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	4610      	mov	r0, r2
 800f2d2:	f7ff fdc3 	bl	800ee5c <fs_open>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d024      	beq.n	800f32c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	4a15      	ldr	r2, [pc, #84]	; (800f33c <http_get_404_file+0x84>)
 800f2e6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	4610      	mov	r0, r2
 800f2f2:	f7ff fdb3 	bl	800ee5c <fs_open>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d014      	beq.n	800f32c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	4a0e      	ldr	r2, [pc, #56]	; (800f340 <http_get_404_file+0x88>)
 800f306:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4619      	mov	r1, r3
 800f310:	4610      	mov	r0, r2
 800f312:	f7ff fda3 	bl	800ee5c <fs_open>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800f31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d004      	beq.n	800f32c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2200      	movs	r2, #0
 800f326:	601a      	str	r2, [r3, #0]
        return NULL;
 800f328:	2300      	movs	r3, #0
 800f32a:	e000      	b.n	800f32e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800f32c:	687b      	ldr	r3, [r7, #4]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	08025858 	.word	0x08025858
 800f33c:	08025864 	.word	0x08025864
 800f340:	08025870 	.word	0x08025870

0800f344 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800f34c:	4b08      	ldr	r3, [pc, #32]	; (800f370 <http_handle_post_finished+0x2c>)
 800f34e:	2200      	movs	r2, #0
 800f350:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800f352:	223f      	movs	r2, #63	; 0x3f
 800f354:	4906      	ldr	r1, [pc, #24]	; (800f370 <http_handle_post_finished+0x2c>)
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7f4 fcbc 	bl	8003cd4 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800f35c:	2200      	movs	r2, #0
 800f35e:	4904      	ldr	r1, [pc, #16]	; (800f370 <http_handle_post_finished+0x2c>)
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fa51 	bl	800f808 <http_find_file>
 800f366:	4603      	mov	r3, r0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	20004e84 	.word	0x20004e84

0800f374 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d010      	beq.n	800f3a6 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f388:	683a      	ldr	r2, [r7, #0]
 800f38a:	8912      	ldrh	r2, [r2, #8]
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d203      	bcs.n	800f398 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	62da      	str	r2, [r3, #44]	; 0x2c
 800f396:	e006      	b.n	800f3a6 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	8912      	ldrh	r2, [r2, #8]
 800f3a0:	1a9a      	subs	r2, r3, r2
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d006      	beq.n	800f3ba <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7f4 f990 	bl	80036d4 <httpd_post_receive_data>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	73fb      	strb	r3, [r7, #15]
 800f3b8:	e001      	b.n	800f3be <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800f3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d104      	bne.n	800f3de <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff ffb5 	bl	800f344 <http_handle_post_finished>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	e000      	b.n	800f3e0 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800f3de:	2300      	movs	r3, #0
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b092      	sub	sp, #72	; 0x48
 800f3ec:	af04      	add	r7, sp, #16
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800f3f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3f8:	1c58      	adds	r0, r3, #1
 800f3fa:	887a      	ldrh	r2, [r7, #2]
 800f3fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3fe:	1c59      	adds	r1, r3, #1
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	1acb      	subs	r3, r1, r3
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	461a      	mov	r2, r3
 800f408:	4964      	ldr	r1, [pc, #400]	; (800f59c <http_post_request+0x1b4>)
 800f40a:	f000 fd33 	bl	800fe74 <lwip_strnstr>
 800f40e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 80bc 	beq.w	800f590 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800f418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f41a:	1c58      	adds	r0, r3, #1
 800f41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f41e:	3301      	adds	r3, #1
 800f420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	461a      	mov	r2, r3
 800f426:	495e      	ldr	r1, [pc, #376]	; (800f5a0 <http_post_request+0x1b8>)
 800f428:	f000 fd24 	bl	800fe74 <lwip_strnstr>
 800f42c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800f42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 80aa 	beq.w	800f58a <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800f436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f438:	3310      	adds	r3, #16
 800f43a:	220a      	movs	r2, #10
 800f43c:	4959      	ldr	r1, [pc, #356]	; (800f5a4 <http_post_request+0x1bc>)
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fd18 	bl	800fe74 <lwip_strnstr>
 800f444:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800f446:	6a3b      	ldr	r3, [r7, #32]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 809e 	beq.w	800f58a <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800f44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f450:	3310      	adds	r3, #16
 800f452:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800f454:	69f8      	ldr	r0, [r7, #28]
 800f456:	f00c f827 	bl	801b4a8 <atoi>
 800f45a:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800f45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d10b      	bne.n	800f47a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b30      	cmp	r3, #48	; 0x30
 800f468:	d104      	bne.n	800f474 <http_post_request+0x8c>
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	3301      	adds	r3, #1
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b0d      	cmp	r3, #13
 800f472:	d002      	beq.n	800f47a <http_post_request+0x92>
            content_len = -1;
 800f474:	f04f 33ff 	mov.w	r3, #4294967295
 800f478:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800f47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f2c0 8081 	blt.w	800f584 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800f482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f484:	3301      	adds	r3, #1
 800f486:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800f488:	887a      	ldrh	r2, [r7, #2]
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	1d19      	adds	r1, r3, #4
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	1acb      	subs	r3, r1, r3
 800f492:	429a      	cmp	r2, r3
 800f494:	db05      	blt.n	800f4a2 <http_post_request+0xba>
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	1d1a      	adds	r2, r3, #4
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	e000      	b.n	800f4a4 <http_post_request+0xbc>
 800f4a2:	887b      	ldrh	r3, [r7, #2]
 800f4a4:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800f4a6:	887a      	ldrh	r2, [r7, #2]
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	1d19      	adds	r1, r3, #4
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	1acb      	subs	r3, r1, r3
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	db05      	blt.n	800f4c0 <http_post_request+0xd8>
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	1d1a      	adds	r2, r3, #4
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	e000      	b.n	800f4c2 <http_post_request+0xda>
 800f4c0:	887b      	ldrh	r3, [r7, #2]
 800f4c2:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800f4c8:	4b37      	ldr	r3, [pc, #220]	; (800f5a8 <http_post_request+0x1c0>)
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800f4d4:	8aba      	ldrh	r2, [r7, #20]
 800f4d6:	f107 0312 	add.w	r3, r7, #18
 800f4da:	9303      	str	r3, [sp, #12]
 800f4dc:	233f      	movs	r3, #63	; 0x3f
 800f4de:	9302      	str	r3, [sp, #8]
 800f4e0:	4b31      	ldr	r3, [pc, #196]	; (800f5a8 <http_post_request+0x1c0>)
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	69ba      	ldr	r2, [r7, #24]
 800f4ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4ee:	68b8      	ldr	r0, [r7, #8]
 800f4f0:	f7f4 f8b2 	bl	8003658 <httpd_post_begin>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800f4f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d13a      	bne.n	800f576 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800f504:	8afb      	ldrh	r3, [r7, #22]
 800f506:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800f508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800f50e:	e007      	b.n	800f520 <http_post_request+0x138>
              start_offset -= q->len;
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	895b      	ldrh	r3, [r3, #10]
 800f514:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800f51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	2b00      	cmp	r3, #0
 800f524:	d004      	beq.n	800f530 <http_post_request+0x148>
 800f526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f528:	895b      	ldrh	r3, [r3, #10]
 800f52a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d2ef      	bcs.n	800f510 <http_post_request+0x128>
            }
            if (q != NULL) {
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00d      	beq.n	800f552 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800f536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f538:	4619      	mov	r1, r3
 800f53a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f53c:	f001 ffa2 	bl	8011484 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800f540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f542:	f002 f8cb 	bl	80116dc <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800f546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f548:	68b8      	ldr	r0, [r7, #8]
 800f54a:	f7ff ff13 	bl	800f374 <http_post_rxpbuf>
 800f54e:	4603      	mov	r3, r0
 800f550:	e020      	b.n	800f594 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f556:	2b00      	cmp	r3, #0
 800f558:	d10b      	bne.n	800f572 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800f55a:	2241      	movs	r2, #65	; 0x41
 800f55c:	2100      	movs	r1, #0
 800f55e:	2000      	movs	r0, #0
 800f560:	f001 fd32 	bl	8010fc8 <pbuf_alloc>
 800f564:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800f566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f568:	68b8      	ldr	r0, [r7, #8]
 800f56a:	f7ff ff03 	bl	800f374 <http_post_rxpbuf>
 800f56e:	4603      	mov	r3, r0
 800f570:	e010      	b.n	800f594 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 800f572:	2300      	movs	r3, #0
 800f574:	e00e      	b.n	800f594 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800f576:	2200      	movs	r2, #0
 800f578:	490b      	ldr	r1, [pc, #44]	; (800f5a8 <http_post_request+0x1c0>)
 800f57a:	68b8      	ldr	r0, [r7, #8]
 800f57c:	f000 f944 	bl	800f808 <http_find_file>
 800f580:	4603      	mov	r3, r0
 800f582:	e007      	b.n	800f594 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800f584:	f06f 030f 	mvn.w	r3, #15
 800f588:	e004      	b.n	800f594 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800f58a:	f06f 030f 	mvn.w	r3, #15
 800f58e:	e001      	b.n	800f594 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800f590:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800f594:	4618      	mov	r0, r3
 800f596:	3738      	adds	r7, #56	; 0x38
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	0802587c 	.word	0x0802587c
 800f5a0:	08025884 	.word	0x08025884
 800f5a4:	08025898 	.word	0x08025898
 800f5a8:	20004e84 	.word	0x20004e84

0800f5ac <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b092      	sub	sp, #72	; 0x48
 800f5b0:	af02      	add	r7, sp, #8
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d106      	bne.n	800f5d0 <http_parse_request+0x24>
 800f5c2:	4b87      	ldr	r3, [pc, #540]	; (800f7e0 <http_parse_request+0x234>)
 800f5c4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800f5c8:	4986      	ldr	r1, [pc, #536]	; (800f7e4 <http_parse_request+0x238>)
 800f5ca:	4887      	ldr	r0, [pc, #540]	; (800f7e8 <http_parse_request+0x23c>)
 800f5cc:	f00c fb46 	bl	801bc5c <printf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d106      	bne.n	800f5e4 <http_parse_request+0x38>
 800f5d6:	4b82      	ldr	r3, [pc, #520]	; (800f7e0 <http_parse_request+0x234>)
 800f5d8:	f240 72af 	movw	r2, #1967	; 0x7af
 800f5dc:	4983      	ldr	r1, [pc, #524]	; (800f7ec <http_parse_request+0x240>)
 800f5de:	4882      	ldr	r0, [pc, #520]	; (800f7e8 <http_parse_request+0x23c>)
 800f5e0:	f00c fb3c 	bl	801bc5c <printf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d103      	bne.n	800f5f4 <http_parse_request+0x48>
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	699b      	ldr	r3, [r3, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800f5f4:	f06f 0307 	mvn.w	r3, #7
 800f5f8:	e0ed      	b.n	800f7d6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d103      	bne.n	800f60a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f606:	621a      	str	r2, [r3, #32]
 800f608:	e005      	b.n	800f616 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	6a1b      	ldr	r3, [r3, #32]
 800f60e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f610:	4618      	mov	r0, r3
 800f612:	f002 f88b 	bl	801172c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800f616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f618:	f002 f860 	bl	80116dc <pbuf_ref>

  if (hs->req->next != NULL) {
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d012      	beq.n	800f64c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	6a1b      	ldr	r3, [r3, #32]
 800f62a:	891b      	ldrh	r3, [r3, #8]
 800f62c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f630:	4293      	cmp	r3, r2
 800f632:	bf28      	it	cs
 800f634:	4613      	movcs	r3, r2
 800f636:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	6a18      	ldr	r0, [r3, #32]
 800f63c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f63e:	2300      	movs	r3, #0
 800f640:	496b      	ldr	r1, [pc, #428]	; (800f7f0 <http_parse_request+0x244>)
 800f642:	f002 f9ab 	bl	801199c <pbuf_copy_partial>
    data = httpd_req_buf;
 800f646:	4b6a      	ldr	r3, [pc, #424]	; (800f7f0 <http_parse_request+0x244>)
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f64a:	e005      	b.n	800f658 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800f64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	895b      	ldrh	r3, [r3, #10]
 800f656:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800f658:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f65a:	2b06      	cmp	r3, #6
 800f65c:	f240 80a1 	bls.w	800f7a2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800f660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f662:	461a      	mov	r2, r3
 800f664:	4963      	ldr	r1, [pc, #396]	; (800f7f4 <http_parse_request+0x248>)
 800f666:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f668:	f000 fc04 	bl	800fe74 <lwip_strnstr>
 800f66c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 8096 	beq.w	800f7a2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800f67e:	2204      	movs	r2, #4
 800f680:	495d      	ldr	r1, [pc, #372]	; (800f7f8 <http_parse_request+0x24c>)
 800f682:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f684:	f00c fb7b 	bl	801bd7e <strncmp>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d103      	bne.n	800f696 <http_parse_request+0xea>
        sp1 = data + 3;
 800f68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f690:	3303      	adds	r3, #3
 800f692:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f694:	e014      	b.n	800f6c0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800f696:	2205      	movs	r2, #5
 800f698:	4958      	ldr	r1, [pc, #352]	; (800f7fc <http_parse_request+0x250>)
 800f69a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f69c:	f00c fb6f 	bl	801bd7e <strncmp>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d105      	bne.n	800f6b2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800f6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6b0:	e006      	b.n	800f6c0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800f6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800f6ba:	f06f 030f 	mvn.w	r3, #15
 800f6be:	e08a      	b.n	800f7d6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800f6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800f6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	8bfa      	ldrh	r2, [r7, #30]
 800f6d6:	494a      	ldr	r1, [pc, #296]	; (800f800 <http_parse_request+0x254>)
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fbcb 	bl	800fe74 <lwip_strnstr>
 800f6de:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800f6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d10c      	bne.n	800f700 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800f6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	8bfa      	ldrh	r2, [r7, #30]
 800f6ec:	4941      	ldr	r1, [pc, #260]	; (800f7f4 <http_parse_request+0x248>)
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f000 fbc0 	bl	800fe74 <lwip_strnstr>
 800f6f4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800f6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d163      	bne.n	800f7c8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800f700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f702:	3301      	adds	r3, #1
 800f704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f706:	1ad3      	subs	r3, r2, r3
 800f708:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800f70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d048      	beq.n	800f7a2 <http_parse_request+0x1f6>
 800f710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f714:	429a      	cmp	r2, r3
 800f716:	d944      	bls.n	800f7a2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800f718:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f71a:	461a      	mov	r2, r3
 800f71c:	4939      	ldr	r1, [pc, #228]	; (800f804 <http_parse_request+0x258>)
 800f71e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f720:	f000 fba8 	bl	800fe74 <lwip_strnstr>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d03b      	beq.n	800f7a2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800f72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72c:	3301      	adds	r3, #1
 800f72e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800f730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f732:	2200      	movs	r2, #0
 800f734:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800f736:	8bbb      	ldrh	r3, [r7, #28]
 800f738:	69ba      	ldr	r2, [r7, #24]
 800f73a:	4413      	add	r3, r2
 800f73c:	2200      	movs	r2, #0
 800f73e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800f740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f742:	2b00      	cmp	r3, #0
 800f744:	d026      	beq.n	800f794 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800f74c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	4613      	mov	r3, r2
 800f758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f75a:	68b9      	ldr	r1, [r7, #8]
 800f75c:	6978      	ldr	r0, [r7, #20]
 800f75e:	f7ff fe43 	bl	800f3e8 <http_post_request>
 800f762:	4603      	mov	r3, r0
 800f764:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800f766:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d00a      	beq.n	800f784 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	2220      	movs	r2, #32
 800f772:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	2220      	movs	r2, #32
 800f778:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800f77a:	8bbb      	ldrh	r3, [r7, #28]
 800f77c:	69ba      	ldr	r2, [r7, #24]
 800f77e:	4413      	add	r3, r2
 800f780:	2220      	movs	r2, #32
 800f782:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800f784:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f788:	f113 0f10 	cmn.w	r3, #16
 800f78c:	d01e      	beq.n	800f7cc <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800f78e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f792:	e020      	b.n	800f7d6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800f794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f796:	69b9      	ldr	r1, [r7, #24]
 800f798:	68b8      	ldr	r0, [r7, #8]
 800f79a:	f000 f835 	bl	800f808 <http_find_file>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	e019      	b.n	800f7d6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f001 ff80 	bl	80116ac <pbuf_clen>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	891b      	ldrh	r3, [r3, #8]
 800f7b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7ba:	d209      	bcs.n	800f7d0 <http_parse_request+0x224>
 800f7bc:	8a3b      	ldrh	r3, [r7, #16]
 800f7be:	2b05      	cmp	r3, #5
 800f7c0:	d806      	bhi.n	800f7d0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800f7c2:	f06f 0304 	mvn.w	r3, #4
 800f7c6:	e006      	b.n	800f7d6 <http_parse_request+0x22a>
          goto badrequest;
 800f7c8:	bf00      	nop
 800f7ca:	e002      	b.n	800f7d2 <http_parse_request+0x226>
              goto badrequest;
 800f7cc:	bf00      	nop
 800f7ce:	e000      	b.n	800f7d2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800f7d0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800f7d2:	f06f 030f 	mvn.w	r3, #15
  }
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3740      	adds	r7, #64	; 0x40
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	080257b0 	.word	0x080257b0
 800f7e4:	0802589c 	.word	0x0802589c
 800f7e8:	080257f8 	.word	0x080257f8
 800f7ec:	080258a8 	.word	0x080258a8
 800f7f0:	20004a84 	.word	0x20004a84
 800f7f4:	08025898 	.word	0x08025898
 800f7f8:	080258b4 	.word	0x080258b4
 800f7fc:	080258bc 	.word	0x080258bc
 800f800:	080258c4 	.word	0x080258c4
 800f804:	0802587c 	.word	0x0802587c

0800f808 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b092      	sub	sp, #72	; 0x48
 800f80c:	af02      	add	r7, sp, #8
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800f814:	2300      	movs	r3, #0
 800f816:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800f818:	2300      	movs	r3, #0
 800f81a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	4618      	mov	r0, r3
 800f826:	f7f0 fcfd 	bl	8000224 <strlen>
 800f82a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d06b      	beq.n	800f90a <http_find_file+0x102>
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f836:	3b01      	subs	r3, #1
 800f838:	4413      	add	r3, r2
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b2f      	cmp	r3, #47	; 0x2f
 800f83e:	d164      	bne.n	800f90a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f840:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f842:	4a53      	ldr	r2, [pc, #332]	; (800f990 <http_find_file+0x188>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d102      	bne.n	800f84e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d15d      	bne.n	800f90a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f850:	3b01      	subs	r3, #1
 800f852:	2b3f      	cmp	r3, #63	; 0x3f
 800f854:	bf28      	it	cs
 800f856:	233f      	movcs	r3, #63	; 0x3f
 800f858:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800f85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d00a      	beq.n	800f876 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f864:	4619      	mov	r1, r3
 800f866:	484a      	ldr	r0, [pc, #296]	; (800f990 <http_find_file+0x188>)
 800f868:	f00b ff4a 	bl	801b700 <memcpy>
      http_uri_buf[copy_len] = 0;
 800f86c:	4a48      	ldr	r2, [pc, #288]	; (800f990 <http_find_file+0x188>)
 800f86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f870:	4413      	add	r3, r2
 800f872:	2200      	movs	r2, #0
 800f874:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f876:	2300      	movs	r3, #0
 800f878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f87a:	e043      	b.n	800f904 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800f87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d028      	beq.n	800f8d4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f884:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800f888:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800f88a:	6a3b      	ldr	r3, [r7, #32]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d01e      	beq.n	800f8ce <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800f890:	4a40      	ldr	r2, [pc, #256]	; (800f994 <http_find_file+0x18c>)
 800f892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f894:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7f0 fcc3 	bl	8000224 <strlen>
 800f89e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800f8a0:	69fa      	ldr	r2, [r7, #28]
 800f8a2:	6a3b      	ldr	r3, [r7, #32]
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	bf28      	it	cs
 800f8a8:	4613      	movcs	r3, r2
 800f8aa:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	4a38      	ldr	r2, [pc, #224]	; (800f990 <http_find_file+0x188>)
 800f8b0:	1898      	adds	r0, r3, r2
 800f8b2:	4a38      	ldr	r2, [pc, #224]	; (800f994 <http_find_file+0x18c>)
 800f8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f8ba:	69ba      	ldr	r2, [r7, #24]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	f00b ff1f 	bl	801b700 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800f8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	4a31      	ldr	r2, [pc, #196]	; (800f990 <http_find_file+0x188>)
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800f8ce:	4b30      	ldr	r3, [pc, #192]	; (800f990 <http_find_file+0x188>)
 800f8d0:	633b      	str	r3, [r7, #48]	; 0x30
 800f8d2:	e004      	b.n	800f8de <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800f8d4:	4a2f      	ldr	r2, [pc, #188]	; (800f994 <http_find_file+0x18c>)
 800f8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f8dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7ff faba 	bl	800ee5c <fs_open>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800f8ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d104      	bne.n	800f8fe <http_find_file+0xf6>
        uri = file_name;
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800f8fc:	e005      	b.n	800f90a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f900:	3301      	adds	r3, #1
 800f902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f906:	2b04      	cmp	r3, #4
 800f908:	d9b8      	bls.n	800f87c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800f90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d124      	bne.n	800f95a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	213f      	movs	r1, #63	; 0x3f
 800f914:	4618      	mov	r0, r3
 800f916:	f00c fa25 	bl	801bd64 <strchr>
 800f91a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800f91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d005      	beq.n	800f92e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800f922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f924:	2200      	movs	r2, #0
 800f926:	701a      	strb	r2, [r3, #0]
      params++;
 800f928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f92a:	3301      	adds	r3, #1
 800f92c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	4611      	mov	r1, r2
 800f934:	4618      	mov	r0, r3
 800f936:	f7ff fa91 	bl	800ee5c <fs_open>
 800f93a:	4603      	mov	r3, r0
 800f93c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800f93e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d102      	bne.n	800f94c <http_find_file+0x144>
      file = &hs->file_handle;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	63bb      	str	r3, [r7, #56]	; 0x38
 800f94a:	e006      	b.n	800f95a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800f94c:	f107 0308 	add.w	r3, r7, #8
 800f950:	4619      	mov	r1, r3
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f7ff fcb0 	bl	800f2b8 <http_get_404_file>
 800f958:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800f95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d106      	bne.n	800f96e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800f960:	f107 0308 	add.w	r3, r7, #8
 800f964:	4619      	mov	r1, r3
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f7ff fca6 	bl	800f2b8 <http_get_404_file>
 800f96c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800f96e:	68ba      	ldr	r2, [r7, #8]
 800f970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f972:	9301      	str	r3, [sp, #4]
 800f974:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	4613      	mov	r3, r2
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f000 f809 	bl	800f998 <http_init_file>
 800f986:	4603      	mov	r3, r0
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3740      	adds	r7, #64	; 0x40
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	20004e84 	.word	0x20004e84
 800f994:	08029050 	.word	0x08029050

0800f998 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b086      	sub	sp, #24
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
 800f9a4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d068      	beq.n	800fa7e <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <http_init_file+0x2a>
 800f9b4:	4b3b      	ldr	r3, [pc, #236]	; (800faa4 <http_init_file+0x10c>)
 800f9b6:	f640 120b 	movw	r2, #2315	; 0x90b
 800f9ba:	493b      	ldr	r1, [pc, #236]	; (800faa8 <http_init_file+0x110>)
 800f9bc:	483b      	ldr	r0, [pc, #236]	; (800faac <http_init_file+0x114>)
 800f9be:	f00c f94d 	bl	801bc5c <printf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	68ba      	ldr	r2, [r7, #8]
 800f9c6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	da06      	bge.n	800f9e6 <http_init_file+0x4e>
 800f9d8:	4b32      	ldr	r3, [pc, #200]	; (800faa4 <http_init_file+0x10c>)
 800f9da:	f640 1234 	movw	r2, #2356	; 0x934
 800f9de:	4934      	ldr	r1, [pc, #208]	; (800fab0 <http_init_file+0x118>)
 800f9e0:	4832      	ldr	r0, [pc, #200]	; (800faac <http_init_file+0x114>)
 800f9e2:	f00c f93b 	bl	801bc5c <printf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	7c5b      	ldrb	r3, [r3, #17]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d007      	beq.n	800f9fe <http_init_file+0x66>
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d103      	bne.n	800f9fe <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	625a      	str	r2, [r3, #36]	; 0x24
 800f9fc:	e004      	b.n	800fa08 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	461a      	mov	r2, r3
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	7c1b      	ldrb	r3, [r3, #16]
 800fa16:	f003 0301 	and.w	r3, r3, #1
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d106      	bne.n	800fa2c <http_init_file+0x94>
 800fa1e:	4b21      	ldr	r3, [pc, #132]	; (800faa4 <http_init_file+0x10c>)
 800fa20:	f640 1243 	movw	r2, #2371	; 0x943
 800fa24:	4923      	ldr	r1, [pc, #140]	; (800fab4 <http_init_file+0x11c>)
 800fa26:	4821      	ldr	r0, [pc, #132]	; (800faac <http_init_file+0x114>)
 800fa28:	f00c f918 	bl	801bc5c <printf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d032      	beq.n	800fa98 <http_init_file+0x100>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	7c1b      	ldrb	r3, [r3, #16]
 800fa38:	f003 0301 	and.w	r3, r3, #1
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d02b      	beq.n	800fa98 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6998      	ldr	r0, [r3, #24]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa48:	461a      	mov	r2, r3
 800fa4a:	491b      	ldr	r1, [pc, #108]	; (800fab8 <http_init_file+0x120>)
 800fa4c:	f000 fa12 	bl	800fe74 <lwip_strnstr>
 800fa50:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d01f      	beq.n	800fa98 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	1d1a      	adds	r2, r3, #4
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	1ad3      	subs	r3, r2, r3
 800fa62:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	699a      	ldr	r2, [r3, #24]
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	441a      	add	r2, r3
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	1ad2      	subs	r2, r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	625a      	str	r2, [r3, #36]	; 0x24
 800fa7c:	e00c      	b.n	800fa98 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2200      	movs	r2, #0
 800fa88:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800fa98:	2300      	movs	r3, #0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3718      	adds	r7, #24
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	080257b0 	.word	0x080257b0
 800faa8:	080258c8 	.word	0x080258c8
 800faac:	080257f8 	.word	0x080257f8
 800fab0:	080258dc 	.word	0x080258dc
 800fab4:	080258fc 	.word	0x080258fc
 800fab8:	0802587c 	.word	0x0802587c

0800fabc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <http_err+0x1c>
    http_state_free(hs);
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f7ff fa6b 	bl	800efae <http_state_free>
  }
}
 800fad8:	bf00      	nop
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	4613      	mov	r3, r2
 800faec:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d101      	bne.n	800fafc <http_sent+0x1c>
    return ERR_OK;
 800faf8:	2300      	movs	r3, #0
 800fafa:	e008      	b.n	800fb0e <http_sent+0x2e>
  }

  hs->retries = 0;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2200      	movs	r2, #0
 800fb00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800fb04:	6979      	ldr	r1, [r7, #20]
 800fb06:	68b8      	ldr	r0, [r7, #8]
 800fb08:	f7ff fb9f 	bl	800f24a <http_send>

  return ERR_OK;
 800fb0c:	2300      	movs	r3, #0
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3718      	adds	r7, #24
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b084      	sub	sp, #16
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
 800fb1e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d107      	bne.n	800fb3a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	6838      	ldr	r0, [r7, #0]
 800fb2e:	f7ff fb0b 	bl	800f148 <http_close_conn>
 800fb32:	4603      	mov	r3, r0
 800fb34:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800fb36:	2300      	movs	r3, #0
 800fb38:	e021      	b.n	800fb7e <http_poll+0x68>
  } else {
    hs->retries++;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb40:	3301      	adds	r3, #1
 800fb42:	b2da      	uxtb	r2, r3
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb50:	2b04      	cmp	r3, #4
 800fb52:	d105      	bne.n	800fb60 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800fb54:	68f9      	ldr	r1, [r7, #12]
 800fb56:	6838      	ldr	r0, [r7, #0]
 800fb58:	f7ff faf6 	bl	800f148 <http_close_conn>
      return ERR_OK;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	e00e      	b.n	800fb7e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d009      	beq.n	800fb7c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800fb68:	68f9      	ldr	r1, [r7, #12]
 800fb6a:	6838      	ldr	r0, [r7, #0]
 800fb6c:	f7ff fb6d 	bl	800f24a <http_send>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800fb76:	6838      	ldr	r0, [r7, #0]
 800fb78:	f007 f8f0 	bl	8016d5c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
 800fb94:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800fb9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d105      	bne.n	800fbae <http_recv+0x26>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d002      	beq.n	800fbae <http_recv+0x26>
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d111      	bne.n	800fbd2 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d008      	beq.n	800fbc6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	891b      	ldrh	r3, [r3, #8]
 800fbb8:	4619      	mov	r1, r3
 800fbba:	68b8      	ldr	r0, [r7, #8]
 800fbbc:	f002 fcc2 	bl	8012544 <tcp_recved>
      pbuf_free(p);
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f001 fce5 	bl	8011590 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800fbc6:	6979      	ldr	r1, [r7, #20]
 800fbc8:	68b8      	ldr	r0, [r7, #8]
 800fbca:	f7ff fabd 	bl	800f148 <http_close_conn>
    return ERR_OK;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	e06f      	b.n	800fcb2 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	891b      	ldrh	r3, [r3, #8]
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	68b8      	ldr	r0, [r7, #8]
 800fbda:	f002 fcb3 	bl	8012544 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d011      	beq.n	800fc0a <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800fbee:	6879      	ldr	r1, [r7, #4]
 800fbf0:	6978      	ldr	r0, [r7, #20]
 800fbf2:	f7ff fbbf 	bl	800f374 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d103      	bne.n	800fc06 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800fbfe:	6979      	ldr	r1, [r7, #20]
 800fc00:	68b8      	ldr	r0, [r7, #8]
 800fc02:	f7ff fb22 	bl	800f24a <http_send>
    }
    return ERR_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	e053      	b.n	800fcb2 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	695b      	ldr	r3, [r3, #20]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d14b      	bne.n	800fcaa <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	6979      	ldr	r1, [r7, #20]
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f7ff fcc8 	bl	800f5ac <http_parse_request>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800fc20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d015      	beq.n	800fc54 <http_recv+0xcc>
 800fc28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc2c:	f113 0f05 	cmn.w	r3, #5
 800fc30:	d010      	beq.n	800fc54 <http_recv+0xcc>
 800fc32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc36:	f113 0f10 	cmn.w	r3, #16
 800fc3a:	d00b      	beq.n	800fc54 <http_recv+0xcc>
 800fc3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc40:	f113 0f08 	cmn.w	r3, #8
 800fc44:	d006      	beq.n	800fc54 <http_recv+0xcc>
 800fc46:	4b1d      	ldr	r3, [pc, #116]	; (800fcbc <http_recv+0x134>)
 800fc48:	f640 2204 	movw	r2, #2564	; 0xa04
 800fc4c:	491c      	ldr	r1, [pc, #112]	; (800fcc0 <http_recv+0x138>)
 800fc4e:	481d      	ldr	r0, [pc, #116]	; (800fcc4 <http_recv+0x13c>)
 800fc50:	f00c f804 	bl	801bc5c <printf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800fc54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc58:	f113 0f05 	cmn.w	r3, #5
 800fc5c:	d00b      	beq.n	800fc76 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	6a1b      	ldr	r3, [r3, #32]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d007      	beq.n	800fc76 <http_recv+0xee>
          pbuf_free(hs->req);
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	6a1b      	ldr	r3, [r3, #32]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f001 fc90 	bl	8011590 <pbuf_free>
          hs->req = NULL;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	2200      	movs	r2, #0
 800fc74:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f001 fc8a 	bl	8011590 <pbuf_free>
      if (parsed == ERR_OK) {
 800fc7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d108      	bne.n	800fc96 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d111      	bne.n	800fcb0 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800fc8c:	6979      	ldr	r1, [r7, #20]
 800fc8e:	68b8      	ldr	r0, [r7, #8]
 800fc90:	f7ff fadb 	bl	800f24a <http_send>
 800fc94:	e00c      	b.n	800fcb0 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 800fc96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc9a:	f113 0f10 	cmn.w	r3, #16
 800fc9e:	d107      	bne.n	800fcb0 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800fca0:	6979      	ldr	r1, [r7, #20]
 800fca2:	68b8      	ldr	r0, [r7, #8]
 800fca4:	f7ff fa50 	bl	800f148 <http_close_conn>
 800fca8:	e002      	b.n	800fcb0 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f001 fc70 	bl	8011590 <pbuf_free>
    }
  }
  return ERR_OK;
 800fcb0:	2300      	movs	r3, #0
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	080257b0 	.word	0x080257b0
 800fcc0:	08025928 	.word	0x08025928
 800fcc4:	080257f8 	.word	0x080257f8

0800fcc8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	4613      	mov	r3, r2
 800fcd4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800fcd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d102      	bne.n	800fce4 <http_accept+0x1c>
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d102      	bne.n	800fcea <http_accept+0x22>
    return ERR_VAL;
 800fce4:	f06f 0305 	mvn.w	r3, #5
 800fce8:	e025      	b.n	800fd36 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800fcea:	2101      	movs	r1, #1
 800fcec:	68b8      	ldr	r0, [r7, #8]
 800fcee:	f003 f90d 	bl	8012f0c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800fcf2:	f7ff f92a 	bl	800ef4a <http_state_alloc>
 800fcf6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d102      	bne.n	800fd04 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800fcfe:	f04f 33ff 	mov.w	r3, #4294967295
 800fd02:	e018      	b.n	800fd36 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800fd0a:	6979      	ldr	r1, [r7, #20]
 800fd0c:	68b8      	ldr	r0, [r7, #8]
 800fd0e:	f003 fafd 	bl	801330c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800fd12:	490b      	ldr	r1, [pc, #44]	; (800fd40 <http_accept+0x78>)
 800fd14:	68b8      	ldr	r0, [r7, #8]
 800fd16:	f003 fb0b 	bl	8013330 <tcp_recv>
  altcp_err(pcb, http_err);
 800fd1a:	490a      	ldr	r1, [pc, #40]	; (800fd44 <http_accept+0x7c>)
 800fd1c:	68b8      	ldr	r0, [r7, #8]
 800fd1e:	f003 fb4b 	bl	80133b8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800fd22:	2204      	movs	r2, #4
 800fd24:	4908      	ldr	r1, [pc, #32]	; (800fd48 <http_accept+0x80>)
 800fd26:	68b8      	ldr	r0, [r7, #8]
 800fd28:	f003 fb80 	bl	801342c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800fd2c:	4907      	ldr	r1, [pc, #28]	; (800fd4c <http_accept+0x84>)
 800fd2e:	68b8      	ldr	r0, [r7, #8]
 800fd30:	f003 fb20 	bl	8013374 <tcp_sent>

  return ERR_OK;
 800fd34:	2300      	movs	r3, #0
}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	0800fb89 	.word	0x0800fb89
 800fd44:	0800fabd 	.word	0x0800fabd
 800fd48:	0800fb17 	.word	0x0800fb17
 800fd4c:	0800fae1 	.word	0x0800fae1

0800fd50 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d029      	beq.n	800fdb6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800fd62:	2101      	movs	r1, #1
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f003 f8d1 	bl	8012f0c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800fd6a:	887b      	ldrh	r3, [r7, #2]
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	4914      	ldr	r1, [pc, #80]	; (800fdc0 <httpd_init_pcb+0x70>)
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f002 fa19 	bl	80121a8 <tcp_bind>
 800fd76:	4603      	mov	r3, r0
 800fd78:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800fd7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d006      	beq.n	800fd90 <httpd_init_pcb+0x40>
 800fd82:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <httpd_init_pcb+0x74>)
 800fd84:	f640 2257 	movw	r2, #2647	; 0xa57
 800fd88:	490f      	ldr	r1, [pc, #60]	; (800fdc8 <httpd_init_pcb+0x78>)
 800fd8a:	4810      	ldr	r0, [pc, #64]	; (800fdcc <httpd_init_pcb+0x7c>)
 800fd8c:	f00b ff66 	bl	801bc5c <printf>
    pcb = altcp_listen(pcb);
 800fd90:	21ff      	movs	r1, #255	; 0xff
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f002 fac0 	bl	8012318 <tcp_listen_with_backlog>
 800fd98:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d106      	bne.n	800fdae <httpd_init_pcb+0x5e>
 800fda0:	4b08      	ldr	r3, [pc, #32]	; (800fdc4 <httpd_init_pcb+0x74>)
 800fda2:	f640 2259 	movw	r2, #2649	; 0xa59
 800fda6:	490a      	ldr	r1, [pc, #40]	; (800fdd0 <httpd_init_pcb+0x80>)
 800fda8:	4808      	ldr	r0, [pc, #32]	; (800fdcc <httpd_init_pcb+0x7c>)
 800fdaa:	f00b ff57 	bl	801bc5c <printf>
    altcp_accept(pcb, http_accept);
 800fdae:	4909      	ldr	r1, [pc, #36]	; (800fdd4 <httpd_init_pcb+0x84>)
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f003 fb23 	bl	80133fc <tcp_accept>
  }
}
 800fdb6:	bf00      	nop
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	08029188 	.word	0x08029188
 800fdc4:	080257b0 	.word	0x080257b0
 800fdc8:	08025954 	.word	0x08025954
 800fdcc:	080257f8 	.word	0x080257f8
 800fdd0:	08025970 	.word	0x08025970
 800fdd4:	0800fcc9 	.word	0x0800fcc9

0800fdd8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800fdde:	202e      	movs	r0, #46	; 0x2e
 800fde0:	f003 fa86 	bl	80132f0 <tcp_new_ip_type>
 800fde4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d106      	bne.n	800fdfa <httpd_init+0x22>
 800fdec:	4b07      	ldr	r3, [pc, #28]	; (800fe0c <httpd_init+0x34>)
 800fdee:	f640 2272 	movw	r2, #2674	; 0xa72
 800fdf2:	4907      	ldr	r1, [pc, #28]	; (800fe10 <httpd_init+0x38>)
 800fdf4:	4807      	ldr	r0, [pc, #28]	; (800fe14 <httpd_init+0x3c>)
 800fdf6:	f00b ff31 	bl	801bc5c <printf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800fdfa:	2150      	movs	r1, #80	; 0x50
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f7ff ffa7 	bl	800fd50 <httpd_init_pcb>
}
 800fe02:	bf00      	nop
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	080257b0 	.word	0x080257b0
 800fe10:	08025990 	.word	0x08025990
 800fe14:	080257f8 	.word	0x080257f8

0800fe18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fe22:	88fb      	ldrh	r3, [r7, #6]
 800fe24:	021b      	lsls	r3, r3, #8
 800fe26:	b21a      	sxth	r2, r3
 800fe28:	88fb      	ldrh	r3, [r7, #6]
 800fe2a:	0a1b      	lsrs	r3, r3, #8
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	b21b      	sxth	r3, r3
 800fe30:	4313      	orrs	r3, r2
 800fe32:	b21b      	sxth	r3, r3
 800fe34:	b29b      	uxth	r3, r3
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fe42:	b480      	push	{r7}
 800fe44:	b083      	sub	sp, #12
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	061a      	lsls	r2, r3, #24
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	021b      	lsls	r3, r3, #8
 800fe52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fe56:	431a      	orrs	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	0a1b      	lsrs	r3, r3, #8
 800fe5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fe60:	431a      	orrs	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	0e1b      	lsrs	r3, r3, #24
 800fe66:	4313      	orrs	r3, r2
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800fe80:	68b8      	ldr	r0, [r7, #8]
 800fe82:	f7f0 f9cf 	bl	8000224 <strlen>
 800fe86:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d101      	bne.n	800fe92 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	e022      	b.n	800fed8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	617b      	str	r3, [r7, #20]
 800fe96:	e012      	b.n	800febe <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	781a      	ldrb	r2, [r3, #0]
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d109      	bne.n	800feb8 <lwip_strnstr+0x44>
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	68b9      	ldr	r1, [r7, #8]
 800fea8:	6978      	ldr	r0, [r7, #20]
 800feaa:	f00b ff68 	bl	801bd7e <strncmp>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	e00f      	b.n	800fed8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	3301      	adds	r3, #1
 800febc:	617b      	str	r3, [r7, #20]
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d007      	beq.n	800fed6 <lwip_strnstr+0x62>
 800fec6:	697a      	ldr	r2, [r7, #20]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	441a      	add	r2, r3
 800fecc:	68f9      	ldr	r1, [r7, #12]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	440b      	add	r3, r1
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d9e0      	bls.n	800fe98 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3718      	adds	r7, #24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fee6:	2300      	movs	r3, #0
 800fee8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800feea:	f00b fa53 	bl	801b394 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800feee:	f000 f8d5 	bl	801009c <mem_init>
  memp_init();
 800fef2:	f000 fc31 	bl	8010758 <memp_init>
  pbuf_init();
  netif_init();
 800fef6:	f000 fcf7 	bl	80108e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fefa:	f008 f81f 	bl	8017f3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fefe:	f001 fdf1 	bl	8011ae4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ff02:	f007 ff61 	bl	8017dc8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ff06:	bf00      	nop
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
	...

0800ff10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	4603      	mov	r3, r0
 800ff18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ff1a:	4b05      	ldr	r3, [pc, #20]	; (800ff30 <ptr_to_mem+0x20>)
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	88fb      	ldrh	r3, [r7, #6]
 800ff20:	4413      	add	r3, r2
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	20004ec4 	.word	0x20004ec4

0800ff34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ff3c:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <mem_to_ptr+0x20>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	b29b      	uxth	r3, r3
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop
 800ff54:	20004ec4 	.word	0x20004ec4

0800ff58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ff60:	4b45      	ldr	r3, [pc, #276]	; (8010078 <plug_holes+0x120>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d206      	bcs.n	800ff78 <plug_holes+0x20>
 800ff6a:	4b44      	ldr	r3, [pc, #272]	; (801007c <plug_holes+0x124>)
 800ff6c:	f240 12df 	movw	r2, #479	; 0x1df
 800ff70:	4943      	ldr	r1, [pc, #268]	; (8010080 <plug_holes+0x128>)
 800ff72:	4844      	ldr	r0, [pc, #272]	; (8010084 <plug_holes+0x12c>)
 800ff74:	f00b fe72 	bl	801bc5c <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ff78:	4b43      	ldr	r3, [pc, #268]	; (8010088 <plug_holes+0x130>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d306      	bcc.n	800ff90 <plug_holes+0x38>
 800ff82:	4b3e      	ldr	r3, [pc, #248]	; (801007c <plug_holes+0x124>)
 800ff84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ff88:	4940      	ldr	r1, [pc, #256]	; (801008c <plug_holes+0x134>)
 800ff8a:	483e      	ldr	r0, [pc, #248]	; (8010084 <plug_holes+0x12c>)
 800ff8c:	f00b fe66 	bl	801bc5c <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	791b      	ldrb	r3, [r3, #4]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d006      	beq.n	800ffa6 <plug_holes+0x4e>
 800ff98:	4b38      	ldr	r3, [pc, #224]	; (801007c <plug_holes+0x124>)
 800ff9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ff9e:	493c      	ldr	r1, [pc, #240]	; (8010090 <plug_holes+0x138>)
 800ffa0:	4838      	ldr	r0, [pc, #224]	; (8010084 <plug_holes+0x12c>)
 800ffa2:	f00b fe5b 	bl	801bc5c <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	881b      	ldrh	r3, [r3, #0]
 800ffaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ffae:	d906      	bls.n	800ffbe <plug_holes+0x66>
 800ffb0:	4b32      	ldr	r3, [pc, #200]	; (801007c <plug_holes+0x124>)
 800ffb2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ffb6:	4937      	ldr	r1, [pc, #220]	; (8010094 <plug_holes+0x13c>)
 800ffb8:	4832      	ldr	r0, [pc, #200]	; (8010084 <plug_holes+0x12c>)
 800ffba:	f00b fe4f 	bl	801bc5c <printf>

  nmem = ptr_to_mem(mem->next);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	881b      	ldrh	r3, [r3, #0]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff ffa4 	bl	800ff10 <ptr_to_mem>
 800ffc8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d024      	beq.n	801001c <plug_holes+0xc4>
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	791b      	ldrb	r3, [r3, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d120      	bne.n	801001c <plug_holes+0xc4>
 800ffda:	4b2b      	ldr	r3, [pc, #172]	; (8010088 <plug_holes+0x130>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d01b      	beq.n	801001c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ffe4:	4b2c      	ldr	r3, [pc, #176]	; (8010098 <plug_holes+0x140>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d102      	bne.n	800fff4 <plug_holes+0x9c>
      lfree = mem;
 800ffee:	4a2a      	ldr	r2, [pc, #168]	; (8010098 <plug_holes+0x140>)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	881a      	ldrh	r2, [r3, #0]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	881b      	ldrh	r3, [r3, #0]
 8010000:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010004:	d00a      	beq.n	801001c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	4618      	mov	r0, r3
 801000c:	f7ff ff80 	bl	800ff10 <ptr_to_mem>
 8010010:	4604      	mov	r4, r0
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff ff8e 	bl	800ff34 <mem_to_ptr>
 8010018:	4603      	mov	r3, r0
 801001a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	885b      	ldrh	r3, [r3, #2]
 8010020:	4618      	mov	r0, r3
 8010022:	f7ff ff75 	bl	800ff10 <ptr_to_mem>
 8010026:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010028:	68ba      	ldr	r2, [r7, #8]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	429a      	cmp	r2, r3
 801002e:	d01f      	beq.n	8010070 <plug_holes+0x118>
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	791b      	ldrb	r3, [r3, #4]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d11b      	bne.n	8010070 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010038:	4b17      	ldr	r3, [pc, #92]	; (8010098 <plug_holes+0x140>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	429a      	cmp	r2, r3
 8010040:	d102      	bne.n	8010048 <plug_holes+0xf0>
      lfree = pmem;
 8010042:	4a15      	ldr	r2, [pc, #84]	; (8010098 <plug_holes+0x140>)
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	881a      	ldrh	r2, [r3, #0]
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010058:	d00a      	beq.n	8010070 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff ff56 	bl	800ff10 <ptr_to_mem>
 8010064:	4604      	mov	r4, r0
 8010066:	68b8      	ldr	r0, [r7, #8]
 8010068:	f7ff ff64 	bl	800ff34 <mem_to_ptr>
 801006c:	4603      	mov	r3, r0
 801006e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010070:	bf00      	nop
 8010072:	3714      	adds	r7, #20
 8010074:	46bd      	mov	sp, r7
 8010076:	bd90      	pop	{r4, r7, pc}
 8010078:	20004ec4 	.word	0x20004ec4
 801007c:	080259ac 	.word	0x080259ac
 8010080:	080259dc 	.word	0x080259dc
 8010084:	080259f4 	.word	0x080259f4
 8010088:	20004ec8 	.word	0x20004ec8
 801008c:	08025a1c 	.word	0x08025a1c
 8010090:	08025a38 	.word	0x08025a38
 8010094:	08025a54 	.word	0x08025a54
 8010098:	20004ed0 	.word	0x20004ed0

0801009c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80100a2:	4b1f      	ldr	r3, [pc, #124]	; (8010120 <mem_init+0x84>)
 80100a4:	3303      	adds	r3, #3
 80100a6:	f023 0303 	bic.w	r3, r3, #3
 80100aa:	461a      	mov	r2, r3
 80100ac:	4b1d      	ldr	r3, [pc, #116]	; (8010124 <mem_init+0x88>)
 80100ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80100b0:	4b1c      	ldr	r3, [pc, #112]	; (8010124 <mem_init+0x88>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80100bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2200      	movs	r2, #0
 80100c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2200      	movs	r2, #0
 80100c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80100ca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80100ce:	f7ff ff1f 	bl	800ff10 <ptr_to_mem>
 80100d2:	4603      	mov	r3, r0
 80100d4:	4a14      	ldr	r2, [pc, #80]	; (8010128 <mem_init+0x8c>)
 80100d6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80100d8:	4b13      	ldr	r3, [pc, #76]	; (8010128 <mem_init+0x8c>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2201      	movs	r2, #1
 80100de:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80100e0:	4b11      	ldr	r3, [pc, #68]	; (8010128 <mem_init+0x8c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80100e8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80100ea:	4b0f      	ldr	r3, [pc, #60]	; (8010128 <mem_init+0x8c>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80100f2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80100f4:	4b0b      	ldr	r3, [pc, #44]	; (8010124 <mem_init+0x88>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4a0c      	ldr	r2, [pc, #48]	; (801012c <mem_init+0x90>)
 80100fa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80100fc:	480c      	ldr	r0, [pc, #48]	; (8010130 <mem_init+0x94>)
 80100fe:	f00b f957 	bl	801b3b0 <sys_mutex_new>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d006      	beq.n	8010116 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010108:	4b0a      	ldr	r3, [pc, #40]	; (8010134 <mem_init+0x98>)
 801010a:	f240 221f 	movw	r2, #543	; 0x21f
 801010e:	490a      	ldr	r1, [pc, #40]	; (8010138 <mem_init+0x9c>)
 8010110:	480a      	ldr	r0, [pc, #40]	; (801013c <mem_init+0xa0>)
 8010112:	f00b fda3 	bl	801bc5c <printf>
  }
}
 8010116:	bf00      	nop
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	20008758 	.word	0x20008758
 8010124:	20004ec4 	.word	0x20004ec4
 8010128:	20004ec8 	.word	0x20004ec8
 801012c:	20004ed0 	.word	0x20004ed0
 8010130:	20004ecc 	.word	0x20004ecc
 8010134:	080259ac 	.word	0x080259ac
 8010138:	08025a80 	.word	0x08025a80
 801013c:	080259f4 	.word	0x080259f4

08010140 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff fef3 	bl	800ff34 <mem_to_ptr>
 801014e:	4603      	mov	r3, r0
 8010150:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	881b      	ldrh	r3, [r3, #0]
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff feda 	bl	800ff10 <ptr_to_mem>
 801015c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	885b      	ldrh	r3, [r3, #2]
 8010162:	4618      	mov	r0, r3
 8010164:	f7ff fed4 	bl	800ff10 <ptr_to_mem>
 8010168:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	881b      	ldrh	r3, [r3, #0]
 801016e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010172:	d818      	bhi.n	80101a6 <mem_link_valid+0x66>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	885b      	ldrh	r3, [r3, #2]
 8010178:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801017c:	d813      	bhi.n	80101a6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010182:	8afa      	ldrh	r2, [r7, #22]
 8010184:	429a      	cmp	r2, r3
 8010186:	d004      	beq.n	8010192 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	881b      	ldrh	r3, [r3, #0]
 801018c:	8afa      	ldrh	r2, [r7, #22]
 801018e:	429a      	cmp	r2, r3
 8010190:	d109      	bne.n	80101a6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010192:	4b08      	ldr	r3, [pc, #32]	; (80101b4 <mem_link_valid+0x74>)
 8010194:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	429a      	cmp	r2, r3
 801019a:	d006      	beq.n	80101aa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	885b      	ldrh	r3, [r3, #2]
 80101a0:	8afa      	ldrh	r2, [r7, #22]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d001      	beq.n	80101aa <mem_link_valid+0x6a>
    return 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	e000      	b.n	80101ac <mem_link_valid+0x6c>
  }
  return 1;
 80101aa:	2301      	movs	r3, #1
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3718      	adds	r7, #24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	20004ec8 	.word	0x20004ec8

080101b8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b088      	sub	sp, #32
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d070      	beq.n	80102a8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f003 0303 	and.w	r3, r3, #3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00d      	beq.n	80101ec <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80101d0:	4b37      	ldr	r3, [pc, #220]	; (80102b0 <mem_free+0xf8>)
 80101d2:	f240 2273 	movw	r2, #627	; 0x273
 80101d6:	4937      	ldr	r1, [pc, #220]	; (80102b4 <mem_free+0xfc>)
 80101d8:	4837      	ldr	r0, [pc, #220]	; (80102b8 <mem_free+0x100>)
 80101da:	f00b fd3f 	bl	801bc5c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80101de:	f00b f945 	bl	801b46c <sys_arch_protect>
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	68f8      	ldr	r0, [r7, #12]
 80101e6:	f00b f94f 	bl	801b488 <sys_arch_unprotect>
    return;
 80101ea:	e05e      	b.n	80102aa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3b08      	subs	r3, #8
 80101f0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80101f2:	4b32      	ldr	r3, [pc, #200]	; (80102bc <mem_free+0x104>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	69fa      	ldr	r2, [r7, #28]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d306      	bcc.n	801020a <mem_free+0x52>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f103 020c 	add.w	r2, r3, #12
 8010202:	4b2f      	ldr	r3, [pc, #188]	; (80102c0 <mem_free+0x108>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	429a      	cmp	r2, r3
 8010208:	d90d      	bls.n	8010226 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801020a:	4b29      	ldr	r3, [pc, #164]	; (80102b0 <mem_free+0xf8>)
 801020c:	f240 227f 	movw	r2, #639	; 0x27f
 8010210:	492c      	ldr	r1, [pc, #176]	; (80102c4 <mem_free+0x10c>)
 8010212:	4829      	ldr	r0, [pc, #164]	; (80102b8 <mem_free+0x100>)
 8010214:	f00b fd22 	bl	801bc5c <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010218:	f00b f928 	bl	801b46c <sys_arch_protect>
 801021c:	6138      	str	r0, [r7, #16]
 801021e:	6938      	ldr	r0, [r7, #16]
 8010220:	f00b f932 	bl	801b488 <sys_arch_unprotect>
    return;
 8010224:	e041      	b.n	80102aa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010226:	4828      	ldr	r0, [pc, #160]	; (80102c8 <mem_free+0x110>)
 8010228:	f00b f8de 	bl	801b3e8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	791b      	ldrb	r3, [r3, #4]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d110      	bne.n	8010256 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010234:	4b1e      	ldr	r3, [pc, #120]	; (80102b0 <mem_free+0xf8>)
 8010236:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801023a:	4924      	ldr	r1, [pc, #144]	; (80102cc <mem_free+0x114>)
 801023c:	481e      	ldr	r0, [pc, #120]	; (80102b8 <mem_free+0x100>)
 801023e:	f00b fd0d 	bl	801bc5c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 8010242:	4821      	ldr	r0, [pc, #132]	; (80102c8 <mem_free+0x110>)
 8010244:	f00b f8df 	bl	801b406 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010248:	f00b f910 	bl	801b46c <sys_arch_protect>
 801024c:	6178      	str	r0, [r7, #20]
 801024e:	6978      	ldr	r0, [r7, #20]
 8010250:	f00b f91a 	bl	801b488 <sys_arch_unprotect>
    return;
 8010254:	e029      	b.n	80102aa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010256:	69f8      	ldr	r0, [r7, #28]
 8010258:	f7ff ff72 	bl	8010140 <mem_link_valid>
 801025c:	4603      	mov	r3, r0
 801025e:	2b00      	cmp	r3, #0
 8010260:	d110      	bne.n	8010284 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010262:	4b13      	ldr	r3, [pc, #76]	; (80102b0 <mem_free+0xf8>)
 8010264:	f240 2295 	movw	r2, #661	; 0x295
 8010268:	4919      	ldr	r1, [pc, #100]	; (80102d0 <mem_free+0x118>)
 801026a:	4813      	ldr	r0, [pc, #76]	; (80102b8 <mem_free+0x100>)
 801026c:	f00b fcf6 	bl	801bc5c <printf>
    LWIP_MEM_FREE_UNPROTECT();
 8010270:	4815      	ldr	r0, [pc, #84]	; (80102c8 <mem_free+0x110>)
 8010272:	f00b f8c8 	bl	801b406 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010276:	f00b f8f9 	bl	801b46c <sys_arch_protect>
 801027a:	61b8      	str	r0, [r7, #24]
 801027c:	69b8      	ldr	r0, [r7, #24]
 801027e:	f00b f903 	bl	801b488 <sys_arch_unprotect>
    return;
 8010282:	e012      	b.n	80102aa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	2200      	movs	r2, #0
 8010288:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801028a:	4b12      	ldr	r3, [pc, #72]	; (80102d4 <mem_free+0x11c>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	69fa      	ldr	r2, [r7, #28]
 8010290:	429a      	cmp	r2, r3
 8010292:	d202      	bcs.n	801029a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010294:	4a0f      	ldr	r2, [pc, #60]	; (80102d4 <mem_free+0x11c>)
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801029a:	69f8      	ldr	r0, [r7, #28]
 801029c:	f7ff fe5c 	bl	800ff58 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80102a0:	4809      	ldr	r0, [pc, #36]	; (80102c8 <mem_free+0x110>)
 80102a2:	f00b f8b0 	bl	801b406 <sys_mutex_unlock>
 80102a6:	e000      	b.n	80102aa <mem_free+0xf2>
    return;
 80102a8:	bf00      	nop
}
 80102aa:	3720      	adds	r7, #32
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	080259ac 	.word	0x080259ac
 80102b4:	08025a9c 	.word	0x08025a9c
 80102b8:	080259f4 	.word	0x080259f4
 80102bc:	20004ec4 	.word	0x20004ec4
 80102c0:	20004ec8 	.word	0x20004ec8
 80102c4:	08025ac0 	.word	0x08025ac0
 80102c8:	20004ecc 	.word	0x20004ecc
 80102cc:	08025adc 	.word	0x08025adc
 80102d0:	08025b04 	.word	0x08025b04
 80102d4:	20004ed0 	.word	0x20004ed0

080102d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b088      	sub	sp, #32
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80102e4:	887b      	ldrh	r3, [r7, #2]
 80102e6:	3303      	adds	r3, #3
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	f023 0303 	bic.w	r3, r3, #3
 80102ee:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80102f0:	8bfb      	ldrh	r3, [r7, #30]
 80102f2:	2b0b      	cmp	r3, #11
 80102f4:	d801      	bhi.n	80102fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80102f6:	230c      	movs	r3, #12
 80102f8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80102fa:	8bfb      	ldrh	r3, [r7, #30]
 80102fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010300:	d803      	bhi.n	801030a <mem_trim+0x32>
 8010302:	8bfa      	ldrh	r2, [r7, #30]
 8010304:	887b      	ldrh	r3, [r7, #2]
 8010306:	429a      	cmp	r2, r3
 8010308:	d201      	bcs.n	801030e <mem_trim+0x36>
    return NULL;
 801030a:	2300      	movs	r3, #0
 801030c:	e0d8      	b.n	80104c0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801030e:	4b6e      	ldr	r3, [pc, #440]	; (80104c8 <mem_trim+0x1f0>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d304      	bcc.n	8010322 <mem_trim+0x4a>
 8010318:	4b6c      	ldr	r3, [pc, #432]	; (80104cc <mem_trim+0x1f4>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	429a      	cmp	r2, r3
 8010320:	d306      	bcc.n	8010330 <mem_trim+0x58>
 8010322:	4b6b      	ldr	r3, [pc, #428]	; (80104d0 <mem_trim+0x1f8>)
 8010324:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010328:	496a      	ldr	r1, [pc, #424]	; (80104d4 <mem_trim+0x1fc>)
 801032a:	486b      	ldr	r0, [pc, #428]	; (80104d8 <mem_trim+0x200>)
 801032c:	f00b fc96 	bl	801bc5c <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010330:	4b65      	ldr	r3, [pc, #404]	; (80104c8 <mem_trim+0x1f0>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	429a      	cmp	r2, r3
 8010338:	d304      	bcc.n	8010344 <mem_trim+0x6c>
 801033a:	4b64      	ldr	r3, [pc, #400]	; (80104cc <mem_trim+0x1f4>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	429a      	cmp	r2, r3
 8010342:	d307      	bcc.n	8010354 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010344:	f00b f892 	bl	801b46c <sys_arch_protect>
 8010348:	60b8      	str	r0, [r7, #8]
 801034a:	68b8      	ldr	r0, [r7, #8]
 801034c:	f00b f89c 	bl	801b488 <sys_arch_unprotect>
    return rmem;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	e0b5      	b.n	80104c0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3b08      	subs	r3, #8
 8010358:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801035a:	69b8      	ldr	r0, [r7, #24]
 801035c:	f7ff fdea 	bl	800ff34 <mem_to_ptr>
 8010360:	4603      	mov	r3, r0
 8010362:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	881a      	ldrh	r2, [r3, #0]
 8010368:	8afb      	ldrh	r3, [r7, #22]
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	b29b      	uxth	r3, r3
 801036e:	3b08      	subs	r3, #8
 8010370:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010372:	8bfa      	ldrh	r2, [r7, #30]
 8010374:	8abb      	ldrh	r3, [r7, #20]
 8010376:	429a      	cmp	r2, r3
 8010378:	d906      	bls.n	8010388 <mem_trim+0xb0>
 801037a:	4b55      	ldr	r3, [pc, #340]	; (80104d0 <mem_trim+0x1f8>)
 801037c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010380:	4956      	ldr	r1, [pc, #344]	; (80104dc <mem_trim+0x204>)
 8010382:	4855      	ldr	r0, [pc, #340]	; (80104d8 <mem_trim+0x200>)
 8010384:	f00b fc6a 	bl	801bc5c <printf>
  if (newsize > size) {
 8010388:	8bfa      	ldrh	r2, [r7, #30]
 801038a:	8abb      	ldrh	r3, [r7, #20]
 801038c:	429a      	cmp	r2, r3
 801038e:	d901      	bls.n	8010394 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010390:	2300      	movs	r3, #0
 8010392:	e095      	b.n	80104c0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010394:	8bfa      	ldrh	r2, [r7, #30]
 8010396:	8abb      	ldrh	r3, [r7, #20]
 8010398:	429a      	cmp	r2, r3
 801039a:	d101      	bne.n	80103a0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	e08f      	b.n	80104c0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80103a0:	484f      	ldr	r0, [pc, #316]	; (80104e0 <mem_trim+0x208>)
 80103a2:	f00b f821 	bl	801b3e8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	881b      	ldrh	r3, [r3, #0]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff fdb0 	bl	800ff10 <ptr_to_mem>
 80103b0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	791b      	ldrb	r3, [r3, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d13f      	bne.n	801043a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80103ba:	69bb      	ldr	r3, [r7, #24]
 80103bc:	881b      	ldrh	r3, [r3, #0]
 80103be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80103c2:	d106      	bne.n	80103d2 <mem_trim+0xfa>
 80103c4:	4b42      	ldr	r3, [pc, #264]	; (80104d0 <mem_trim+0x1f8>)
 80103c6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80103ca:	4946      	ldr	r1, [pc, #280]	; (80104e4 <mem_trim+0x20c>)
 80103cc:	4842      	ldr	r0, [pc, #264]	; (80104d8 <mem_trim+0x200>)
 80103ce:	f00b fc45 	bl	801bc5c <printf>
    /* remember the old next pointer */
    next = mem2->next;
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80103d8:	8afa      	ldrh	r2, [r7, #22]
 80103da:	8bfb      	ldrh	r3, [r7, #30]
 80103dc:	4413      	add	r3, r2
 80103de:	b29b      	uxth	r3, r3
 80103e0:	3308      	adds	r3, #8
 80103e2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80103e4:	4b40      	ldr	r3, [pc, #256]	; (80104e8 <mem_trim+0x210>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	693a      	ldr	r2, [r7, #16]
 80103ea:	429a      	cmp	r2, r3
 80103ec:	d106      	bne.n	80103fc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80103ee:	89fb      	ldrh	r3, [r7, #14]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff fd8d 	bl	800ff10 <ptr_to_mem>
 80103f6:	4603      	mov	r3, r0
 80103f8:	4a3b      	ldr	r2, [pc, #236]	; (80104e8 <mem_trim+0x210>)
 80103fa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80103fc:	89fb      	ldrh	r3, [r7, #14]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff fd86 	bl	800ff10 <ptr_to_mem>
 8010404:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	2200      	movs	r2, #0
 801040a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	89ba      	ldrh	r2, [r7, #12]
 8010410:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	8afa      	ldrh	r2, [r7, #22]
 8010416:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	89fa      	ldrh	r2, [r7, #14]
 801041c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010426:	d047      	beq.n	80104b8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	4618      	mov	r0, r3
 801042e:	f7ff fd6f 	bl	800ff10 <ptr_to_mem>
 8010432:	4602      	mov	r2, r0
 8010434:	89fb      	ldrh	r3, [r7, #14]
 8010436:	8053      	strh	r3, [r2, #2]
 8010438:	e03e      	b.n	80104b8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801043a:	8bfb      	ldrh	r3, [r7, #30]
 801043c:	f103 0214 	add.w	r2, r3, #20
 8010440:	8abb      	ldrh	r3, [r7, #20]
 8010442:	429a      	cmp	r2, r3
 8010444:	d838      	bhi.n	80104b8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010446:	8afa      	ldrh	r2, [r7, #22]
 8010448:	8bfb      	ldrh	r3, [r7, #30]
 801044a:	4413      	add	r3, r2
 801044c:	b29b      	uxth	r3, r3
 801044e:	3308      	adds	r3, #8
 8010450:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801045a:	d106      	bne.n	801046a <mem_trim+0x192>
 801045c:	4b1c      	ldr	r3, [pc, #112]	; (80104d0 <mem_trim+0x1f8>)
 801045e:	f240 3216 	movw	r2, #790	; 0x316
 8010462:	4920      	ldr	r1, [pc, #128]	; (80104e4 <mem_trim+0x20c>)
 8010464:	481c      	ldr	r0, [pc, #112]	; (80104d8 <mem_trim+0x200>)
 8010466:	f00b fbf9 	bl	801bc5c <printf>
    mem2 = ptr_to_mem(ptr2);
 801046a:	89fb      	ldrh	r3, [r7, #14]
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff fd4f 	bl	800ff10 <ptr_to_mem>
 8010472:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010474:	4b1c      	ldr	r3, [pc, #112]	; (80104e8 <mem_trim+0x210>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	429a      	cmp	r2, r3
 801047c:	d202      	bcs.n	8010484 <mem_trim+0x1ac>
      lfree = mem2;
 801047e:	4a1a      	ldr	r2, [pc, #104]	; (80104e8 <mem_trim+0x210>)
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	2200      	movs	r2, #0
 8010488:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	881a      	ldrh	r2, [r3, #0]
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	8afa      	ldrh	r2, [r7, #22]
 8010496:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	89fa      	ldrh	r2, [r7, #14]
 801049c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	881b      	ldrh	r3, [r3, #0]
 80104a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80104a6:	d007      	beq.n	80104b8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	881b      	ldrh	r3, [r3, #0]
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff fd2f 	bl	800ff10 <ptr_to_mem>
 80104b2:	4602      	mov	r2, r0
 80104b4:	89fb      	ldrh	r3, [r7, #14]
 80104b6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80104b8:	4809      	ldr	r0, [pc, #36]	; (80104e0 <mem_trim+0x208>)
 80104ba:	f00a ffa4 	bl	801b406 <sys_mutex_unlock>
  return rmem;
 80104be:	687b      	ldr	r3, [r7, #4]
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3720      	adds	r7, #32
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	20004ec4 	.word	0x20004ec4
 80104cc:	20004ec8 	.word	0x20004ec8
 80104d0:	080259ac 	.word	0x080259ac
 80104d4:	08025b38 	.word	0x08025b38
 80104d8:	080259f4 	.word	0x080259f4
 80104dc:	08025b50 	.word	0x08025b50
 80104e0:	20004ecc 	.word	0x20004ecc
 80104e4:	08025b70 	.word	0x08025b70
 80104e8:	20004ed0 	.word	0x20004ed0

080104ec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b088      	sub	sp, #32
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80104f6:	88fb      	ldrh	r3, [r7, #6]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d101      	bne.n	8010500 <mem_malloc+0x14>
    return NULL;
 80104fc:	2300      	movs	r3, #0
 80104fe:	e0e2      	b.n	80106c6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010500:	88fb      	ldrh	r3, [r7, #6]
 8010502:	3303      	adds	r3, #3
 8010504:	b29b      	uxth	r3, r3
 8010506:	f023 0303 	bic.w	r3, r3, #3
 801050a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801050c:	8bbb      	ldrh	r3, [r7, #28]
 801050e:	2b0b      	cmp	r3, #11
 8010510:	d801      	bhi.n	8010516 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010512:	230c      	movs	r3, #12
 8010514:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010516:	8bbb      	ldrh	r3, [r7, #28]
 8010518:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801051c:	d803      	bhi.n	8010526 <mem_malloc+0x3a>
 801051e:	8bba      	ldrh	r2, [r7, #28]
 8010520:	88fb      	ldrh	r3, [r7, #6]
 8010522:	429a      	cmp	r2, r3
 8010524:	d201      	bcs.n	801052a <mem_malloc+0x3e>
    return NULL;
 8010526:	2300      	movs	r3, #0
 8010528:	e0cd      	b.n	80106c6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801052a:	4869      	ldr	r0, [pc, #420]	; (80106d0 <mem_malloc+0x1e4>)
 801052c:	f00a ff5c 	bl	801b3e8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010530:	4b68      	ldr	r3, [pc, #416]	; (80106d4 <mem_malloc+0x1e8>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	4618      	mov	r0, r3
 8010536:	f7ff fcfd 	bl	800ff34 <mem_to_ptr>
 801053a:	4603      	mov	r3, r0
 801053c:	83fb      	strh	r3, [r7, #30]
 801053e:	e0b7      	b.n	80106b0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010540:	8bfb      	ldrh	r3, [r7, #30]
 8010542:	4618      	mov	r0, r3
 8010544:	f7ff fce4 	bl	800ff10 <ptr_to_mem>
 8010548:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	791b      	ldrb	r3, [r3, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	f040 80a7 	bne.w	80106a2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	881b      	ldrh	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	8bfb      	ldrh	r3, [r7, #30]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	f1a3 0208 	sub.w	r2, r3, #8
 8010562:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010564:	429a      	cmp	r2, r3
 8010566:	f0c0 809c 	bcc.w	80106a2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	461a      	mov	r2, r3
 8010570:	8bfb      	ldrh	r3, [r7, #30]
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	f1a3 0208 	sub.w	r2, r3, #8
 8010578:	8bbb      	ldrh	r3, [r7, #28]
 801057a:	3314      	adds	r3, #20
 801057c:	429a      	cmp	r2, r3
 801057e:	d333      	bcc.n	80105e8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010580:	8bfa      	ldrh	r2, [r7, #30]
 8010582:	8bbb      	ldrh	r3, [r7, #28]
 8010584:	4413      	add	r3, r2
 8010586:	b29b      	uxth	r3, r3
 8010588:	3308      	adds	r3, #8
 801058a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801058c:	8a7b      	ldrh	r3, [r7, #18]
 801058e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010592:	d106      	bne.n	80105a2 <mem_malloc+0xb6>
 8010594:	4b50      	ldr	r3, [pc, #320]	; (80106d8 <mem_malloc+0x1ec>)
 8010596:	f240 3287 	movw	r2, #903	; 0x387
 801059a:	4950      	ldr	r1, [pc, #320]	; (80106dc <mem_malloc+0x1f0>)
 801059c:	4850      	ldr	r0, [pc, #320]	; (80106e0 <mem_malloc+0x1f4>)
 801059e:	f00b fb5d 	bl	801bc5c <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80105a2:	8a7b      	ldrh	r3, [r7, #18]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7ff fcb3 	bl	800ff10 <ptr_to_mem>
 80105aa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2200      	movs	r2, #0
 80105b0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	881a      	ldrh	r2, [r3, #0]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	8bfa      	ldrh	r2, [r7, #30]
 80105be:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	8a7a      	ldrh	r2, [r7, #18]
 80105c4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	2201      	movs	r2, #1
 80105ca:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	881b      	ldrh	r3, [r3, #0]
 80105d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80105d4:	d00b      	beq.n	80105ee <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff fc98 	bl	800ff10 <ptr_to_mem>
 80105e0:	4602      	mov	r2, r0
 80105e2:	8a7b      	ldrh	r3, [r7, #18]
 80105e4:	8053      	strh	r3, [r2, #2]
 80105e6:	e002      	b.n	80105ee <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	2201      	movs	r2, #1
 80105ec:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80105ee:	4b39      	ldr	r3, [pc, #228]	; (80106d4 <mem_malloc+0x1e8>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	697a      	ldr	r2, [r7, #20]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d127      	bne.n	8010648 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80105f8:	4b36      	ldr	r3, [pc, #216]	; (80106d4 <mem_malloc+0x1e8>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80105fe:	e005      	b.n	801060c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	881b      	ldrh	r3, [r3, #0]
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff fc83 	bl	800ff10 <ptr_to_mem>
 801060a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	791b      	ldrb	r3, [r3, #4]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d004      	beq.n	801061e <mem_malloc+0x132>
 8010614:	4b33      	ldr	r3, [pc, #204]	; (80106e4 <mem_malloc+0x1f8>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	69ba      	ldr	r2, [r7, #24]
 801061a:	429a      	cmp	r2, r3
 801061c:	d1f0      	bne.n	8010600 <mem_malloc+0x114>
          }
          lfree = cur;
 801061e:	4a2d      	ldr	r2, [pc, #180]	; (80106d4 <mem_malloc+0x1e8>)
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010624:	4b2b      	ldr	r3, [pc, #172]	; (80106d4 <mem_malloc+0x1e8>)
 8010626:	681a      	ldr	r2, [r3, #0]
 8010628:	4b2e      	ldr	r3, [pc, #184]	; (80106e4 <mem_malloc+0x1f8>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	429a      	cmp	r2, r3
 801062e:	d00b      	beq.n	8010648 <mem_malloc+0x15c>
 8010630:	4b28      	ldr	r3, [pc, #160]	; (80106d4 <mem_malloc+0x1e8>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	791b      	ldrb	r3, [r3, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d006      	beq.n	8010648 <mem_malloc+0x15c>
 801063a:	4b27      	ldr	r3, [pc, #156]	; (80106d8 <mem_malloc+0x1ec>)
 801063c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010640:	4929      	ldr	r1, [pc, #164]	; (80106e8 <mem_malloc+0x1fc>)
 8010642:	4827      	ldr	r0, [pc, #156]	; (80106e0 <mem_malloc+0x1f4>)
 8010644:	f00b fb0a 	bl	801bc5c <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010648:	4821      	ldr	r0, [pc, #132]	; (80106d0 <mem_malloc+0x1e4>)
 801064a:	f00a fedc 	bl	801b406 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801064e:	8bba      	ldrh	r2, [r7, #28]
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	4413      	add	r3, r2
 8010654:	3308      	adds	r3, #8
 8010656:	4a23      	ldr	r2, [pc, #140]	; (80106e4 <mem_malloc+0x1f8>)
 8010658:	6812      	ldr	r2, [r2, #0]
 801065a:	4293      	cmp	r3, r2
 801065c:	d906      	bls.n	801066c <mem_malloc+0x180>
 801065e:	4b1e      	ldr	r3, [pc, #120]	; (80106d8 <mem_malloc+0x1ec>)
 8010660:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010664:	4921      	ldr	r1, [pc, #132]	; (80106ec <mem_malloc+0x200>)
 8010666:	481e      	ldr	r0, [pc, #120]	; (80106e0 <mem_malloc+0x1f4>)
 8010668:	f00b faf8 	bl	801bc5c <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801066c:	697b      	ldr	r3, [r7, #20]
 801066e:	f003 0303 	and.w	r3, r3, #3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d006      	beq.n	8010684 <mem_malloc+0x198>
 8010676:	4b18      	ldr	r3, [pc, #96]	; (80106d8 <mem_malloc+0x1ec>)
 8010678:	f240 32bb 	movw	r2, #955	; 0x3bb
 801067c:	491c      	ldr	r1, [pc, #112]	; (80106f0 <mem_malloc+0x204>)
 801067e:	4818      	ldr	r0, [pc, #96]	; (80106e0 <mem_malloc+0x1f4>)
 8010680:	f00b faec 	bl	801bc5c <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	f003 0303 	and.w	r3, r3, #3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d006      	beq.n	801069c <mem_malloc+0x1b0>
 801068e:	4b12      	ldr	r3, [pc, #72]	; (80106d8 <mem_malloc+0x1ec>)
 8010690:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010694:	4917      	ldr	r1, [pc, #92]	; (80106f4 <mem_malloc+0x208>)
 8010696:	4812      	ldr	r0, [pc, #72]	; (80106e0 <mem_malloc+0x1f4>)
 8010698:	f00b fae0 	bl	801bc5c <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	3308      	adds	r3, #8
 80106a0:	e011      	b.n	80106c6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80106a2:	8bfb      	ldrh	r3, [r7, #30]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff fc33 	bl	800ff10 <ptr_to_mem>
 80106aa:	4603      	mov	r3, r0
 80106ac:	881b      	ldrh	r3, [r3, #0]
 80106ae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80106b0:	8bfa      	ldrh	r2, [r7, #30]
 80106b2:	8bbb      	ldrh	r3, [r7, #28]
 80106b4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80106b8:	429a      	cmp	r2, r3
 80106ba:	f4ff af41 	bcc.w	8010540 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80106be:	4804      	ldr	r0, [pc, #16]	; (80106d0 <mem_malloc+0x1e4>)
 80106c0:	f00a fea1 	bl	801b406 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3720      	adds	r7, #32
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	20004ecc 	.word	0x20004ecc
 80106d4:	20004ed0 	.word	0x20004ed0
 80106d8:	080259ac 	.word	0x080259ac
 80106dc:	08025b70 	.word	0x08025b70
 80106e0:	080259f4 	.word	0x080259f4
 80106e4:	20004ec8 	.word	0x20004ec8
 80106e8:	08025b84 	.word	0x08025b84
 80106ec:	08025ba0 	.word	0x08025ba0
 80106f0:	08025bd0 	.word	0x08025bd0
 80106f4:	08025c00 	.word	0x08025c00

080106f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	2200      	movs	r2, #0
 8010706:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	3303      	adds	r3, #3
 801070e:	f023 0303 	bic.w	r3, r3, #3
 8010712:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010714:	2300      	movs	r3, #0
 8010716:	60fb      	str	r3, [r7, #12]
 8010718:	e011      	b.n	801073e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	689b      	ldr	r3, [r3, #8]
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	881b      	ldrh	r3, [r3, #0]
 8010730:	461a      	mov	r2, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	4413      	add	r3, r2
 8010736:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	3301      	adds	r3, #1
 801073c:	60fb      	str	r3, [r7, #12]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	885b      	ldrh	r3, [r3, #2]
 8010742:	461a      	mov	r2, r3
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	4293      	cmp	r3, r2
 8010748:	dbe7      	blt.n	801071a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801074a:	bf00      	nop
 801074c:	bf00      	nop
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801075e:	2300      	movs	r3, #0
 8010760:	80fb      	strh	r3, [r7, #6]
 8010762:	e009      	b.n	8010778 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010764:	88fb      	ldrh	r3, [r7, #6]
 8010766:	4a08      	ldr	r2, [pc, #32]	; (8010788 <memp_init+0x30>)
 8010768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff ffc3 	bl	80106f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010772:	88fb      	ldrh	r3, [r7, #6]
 8010774:	3301      	adds	r3, #1
 8010776:	80fb      	strh	r3, [r7, #6]
 8010778:	88fb      	ldrh	r3, [r7, #6]
 801077a:	2b0c      	cmp	r3, #12
 801077c:	d9f2      	bls.n	8010764 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801077e:	bf00      	nop
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	08029114 	.word	0x08029114

0801078c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010794:	f00a fe6a 	bl	801b46c <sys_arch_protect>
 8010798:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d015      	beq.n	80107d4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	6812      	ldr	r2, [r2, #0]
 80107b0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	f003 0303 	and.w	r3, r3, #3
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d006      	beq.n	80107ca <do_memp_malloc_pool+0x3e>
 80107bc:	4b09      	ldr	r3, [pc, #36]	; (80107e4 <do_memp_malloc_pool+0x58>)
 80107be:	f44f 728c 	mov.w	r2, #280	; 0x118
 80107c2:	4909      	ldr	r1, [pc, #36]	; (80107e8 <do_memp_malloc_pool+0x5c>)
 80107c4:	4809      	ldr	r0, [pc, #36]	; (80107ec <do_memp_malloc_pool+0x60>)
 80107c6:	f00b fa49 	bl	801bc5c <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f00a fe5c 	bl	801b488 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	e003      	b.n	80107dc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	f00a fe57 	bl	801b488 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	08025c24 	.word	0x08025c24
 80107e8:	08025c54 	.word	0x08025c54
 80107ec:	08025c78 	.word	0x08025c78

080107f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	4603      	mov	r3, r0
 80107f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80107fa:	79fb      	ldrb	r3, [r7, #7]
 80107fc:	2b0c      	cmp	r3, #12
 80107fe:	d908      	bls.n	8010812 <memp_malloc+0x22>
 8010800:	4b0a      	ldr	r3, [pc, #40]	; (801082c <memp_malloc+0x3c>)
 8010802:	f240 1257 	movw	r2, #343	; 0x157
 8010806:	490a      	ldr	r1, [pc, #40]	; (8010830 <memp_malloc+0x40>)
 8010808:	480a      	ldr	r0, [pc, #40]	; (8010834 <memp_malloc+0x44>)
 801080a:	f00b fa27 	bl	801bc5c <printf>
 801080e:	2300      	movs	r3, #0
 8010810:	e008      	b.n	8010824 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010812:	79fb      	ldrb	r3, [r7, #7]
 8010814:	4a08      	ldr	r2, [pc, #32]	; (8010838 <memp_malloc+0x48>)
 8010816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801081a:	4618      	mov	r0, r3
 801081c:	f7ff ffb6 	bl	801078c <do_memp_malloc_pool>
 8010820:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010822:	68fb      	ldr	r3, [r7, #12]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	08025c24 	.word	0x08025c24
 8010830:	08025cb4 	.word	0x08025cb4
 8010834:	08025c78 	.word	0x08025c78
 8010838:	08029114 	.word	0x08029114

0801083c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	f003 0303 	and.w	r3, r3, #3
 801084c:	2b00      	cmp	r3, #0
 801084e:	d006      	beq.n	801085e <do_memp_free_pool+0x22>
 8010850:	4b0d      	ldr	r3, [pc, #52]	; (8010888 <do_memp_free_pool+0x4c>)
 8010852:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010856:	490d      	ldr	r1, [pc, #52]	; (801088c <do_memp_free_pool+0x50>)
 8010858:	480d      	ldr	r0, [pc, #52]	; (8010890 <do_memp_free_pool+0x54>)
 801085a:	f00b f9ff 	bl	801bc5c <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010862:	f00a fe03 	bl	801b46c <sys_arch_protect>
 8010866:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	689b      	ldr	r3, [r3, #8]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801087a:	68b8      	ldr	r0, [r7, #8]
 801087c:	f00a fe04 	bl	801b488 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010880:	bf00      	nop
 8010882:	3710      	adds	r7, #16
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	08025c24 	.word	0x08025c24
 801088c:	08025cd4 	.word	0x08025cd4
 8010890:	08025c78 	.word	0x08025c78

08010894 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	4603      	mov	r3, r0
 801089c:	6039      	str	r1, [r7, #0]
 801089e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80108a0:	79fb      	ldrb	r3, [r7, #7]
 80108a2:	2b0c      	cmp	r3, #12
 80108a4:	d907      	bls.n	80108b6 <memp_free+0x22>
 80108a6:	4b0c      	ldr	r3, [pc, #48]	; (80108d8 <memp_free+0x44>)
 80108a8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80108ac:	490b      	ldr	r1, [pc, #44]	; (80108dc <memp_free+0x48>)
 80108ae:	480c      	ldr	r0, [pc, #48]	; (80108e0 <memp_free+0x4c>)
 80108b0:	f00b f9d4 	bl	801bc5c <printf>
 80108b4:	e00c      	b.n	80108d0 <memp_free+0x3c>

  if (mem == NULL) {
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d008      	beq.n	80108ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80108bc:	79fb      	ldrb	r3, [r7, #7]
 80108be:	4a09      	ldr	r2, [pc, #36]	; (80108e4 <memp_free+0x50>)
 80108c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108c4:	6839      	ldr	r1, [r7, #0]
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7ff ffb8 	bl	801083c <do_memp_free_pool>
 80108cc:	e000      	b.n	80108d0 <memp_free+0x3c>
    return;
 80108ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80108d0:	3708      	adds	r7, #8
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}
 80108d6:	bf00      	nop
 80108d8:	08025c24 	.word	0x08025c24
 80108dc:	08025cf4 	.word	0x08025cf4
 80108e0:	08025c78 	.word	0x08025c78
 80108e4:	08029114 	.word	0x08029114

080108e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80108ec:	bf00      	nop
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
	...

080108f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b086      	sub	sp, #24
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
 8010904:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d108      	bne.n	801091e <netif_add+0x26>
 801090c:	4b56      	ldr	r3, [pc, #344]	; (8010a68 <netif_add+0x170>)
 801090e:	f240 1227 	movw	r2, #295	; 0x127
 8010912:	4956      	ldr	r1, [pc, #344]	; (8010a6c <netif_add+0x174>)
 8010914:	4856      	ldr	r0, [pc, #344]	; (8010a70 <netif_add+0x178>)
 8010916:	f00b f9a1 	bl	801bc5c <printf>
 801091a:	2300      	movs	r3, #0
 801091c:	e09f      	b.n	8010a5e <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010920:	2b00      	cmp	r3, #0
 8010922:	d108      	bne.n	8010936 <netif_add+0x3e>
 8010924:	4b50      	ldr	r3, [pc, #320]	; (8010a68 <netif_add+0x170>)
 8010926:	f44f 7294 	mov.w	r2, #296	; 0x128
 801092a:	4952      	ldr	r1, [pc, #328]	; (8010a74 <netif_add+0x17c>)
 801092c:	4850      	ldr	r0, [pc, #320]	; (8010a70 <netif_add+0x178>)
 801092e:	f00b f995 	bl	801bc5c <printf>
 8010932:	2300      	movs	r3, #0
 8010934:	e093      	b.n	8010a5e <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d101      	bne.n	8010940 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801093c:	4b4e      	ldr	r3, [pc, #312]	; (8010a78 <netif_add+0x180>)
 801093e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010946:	4b4c      	ldr	r3, [pc, #304]	; (8010a78 <netif_add+0x180>)
 8010948:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010950:	4b49      	ldr	r3, [pc, #292]	; (8010a78 <netif_add+0x180>)
 8010952:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2200      	movs	r2, #0
 8010958:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	4a44      	ldr	r2, [pc, #272]	; (8010a7c <netif_add+0x184>)
 801096a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2200      	movs	r2, #0
 8010970:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6a3a      	ldr	r2, [r7, #32]
 801097e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8010980:	4b3f      	ldr	r3, [pc, #252]	; (8010a80 <netif_add+0x188>)
 8010982:	781a      	ldrb	r2, [r3, #0]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801098e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	68b9      	ldr	r1, [r7, #8]
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f000 f966 	bl	8010c68 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	4798      	blx	r3
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d001      	beq.n	80109ac <netif_add+0xb4>
    return NULL;
 80109a8:	2300      	movs	r3, #0
 80109aa:	e058      	b.n	8010a5e <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80109b2:	2bff      	cmp	r3, #255	; 0xff
 80109b4:	d103      	bne.n	80109be <netif_add+0xc6>
        netif->num = 0;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 80109be:	2300      	movs	r3, #0
 80109c0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80109c2:	4b30      	ldr	r3, [pc, #192]	; (8010a84 <netif_add+0x18c>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	617b      	str	r3, [r7, #20]
 80109c8:	e02b      	b.n	8010a22 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80109ca:	697a      	ldr	r2, [r7, #20]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d106      	bne.n	80109e0 <netif_add+0xe8>
 80109d2:	4b25      	ldr	r3, [pc, #148]	; (8010a68 <netif_add+0x170>)
 80109d4:	f240 128b 	movw	r2, #395	; 0x18b
 80109d8:	492b      	ldr	r1, [pc, #172]	; (8010a88 <netif_add+0x190>)
 80109da:	4825      	ldr	r0, [pc, #148]	; (8010a70 <netif_add+0x178>)
 80109dc:	f00b f93e 	bl	801bc5c <printf>
        num_netifs++;
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	3301      	adds	r3, #1
 80109e4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	2bff      	cmp	r3, #255	; 0xff
 80109ea:	dd06      	ble.n	80109fa <netif_add+0x102>
 80109ec:	4b1e      	ldr	r3, [pc, #120]	; (8010a68 <netif_add+0x170>)
 80109ee:	f240 128d 	movw	r2, #397	; 0x18d
 80109f2:	4926      	ldr	r1, [pc, #152]	; (8010a8c <netif_add+0x194>)
 80109f4:	481e      	ldr	r0, [pc, #120]	; (8010a70 <netif_add+0x178>)
 80109f6:	f00b f931 	bl	801bc5c <printf>
        if (netif2->num == netif->num) {
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d108      	bne.n	8010a1c <netif_add+0x124>
          netif->num++;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a10:	3301      	adds	r3, #1
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8010a1a:	e005      	b.n	8010a28 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	617b      	str	r3, [r7, #20]
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1d0      	bne.n	80109ca <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d1be      	bne.n	80109ac <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a34:	2bfe      	cmp	r3, #254	; 0xfe
 8010a36:	d103      	bne.n	8010a40 <netif_add+0x148>
    netif_num = 0;
 8010a38:	4b11      	ldr	r3, [pc, #68]	; (8010a80 <netif_add+0x188>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
 8010a3e:	e006      	b.n	8010a4e <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a46:	3301      	adds	r3, #1
 8010a48:	b2da      	uxtb	r2, r3
 8010a4a:	4b0d      	ldr	r3, [pc, #52]	; (8010a80 <netif_add+0x188>)
 8010a4c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010a4e:	4b0d      	ldr	r3, [pc, #52]	; (8010a84 <netif_add+0x18c>)
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010a56:	4a0b      	ldr	r2, [pc, #44]	; (8010a84 <netif_add+0x18c>)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3718      	adds	r7, #24
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	08025d10 	.word	0x08025d10
 8010a6c:	08025da4 	.word	0x08025da4
 8010a70:	08025d60 	.word	0x08025d60
 8010a74:	08025dc0 	.word	0x08025dc0
 8010a78:	08029188 	.word	0x08029188
 8010a7c:	08010e59 	.word	0x08010e59
 8010a80:	20004f08 	.word	0x20004f08
 8010a84:	2000be44 	.word	0x2000be44
 8010a88:	08025de4 	.word	0x08025de4
 8010a8c:	08025df8 	.word	0x08025df8

08010a90 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f002 fe6b 	bl	8013778 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f007 ff03 	bl	80188b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010aaa:	bf00      	nop
 8010aac:	3708      	adds	r7, #8
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
	...

08010ab4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d106      	bne.n	8010ad4 <netif_do_set_ipaddr+0x20>
 8010ac6:	4b1d      	ldr	r3, [pc, #116]	; (8010b3c <netif_do_set_ipaddr+0x88>)
 8010ac8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010acc:	491c      	ldr	r1, [pc, #112]	; (8010b40 <netif_do_set_ipaddr+0x8c>)
 8010ace:	481d      	ldr	r0, [pc, #116]	; (8010b44 <netif_do_set_ipaddr+0x90>)
 8010ad0:	f00b f8c4 	bl	801bc5c <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d106      	bne.n	8010ae8 <netif_do_set_ipaddr+0x34>
 8010ada:	4b18      	ldr	r3, [pc, #96]	; (8010b3c <netif_do_set_ipaddr+0x88>)
 8010adc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010ae0:	4917      	ldr	r1, [pc, #92]	; (8010b40 <netif_do_set_ipaddr+0x8c>)
 8010ae2:	4818      	ldr	r0, [pc, #96]	; (8010b44 <netif_do_set_ipaddr+0x90>)
 8010ae4:	f00b f8ba 	bl	801bc5c <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3304      	adds	r3, #4
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d01c      	beq.n	8010b30 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	3304      	adds	r3, #4
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010b06:	f107 0314 	add.w	r3, r7, #20
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f7ff ffbf 	bl	8010a90 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <netif_do_set_ipaddr+0x6a>
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	e000      	b.n	8010b20 <netif_do_set_ipaddr+0x6c>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010b24:	2101      	movs	r1, #1
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f000 f924 	bl	8010d74 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e000      	b.n	8010b32 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3718      	adds	r7, #24
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	08025d10 	.word	0x08025d10
 8010b40:	08025e28 	.word	0x08025e28
 8010b44:	08025d60 	.word	0x08025d60

08010b48 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d107      	bne.n	8010b68 <netif_set_ipaddr+0x20>
 8010b58:	4b0b      	ldr	r3, [pc, #44]	; (8010b88 <netif_set_ipaddr+0x40>)
 8010b5a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010b5e:	490b      	ldr	r1, [pc, #44]	; (8010b8c <netif_set_ipaddr+0x44>)
 8010b60:	480b      	ldr	r0, [pc, #44]	; (8010b90 <netif_set_ipaddr+0x48>)
 8010b62:	f00b f87b 	bl	801bc5c <printf>
 8010b66:	e00b      	b.n	8010b80 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d101      	bne.n	8010b72 <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 8010b6e:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <netif_set_ipaddr+0x4c>)
 8010b70:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010b72:	f107 030c 	add.w	r3, r7, #12
 8010b76:	461a      	mov	r2, r3
 8010b78:	6839      	ldr	r1, [r7, #0]
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff ff9a 	bl	8010ab4 <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	08025d10 	.word	0x08025d10
 8010b8c:	08025e38 	.word	0x08025e38
 8010b90:	08025d60 	.word	0x08025d60
 8010b94:	08029188 	.word	0x08029188

08010b98 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	3308      	adds	r3, #8
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d00a      	beq.n	8010bc8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d002      	beq.n	8010bbe <netif_do_set_netmask+0x26>
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	e000      	b.n	8010bc0 <netif_do_set_netmask+0x28>
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e000      	b.n	8010bca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
	...

08010bd8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  ip_addr_t old_nm_val;
  ip_addr_t *old_nm = &old_nm_val;
#else
  ip_addr_t *old_nm = NULL;
 8010be2:	2300      	movs	r3, #0
 8010be4:	60fb      	str	r3, [r7, #12]
#endif
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d107      	bne.n	8010bfc <netif_set_netmask+0x24>
 8010bec:	4b0a      	ldr	r3, [pc, #40]	; (8010c18 <netif_set_netmask+0x40>)
 8010bee:	f240 223a 	movw	r2, #570	; 0x23a
 8010bf2:	490a      	ldr	r1, [pc, #40]	; (8010c1c <netif_set_netmask+0x44>)
 8010bf4:	480a      	ldr	r0, [pc, #40]	; (8010c20 <netif_set_netmask+0x48>)
 8010bf6:	f00b f831 	bl	801bc5c <printf>
 8010bfa:	e009      	b.n	8010c10 <netif_set_netmask+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (netmask == NULL) {
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <netif_set_netmask+0x2e>
    netmask = IP4_ADDR_ANY4;
 8010c02:	4b08      	ldr	r3, [pc, #32]	; (8010c24 <netif_set_netmask+0x4c>)
 8010c04:	603b      	str	r3, [r7, #0]
  }

  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	6839      	ldr	r1, [r7, #0]
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f7ff ffc4 	bl	8010b98 <netif_do_set_netmask>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_netmask = old_nm;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
#endif
  }
}
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	08025d10 	.word	0x08025d10
 8010c1c:	08025e58 	.word	0x08025e58
 8010c20:	08025d60 	.word	0x08025d60
 8010c24:	08029188 	.word	0x08029188

08010c28 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	330c      	adds	r3, #12
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d00a      	beq.n	8010c58 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <netif_do_set_gw+0x26>
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	e000      	b.n	8010c50 <netif_do_set_gw+0x28>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010c54:	2301      	movs	r3, #1
 8010c56:	e000      	b.n	8010c5a <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010c58:	2300      	movs	r3, #0
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3714      	adds	r7, #20
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
	...

08010c68 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b088      	sub	sp, #32
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010c76:	2300      	movs	r3, #0
 8010c78:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d101      	bne.n	8010c88 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010c84:	4b1c      	ldr	r3, [pc, #112]	; (8010cf8 <netif_set_addr+0x90>)
 8010c86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d101      	bne.n	8010c92 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010c8e:	4b1a      	ldr	r3, [pc, #104]	; (8010cf8 <netif_set_addr+0x90>)
 8010c90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010c98:	4b17      	ldr	r3, [pc, #92]	; (8010cf8 <netif_set_addr+0x90>)
 8010c9a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d003      	beq.n	8010caa <netif_set_addr+0x42>
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d101      	bne.n	8010cae <netif_set_addr+0x46>
 8010caa:	2301      	movs	r3, #1
 8010cac:	e000      	b.n	8010cb0 <netif_set_addr+0x48>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d006      	beq.n	8010cc6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010cb8:	f107 0310 	add.w	r3, r7, #16
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	68b9      	ldr	r1, [r7, #8]
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f7ff fef7 	bl	8010ab4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010cc6:	69fa      	ldr	r2, [r7, #28]
 8010cc8:	6879      	ldr	r1, [r7, #4]
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f7ff ff64 	bl	8010b98 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010cd0:	69ba      	ldr	r2, [r7, #24]
 8010cd2:	6839      	ldr	r1, [r7, #0]
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f7ff ffa7 	bl	8010c28 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d106      	bne.n	8010cee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010ce0:	f107 0310 	add.w	r3, r7, #16
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	68b9      	ldr	r1, [r7, #8]
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7ff fee3 	bl	8010ab4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010cee:	bf00      	nop
 8010cf0:	3720      	adds	r7, #32
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	08029188 	.word	0x08029188

08010cfc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	b083      	sub	sp, #12
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010d04:	4a04      	ldr	r2, [pc, #16]	; (8010d18 <netif_set_default+0x1c>)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010d0a:	bf00      	nop
 8010d0c:	370c      	adds	r7, #12
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	2000be48 	.word	0x2000be48

08010d1c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d107      	bne.n	8010d3a <netif_set_up+0x1e>
 8010d2a:	4b0f      	ldr	r3, [pc, #60]	; (8010d68 <netif_set_up+0x4c>)
 8010d2c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010d30:	490e      	ldr	r1, [pc, #56]	; (8010d6c <netif_set_up+0x50>)
 8010d32:	480f      	ldr	r0, [pc, #60]	; (8010d70 <netif_set_up+0x54>)
 8010d34:	f00a ff92 	bl	801bc5c <printf>
 8010d38:	e013      	b.n	8010d62 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10c      	bne.n	8010d62 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010d4e:	f043 0301 	orr.w	r3, r3, #1
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010d5a:	2103      	movs	r1, #3
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f000 f809 	bl	8010d74 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	08025d10 	.word	0x08025d10
 8010d6c:	08025e98 	.word	0x08025e98
 8010d70:	08025d60 	.word	0x08025d60

08010d74 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d106      	bne.n	8010d94 <netif_issue_reports+0x20>
 8010d86:	4b18      	ldr	r3, [pc, #96]	; (8010de8 <netif_issue_reports+0x74>)
 8010d88:	f240 326d 	movw	r2, #877	; 0x36d
 8010d8c:	4917      	ldr	r1, [pc, #92]	; (8010dec <netif_issue_reports+0x78>)
 8010d8e:	4818      	ldr	r0, [pc, #96]	; (8010df0 <netif_issue_reports+0x7c>)
 8010d90:	f00a ff64 	bl	801bc5c <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010d9a:	f003 0304 	and.w	r3, r3, #4
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d01e      	beq.n	8010de0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010da8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d017      	beq.n	8010de0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010db0:	78fb      	ldrb	r3, [r7, #3]
 8010db2:	f003 0301 	and.w	r3, r3, #1
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d013      	beq.n	8010de2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	3304      	adds	r3, #4
 8010dbe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d00e      	beq.n	8010de2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010dca:	f003 0308 	and.w	r3, r3, #8
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d007      	beq.n	8010de2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	3304      	adds	r3, #4
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f008 fcd3 	bl	8019784 <etharp_request>
 8010dde:	e000      	b.n	8010de2 <netif_issue_reports+0x6e>
    return;
 8010de0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	08025d10 	.word	0x08025d10
 8010dec:	08025eb4 	.word	0x08025eb4
 8010df0:	08025d60 	.word	0x08025d60

08010df4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b082      	sub	sp, #8
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d107      	bne.n	8010e12 <netif_set_down+0x1e>
 8010e02:	4b12      	ldr	r3, [pc, #72]	; (8010e4c <netif_set_down+0x58>)
 8010e04:	f240 329b 	movw	r2, #923	; 0x39b
 8010e08:	4911      	ldr	r1, [pc, #68]	; (8010e50 <netif_set_down+0x5c>)
 8010e0a:	4812      	ldr	r0, [pc, #72]	; (8010e54 <netif_set_down+0x60>)
 8010e0c:	f00a ff26 	bl	801bc5c <printf>
 8010e10:	e019      	b.n	8010e46 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d012      	beq.n	8010e46 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010e26:	f023 0301 	bic.w	r3, r3, #1
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010e38:	f003 0308 	and.w	r3, r3, #8
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f008 f85d 	bl	8018f00 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	08025d10 	.word	0x08025d10
 8010e50:	08025ed8 	.word	0x08025ed8
 8010e54:	08025d60 	.word	0x08025d60

08010e58 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010e64:	f06f 030b 	mvn.w	r3, #11
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3714      	adds	r7, #20
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010e7e:	79fb      	ldrb	r3, [r7, #7]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d013      	beq.n	8010eac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010e84:	4b0d      	ldr	r3, [pc, #52]	; (8010ebc <netif_get_by_index+0x48>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	60fb      	str	r3, [r7, #12]
 8010e8a:	e00c      	b.n	8010ea6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e92:	3301      	adds	r3, #1
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	79fa      	ldrb	r2, [r7, #7]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d101      	bne.n	8010ea0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	e006      	b.n	8010eae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	60fb      	str	r3, [r7, #12]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d1ef      	bne.n	8010e8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3714      	adds	r7, #20
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr
 8010eba:	bf00      	nop
 8010ebc:	2000be44 	.word	0x2000be44

08010ec0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010ec6:	f00a fad1 	bl	801b46c <sys_arch_protect>
 8010eca:	6038      	str	r0, [r7, #0]
 8010ecc:	4b0d      	ldr	r3, [pc, #52]	; (8010f04 <pbuf_free_ooseq+0x44>)
 8010ece:	2200      	movs	r2, #0
 8010ed0:	701a      	strb	r2, [r3, #0]
 8010ed2:	6838      	ldr	r0, [r7, #0]
 8010ed4:	f00a fad8 	bl	801b488 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ed8:	4b0b      	ldr	r3, [pc, #44]	; (8010f08 <pbuf_free_ooseq+0x48>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	607b      	str	r3, [r7, #4]
 8010ede:	e00a      	b.n	8010ef6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d003      	beq.n	8010ef0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f002 fc83 	bl	80137f4 <tcp_free_ooseq>
      return;
 8010eee:	e005      	b.n	8010efc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	607b      	str	r3, [r7, #4]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d1f1      	bne.n	8010ee0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	2000be4c 	.word	0x2000be4c
 8010f08:	2000be54 	.word	0x2000be54

08010f0c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010f14:	f7ff ffd4 	bl	8010ec0 <pbuf_free_ooseq>
}
 8010f18:	bf00      	nop
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010f26:	f00a faa1 	bl	801b46c <sys_arch_protect>
 8010f2a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010f2c:	4b0f      	ldr	r3, [pc, #60]	; (8010f6c <pbuf_pool_is_empty+0x4c>)
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010f32:	4b0e      	ldr	r3, [pc, #56]	; (8010f6c <pbuf_pool_is_empty+0x4c>)
 8010f34:	2201      	movs	r2, #1
 8010f36:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f00a faa5 	bl	801b488 <sys_arch_unprotect>

  if (!queued) {
 8010f3e:	78fb      	ldrb	r3, [r7, #3]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d10f      	bne.n	8010f64 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010f44:	2100      	movs	r1, #0
 8010f46:	480a      	ldr	r0, [pc, #40]	; (8010f70 <pbuf_pool_is_empty+0x50>)
 8010f48:	f7fd fee8 	bl	800ed1c <tcpip_try_callback>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d008      	beq.n	8010f64 <pbuf_pool_is_empty+0x44>
 8010f52:	f00a fa8b 	bl	801b46c <sys_arch_protect>
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	4b04      	ldr	r3, [pc, #16]	; (8010f6c <pbuf_pool_is_empty+0x4c>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	701a      	strb	r2, [r3, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f00a fa92 	bl	801b488 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010f64:	bf00      	nop
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	2000be4c 	.word	0x2000be4c
 8010f70:	08010f0d 	.word	0x08010f0d

08010f74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b085      	sub	sp, #20
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	4611      	mov	r1, r2
 8010f80:	461a      	mov	r2, r3
 8010f82:	460b      	mov	r3, r1
 8010f84:	80fb      	strh	r3, [r7, #6]
 8010f86:	4613      	mov	r3, r2
 8010f88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	88fa      	ldrh	r2, [r7, #6]
 8010f9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	88ba      	ldrh	r2, [r7, #4]
 8010fa0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010fa2:	8b3b      	ldrh	r3, [r7, #24]
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	7f3a      	ldrb	r2, [r7, #28]
 8010fae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	73da      	strb	r2, [r3, #15]
}
 8010fbc:	bf00      	nop
 8010fbe:	3714      	adds	r7, #20
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08c      	sub	sp, #48	; 0x30
 8010fcc:	af02      	add	r7, sp, #8
 8010fce:	4603      	mov	r3, r0
 8010fd0:	71fb      	strb	r3, [r7, #7]
 8010fd2:	460b      	mov	r3, r1
 8010fd4:	80bb      	strh	r3, [r7, #4]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010fda:	79fb      	ldrb	r3, [r7, #7]
 8010fdc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010fde:	887b      	ldrh	r3, [r7, #2]
 8010fe0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010fe4:	d07f      	beq.n	80110e6 <pbuf_alloc+0x11e>
 8010fe6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010fea:	f300 80c8 	bgt.w	801117e <pbuf_alloc+0x1b6>
 8010fee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010ff2:	d010      	beq.n	8011016 <pbuf_alloc+0x4e>
 8010ff4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010ff8:	f300 80c1 	bgt.w	801117e <pbuf_alloc+0x1b6>
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d002      	beq.n	8011006 <pbuf_alloc+0x3e>
 8011000:	2b41      	cmp	r3, #65	; 0x41
 8011002:	f040 80bc 	bne.w	801117e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011006:	887a      	ldrh	r2, [r7, #2]
 8011008:	88bb      	ldrh	r3, [r7, #4]
 801100a:	4619      	mov	r1, r3
 801100c:	2000      	movs	r0, #0
 801100e:	f000 f8d1 	bl	80111b4 <pbuf_alloc_reference>
 8011012:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8011014:	e0bd      	b.n	8011192 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011016:	2300      	movs	r3, #0
 8011018:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801101a:	2300      	movs	r3, #0
 801101c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801101e:	88bb      	ldrh	r3, [r7, #4]
 8011020:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011022:	200c      	movs	r0, #12
 8011024:	f7ff fbe4 	bl	80107f0 <memp_malloc>
 8011028:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d109      	bne.n	8011044 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011030:	f7ff ff76 	bl	8010f20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	2b00      	cmp	r3, #0
 8011038:	d002      	beq.n	8011040 <pbuf_alloc+0x78>
            pbuf_free(p);
 801103a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801103c:	f000 faa8 	bl	8011590 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011040:	2300      	movs	r3, #0
 8011042:	e0a7      	b.n	8011194 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011046:	3303      	adds	r3, #3
 8011048:	b29b      	uxth	r3, r3
 801104a:	f023 0303 	bic.w	r3, r3, #3
 801104e:	b29b      	uxth	r3, r3
 8011050:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011054:	b29b      	uxth	r3, r3
 8011056:	8b7a      	ldrh	r2, [r7, #26]
 8011058:	4293      	cmp	r3, r2
 801105a:	bf28      	it	cs
 801105c:	4613      	movcs	r3, r2
 801105e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011062:	3310      	adds	r3, #16
 8011064:	693a      	ldr	r2, [r7, #16]
 8011066:	4413      	add	r3, r2
 8011068:	3303      	adds	r3, #3
 801106a:	f023 0303 	bic.w	r3, r3, #3
 801106e:	4618      	mov	r0, r3
 8011070:	89f9      	ldrh	r1, [r7, #14]
 8011072:	8b7a      	ldrh	r2, [r7, #26]
 8011074:	2300      	movs	r3, #0
 8011076:	9301      	str	r3, [sp, #4]
 8011078:	887b      	ldrh	r3, [r7, #2]
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	460b      	mov	r3, r1
 801107e:	4601      	mov	r1, r0
 8011080:	6938      	ldr	r0, [r7, #16]
 8011082:	f7ff ff77 	bl	8010f74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	f003 0303 	and.w	r3, r3, #3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d006      	beq.n	80110a0 <pbuf_alloc+0xd8>
 8011092:	4b42      	ldr	r3, [pc, #264]	; (801119c <pbuf_alloc+0x1d4>)
 8011094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011098:	4941      	ldr	r1, [pc, #260]	; (80111a0 <pbuf_alloc+0x1d8>)
 801109a:	4842      	ldr	r0, [pc, #264]	; (80111a4 <pbuf_alloc+0x1dc>)
 801109c:	f00a fdde 	bl	801bc5c <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80110a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110a2:	3303      	adds	r3, #3
 80110a4:	f023 0303 	bic.w	r3, r3, #3
 80110a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80110ac:	d106      	bne.n	80110bc <pbuf_alloc+0xf4>
 80110ae:	4b3b      	ldr	r3, [pc, #236]	; (801119c <pbuf_alloc+0x1d4>)
 80110b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80110b4:	493c      	ldr	r1, [pc, #240]	; (80111a8 <pbuf_alloc+0x1e0>)
 80110b6:	483b      	ldr	r0, [pc, #236]	; (80111a4 <pbuf_alloc+0x1dc>)
 80110b8:	f00a fdd0 	bl	801bc5c <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80110bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d102      	bne.n	80110c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	627b      	str	r3, [r7, #36]	; 0x24
 80110c6:	e002      	b.n	80110ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	693a      	ldr	r2, [r7, #16]
 80110cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80110d2:	8b7a      	ldrh	r2, [r7, #26]
 80110d4:	89fb      	ldrh	r3, [r7, #14]
 80110d6:	1ad3      	subs	r3, r2, r3
 80110d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80110de:	8b7b      	ldrh	r3, [r7, #26]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d19e      	bne.n	8011022 <pbuf_alloc+0x5a>
      break;
 80110e4:	e055      	b.n	8011192 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80110e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110e8:	3303      	adds	r3, #3
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	f023 0303 	bic.w	r3, r3, #3
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	88bb      	ldrh	r3, [r7, #4]
 80110f4:	3303      	adds	r3, #3
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	f023 0303 	bic.w	r3, r3, #3
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	4413      	add	r3, r2
 8011100:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011102:	8b3b      	ldrh	r3, [r7, #24]
 8011104:	3310      	adds	r3, #16
 8011106:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011108:	8b3a      	ldrh	r2, [r7, #24]
 801110a:	88bb      	ldrh	r3, [r7, #4]
 801110c:	3303      	adds	r3, #3
 801110e:	f023 0303 	bic.w	r3, r3, #3
 8011112:	429a      	cmp	r2, r3
 8011114:	d306      	bcc.n	8011124 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011116:	8afa      	ldrh	r2, [r7, #22]
 8011118:	88bb      	ldrh	r3, [r7, #4]
 801111a:	3303      	adds	r3, #3
 801111c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011120:	429a      	cmp	r2, r3
 8011122:	d201      	bcs.n	8011128 <pbuf_alloc+0x160>
        return NULL;
 8011124:	2300      	movs	r3, #0
 8011126:	e035      	b.n	8011194 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011128:	8afb      	ldrh	r3, [r7, #22]
 801112a:	4618      	mov	r0, r3
 801112c:	f7ff f9de 	bl	80104ec <mem_malloc>
 8011130:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011134:	2b00      	cmp	r3, #0
 8011136:	d101      	bne.n	801113c <pbuf_alloc+0x174>
        return NULL;
 8011138:	2300      	movs	r3, #0
 801113a:	e02b      	b.n	8011194 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801113c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801113e:	3310      	adds	r3, #16
 8011140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011142:	4413      	add	r3, r2
 8011144:	3303      	adds	r3, #3
 8011146:	f023 0303 	bic.w	r3, r3, #3
 801114a:	4618      	mov	r0, r3
 801114c:	88b9      	ldrh	r1, [r7, #4]
 801114e:	88ba      	ldrh	r2, [r7, #4]
 8011150:	2300      	movs	r3, #0
 8011152:	9301      	str	r3, [sp, #4]
 8011154:	887b      	ldrh	r3, [r7, #2]
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	460b      	mov	r3, r1
 801115a:	4601      	mov	r1, r0
 801115c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801115e:	f7ff ff09 	bl	8010f74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	f003 0303 	and.w	r3, r3, #3
 801116a:	2b00      	cmp	r3, #0
 801116c:	d010      	beq.n	8011190 <pbuf_alloc+0x1c8>
 801116e:	4b0b      	ldr	r3, [pc, #44]	; (801119c <pbuf_alloc+0x1d4>)
 8011170:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011174:	490d      	ldr	r1, [pc, #52]	; (80111ac <pbuf_alloc+0x1e4>)
 8011176:	480b      	ldr	r0, [pc, #44]	; (80111a4 <pbuf_alloc+0x1dc>)
 8011178:	f00a fd70 	bl	801bc5c <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801117c:	e008      	b.n	8011190 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801117e:	4b07      	ldr	r3, [pc, #28]	; (801119c <pbuf_alloc+0x1d4>)
 8011180:	f240 1227 	movw	r2, #295	; 0x127
 8011184:	490a      	ldr	r1, [pc, #40]	; (80111b0 <pbuf_alloc+0x1e8>)
 8011186:	4807      	ldr	r0, [pc, #28]	; (80111a4 <pbuf_alloc+0x1dc>)
 8011188:	f00a fd68 	bl	801bc5c <printf>
      return NULL;
 801118c:	2300      	movs	r3, #0
 801118e:	e001      	b.n	8011194 <pbuf_alloc+0x1cc>
      break;
 8011190:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011194:	4618      	mov	r0, r3
 8011196:	3728      	adds	r7, #40	; 0x28
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	08025f40 	.word	0x08025f40
 80111a0:	08025f70 	.word	0x08025f70
 80111a4:	08025fa0 	.word	0x08025fa0
 80111a8:	08025fc8 	.word	0x08025fc8
 80111ac:	08025ffc 	.word	0x08025ffc
 80111b0:	08026028 	.word	0x08026028

080111b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b086      	sub	sp, #24
 80111b8:	af02      	add	r7, sp, #8
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	460b      	mov	r3, r1
 80111be:	807b      	strh	r3, [r7, #2]
 80111c0:	4613      	mov	r3, r2
 80111c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80111c4:	883b      	ldrh	r3, [r7, #0]
 80111c6:	2b41      	cmp	r3, #65	; 0x41
 80111c8:	d009      	beq.n	80111de <pbuf_alloc_reference+0x2a>
 80111ca:	883b      	ldrh	r3, [r7, #0]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d006      	beq.n	80111de <pbuf_alloc_reference+0x2a>
 80111d0:	4b0f      	ldr	r3, [pc, #60]	; (8011210 <pbuf_alloc_reference+0x5c>)
 80111d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80111d6:	490f      	ldr	r1, [pc, #60]	; (8011214 <pbuf_alloc_reference+0x60>)
 80111d8:	480f      	ldr	r0, [pc, #60]	; (8011218 <pbuf_alloc_reference+0x64>)
 80111da:	f00a fd3f 	bl	801bc5c <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80111de:	200b      	movs	r0, #11
 80111e0:	f7ff fb06 	bl	80107f0 <memp_malloc>
 80111e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d101      	bne.n	80111f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80111ec:	2300      	movs	r3, #0
 80111ee:	e00b      	b.n	8011208 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80111f0:	8879      	ldrh	r1, [r7, #2]
 80111f2:	887a      	ldrh	r2, [r7, #2]
 80111f4:	2300      	movs	r3, #0
 80111f6:	9301      	str	r3, [sp, #4]
 80111f8:	883b      	ldrh	r3, [r7, #0]
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	460b      	mov	r3, r1
 80111fe:	6879      	ldr	r1, [r7, #4]
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f7ff feb7 	bl	8010f74 <pbuf_init_alloced_pbuf>
  return p;
 8011206:	68fb      	ldr	r3, [r7, #12]
}
 8011208:	4618      	mov	r0, r3
 801120a:	3710      	adds	r7, #16
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	08025f40 	.word	0x08025f40
 8011214:	08026044 	.word	0x08026044
 8011218:	08025fa0 	.word	0x08025fa0

0801121c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b088      	sub	sp, #32
 8011220:	af02      	add	r7, sp, #8
 8011222:	607b      	str	r3, [r7, #4]
 8011224:	4603      	mov	r3, r0
 8011226:	73fb      	strb	r3, [r7, #15]
 8011228:	460b      	mov	r3, r1
 801122a:	81bb      	strh	r3, [r7, #12]
 801122c:	4613      	mov	r3, r2
 801122e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011230:	7bfb      	ldrb	r3, [r7, #15]
 8011232:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011234:	8a7b      	ldrh	r3, [r7, #18]
 8011236:	3303      	adds	r3, #3
 8011238:	f023 0203 	bic.w	r2, r3, #3
 801123c:	89bb      	ldrh	r3, [r7, #12]
 801123e:	441a      	add	r2, r3
 8011240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011242:	429a      	cmp	r2, r3
 8011244:	d901      	bls.n	801124a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011246:	2300      	movs	r3, #0
 8011248:	e018      	b.n	801127c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801124a:	6a3b      	ldr	r3, [r7, #32]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d007      	beq.n	8011260 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011250:	8a7b      	ldrh	r3, [r7, #18]
 8011252:	3303      	adds	r3, #3
 8011254:	f023 0303 	bic.w	r3, r3, #3
 8011258:	6a3a      	ldr	r2, [r7, #32]
 801125a:	4413      	add	r3, r2
 801125c:	617b      	str	r3, [r7, #20]
 801125e:	e001      	b.n	8011264 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011260:	2300      	movs	r3, #0
 8011262:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	89b9      	ldrh	r1, [r7, #12]
 8011268:	89ba      	ldrh	r2, [r7, #12]
 801126a:	2302      	movs	r3, #2
 801126c:	9301      	str	r3, [sp, #4]
 801126e:	897b      	ldrh	r3, [r7, #10]
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	460b      	mov	r3, r1
 8011274:	6979      	ldr	r1, [r7, #20]
 8011276:	f7ff fe7d 	bl	8010f74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801127a:	687b      	ldr	r3, [r7, #4]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	460b      	mov	r3, r1
 801128e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <pbuf_realloc+0x20>
 8011296:	4b3a      	ldr	r3, [pc, #232]	; (8011380 <pbuf_realloc+0xfc>)
 8011298:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801129c:	4939      	ldr	r1, [pc, #228]	; (8011384 <pbuf_realloc+0x100>)
 801129e:	483a      	ldr	r0, [pc, #232]	; (8011388 <pbuf_realloc+0x104>)
 80112a0:	f00a fcdc 	bl	801bc5c <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	891b      	ldrh	r3, [r3, #8]
 80112a8:	887a      	ldrh	r2, [r7, #2]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d263      	bcs.n	8011376 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	891a      	ldrh	r2, [r3, #8]
 80112b2:	887b      	ldrh	r3, [r7, #2]
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80112b8:	887b      	ldrh	r3, [r7, #2]
 80112ba:	817b      	strh	r3, [r7, #10]
  q = p;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80112c0:	e018      	b.n	80112f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	895b      	ldrh	r3, [r3, #10]
 80112c6:	897a      	ldrh	r2, [r7, #10]
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	891a      	ldrh	r2, [r3, #8]
 80112d0:	893b      	ldrh	r3, [r7, #8]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d106      	bne.n	80112f4 <pbuf_realloc+0x70>
 80112e6:	4b26      	ldr	r3, [pc, #152]	; (8011380 <pbuf_realloc+0xfc>)
 80112e8:	f240 12af 	movw	r2, #431	; 0x1af
 80112ec:	4927      	ldr	r1, [pc, #156]	; (801138c <pbuf_realloc+0x108>)
 80112ee:	4826      	ldr	r0, [pc, #152]	; (8011388 <pbuf_realloc+0x104>)
 80112f0:	f00a fcb4 	bl	801bc5c <printf>
  while (rem_len > q->len) {
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	895b      	ldrh	r3, [r3, #10]
 80112f8:	897a      	ldrh	r2, [r7, #10]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d8e1      	bhi.n	80112c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	7b1b      	ldrb	r3, [r3, #12]
 8011302:	f003 030f 	and.w	r3, r3, #15
 8011306:	2b00      	cmp	r3, #0
 8011308:	d121      	bne.n	801134e <pbuf_realloc+0xca>
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	895b      	ldrh	r3, [r3, #10]
 801130e:	897a      	ldrh	r2, [r7, #10]
 8011310:	429a      	cmp	r2, r3
 8011312:	d01c      	beq.n	801134e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	7b5b      	ldrb	r3, [r3, #13]
 8011318:	f003 0302 	and.w	r3, r3, #2
 801131c:	2b00      	cmp	r3, #0
 801131e:	d116      	bne.n	801134e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	b29a      	uxth	r2, r3
 801132a:	897b      	ldrh	r3, [r7, #10]
 801132c:	4413      	add	r3, r2
 801132e:	b29b      	uxth	r3, r3
 8011330:	4619      	mov	r1, r3
 8011332:	68f8      	ldr	r0, [r7, #12]
 8011334:	f7fe ffd0 	bl	80102d8 <mem_trim>
 8011338:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d106      	bne.n	801134e <pbuf_realloc+0xca>
 8011340:	4b0f      	ldr	r3, [pc, #60]	; (8011380 <pbuf_realloc+0xfc>)
 8011342:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011346:	4912      	ldr	r1, [pc, #72]	; (8011390 <pbuf_realloc+0x10c>)
 8011348:	480f      	ldr	r0, [pc, #60]	; (8011388 <pbuf_realloc+0x104>)
 801134a:	f00a fc87 	bl	801bc5c <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	897a      	ldrh	r2, [r7, #10]
 8011352:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	895a      	ldrh	r2, [r3, #10]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d004      	beq.n	801136e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4618      	mov	r0, r3
 801136a:	f000 f911 	bl	8011590 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	601a      	str	r2, [r3, #0]
 8011374:	e000      	b.n	8011378 <pbuf_realloc+0xf4>
    return;
 8011376:	bf00      	nop

}
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
 801137e:	bf00      	nop
 8011380:	08025f40 	.word	0x08025f40
 8011384:	08026058 	.word	0x08026058
 8011388:	08025fa0 	.word	0x08025fa0
 801138c:	08026070 	.word	0x08026070
 8011390:	08026088 	.word	0x08026088

08011394 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	4613      	mov	r3, r2
 80113a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d106      	bne.n	80113b6 <pbuf_add_header_impl+0x22>
 80113a8:	4b2b      	ldr	r3, [pc, #172]	; (8011458 <pbuf_add_header_impl+0xc4>)
 80113aa:	f240 12df 	movw	r2, #479	; 0x1df
 80113ae:	492b      	ldr	r1, [pc, #172]	; (801145c <pbuf_add_header_impl+0xc8>)
 80113b0:	482b      	ldr	r0, [pc, #172]	; (8011460 <pbuf_add_header_impl+0xcc>)
 80113b2:	f00a fc53 	bl	801bc5c <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d003      	beq.n	80113c4 <pbuf_add_header_impl+0x30>
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113c2:	d301      	bcc.n	80113c8 <pbuf_add_header_impl+0x34>
    return 1;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e043      	b.n	8011450 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d101      	bne.n	80113d2 <pbuf_add_header_impl+0x3e>
    return 0;
 80113ce:	2300      	movs	r3, #0
 80113d0:	e03e      	b.n	8011450 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	891a      	ldrh	r2, [r3, #8]
 80113da:	8a7b      	ldrh	r3, [r7, #18]
 80113dc:	4413      	add	r3, r2
 80113de:	b29b      	uxth	r3, r3
 80113e0:	8a7a      	ldrh	r2, [r7, #18]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d901      	bls.n	80113ea <pbuf_add_header_impl+0x56>
    return 1;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e032      	b.n	8011450 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	7b1b      	ldrb	r3, [r3, #12]
 80113ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80113f0:	8a3b      	ldrh	r3, [r7, #16]
 80113f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d00c      	beq.n	8011414 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	685a      	ldr	r2, [r3, #4]
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	425b      	negs	r3, r3
 8011402:	4413      	add	r3, r2
 8011404:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	3310      	adds	r3, #16
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	429a      	cmp	r2, r3
 801140e:	d20d      	bcs.n	801142c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011410:	2301      	movs	r3, #1
 8011412:	e01d      	b.n	8011450 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011414:	79fb      	ldrb	r3, [r7, #7]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d006      	beq.n	8011428 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	685a      	ldr	r2, [r3, #4]
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	425b      	negs	r3, r3
 8011422:	4413      	add	r3, r2
 8011424:	617b      	str	r3, [r7, #20]
 8011426:	e001      	b.n	801142c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011428:	2301      	movs	r3, #1
 801142a:	e011      	b.n	8011450 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	697a      	ldr	r2, [r7, #20]
 8011430:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	895a      	ldrh	r2, [r3, #10]
 8011436:	8a7b      	ldrh	r3, [r7, #18]
 8011438:	4413      	add	r3, r2
 801143a:	b29a      	uxth	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	891a      	ldrh	r2, [r3, #8]
 8011444:	8a7b      	ldrh	r3, [r7, #18]
 8011446:	4413      	add	r3, r2
 8011448:	b29a      	uxth	r2, r3
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	811a      	strh	r2, [r3, #8]


  return 0;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3718      	adds	r7, #24
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	08025f40 	.word	0x08025f40
 801145c:	080260a4 	.word	0x080260a4
 8011460:	08025fa0 	.word	0x08025fa0

08011464 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801146e:	2200      	movs	r2, #0
 8011470:	6839      	ldr	r1, [r7, #0]
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f7ff ff8e 	bl	8011394 <pbuf_add_header_impl>
 8011478:	4603      	mov	r3, r0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
	...

08011484 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d106      	bne.n	80114a2 <pbuf_remove_header+0x1e>
 8011494:	4b20      	ldr	r3, [pc, #128]	; (8011518 <pbuf_remove_header+0x94>)
 8011496:	f240 224b 	movw	r2, #587	; 0x24b
 801149a:	4920      	ldr	r1, [pc, #128]	; (801151c <pbuf_remove_header+0x98>)
 801149c:	4820      	ldr	r0, [pc, #128]	; (8011520 <pbuf_remove_header+0x9c>)
 801149e:	f00a fbdd 	bl	801bc5c <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d003      	beq.n	80114b0 <pbuf_remove_header+0x2c>
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114ae:	d301      	bcc.n	80114b4 <pbuf_remove_header+0x30>
    return 1;
 80114b0:	2301      	movs	r3, #1
 80114b2:	e02c      	b.n	801150e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d101      	bne.n	80114be <pbuf_remove_header+0x3a>
    return 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	e027      	b.n	801150e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	895b      	ldrh	r3, [r3, #10]
 80114c6:	89fa      	ldrh	r2, [r7, #14]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d908      	bls.n	80114de <pbuf_remove_header+0x5a>
 80114cc:	4b12      	ldr	r3, [pc, #72]	; (8011518 <pbuf_remove_header+0x94>)
 80114ce:	f240 2255 	movw	r2, #597	; 0x255
 80114d2:	4914      	ldr	r1, [pc, #80]	; (8011524 <pbuf_remove_header+0xa0>)
 80114d4:	4812      	ldr	r0, [pc, #72]	; (8011520 <pbuf_remove_header+0x9c>)
 80114d6:	f00a fbc1 	bl	801bc5c <printf>
 80114da:	2301      	movs	r3, #1
 80114dc:	e017      	b.n	801150e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	441a      	add	r2, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	895a      	ldrh	r2, [r3, #10]
 80114f4:	89fb      	ldrh	r3, [r7, #14]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	891a      	ldrh	r2, [r3, #8]
 8011502:	89fb      	ldrh	r3, [r7, #14]
 8011504:	1ad3      	subs	r3, r2, r3
 8011506:	b29a      	uxth	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	08025f40 	.word	0x08025f40
 801151c:	080260a4 	.word	0x080260a4
 8011520:	08025fa0 	.word	0x08025fa0
 8011524:	080260b0 	.word	0x080260b0

08011528 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	460b      	mov	r3, r1
 8011532:	807b      	strh	r3, [r7, #2]
 8011534:	4613      	mov	r3, r2
 8011536:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011538:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801153c:	2b00      	cmp	r3, #0
 801153e:	da08      	bge.n	8011552 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011544:	425b      	negs	r3, r3
 8011546:	4619      	mov	r1, r3
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff ff9b 	bl	8011484 <pbuf_remove_header>
 801154e:	4603      	mov	r3, r0
 8011550:	e007      	b.n	8011562 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011556:	787a      	ldrb	r2, [r7, #1]
 8011558:	4619      	mov	r1, r3
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff ff1a 	bl	8011394 <pbuf_add_header_impl>
 8011560:	4603      	mov	r3, r0
  }
}
 8011562:	4618      	mov	r0, r3
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	460b      	mov	r3, r1
 8011574:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011576:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801157a:	2201      	movs	r2, #1
 801157c:	4619      	mov	r1, r3
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f7ff ffd2 	bl	8011528 <pbuf_header_impl>
 8011584:	4603      	mov	r3, r0
}
 8011586:	4618      	mov	r0, r3
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
	...

08011590 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b088      	sub	sp, #32
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10b      	bne.n	80115b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d106      	bne.n	80115b2 <pbuf_free+0x22>
 80115a4:	4b3b      	ldr	r3, [pc, #236]	; (8011694 <pbuf_free+0x104>)
 80115a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80115aa:	493b      	ldr	r1, [pc, #236]	; (8011698 <pbuf_free+0x108>)
 80115ac:	483b      	ldr	r0, [pc, #236]	; (801169c <pbuf_free+0x10c>)
 80115ae:	f00a fb55 	bl	801bc5c <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e069      	b.n	801168a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80115ba:	e062      	b.n	8011682 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80115bc:	f009 ff56 	bl	801b46c <sys_arch_protect>
 80115c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	7b9b      	ldrb	r3, [r3, #14]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d106      	bne.n	80115d8 <pbuf_free+0x48>
 80115ca:	4b32      	ldr	r3, [pc, #200]	; (8011694 <pbuf_free+0x104>)
 80115cc:	f240 22f1 	movw	r2, #753	; 0x2f1
 80115d0:	4933      	ldr	r1, [pc, #204]	; (80116a0 <pbuf_free+0x110>)
 80115d2:	4832      	ldr	r0, [pc, #200]	; (801169c <pbuf_free+0x10c>)
 80115d4:	f00a fb42 	bl	801bc5c <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	7b9b      	ldrb	r3, [r3, #14]
 80115dc:	3b01      	subs	r3, #1
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	739a      	strb	r2, [r3, #14]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	7b9b      	ldrb	r3, [r3, #14]
 80115e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80115ea:	69b8      	ldr	r0, [r7, #24]
 80115ec:	f009 ff4c 	bl	801b488 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80115f0:	7dfb      	ldrb	r3, [r7, #23]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d143      	bne.n	801167e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7b1b      	ldrb	r3, [r3, #12]
 8011600:	f003 030f 	and.w	r3, r3, #15
 8011604:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	7b5b      	ldrb	r3, [r3, #13]
 801160a:	f003 0302 	and.w	r3, r3, #2
 801160e:	2b00      	cmp	r3, #0
 8011610:	d011      	beq.n	8011636 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d106      	bne.n	801162c <pbuf_free+0x9c>
 801161e:	4b1d      	ldr	r3, [pc, #116]	; (8011694 <pbuf_free+0x104>)
 8011620:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011624:	491f      	ldr	r1, [pc, #124]	; (80116a4 <pbuf_free+0x114>)
 8011626:	481d      	ldr	r0, [pc, #116]	; (801169c <pbuf_free+0x10c>)
 8011628:	f00a fb18 	bl	801bc5c <printf>
        pc->custom_free_function(p);
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	4798      	blx	r3
 8011634:	e01d      	b.n	8011672 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011636:	7bfb      	ldrb	r3, [r7, #15]
 8011638:	2b02      	cmp	r3, #2
 801163a:	d104      	bne.n	8011646 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801163c:	6879      	ldr	r1, [r7, #4]
 801163e:	200c      	movs	r0, #12
 8011640:	f7ff f928 	bl	8010894 <memp_free>
 8011644:	e015      	b.n	8011672 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011646:	7bfb      	ldrb	r3, [r7, #15]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d104      	bne.n	8011656 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801164c:	6879      	ldr	r1, [r7, #4]
 801164e:	200b      	movs	r0, #11
 8011650:	f7ff f920 	bl	8010894 <memp_free>
 8011654:	e00d      	b.n	8011672 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011656:	7bfb      	ldrb	r3, [r7, #15]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d103      	bne.n	8011664 <pbuf_free+0xd4>
          mem_free(p);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7fe fdab 	bl	80101b8 <mem_free>
 8011662:	e006      	b.n	8011672 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011664:	4b0b      	ldr	r3, [pc, #44]	; (8011694 <pbuf_free+0x104>)
 8011666:	f240 320f 	movw	r2, #783	; 0x30f
 801166a:	490f      	ldr	r1, [pc, #60]	; (80116a8 <pbuf_free+0x118>)
 801166c:	480b      	ldr	r0, [pc, #44]	; (801169c <pbuf_free+0x10c>)
 801166e:	f00a faf5 	bl	801bc5c <printf>
        }
      }
      count++;
 8011672:	7ffb      	ldrb	r3, [r7, #31]
 8011674:	3301      	adds	r3, #1
 8011676:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	607b      	str	r3, [r7, #4]
 801167c:	e001      	b.n	8011682 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801167e:	2300      	movs	r3, #0
 8011680:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d199      	bne.n	80115bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011688:	7ffb      	ldrb	r3, [r7, #31]
}
 801168a:	4618      	mov	r0, r3
 801168c:	3720      	adds	r7, #32
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	08025f40 	.word	0x08025f40
 8011698:	080260a4 	.word	0x080260a4
 801169c:	08025fa0 	.word	0x08025fa0
 80116a0:	080260d0 	.word	0x080260d0
 80116a4:	080260e8 	.word	0x080260e8
 80116a8:	0802610c 	.word	0x0802610c

080116ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80116b4:	2300      	movs	r3, #0
 80116b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80116b8:	e005      	b.n	80116c6 <pbuf_clen+0x1a>
    ++len;
 80116ba:	89fb      	ldrh	r3, [r7, #14]
 80116bc:	3301      	adds	r3, #1
 80116be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d1f6      	bne.n	80116ba <pbuf_clen+0xe>
  }
  return len;
 80116cc:	89fb      	ldrh	r3, [r7, #14]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3714      	adds	r7, #20
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
	...

080116dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d016      	beq.n	8011718 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80116ea:	f009 febf 	bl	801b46c <sys_arch_protect>
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	7b9b      	ldrb	r3, [r3, #14]
 80116f4:	3301      	adds	r3, #1
 80116f6:	b2da      	uxtb	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	739a      	strb	r2, [r3, #14]
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f009 fec3 	bl	801b488 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	7b9b      	ldrb	r3, [r3, #14]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <pbuf_ref+0x3c>
 801170a:	4b05      	ldr	r3, [pc, #20]	; (8011720 <pbuf_ref+0x44>)
 801170c:	f240 3242 	movw	r2, #834	; 0x342
 8011710:	4904      	ldr	r1, [pc, #16]	; (8011724 <pbuf_ref+0x48>)
 8011712:	4805      	ldr	r0, [pc, #20]	; (8011728 <pbuf_ref+0x4c>)
 8011714:	f00a faa2 	bl	801bc5c <printf>
  }
}
 8011718:	bf00      	nop
 801171a:	3710      	adds	r7, #16
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	08025f40 	.word	0x08025f40
 8011724:	08026120 	.word	0x08026120
 8011728:	08025fa0 	.word	0x08025fa0

0801172c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d002      	beq.n	8011742 <pbuf_cat+0x16>
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d107      	bne.n	8011752 <pbuf_cat+0x26>
 8011742:	4b20      	ldr	r3, [pc, #128]	; (80117c4 <pbuf_cat+0x98>)
 8011744:	f240 3259 	movw	r2, #857	; 0x359
 8011748:	491f      	ldr	r1, [pc, #124]	; (80117c8 <pbuf_cat+0x9c>)
 801174a:	4820      	ldr	r0, [pc, #128]	; (80117cc <pbuf_cat+0xa0>)
 801174c:	f00a fa86 	bl	801bc5c <printf>
 8011750:	e034      	b.n	80117bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	60fb      	str	r3, [r7, #12]
 8011756:	e00a      	b.n	801176e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	891a      	ldrh	r2, [r3, #8]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	891b      	ldrh	r3, [r3, #8]
 8011760:	4413      	add	r3, r2
 8011762:	b29a      	uxth	r2, r3
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	60fb      	str	r3, [r7, #12]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1f0      	bne.n	8011758 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	891a      	ldrh	r2, [r3, #8]
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	895b      	ldrh	r3, [r3, #10]
 801177e:	429a      	cmp	r2, r3
 8011780:	d006      	beq.n	8011790 <pbuf_cat+0x64>
 8011782:	4b10      	ldr	r3, [pc, #64]	; (80117c4 <pbuf_cat+0x98>)
 8011784:	f240 3262 	movw	r2, #866	; 0x362
 8011788:	4911      	ldr	r1, [pc, #68]	; (80117d0 <pbuf_cat+0xa4>)
 801178a:	4810      	ldr	r0, [pc, #64]	; (80117cc <pbuf_cat+0xa0>)
 801178c:	f00a fa66 	bl	801bc5c <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d006      	beq.n	80117a6 <pbuf_cat+0x7a>
 8011798:	4b0a      	ldr	r3, [pc, #40]	; (80117c4 <pbuf_cat+0x98>)
 801179a:	f240 3263 	movw	r2, #867	; 0x363
 801179e:	490d      	ldr	r1, [pc, #52]	; (80117d4 <pbuf_cat+0xa8>)
 80117a0:	480a      	ldr	r0, [pc, #40]	; (80117cc <pbuf_cat+0xa0>)
 80117a2:	f00a fa5b 	bl	801bc5c <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	891a      	ldrh	r2, [r3, #8]
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	891b      	ldrh	r3, [r3, #8]
 80117ae:	4413      	add	r3, r2
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	683a      	ldr	r2, [r7, #0]
 80117ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	08025f40 	.word	0x08025f40
 80117c8:	08026134 	.word	0x08026134
 80117cc:	08025fa0 	.word	0x08025fa0
 80117d0:	0802616c 	.word	0x0802616c
 80117d4:	0802619c 	.word	0x0802619c

080117d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80117e2:	6839      	ldr	r1, [r7, #0]
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff ffa1 	bl	801172c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80117ea:	6838      	ldr	r0, [r7, #0]
 80117ec:	f7ff ff76 	bl	80116dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80117f0:	bf00      	nop
 80117f2:	3708      	adds	r7, #8
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011802:	2300      	movs	r3, #0
 8011804:	617b      	str	r3, [r7, #20]
 8011806:	2300      	movs	r3, #0
 8011808:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d008      	beq.n	8011822 <pbuf_copy+0x2a>
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d005      	beq.n	8011822 <pbuf_copy+0x2a>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	891a      	ldrh	r2, [r3, #8]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	891b      	ldrh	r3, [r3, #8]
 801181e:	429a      	cmp	r2, r3
 8011820:	d209      	bcs.n	8011836 <pbuf_copy+0x3e>
 8011822:	4b57      	ldr	r3, [pc, #348]	; (8011980 <pbuf_copy+0x188>)
 8011824:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011828:	4956      	ldr	r1, [pc, #344]	; (8011984 <pbuf_copy+0x18c>)
 801182a:	4857      	ldr	r0, [pc, #348]	; (8011988 <pbuf_copy+0x190>)
 801182c:	f00a fa16 	bl	801bc5c <printf>
 8011830:	f06f 030f 	mvn.w	r3, #15
 8011834:	e09f      	b.n	8011976 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	895b      	ldrh	r3, [r3, #10]
 801183a:	461a      	mov	r2, r3
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	1ad2      	subs	r2, r2, r3
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	895b      	ldrh	r3, [r3, #10]
 8011844:	4619      	mov	r1, r3
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	1acb      	subs	r3, r1, r3
 801184a:	429a      	cmp	r2, r3
 801184c:	d306      	bcc.n	801185c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	895b      	ldrh	r3, [r3, #10]
 8011852:	461a      	mov	r2, r3
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	60fb      	str	r3, [r7, #12]
 801185a:	e005      	b.n	8011868 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	895b      	ldrh	r3, [r3, #10]
 8011860:	461a      	mov	r2, r3
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	1ad3      	subs	r3, r2, r3
 8011866:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685a      	ldr	r2, [r3, #4]
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	18d0      	adds	r0, r2, r3
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	685a      	ldr	r2, [r3, #4]
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	4413      	add	r3, r2
 8011878:	68fa      	ldr	r2, [r7, #12]
 801187a:	4619      	mov	r1, r3
 801187c:	f009 ff40 	bl	801b700 <memcpy>
    offset_to += len;
 8011880:	697a      	ldr	r2, [r7, #20]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	4413      	add	r3, r2
 8011886:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011888:	693a      	ldr	r2, [r7, #16]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	4413      	add	r3, r2
 801188e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	895b      	ldrh	r3, [r3, #10]
 8011894:	461a      	mov	r2, r3
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	4293      	cmp	r3, r2
 801189a:	d906      	bls.n	80118aa <pbuf_copy+0xb2>
 801189c:	4b38      	ldr	r3, [pc, #224]	; (8011980 <pbuf_copy+0x188>)
 801189e:	f240 32d9 	movw	r2, #985	; 0x3d9
 80118a2:	493a      	ldr	r1, [pc, #232]	; (801198c <pbuf_copy+0x194>)
 80118a4:	4838      	ldr	r0, [pc, #224]	; (8011988 <pbuf_copy+0x190>)
 80118a6:	f00a f9d9 	bl	801bc5c <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	895b      	ldrh	r3, [r3, #10]
 80118ae:	461a      	mov	r2, r3
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d906      	bls.n	80118c4 <pbuf_copy+0xcc>
 80118b6:	4b32      	ldr	r3, [pc, #200]	; (8011980 <pbuf_copy+0x188>)
 80118b8:	f240 32da 	movw	r2, #986	; 0x3da
 80118bc:	4934      	ldr	r1, [pc, #208]	; (8011990 <pbuf_copy+0x198>)
 80118be:	4832      	ldr	r0, [pc, #200]	; (8011988 <pbuf_copy+0x190>)
 80118c0:	f00a f9cc 	bl	801bc5c <printf>
    if (offset_from >= p_from->len) {
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	895b      	ldrh	r3, [r3, #10]
 80118c8:	461a      	mov	r2, r3
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d304      	bcc.n	80118da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	895b      	ldrh	r3, [r3, #10]
 80118de:	461a      	mov	r2, r3
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d114      	bne.n	8011910 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d10c      	bne.n	8011910 <pbuf_copy+0x118>
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d009      	beq.n	8011910 <pbuf_copy+0x118>
 80118fc:	4b20      	ldr	r3, [pc, #128]	; (8011980 <pbuf_copy+0x188>)
 80118fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011902:	4924      	ldr	r1, [pc, #144]	; (8011994 <pbuf_copy+0x19c>)
 8011904:	4820      	ldr	r0, [pc, #128]	; (8011988 <pbuf_copy+0x190>)
 8011906:	f00a f9a9 	bl	801bc5c <printf>
 801190a:	f06f 030f 	mvn.w	r3, #15
 801190e:	e032      	b.n	8011976 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d013      	beq.n	801193e <pbuf_copy+0x146>
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	895a      	ldrh	r2, [r3, #10]
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	891b      	ldrh	r3, [r3, #8]
 801191e:	429a      	cmp	r2, r3
 8011920:	d10d      	bne.n	801193e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d009      	beq.n	801193e <pbuf_copy+0x146>
 801192a:	4b15      	ldr	r3, [pc, #84]	; (8011980 <pbuf_copy+0x188>)
 801192c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011930:	4919      	ldr	r1, [pc, #100]	; (8011998 <pbuf_copy+0x1a0>)
 8011932:	4815      	ldr	r0, [pc, #84]	; (8011988 <pbuf_copy+0x190>)
 8011934:	f00a f992 	bl	801bc5c <printf>
 8011938:	f06f 0305 	mvn.w	r3, #5
 801193c:	e01b      	b.n	8011976 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d013      	beq.n	801196c <pbuf_copy+0x174>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	895a      	ldrh	r2, [r3, #10]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	891b      	ldrh	r3, [r3, #8]
 801194c:	429a      	cmp	r2, r3
 801194e:	d10d      	bne.n	801196c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d009      	beq.n	801196c <pbuf_copy+0x174>
 8011958:	4b09      	ldr	r3, [pc, #36]	; (8011980 <pbuf_copy+0x188>)
 801195a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801195e:	490e      	ldr	r1, [pc, #56]	; (8011998 <pbuf_copy+0x1a0>)
 8011960:	4809      	ldr	r0, [pc, #36]	; (8011988 <pbuf_copy+0x190>)
 8011962:	f00a f97b 	bl	801bc5c <printf>
 8011966:	f06f 0305 	mvn.w	r3, #5
 801196a:	e004      	b.n	8011976 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	f47f af61 	bne.w	8011836 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011974:	2300      	movs	r3, #0
}
 8011976:	4618      	mov	r0, r3
 8011978:	3718      	adds	r7, #24
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	08025f40 	.word	0x08025f40
 8011984:	080261e8 	.word	0x080261e8
 8011988:	08025fa0 	.word	0x08025fa0
 801198c:	08026218 	.word	0x08026218
 8011990:	08026230 	.word	0x08026230
 8011994:	0802624c 	.word	0x0802624c
 8011998:	0802625c 	.word	0x0802625c

0801199c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b088      	sub	sp, #32
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	4611      	mov	r1, r2
 80119a8:	461a      	mov	r2, r3
 80119aa:	460b      	mov	r3, r1
 80119ac:	80fb      	strh	r3, [r7, #6]
 80119ae:	4613      	mov	r3, r2
 80119b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80119b2:	2300      	movs	r3, #0
 80119b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80119b6:	2300      	movs	r3, #0
 80119b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d108      	bne.n	80119d2 <pbuf_copy_partial+0x36>
 80119c0:	4b2b      	ldr	r3, [pc, #172]	; (8011a70 <pbuf_copy_partial+0xd4>)
 80119c2:	f240 420a 	movw	r2, #1034	; 0x40a
 80119c6:	492b      	ldr	r1, [pc, #172]	; (8011a74 <pbuf_copy_partial+0xd8>)
 80119c8:	482b      	ldr	r0, [pc, #172]	; (8011a78 <pbuf_copy_partial+0xdc>)
 80119ca:	f00a f947 	bl	801bc5c <printf>
 80119ce:	2300      	movs	r3, #0
 80119d0:	e04a      	b.n	8011a68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d108      	bne.n	80119ea <pbuf_copy_partial+0x4e>
 80119d8:	4b25      	ldr	r3, [pc, #148]	; (8011a70 <pbuf_copy_partial+0xd4>)
 80119da:	f240 420b 	movw	r2, #1035	; 0x40b
 80119de:	4927      	ldr	r1, [pc, #156]	; (8011a7c <pbuf_copy_partial+0xe0>)
 80119e0:	4825      	ldr	r0, [pc, #148]	; (8011a78 <pbuf_copy_partial+0xdc>)
 80119e2:	f00a f93b 	bl	801bc5c <printf>
 80119e6:	2300      	movs	r3, #0
 80119e8:	e03e      	b.n	8011a68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	61fb      	str	r3, [r7, #28]
 80119ee:	e034      	b.n	8011a5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80119f0:	88bb      	ldrh	r3, [r7, #4]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d00a      	beq.n	8011a0c <pbuf_copy_partial+0x70>
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	895b      	ldrh	r3, [r3, #10]
 80119fa:	88ba      	ldrh	r2, [r7, #4]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d305      	bcc.n	8011a0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	895b      	ldrh	r3, [r3, #10]
 8011a04:	88ba      	ldrh	r2, [r7, #4]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	80bb      	strh	r3, [r7, #4]
 8011a0a:	e023      	b.n	8011a54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	895a      	ldrh	r2, [r3, #10]
 8011a10:	88bb      	ldrh	r3, [r7, #4]
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011a16:	8b3a      	ldrh	r2, [r7, #24]
 8011a18:	88fb      	ldrh	r3, [r7, #6]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d901      	bls.n	8011a22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011a1e:	88fb      	ldrh	r3, [r7, #6]
 8011a20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011a22:	8b7b      	ldrh	r3, [r7, #26]
 8011a24:	68ba      	ldr	r2, [r7, #8]
 8011a26:	18d0      	adds	r0, r2, r3
 8011a28:	69fb      	ldr	r3, [r7, #28]
 8011a2a:	685a      	ldr	r2, [r3, #4]
 8011a2c:	88bb      	ldrh	r3, [r7, #4]
 8011a2e:	4413      	add	r3, r2
 8011a30:	8b3a      	ldrh	r2, [r7, #24]
 8011a32:	4619      	mov	r1, r3
 8011a34:	f009 fe64 	bl	801b700 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011a38:	8afa      	ldrh	r2, [r7, #22]
 8011a3a:	8b3b      	ldrh	r3, [r7, #24]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011a40:	8b7a      	ldrh	r2, [r7, #26]
 8011a42:	8b3b      	ldrh	r3, [r7, #24]
 8011a44:	4413      	add	r3, r2
 8011a46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011a48:	88fa      	ldrh	r2, [r7, #6]
 8011a4a:	8b3b      	ldrh	r3, [r7, #24]
 8011a4c:	1ad3      	subs	r3, r2, r3
 8011a4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011a50:	2300      	movs	r3, #0
 8011a52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	61fb      	str	r3, [r7, #28]
 8011a5a:	88fb      	ldrh	r3, [r7, #6]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <pbuf_copy_partial+0xca>
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d1c4      	bne.n	80119f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011a66:	8afb      	ldrh	r3, [r7, #22]
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3720      	adds	r7, #32
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	08025f40 	.word	0x08025f40
 8011a74:	08026288 	.word	0x08026288
 8011a78:	08025fa0 	.word	0x08025fa0
 8011a7c:	080262a8 	.word	0x080262a8

08011a80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	4603      	mov	r3, r0
 8011a88:	603a      	str	r2, [r7, #0]
 8011a8a:	71fb      	strb	r3, [r7, #7]
 8011a8c:	460b      	mov	r3, r1
 8011a8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	8919      	ldrh	r1, [r3, #8]
 8011a94:	88ba      	ldrh	r2, [r7, #4]
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7ff fa95 	bl	8010fc8 <pbuf_alloc>
 8011a9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d101      	bne.n	8011aaa <pbuf_clone+0x2a>
    return NULL;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e011      	b.n	8011ace <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011aaa:	6839      	ldr	r1, [r7, #0]
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f7ff fea3 	bl	80117f8 <pbuf_copy>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011ab6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d006      	beq.n	8011acc <pbuf_clone+0x4c>
 8011abe:	4b06      	ldr	r3, [pc, #24]	; (8011ad8 <pbuf_clone+0x58>)
 8011ac0:	f240 5224 	movw	r2, #1316	; 0x524
 8011ac4:	4905      	ldr	r1, [pc, #20]	; (8011adc <pbuf_clone+0x5c>)
 8011ac6:	4806      	ldr	r0, [pc, #24]	; (8011ae0 <pbuf_clone+0x60>)
 8011ac8:	f00a f8c8 	bl	801bc5c <printf>
  return q;
 8011acc:	68fb      	ldr	r3, [r7, #12]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3710      	adds	r7, #16
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	08025f40 	.word	0x08025f40
 8011adc:	080263b4 	.word	0x080263b4
 8011ae0:	08025fa0 	.word	0x08025fa0

08011ae4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011ae8:	f00a f8ca 	bl	801bc80 <rand>
 8011aec:	4603      	mov	r3, r0
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	4b01      	ldr	r3, [pc, #4]	; (8011b04 <tcp_init+0x20>)
 8011afe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b00:	bf00      	nop
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	2000002c 	.word	0x2000002c

08011b08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b082      	sub	sp, #8
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7d1b      	ldrb	r3, [r3, #20]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d105      	bne.n	8011b24 <tcp_free+0x1c>
 8011b18:	4b06      	ldr	r3, [pc, #24]	; (8011b34 <tcp_free+0x2c>)
 8011b1a:	22d4      	movs	r2, #212	; 0xd4
 8011b1c:	4906      	ldr	r1, [pc, #24]	; (8011b38 <tcp_free+0x30>)
 8011b1e:	4807      	ldr	r0, [pc, #28]	; (8011b3c <tcp_free+0x34>)
 8011b20:	f00a f89c 	bl	801bc5c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011b24:	6879      	ldr	r1, [r7, #4]
 8011b26:	2001      	movs	r0, #1
 8011b28:	f7fe feb4 	bl	8010894 <memp_free>
}
 8011b2c:	bf00      	nop
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	08026440 	.word	0x08026440
 8011b38:	08026470 	.word	0x08026470
 8011b3c:	08026484 	.word	0x08026484

08011b40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	7d1b      	ldrb	r3, [r3, #20]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d105      	bne.n	8011b5c <tcp_free_listen+0x1c>
 8011b50:	4b06      	ldr	r3, [pc, #24]	; (8011b6c <tcp_free_listen+0x2c>)
 8011b52:	22df      	movs	r2, #223	; 0xdf
 8011b54:	4906      	ldr	r1, [pc, #24]	; (8011b70 <tcp_free_listen+0x30>)
 8011b56:	4807      	ldr	r0, [pc, #28]	; (8011b74 <tcp_free_listen+0x34>)
 8011b58:	f00a f880 	bl	801bc5c <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011b5c:	6879      	ldr	r1, [r7, #4]
 8011b5e:	2002      	movs	r0, #2
 8011b60:	f7fe fe98 	bl	8010894 <memp_free>
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	08026440 	.word	0x08026440
 8011b70:	080264ac 	.word	0x080264ac
 8011b74:	08026484 	.word	0x08026484

08011b78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011b7c:	f001 f8b8 	bl	8012cf0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011b80:	4b07      	ldr	r3, [pc, #28]	; (8011ba0 <tcp_tmr+0x28>)
 8011b82:	781b      	ldrb	r3, [r3, #0]
 8011b84:	3301      	adds	r3, #1
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <tcp_tmr+0x28>)
 8011b8a:	701a      	strb	r2, [r3, #0]
 8011b8c:	4b04      	ldr	r3, [pc, #16]	; (8011ba0 <tcp_tmr+0x28>)
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	f003 0301 	and.w	r3, r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d001      	beq.n	8011b9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011b98:	f000 fd6a 	bl	8012670 <tcp_slowtmr>
  }
}
 8011b9c:	bf00      	nop
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20004f09 	.word	0x20004f09

08011ba4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d105      	bne.n	8011bc0 <tcp_remove_listener+0x1c>
 8011bb4:	4b0d      	ldr	r3, [pc, #52]	; (8011bec <tcp_remove_listener+0x48>)
 8011bb6:	22ff      	movs	r2, #255	; 0xff
 8011bb8:	490d      	ldr	r1, [pc, #52]	; (8011bf0 <tcp_remove_listener+0x4c>)
 8011bba:	480e      	ldr	r0, [pc, #56]	; (8011bf4 <tcp_remove_listener+0x50>)
 8011bbc:	f00a f84e 	bl	801bc5c <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	e00a      	b.n	8011bdc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d102      	bne.n	8011bd6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	60fb      	str	r3, [r7, #12]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1f1      	bne.n	8011bc6 <tcp_remove_listener+0x22>
    }
  }
}
 8011be2:	bf00      	nop
 8011be4:	bf00      	nop
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	08026440 	.word	0x08026440
 8011bf0:	080264c8 	.word	0x080264c8
 8011bf4:	08026484 	.word	0x08026484

08011bf8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <tcp_listen_closed+0x1c>
 8011c06:	4b14      	ldr	r3, [pc, #80]	; (8011c58 <tcp_listen_closed+0x60>)
 8011c08:	f240 1211 	movw	r2, #273	; 0x111
 8011c0c:	4913      	ldr	r1, [pc, #76]	; (8011c5c <tcp_listen_closed+0x64>)
 8011c0e:	4814      	ldr	r0, [pc, #80]	; (8011c60 <tcp_listen_closed+0x68>)
 8011c10:	f00a f824 	bl	801bc5c <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	7d1b      	ldrb	r3, [r3, #20]
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d006      	beq.n	8011c2a <tcp_listen_closed+0x32>
 8011c1c:	4b0e      	ldr	r3, [pc, #56]	; (8011c58 <tcp_listen_closed+0x60>)
 8011c1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011c22:	4910      	ldr	r1, [pc, #64]	; (8011c64 <tcp_listen_closed+0x6c>)
 8011c24:	480e      	ldr	r0, [pc, #56]	; (8011c60 <tcp_listen_closed+0x68>)
 8011c26:	f00a f819 	bl	801bc5c <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	60fb      	str	r3, [r7, #12]
 8011c2e:	e00b      	b.n	8011c48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011c30:	4a0d      	ldr	r2, [pc, #52]	; (8011c68 <tcp_listen_closed+0x70>)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7ff ffb1 	bl	8011ba4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3301      	adds	r3, #1
 8011c46:	60fb      	str	r3, [r7, #12]
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b03      	cmp	r3, #3
 8011c4c:	d9f0      	bls.n	8011c30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011c4e:	bf00      	nop
 8011c50:	bf00      	nop
 8011c52:	3710      	adds	r7, #16
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	08026440 	.word	0x08026440
 8011c5c:	080264f0 	.word	0x080264f0
 8011c60:	08026484 	.word	0x08026484
 8011c64:	080264fc 	.word	0x080264fc
 8011c68:	08029160 	.word	0x08029160

08011c6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011c6c:	b5b0      	push	{r4, r5, r7, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	af04      	add	r7, sp, #16
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	460b      	mov	r3, r1
 8011c76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d106      	bne.n	8011c8c <tcp_close_shutdown+0x20>
 8011c7e:	4b63      	ldr	r3, [pc, #396]	; (8011e0c <tcp_close_shutdown+0x1a0>)
 8011c80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011c84:	4962      	ldr	r1, [pc, #392]	; (8011e10 <tcp_close_shutdown+0x1a4>)
 8011c86:	4863      	ldr	r0, [pc, #396]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011c88:	f009 ffe8 	bl	801bc5c <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011c8c:	78fb      	ldrb	r3, [r7, #3]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d066      	beq.n	8011d60 <tcp_close_shutdown+0xf4>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	7d1b      	ldrb	r3, [r3, #20]
 8011c96:	2b04      	cmp	r3, #4
 8011c98:	d003      	beq.n	8011ca2 <tcp_close_shutdown+0x36>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	7d1b      	ldrb	r3, [r3, #20]
 8011c9e:	2b07      	cmp	r3, #7
 8011ca0:	d15e      	bne.n	8011d60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d104      	bne.n	8011cb4 <tcp_close_shutdown+0x48>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011cb2:	d055      	beq.n	8011d60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	8b5b      	ldrh	r3, [r3, #26]
 8011cb8:	f003 0310 	and.w	r3, r3, #16
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d106      	bne.n	8011cce <tcp_close_shutdown+0x62>
 8011cc0:	4b52      	ldr	r3, [pc, #328]	; (8011e0c <tcp_close_shutdown+0x1a0>)
 8011cc2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011cc6:	4954      	ldr	r1, [pc, #336]	; (8011e18 <tcp_close_shutdown+0x1ac>)
 8011cc8:	4852      	ldr	r0, [pc, #328]	; (8011e14 <tcp_close_shutdown+0x1a8>)
 8011cca:	f009 ffc7 	bl	801bc5c <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011cd6:	687d      	ldr	r5, [r7, #4]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	3304      	adds	r3, #4
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	8ad2      	ldrh	r2, [r2, #22]
 8011ce0:	6879      	ldr	r1, [r7, #4]
 8011ce2:	8b09      	ldrh	r1, [r1, #24]
 8011ce4:	9102      	str	r1, [sp, #8]
 8011ce6:	9201      	str	r2, [sp, #4]
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	462b      	mov	r3, r5
 8011cec:	4622      	mov	r2, r4
 8011cee:	4601      	mov	r1, r0
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f005 fde7 	bl	80178c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f001 fbc8 	bl	801348c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011cfc:	4b47      	ldr	r3, [pc, #284]	; (8011e1c <tcp_close_shutdown+0x1b0>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d105      	bne.n	8011d12 <tcp_close_shutdown+0xa6>
 8011d06:	4b45      	ldr	r3, [pc, #276]	; (8011e1c <tcp_close_shutdown+0x1b0>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	4a43      	ldr	r2, [pc, #268]	; (8011e1c <tcp_close_shutdown+0x1b0>)
 8011d0e:	6013      	str	r3, [r2, #0]
 8011d10:	e013      	b.n	8011d3a <tcp_close_shutdown+0xce>
 8011d12:	4b42      	ldr	r3, [pc, #264]	; (8011e1c <tcp_close_shutdown+0x1b0>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	60fb      	str	r3, [r7, #12]
 8011d18:	e00c      	b.n	8011d34 <tcp_close_shutdown+0xc8>
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	687a      	ldr	r2, [r7, #4]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d104      	bne.n	8011d2e <tcp_close_shutdown+0xc2>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	68da      	ldr	r2, [r3, #12]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	60da      	str	r2, [r3, #12]
 8011d2c:	e005      	b.n	8011d3a <tcp_close_shutdown+0xce>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	60fb      	str	r3, [r7, #12]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1ef      	bne.n	8011d1a <tcp_close_shutdown+0xae>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	60da      	str	r2, [r3, #12]
 8011d40:	4b37      	ldr	r3, [pc, #220]	; (8011e20 <tcp_close_shutdown+0x1b4>)
 8011d42:	2201      	movs	r2, #1
 8011d44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011d46:	4b37      	ldr	r3, [pc, #220]	; (8011e24 <tcp_close_shutdown+0x1b8>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d102      	bne.n	8011d56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011d50:	f004 f85c 	bl	8015e0c <tcp_trigger_input_pcb_close>
 8011d54:	e002      	b.n	8011d5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7ff fed6 	bl	8011b08 <tcp_free>
      }
      return ERR_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e050      	b.n	8011e02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	7d1b      	ldrb	r3, [r3, #20]
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d03b      	beq.n	8011de0 <tcp_close_shutdown+0x174>
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	dc44      	bgt.n	8011df6 <tcp_close_shutdown+0x18a>
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <tcp_close_shutdown+0x10a>
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d02a      	beq.n	8011dca <tcp_close_shutdown+0x15e>
 8011d74:	e03f      	b.n	8011df6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	8adb      	ldrh	r3, [r3, #22]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d021      	beq.n	8011dc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d7e:	4b2a      	ldr	r3, [pc, #168]	; (8011e28 <tcp_close_shutdown+0x1bc>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d105      	bne.n	8011d94 <tcp_close_shutdown+0x128>
 8011d88:	4b27      	ldr	r3, [pc, #156]	; (8011e28 <tcp_close_shutdown+0x1bc>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	4a26      	ldr	r2, [pc, #152]	; (8011e28 <tcp_close_shutdown+0x1bc>)
 8011d90:	6013      	str	r3, [r2, #0]
 8011d92:	e013      	b.n	8011dbc <tcp_close_shutdown+0x150>
 8011d94:	4b24      	ldr	r3, [pc, #144]	; (8011e28 <tcp_close_shutdown+0x1bc>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	60bb      	str	r3, [r7, #8]
 8011d9a:	e00c      	b.n	8011db6 <tcp_close_shutdown+0x14a>
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d104      	bne.n	8011db0 <tcp_close_shutdown+0x144>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	68da      	ldr	r2, [r3, #12]
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	60da      	str	r2, [r3, #12]
 8011dae:	e005      	b.n	8011dbc <tcp_close_shutdown+0x150>
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	60bb      	str	r3, [r7, #8]
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d1ef      	bne.n	8011d9c <tcp_close_shutdown+0x130>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff fea0 	bl	8011b08 <tcp_free>
      break;
 8011dc8:	e01a      	b.n	8011e00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f7ff ff14 	bl	8011bf8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011dd0:	6879      	ldr	r1, [r7, #4]
 8011dd2:	4816      	ldr	r0, [pc, #88]	; (8011e2c <tcp_close_shutdown+0x1c0>)
 8011dd4:	f001 fbaa 	bl	801352c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7ff feb1 	bl	8011b40 <tcp_free_listen>
      break;
 8011dde:	e00f      	b.n	8011e00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011de0:	6879      	ldr	r1, [r7, #4]
 8011de2:	480e      	ldr	r0, [pc, #56]	; (8011e1c <tcp_close_shutdown+0x1b0>)
 8011de4:	f001 fba2 	bl	801352c <tcp_pcb_remove>
 8011de8:	4b0d      	ldr	r3, [pc, #52]	; (8011e20 <tcp_close_shutdown+0x1b4>)
 8011dea:	2201      	movs	r2, #1
 8011dec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7ff fe8a 	bl	8011b08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011df4:	e004      	b.n	8011e00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 f81a 	bl	8011e30 <tcp_close_shutdown_fin>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	e000      	b.n	8011e02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bdb0      	pop	{r4, r5, r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	08026440 	.word	0x08026440
 8011e10:	08026514 	.word	0x08026514
 8011e14:	08026484 	.word	0x08026484
 8011e18:	08026534 	.word	0x08026534
 8011e1c:	2000be54 	.word	0x2000be54
 8011e20:	2000be50 	.word	0x2000be50
 8011e24:	2000be68 	.word	0x2000be68
 8011e28:	2000be60 	.word	0x2000be60
 8011e2c:	2000be5c 	.word	0x2000be5c

08011e30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d106      	bne.n	8011e4c <tcp_close_shutdown_fin+0x1c>
 8011e3e:	4b2e      	ldr	r3, [pc, #184]	; (8011ef8 <tcp_close_shutdown_fin+0xc8>)
 8011e40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011e44:	492d      	ldr	r1, [pc, #180]	; (8011efc <tcp_close_shutdown_fin+0xcc>)
 8011e46:	482e      	ldr	r0, [pc, #184]	; (8011f00 <tcp_close_shutdown_fin+0xd0>)
 8011e48:	f009 ff08 	bl	801bc5c <printf>

  switch (pcb->state) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	7d1b      	ldrb	r3, [r3, #20]
 8011e50:	2b07      	cmp	r3, #7
 8011e52:	d020      	beq.n	8011e96 <tcp_close_shutdown_fin+0x66>
 8011e54:	2b07      	cmp	r3, #7
 8011e56:	dc2b      	bgt.n	8011eb0 <tcp_close_shutdown_fin+0x80>
 8011e58:	2b03      	cmp	r3, #3
 8011e5a:	d002      	beq.n	8011e62 <tcp_close_shutdown_fin+0x32>
 8011e5c:	2b04      	cmp	r3, #4
 8011e5e:	d00d      	beq.n	8011e7c <tcp_close_shutdown_fin+0x4c>
 8011e60:	e026      	b.n	8011eb0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f004 fe3c 	bl	8016ae0 <tcp_send_fin>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d11f      	bne.n	8011eb4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2205      	movs	r2, #5
 8011e78:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e7a:	e01b      	b.n	8011eb4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f004 fe2f 	bl	8016ae0 <tcp_send_fin>
 8011e82:	4603      	mov	r3, r0
 8011e84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d114      	bne.n	8011eb8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2205      	movs	r2, #5
 8011e92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e94:	e010      	b.n	8011eb8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f004 fe22 	bl	8016ae0 <tcp_send_fin>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d109      	bne.n	8011ebc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2209      	movs	r2, #9
 8011eac:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011eae:	e005      	b.n	8011ebc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e01c      	b.n	8011eee <tcp_close_shutdown_fin+0xbe>
      break;
 8011eb4:	bf00      	nop
 8011eb6:	e002      	b.n	8011ebe <tcp_close_shutdown_fin+0x8e>
      break;
 8011eb8:	bf00      	nop
 8011eba:	e000      	b.n	8011ebe <tcp_close_shutdown_fin+0x8e>
      break;
 8011ebc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d103      	bne.n	8011ece <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f004 ff48 	bl	8016d5c <tcp_output>
 8011ecc:	e00d      	b.n	8011eea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed6:	d108      	bne.n	8011eea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	8b5b      	ldrh	r3, [r3, #26]
 8011edc:	f043 0308 	orr.w	r3, r3, #8
 8011ee0:	b29a      	uxth	r2, r3
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	e001      	b.n	8011eee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3710      	adds	r7, #16
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	08026440 	.word	0x08026440
 8011efc:	080264f0 	.word	0x080264f0
 8011f00:	08026484 	.word	0x08026484

08011f04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d109      	bne.n	8011f26 <tcp_close+0x22>
 8011f12:	4b0f      	ldr	r3, [pc, #60]	; (8011f50 <tcp_close+0x4c>)
 8011f14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011f18:	490e      	ldr	r1, [pc, #56]	; (8011f54 <tcp_close+0x50>)
 8011f1a:	480f      	ldr	r0, [pc, #60]	; (8011f58 <tcp_close+0x54>)
 8011f1c:	f009 fe9e 	bl	801bc5c <printf>
 8011f20:	f06f 030f 	mvn.w	r3, #15
 8011f24:	e00f      	b.n	8011f46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	7d1b      	ldrb	r3, [r3, #20]
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d006      	beq.n	8011f3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	8b5b      	ldrh	r3, [r3, #26]
 8011f32:	f043 0310 	orr.w	r3, r3, #16
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011f3c:	2101      	movs	r1, #1
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff fe94 	bl	8011c6c <tcp_close_shutdown>
 8011f44:	4603      	mov	r3, r0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	08026440 	.word	0x08026440
 8011f54:	08026550 	.word	0x08026550
 8011f58:	08026484 	.word	0x08026484

08011f5c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b084      	sub	sp, #16
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d109      	bne.n	8011f82 <tcp_shutdown+0x26>
 8011f6e:	4b26      	ldr	r3, [pc, #152]	; (8012008 <tcp_shutdown+0xac>)
 8011f70:	f240 2207 	movw	r2, #519	; 0x207
 8011f74:	4925      	ldr	r1, [pc, #148]	; (801200c <tcp_shutdown+0xb0>)
 8011f76:	4826      	ldr	r0, [pc, #152]	; (8012010 <tcp_shutdown+0xb4>)
 8011f78:	f009 fe70 	bl	801bc5c <printf>
 8011f7c:	f06f 030f 	mvn.w	r3, #15
 8011f80:	e03d      	b.n	8011ffe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	7d1b      	ldrb	r3, [r3, #20]
 8011f86:	2b01      	cmp	r3, #1
 8011f88:	d102      	bne.n	8011f90 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011f8a:	f06f 030a 	mvn.w	r3, #10
 8011f8e:	e036      	b.n	8011ffe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d01b      	beq.n	8011fce <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	8b5b      	ldrh	r3, [r3, #26]
 8011f9a:	f043 0310 	orr.w	r3, r3, #16
 8011f9e:	b29a      	uxth	r2, r3
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d005      	beq.n	8011fb6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011faa:	2101      	movs	r1, #1
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f7ff fe5d 	bl	8011c6c <tcp_close_shutdown>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	e023      	b.n	8011ffe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d007      	beq.n	8011fce <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f7ff fae4 	bl	8011590 <pbuf_free>
      pcb->refused_data = NULL;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d013      	beq.n	8011ffc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	7d1b      	ldrb	r3, [r3, #20]
 8011fd8:	2b04      	cmp	r3, #4
 8011fda:	dc02      	bgt.n	8011fe2 <tcp_shutdown+0x86>
 8011fdc:	2b03      	cmp	r3, #3
 8011fde:	da02      	bge.n	8011fe6 <tcp_shutdown+0x8a>
 8011fe0:	e009      	b.n	8011ff6 <tcp_shutdown+0x9a>
 8011fe2:	2b07      	cmp	r3, #7
 8011fe4:	d107      	bne.n	8011ff6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	4619      	mov	r1, r3
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7ff fe3d 	bl	8011c6c <tcp_close_shutdown>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	e003      	b.n	8011ffe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011ff6:	f06f 030a 	mvn.w	r3, #10
 8011ffa:	e000      	b.n	8011ffe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	08026440 	.word	0x08026440
 801200c:	08026568 	.word	0x08026568
 8012010:	08026484 	.word	0x08026484

08012014 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b08e      	sub	sp, #56	; 0x38
 8012018:	af04      	add	r7, sp, #16
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d107      	bne.n	8012034 <tcp_abandon+0x20>
 8012024:	4b52      	ldr	r3, [pc, #328]	; (8012170 <tcp_abandon+0x15c>)
 8012026:	f240 223d 	movw	r2, #573	; 0x23d
 801202a:	4952      	ldr	r1, [pc, #328]	; (8012174 <tcp_abandon+0x160>)
 801202c:	4852      	ldr	r0, [pc, #328]	; (8012178 <tcp_abandon+0x164>)
 801202e:	f009 fe15 	bl	801bc5c <printf>
 8012032:	e099      	b.n	8012168 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	7d1b      	ldrb	r3, [r3, #20]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d106      	bne.n	801204a <tcp_abandon+0x36>
 801203c:	4b4c      	ldr	r3, [pc, #304]	; (8012170 <tcp_abandon+0x15c>)
 801203e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012042:	494e      	ldr	r1, [pc, #312]	; (801217c <tcp_abandon+0x168>)
 8012044:	484c      	ldr	r0, [pc, #304]	; (8012178 <tcp_abandon+0x164>)
 8012046:	f009 fe09 	bl	801bc5c <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	7d1b      	ldrb	r3, [r3, #20]
 801204e:	2b0a      	cmp	r3, #10
 8012050:	d107      	bne.n	8012062 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012052:	6879      	ldr	r1, [r7, #4]
 8012054:	484a      	ldr	r0, [pc, #296]	; (8012180 <tcp_abandon+0x16c>)
 8012056:	f001 fa69 	bl	801352c <tcp_pcb_remove>
    tcp_free(pcb);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7ff fd54 	bl	8011b08 <tcp_free>
 8012060:	e082      	b.n	8012168 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012066:	2300      	movs	r3, #0
 8012068:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801206e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012074:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801207c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	7d1b      	ldrb	r3, [r3, #20]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d126      	bne.n	80120da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	8adb      	ldrh	r3, [r3, #22]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d02e      	beq.n	80120f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012094:	4b3b      	ldr	r3, [pc, #236]	; (8012184 <tcp_abandon+0x170>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	429a      	cmp	r2, r3
 801209c:	d105      	bne.n	80120aa <tcp_abandon+0x96>
 801209e:	4b39      	ldr	r3, [pc, #228]	; (8012184 <tcp_abandon+0x170>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	4a37      	ldr	r2, [pc, #220]	; (8012184 <tcp_abandon+0x170>)
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	e013      	b.n	80120d2 <tcp_abandon+0xbe>
 80120aa:	4b36      	ldr	r3, [pc, #216]	; (8012184 <tcp_abandon+0x170>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	61fb      	str	r3, [r7, #28]
 80120b0:	e00c      	b.n	80120cc <tcp_abandon+0xb8>
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	68db      	ldr	r3, [r3, #12]
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d104      	bne.n	80120c6 <tcp_abandon+0xb2>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	68da      	ldr	r2, [r3, #12]
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	60da      	str	r2, [r3, #12]
 80120c4:	e005      	b.n	80120d2 <tcp_abandon+0xbe>
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	61fb      	str	r3, [r7, #28]
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1ef      	bne.n	80120b2 <tcp_abandon+0x9e>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	60da      	str	r2, [r3, #12]
 80120d8:	e00b      	b.n	80120f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	8adb      	ldrh	r3, [r3, #22]
 80120e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80120e4:	6879      	ldr	r1, [r7, #4]
 80120e6:	4828      	ldr	r0, [pc, #160]	; (8012188 <tcp_abandon+0x174>)
 80120e8:	f001 fa20 	bl	801352c <tcp_pcb_remove>
 80120ec:	4b27      	ldr	r3, [pc, #156]	; (801218c <tcp_abandon+0x178>)
 80120ee:	2201      	movs	r2, #1
 80120f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d004      	beq.n	8012104 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120fe:	4618      	mov	r0, r3
 8012100:	f000 fed6 	bl	8012eb0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012108:	2b00      	cmp	r3, #0
 801210a:	d004      	beq.n	8012116 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012110:	4618      	mov	r0, r3
 8012112:	f000 fecd 	bl	8012eb0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801211a:	2b00      	cmp	r3, #0
 801211c:	d004      	beq.n	8012128 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012122:	4618      	mov	r0, r3
 8012124:	f000 fec4 	bl	8012eb0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00e      	beq.n	801214c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801212e:	6879      	ldr	r1, [r7, #4]
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	3304      	adds	r3, #4
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	8b12      	ldrh	r2, [r2, #24]
 8012138:	9202      	str	r2, [sp, #8]
 801213a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801213c:	9201      	str	r2, [sp, #4]
 801213e:	9300      	str	r3, [sp, #0]
 8012140:	460b      	mov	r3, r1
 8012142:	697a      	ldr	r2, [r7, #20]
 8012144:	69b9      	ldr	r1, [r7, #24]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f005 fbbc 	bl	80178c4 <tcp_rst>
    }
    last_state = pcb->state;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	7d1b      	ldrb	r3, [r3, #20]
 8012150:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f7ff fcd8 	bl	8011b08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d004      	beq.n	8012168 <tcp_abandon+0x154>
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	f06f 010c 	mvn.w	r1, #12
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	4798      	blx	r3
  }
}
 8012168:	3728      	adds	r7, #40	; 0x28
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	08026440 	.word	0x08026440
 8012174:	08026584 	.word	0x08026584
 8012178:	08026484 	.word	0x08026484
 801217c:	080265a0 	.word	0x080265a0
 8012180:	2000be64 	.word	0x2000be64
 8012184:	2000be60 	.word	0x2000be60
 8012188:	2000be54 	.word	0x2000be54
 801218c:	2000be50 	.word	0x2000be50

08012190 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012198:	2101      	movs	r1, #1
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f7ff ff3a 	bl	8012014 <tcp_abandon>
}
 80121a0:	bf00      	nop
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b088      	sub	sp, #32
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	4613      	mov	r3, r2
 80121b4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80121b6:	2304      	movs	r3, #4
 80121b8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d101      	bne.n	80121c4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80121c0:	4b3e      	ldr	r3, [pc, #248]	; (80122bc <tcp_bind+0x114>)
 80121c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d109      	bne.n	80121de <tcp_bind+0x36>
 80121ca:	4b3d      	ldr	r3, [pc, #244]	; (80122c0 <tcp_bind+0x118>)
 80121cc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80121d0:	493c      	ldr	r1, [pc, #240]	; (80122c4 <tcp_bind+0x11c>)
 80121d2:	483d      	ldr	r0, [pc, #244]	; (80122c8 <tcp_bind+0x120>)
 80121d4:	f009 fd42 	bl	801bc5c <printf>
 80121d8:	f06f 030f 	mvn.w	r3, #15
 80121dc:	e06a      	b.n	80122b4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	7d1b      	ldrb	r3, [r3, #20]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d009      	beq.n	80121fa <tcp_bind+0x52>
 80121e6:	4b36      	ldr	r3, [pc, #216]	; (80122c0 <tcp_bind+0x118>)
 80121e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80121ec:	4937      	ldr	r1, [pc, #220]	; (80122cc <tcp_bind+0x124>)
 80121ee:	4836      	ldr	r0, [pc, #216]	; (80122c8 <tcp_bind+0x120>)
 80121f0:	f009 fd34 	bl	801bc5c <printf>
 80121f4:	f06f 0305 	mvn.w	r3, #5
 80121f8:	e05c      	b.n	80122b4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80121fa:	88fb      	ldrh	r3, [r7, #6]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d109      	bne.n	8012214 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012200:	f000 f9f0 	bl	80125e4 <tcp_new_port>
 8012204:	4603      	mov	r3, r0
 8012206:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012208:	88fb      	ldrh	r3, [r7, #6]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d135      	bne.n	801227a <tcp_bind+0xd2>
      return ERR_BUF;
 801220e:	f06f 0301 	mvn.w	r3, #1
 8012212:	e04f      	b.n	80122b4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012214:	2300      	movs	r3, #0
 8012216:	61fb      	str	r3, [r7, #28]
 8012218:	e02b      	b.n	8012272 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801221a:	4a2d      	ldr	r2, [pc, #180]	; (80122d0 <tcp_bind+0x128>)
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	61bb      	str	r3, [r7, #24]
 8012226:	e01e      	b.n	8012266 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	8adb      	ldrh	r3, [r3, #22]
 801222c:	88fa      	ldrh	r2, [r7, #6]
 801222e:	429a      	cmp	r2, r3
 8012230:	d116      	bne.n	8012260 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012232:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012234:	2b00      	cmp	r3, #0
 8012236:	d010      	beq.n	801225a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d00c      	beq.n	801225a <tcp_bind+0xb2>
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d009      	beq.n	801225a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d005      	beq.n	801225a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012256:	429a      	cmp	r2, r3
 8012258:	d102      	bne.n	8012260 <tcp_bind+0xb8>
              return ERR_USE;
 801225a:	f06f 0307 	mvn.w	r3, #7
 801225e:	e029      	b.n	80122b4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	61bb      	str	r3, [r7, #24]
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1dd      	bne.n	8012228 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	3301      	adds	r3, #1
 8012270:	61fb      	str	r3, [r7, #28]
 8012272:	69fa      	ldr	r2, [r7, #28]
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	429a      	cmp	r2, r3
 8012278:	dbcf      	blt.n	801221a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00c      	beq.n	801229a <tcp_bind+0xf2>
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d008      	beq.n	801229a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d002      	beq.n	8012294 <tcp_bind+0xec>
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	e000      	b.n	8012296 <tcp_bind+0xee>
 8012294:	2300      	movs	r3, #0
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	88fa      	ldrh	r2, [r7, #6]
 801229e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80122a0:	4b0c      	ldr	r3, [pc, #48]	; (80122d4 <tcp_bind+0x12c>)
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	60da      	str	r2, [r3, #12]
 80122a8:	4a0a      	ldr	r2, [pc, #40]	; (80122d4 <tcp_bind+0x12c>)
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6013      	str	r3, [r2, #0]
 80122ae:	f005 fccb 	bl	8017c48 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80122b2:	2300      	movs	r3, #0
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3720      	adds	r7, #32
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	08029188 	.word	0x08029188
 80122c0:	08026440 	.word	0x08026440
 80122c4:	080265d4 	.word	0x080265d4
 80122c8:	08026484 	.word	0x08026484
 80122cc:	080265ec 	.word	0x080265ec
 80122d0:	08029160 	.word	0x08029160
 80122d4:	2000be60 	.word	0x2000be60

080122d8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	4613      	mov	r3, r2
 80122e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d106      	bne.n	80122fa <tcp_accept_null+0x22>
 80122ec:	4b07      	ldr	r3, [pc, #28]	; (801230c <tcp_accept_null+0x34>)
 80122ee:	f240 320f 	movw	r2, #783	; 0x30f
 80122f2:	4907      	ldr	r1, [pc, #28]	; (8012310 <tcp_accept_null+0x38>)
 80122f4:	4807      	ldr	r0, [pc, #28]	; (8012314 <tcp_accept_null+0x3c>)
 80122f6:	f009 fcb1 	bl	801bc5c <printf>

  tcp_abort(pcb);
 80122fa:	68b8      	ldr	r0, [r7, #8]
 80122fc:	f7ff ff48 	bl	8012190 <tcp_abort>

  return ERR_ABRT;
 8012300:	f06f 030c 	mvn.w	r3, #12
}
 8012304:	4618      	mov	r0, r3
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	08026440 	.word	0x08026440
 8012310:	08026614 	.word	0x08026614
 8012314:	08026484 	.word	0x08026484

08012318 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	460b      	mov	r3, r1
 8012322:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8012324:	78fb      	ldrb	r3, [r7, #3]
 8012326:	2200      	movs	r2, #0
 8012328:	4619      	mov	r1, r3
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 f806 	bl	801233c <tcp_listen_with_backlog_and_err>
 8012330:	4603      	mov	r3, r0
}
 8012332:	4618      	mov	r0, r3
 8012334:	3708      	adds	r7, #8
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
	...

0801233c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b088      	sub	sp, #32
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	460b      	mov	r3, r1
 8012346:	607a      	str	r2, [r7, #4]
 8012348:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801234a:	2300      	movs	r3, #0
 801234c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d109      	bne.n	8012368 <tcp_listen_with_backlog_and_err+0x2c>
 8012354:	4b47      	ldr	r3, [pc, #284]	; (8012474 <tcp_listen_with_backlog_and_err+0x138>)
 8012356:	f240 3259 	movw	r2, #857	; 0x359
 801235a:	4947      	ldr	r1, [pc, #284]	; (8012478 <tcp_listen_with_backlog_and_err+0x13c>)
 801235c:	4847      	ldr	r0, [pc, #284]	; (801247c <tcp_listen_with_backlog_and_err+0x140>)
 801235e:	f009 fc7d 	bl	801bc5c <printf>
 8012362:	23f0      	movs	r3, #240	; 0xf0
 8012364:	76fb      	strb	r3, [r7, #27]
 8012366:	e079      	b.n	801245c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	7d1b      	ldrb	r3, [r3, #20]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d009      	beq.n	8012384 <tcp_listen_with_backlog_and_err+0x48>
 8012370:	4b40      	ldr	r3, [pc, #256]	; (8012474 <tcp_listen_with_backlog_and_err+0x138>)
 8012372:	f240 325a 	movw	r2, #858	; 0x35a
 8012376:	4942      	ldr	r1, [pc, #264]	; (8012480 <tcp_listen_with_backlog_and_err+0x144>)
 8012378:	4840      	ldr	r0, [pc, #256]	; (801247c <tcp_listen_with_backlog_and_err+0x140>)
 801237a:	f009 fc6f 	bl	801bc5c <printf>
 801237e:	23f1      	movs	r3, #241	; 0xf1
 8012380:	76fb      	strb	r3, [r7, #27]
 8012382:	e06b      	b.n	801245c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	7d1b      	ldrb	r3, [r3, #20]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d104      	bne.n	8012396 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012390:	23f7      	movs	r3, #247	; 0xf7
 8012392:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012394:	e062      	b.n	801245c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012396:	2002      	movs	r0, #2
 8012398:	f7fe fa2a 	bl	80107f0 <memp_malloc>
 801239c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d102      	bne.n	80123aa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80123a4:	23ff      	movs	r3, #255	; 0xff
 80123a6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80123a8:	e058      	b.n	801245c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	691a      	ldr	r2, [r3, #16]
 80123ae:	69fb      	ldr	r3, [r7, #28]
 80123b0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	8ada      	ldrh	r2, [r3, #22]
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80123ba:	69fb      	ldr	r3, [r7, #28]
 80123bc:	2201      	movs	r2, #1
 80123be:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	7d5a      	ldrb	r2, [r3, #21]
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	7a5a      	ldrb	r2, [r3, #9]
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	2200      	movs	r2, #0
 80123d4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	7ada      	ldrb	r2, [r3, #11]
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	7a9a      	ldrb	r2, [r3, #10]
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681a      	ldr	r2, [r3, #0]
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	8adb      	ldrh	r3, [r3, #22]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d021      	beq.n	801243a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80123f6:	4b23      	ldr	r3, [pc, #140]	; (8012484 <tcp_listen_with_backlog_and_err+0x148>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d105      	bne.n	801240c <tcp_listen_with_backlog_and_err+0xd0>
 8012400:	4b20      	ldr	r3, [pc, #128]	; (8012484 <tcp_listen_with_backlog_and_err+0x148>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	68db      	ldr	r3, [r3, #12]
 8012406:	4a1f      	ldr	r2, [pc, #124]	; (8012484 <tcp_listen_with_backlog_and_err+0x148>)
 8012408:	6013      	str	r3, [r2, #0]
 801240a:	e013      	b.n	8012434 <tcp_listen_with_backlog_and_err+0xf8>
 801240c:	4b1d      	ldr	r3, [pc, #116]	; (8012484 <tcp_listen_with_backlog_and_err+0x148>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	617b      	str	r3, [r7, #20]
 8012412:	e00c      	b.n	801242e <tcp_listen_with_backlog_and_err+0xf2>
 8012414:	697b      	ldr	r3, [r7, #20]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	68fa      	ldr	r2, [r7, #12]
 801241a:	429a      	cmp	r2, r3
 801241c:	d104      	bne.n	8012428 <tcp_listen_with_backlog_and_err+0xec>
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	68da      	ldr	r2, [r3, #12]
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	60da      	str	r2, [r3, #12]
 8012426:	e005      	b.n	8012434 <tcp_listen_with_backlog_and_err+0xf8>
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	617b      	str	r3, [r7, #20]
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d1ef      	bne.n	8012414 <tcp_listen_with_backlog_and_err+0xd8>
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2200      	movs	r2, #0
 8012438:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801243a:	68f8      	ldr	r0, [r7, #12]
 801243c:	f7ff fb64 	bl	8011b08 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	4a11      	ldr	r2, [pc, #68]	; (8012488 <tcp_listen_with_backlog_and_err+0x14c>)
 8012444:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012446:	4b11      	ldr	r3, [pc, #68]	; (801248c <tcp_listen_with_backlog_and_err+0x150>)
 8012448:	681a      	ldr	r2, [r3, #0]
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	60da      	str	r2, [r3, #12]
 801244e:	4a0f      	ldr	r2, [pc, #60]	; (801248c <tcp_listen_with_backlog_and_err+0x150>)
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	f005 fbf8 	bl	8017c48 <tcp_timer_needed>
  res = ERR_OK;
 8012458:	2300      	movs	r3, #0
 801245a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d002      	beq.n	8012468 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	7efa      	ldrb	r2, [r7, #27]
 8012466:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012468:	69fb      	ldr	r3, [r7, #28]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3720      	adds	r7, #32
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	08026440 	.word	0x08026440
 8012478:	08026634 	.word	0x08026634
 801247c:	08026484 	.word	0x08026484
 8012480:	08026664 	.word	0x08026664
 8012484:	2000be60 	.word	0x2000be60
 8012488:	080122d9 	.word	0x080122d9
 801248c:	2000be5c 	.word	0x2000be5c

08012490 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d106      	bne.n	80124ac <tcp_update_rcv_ann_wnd+0x1c>
 801249e:	4b25      	ldr	r3, [pc, #148]	; (8012534 <tcp_update_rcv_ann_wnd+0xa4>)
 80124a0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80124a4:	4924      	ldr	r1, [pc, #144]	; (8012538 <tcp_update_rcv_ann_wnd+0xa8>)
 80124a6:	4825      	ldr	r0, [pc, #148]	; (801253c <tcp_update_rcv_ann_wnd+0xac>)
 80124a8:	f009 fbd8 	bl	801bc5c <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80124b4:	4413      	add	r3, r2
 80124b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80124c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80124c4:	bf28      	it	cs
 80124c6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80124ca:	b292      	uxth	r2, r2
 80124cc:	4413      	add	r3, r2
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	db08      	blt.n	80124e8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	e020      	b.n	801252a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f0:	1ad3      	subs	r3, r2, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	dd03      	ble.n	80124fe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2200      	movs	r2, #0
 80124fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80124fc:	e014      	b.n	8012528 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012506:	1ad3      	subs	r3, r2, r3
 8012508:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012510:	d306      	bcc.n	8012520 <tcp_update_rcv_ann_wnd+0x90>
 8012512:	4b08      	ldr	r3, [pc, #32]	; (8012534 <tcp_update_rcv_ann_wnd+0xa4>)
 8012514:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012518:	4909      	ldr	r1, [pc, #36]	; (8012540 <tcp_update_rcv_ann_wnd+0xb0>)
 801251a:	4808      	ldr	r0, [pc, #32]	; (801253c <tcp_update_rcv_ann_wnd+0xac>)
 801251c:	f009 fb9e 	bl	801bc5c <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012520:	68bb      	ldr	r3, [r7, #8]
 8012522:	b29a      	uxth	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012528:	2300      	movs	r3, #0
  }
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	08026440 	.word	0x08026440
 8012538:	0802669c 	.word	0x0802669c
 801253c:	08026484 	.word	0x08026484
 8012540:	080266c0 	.word	0x080266c0

08012544 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d107      	bne.n	8012566 <tcp_recved+0x22>
 8012556:	4b1f      	ldr	r3, [pc, #124]	; (80125d4 <tcp_recved+0x90>)
 8012558:	f240 32cf 	movw	r2, #975	; 0x3cf
 801255c:	491e      	ldr	r1, [pc, #120]	; (80125d8 <tcp_recved+0x94>)
 801255e:	481f      	ldr	r0, [pc, #124]	; (80125dc <tcp_recved+0x98>)
 8012560:	f009 fb7c 	bl	801bc5c <printf>
 8012564:	e032      	b.n	80125cc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	7d1b      	ldrb	r3, [r3, #20]
 801256a:	2b01      	cmp	r3, #1
 801256c:	d106      	bne.n	801257c <tcp_recved+0x38>
 801256e:	4b19      	ldr	r3, [pc, #100]	; (80125d4 <tcp_recved+0x90>)
 8012570:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012574:	491a      	ldr	r1, [pc, #104]	; (80125e0 <tcp_recved+0x9c>)
 8012576:	4819      	ldr	r0, [pc, #100]	; (80125dc <tcp_recved+0x98>)
 8012578:	f009 fb70 	bl	801bc5c <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012580:	887b      	ldrh	r3, [r7, #2]
 8012582:	4413      	add	r3, r2
 8012584:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012586:	89fb      	ldrh	r3, [r7, #14]
 8012588:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801258c:	d804      	bhi.n	8012598 <tcp_recved+0x54>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012592:	89fa      	ldrh	r2, [r7, #14]
 8012594:	429a      	cmp	r2, r3
 8012596:	d204      	bcs.n	80125a2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801259e:	851a      	strh	r2, [r3, #40]	; 0x28
 80125a0:	e002      	b.n	80125a8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	89fa      	ldrh	r2, [r7, #14]
 80125a6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7ff ff71 	bl	8012490 <tcp_update_rcv_ann_wnd>
 80125ae:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80125b6:	d309      	bcc.n	80125cc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	8b5b      	ldrh	r3, [r3, #26]
 80125bc:	f043 0302 	orr.w	r3, r3, #2
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f004 fbc8 	bl	8016d5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80125cc:	3710      	adds	r7, #16
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	08026440 	.word	0x08026440
 80125d8:	080266dc 	.word	0x080266dc
 80125dc:	08026484 	.word	0x08026484
 80125e0:	080266f4 	.word	0x080266f4

080125e4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80125ee:	4b1e      	ldr	r3, [pc, #120]	; (8012668 <tcp_new_port+0x84>)
 80125f0:	881b      	ldrh	r3, [r3, #0]
 80125f2:	3301      	adds	r3, #1
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	4b1c      	ldr	r3, [pc, #112]	; (8012668 <tcp_new_port+0x84>)
 80125f8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80125fa:	4b1b      	ldr	r3, [pc, #108]	; (8012668 <tcp_new_port+0x84>)
 80125fc:	881b      	ldrh	r3, [r3, #0]
 80125fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012602:	4293      	cmp	r3, r2
 8012604:	d103      	bne.n	801260e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012606:	4b18      	ldr	r3, [pc, #96]	; (8012668 <tcp_new_port+0x84>)
 8012608:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801260c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801260e:	2300      	movs	r3, #0
 8012610:	71fb      	strb	r3, [r7, #7]
 8012612:	e01e      	b.n	8012652 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012614:	79fb      	ldrb	r3, [r7, #7]
 8012616:	4a15      	ldr	r2, [pc, #84]	; (801266c <tcp_new_port+0x88>)
 8012618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	603b      	str	r3, [r7, #0]
 8012620:	e011      	b.n	8012646 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	8ada      	ldrh	r2, [r3, #22]
 8012626:	4b10      	ldr	r3, [pc, #64]	; (8012668 <tcp_new_port+0x84>)
 8012628:	881b      	ldrh	r3, [r3, #0]
 801262a:	429a      	cmp	r2, r3
 801262c:	d108      	bne.n	8012640 <tcp_new_port+0x5c>
        n++;
 801262e:	88bb      	ldrh	r3, [r7, #4]
 8012630:	3301      	adds	r3, #1
 8012632:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012634:	88bb      	ldrh	r3, [r7, #4]
 8012636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801263a:	d3d8      	bcc.n	80125ee <tcp_new_port+0xa>
          return 0;
 801263c:	2300      	movs	r3, #0
 801263e:	e00d      	b.n	801265c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	603b      	str	r3, [r7, #0]
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1ea      	bne.n	8012622 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801264c:	79fb      	ldrb	r3, [r7, #7]
 801264e:	3301      	adds	r3, #1
 8012650:	71fb      	strb	r3, [r7, #7]
 8012652:	79fb      	ldrb	r3, [r7, #7]
 8012654:	2b03      	cmp	r3, #3
 8012656:	d9dd      	bls.n	8012614 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012658:	4b03      	ldr	r3, [pc, #12]	; (8012668 <tcp_new_port+0x84>)
 801265a:	881b      	ldrh	r3, [r3, #0]
}
 801265c:	4618      	mov	r0, r3
 801265e:	370c      	adds	r7, #12
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr
 8012668:	2000002c 	.word	0x2000002c
 801266c:	08029160 	.word	0x08029160

08012670 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012670:	b5b0      	push	{r4, r5, r7, lr}
 8012672:	b090      	sub	sp, #64	; 0x40
 8012674:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012676:	2300      	movs	r3, #0
 8012678:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801267c:	4b94      	ldr	r3, [pc, #592]	; (80128d0 <tcp_slowtmr+0x260>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	3301      	adds	r3, #1
 8012682:	4a93      	ldr	r2, [pc, #588]	; (80128d0 <tcp_slowtmr+0x260>)
 8012684:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012686:	4b93      	ldr	r3, [pc, #588]	; (80128d4 <tcp_slowtmr+0x264>)
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	3301      	adds	r3, #1
 801268c:	b2da      	uxtb	r2, r3
 801268e:	4b91      	ldr	r3, [pc, #580]	; (80128d4 <tcp_slowtmr+0x264>)
 8012690:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012692:	2300      	movs	r3, #0
 8012694:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012696:	4b90      	ldr	r3, [pc, #576]	; (80128d8 <tcp_slowtmr+0x268>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801269c:	e29d      	b.n	8012bda <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a0:	7d1b      	ldrb	r3, [r3, #20]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d106      	bne.n	80126b4 <tcp_slowtmr+0x44>
 80126a6:	4b8d      	ldr	r3, [pc, #564]	; (80128dc <tcp_slowtmr+0x26c>)
 80126a8:	f240 42be 	movw	r2, #1214	; 0x4be
 80126ac:	498c      	ldr	r1, [pc, #560]	; (80128e0 <tcp_slowtmr+0x270>)
 80126ae:	488d      	ldr	r0, [pc, #564]	; (80128e4 <tcp_slowtmr+0x274>)
 80126b0:	f009 fad4 	bl	801bc5c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80126b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b6:	7d1b      	ldrb	r3, [r3, #20]
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d106      	bne.n	80126ca <tcp_slowtmr+0x5a>
 80126bc:	4b87      	ldr	r3, [pc, #540]	; (80128dc <tcp_slowtmr+0x26c>)
 80126be:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80126c2:	4989      	ldr	r1, [pc, #548]	; (80128e8 <tcp_slowtmr+0x278>)
 80126c4:	4887      	ldr	r0, [pc, #540]	; (80128e4 <tcp_slowtmr+0x274>)
 80126c6:	f009 fac9 	bl	801bc5c <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80126ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126cc:	7d1b      	ldrb	r3, [r3, #20]
 80126ce:	2b0a      	cmp	r3, #10
 80126d0:	d106      	bne.n	80126e0 <tcp_slowtmr+0x70>
 80126d2:	4b82      	ldr	r3, [pc, #520]	; (80128dc <tcp_slowtmr+0x26c>)
 80126d4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80126d8:	4984      	ldr	r1, [pc, #528]	; (80128ec <tcp_slowtmr+0x27c>)
 80126da:	4882      	ldr	r0, [pc, #520]	; (80128e4 <tcp_slowtmr+0x274>)
 80126dc:	f009 fabe 	bl	801bc5c <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80126e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e2:	7f9a      	ldrb	r2, [r3, #30]
 80126e4:	4b7b      	ldr	r3, [pc, #492]	; (80128d4 <tcp_slowtmr+0x264>)
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d105      	bne.n	80126f8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80126ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80126f6:	e270      	b.n	8012bda <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80126f8:	4b76      	ldr	r3, [pc, #472]	; (80128d4 <tcp_slowtmr+0x264>)
 80126fa:	781a      	ldrb	r2, [r3, #0]
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012700:	2300      	movs	r3, #0
 8012702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270e:	7d1b      	ldrb	r3, [r3, #20]
 8012710:	2b02      	cmp	r3, #2
 8012712:	d10a      	bne.n	801272a <tcp_slowtmr+0xba>
 8012714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012716:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801271a:	2b05      	cmp	r3, #5
 801271c:	d905      	bls.n	801272a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801271e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012722:	3301      	adds	r3, #1
 8012724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012728:	e11e      	b.n	8012968 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012730:	2b0b      	cmp	r3, #11
 8012732:	d905      	bls.n	8012740 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012738:	3301      	adds	r3, #1
 801273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801273e:	e113      	b.n	8012968 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012742:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012746:	2b00      	cmp	r3, #0
 8012748:	d075      	beq.n	8012836 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801274e:	2b00      	cmp	r3, #0
 8012750:	d006      	beq.n	8012760 <tcp_slowtmr+0xf0>
 8012752:	4b62      	ldr	r3, [pc, #392]	; (80128dc <tcp_slowtmr+0x26c>)
 8012754:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012758:	4965      	ldr	r1, [pc, #404]	; (80128f0 <tcp_slowtmr+0x280>)
 801275a:	4862      	ldr	r0, [pc, #392]	; (80128e4 <tcp_slowtmr+0x274>)
 801275c:	f009 fa7e 	bl	801bc5c <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012764:	2b00      	cmp	r3, #0
 8012766:	d106      	bne.n	8012776 <tcp_slowtmr+0x106>
 8012768:	4b5c      	ldr	r3, [pc, #368]	; (80128dc <tcp_slowtmr+0x26c>)
 801276a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801276e:	4961      	ldr	r1, [pc, #388]	; (80128f4 <tcp_slowtmr+0x284>)
 8012770:	485c      	ldr	r0, [pc, #368]	; (80128e4 <tcp_slowtmr+0x274>)
 8012772:	f009 fa73 	bl	801bc5c <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012778:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801277c:	2b0b      	cmp	r3, #11
 801277e:	d905      	bls.n	801278c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012784:	3301      	adds	r3, #1
 8012786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801278a:	e0ed      	b.n	8012968 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012792:	3b01      	subs	r3, #1
 8012794:	4a58      	ldr	r2, [pc, #352]	; (80128f8 <tcp_slowtmr+0x288>)
 8012796:	5cd3      	ldrb	r3, [r2, r3]
 8012798:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80127a0:	7c7a      	ldrb	r2, [r7, #17]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d907      	bls.n	80127b6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80127a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80127ac:	3301      	adds	r3, #1
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80127b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80127bc:	7c7a      	ldrb	r2, [r7, #17]
 80127be:	429a      	cmp	r2, r3
 80127c0:	f200 80d2 	bhi.w	8012968 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80127c4:	2301      	movs	r3, #1
 80127c6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80127c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d108      	bne.n	80127e4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80127d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127d4:	f005 f96a 	bl	8017aac <tcp_zero_window_probe>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d014      	beq.n	8012808 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80127de:	2300      	movs	r3, #0
 80127e0:	623b      	str	r3, [r7, #32]
 80127e2:	e011      	b.n	8012808 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127ea:	4619      	mov	r1, r3
 80127ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127ee:	f004 f82f 	bl	8016850 <tcp_split_unsent_seg>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d107      	bne.n	8012808 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80127f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127fa:	f004 faaf 	bl	8016d5c <tcp_output>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d101      	bne.n	8012808 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012804:	2300      	movs	r3, #0
 8012806:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012808:	6a3b      	ldr	r3, [r7, #32]
 801280a:	2b00      	cmp	r3, #0
 801280c:	f000 80ac 	beq.w	8012968 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012812:	2200      	movs	r2, #0
 8012814:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801281e:	2b06      	cmp	r3, #6
 8012820:	f200 80a2 	bhi.w	8012968 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012826:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801282a:	3301      	adds	r3, #1
 801282c:	b2da      	uxtb	r2, r3
 801282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012830:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012834:	e098      	b.n	8012968 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012838:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801283c:	2b00      	cmp	r3, #0
 801283e:	db0f      	blt.n	8012860 <tcp_slowtmr+0x1f0>
 8012840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012842:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012846:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801284a:	4293      	cmp	r3, r2
 801284c:	d008      	beq.n	8012860 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012850:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012854:	b29b      	uxth	r3, r3
 8012856:	3301      	adds	r3, #1
 8012858:	b29b      	uxth	r3, r3
 801285a:	b21a      	sxth	r2, r3
 801285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801285e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012862:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012868:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801286c:	429a      	cmp	r2, r3
 801286e:	db7b      	blt.n	8012968 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012872:	f004 fd65 	bl	8017340 <tcp_rexmit_rto_prepare>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d007      	beq.n	801288c <tcp_slowtmr+0x21c>
 801287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012880:	2b00      	cmp	r3, #0
 8012882:	d171      	bne.n	8012968 <tcp_slowtmr+0x2f8>
 8012884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012888:	2b00      	cmp	r3, #0
 801288a:	d06d      	beq.n	8012968 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	7d1b      	ldrb	r3, [r3, #20]
 8012890:	2b02      	cmp	r3, #2
 8012892:	d03a      	beq.n	801290a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801289a:	2b0c      	cmp	r3, #12
 801289c:	bf28      	it	cs
 801289e:	230c      	movcs	r3, #12
 80128a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80128a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128a8:	10db      	asrs	r3, r3, #3
 80128aa:	b21b      	sxth	r3, r3
 80128ac:	461a      	mov	r2, r3
 80128ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80128b4:	4413      	add	r3, r2
 80128b6:	7efa      	ldrb	r2, [r7, #27]
 80128b8:	4910      	ldr	r1, [pc, #64]	; (80128fc <tcp_slowtmr+0x28c>)
 80128ba:	5c8a      	ldrb	r2, [r1, r2]
 80128bc:	4093      	lsls	r3, r2
 80128be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80128c6:	4293      	cmp	r3, r2
 80128c8:	dc1a      	bgt.n	8012900 <tcp_slowtmr+0x290>
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	b21a      	sxth	r2, r3
 80128ce:	e019      	b.n	8012904 <tcp_slowtmr+0x294>
 80128d0:	2000be58 	.word	0x2000be58
 80128d4:	20004f0a 	.word	0x20004f0a
 80128d8:	2000be54 	.word	0x2000be54
 80128dc:	08026440 	.word	0x08026440
 80128e0:	08026784 	.word	0x08026784
 80128e4:	08026484 	.word	0x08026484
 80128e8:	080267b0 	.word	0x080267b0
 80128ec:	080267dc 	.word	0x080267dc
 80128f0:	0802680c 	.word	0x0802680c
 80128f4:	08026840 	.word	0x08026840
 80128f8:	08029158 	.word	0x08029158
 80128fc:	08029148 	.word	0x08029148
 8012900:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012906:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290c:	2200      	movs	r2, #0
 801290e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012918:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801291c:	4293      	cmp	r3, r2
 801291e:	bf28      	it	cs
 8012920:	4613      	movcs	r3, r2
 8012922:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012924:	8a7b      	ldrh	r3, [r7, #18]
 8012926:	085b      	lsrs	r3, r3, #1
 8012928:	b29a      	uxth	r2, r3
 801292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012932:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801293a:	005b      	lsls	r3, r3, #1
 801293c:	b29b      	uxth	r3, r3
 801293e:	429a      	cmp	r2, r3
 8012940:	d206      	bcs.n	8012950 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012946:	005b      	lsls	r3, r3, #1
 8012948:	b29a      	uxth	r2, r3
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012952:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295c:	2200      	movs	r2, #0
 801295e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012964:	f004 fd5c 	bl	8017420 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296a:	7d1b      	ldrb	r3, [r3, #20]
 801296c:	2b06      	cmp	r3, #6
 801296e:	d111      	bne.n	8012994 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012972:	8b5b      	ldrh	r3, [r3, #26]
 8012974:	f003 0310 	and.w	r3, r3, #16
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00b      	beq.n	8012994 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801297c:	4b9c      	ldr	r3, [pc, #624]	; (8012bf0 <tcp_slowtmr+0x580>)
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012982:	6a1b      	ldr	r3, [r3, #32]
 8012984:	1ad3      	subs	r3, r2, r3
 8012986:	2b28      	cmp	r3, #40	; 0x28
 8012988:	d904      	bls.n	8012994 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801298a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801298e:	3301      	adds	r3, #1
 8012990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012996:	7a5b      	ldrb	r3, [r3, #9]
 8012998:	f003 0308 	and.w	r3, r3, #8
 801299c:	2b00      	cmp	r3, #0
 801299e:	d04a      	beq.n	8012a36 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80129a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80129a4:	2b04      	cmp	r3, #4
 80129a6:	d003      	beq.n	80129b0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80129a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80129ac:	2b07      	cmp	r3, #7
 80129ae:	d142      	bne.n	8012a36 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80129b0:	4b8f      	ldr	r3, [pc, #572]	; (8012bf0 <tcp_slowtmr+0x580>)
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	6a1b      	ldr	r3, [r3, #32]
 80129b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80129c0:	4b8c      	ldr	r3, [pc, #560]	; (8012bf4 <tcp_slowtmr+0x584>)
 80129c2:	440b      	add	r3, r1
 80129c4:	498c      	ldr	r1, [pc, #560]	; (8012bf8 <tcp_slowtmr+0x588>)
 80129c6:	fba1 1303 	umull	r1, r3, r1, r3
 80129ca:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d90a      	bls.n	80129e6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80129d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129d4:	3301      	adds	r3, #1
 80129d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80129da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129de:	3301      	adds	r3, #1
 80129e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80129e4:	e027      	b.n	8012a36 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80129e6:	4b82      	ldr	r3, [pc, #520]	; (8012bf0 <tcp_slowtmr+0x580>)
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ec:	6a1b      	ldr	r3, [r3, #32]
 80129ee:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80129f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80129fc:	4618      	mov	r0, r3
 80129fe:	4b7f      	ldr	r3, [pc, #508]	; (8012bfc <tcp_slowtmr+0x58c>)
 8012a00:	fb03 f300 	mul.w	r3, r3, r0
 8012a04:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012a06:	497c      	ldr	r1, [pc, #496]	; (8012bf8 <tcp_slowtmr+0x588>)
 8012a08:	fba1 1303 	umull	r1, r3, r1, r3
 8012a0c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d911      	bls.n	8012a36 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a14:	f005 f80a 	bl	8017a2c <tcp_keepalive>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012a1e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d107      	bne.n	8012a36 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	b2da      	uxtb	r2, r3
 8012a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a32:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d011      	beq.n	8012a62 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012a3e:	4b6c      	ldr	r3, [pc, #432]	; (8012bf0 <tcp_slowtmr+0x580>)
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a44:	6a1b      	ldr	r3, [r3, #32]
 8012a46:	1ad2      	subs	r2, r2, r3
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012a4e:	4619      	mov	r1, r3
 8012a50:	460b      	mov	r3, r1
 8012a52:	005b      	lsls	r3, r3, #1
 8012a54:	440b      	add	r3, r1
 8012a56:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d302      	bcc.n	8012a62 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a5e:	f000 fec9 	bl	80137f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a64:	7d1b      	ldrb	r3, [r3, #20]
 8012a66:	2b03      	cmp	r3, #3
 8012a68:	d10b      	bne.n	8012a82 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a6a:	4b61      	ldr	r3, [pc, #388]	; (8012bf0 <tcp_slowtmr+0x580>)
 8012a6c:	681a      	ldr	r2, [r3, #0]
 8012a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a70:	6a1b      	ldr	r3, [r3, #32]
 8012a72:	1ad3      	subs	r3, r2, r3
 8012a74:	2b28      	cmp	r3, #40	; 0x28
 8012a76:	d904      	bls.n	8012a82 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a84:	7d1b      	ldrb	r3, [r3, #20]
 8012a86:	2b09      	cmp	r3, #9
 8012a88:	d10b      	bne.n	8012aa2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012a8a:	4b59      	ldr	r3, [pc, #356]	; (8012bf0 <tcp_slowtmr+0x580>)
 8012a8c:	681a      	ldr	r2, [r3, #0]
 8012a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a90:	6a1b      	ldr	r3, [r3, #32]
 8012a92:	1ad3      	subs	r3, r2, r3
 8012a94:	2bf0      	cmp	r3, #240	; 0xf0
 8012a96:	d904      	bls.n	8012aa2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d060      	beq.n	8012b6c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ab0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ab4:	f000 fcea 	bl	801348c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d010      	beq.n	8012ae0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012abe:	4b50      	ldr	r3, [pc, #320]	; (8012c00 <tcp_slowtmr+0x590>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d106      	bne.n	8012ad6 <tcp_slowtmr+0x466>
 8012ac8:	4b4e      	ldr	r3, [pc, #312]	; (8012c04 <tcp_slowtmr+0x594>)
 8012aca:	f240 526d 	movw	r2, #1389	; 0x56d
 8012ace:	494e      	ldr	r1, [pc, #312]	; (8012c08 <tcp_slowtmr+0x598>)
 8012ad0:	484e      	ldr	r0, [pc, #312]	; (8012c0c <tcp_slowtmr+0x59c>)
 8012ad2:	f009 f8c3 	bl	801bc5c <printf>
        prev->next = pcb->next;
 8012ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad8:	68da      	ldr	r2, [r3, #12]
 8012ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012adc:	60da      	str	r2, [r3, #12]
 8012ade:	e00f      	b.n	8012b00 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012ae0:	4b47      	ldr	r3, [pc, #284]	; (8012c00 <tcp_slowtmr+0x590>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d006      	beq.n	8012af8 <tcp_slowtmr+0x488>
 8012aea:	4b46      	ldr	r3, [pc, #280]	; (8012c04 <tcp_slowtmr+0x594>)
 8012aec:	f240 5271 	movw	r2, #1393	; 0x571
 8012af0:	4947      	ldr	r1, [pc, #284]	; (8012c10 <tcp_slowtmr+0x5a0>)
 8012af2:	4846      	ldr	r0, [pc, #280]	; (8012c0c <tcp_slowtmr+0x59c>)
 8012af4:	f009 f8b2 	bl	801bc5c <printf>
        tcp_active_pcbs = pcb->next;
 8012af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012afa:	68db      	ldr	r3, [r3, #12]
 8012afc:	4a40      	ldr	r2, [pc, #256]	; (8012c00 <tcp_slowtmr+0x590>)
 8012afe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d013      	beq.n	8012b30 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012b10:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b14:	3304      	adds	r3, #4
 8012b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b18:	8ad2      	ldrh	r2, [r2, #22]
 8012b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b1c:	8b09      	ldrh	r1, [r1, #24]
 8012b1e:	9102      	str	r1, [sp, #8]
 8012b20:	9201      	str	r2, [sp, #4]
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	462b      	mov	r3, r5
 8012b26:	4622      	mov	r2, r4
 8012b28:	4601      	mov	r1, r0
 8012b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b2c:	f004 feca 	bl	80178c4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b32:	691b      	ldr	r3, [r3, #16]
 8012b34:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b38:	7d1b      	ldrb	r3, [r3, #20]
 8012b3a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012b46:	6838      	ldr	r0, [r7, #0]
 8012b48:	f7fe ffde 	bl	8011b08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012b4c:	4b31      	ldr	r3, [pc, #196]	; (8012c14 <tcp_slowtmr+0x5a4>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d004      	beq.n	8012b62 <tcp_slowtmr+0x4f2>
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f06f 010c 	mvn.w	r1, #12
 8012b5e:	68b8      	ldr	r0, [r7, #8]
 8012b60:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012b62:	4b2c      	ldr	r3, [pc, #176]	; (8012c14 <tcp_slowtmr+0x5a4>)
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d037      	beq.n	8012bda <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012b6a:	e592      	b.n	8012692 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b78:	7f1b      	ldrb	r3, [r3, #28]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	b2da      	uxtb	r2, r3
 8012b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b80:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b84:	7f1a      	ldrb	r2, [r3, #28]
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	7f5b      	ldrb	r3, [r3, #29]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d325      	bcc.n	8012bda <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b90:	2200      	movs	r2, #0
 8012b92:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012b94:	4b1f      	ldr	r3, [pc, #124]	; (8012c14 <tcp_slowtmr+0x5a4>)
 8012b96:	2200      	movs	r2, #0
 8012b98:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00b      	beq.n	8012bbc <tcp_slowtmr+0x54c>
 8012ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bac:	6912      	ldr	r2, [r2, #16]
 8012bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bb0:	4610      	mov	r0, r2
 8012bb2:	4798      	blx	r3
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012bba:	e002      	b.n	8012bc2 <tcp_slowtmr+0x552>
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012bc2:	4b14      	ldr	r3, [pc, #80]	; (8012c14 <tcp_slowtmr+0x5a4>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d000      	beq.n	8012bcc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012bca:	e562      	b.n	8012692 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012bcc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d102      	bne.n	8012bda <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012bd6:	f004 f8c1 	bl	8016d5c <tcp_output>
  while (pcb != NULL) {
 8012bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	f47f ad5e 	bne.w	801269e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012be2:	2300      	movs	r3, #0
 8012be4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012be6:	4b0c      	ldr	r3, [pc, #48]	; (8012c18 <tcp_slowtmr+0x5a8>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012bec:	e069      	b.n	8012cc2 <tcp_slowtmr+0x652>
 8012bee:	bf00      	nop
 8012bf0:	2000be58 	.word	0x2000be58
 8012bf4:	000a4cb8 	.word	0x000a4cb8
 8012bf8:	10624dd3 	.word	0x10624dd3
 8012bfc:	000124f8 	.word	0x000124f8
 8012c00:	2000be54 	.word	0x2000be54
 8012c04:	08026440 	.word	0x08026440
 8012c08:	08026878 	.word	0x08026878
 8012c0c:	08026484 	.word	0x08026484
 8012c10:	080268a4 	.word	0x080268a4
 8012c14:	2000be50 	.word	0x2000be50
 8012c18:	2000be64 	.word	0x2000be64
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	7d1b      	ldrb	r3, [r3, #20]
 8012c20:	2b0a      	cmp	r3, #10
 8012c22:	d006      	beq.n	8012c32 <tcp_slowtmr+0x5c2>
 8012c24:	4b2b      	ldr	r3, [pc, #172]	; (8012cd4 <tcp_slowtmr+0x664>)
 8012c26:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012c2a:	492b      	ldr	r1, [pc, #172]	; (8012cd8 <tcp_slowtmr+0x668>)
 8012c2c:	482b      	ldr	r0, [pc, #172]	; (8012cdc <tcp_slowtmr+0x66c>)
 8012c2e:	f009 f815 	bl	801bc5c <printf>
    pcb_remove = 0;
 8012c32:	2300      	movs	r3, #0
 8012c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012c38:	4b29      	ldr	r3, [pc, #164]	; (8012ce0 <tcp_slowtmr+0x670>)
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	6a1b      	ldr	r3, [r3, #32]
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	2bf0      	cmp	r3, #240	; 0xf0
 8012c44:	d904      	bls.n	8012c50 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d02f      	beq.n	8012cb8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c5a:	f000 fc17 	bl	801348c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d010      	beq.n	8012c86 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012c64:	4b1f      	ldr	r3, [pc, #124]	; (8012ce4 <tcp_slowtmr+0x674>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d106      	bne.n	8012c7c <tcp_slowtmr+0x60c>
 8012c6e:	4b19      	ldr	r3, [pc, #100]	; (8012cd4 <tcp_slowtmr+0x664>)
 8012c70:	f240 52af 	movw	r2, #1455	; 0x5af
 8012c74:	491c      	ldr	r1, [pc, #112]	; (8012ce8 <tcp_slowtmr+0x678>)
 8012c76:	4819      	ldr	r0, [pc, #100]	; (8012cdc <tcp_slowtmr+0x66c>)
 8012c78:	f008 fff0 	bl	801bc5c <printf>
        prev->next = pcb->next;
 8012c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7e:	68da      	ldr	r2, [r3, #12]
 8012c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c82:	60da      	str	r2, [r3, #12]
 8012c84:	e00f      	b.n	8012ca6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012c86:	4b17      	ldr	r3, [pc, #92]	; (8012ce4 <tcp_slowtmr+0x674>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d006      	beq.n	8012c9e <tcp_slowtmr+0x62e>
 8012c90:	4b10      	ldr	r3, [pc, #64]	; (8012cd4 <tcp_slowtmr+0x664>)
 8012c92:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012c96:	4915      	ldr	r1, [pc, #84]	; (8012cec <tcp_slowtmr+0x67c>)
 8012c98:	4810      	ldr	r0, [pc, #64]	; (8012cdc <tcp_slowtmr+0x66c>)
 8012c9a:	f008 ffdf 	bl	801bc5c <printf>
        tcp_tw_pcbs = pcb->next;
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	4a10      	ldr	r2, [pc, #64]	; (8012ce4 <tcp_slowtmr+0x674>)
 8012ca4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012cb0:	69f8      	ldr	r0, [r7, #28]
 8012cb2:	f7fe ff29 	bl	8011b08 <tcp_free>
 8012cb6:	e004      	b.n	8012cc2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d1a9      	bne.n	8012c1c <tcp_slowtmr+0x5ac>
    }
  }
}
 8012cc8:	bf00      	nop
 8012cca:	bf00      	nop
 8012ccc:	3730      	adds	r7, #48	; 0x30
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	08026440 	.word	0x08026440
 8012cd8:	080268d0 	.word	0x080268d0
 8012cdc:	08026484 	.word	0x08026484
 8012ce0:	2000be58 	.word	0x2000be58
 8012ce4:	2000be64 	.word	0x2000be64
 8012ce8:	08026900 	.word	0x08026900
 8012cec:	08026928 	.word	0x08026928

08012cf0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b082      	sub	sp, #8
 8012cf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012cf6:	4b2d      	ldr	r3, [pc, #180]	; (8012dac <tcp_fasttmr+0xbc>)
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	b2da      	uxtb	r2, r3
 8012cfe:	4b2b      	ldr	r3, [pc, #172]	; (8012dac <tcp_fasttmr+0xbc>)
 8012d00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012d02:	4b2b      	ldr	r3, [pc, #172]	; (8012db0 <tcp_fasttmr+0xc0>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012d08:	e048      	b.n	8012d9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	7f9a      	ldrb	r2, [r3, #30]
 8012d0e:	4b27      	ldr	r3, [pc, #156]	; (8012dac <tcp_fasttmr+0xbc>)
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d03f      	beq.n	8012d96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012d16:	4b25      	ldr	r3, [pc, #148]	; (8012dac <tcp_fasttmr+0xbc>)
 8012d18:	781a      	ldrb	r2, [r3, #0]
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	8b5b      	ldrh	r3, [r3, #26]
 8012d22:	f003 0301 	and.w	r3, r3, #1
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d010      	beq.n	8012d4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	8b5b      	ldrh	r3, [r3, #26]
 8012d2e:	f043 0302 	orr.w	r3, r3, #2
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f004 f80f 	bl	8016d5c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	8b5b      	ldrh	r3, [r3, #26]
 8012d42:	f023 0303 	bic.w	r3, r3, #3
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	8b5b      	ldrh	r3, [r3, #26]
 8012d50:	f003 0308 	and.w	r3, r3, #8
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d009      	beq.n	8012d6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	8b5b      	ldrh	r3, [r3, #26]
 8012d5c:	f023 0308 	bic.w	r3, r3, #8
 8012d60:	b29a      	uxth	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f7ff f862 	bl	8011e30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00a      	beq.n	8012d90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012d7a:	4b0e      	ldr	r3, [pc, #56]	; (8012db4 <tcp_fasttmr+0xc4>)
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 f819 	bl	8012db8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012d86:	4b0b      	ldr	r3, [pc, #44]	; (8012db4 <tcp_fasttmr+0xc4>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d000      	beq.n	8012d90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012d8e:	e7b8      	b.n	8012d02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	607b      	str	r3, [r7, #4]
 8012d94:	e002      	b.n	8012d9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1b3      	bne.n	8012d0a <tcp_fasttmr+0x1a>
    }
  }
}
 8012da2:	bf00      	nop
 8012da4:	bf00      	nop
 8012da6:	3708      	adds	r7, #8
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	20004f0a 	.word	0x20004f0a
 8012db0:	2000be54 	.word	0x2000be54
 8012db4:	2000be50 	.word	0x2000be50

08012db8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012db8:	b590      	push	{r4, r7, lr}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d109      	bne.n	8012dda <tcp_process_refused_data+0x22>
 8012dc6:	4b37      	ldr	r3, [pc, #220]	; (8012ea4 <tcp_process_refused_data+0xec>)
 8012dc8:	f240 6209 	movw	r2, #1545	; 0x609
 8012dcc:	4936      	ldr	r1, [pc, #216]	; (8012ea8 <tcp_process_refused_data+0xf0>)
 8012dce:	4837      	ldr	r0, [pc, #220]	; (8012eac <tcp_process_refused_data+0xf4>)
 8012dd0:	f008 ff44 	bl	801bc5c <printf>
 8012dd4:	f06f 030f 	mvn.w	r3, #15
 8012dd8:	e060      	b.n	8012e9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012dde:	7b5b      	ldrb	r3, [r3, #13]
 8012de0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012de6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00b      	beq.n	8012e10 <tcp_process_refused_data+0x58>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6918      	ldr	r0, [r3, #16]
 8012e02:	2300      	movs	r3, #0
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	6879      	ldr	r1, [r7, #4]
 8012e08:	47a0      	blx	r4
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	73fb      	strb	r3, [r7, #15]
 8012e0e:	e007      	b.n	8012e20 <tcp_process_refused_data+0x68>
 8012e10:	2300      	movs	r3, #0
 8012e12:	68ba      	ldr	r2, [r7, #8]
 8012e14:	6879      	ldr	r1, [r7, #4]
 8012e16:	2000      	movs	r0, #0
 8012e18:	f000 f8c2 	bl	8012fa0 <tcp_recv_null>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d12a      	bne.n	8012e7e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012e28:	7bbb      	ldrb	r3, [r7, #14]
 8012e2a:	f003 0320 	and.w	r3, r3, #32
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d033      	beq.n	8012e9a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012e3a:	d005      	beq.n	8012e48 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e40:	3301      	adds	r3, #1
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00b      	beq.n	8012e6a <tcp_process_refused_data+0xb2>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6918      	ldr	r0, [r3, #16]
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	2200      	movs	r2, #0
 8012e60:	6879      	ldr	r1, [r7, #4]
 8012e62:	47a0      	blx	r4
 8012e64:	4603      	mov	r3, r0
 8012e66:	73fb      	strb	r3, [r7, #15]
 8012e68:	e001      	b.n	8012e6e <tcp_process_refused_data+0xb6>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e72:	f113 0f0d 	cmn.w	r3, #13
 8012e76:	d110      	bne.n	8012e9a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012e78:	f06f 030c 	mvn.w	r3, #12
 8012e7c:	e00e      	b.n	8012e9c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e82:	f113 0f0d 	cmn.w	r3, #13
 8012e86:	d102      	bne.n	8012e8e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012e88:	f06f 030c 	mvn.w	r3, #12
 8012e8c:	e006      	b.n	8012e9c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012e94:	f06f 0304 	mvn.w	r3, #4
 8012e98:	e000      	b.n	8012e9c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3714      	adds	r7, #20
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd90      	pop	{r4, r7, pc}
 8012ea4:	08026440 	.word	0x08026440
 8012ea8:	08026950 	.word	0x08026950
 8012eac:	08026484 	.word	0x08026484

08012eb0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012eb8:	e007      	b.n	8012eca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f000 f80a 	bl	8012eda <tcp_seg_free>
    seg = next;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1f4      	bne.n	8012eba <tcp_segs_free+0xa>
  }
}
 8012ed0:	bf00      	nop
 8012ed2:	bf00      	nop
 8012ed4:	3710      	adds	r7, #16
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}

08012eda <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012eda:	b580      	push	{r7, lr}
 8012edc:	b082      	sub	sp, #8
 8012ede:	af00      	add	r7, sp, #0
 8012ee0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d00c      	beq.n	8012f02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d004      	beq.n	8012efa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe fb4b 	bl	8011590 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012efa:	6879      	ldr	r1, [r7, #4]
 8012efc:	2003      	movs	r0, #3
 8012efe:	f7fd fcc9 	bl	8010894 <memp_free>
  }
}
 8012f02:	bf00      	nop
 8012f04:	3708      	adds	r7, #8
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
	...

08012f0c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	460b      	mov	r3, r1
 8012f16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d107      	bne.n	8012f2e <tcp_setprio+0x22>
 8012f1e:	4b07      	ldr	r3, [pc, #28]	; (8012f3c <tcp_setprio+0x30>)
 8012f20:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8012f24:	4906      	ldr	r1, [pc, #24]	; (8012f40 <tcp_setprio+0x34>)
 8012f26:	4807      	ldr	r0, [pc, #28]	; (8012f44 <tcp_setprio+0x38>)
 8012f28:	f008 fe98 	bl	801bc5c <printf>
 8012f2c:	e002      	b.n	8012f34 <tcp_setprio+0x28>

  pcb->prio = prio;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	78fa      	ldrb	r2, [r7, #3]
 8012f32:	755a      	strb	r2, [r3, #21]
}
 8012f34:	3708      	adds	r7, #8
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	08026440 	.word	0x08026440
 8012f40:	08026978 	.word	0x08026978
 8012f44:	08026484 	.word	0x08026484

08012f48 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d106      	bne.n	8012f64 <tcp_seg_copy+0x1c>
 8012f56:	4b0f      	ldr	r3, [pc, #60]	; (8012f94 <tcp_seg_copy+0x4c>)
 8012f58:	f240 6282 	movw	r2, #1666	; 0x682
 8012f5c:	490e      	ldr	r1, [pc, #56]	; (8012f98 <tcp_seg_copy+0x50>)
 8012f5e:	480f      	ldr	r0, [pc, #60]	; (8012f9c <tcp_seg_copy+0x54>)
 8012f60:	f008 fe7c 	bl	801bc5c <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012f64:	2003      	movs	r0, #3
 8012f66:	f7fd fc43 	bl	80107f0 <memp_malloc>
 8012f6a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d101      	bne.n	8012f76 <tcp_seg_copy+0x2e>
    return NULL;
 8012f72:	2300      	movs	r3, #0
 8012f74:	e00a      	b.n	8012f8c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012f76:	2210      	movs	r2, #16
 8012f78:	6879      	ldr	r1, [r7, #4]
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	f008 fbc0 	bl	801b700 <memcpy>
  pbuf_ref(cseg->p);
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fe fba9 	bl	80116dc <pbuf_ref>
  return cseg;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	3710      	adds	r7, #16
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	08026440 	.word	0x08026440
 8012f98:	08026994 	.word	0x08026994
 8012f9c:	08026484 	.word	0x08026484

08012fa0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	607a      	str	r2, [r7, #4]
 8012fac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d109      	bne.n	8012fc8 <tcp_recv_null+0x28>
 8012fb4:	4b12      	ldr	r3, [pc, #72]	; (8013000 <tcp_recv_null+0x60>)
 8012fb6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012fba:	4912      	ldr	r1, [pc, #72]	; (8013004 <tcp_recv_null+0x64>)
 8012fbc:	4812      	ldr	r0, [pc, #72]	; (8013008 <tcp_recv_null+0x68>)
 8012fbe:	f008 fe4d 	bl	801bc5c <printf>
 8012fc2:	f06f 030f 	mvn.w	r3, #15
 8012fc6:	e016      	b.n	8012ff6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d009      	beq.n	8012fe2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	891b      	ldrh	r3, [r3, #8]
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	68b8      	ldr	r0, [r7, #8]
 8012fd6:	f7ff fab5 	bl	8012544 <tcp_recved>
    pbuf_free(p);
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7fe fad8 	bl	8011590 <pbuf_free>
 8012fe0:	e008      	b.n	8012ff4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d104      	bne.n	8012ff4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012fea:	68b8      	ldr	r0, [r7, #8]
 8012fec:	f7fe ff8a 	bl	8011f04 <tcp_close>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	e000      	b.n	8012ff6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	08026440 	.word	0x08026440
 8013004:	080269b0 	.word	0x080269b0
 8013008:	08026484 	.word	0x08026484

0801300c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b086      	sub	sp, #24
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801301a:	2b00      	cmp	r3, #0
 801301c:	db01      	blt.n	8013022 <tcp_kill_prio+0x16>
 801301e:	79fb      	ldrb	r3, [r7, #7]
 8013020:	e000      	b.n	8013024 <tcp_kill_prio+0x18>
 8013022:	237f      	movs	r3, #127	; 0x7f
 8013024:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013026:	7afb      	ldrb	r3, [r7, #11]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d034      	beq.n	8013096 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801302c:	7afb      	ldrb	r3, [r7, #11]
 801302e:	3b01      	subs	r3, #1
 8013030:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013032:	2300      	movs	r3, #0
 8013034:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013036:	2300      	movs	r3, #0
 8013038:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801303a:	4b19      	ldr	r3, [pc, #100]	; (80130a0 <tcp_kill_prio+0x94>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	617b      	str	r3, [r7, #20]
 8013040:	e01f      	b.n	8013082 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	7d5b      	ldrb	r3, [r3, #21]
 8013046:	7afa      	ldrb	r2, [r7, #11]
 8013048:	429a      	cmp	r2, r3
 801304a:	d80c      	bhi.n	8013066 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013050:	7afa      	ldrb	r2, [r7, #11]
 8013052:	429a      	cmp	r2, r3
 8013054:	d112      	bne.n	801307c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013056:	4b13      	ldr	r3, [pc, #76]	; (80130a4 <tcp_kill_prio+0x98>)
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	6a1b      	ldr	r3, [r3, #32]
 801305e:	1ad3      	subs	r3, r2, r3
 8013060:	68fa      	ldr	r2, [r7, #12]
 8013062:	429a      	cmp	r2, r3
 8013064:	d80a      	bhi.n	801307c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013066:	4b0f      	ldr	r3, [pc, #60]	; (80130a4 <tcp_kill_prio+0x98>)
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	6a1b      	ldr	r3, [r3, #32]
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	7d5b      	ldrb	r3, [r3, #21]
 801307a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	617b      	str	r3, [r7, #20]
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d1dc      	bne.n	8013042 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d004      	beq.n	8013098 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801308e:	6938      	ldr	r0, [r7, #16]
 8013090:	f7ff f87e 	bl	8012190 <tcp_abort>
 8013094:	e000      	b.n	8013098 <tcp_kill_prio+0x8c>
    return;
 8013096:	bf00      	nop
  }
}
 8013098:	3718      	adds	r7, #24
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	2000be54 	.word	0x2000be54
 80130a4:	2000be58 	.word	0x2000be58

080130a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b086      	sub	sp, #24
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	4603      	mov	r3, r0
 80130b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80130b2:	79fb      	ldrb	r3, [r7, #7]
 80130b4:	2b08      	cmp	r3, #8
 80130b6:	d009      	beq.n	80130cc <tcp_kill_state+0x24>
 80130b8:	79fb      	ldrb	r3, [r7, #7]
 80130ba:	2b09      	cmp	r3, #9
 80130bc:	d006      	beq.n	80130cc <tcp_kill_state+0x24>
 80130be:	4b1a      	ldr	r3, [pc, #104]	; (8013128 <tcp_kill_state+0x80>)
 80130c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80130c4:	4919      	ldr	r1, [pc, #100]	; (801312c <tcp_kill_state+0x84>)
 80130c6:	481a      	ldr	r0, [pc, #104]	; (8013130 <tcp_kill_state+0x88>)
 80130c8:	f008 fdc8 	bl	801bc5c <printf>

  inactivity = 0;
 80130cc:	2300      	movs	r3, #0
 80130ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80130d0:	2300      	movs	r3, #0
 80130d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130d4:	4b17      	ldr	r3, [pc, #92]	; (8013134 <tcp_kill_state+0x8c>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	617b      	str	r3, [r7, #20]
 80130da:	e017      	b.n	801310c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	7d1b      	ldrb	r3, [r3, #20]
 80130e0:	79fa      	ldrb	r2, [r7, #7]
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d10f      	bne.n	8013106 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80130e6:	4b14      	ldr	r3, [pc, #80]	; (8013138 <tcp_kill_state+0x90>)
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	6a1b      	ldr	r3, [r3, #32]
 80130ee:	1ad3      	subs	r3, r2, r3
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d807      	bhi.n	8013106 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80130f6:	4b10      	ldr	r3, [pc, #64]	; (8013138 <tcp_kill_state+0x90>)
 80130f8:	681a      	ldr	r2, [r3, #0]
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	6a1b      	ldr	r3, [r3, #32]
 80130fe:	1ad3      	subs	r3, r2, r3
 8013100:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	68db      	ldr	r3, [r3, #12]
 801310a:	617b      	str	r3, [r7, #20]
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1e4      	bne.n	80130dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d003      	beq.n	8013120 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013118:	2100      	movs	r1, #0
 801311a:	6938      	ldr	r0, [r7, #16]
 801311c:	f7fe ff7a 	bl	8012014 <tcp_abandon>
  }
}
 8013120:	bf00      	nop
 8013122:	3718      	adds	r7, #24
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	08026440 	.word	0x08026440
 801312c:	080269cc 	.word	0x080269cc
 8013130:	08026484 	.word	0x08026484
 8013134:	2000be54 	.word	0x2000be54
 8013138:	2000be58 	.word	0x2000be58

0801313c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013142:	2300      	movs	r3, #0
 8013144:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013146:	2300      	movs	r3, #0
 8013148:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801314a:	4b12      	ldr	r3, [pc, #72]	; (8013194 <tcp_kill_timewait+0x58>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	60fb      	str	r3, [r7, #12]
 8013150:	e012      	b.n	8013178 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013152:	4b11      	ldr	r3, [pc, #68]	; (8013198 <tcp_kill_timewait+0x5c>)
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	6a1b      	ldr	r3, [r3, #32]
 801315a:	1ad3      	subs	r3, r2, r3
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d807      	bhi.n	8013172 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013162:	4b0d      	ldr	r3, [pc, #52]	; (8013198 <tcp_kill_timewait+0x5c>)
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	6a1b      	ldr	r3, [r3, #32]
 801316a:	1ad3      	subs	r3, r2, r3
 801316c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	60fb      	str	r3, [r7, #12]
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d1e9      	bne.n	8013152 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d002      	beq.n	801318a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013184:	68b8      	ldr	r0, [r7, #8]
 8013186:	f7ff f803 	bl	8012190 <tcp_abort>
  }
}
 801318a:	bf00      	nop
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	2000be64 	.word	0x2000be64
 8013198:	2000be58 	.word	0x2000be58

0801319c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80131a2:	4b10      	ldr	r3, [pc, #64]	; (80131e4 <tcp_handle_closepend+0x48>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80131a8:	e014      	b.n	80131d4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	68db      	ldr	r3, [r3, #12]
 80131ae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	8b5b      	ldrh	r3, [r3, #26]
 80131b4:	f003 0308 	and.w	r3, r3, #8
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d009      	beq.n	80131d0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	8b5b      	ldrh	r3, [r3, #26]
 80131c0:	f023 0308 	bic.w	r3, r3, #8
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7fe fe30 	bl	8011e30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d1e7      	bne.n	80131aa <tcp_handle_closepend+0xe>
  }
}
 80131da:	bf00      	nop
 80131dc:	bf00      	nop
 80131de:	3708      	adds	r7, #8
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	2000be54 	.word	0x2000be54

080131e8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b084      	sub	sp, #16
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	4603      	mov	r3, r0
 80131f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80131f2:	2001      	movs	r0, #1
 80131f4:	f7fd fafc 	bl	80107f0 <memp_malloc>
 80131f8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d126      	bne.n	801324e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013200:	f7ff ffcc 	bl	801319c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013204:	f7ff ff9a 	bl	801313c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013208:	2001      	movs	r0, #1
 801320a:	f7fd faf1 	bl	80107f0 <memp_malloc>
 801320e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d11b      	bne.n	801324e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013216:	2009      	movs	r0, #9
 8013218:	f7ff ff46 	bl	80130a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801321c:	2001      	movs	r0, #1
 801321e:	f7fd fae7 	bl	80107f0 <memp_malloc>
 8013222:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d111      	bne.n	801324e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801322a:	2008      	movs	r0, #8
 801322c:	f7ff ff3c 	bl	80130a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013230:	2001      	movs	r0, #1
 8013232:	f7fd fadd 	bl	80107f0 <memp_malloc>
 8013236:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d107      	bne.n	801324e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801323e:	79fb      	ldrb	r3, [r7, #7]
 8013240:	4618      	mov	r0, r3
 8013242:	f7ff fee3 	bl	801300c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013246:	2001      	movs	r0, #1
 8013248:	f7fd fad2 	bl	80107f0 <memp_malloc>
 801324c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d03f      	beq.n	80132d4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013254:	229c      	movs	r2, #156	; 0x9c
 8013256:	2100      	movs	r1, #0
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f008 fa79 	bl	801b750 <memset>
    pcb->prio = prio;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	79fa      	ldrb	r2, [r7, #7]
 8013262:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801326a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	22ff      	movs	r2, #255	; 0xff
 8013282:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f44f 7206 	mov.w	r2, #536	; 0x218
 801328a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2206      	movs	r2, #6
 8013290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2206      	movs	r2, #6
 8013298:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132a0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	2201      	movs	r2, #1
 80132a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80132aa:	4b0d      	ldr	r3, [pc, #52]	; (80132e0 <tcp_alloc+0xf8>)
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80132b2:	4b0c      	ldr	r3, [pc, #48]	; (80132e4 <tcp_alloc+0xfc>)
 80132b4:	781a      	ldrb	r2, [r3, #0]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80132c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	4a08      	ldr	r2, [pc, #32]	; (80132e8 <tcp_alloc+0x100>)
 80132c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	4a07      	ldr	r2, [pc, #28]	; (80132ec <tcp_alloc+0x104>)
 80132d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80132d4:	68fb      	ldr	r3, [r7, #12]
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	3710      	adds	r7, #16
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	bf00      	nop
 80132e0:	2000be58 	.word	0x2000be58
 80132e4:	20004f0a 	.word	0x20004f0a
 80132e8:	08012fa1 	.word	0x08012fa1
 80132ec:	006ddd00 	.word	0x006ddd00

080132f0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	4603      	mov	r3, r0
 80132f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80132fa:	2040      	movs	r0, #64	; 0x40
 80132fc:	f7ff ff74 	bl	80131e8 <tcp_alloc>
 8013300:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013302:	68fb      	ldr	r3, [r7, #12]
}
 8013304:	4618      	mov	r0, r3
 8013306:	3710      	adds	r7, #16
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d002      	beq.n	8013322 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	683a      	ldr	r2, [r7, #0]
 8013320:	611a      	str	r2, [r3, #16]
  }
}
 8013322:	bf00      	nop
 8013324:	370c      	adds	r7, #12
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr
	...

08013330 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d00e      	beq.n	801335e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	7d1b      	ldrb	r3, [r3, #20]
 8013344:	2b01      	cmp	r3, #1
 8013346:	d106      	bne.n	8013356 <tcp_recv+0x26>
 8013348:	4b07      	ldr	r3, [pc, #28]	; (8013368 <tcp_recv+0x38>)
 801334a:	f240 72df 	movw	r2, #2015	; 0x7df
 801334e:	4907      	ldr	r1, [pc, #28]	; (801336c <tcp_recv+0x3c>)
 8013350:	4807      	ldr	r0, [pc, #28]	; (8013370 <tcp_recv+0x40>)
 8013352:	f008 fc83 	bl	801bc5c <printf>
    pcb->recv = recv;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	683a      	ldr	r2, [r7, #0]
 801335a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801335e:	bf00      	nop
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	08026440 	.word	0x08026440
 801336c:	080269dc 	.word	0x080269dc
 8013370:	08026484 	.word	0x08026484

08013374 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d00e      	beq.n	80133a2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	7d1b      	ldrb	r3, [r3, #20]
 8013388:	2b01      	cmp	r3, #1
 801338a:	d106      	bne.n	801339a <tcp_sent+0x26>
 801338c:	4b07      	ldr	r3, [pc, #28]	; (80133ac <tcp_sent+0x38>)
 801338e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013392:	4907      	ldr	r1, [pc, #28]	; (80133b0 <tcp_sent+0x3c>)
 8013394:	4807      	ldr	r0, [pc, #28]	; (80133b4 <tcp_sent+0x40>)
 8013396:	f008 fc61 	bl	801bc5c <printf>
    pcb->sent = sent;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80133a2:	bf00      	nop
 80133a4:	3708      	adds	r7, #8
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	08026440 	.word	0x08026440
 80133b0:	08026a04 	.word	0x08026a04
 80133b4:	08026484 	.word	0x08026484

080133b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b082      	sub	sp, #8
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00e      	beq.n	80133e6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	7d1b      	ldrb	r3, [r3, #20]
 80133cc:	2b01      	cmp	r3, #1
 80133ce:	d106      	bne.n	80133de <tcp_err+0x26>
 80133d0:	4b07      	ldr	r3, [pc, #28]	; (80133f0 <tcp_err+0x38>)
 80133d2:	f640 020d 	movw	r2, #2061	; 0x80d
 80133d6:	4907      	ldr	r1, [pc, #28]	; (80133f4 <tcp_err+0x3c>)
 80133d8:	4807      	ldr	r0, [pc, #28]	; (80133f8 <tcp_err+0x40>)
 80133da:	f008 fc3f 	bl	801bc5c <printf>
    pcb->errf = err;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80133e6:	bf00      	nop
 80133e8:	3708      	adds	r7, #8
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	bf00      	nop
 80133f0:	08026440 	.word	0x08026440
 80133f4:	08026a2c 	.word	0x08026a2c
 80133f8:	08026484 	.word	0x08026484

080133fc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b085      	sub	sp, #20
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d008      	beq.n	801341e <tcp_accept+0x22>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	7d1b      	ldrb	r3, [r3, #20]
 8013410:	2b01      	cmp	r3, #1
 8013412:	d104      	bne.n	801341e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	683a      	ldr	r2, [r7, #0]
 801341c:	619a      	str	r2, [r3, #24]
  }
}
 801341e:	bf00      	nop
 8013420:	3714      	adds	r7, #20
 8013422:	46bd      	mov	sp, r7
 8013424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013428:	4770      	bx	lr
	...

0801342c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	4613      	mov	r3, r2
 8013438:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d107      	bne.n	8013450 <tcp_poll+0x24>
 8013440:	4b0e      	ldr	r3, [pc, #56]	; (801347c <tcp_poll+0x50>)
 8013442:	f640 023d 	movw	r2, #2109	; 0x83d
 8013446:	490e      	ldr	r1, [pc, #56]	; (8013480 <tcp_poll+0x54>)
 8013448:	480e      	ldr	r0, [pc, #56]	; (8013484 <tcp_poll+0x58>)
 801344a:	f008 fc07 	bl	801bc5c <printf>
 801344e:	e011      	b.n	8013474 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	7d1b      	ldrb	r3, [r3, #20]
 8013454:	2b01      	cmp	r3, #1
 8013456:	d106      	bne.n	8013466 <tcp_poll+0x3a>
 8013458:	4b08      	ldr	r3, [pc, #32]	; (801347c <tcp_poll+0x50>)
 801345a:	f640 023e 	movw	r2, #2110	; 0x83e
 801345e:	490a      	ldr	r1, [pc, #40]	; (8013488 <tcp_poll+0x5c>)
 8013460:	4808      	ldr	r0, [pc, #32]	; (8013484 <tcp_poll+0x58>)
 8013462:	f008 fbfb 	bl	801bc5c <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	79fa      	ldrb	r2, [r7, #7]
 8013472:	775a      	strb	r2, [r3, #29]
}
 8013474:	3710      	adds	r7, #16
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	08026440 	.word	0x08026440
 8013480:	08026a54 	.word	0x08026a54
 8013484:	08026484 	.word	0x08026484
 8013488:	08026a6c 	.word	0x08026a6c

0801348c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d107      	bne.n	80134aa <tcp_pcb_purge+0x1e>
 801349a:	4b21      	ldr	r3, [pc, #132]	; (8013520 <tcp_pcb_purge+0x94>)
 801349c:	f640 0251 	movw	r2, #2129	; 0x851
 80134a0:	4920      	ldr	r1, [pc, #128]	; (8013524 <tcp_pcb_purge+0x98>)
 80134a2:	4821      	ldr	r0, [pc, #132]	; (8013528 <tcp_pcb_purge+0x9c>)
 80134a4:	f008 fbda 	bl	801bc5c <printf>
 80134a8:	e037      	b.n	801351a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	7d1b      	ldrb	r3, [r3, #20]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d033      	beq.n	801351a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80134b6:	2b0a      	cmp	r3, #10
 80134b8:	d02f      	beq.n	801351a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d02b      	beq.n	801351a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d007      	beq.n	80134da <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fe f85e 	bl	8011590 <pbuf_free>
      pcb->refused_data = NULL;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d002      	beq.n	80134e8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 f986 	bl	80137f4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134ee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7ff fcdb 	bl	8012eb0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134fe:	4618      	mov	r0, r3
 8013500:	f7ff fcd6 	bl	8012eb0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	66da      	str	r2, [r3, #108]	; 0x6c
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2200      	movs	r2, #0
 8013516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	08026440 	.word	0x08026440
 8013524:	08026a8c 	.word	0x08026a8c
 8013528:	08026484 	.word	0x08026484

0801352c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d106      	bne.n	801354a <tcp_pcb_remove+0x1e>
 801353c:	4b3e      	ldr	r3, [pc, #248]	; (8013638 <tcp_pcb_remove+0x10c>)
 801353e:	f640 0283 	movw	r2, #2179	; 0x883
 8013542:	493e      	ldr	r1, [pc, #248]	; (801363c <tcp_pcb_remove+0x110>)
 8013544:	483e      	ldr	r0, [pc, #248]	; (8013640 <tcp_pcb_remove+0x114>)
 8013546:	f008 fb89 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d106      	bne.n	801355e <tcp_pcb_remove+0x32>
 8013550:	4b39      	ldr	r3, [pc, #228]	; (8013638 <tcp_pcb_remove+0x10c>)
 8013552:	f640 0284 	movw	r2, #2180	; 0x884
 8013556:	493b      	ldr	r1, [pc, #236]	; (8013644 <tcp_pcb_remove+0x118>)
 8013558:	4839      	ldr	r0, [pc, #228]	; (8013640 <tcp_pcb_remove+0x114>)
 801355a:	f008 fb7f 	bl	801bc5c <printf>

  TCP_RMV(pcblist, pcb);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	683a      	ldr	r2, [r7, #0]
 8013564:	429a      	cmp	r2, r3
 8013566:	d105      	bne.n	8013574 <tcp_pcb_remove+0x48>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	68da      	ldr	r2, [r3, #12]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	601a      	str	r2, [r3, #0]
 8013572:	e013      	b.n	801359c <tcp_pcb_remove+0x70>
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	60fb      	str	r3, [r7, #12]
 801357a:	e00c      	b.n	8013596 <tcp_pcb_remove+0x6a>
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	683a      	ldr	r2, [r7, #0]
 8013582:	429a      	cmp	r2, r3
 8013584:	d104      	bne.n	8013590 <tcp_pcb_remove+0x64>
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	68da      	ldr	r2, [r3, #12]
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	60da      	str	r2, [r3, #12]
 801358e:	e005      	b.n	801359c <tcp_pcb_remove+0x70>
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	60fb      	str	r3, [r7, #12]
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1ef      	bne.n	801357c <tcp_pcb_remove+0x50>
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	2200      	movs	r2, #0
 80135a0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80135a2:	6838      	ldr	r0, [r7, #0]
 80135a4:	f7ff ff72 	bl	801348c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	7d1b      	ldrb	r3, [r3, #20]
 80135ac:	2b0a      	cmp	r3, #10
 80135ae:	d013      	beq.n	80135d8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d00f      	beq.n	80135d8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	8b5b      	ldrh	r3, [r3, #26]
 80135bc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d009      	beq.n	80135d8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	8b5b      	ldrh	r3, [r3, #26]
 80135c8:	f043 0302 	orr.w	r3, r3, #2
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80135d2:	6838      	ldr	r0, [r7, #0]
 80135d4:	f003 fbc2 	bl	8016d5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	7d1b      	ldrb	r3, [r3, #20]
 80135dc:	2b01      	cmp	r3, #1
 80135de:	d020      	beq.n	8013622 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d006      	beq.n	80135f6 <tcp_pcb_remove+0xca>
 80135e8:	4b13      	ldr	r3, [pc, #76]	; (8013638 <tcp_pcb_remove+0x10c>)
 80135ea:	f640 0293 	movw	r2, #2195	; 0x893
 80135ee:	4916      	ldr	r1, [pc, #88]	; (8013648 <tcp_pcb_remove+0x11c>)
 80135f0:	4813      	ldr	r0, [pc, #76]	; (8013640 <tcp_pcb_remove+0x114>)
 80135f2:	f008 fb33 	bl	801bc5c <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d006      	beq.n	801360c <tcp_pcb_remove+0xe0>
 80135fe:	4b0e      	ldr	r3, [pc, #56]	; (8013638 <tcp_pcb_remove+0x10c>)
 8013600:	f640 0294 	movw	r2, #2196	; 0x894
 8013604:	4911      	ldr	r1, [pc, #68]	; (801364c <tcp_pcb_remove+0x120>)
 8013606:	480e      	ldr	r0, [pc, #56]	; (8013640 <tcp_pcb_remove+0x114>)
 8013608:	f008 fb28 	bl	801bc5c <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013610:	2b00      	cmp	r3, #0
 8013612:	d006      	beq.n	8013622 <tcp_pcb_remove+0xf6>
 8013614:	4b08      	ldr	r3, [pc, #32]	; (8013638 <tcp_pcb_remove+0x10c>)
 8013616:	f640 0296 	movw	r2, #2198	; 0x896
 801361a:	490d      	ldr	r1, [pc, #52]	; (8013650 <tcp_pcb_remove+0x124>)
 801361c:	4808      	ldr	r0, [pc, #32]	; (8013640 <tcp_pcb_remove+0x114>)
 801361e:	f008 fb1d 	bl	801bc5c <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	2200      	movs	r2, #0
 8013626:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	2200      	movs	r2, #0
 801362c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801362e:	bf00      	nop
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	08026440 	.word	0x08026440
 801363c:	08026aa8 	.word	0x08026aa8
 8013640:	08026484 	.word	0x08026484
 8013644:	08026ac4 	.word	0x08026ac4
 8013648:	08026ae4 	.word	0x08026ae4
 801364c:	08026afc 	.word	0x08026afc
 8013650:	08026b18 	.word	0x08026b18

08013654 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d106      	bne.n	8013670 <tcp_next_iss+0x1c>
 8013662:	4b0a      	ldr	r3, [pc, #40]	; (801368c <tcp_next_iss+0x38>)
 8013664:	f640 02af 	movw	r2, #2223	; 0x8af
 8013668:	4909      	ldr	r1, [pc, #36]	; (8013690 <tcp_next_iss+0x3c>)
 801366a:	480a      	ldr	r0, [pc, #40]	; (8013694 <tcp_next_iss+0x40>)
 801366c:	f008 faf6 	bl	801bc5c <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013670:	4b09      	ldr	r3, [pc, #36]	; (8013698 <tcp_next_iss+0x44>)
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	4b09      	ldr	r3, [pc, #36]	; (801369c <tcp_next_iss+0x48>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4413      	add	r3, r2
 801367a:	4a07      	ldr	r2, [pc, #28]	; (8013698 <tcp_next_iss+0x44>)
 801367c:	6013      	str	r3, [r2, #0]
  return iss;
 801367e:	4b06      	ldr	r3, [pc, #24]	; (8013698 <tcp_next_iss+0x44>)
 8013680:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013682:	4618      	mov	r0, r3
 8013684:	3708      	adds	r7, #8
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	08026440 	.word	0x08026440
 8013690:	08026b30 	.word	0x08026b30
 8013694:	08026484 	.word	0x08026484
 8013698:	20000030 	.word	0x20000030
 801369c:	2000be58 	.word	0x2000be58

080136a0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b086      	sub	sp, #24
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	4603      	mov	r3, r0
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
 80136ac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d106      	bne.n	80136c2 <tcp_eff_send_mss_netif+0x22>
 80136b4:	4b14      	ldr	r3, [pc, #80]	; (8013708 <tcp_eff_send_mss_netif+0x68>)
 80136b6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80136ba:	4914      	ldr	r1, [pc, #80]	; (801370c <tcp_eff_send_mss_netif+0x6c>)
 80136bc:	4814      	ldr	r0, [pc, #80]	; (8013710 <tcp_eff_send_mss_netif+0x70>)
 80136be:	f008 facd 	bl	801bc5c <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d101      	bne.n	80136cc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80136c8:	89fb      	ldrh	r3, [r7, #14]
 80136ca:	e019      	b.n	8013700 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	8c1b      	ldrh	r3, [r3, #32]
 80136d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80136d2:	8afb      	ldrh	r3, [r7, #22]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d012      	beq.n	80136fe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80136d8:	2328      	movs	r3, #40	; 0x28
 80136da:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80136dc:	8afa      	ldrh	r2, [r7, #22]
 80136de:	8abb      	ldrh	r3, [r7, #20]
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d904      	bls.n	80136ee <tcp_eff_send_mss_netif+0x4e>
 80136e4:	8afa      	ldrh	r2, [r7, #22]
 80136e6:	8abb      	ldrh	r3, [r7, #20]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	e000      	b.n	80136f0 <tcp_eff_send_mss_netif+0x50>
 80136ee:	2300      	movs	r3, #0
 80136f0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80136f2:	8a7a      	ldrh	r2, [r7, #18]
 80136f4:	89fb      	ldrh	r3, [r7, #14]
 80136f6:	4293      	cmp	r3, r2
 80136f8:	bf28      	it	cs
 80136fa:	4613      	movcs	r3, r2
 80136fc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80136fe:	89fb      	ldrh	r3, [r7, #14]
}
 8013700:	4618      	mov	r0, r3
 8013702:	3718      	adds	r7, #24
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}
 8013708:	08026440 	.word	0x08026440
 801370c:	08026b4c 	.word	0x08026b4c
 8013710:	08026484 	.word	0x08026484

08013714 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d119      	bne.n	801375c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013728:	4b10      	ldr	r3, [pc, #64]	; (801376c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801372a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801372e:	4910      	ldr	r1, [pc, #64]	; (8013770 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013730:	4810      	ldr	r0, [pc, #64]	; (8013774 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013732:	f008 fa93 	bl	801bc5c <printf>

  while (pcb != NULL) {
 8013736:	e011      	b.n	801375c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	681a      	ldr	r2, [r3, #0]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	429a      	cmp	r2, r3
 8013742:	d108      	bne.n	8013756 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	68db      	ldr	r3, [r3, #12]
 8013748:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801374a:	68f8      	ldr	r0, [r7, #12]
 801374c:	f7fe fd20 	bl	8012190 <tcp_abort>
      pcb = next;
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	60fb      	str	r3, [r7, #12]
 8013754:	e002      	b.n	801375c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	68db      	ldr	r3, [r3, #12]
 801375a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1ea      	bne.n	8013738 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013762:	bf00      	nop
 8013764:	bf00      	nop
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	08026440 	.word	0x08026440
 8013770:	08026b74 	.word	0x08026b74
 8013774:	08026484 	.word	0x08026484

08013778 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d02a      	beq.n	80137de <tcp_netif_ip_addr_changed+0x66>
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d026      	beq.n	80137de <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013790:	4b15      	ldr	r3, [pc, #84]	; (80137e8 <tcp_netif_ip_addr_changed+0x70>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	4619      	mov	r1, r3
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7ff ffbc 	bl	8013714 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801379c:	4b13      	ldr	r3, [pc, #76]	; (80137ec <tcp_netif_ip_addr_changed+0x74>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	4619      	mov	r1, r3
 80137a2:	6878      	ldr	r0, [r7, #4]
 80137a4:	f7ff ffb6 	bl	8013714 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d017      	beq.n	80137de <tcp_netif_ip_addr_changed+0x66>
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d013      	beq.n	80137de <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80137b6:	4b0e      	ldr	r3, [pc, #56]	; (80137f0 <tcp_netif_ip_addr_changed+0x78>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	60fb      	str	r3, [r7, #12]
 80137bc:	e00c      	b.n	80137d8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d103      	bne.n	80137d2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	60fb      	str	r3, [r7, #12]
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d1ef      	bne.n	80137be <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80137de:	bf00      	nop
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	2000be54 	.word	0x2000be54
 80137ec:	2000be60 	.word	0x2000be60
 80137f0:	2000be5c 	.word	0x2000be5c

080137f4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013800:	2b00      	cmp	r3, #0
 8013802:	d007      	beq.n	8013814 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013808:	4618      	mov	r0, r3
 801380a:	f7ff fb51 	bl	8012eb0 <tcp_segs_free>
    pcb->ooseq = NULL;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801381c:	b590      	push	{r4, r7, lr}
 801381e:	b08d      	sub	sp, #52	; 0x34
 8013820:	af04      	add	r7, sp, #16
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d105      	bne.n	8013838 <tcp_input+0x1c>
 801382c:	4b9b      	ldr	r3, [pc, #620]	; (8013a9c <tcp_input+0x280>)
 801382e:	2283      	movs	r2, #131	; 0x83
 8013830:	499b      	ldr	r1, [pc, #620]	; (8013aa0 <tcp_input+0x284>)
 8013832:	489c      	ldr	r0, [pc, #624]	; (8013aa4 <tcp_input+0x288>)
 8013834:	f008 fa12 	bl	801bc5c <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	4a9a      	ldr	r2, [pc, #616]	; (8013aa8 <tcp_input+0x28c>)
 801383e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	895b      	ldrh	r3, [r3, #10]
 8013844:	2b13      	cmp	r3, #19
 8013846:	f240 83c4 	bls.w	8013fd2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801384a:	4b98      	ldr	r3, [pc, #608]	; (8013aac <tcp_input+0x290>)
 801384c:	695b      	ldr	r3, [r3, #20]
 801384e:	4a97      	ldr	r2, [pc, #604]	; (8013aac <tcp_input+0x290>)
 8013850:	6812      	ldr	r2, [r2, #0]
 8013852:	4611      	mov	r1, r2
 8013854:	4618      	mov	r0, r3
 8013856:	f006 fbcb 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 801385a:	4603      	mov	r3, r0
 801385c:	2b00      	cmp	r3, #0
 801385e:	f040 83ba 	bne.w	8013fd6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013862:	4b92      	ldr	r3, [pc, #584]	; (8013aac <tcp_input+0x290>)
 8013864:	695b      	ldr	r3, [r3, #20]
 8013866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801386a:	2be0      	cmp	r3, #224	; 0xe0
 801386c:	f000 83b3 	beq.w	8013fd6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013870:	4b8d      	ldr	r3, [pc, #564]	; (8013aa8 <tcp_input+0x28c>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	899b      	ldrh	r3, [r3, #12]
 8013876:	b29b      	uxth	r3, r3
 8013878:	4618      	mov	r0, r3
 801387a:	f7fc facd 	bl	800fe18 <lwip_htons>
 801387e:	4603      	mov	r3, r0
 8013880:	0b1b      	lsrs	r3, r3, #12
 8013882:	b29b      	uxth	r3, r3
 8013884:	b2db      	uxtb	r3, r3
 8013886:	009b      	lsls	r3, r3, #2
 8013888:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801388a:	7cbb      	ldrb	r3, [r7, #18]
 801388c:	2b13      	cmp	r3, #19
 801388e:	f240 83a4 	bls.w	8013fda <tcp_input+0x7be>
 8013892:	7cbb      	ldrb	r3, [r7, #18]
 8013894:	b29a      	uxth	r2, r3
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	891b      	ldrh	r3, [r3, #8]
 801389a:	429a      	cmp	r2, r3
 801389c:	f200 839d 	bhi.w	8013fda <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80138a0:	7cbb      	ldrb	r3, [r7, #18]
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	3b14      	subs	r3, #20
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	4b81      	ldr	r3, [pc, #516]	; (8013ab0 <tcp_input+0x294>)
 80138aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80138ac:	4b81      	ldr	r3, [pc, #516]	; (8013ab4 <tcp_input+0x298>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	895a      	ldrh	r2, [r3, #10]
 80138b6:	7cbb      	ldrb	r3, [r7, #18]
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d309      	bcc.n	80138d2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80138be:	4b7c      	ldr	r3, [pc, #496]	; (8013ab0 <tcp_input+0x294>)
 80138c0:	881a      	ldrh	r2, [r3, #0]
 80138c2:	4b7d      	ldr	r3, [pc, #500]	; (8013ab8 <tcp_input+0x29c>)
 80138c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80138c6:	7cbb      	ldrb	r3, [r7, #18]
 80138c8:	4619      	mov	r1, r3
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7fd fdda 	bl	8011484 <pbuf_remove_header>
 80138d0:	e04e      	b.n	8013970 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d105      	bne.n	80138e6 <tcp_input+0xca>
 80138da:	4b70      	ldr	r3, [pc, #448]	; (8013a9c <tcp_input+0x280>)
 80138dc:	22c2      	movs	r2, #194	; 0xc2
 80138de:	4977      	ldr	r1, [pc, #476]	; (8013abc <tcp_input+0x2a0>)
 80138e0:	4870      	ldr	r0, [pc, #448]	; (8013aa4 <tcp_input+0x288>)
 80138e2:	f008 f9bb 	bl	801bc5c <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80138e6:	2114      	movs	r1, #20
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f7fd fdcb 	bl	8011484 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	895a      	ldrh	r2, [r3, #10]
 80138f2:	4b71      	ldr	r3, [pc, #452]	; (8013ab8 <tcp_input+0x29c>)
 80138f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80138f6:	4b6e      	ldr	r3, [pc, #440]	; (8013ab0 <tcp_input+0x294>)
 80138f8:	881a      	ldrh	r2, [r3, #0]
 80138fa:	4b6f      	ldr	r3, [pc, #444]	; (8013ab8 <tcp_input+0x29c>)
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013902:	4b6d      	ldr	r3, [pc, #436]	; (8013ab8 <tcp_input+0x29c>)
 8013904:	881b      	ldrh	r3, [r3, #0]
 8013906:	4619      	mov	r1, r3
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f7fd fdbb 	bl	8011484 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	895b      	ldrh	r3, [r3, #10]
 8013914:	8a3a      	ldrh	r2, [r7, #16]
 8013916:	429a      	cmp	r2, r3
 8013918:	f200 8361 	bhi.w	8013fde <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	4a64      	ldr	r2, [pc, #400]	; (8013ab4 <tcp_input+0x298>)
 8013924:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	8a3a      	ldrh	r2, [r7, #16]
 801392c:	4611      	mov	r1, r2
 801392e:	4618      	mov	r0, r3
 8013930:	f7fd fda8 	bl	8011484 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	891a      	ldrh	r2, [r3, #8]
 8013938:	8a3b      	ldrh	r3, [r7, #16]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	b29a      	uxth	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	895b      	ldrh	r3, [r3, #10]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d005      	beq.n	8013956 <tcp_input+0x13a>
 801394a:	4b54      	ldr	r3, [pc, #336]	; (8013a9c <tcp_input+0x280>)
 801394c:	22df      	movs	r2, #223	; 0xdf
 801394e:	495c      	ldr	r1, [pc, #368]	; (8013ac0 <tcp_input+0x2a4>)
 8013950:	4854      	ldr	r0, [pc, #336]	; (8013aa4 <tcp_input+0x288>)
 8013952:	f008 f983 	bl	801bc5c <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	891a      	ldrh	r2, [r3, #8]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	891b      	ldrh	r3, [r3, #8]
 8013960:	429a      	cmp	r2, r3
 8013962:	d005      	beq.n	8013970 <tcp_input+0x154>
 8013964:	4b4d      	ldr	r3, [pc, #308]	; (8013a9c <tcp_input+0x280>)
 8013966:	22e0      	movs	r2, #224	; 0xe0
 8013968:	4956      	ldr	r1, [pc, #344]	; (8013ac4 <tcp_input+0x2a8>)
 801396a:	484e      	ldr	r0, [pc, #312]	; (8013aa4 <tcp_input+0x288>)
 801396c:	f008 f976 	bl	801bc5c <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013970:	4b4d      	ldr	r3, [pc, #308]	; (8013aa8 <tcp_input+0x28c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	881b      	ldrh	r3, [r3, #0]
 8013976:	b29b      	uxth	r3, r3
 8013978:	4a4b      	ldr	r2, [pc, #300]	; (8013aa8 <tcp_input+0x28c>)
 801397a:	6814      	ldr	r4, [r2, #0]
 801397c:	4618      	mov	r0, r3
 801397e:	f7fc fa4b 	bl	800fe18 <lwip_htons>
 8013982:	4603      	mov	r3, r0
 8013984:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013986:	4b48      	ldr	r3, [pc, #288]	; (8013aa8 <tcp_input+0x28c>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	885b      	ldrh	r3, [r3, #2]
 801398c:	b29b      	uxth	r3, r3
 801398e:	4a46      	ldr	r2, [pc, #280]	; (8013aa8 <tcp_input+0x28c>)
 8013990:	6814      	ldr	r4, [r2, #0]
 8013992:	4618      	mov	r0, r3
 8013994:	f7fc fa40 	bl	800fe18 <lwip_htons>
 8013998:	4603      	mov	r3, r0
 801399a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801399c:	4b42      	ldr	r3, [pc, #264]	; (8013aa8 <tcp_input+0x28c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	4a41      	ldr	r2, [pc, #260]	; (8013aa8 <tcp_input+0x28c>)
 80139a4:	6814      	ldr	r4, [r2, #0]
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fc fa4b 	bl	800fe42 <lwip_htonl>
 80139ac:	4603      	mov	r3, r0
 80139ae:	6063      	str	r3, [r4, #4]
 80139b0:	6863      	ldr	r3, [r4, #4]
 80139b2:	4a45      	ldr	r2, [pc, #276]	; (8013ac8 <tcp_input+0x2ac>)
 80139b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80139b6:	4b3c      	ldr	r3, [pc, #240]	; (8013aa8 <tcp_input+0x28c>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	4a3a      	ldr	r2, [pc, #232]	; (8013aa8 <tcp_input+0x28c>)
 80139be:	6814      	ldr	r4, [r2, #0]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7fc fa3e 	bl	800fe42 <lwip_htonl>
 80139c6:	4603      	mov	r3, r0
 80139c8:	60a3      	str	r3, [r4, #8]
 80139ca:	68a3      	ldr	r3, [r4, #8]
 80139cc:	4a3f      	ldr	r2, [pc, #252]	; (8013acc <tcp_input+0x2b0>)
 80139ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80139d0:	4b35      	ldr	r3, [pc, #212]	; (8013aa8 <tcp_input+0x28c>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	89db      	ldrh	r3, [r3, #14]
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	4a33      	ldr	r2, [pc, #204]	; (8013aa8 <tcp_input+0x28c>)
 80139da:	6814      	ldr	r4, [r2, #0]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fc fa1b 	bl	800fe18 <lwip_htons>
 80139e2:	4603      	mov	r3, r0
 80139e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80139e6:	4b30      	ldr	r3, [pc, #192]	; (8013aa8 <tcp_input+0x28c>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	899b      	ldrh	r3, [r3, #12]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7fc fa12 	bl	800fe18 <lwip_htons>
 80139f4:	4603      	mov	r3, r0
 80139f6:	b2db      	uxtb	r3, r3
 80139f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80139fc:	b2da      	uxtb	r2, r3
 80139fe:	4b34      	ldr	r3, [pc, #208]	; (8013ad0 <tcp_input+0x2b4>)
 8013a00:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	891a      	ldrh	r2, [r3, #8]
 8013a06:	4b33      	ldr	r3, [pc, #204]	; (8013ad4 <tcp_input+0x2b8>)
 8013a08:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013a0a:	4b31      	ldr	r3, [pc, #196]	; (8013ad0 <tcp_input+0x2b4>)
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	f003 0303 	and.w	r3, r3, #3
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00c      	beq.n	8013a30 <tcp_input+0x214>
    tcplen++;
 8013a16:	4b2f      	ldr	r3, [pc, #188]	; (8013ad4 <tcp_input+0x2b8>)
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	4b2d      	ldr	r3, [pc, #180]	; (8013ad4 <tcp_input+0x2b8>)
 8013a20:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	891a      	ldrh	r2, [r3, #8]
 8013a26:	4b2b      	ldr	r3, [pc, #172]	; (8013ad4 <tcp_input+0x2b8>)
 8013a28:	881b      	ldrh	r3, [r3, #0]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	f200 82d9 	bhi.w	8013fe2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013a30:	2300      	movs	r3, #0
 8013a32:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a34:	4b28      	ldr	r3, [pc, #160]	; (8013ad8 <tcp_input+0x2bc>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	61fb      	str	r3, [r7, #28]
 8013a3a:	e09d      	b.n	8013b78 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	7d1b      	ldrb	r3, [r3, #20]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d105      	bne.n	8013a50 <tcp_input+0x234>
 8013a44:	4b15      	ldr	r3, [pc, #84]	; (8013a9c <tcp_input+0x280>)
 8013a46:	22fb      	movs	r2, #251	; 0xfb
 8013a48:	4924      	ldr	r1, [pc, #144]	; (8013adc <tcp_input+0x2c0>)
 8013a4a:	4816      	ldr	r0, [pc, #88]	; (8013aa4 <tcp_input+0x288>)
 8013a4c:	f008 f906 	bl	801bc5c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013a50:	69fb      	ldr	r3, [r7, #28]
 8013a52:	7d1b      	ldrb	r3, [r3, #20]
 8013a54:	2b0a      	cmp	r3, #10
 8013a56:	d105      	bne.n	8013a64 <tcp_input+0x248>
 8013a58:	4b10      	ldr	r3, [pc, #64]	; (8013a9c <tcp_input+0x280>)
 8013a5a:	22fc      	movs	r2, #252	; 0xfc
 8013a5c:	4920      	ldr	r1, [pc, #128]	; (8013ae0 <tcp_input+0x2c4>)
 8013a5e:	4811      	ldr	r0, [pc, #68]	; (8013aa4 <tcp_input+0x288>)
 8013a60:	f008 f8fc 	bl	801bc5c <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	7d1b      	ldrb	r3, [r3, #20]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d105      	bne.n	8013a78 <tcp_input+0x25c>
 8013a6c:	4b0b      	ldr	r3, [pc, #44]	; (8013a9c <tcp_input+0x280>)
 8013a6e:	22fd      	movs	r2, #253	; 0xfd
 8013a70:	491c      	ldr	r1, [pc, #112]	; (8013ae4 <tcp_input+0x2c8>)
 8013a72:	480c      	ldr	r0, [pc, #48]	; (8013aa4 <tcp_input+0x288>)
 8013a74:	f008 f8f2 	bl	801bc5c <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	7a1b      	ldrb	r3, [r3, #8]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d033      	beq.n	8013ae8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	7a1a      	ldrb	r2, [r3, #8]
 8013a84:	4b09      	ldr	r3, [pc, #36]	; (8013aac <tcp_input+0x290>)
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a8c:	3301      	adds	r3, #1
 8013a8e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d029      	beq.n	8013ae8 <tcp_input+0x2cc>
      prev = pcb;
 8013a94:	69fb      	ldr	r3, [r7, #28]
 8013a96:	61bb      	str	r3, [r7, #24]
      continue;
 8013a98:	e06b      	b.n	8013b72 <tcp_input+0x356>
 8013a9a:	bf00      	nop
 8013a9c:	08026ba8 	.word	0x08026ba8
 8013aa0:	08026bdc 	.word	0x08026bdc
 8013aa4:	08026bf4 	.word	0x08026bf4
 8013aa8:	20004f1c 	.word	0x20004f1c
 8013aac:	20008740 	.word	0x20008740
 8013ab0:	20004f20 	.word	0x20004f20
 8013ab4:	20004f24 	.word	0x20004f24
 8013ab8:	20004f22 	.word	0x20004f22
 8013abc:	08026c1c 	.word	0x08026c1c
 8013ac0:	08026c2c 	.word	0x08026c2c
 8013ac4:	08026c38 	.word	0x08026c38
 8013ac8:	20004f2c 	.word	0x20004f2c
 8013acc:	20004f30 	.word	0x20004f30
 8013ad0:	20004f38 	.word	0x20004f38
 8013ad4:	20004f36 	.word	0x20004f36
 8013ad8:	2000be54 	.word	0x2000be54
 8013adc:	08026c58 	.word	0x08026c58
 8013ae0:	08026c80 	.word	0x08026c80
 8013ae4:	08026cac 	.word	0x08026cac
    }

    if (pcb->remote_port == tcphdr->src &&
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	8b1a      	ldrh	r2, [r3, #24]
 8013aec:	4b94      	ldr	r3, [pc, #592]	; (8013d40 <tcp_input+0x524>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	881b      	ldrh	r3, [r3, #0]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d13a      	bne.n	8013b6e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	8ada      	ldrh	r2, [r3, #22]
 8013afc:	4b90      	ldr	r3, [pc, #576]	; (8013d40 <tcp_input+0x524>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	885b      	ldrh	r3, [r3, #2]
 8013b02:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d132      	bne.n	8013b6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	685a      	ldr	r2, [r3, #4]
 8013b0c:	4b8d      	ldr	r3, [pc, #564]	; (8013d44 <tcp_input+0x528>)
 8013b0e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d12c      	bne.n	8013b6e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	681a      	ldr	r2, [r3, #0]
 8013b18:	4b8a      	ldr	r3, [pc, #552]	; (8013d44 <tcp_input+0x528>)
 8013b1a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d126      	bne.n	8013b6e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	69fa      	ldr	r2, [r7, #28]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d106      	bne.n	8013b38 <tcp_input+0x31c>
 8013b2a:	4b87      	ldr	r3, [pc, #540]	; (8013d48 <tcp_input+0x52c>)
 8013b2c:	f240 120d 	movw	r2, #269	; 0x10d
 8013b30:	4986      	ldr	r1, [pc, #536]	; (8013d4c <tcp_input+0x530>)
 8013b32:	4887      	ldr	r0, [pc, #540]	; (8013d50 <tcp_input+0x534>)
 8013b34:	f008 f892 	bl	801bc5c <printf>
      if (prev != NULL) {
 8013b38:	69bb      	ldr	r3, [r7, #24]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d00a      	beq.n	8013b54 <tcp_input+0x338>
        prev->next = pcb->next;
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	68da      	ldr	r2, [r3, #12]
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013b46:	4b83      	ldr	r3, [pc, #524]	; (8013d54 <tcp_input+0x538>)
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	69fb      	ldr	r3, [r7, #28]
 8013b4c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013b4e:	4a81      	ldr	r2, [pc, #516]	; (8013d54 <tcp_input+0x538>)
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	69fa      	ldr	r2, [r7, #28]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d111      	bne.n	8013b82 <tcp_input+0x366>
 8013b5e:	4b7a      	ldr	r3, [pc, #488]	; (8013d48 <tcp_input+0x52c>)
 8013b60:	f240 1215 	movw	r2, #277	; 0x115
 8013b64:	497c      	ldr	r1, [pc, #496]	; (8013d58 <tcp_input+0x53c>)
 8013b66:	487a      	ldr	r0, [pc, #488]	; (8013d50 <tcp_input+0x534>)
 8013b68:	f008 f878 	bl	801bc5c <printf>
      break;
 8013b6c:	e009      	b.n	8013b82 <tcp_input+0x366>
    }
    prev = pcb;
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	61fb      	str	r3, [r7, #28]
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f47f af5e 	bne.w	8013a3c <tcp_input+0x220>
 8013b80:	e000      	b.n	8013b84 <tcp_input+0x368>
      break;
 8013b82:	bf00      	nop
  }

  if (pcb == NULL) {
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f040 8095 	bne.w	8013cb6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b8c:	4b73      	ldr	r3, [pc, #460]	; (8013d5c <tcp_input+0x540>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	61fb      	str	r3, [r7, #28]
 8013b92:	e03f      	b.n	8013c14 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	7d1b      	ldrb	r3, [r3, #20]
 8013b98:	2b0a      	cmp	r3, #10
 8013b9a:	d006      	beq.n	8013baa <tcp_input+0x38e>
 8013b9c:	4b6a      	ldr	r3, [pc, #424]	; (8013d48 <tcp_input+0x52c>)
 8013b9e:	f240 121f 	movw	r2, #287	; 0x11f
 8013ba2:	496f      	ldr	r1, [pc, #444]	; (8013d60 <tcp_input+0x544>)
 8013ba4:	486a      	ldr	r0, [pc, #424]	; (8013d50 <tcp_input+0x534>)
 8013ba6:	f008 f859 	bl	801bc5c <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	7a1b      	ldrb	r3, [r3, #8]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d009      	beq.n	8013bc6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	7a1a      	ldrb	r2, [r3, #8]
 8013bb6:	4b63      	ldr	r3, [pc, #396]	; (8013d44 <tcp_input+0x528>)
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d122      	bne.n	8013c0c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013bc6:	69fb      	ldr	r3, [r7, #28]
 8013bc8:	8b1a      	ldrh	r2, [r3, #24]
 8013bca:	4b5d      	ldr	r3, [pc, #372]	; (8013d40 <tcp_input+0x524>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	881b      	ldrh	r3, [r3, #0]
 8013bd0:	b29b      	uxth	r3, r3
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d11b      	bne.n	8013c0e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	8ada      	ldrh	r2, [r3, #22]
 8013bda:	4b59      	ldr	r3, [pc, #356]	; (8013d40 <tcp_input+0x524>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	885b      	ldrh	r3, [r3, #2]
 8013be0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d113      	bne.n	8013c0e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	685a      	ldr	r2, [r3, #4]
 8013bea:	4b56      	ldr	r3, [pc, #344]	; (8013d44 <tcp_input+0x528>)
 8013bec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d10d      	bne.n	8013c0e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	4b53      	ldr	r3, [pc, #332]	; (8013d44 <tcp_input+0x528>)
 8013bf8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d107      	bne.n	8013c0e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013bfe:	69f8      	ldr	r0, [r7, #28]
 8013c00:	f000 fb54 	bl	80142ac <tcp_timewait_input>
        }
        pbuf_free(p);
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7fd fcc3 	bl	8011590 <pbuf_free>
        return;
 8013c0a:	e1f0      	b.n	8013fee <tcp_input+0x7d2>
        continue;
 8013c0c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	68db      	ldr	r3, [r3, #12]
 8013c12:	61fb      	str	r3, [r7, #28]
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d1bc      	bne.n	8013b94 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013c1e:	4b51      	ldr	r3, [pc, #324]	; (8013d64 <tcp_input+0x548>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	617b      	str	r3, [r7, #20]
 8013c24:	e02a      	b.n	8013c7c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	7a1b      	ldrb	r3, [r3, #8]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d00c      	beq.n	8013c48 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	7a1a      	ldrb	r2, [r3, #8]
 8013c32:	4b44      	ldr	r3, [pc, #272]	; (8013d44 <tcp_input+0x528>)
 8013c34:	685b      	ldr	r3, [r3, #4]
 8013c36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d002      	beq.n	8013c48 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	61bb      	str	r3, [r7, #24]
        continue;
 8013c46:	e016      	b.n	8013c76 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013c48:	697b      	ldr	r3, [r7, #20]
 8013c4a:	8ada      	ldrh	r2, [r3, #22]
 8013c4c:	4b3c      	ldr	r3, [pc, #240]	; (8013d40 <tcp_input+0x524>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	885b      	ldrh	r3, [r3, #2]
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d10c      	bne.n	8013c72 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	4b39      	ldr	r3, [pc, #228]	; (8013d44 <tcp_input+0x528>)
 8013c5e:	695b      	ldr	r3, [r3, #20]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d00f      	beq.n	8013c84 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d00d      	beq.n	8013c86 <tcp_input+0x46a>
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d009      	beq.n	8013c86 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	68db      	ldr	r3, [r3, #12]
 8013c7a:	617b      	str	r3, [r7, #20]
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d1d1      	bne.n	8013c26 <tcp_input+0x40a>
 8013c82:	e000      	b.n	8013c86 <tcp_input+0x46a>
            break;
 8013c84:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d014      	beq.n	8013cb6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00a      	beq.n	8013ca8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	68da      	ldr	r2, [r3, #12]
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013c9a:	4b32      	ldr	r3, [pc, #200]	; (8013d64 <tcp_input+0x548>)
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013ca2:	4a30      	ldr	r2, [pc, #192]	; (8013d64 <tcp_input+0x548>)
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013ca8:	6978      	ldr	r0, [r7, #20]
 8013caa:	f000 fa01 	bl	80140b0 <tcp_listen_input>
      }
      pbuf_free(p);
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f7fd fc6e 	bl	8011590 <pbuf_free>
      return;
 8013cb4:	e19b      	b.n	8013fee <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f000 8160 	beq.w	8013f7e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013cbe:	4b2a      	ldr	r3, [pc, #168]	; (8013d68 <tcp_input+0x54c>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	891a      	ldrh	r2, [r3, #8]
 8013cc8:	4b27      	ldr	r3, [pc, #156]	; (8013d68 <tcp_input+0x54c>)
 8013cca:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013ccc:	4a26      	ldr	r2, [pc, #152]	; (8013d68 <tcp_input+0x54c>)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013cd2:	4b1b      	ldr	r3, [pc, #108]	; (8013d40 <tcp_input+0x524>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	4a24      	ldr	r2, [pc, #144]	; (8013d68 <tcp_input+0x54c>)
 8013cd8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013cda:	4b24      	ldr	r3, [pc, #144]	; (8013d6c <tcp_input+0x550>)
 8013cdc:	2200      	movs	r2, #0
 8013cde:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013ce0:	4b23      	ldr	r3, [pc, #140]	; (8013d70 <tcp_input+0x554>)
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013ce6:	4b23      	ldr	r3, [pc, #140]	; (8013d74 <tcp_input+0x558>)
 8013ce8:	2200      	movs	r2, #0
 8013cea:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013cec:	4b22      	ldr	r3, [pc, #136]	; (8013d78 <tcp_input+0x55c>)
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	f003 0308 	and.w	r3, r3, #8
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d006      	beq.n	8013d06 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	7b5b      	ldrb	r3, [r3, #13]
 8013cfc:	f043 0301 	orr.w	r3, r3, #1
 8013d00:	b2da      	uxtb	r2, r3
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013d06:	69fb      	ldr	r3, [r7, #28]
 8013d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d038      	beq.n	8013d80 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013d0e:	69f8      	ldr	r0, [r7, #28]
 8013d10:	f7ff f852 	bl	8012db8 <tcp_process_refused_data>
 8013d14:	4603      	mov	r3, r0
 8013d16:	f113 0f0d 	cmn.w	r3, #13
 8013d1a:	d007      	beq.n	8013d2c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d02d      	beq.n	8013d80 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013d24:	4b15      	ldr	r3, [pc, #84]	; (8013d7c <tcp_input+0x560>)
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d029      	beq.n	8013d80 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f040 8104 	bne.w	8013f3e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013d36:	69f8      	ldr	r0, [r7, #28]
 8013d38:	f003 fe16 	bl	8017968 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013d3c:	e0ff      	b.n	8013f3e <tcp_input+0x722>
 8013d3e:	bf00      	nop
 8013d40:	20004f1c 	.word	0x20004f1c
 8013d44:	20008740 	.word	0x20008740
 8013d48:	08026ba8 	.word	0x08026ba8
 8013d4c:	08026cd4 	.word	0x08026cd4
 8013d50:	08026bf4 	.word	0x08026bf4
 8013d54:	2000be54 	.word	0x2000be54
 8013d58:	08026d00 	.word	0x08026d00
 8013d5c:	2000be64 	.word	0x2000be64
 8013d60:	08026d2c 	.word	0x08026d2c
 8013d64:	2000be5c 	.word	0x2000be5c
 8013d68:	20004f0c 	.word	0x20004f0c
 8013d6c:	20004f3c 	.word	0x20004f3c
 8013d70:	20004f39 	.word	0x20004f39
 8013d74:	20004f34 	.word	0x20004f34
 8013d78:	20004f38 	.word	0x20004f38
 8013d7c:	20004f36 	.word	0x20004f36
      }
    }
    tcp_input_pcb = pcb;
 8013d80:	4a9c      	ldr	r2, [pc, #624]	; (8013ff4 <tcp_input+0x7d8>)
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013d86:	69f8      	ldr	r0, [r7, #28]
 8013d88:	f000 fb0a 	bl	80143a0 <tcp_process>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013d90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d94:	f113 0f0d 	cmn.w	r3, #13
 8013d98:	f000 80d3 	beq.w	8013f42 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013d9c:	4b96      	ldr	r3, [pc, #600]	; (8013ff8 <tcp_input+0x7dc>)
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	f003 0308 	and.w	r3, r3, #8
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d015      	beq.n	8013dd4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d008      	beq.n	8013dc4 <tcp_input+0x5a8>
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013db8:	69fa      	ldr	r2, [r7, #28]
 8013dba:	6912      	ldr	r2, [r2, #16]
 8013dbc:	f06f 010d 	mvn.w	r1, #13
 8013dc0:	4610      	mov	r0, r2
 8013dc2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013dc4:	69f9      	ldr	r1, [r7, #28]
 8013dc6:	488d      	ldr	r0, [pc, #564]	; (8013ffc <tcp_input+0x7e0>)
 8013dc8:	f7ff fbb0 	bl	801352c <tcp_pcb_remove>
        tcp_free(pcb);
 8013dcc:	69f8      	ldr	r0, [r7, #28]
 8013dce:	f7fd fe9b 	bl	8011b08 <tcp_free>
 8013dd2:	e0c1      	b.n	8013f58 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013dd8:	4b89      	ldr	r3, [pc, #548]	; (8014000 <tcp_input+0x7e4>)
 8013dda:	881b      	ldrh	r3, [r3, #0]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d01d      	beq.n	8013e1c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013de0:	4b87      	ldr	r3, [pc, #540]	; (8014000 <tcp_input+0x7e4>)
 8013de2:	881b      	ldrh	r3, [r3, #0]
 8013de4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00a      	beq.n	8013e06 <tcp_input+0x5ea>
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013df6:	69fa      	ldr	r2, [r7, #28]
 8013df8:	6910      	ldr	r0, [r2, #16]
 8013dfa:	89fa      	ldrh	r2, [r7, #14]
 8013dfc:	69f9      	ldr	r1, [r7, #28]
 8013dfe:	4798      	blx	r3
 8013e00:	4603      	mov	r3, r0
 8013e02:	74fb      	strb	r3, [r7, #19]
 8013e04:	e001      	b.n	8013e0a <tcp_input+0x5ee>
 8013e06:	2300      	movs	r3, #0
 8013e08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013e0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e0e:	f113 0f0d 	cmn.w	r3, #13
 8013e12:	f000 8098 	beq.w	8013f46 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013e16:	4b7a      	ldr	r3, [pc, #488]	; (8014000 <tcp_input+0x7e4>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013e1c:	69f8      	ldr	r0, [r7, #28]
 8013e1e:	f000 f907 	bl	8014030 <tcp_input_delayed_close>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	f040 8090 	bne.w	8013f4a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013e2a:	4b76      	ldr	r3, [pc, #472]	; (8014004 <tcp_input+0x7e8>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d041      	beq.n	8013eb6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d006      	beq.n	8013e48 <tcp_input+0x62c>
 8013e3a:	4b73      	ldr	r3, [pc, #460]	; (8014008 <tcp_input+0x7ec>)
 8013e3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013e40:	4972      	ldr	r1, [pc, #456]	; (801400c <tcp_input+0x7f0>)
 8013e42:	4873      	ldr	r0, [pc, #460]	; (8014010 <tcp_input+0x7f4>)
 8013e44:	f007 ff0a 	bl	801bc5c <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	8b5b      	ldrh	r3, [r3, #26]
 8013e4c:	f003 0310 	and.w	r3, r3, #16
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d008      	beq.n	8013e66 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013e54:	4b6b      	ldr	r3, [pc, #428]	; (8014004 <tcp_input+0x7e8>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7fd fb99 	bl	8011590 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013e5e:	69f8      	ldr	r0, [r7, #28]
 8013e60:	f7fe f996 	bl	8012190 <tcp_abort>
            goto aborted;
 8013e64:	e078      	b.n	8013f58 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d00c      	beq.n	8013e8a <tcp_input+0x66e>
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	6918      	ldr	r0, [r3, #16]
 8013e7a:	4b62      	ldr	r3, [pc, #392]	; (8014004 <tcp_input+0x7e8>)
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	2300      	movs	r3, #0
 8013e80:	69f9      	ldr	r1, [r7, #28]
 8013e82:	47a0      	blx	r4
 8013e84:	4603      	mov	r3, r0
 8013e86:	74fb      	strb	r3, [r7, #19]
 8013e88:	e008      	b.n	8013e9c <tcp_input+0x680>
 8013e8a:	4b5e      	ldr	r3, [pc, #376]	; (8014004 <tcp_input+0x7e8>)
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	2300      	movs	r3, #0
 8013e90:	69f9      	ldr	r1, [r7, #28]
 8013e92:	2000      	movs	r0, #0
 8013e94:	f7ff f884 	bl	8012fa0 <tcp_recv_null>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ea0:	f113 0f0d 	cmn.w	r3, #13
 8013ea4:	d053      	beq.n	8013f4e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013ea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d003      	beq.n	8013eb6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013eae:	4b55      	ldr	r3, [pc, #340]	; (8014004 <tcp_input+0x7e8>)
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	69fb      	ldr	r3, [r7, #28]
 8013eb4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013eb6:	4b50      	ldr	r3, [pc, #320]	; (8013ff8 <tcp_input+0x7dc>)
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	f003 0320 	and.w	r3, r3, #32
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d030      	beq.n	8013f24 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d009      	beq.n	8013ede <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ece:	7b5a      	ldrb	r2, [r3, #13]
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ed4:	f042 0220 	orr.w	r2, r2, #32
 8013ed8:	b2d2      	uxtb	r2, r2
 8013eda:	735a      	strb	r2, [r3, #13]
 8013edc:	e022      	b.n	8013f24 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ee2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013ee6:	d005      	beq.n	8013ef4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013ee8:	69fb      	ldr	r3, [r7, #28]
 8013eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013eec:	3301      	adds	r3, #1
 8013eee:	b29a      	uxth	r2, r3
 8013ef0:	69fb      	ldr	r3, [r7, #28]
 8013ef2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013ef4:	69fb      	ldr	r3, [r7, #28]
 8013ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d00b      	beq.n	8013f16 <tcp_input+0x6fa>
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013f04:	69fb      	ldr	r3, [r7, #28]
 8013f06:	6918      	ldr	r0, [r3, #16]
 8013f08:	2300      	movs	r3, #0
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	69f9      	ldr	r1, [r7, #28]
 8013f0e:	47a0      	blx	r4
 8013f10:	4603      	mov	r3, r0
 8013f12:	74fb      	strb	r3, [r7, #19]
 8013f14:	e001      	b.n	8013f1a <tcp_input+0x6fe>
 8013f16:	2300      	movs	r3, #0
 8013f18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013f1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f1e:	f113 0f0d 	cmn.w	r3, #13
 8013f22:	d016      	beq.n	8013f52 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013f24:	4b33      	ldr	r3, [pc, #204]	; (8013ff4 <tcp_input+0x7d8>)
 8013f26:	2200      	movs	r2, #0
 8013f28:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013f2a:	69f8      	ldr	r0, [r7, #28]
 8013f2c:	f000 f880 	bl	8014030 <tcp_input_delayed_close>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d10f      	bne.n	8013f56 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013f36:	69f8      	ldr	r0, [r7, #28]
 8013f38:	f002 ff10 	bl	8016d5c <tcp_output>
 8013f3c:	e00c      	b.n	8013f58 <tcp_input+0x73c>
        goto aborted;
 8013f3e:	bf00      	nop
 8013f40:	e00a      	b.n	8013f58 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013f42:	bf00      	nop
 8013f44:	e008      	b.n	8013f58 <tcp_input+0x73c>
              goto aborted;
 8013f46:	bf00      	nop
 8013f48:	e006      	b.n	8013f58 <tcp_input+0x73c>
          goto aborted;
 8013f4a:	bf00      	nop
 8013f4c:	e004      	b.n	8013f58 <tcp_input+0x73c>
            goto aborted;
 8013f4e:	bf00      	nop
 8013f50:	e002      	b.n	8013f58 <tcp_input+0x73c>
              goto aborted;
 8013f52:	bf00      	nop
 8013f54:	e000      	b.n	8013f58 <tcp_input+0x73c>
          goto aborted;
 8013f56:	bf00      	nop
    tcp_input_pcb = NULL;
 8013f58:	4b26      	ldr	r3, [pc, #152]	; (8013ff4 <tcp_input+0x7d8>)
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013f5e:	4b29      	ldr	r3, [pc, #164]	; (8014004 <tcp_input+0x7e8>)
 8013f60:	2200      	movs	r2, #0
 8013f62:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013f64:	4b2b      	ldr	r3, [pc, #172]	; (8014014 <tcp_input+0x7f8>)
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d03f      	beq.n	8013fec <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013f6c:	4b29      	ldr	r3, [pc, #164]	; (8014014 <tcp_input+0x7f8>)
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7fd fb0d 	bl	8011590 <pbuf_free>
      inseg.p = NULL;
 8013f76:	4b27      	ldr	r3, [pc, #156]	; (8014014 <tcp_input+0x7f8>)
 8013f78:	2200      	movs	r2, #0
 8013f7a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013f7c:	e036      	b.n	8013fec <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013f7e:	4b26      	ldr	r3, [pc, #152]	; (8014018 <tcp_input+0x7fc>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	899b      	ldrh	r3, [r3, #12]
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fb ff46 	bl	800fe18 <lwip_htons>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	f003 0304 	and.w	r3, r3, #4
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d118      	bne.n	8013fca <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f98:	4b20      	ldr	r3, [pc, #128]	; (801401c <tcp_input+0x800>)
 8013f9a:	6819      	ldr	r1, [r3, #0]
 8013f9c:	4b20      	ldr	r3, [pc, #128]	; (8014020 <tcp_input+0x804>)
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	4b20      	ldr	r3, [pc, #128]	; (8014024 <tcp_input+0x808>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fa8:	4b1b      	ldr	r3, [pc, #108]	; (8014018 <tcp_input+0x7fc>)
 8013faa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fac:	885b      	ldrh	r3, [r3, #2]
 8013fae:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fb0:	4a19      	ldr	r2, [pc, #100]	; (8014018 <tcp_input+0x7fc>)
 8013fb2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fb4:	8812      	ldrh	r2, [r2, #0]
 8013fb6:	b292      	uxth	r2, r2
 8013fb8:	9202      	str	r2, [sp, #8]
 8013fba:	9301      	str	r3, [sp, #4]
 8013fbc:	4b1a      	ldr	r3, [pc, #104]	; (8014028 <tcp_input+0x80c>)
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	4b1a      	ldr	r3, [pc, #104]	; (801402c <tcp_input+0x810>)
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	2000      	movs	r0, #0
 8013fc6:	f003 fc7d 	bl	80178c4 <tcp_rst>
    pbuf_free(p);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7fd fae0 	bl	8011590 <pbuf_free>
  return;
 8013fd0:	e00c      	b.n	8013fec <tcp_input+0x7d0>
    goto dropped;
 8013fd2:	bf00      	nop
 8013fd4:	e006      	b.n	8013fe4 <tcp_input+0x7c8>
    goto dropped;
 8013fd6:	bf00      	nop
 8013fd8:	e004      	b.n	8013fe4 <tcp_input+0x7c8>
    goto dropped;
 8013fda:	bf00      	nop
 8013fdc:	e002      	b.n	8013fe4 <tcp_input+0x7c8>
      goto dropped;
 8013fde:	bf00      	nop
 8013fe0:	e000      	b.n	8013fe4 <tcp_input+0x7c8>
      goto dropped;
 8013fe2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7fd fad3 	bl	8011590 <pbuf_free>
 8013fea:	e000      	b.n	8013fee <tcp_input+0x7d2>
  return;
 8013fec:	bf00      	nop
}
 8013fee:	3724      	adds	r7, #36	; 0x24
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd90      	pop	{r4, r7, pc}
 8013ff4:	2000be68 	.word	0x2000be68
 8013ff8:	20004f39 	.word	0x20004f39
 8013ffc:	2000be54 	.word	0x2000be54
 8014000:	20004f34 	.word	0x20004f34
 8014004:	20004f3c 	.word	0x20004f3c
 8014008:	08026ba8 	.word	0x08026ba8
 801400c:	08026d5c 	.word	0x08026d5c
 8014010:	08026bf4 	.word	0x08026bf4
 8014014:	20004f0c 	.word	0x20004f0c
 8014018:	20004f1c 	.word	0x20004f1c
 801401c:	20004f30 	.word	0x20004f30
 8014020:	20004f36 	.word	0x20004f36
 8014024:	20004f2c 	.word	0x20004f2c
 8014028:	20008750 	.word	0x20008750
 801402c:	20008754 	.word	0x20008754

08014030 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d106      	bne.n	801404c <tcp_input_delayed_close+0x1c>
 801403e:	4b17      	ldr	r3, [pc, #92]	; (801409c <tcp_input_delayed_close+0x6c>)
 8014040:	f240 225a 	movw	r2, #602	; 0x25a
 8014044:	4916      	ldr	r1, [pc, #88]	; (80140a0 <tcp_input_delayed_close+0x70>)
 8014046:	4817      	ldr	r0, [pc, #92]	; (80140a4 <tcp_input_delayed_close+0x74>)
 8014048:	f007 fe08 	bl	801bc5c <printf>

  if (recv_flags & TF_CLOSED) {
 801404c:	4b16      	ldr	r3, [pc, #88]	; (80140a8 <tcp_input_delayed_close+0x78>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	f003 0310 	and.w	r3, r3, #16
 8014054:	2b00      	cmp	r3, #0
 8014056:	d01c      	beq.n	8014092 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	8b5b      	ldrh	r3, [r3, #26]
 801405c:	f003 0310 	and.w	r3, r3, #16
 8014060:	2b00      	cmp	r3, #0
 8014062:	d10d      	bne.n	8014080 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801406a:	2b00      	cmp	r3, #0
 801406c:	d008      	beq.n	8014080 <tcp_input_delayed_close+0x50>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014074:	687a      	ldr	r2, [r7, #4]
 8014076:	6912      	ldr	r2, [r2, #16]
 8014078:	f06f 010e 	mvn.w	r1, #14
 801407c:	4610      	mov	r0, r2
 801407e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014080:	6879      	ldr	r1, [r7, #4]
 8014082:	480a      	ldr	r0, [pc, #40]	; (80140ac <tcp_input_delayed_close+0x7c>)
 8014084:	f7ff fa52 	bl	801352c <tcp_pcb_remove>
    tcp_free(pcb);
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f7fd fd3d 	bl	8011b08 <tcp_free>
    return 1;
 801408e:	2301      	movs	r3, #1
 8014090:	e000      	b.n	8014094 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014092:	2300      	movs	r3, #0
}
 8014094:	4618      	mov	r0, r3
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	08026ba8 	.word	0x08026ba8
 80140a0:	08026d78 	.word	0x08026d78
 80140a4:	08026bf4 	.word	0x08026bf4
 80140a8:	20004f39 	.word	0x20004f39
 80140ac:	2000be54 	.word	0x2000be54

080140b0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80140b0:	b590      	push	{r4, r7, lr}
 80140b2:	b08b      	sub	sp, #44	; 0x2c
 80140b4:	af04      	add	r7, sp, #16
 80140b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80140b8:	4b6f      	ldr	r3, [pc, #444]	; (8014278 <tcp_listen_input+0x1c8>)
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	f003 0304 	and.w	r3, r3, #4
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f040 80d2 	bne.w	801426a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d106      	bne.n	80140da <tcp_listen_input+0x2a>
 80140cc:	4b6b      	ldr	r3, [pc, #428]	; (801427c <tcp_listen_input+0x1cc>)
 80140ce:	f240 2281 	movw	r2, #641	; 0x281
 80140d2:	496b      	ldr	r1, [pc, #428]	; (8014280 <tcp_listen_input+0x1d0>)
 80140d4:	486b      	ldr	r0, [pc, #428]	; (8014284 <tcp_listen_input+0x1d4>)
 80140d6:	f007 fdc1 	bl	801bc5c <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80140da:	4b67      	ldr	r3, [pc, #412]	; (8014278 <tcp_listen_input+0x1c8>)
 80140dc:	781b      	ldrb	r3, [r3, #0]
 80140de:	f003 0310 	and.w	r3, r3, #16
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d019      	beq.n	801411a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140e6:	4b68      	ldr	r3, [pc, #416]	; (8014288 <tcp_listen_input+0x1d8>)
 80140e8:	6819      	ldr	r1, [r3, #0]
 80140ea:	4b68      	ldr	r3, [pc, #416]	; (801428c <tcp_listen_input+0x1dc>)
 80140ec:	881b      	ldrh	r3, [r3, #0]
 80140ee:	461a      	mov	r2, r3
 80140f0:	4b67      	ldr	r3, [pc, #412]	; (8014290 <tcp_listen_input+0x1e0>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140f6:	4b67      	ldr	r3, [pc, #412]	; (8014294 <tcp_listen_input+0x1e4>)
 80140f8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80140fa:	885b      	ldrh	r3, [r3, #2]
 80140fc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140fe:	4a65      	ldr	r2, [pc, #404]	; (8014294 <tcp_listen_input+0x1e4>)
 8014100:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014102:	8812      	ldrh	r2, [r2, #0]
 8014104:	b292      	uxth	r2, r2
 8014106:	9202      	str	r2, [sp, #8]
 8014108:	9301      	str	r3, [sp, #4]
 801410a:	4b63      	ldr	r3, [pc, #396]	; (8014298 <tcp_listen_input+0x1e8>)
 801410c:	9300      	str	r3, [sp, #0]
 801410e:	4b63      	ldr	r3, [pc, #396]	; (801429c <tcp_listen_input+0x1ec>)
 8014110:	4602      	mov	r2, r0
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f003 fbd6 	bl	80178c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014118:	e0a9      	b.n	801426e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801411a:	4b57      	ldr	r3, [pc, #348]	; (8014278 <tcp_listen_input+0x1c8>)
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	f003 0302 	and.w	r3, r3, #2
 8014122:	2b00      	cmp	r3, #0
 8014124:	f000 80a3 	beq.w	801426e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	7d5b      	ldrb	r3, [r3, #21]
 801412c:	4618      	mov	r0, r3
 801412e:	f7ff f85b 	bl	80131e8 <tcp_alloc>
 8014132:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d111      	bne.n	801415e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	699b      	ldr	r3, [r3, #24]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d00a      	beq.n	8014158 <tcp_listen_input+0xa8>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	699b      	ldr	r3, [r3, #24]
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	6910      	ldr	r0, [r2, #16]
 801414a:	f04f 32ff 	mov.w	r2, #4294967295
 801414e:	2100      	movs	r1, #0
 8014150:	4798      	blx	r3
 8014152:	4603      	mov	r3, r0
 8014154:	73bb      	strb	r3, [r7, #14]
      return;
 8014156:	e08b      	b.n	8014270 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014158:	23f0      	movs	r3, #240	; 0xf0
 801415a:	73bb      	strb	r3, [r7, #14]
      return;
 801415c:	e088      	b.n	8014270 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801415e:	4b50      	ldr	r3, [pc, #320]	; (80142a0 <tcp_listen_input+0x1f0>)
 8014160:	695a      	ldr	r2, [r3, #20]
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014166:	4b4e      	ldr	r3, [pc, #312]	; (80142a0 <tcp_listen_input+0x1f0>)
 8014168:	691a      	ldr	r2, [r3, #16]
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	8ada      	ldrh	r2, [r3, #22]
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014176:	4b47      	ldr	r3, [pc, #284]	; (8014294 <tcp_listen_input+0x1e4>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	881b      	ldrh	r3, [r3, #0]
 801417c:	b29a      	uxth	r2, r3
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	2203      	movs	r2, #3
 8014186:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014188:	4b41      	ldr	r3, [pc, #260]	; (8014290 <tcp_listen_input+0x1e0>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	1c5a      	adds	r2, r3, #1
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014192:	697b      	ldr	r3, [r7, #20]
 8014194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801419a:	6978      	ldr	r0, [r7, #20]
 801419c:	f7ff fa5a 	bl	8013654 <tcp_next_iss>
 80141a0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	693a      	ldr	r2, [r7, #16]
 80141a6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	693a      	ldr	r2, [r7, #16]
 80141ac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	693a      	ldr	r2, [r7, #16]
 80141b2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	693a      	ldr	r2, [r7, #16]
 80141b8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80141ba:	4b35      	ldr	r3, [pc, #212]	; (8014290 <tcp_listen_input+0x1e0>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	1e5a      	subs	r2, r3, #1
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	691a      	ldr	r2, [r3, #16]
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	7a5b      	ldrb	r3, [r3, #9]
 80141d6:	f003 030c 	and.w	r3, r3, #12
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	7a1a      	ldrb	r2, [r3, #8]
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80141e8:	4b2e      	ldr	r3, [pc, #184]	; (80142a4 <tcp_listen_input+0x1f4>)
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	60da      	str	r2, [r3, #12]
 80141f0:	4a2c      	ldr	r2, [pc, #176]	; (80142a4 <tcp_listen_input+0x1f4>)
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	6013      	str	r3, [r2, #0]
 80141f6:	f003 fd27 	bl	8017c48 <tcp_timer_needed>
 80141fa:	4b2b      	ldr	r3, [pc, #172]	; (80142a8 <tcp_listen_input+0x1f8>)
 80141fc:	2201      	movs	r2, #1
 80141fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014200:	6978      	ldr	r0, [r7, #20]
 8014202:	f001 fd8d 	bl	8015d20 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014206:	4b23      	ldr	r3, [pc, #140]	; (8014294 <tcp_listen_input+0x1e4>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	89db      	ldrh	r3, [r3, #14]
 801420c:	b29a      	uxth	r2, r3
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	3304      	adds	r3, #4
 8014228:	4618      	mov	r0, r3
 801422a:	f005 fc4b 	bl	8019ac4 <ip4_route>
 801422e:	4601      	mov	r1, r0
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	3304      	adds	r3, #4
 8014234:	461a      	mov	r2, r3
 8014236:	4620      	mov	r0, r4
 8014238:	f7ff fa32 	bl	80136a0 <tcp_eff_send_mss_netif>
 801423c:	4603      	mov	r3, r0
 801423e:	461a      	mov	r2, r3
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014244:	2112      	movs	r1, #18
 8014246:	6978      	ldr	r0, [r7, #20]
 8014248:	f002 fc9a 	bl	8016b80 <tcp_enqueue_flags>
 801424c:	4603      	mov	r3, r0
 801424e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d004      	beq.n	8014262 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014258:	2100      	movs	r1, #0
 801425a:	6978      	ldr	r0, [r7, #20]
 801425c:	f7fd feda 	bl	8012014 <tcp_abandon>
      return;
 8014260:	e006      	b.n	8014270 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014262:	6978      	ldr	r0, [r7, #20]
 8014264:	f002 fd7a 	bl	8016d5c <tcp_output>
  return;
 8014268:	e001      	b.n	801426e <tcp_listen_input+0x1be>
    return;
 801426a:	bf00      	nop
 801426c:	e000      	b.n	8014270 <tcp_listen_input+0x1c0>
  return;
 801426e:	bf00      	nop
}
 8014270:	371c      	adds	r7, #28
 8014272:	46bd      	mov	sp, r7
 8014274:	bd90      	pop	{r4, r7, pc}
 8014276:	bf00      	nop
 8014278:	20004f38 	.word	0x20004f38
 801427c:	08026ba8 	.word	0x08026ba8
 8014280:	08026da0 	.word	0x08026da0
 8014284:	08026bf4 	.word	0x08026bf4
 8014288:	20004f30 	.word	0x20004f30
 801428c:	20004f36 	.word	0x20004f36
 8014290:	20004f2c 	.word	0x20004f2c
 8014294:	20004f1c 	.word	0x20004f1c
 8014298:	20008750 	.word	0x20008750
 801429c:	20008754 	.word	0x20008754
 80142a0:	20008740 	.word	0x20008740
 80142a4:	2000be54 	.word	0x2000be54
 80142a8:	2000be50 	.word	0x2000be50

080142ac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b086      	sub	sp, #24
 80142b0:	af04      	add	r7, sp, #16
 80142b2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80142b4:	4b2f      	ldr	r3, [pc, #188]	; (8014374 <tcp_timewait_input+0xc8>)
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	f003 0304 	and.w	r3, r3, #4
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d153      	bne.n	8014368 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d106      	bne.n	80142d4 <tcp_timewait_input+0x28>
 80142c6:	4b2c      	ldr	r3, [pc, #176]	; (8014378 <tcp_timewait_input+0xcc>)
 80142c8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80142cc:	492b      	ldr	r1, [pc, #172]	; (801437c <tcp_timewait_input+0xd0>)
 80142ce:	482c      	ldr	r0, [pc, #176]	; (8014380 <tcp_timewait_input+0xd4>)
 80142d0:	f007 fcc4 	bl	801bc5c <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80142d4:	4b27      	ldr	r3, [pc, #156]	; (8014374 <tcp_timewait_input+0xc8>)
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	f003 0302 	and.w	r3, r3, #2
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d02a      	beq.n	8014336 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80142e0:	4b28      	ldr	r3, [pc, #160]	; (8014384 <tcp_timewait_input+0xd8>)
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e8:	1ad3      	subs	r3, r2, r3
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	db2d      	blt.n	801434a <tcp_timewait_input+0x9e>
 80142ee:	4b25      	ldr	r3, [pc, #148]	; (8014384 <tcp_timewait_input+0xd8>)
 80142f0:	681a      	ldr	r2, [r3, #0]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f6:	6879      	ldr	r1, [r7, #4]
 80142f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142fa:	440b      	add	r3, r1
 80142fc:	1ad3      	subs	r3, r2, r3
 80142fe:	2b00      	cmp	r3, #0
 8014300:	dc23      	bgt.n	801434a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014302:	4b21      	ldr	r3, [pc, #132]	; (8014388 <tcp_timewait_input+0xdc>)
 8014304:	6819      	ldr	r1, [r3, #0]
 8014306:	4b21      	ldr	r3, [pc, #132]	; (801438c <tcp_timewait_input+0xe0>)
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	461a      	mov	r2, r3
 801430c:	4b1d      	ldr	r3, [pc, #116]	; (8014384 <tcp_timewait_input+0xd8>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014312:	4b1f      	ldr	r3, [pc, #124]	; (8014390 <tcp_timewait_input+0xe4>)
 8014314:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014316:	885b      	ldrh	r3, [r3, #2]
 8014318:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801431a:	4a1d      	ldr	r2, [pc, #116]	; (8014390 <tcp_timewait_input+0xe4>)
 801431c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801431e:	8812      	ldrh	r2, [r2, #0]
 8014320:	b292      	uxth	r2, r2
 8014322:	9202      	str	r2, [sp, #8]
 8014324:	9301      	str	r3, [sp, #4]
 8014326:	4b1b      	ldr	r3, [pc, #108]	; (8014394 <tcp_timewait_input+0xe8>)
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	4b1b      	ldr	r3, [pc, #108]	; (8014398 <tcp_timewait_input+0xec>)
 801432c:	4602      	mov	r2, r0
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f003 fac8 	bl	80178c4 <tcp_rst>
      return;
 8014334:	e01b      	b.n	801436e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014336:	4b0f      	ldr	r3, [pc, #60]	; (8014374 <tcp_timewait_input+0xc8>)
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	f003 0301 	and.w	r3, r3, #1
 801433e:	2b00      	cmp	r3, #0
 8014340:	d003      	beq.n	801434a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014342:	4b16      	ldr	r3, [pc, #88]	; (801439c <tcp_timewait_input+0xf0>)
 8014344:	681a      	ldr	r2, [r3, #0]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801434a:	4b10      	ldr	r3, [pc, #64]	; (801438c <tcp_timewait_input+0xe0>)
 801434c:	881b      	ldrh	r3, [r3, #0]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d00c      	beq.n	801436c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	8b5b      	ldrh	r3, [r3, #26]
 8014356:	f043 0302 	orr.w	r3, r3, #2
 801435a:	b29a      	uxth	r2, r3
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f002 fcfb 	bl	8016d5c <tcp_output>
  }
  return;
 8014366:	e001      	b.n	801436c <tcp_timewait_input+0xc0>
    return;
 8014368:	bf00      	nop
 801436a:	e000      	b.n	801436e <tcp_timewait_input+0xc2>
  return;
 801436c:	bf00      	nop
}
 801436e:	3708      	adds	r7, #8
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}
 8014374:	20004f38 	.word	0x20004f38
 8014378:	08026ba8 	.word	0x08026ba8
 801437c:	08026dc0 	.word	0x08026dc0
 8014380:	08026bf4 	.word	0x08026bf4
 8014384:	20004f2c 	.word	0x20004f2c
 8014388:	20004f30 	.word	0x20004f30
 801438c:	20004f36 	.word	0x20004f36
 8014390:	20004f1c 	.word	0x20004f1c
 8014394:	20008750 	.word	0x20008750
 8014398:	20008754 	.word	0x20008754
 801439c:	2000be58 	.word	0x2000be58

080143a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80143a0:	b590      	push	{r4, r7, lr}
 80143a2:	b08d      	sub	sp, #52	; 0x34
 80143a4:	af04      	add	r7, sp, #16
 80143a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80143a8:	2300      	movs	r3, #0
 80143aa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80143ac:	2300      	movs	r3, #0
 80143ae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d106      	bne.n	80143c4 <tcp_process+0x24>
 80143b6:	4ba5      	ldr	r3, [pc, #660]	; (801464c <tcp_process+0x2ac>)
 80143b8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80143bc:	49a4      	ldr	r1, [pc, #656]	; (8014650 <tcp_process+0x2b0>)
 80143be:	48a5      	ldr	r0, [pc, #660]	; (8014654 <tcp_process+0x2b4>)
 80143c0:	f007 fc4c 	bl	801bc5c <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80143c4:	4ba4      	ldr	r3, [pc, #656]	; (8014658 <tcp_process+0x2b8>)
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	f003 0304 	and.w	r3, r3, #4
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d04e      	beq.n	801446e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	7d1b      	ldrb	r3, [r3, #20]
 80143d4:	2b02      	cmp	r3, #2
 80143d6:	d108      	bne.n	80143ea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143dc:	4b9f      	ldr	r3, [pc, #636]	; (801465c <tcp_process+0x2bc>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d123      	bne.n	801442c <tcp_process+0x8c>
        acceptable = 1;
 80143e4:	2301      	movs	r3, #1
 80143e6:	76fb      	strb	r3, [r7, #27]
 80143e8:	e020      	b.n	801442c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143ee:	4b9c      	ldr	r3, [pc, #624]	; (8014660 <tcp_process+0x2c0>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d102      	bne.n	80143fc <tcp_process+0x5c>
        acceptable = 1;
 80143f6:	2301      	movs	r3, #1
 80143f8:	76fb      	strb	r3, [r7, #27]
 80143fa:	e017      	b.n	801442c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80143fc:	4b98      	ldr	r3, [pc, #608]	; (8014660 <tcp_process+0x2c0>)
 80143fe:	681a      	ldr	r2, [r3, #0]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	2b00      	cmp	r3, #0
 8014408:	db10      	blt.n	801442c <tcp_process+0x8c>
 801440a:	4b95      	ldr	r3, [pc, #596]	; (8014660 <tcp_process+0x2c0>)
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014412:	6879      	ldr	r1, [r7, #4]
 8014414:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014416:	440b      	add	r3, r1
 8014418:	1ad3      	subs	r3, r2, r3
 801441a:	2b00      	cmp	r3, #0
 801441c:	dc06      	bgt.n	801442c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	8b5b      	ldrh	r3, [r3, #26]
 8014422:	f043 0302 	orr.w	r3, r3, #2
 8014426:	b29a      	uxth	r2, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801442c:	7efb      	ldrb	r3, [r7, #27]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d01b      	beq.n	801446a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	7d1b      	ldrb	r3, [r3, #20]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <tcp_process+0xa8>
 801443a:	4b84      	ldr	r3, [pc, #528]	; (801464c <tcp_process+0x2ac>)
 801443c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014440:	4988      	ldr	r1, [pc, #544]	; (8014664 <tcp_process+0x2c4>)
 8014442:	4884      	ldr	r0, [pc, #528]	; (8014654 <tcp_process+0x2b4>)
 8014444:	f007 fc0a 	bl	801bc5c <printf>
      recv_flags |= TF_RESET;
 8014448:	4b87      	ldr	r3, [pc, #540]	; (8014668 <tcp_process+0x2c8>)
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	f043 0308 	orr.w	r3, r3, #8
 8014450:	b2da      	uxtb	r2, r3
 8014452:	4b85      	ldr	r3, [pc, #532]	; (8014668 <tcp_process+0x2c8>)
 8014454:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	8b5b      	ldrh	r3, [r3, #26]
 801445a:	f023 0301 	bic.w	r3, r3, #1
 801445e:	b29a      	uxth	r2, r3
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014464:	f06f 030d 	mvn.w	r3, #13
 8014468:	e37a      	b.n	8014b60 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801446a:	2300      	movs	r3, #0
 801446c:	e378      	b.n	8014b60 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801446e:	4b7a      	ldr	r3, [pc, #488]	; (8014658 <tcp_process+0x2b8>)
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	f003 0302 	and.w	r3, r3, #2
 8014476:	2b00      	cmp	r3, #0
 8014478:	d010      	beq.n	801449c <tcp_process+0xfc>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	7d1b      	ldrb	r3, [r3, #20]
 801447e:	2b02      	cmp	r3, #2
 8014480:	d00c      	beq.n	801449c <tcp_process+0xfc>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	7d1b      	ldrb	r3, [r3, #20]
 8014486:	2b03      	cmp	r3, #3
 8014488:	d008      	beq.n	801449c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	8b5b      	ldrh	r3, [r3, #26]
 801448e:	f043 0302 	orr.w	r3, r3, #2
 8014492:	b29a      	uxth	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	e361      	b.n	8014b60 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	8b5b      	ldrh	r3, [r3, #26]
 80144a0:	f003 0310 	and.w	r3, r3, #16
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d103      	bne.n	80144b0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80144a8:	4b70      	ldr	r3, [pc, #448]	; (801466c <tcp_process+0x2cc>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f001 fc2d 	bl	8015d20 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	7d1b      	ldrb	r3, [r3, #20]
 80144ca:	3b02      	subs	r3, #2
 80144cc:	2b07      	cmp	r3, #7
 80144ce:	f200 8337 	bhi.w	8014b40 <tcp_process+0x7a0>
 80144d2:	a201      	add	r2, pc, #4	; (adr r2, 80144d8 <tcp_process+0x138>)
 80144d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d8:	080144f9 	.word	0x080144f9
 80144dc:	08014729 	.word	0x08014729
 80144e0:	080148a1 	.word	0x080148a1
 80144e4:	080148cb 	.word	0x080148cb
 80144e8:	080149ef 	.word	0x080149ef
 80144ec:	080148a1 	.word	0x080148a1
 80144f0:	08014a7b 	.word	0x08014a7b
 80144f4:	08014b0b 	.word	0x08014b0b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80144f8:	4b57      	ldr	r3, [pc, #348]	; (8014658 <tcp_process+0x2b8>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	f003 0310 	and.w	r3, r3, #16
 8014500:	2b00      	cmp	r3, #0
 8014502:	f000 80e4 	beq.w	80146ce <tcp_process+0x32e>
 8014506:	4b54      	ldr	r3, [pc, #336]	; (8014658 <tcp_process+0x2b8>)
 8014508:	781b      	ldrb	r3, [r3, #0]
 801450a:	f003 0302 	and.w	r3, r3, #2
 801450e:	2b00      	cmp	r3, #0
 8014510:	f000 80dd 	beq.w	80146ce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014518:	1c5a      	adds	r2, r3, #1
 801451a:	4b50      	ldr	r3, [pc, #320]	; (801465c <tcp_process+0x2bc>)
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	429a      	cmp	r2, r3
 8014520:	f040 80d5 	bne.w	80146ce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014524:	4b4e      	ldr	r3, [pc, #312]	; (8014660 <tcp_process+0x2c0>)
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014536:	4b49      	ldr	r3, [pc, #292]	; (801465c <tcp_process+0x2bc>)
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801453e:	4b4c      	ldr	r3, [pc, #304]	; (8014670 <tcp_process+0x2d0>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	89db      	ldrh	r3, [r3, #14]
 8014544:	b29a      	uxth	r2, r3
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014558:	4b41      	ldr	r3, [pc, #260]	; (8014660 <tcp_process+0x2c0>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	1e5a      	subs	r2, r3, #1
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2204      	movs	r2, #4
 8014566:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	3304      	adds	r3, #4
 8014570:	4618      	mov	r0, r3
 8014572:	f005 faa7 	bl	8019ac4 <ip4_route>
 8014576:	4601      	mov	r1, r0
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	3304      	adds	r3, #4
 801457c:	461a      	mov	r2, r3
 801457e:	4620      	mov	r0, r4
 8014580:	f7ff f88e 	bl	80136a0 <tcp_eff_send_mss_netif>
 8014584:	4603      	mov	r3, r0
 8014586:	461a      	mov	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014590:	009a      	lsls	r2, r3, #2
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014596:	005b      	lsls	r3, r3, #1
 8014598:	f241 111c 	movw	r1, #4380	; 0x111c
 801459c:	428b      	cmp	r3, r1
 801459e:	bf38      	it	cc
 80145a0:	460b      	movcc	r3, r1
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d204      	bcs.n	80145b0 <tcp_process+0x210>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145aa:	009b      	lsls	r3, r3, #2
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	e00d      	b.n	80145cc <tcp_process+0x22c>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145b4:	005b      	lsls	r3, r3, #1
 80145b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d904      	bls.n	80145c8 <tcp_process+0x228>
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145c2:	005b      	lsls	r3, r3, #1
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	e001      	b.n	80145cc <tcp_process+0x22c>
 80145c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d106      	bne.n	80145ea <tcp_process+0x24a>
 80145dc:	4b1b      	ldr	r3, [pc, #108]	; (801464c <tcp_process+0x2ac>)
 80145de:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80145e2:	4924      	ldr	r1, [pc, #144]	; (8014674 <tcp_process+0x2d4>)
 80145e4:	481b      	ldr	r0, [pc, #108]	; (8014654 <tcp_process+0x2b4>)
 80145e6:	f007 fb39 	bl	801bc5c <printf>
        --pcb->snd_queuelen;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80145f0:	3b01      	subs	r3, #1
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145fe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014600:	69fb      	ldr	r3, [r7, #28]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d111      	bne.n	801462a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801460a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d106      	bne.n	8014620 <tcp_process+0x280>
 8014612:	4b0e      	ldr	r3, [pc, #56]	; (801464c <tcp_process+0x2ac>)
 8014614:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014618:	4917      	ldr	r1, [pc, #92]	; (8014678 <tcp_process+0x2d8>)
 801461a:	480e      	ldr	r0, [pc, #56]	; (8014654 <tcp_process+0x2b4>)
 801461c:	f007 fb1e 	bl	801bc5c <printf>
          pcb->unsent = rseg->next;
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	66da      	str	r2, [r3, #108]	; 0x6c
 8014628:	e003      	b.n	8014632 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014632:	69f8      	ldr	r0, [r7, #28]
 8014634:	f7fe fc51 	bl	8012eda <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801463c:	2b00      	cmp	r3, #0
 801463e:	d11d      	bne.n	801467c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014646:	861a      	strh	r2, [r3, #48]	; 0x30
 8014648:	e01f      	b.n	801468a <tcp_process+0x2ea>
 801464a:	bf00      	nop
 801464c:	08026ba8 	.word	0x08026ba8
 8014650:	08026de0 	.word	0x08026de0
 8014654:	08026bf4 	.word	0x08026bf4
 8014658:	20004f38 	.word	0x20004f38
 801465c:	20004f30 	.word	0x20004f30
 8014660:	20004f2c 	.word	0x20004f2c
 8014664:	08026dfc 	.word	0x08026dfc
 8014668:	20004f39 	.word	0x20004f39
 801466c:	2000be58 	.word	0x2000be58
 8014670:	20004f1c 	.word	0x20004f1c
 8014674:	08026e1c 	.word	0x08026e1c
 8014678:	08026e34 	.word	0x08026e34
        } else {
          pcb->rtime = 0;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2200      	movs	r2, #0
 8014680:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2200      	movs	r2, #0
 8014686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014690:	2b00      	cmp	r3, #0
 8014692:	d00a      	beq.n	80146aa <tcp_process+0x30a>
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	6910      	ldr	r0, [r2, #16]
 801469e:	2200      	movs	r2, #0
 80146a0:	6879      	ldr	r1, [r7, #4]
 80146a2:	4798      	blx	r3
 80146a4:	4603      	mov	r3, r0
 80146a6:	76bb      	strb	r3, [r7, #26]
 80146a8:	e001      	b.n	80146ae <tcp_process+0x30e>
 80146aa:	2300      	movs	r3, #0
 80146ac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80146ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80146b2:	f113 0f0d 	cmn.w	r3, #13
 80146b6:	d102      	bne.n	80146be <tcp_process+0x31e>
          return ERR_ABRT;
 80146b8:	f06f 030c 	mvn.w	r3, #12
 80146bc:	e250      	b.n	8014b60 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	8b5b      	ldrh	r3, [r3, #26]
 80146c2:	f043 0302 	orr.w	r3, r3, #2
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80146cc:	e23a      	b.n	8014b44 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80146ce:	4b9d      	ldr	r3, [pc, #628]	; (8014944 <tcp_process+0x5a4>)
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	f003 0310 	and.w	r3, r3, #16
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	f000 8234 	beq.w	8014b44 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146dc:	4b9a      	ldr	r3, [pc, #616]	; (8014948 <tcp_process+0x5a8>)
 80146de:	6819      	ldr	r1, [r3, #0]
 80146e0:	4b9a      	ldr	r3, [pc, #616]	; (801494c <tcp_process+0x5ac>)
 80146e2:	881b      	ldrh	r3, [r3, #0]
 80146e4:	461a      	mov	r2, r3
 80146e6:	4b9a      	ldr	r3, [pc, #616]	; (8014950 <tcp_process+0x5b0>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146ec:	4b99      	ldr	r3, [pc, #612]	; (8014954 <tcp_process+0x5b4>)
 80146ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146f0:	885b      	ldrh	r3, [r3, #2]
 80146f2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146f4:	4a97      	ldr	r2, [pc, #604]	; (8014954 <tcp_process+0x5b4>)
 80146f6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146f8:	8812      	ldrh	r2, [r2, #0]
 80146fa:	b292      	uxth	r2, r2
 80146fc:	9202      	str	r2, [sp, #8]
 80146fe:	9301      	str	r3, [sp, #4]
 8014700:	4b95      	ldr	r3, [pc, #596]	; (8014958 <tcp_process+0x5b8>)
 8014702:	9300      	str	r3, [sp, #0]
 8014704:	4b95      	ldr	r3, [pc, #596]	; (801495c <tcp_process+0x5bc>)
 8014706:	4602      	mov	r2, r0
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f003 f8db 	bl	80178c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014714:	2b05      	cmp	r3, #5
 8014716:	f200 8215 	bhi.w	8014b44 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2200      	movs	r2, #0
 801471e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f002 fea5 	bl	8017470 <tcp_rexmit_rto>
      break;
 8014726:	e20d      	b.n	8014b44 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014728:	4b86      	ldr	r3, [pc, #536]	; (8014944 <tcp_process+0x5a4>)
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	f003 0310 	and.w	r3, r3, #16
 8014730:	2b00      	cmp	r3, #0
 8014732:	f000 80a1 	beq.w	8014878 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014736:	4b84      	ldr	r3, [pc, #528]	; (8014948 <tcp_process+0x5a8>)
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801473e:	1ad3      	subs	r3, r2, r3
 8014740:	3b01      	subs	r3, #1
 8014742:	2b00      	cmp	r3, #0
 8014744:	db7e      	blt.n	8014844 <tcp_process+0x4a4>
 8014746:	4b80      	ldr	r3, [pc, #512]	; (8014948 <tcp_process+0x5a8>)
 8014748:	681a      	ldr	r2, [r3, #0]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801474e:	1ad3      	subs	r3, r2, r3
 8014750:	2b00      	cmp	r3, #0
 8014752:	dc77      	bgt.n	8014844 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2204      	movs	r2, #4
 8014758:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801475e:	2b00      	cmp	r3, #0
 8014760:	d102      	bne.n	8014768 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014762:	23fa      	movs	r3, #250	; 0xfa
 8014764:	76bb      	strb	r3, [r7, #26]
 8014766:	e01d      	b.n	80147a4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801476c:	699b      	ldr	r3, [r3, #24]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d106      	bne.n	8014780 <tcp_process+0x3e0>
 8014772:	4b7b      	ldr	r3, [pc, #492]	; (8014960 <tcp_process+0x5c0>)
 8014774:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014778:	497a      	ldr	r1, [pc, #488]	; (8014964 <tcp_process+0x5c4>)
 801477a:	487b      	ldr	r0, [pc, #492]	; (8014968 <tcp_process+0x5c8>)
 801477c:	f007 fa6e 	bl	801bc5c <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014784:	699b      	ldr	r3, [r3, #24]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00a      	beq.n	80147a0 <tcp_process+0x400>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801478e:	699b      	ldr	r3, [r3, #24]
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	6910      	ldr	r0, [r2, #16]
 8014794:	2200      	movs	r2, #0
 8014796:	6879      	ldr	r1, [r7, #4]
 8014798:	4798      	blx	r3
 801479a:	4603      	mov	r3, r0
 801479c:	76bb      	strb	r3, [r7, #26]
 801479e:	e001      	b.n	80147a4 <tcp_process+0x404>
 80147a0:	23f0      	movs	r3, #240	; 0xf0
 80147a2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80147a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d00a      	beq.n	80147c2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80147ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80147b0:	f113 0f0d 	cmn.w	r3, #13
 80147b4:	d002      	beq.n	80147bc <tcp_process+0x41c>
              tcp_abort(pcb);
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7fd fcea 	bl	8012190 <tcp_abort>
            }
            return ERR_ABRT;
 80147bc:	f06f 030c 	mvn.w	r3, #12
 80147c0:	e1ce      	b.n	8014b60 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f000 fae0 	bl	8014d88 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80147c8:	4b68      	ldr	r3, [pc, #416]	; (801496c <tcp_process+0x5cc>)
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d005      	beq.n	80147dc <tcp_process+0x43c>
            recv_acked--;
 80147d0:	4b66      	ldr	r3, [pc, #408]	; (801496c <tcp_process+0x5cc>)
 80147d2:	881b      	ldrh	r3, [r3, #0]
 80147d4:	3b01      	subs	r3, #1
 80147d6:	b29a      	uxth	r2, r3
 80147d8:	4b64      	ldr	r3, [pc, #400]	; (801496c <tcp_process+0x5cc>)
 80147da:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147e0:	009a      	lsls	r2, r3, #2
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147e6:	005b      	lsls	r3, r3, #1
 80147e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80147ec:	428b      	cmp	r3, r1
 80147ee:	bf38      	it	cc
 80147f0:	460b      	movcc	r3, r1
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d204      	bcs.n	8014800 <tcp_process+0x460>
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	e00d      	b.n	801481c <tcp_process+0x47c>
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	f241 121c 	movw	r2, #4380	; 0x111c
 801480a:	4293      	cmp	r3, r2
 801480c:	d904      	bls.n	8014818 <tcp_process+0x478>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014812:	005b      	lsls	r3, r3, #1
 8014814:	b29b      	uxth	r3, r3
 8014816:	e001      	b.n	801481c <tcp_process+0x47c>
 8014818:	f241 131c 	movw	r3, #4380	; 0x111c
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014822:	4b53      	ldr	r3, [pc, #332]	; (8014970 <tcp_process+0x5d0>)
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	f003 0320 	and.w	r3, r3, #32
 801482a:	2b00      	cmp	r3, #0
 801482c:	d037      	beq.n	801489e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	8b5b      	ldrh	r3, [r3, #26]
 8014832:	f043 0302 	orr.w	r3, r3, #2
 8014836:	b29a      	uxth	r2, r3
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2207      	movs	r2, #7
 8014840:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014842:	e02c      	b.n	801489e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014844:	4b40      	ldr	r3, [pc, #256]	; (8014948 <tcp_process+0x5a8>)
 8014846:	6819      	ldr	r1, [r3, #0]
 8014848:	4b40      	ldr	r3, [pc, #256]	; (801494c <tcp_process+0x5ac>)
 801484a:	881b      	ldrh	r3, [r3, #0]
 801484c:	461a      	mov	r2, r3
 801484e:	4b40      	ldr	r3, [pc, #256]	; (8014950 <tcp_process+0x5b0>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014854:	4b3f      	ldr	r3, [pc, #252]	; (8014954 <tcp_process+0x5b4>)
 8014856:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014858:	885b      	ldrh	r3, [r3, #2]
 801485a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801485c:	4a3d      	ldr	r2, [pc, #244]	; (8014954 <tcp_process+0x5b4>)
 801485e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014860:	8812      	ldrh	r2, [r2, #0]
 8014862:	b292      	uxth	r2, r2
 8014864:	9202      	str	r2, [sp, #8]
 8014866:	9301      	str	r3, [sp, #4]
 8014868:	4b3b      	ldr	r3, [pc, #236]	; (8014958 <tcp_process+0x5b8>)
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	4b3b      	ldr	r3, [pc, #236]	; (801495c <tcp_process+0x5bc>)
 801486e:	4602      	mov	r2, r0
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f003 f827 	bl	80178c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014876:	e167      	b.n	8014b48 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014878:	4b32      	ldr	r3, [pc, #200]	; (8014944 <tcp_process+0x5a4>)
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	f003 0302 	and.w	r3, r3, #2
 8014880:	2b00      	cmp	r3, #0
 8014882:	f000 8161 	beq.w	8014b48 <tcp_process+0x7a8>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801488a:	1e5a      	subs	r2, r3, #1
 801488c:	4b30      	ldr	r3, [pc, #192]	; (8014950 <tcp_process+0x5b0>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	429a      	cmp	r2, r3
 8014892:	f040 8159 	bne.w	8014b48 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f002 fe0c 	bl	80174b4 <tcp_rexmit>
      break;
 801489c:	e154      	b.n	8014b48 <tcp_process+0x7a8>
 801489e:	e153      	b.n	8014b48 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 fa71 	bl	8014d88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80148a6:	4b32      	ldr	r3, [pc, #200]	; (8014970 <tcp_process+0x5d0>)
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	f003 0320 	and.w	r3, r3, #32
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	f000 814c 	beq.w	8014b4c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	8b5b      	ldrh	r3, [r3, #26]
 80148b8:	f043 0302 	orr.w	r3, r3, #2
 80148bc:	b29a      	uxth	r2, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2207      	movs	r2, #7
 80148c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80148c8:	e140      	b.n	8014b4c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 fa5c 	bl	8014d88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80148d0:	4b27      	ldr	r3, [pc, #156]	; (8014970 <tcp_process+0x5d0>)
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	f003 0320 	and.w	r3, r3, #32
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d071      	beq.n	80149c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148dc:	4b19      	ldr	r3, [pc, #100]	; (8014944 <tcp_process+0x5a4>)
 80148de:	781b      	ldrb	r3, [r3, #0]
 80148e0:	f003 0310 	and.w	r3, r3, #16
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d060      	beq.n	80149aa <tcp_process+0x60a>
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148ec:	4b16      	ldr	r3, [pc, #88]	; (8014948 <tcp_process+0x5a8>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d15a      	bne.n	80149aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d156      	bne.n	80149aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	8b5b      	ldrh	r3, [r3, #26]
 8014900:	f043 0302 	orr.w	r3, r3, #2
 8014904:	b29a      	uxth	r2, r3
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f7fe fdbe 	bl	801348c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014910:	4b18      	ldr	r3, [pc, #96]	; (8014974 <tcp_process+0x5d4>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	687a      	ldr	r2, [r7, #4]
 8014916:	429a      	cmp	r2, r3
 8014918:	d105      	bne.n	8014926 <tcp_process+0x586>
 801491a:	4b16      	ldr	r3, [pc, #88]	; (8014974 <tcp_process+0x5d4>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	4a14      	ldr	r2, [pc, #80]	; (8014974 <tcp_process+0x5d4>)
 8014922:	6013      	str	r3, [r2, #0]
 8014924:	e02e      	b.n	8014984 <tcp_process+0x5e4>
 8014926:	4b13      	ldr	r3, [pc, #76]	; (8014974 <tcp_process+0x5d4>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	617b      	str	r3, [r7, #20]
 801492c:	e027      	b.n	801497e <tcp_process+0x5de>
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	68db      	ldr	r3, [r3, #12]
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	429a      	cmp	r2, r3
 8014936:	d11f      	bne.n	8014978 <tcp_process+0x5d8>
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	68da      	ldr	r2, [r3, #12]
 801493c:	697b      	ldr	r3, [r7, #20]
 801493e:	60da      	str	r2, [r3, #12]
 8014940:	e020      	b.n	8014984 <tcp_process+0x5e4>
 8014942:	bf00      	nop
 8014944:	20004f38 	.word	0x20004f38
 8014948:	20004f30 	.word	0x20004f30
 801494c:	20004f36 	.word	0x20004f36
 8014950:	20004f2c 	.word	0x20004f2c
 8014954:	20004f1c 	.word	0x20004f1c
 8014958:	20008750 	.word	0x20008750
 801495c:	20008754 	.word	0x20008754
 8014960:	08026ba8 	.word	0x08026ba8
 8014964:	08026e48 	.word	0x08026e48
 8014968:	08026bf4 	.word	0x08026bf4
 801496c:	20004f34 	.word	0x20004f34
 8014970:	20004f39 	.word	0x20004f39
 8014974:	2000be54 	.word	0x2000be54
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	68db      	ldr	r3, [r3, #12]
 801497c:	617b      	str	r3, [r7, #20]
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d1d4      	bne.n	801492e <tcp_process+0x58e>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2200      	movs	r2, #0
 8014988:	60da      	str	r2, [r3, #12]
 801498a:	4b77      	ldr	r3, [pc, #476]	; (8014b68 <tcp_process+0x7c8>)
 801498c:	2201      	movs	r2, #1
 801498e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	220a      	movs	r2, #10
 8014994:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014996:	4b75      	ldr	r3, [pc, #468]	; (8014b6c <tcp_process+0x7cc>)
 8014998:	681a      	ldr	r2, [r3, #0]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	60da      	str	r2, [r3, #12]
 801499e:	4a73      	ldr	r2, [pc, #460]	; (8014b6c <tcp_process+0x7cc>)
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6013      	str	r3, [r2, #0]
 80149a4:	f003 f950 	bl	8017c48 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80149a8:	e0d2      	b.n	8014b50 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	8b5b      	ldrh	r3, [r3, #26]
 80149ae:	f043 0302 	orr.w	r3, r3, #2
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2208      	movs	r2, #8
 80149bc:	751a      	strb	r2, [r3, #20]
      break;
 80149be:	e0c7      	b.n	8014b50 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80149c0:	4b6b      	ldr	r3, [pc, #428]	; (8014b70 <tcp_process+0x7d0>)
 80149c2:	781b      	ldrb	r3, [r3, #0]
 80149c4:	f003 0310 	and.w	r3, r3, #16
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f000 80c1 	beq.w	8014b50 <tcp_process+0x7b0>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149d2:	4b68      	ldr	r3, [pc, #416]	; (8014b74 <tcp_process+0x7d4>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	f040 80ba 	bne.w	8014b50 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	f040 80b5 	bne.w	8014b50 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	2206      	movs	r2, #6
 80149ea:	751a      	strb	r2, [r3, #20]
      break;
 80149ec:	e0b0      	b.n	8014b50 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f000 f9ca 	bl	8014d88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80149f4:	4b60      	ldr	r3, [pc, #384]	; (8014b78 <tcp_process+0x7d8>)
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	f003 0320 	and.w	r3, r3, #32
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	f000 80a9 	beq.w	8014b54 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	8b5b      	ldrh	r3, [r3, #26]
 8014a06:	f043 0302 	orr.w	r3, r3, #2
 8014a0a:	b29a      	uxth	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7fe fd3b 	bl	801348c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014a16:	4b59      	ldr	r3, [pc, #356]	; (8014b7c <tcp_process+0x7dc>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d105      	bne.n	8014a2c <tcp_process+0x68c>
 8014a20:	4b56      	ldr	r3, [pc, #344]	; (8014b7c <tcp_process+0x7dc>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	68db      	ldr	r3, [r3, #12]
 8014a26:	4a55      	ldr	r2, [pc, #340]	; (8014b7c <tcp_process+0x7dc>)
 8014a28:	6013      	str	r3, [r2, #0]
 8014a2a:	e013      	b.n	8014a54 <tcp_process+0x6b4>
 8014a2c:	4b53      	ldr	r3, [pc, #332]	; (8014b7c <tcp_process+0x7dc>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	613b      	str	r3, [r7, #16]
 8014a32:	e00c      	b.n	8014a4e <tcp_process+0x6ae>
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	68db      	ldr	r3, [r3, #12]
 8014a38:	687a      	ldr	r2, [r7, #4]
 8014a3a:	429a      	cmp	r2, r3
 8014a3c:	d104      	bne.n	8014a48 <tcp_process+0x6a8>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	68da      	ldr	r2, [r3, #12]
 8014a42:	693b      	ldr	r3, [r7, #16]
 8014a44:	60da      	str	r2, [r3, #12]
 8014a46:	e005      	b.n	8014a54 <tcp_process+0x6b4>
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	613b      	str	r3, [r7, #16]
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d1ef      	bne.n	8014a34 <tcp_process+0x694>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2200      	movs	r2, #0
 8014a58:	60da      	str	r2, [r3, #12]
 8014a5a:	4b43      	ldr	r3, [pc, #268]	; (8014b68 <tcp_process+0x7c8>)
 8014a5c:	2201      	movs	r2, #1
 8014a5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	220a      	movs	r2, #10
 8014a64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014a66:	4b41      	ldr	r3, [pc, #260]	; (8014b6c <tcp_process+0x7cc>)
 8014a68:	681a      	ldr	r2, [r3, #0]
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	60da      	str	r2, [r3, #12]
 8014a6e:	4a3f      	ldr	r2, [pc, #252]	; (8014b6c <tcp_process+0x7cc>)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6013      	str	r3, [r2, #0]
 8014a74:	f003 f8e8 	bl	8017c48 <tcp_timer_needed>
      }
      break;
 8014a78:	e06c      	b.n	8014b54 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f000 f984 	bl	8014d88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014a80:	4b3b      	ldr	r3, [pc, #236]	; (8014b70 <tcp_process+0x7d0>)
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	f003 0310 	and.w	r3, r3, #16
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d065      	beq.n	8014b58 <tcp_process+0x7b8>
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a90:	4b38      	ldr	r3, [pc, #224]	; (8014b74 <tcp_process+0x7d4>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d15f      	bne.n	8014b58 <tcp_process+0x7b8>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d15b      	bne.n	8014b58 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f7fe fcf3 	bl	801348c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014aa6:	4b35      	ldr	r3, [pc, #212]	; (8014b7c <tcp_process+0x7dc>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d105      	bne.n	8014abc <tcp_process+0x71c>
 8014ab0:	4b32      	ldr	r3, [pc, #200]	; (8014b7c <tcp_process+0x7dc>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	68db      	ldr	r3, [r3, #12]
 8014ab6:	4a31      	ldr	r2, [pc, #196]	; (8014b7c <tcp_process+0x7dc>)
 8014ab8:	6013      	str	r3, [r2, #0]
 8014aba:	e013      	b.n	8014ae4 <tcp_process+0x744>
 8014abc:	4b2f      	ldr	r3, [pc, #188]	; (8014b7c <tcp_process+0x7dc>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	60fb      	str	r3, [r7, #12]
 8014ac2:	e00c      	b.n	8014ade <tcp_process+0x73e>
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	429a      	cmp	r2, r3
 8014acc:	d104      	bne.n	8014ad8 <tcp_process+0x738>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	68da      	ldr	r2, [r3, #12]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	60da      	str	r2, [r3, #12]
 8014ad6:	e005      	b.n	8014ae4 <tcp_process+0x744>
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	68db      	ldr	r3, [r3, #12]
 8014adc:	60fb      	str	r3, [r7, #12]
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1ef      	bne.n	8014ac4 <tcp_process+0x724>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	60da      	str	r2, [r3, #12]
 8014aea:	4b1f      	ldr	r3, [pc, #124]	; (8014b68 <tcp_process+0x7c8>)
 8014aec:	2201      	movs	r2, #1
 8014aee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	220a      	movs	r2, #10
 8014af4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014af6:	4b1d      	ldr	r3, [pc, #116]	; (8014b6c <tcp_process+0x7cc>)
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	60da      	str	r2, [r3, #12]
 8014afe:	4a1b      	ldr	r2, [pc, #108]	; (8014b6c <tcp_process+0x7cc>)
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6013      	str	r3, [r2, #0]
 8014b04:	f003 f8a0 	bl	8017c48 <tcp_timer_needed>
      }
      break;
 8014b08:	e026      	b.n	8014b58 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f000 f93c 	bl	8014d88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014b10:	4b17      	ldr	r3, [pc, #92]	; (8014b70 <tcp_process+0x7d0>)
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	f003 0310 	and.w	r3, r3, #16
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d01f      	beq.n	8014b5c <tcp_process+0x7bc>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b20:	4b14      	ldr	r3, [pc, #80]	; (8014b74 <tcp_process+0x7d4>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d119      	bne.n	8014b5c <tcp_process+0x7bc>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d115      	bne.n	8014b5c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014b30:	4b11      	ldr	r3, [pc, #68]	; (8014b78 <tcp_process+0x7d8>)
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	f043 0310 	orr.w	r3, r3, #16
 8014b38:	b2da      	uxtb	r2, r3
 8014b3a:	4b0f      	ldr	r3, [pc, #60]	; (8014b78 <tcp_process+0x7d8>)
 8014b3c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014b3e:	e00d      	b.n	8014b5c <tcp_process+0x7bc>
    default:
      break;
 8014b40:	bf00      	nop
 8014b42:	e00c      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b44:	bf00      	nop
 8014b46:	e00a      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b48:	bf00      	nop
 8014b4a:	e008      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b4c:	bf00      	nop
 8014b4e:	e006      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b50:	bf00      	nop
 8014b52:	e004      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b54:	bf00      	nop
 8014b56:	e002      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b58:	bf00      	nop
 8014b5a:	e000      	b.n	8014b5e <tcp_process+0x7be>
      break;
 8014b5c:	bf00      	nop
  }
  return ERR_OK;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3724      	adds	r7, #36	; 0x24
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd90      	pop	{r4, r7, pc}
 8014b68:	2000be50 	.word	0x2000be50
 8014b6c:	2000be64 	.word	0x2000be64
 8014b70:	20004f38 	.word	0x20004f38
 8014b74:	20004f30 	.word	0x20004f30
 8014b78:	20004f39 	.word	0x20004f39
 8014b7c:	2000be54 	.word	0x2000be54

08014b80 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014b80:	b590      	push	{r4, r7, lr}
 8014b82:	b085      	sub	sp, #20
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d106      	bne.n	8014b9e <tcp_oos_insert_segment+0x1e>
 8014b90:	4b3b      	ldr	r3, [pc, #236]	; (8014c80 <tcp_oos_insert_segment+0x100>)
 8014b92:	f240 421f 	movw	r2, #1055	; 0x41f
 8014b96:	493b      	ldr	r1, [pc, #236]	; (8014c84 <tcp_oos_insert_segment+0x104>)
 8014b98:	483b      	ldr	r0, [pc, #236]	; (8014c88 <tcp_oos_insert_segment+0x108>)
 8014b9a:	f007 f85f 	bl	801bc5c <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	899b      	ldrh	r3, [r3, #12]
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fb f936 	bl	800fe18 <lwip_htons>
 8014bac:	4603      	mov	r3, r0
 8014bae:	b2db      	uxtb	r3, r3
 8014bb0:	f003 0301 	and.w	r3, r3, #1
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d028      	beq.n	8014c0a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014bb8:	6838      	ldr	r0, [r7, #0]
 8014bba:	f7fe f979 	bl	8012eb0 <tcp_segs_free>
    next = NULL;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	603b      	str	r3, [r7, #0]
 8014bc2:	e056      	b.n	8014c72 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	899b      	ldrh	r3, [r3, #12]
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fb f923 	bl	800fe18 <lwip_htons>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	f003 0301 	and.w	r3, r3, #1
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d00d      	beq.n	8014bfa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	68db      	ldr	r3, [r3, #12]
 8014be2:	899b      	ldrh	r3, [r3, #12]
 8014be4:	b29c      	uxth	r4, r3
 8014be6:	2001      	movs	r0, #1
 8014be8:	f7fb f916 	bl	800fe18 <lwip_htons>
 8014bec:	4603      	mov	r3, r0
 8014bee:	461a      	mov	r2, r3
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	4322      	orrs	r2, r4
 8014bf6:	b292      	uxth	r2, r2
 8014bf8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014c04:	68f8      	ldr	r0, [r7, #12]
 8014c06:	f7fe f968 	bl	8012eda <tcp_seg_free>
    while (next &&
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00e      	beq.n	8014c2e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	891b      	ldrh	r3, [r3, #8]
 8014c14:	461a      	mov	r2, r3
 8014c16:	4b1d      	ldr	r3, [pc, #116]	; (8014c8c <tcp_oos_insert_segment+0x10c>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	441a      	add	r2, r3
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	6839      	ldr	r1, [r7, #0]
 8014c24:	8909      	ldrh	r1, [r1, #8]
 8014c26:	440b      	add	r3, r1
 8014c28:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	daca      	bge.n	8014bc4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d01e      	beq.n	8014c72 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	891b      	ldrh	r3, [r3, #8]
 8014c38:	461a      	mov	r2, r3
 8014c3a:	4b14      	ldr	r3, [pc, #80]	; (8014c8c <tcp_oos_insert_segment+0x10c>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	441a      	add	r2, r3
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	dd12      	ble.n	8014c72 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	b29a      	uxth	r2, r3
 8014c54:	4b0d      	ldr	r3, [pc, #52]	; (8014c8c <tcp_oos_insert_segment+0x10c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	685a      	ldr	r2, [r3, #4]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	891b      	ldrh	r3, [r3, #8]
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	4610      	mov	r0, r2
 8014c6e:	f7fc fb09 	bl	8011284 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	683a      	ldr	r2, [r7, #0]
 8014c76:	601a      	str	r2, [r3, #0]
}
 8014c78:	bf00      	nop
 8014c7a:	3714      	adds	r7, #20
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd90      	pop	{r4, r7, pc}
 8014c80:	08026ba8 	.word	0x08026ba8
 8014c84:	08026e68 	.word	0x08026e68
 8014c88:	08026bf4 	.word	0x08026bf4
 8014c8c:	20004f2c 	.word	0x20004f2c

08014c90 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014c90:	b5b0      	push	{r4, r5, r7, lr}
 8014c92:	b086      	sub	sp, #24
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	607a      	str	r2, [r7, #4]
 8014c9c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014c9e:	e03e      	b.n	8014d1e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fc fcfc 	bl	80116ac <pbuf_clen>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014cbe:	8a7a      	ldrh	r2, [r7, #18]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d906      	bls.n	8014cd2 <tcp_free_acked_segments+0x42>
 8014cc4:	4b2a      	ldr	r3, [pc, #168]	; (8014d70 <tcp_free_acked_segments+0xe0>)
 8014cc6:	f240 4257 	movw	r2, #1111	; 0x457
 8014cca:	492a      	ldr	r1, [pc, #168]	; (8014d74 <tcp_free_acked_segments+0xe4>)
 8014ccc:	482a      	ldr	r0, [pc, #168]	; (8014d78 <tcp_free_acked_segments+0xe8>)
 8014cce:	f006 ffc5 	bl	801bc5c <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014cd8:	8a7b      	ldrh	r3, [r7, #18]
 8014cda:	1ad3      	subs	r3, r2, r3
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	891a      	ldrh	r2, [r3, #8]
 8014ce8:	4b24      	ldr	r3, [pc, #144]	; (8014d7c <tcp_free_acked_segments+0xec>)
 8014cea:	881b      	ldrh	r3, [r3, #0]
 8014cec:	4413      	add	r3, r2
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	4b22      	ldr	r3, [pc, #136]	; (8014d7c <tcp_free_acked_segments+0xec>)
 8014cf2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014cf4:	6978      	ldr	r0, [r7, #20]
 8014cf6:	f7fe f8f0 	bl	8012eda <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d00c      	beq.n	8014d1e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d109      	bne.n	8014d1e <tcp_free_acked_segments+0x8e>
 8014d0a:	683b      	ldr	r3, [r7, #0]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d106      	bne.n	8014d1e <tcp_free_acked_segments+0x8e>
 8014d10:	4b17      	ldr	r3, [pc, #92]	; (8014d70 <tcp_free_acked_segments+0xe0>)
 8014d12:	f240 4261 	movw	r2, #1121	; 0x461
 8014d16:	491a      	ldr	r1, [pc, #104]	; (8014d80 <tcp_free_acked_segments+0xf0>)
 8014d18:	4817      	ldr	r0, [pc, #92]	; (8014d78 <tcp_free_acked_segments+0xe8>)
 8014d1a:	f006 ff9f 	bl	801bc5c <printf>
  while (seg_list != NULL &&
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d020      	beq.n	8014d66 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7fb f889 	bl	800fe42 <lwip_htonl>
 8014d30:	4604      	mov	r4, r0
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	891b      	ldrh	r3, [r3, #8]
 8014d36:	461d      	mov	r5, r3
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	899b      	ldrh	r3, [r3, #12]
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7fb f869 	bl	800fe18 <lwip_htons>
 8014d46:	4603      	mov	r3, r0
 8014d48:	b2db      	uxtb	r3, r3
 8014d4a:	f003 0303 	and.w	r3, r3, #3
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d001      	beq.n	8014d56 <tcp_free_acked_segments+0xc6>
 8014d52:	2301      	movs	r3, #1
 8014d54:	e000      	b.n	8014d58 <tcp_free_acked_segments+0xc8>
 8014d56:	2300      	movs	r3, #0
 8014d58:	442b      	add	r3, r5
 8014d5a:	18e2      	adds	r2, r4, r3
 8014d5c:	4b09      	ldr	r3, [pc, #36]	; (8014d84 <tcp_free_acked_segments+0xf4>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	dd9c      	ble.n	8014ca0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014d66:	68bb      	ldr	r3, [r7, #8]
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3718      	adds	r7, #24
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8014d70:	08026ba8 	.word	0x08026ba8
 8014d74:	08026e90 	.word	0x08026e90
 8014d78:	08026bf4 	.word	0x08026bf4
 8014d7c:	20004f34 	.word	0x20004f34
 8014d80:	08026eb8 	.word	0x08026eb8
 8014d84:	20004f30 	.word	0x20004f30

08014d88 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014d88:	b5b0      	push	{r4, r5, r7, lr}
 8014d8a:	b094      	sub	sp, #80	; 0x50
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014d90:	2300      	movs	r3, #0
 8014d92:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d106      	bne.n	8014da8 <tcp_receive+0x20>
 8014d9a:	4ba6      	ldr	r3, [pc, #664]	; (8015034 <tcp_receive+0x2ac>)
 8014d9c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014da0:	49a5      	ldr	r1, [pc, #660]	; (8015038 <tcp_receive+0x2b0>)
 8014da2:	48a6      	ldr	r0, [pc, #664]	; (801503c <tcp_receive+0x2b4>)
 8014da4:	f006 ff5a 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	7d1b      	ldrb	r3, [r3, #20]
 8014dac:	2b03      	cmp	r3, #3
 8014dae:	d806      	bhi.n	8014dbe <tcp_receive+0x36>
 8014db0:	4ba0      	ldr	r3, [pc, #640]	; (8015034 <tcp_receive+0x2ac>)
 8014db2:	f240 427c 	movw	r2, #1148	; 0x47c
 8014db6:	49a2      	ldr	r1, [pc, #648]	; (8015040 <tcp_receive+0x2b8>)
 8014db8:	48a0      	ldr	r0, [pc, #640]	; (801503c <tcp_receive+0x2b4>)
 8014dba:	f006 ff4f 	bl	801bc5c <printf>

  if (flags & TCP_ACK) {
 8014dbe:	4ba1      	ldr	r3, [pc, #644]	; (8015044 <tcp_receive+0x2bc>)
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	f003 0310 	and.w	r3, r3, #16
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	f000 8263 	beq.w	8015292 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014dd2:	461a      	mov	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014dd8:	4413      	add	r3, r2
 8014dda:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014de0:	4b99      	ldr	r3, [pc, #612]	; (8015048 <tcp_receive+0x2c0>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	db1b      	blt.n	8014e22 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014dee:	4b96      	ldr	r3, [pc, #600]	; (8015048 <tcp_receive+0x2c0>)
 8014df0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d106      	bne.n	8014e04 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014dfa:	4b94      	ldr	r3, [pc, #592]	; (801504c <tcp_receive+0x2c4>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	1ad3      	subs	r3, r2, r3
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	db0e      	blt.n	8014e22 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014e08:	4b90      	ldr	r3, [pc, #576]	; (801504c <tcp_receive+0x2c4>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d125      	bne.n	8014e5c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014e10:	4b8f      	ldr	r3, [pc, #572]	; (8015050 <tcp_receive+0x2c8>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	89db      	ldrh	r3, [r3, #14]
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d91c      	bls.n	8014e5c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014e22:	4b8b      	ldr	r3, [pc, #556]	; (8015050 <tcp_receive+0x2c8>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	89db      	ldrh	r3, [r3, #14]
 8014e28:	b29a      	uxth	r2, r3
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d205      	bcs.n	8014e4c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014e4c:	4b7e      	ldr	r3, [pc, #504]	; (8015048 <tcp_receive+0x2c0>)
 8014e4e:	681a      	ldr	r2, [r3, #0]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014e54:	4b7d      	ldr	r3, [pc, #500]	; (801504c <tcp_receive+0x2c4>)
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014e5c:	4b7b      	ldr	r3, [pc, #492]	; (801504c <tcp_receive+0x2c4>)
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e64:	1ad3      	subs	r3, r2, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	dc58      	bgt.n	8014f1c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014e6a:	4b7a      	ldr	r3, [pc, #488]	; (8015054 <tcp_receive+0x2cc>)
 8014e6c:	881b      	ldrh	r3, [r3, #0]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d14b      	bne.n	8014f0a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014e7c:	4413      	add	r3, r2
 8014e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d142      	bne.n	8014f0a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	db3d      	blt.n	8014f0a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014e92:	4b6e      	ldr	r3, [pc, #440]	; (801504c <tcp_receive+0x2c4>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	429a      	cmp	r2, r3
 8014e98:	d137      	bne.n	8014f0a <tcp_receive+0x182>
              found_dupack = 1;
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ea4:	2bff      	cmp	r3, #255	; 0xff
 8014ea6:	d007      	beq.n	8014eb8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014eae:	3301      	adds	r3, #1
 8014eb0:	b2da      	uxtb	r2, r3
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ebe:	2b03      	cmp	r3, #3
 8014ec0:	d91b      	bls.n	8014efa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ecc:	4413      	add	r3, r2
 8014ece:	b29a      	uxth	r2, r3
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ed6:	429a      	cmp	r2, r3
 8014ed8:	d30a      	bcc.n	8014ef0 <tcp_receive+0x168>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ee4:	4413      	add	r3, r2
 8014ee6:	b29a      	uxth	r2, r3
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014eee:	e004      	b.n	8014efa <tcp_receive+0x172>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014f00:	2b02      	cmp	r3, #2
 8014f02:	d902      	bls.n	8014f0a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f002 fb41 	bl	801758c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	f040 8160 	bne.w	80151d2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2200      	movs	r2, #0
 8014f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014f1a:	e15a      	b.n	80151d2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f1c:	4b4b      	ldr	r3, [pc, #300]	; (801504c <tcp_receive+0x2c4>)
 8014f1e:	681a      	ldr	r2, [r3, #0]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	3b01      	subs	r3, #1
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f2c0 814d 	blt.w	80151c8 <tcp_receive+0x440>
 8014f2e:	4b47      	ldr	r3, [pc, #284]	; (801504c <tcp_receive+0x2c4>)
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f300 8145 	bgt.w	80151c8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	8b5b      	ldrh	r3, [r3, #26]
 8014f42:	f003 0304 	and.w	r3, r3, #4
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d010      	beq.n	8014f6c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	8b5b      	ldrh	r3, [r3, #26]
 8014f4e:	f023 0304 	bic.w	r3, r3, #4
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2200      	movs	r2, #0
 8014f68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2200      	movs	r2, #0
 8014f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f7a:	10db      	asrs	r3, r3, #3
 8014f7c:	b21b      	sxth	r3, r3
 8014f7e:	b29a      	uxth	r2, r3
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	4413      	add	r3, r2
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	b21a      	sxth	r2, r3
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014f94:	4b2d      	ldr	r3, [pc, #180]	; (801504c <tcp_receive+0x2c4>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	b29a      	uxth	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f9e:	b29b      	uxth	r3, r3
 8014fa0:	1ad3      	subs	r3, r2, r3
 8014fa2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014fac:	4b27      	ldr	r3, [pc, #156]	; (801504c <tcp_receive+0x2c4>)
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	7d1b      	ldrb	r3, [r3, #20]
 8014fb8:	2b03      	cmp	r3, #3
 8014fba:	f240 8096 	bls.w	80150ea <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d244      	bcs.n	8015058 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	8b5b      	ldrh	r3, [r3, #26]
 8014fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d001      	beq.n	8014fde <tcp_receive+0x256>
 8014fda:	2301      	movs	r3, #1
 8014fdc:	e000      	b.n	8014fe0 <tcp_receive+0x258>
 8014fde:	2302      	movs	r3, #2
 8014fe0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014fe4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fee:	fb12 f303 	smulbb	r3, r2, r3
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	bf28      	it	cs
 8014ffa:	4613      	movcs	r3, r2
 8014ffc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015006:	4413      	add	r3, r2
 8015008:	b29a      	uxth	r2, r3
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015010:	429a      	cmp	r2, r3
 8015012:	d309      	bcc.n	8015028 <tcp_receive+0x2a0>
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801501a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801501c:	4413      	add	r3, r2
 801501e:	b29a      	uxth	r2, r3
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015026:	e060      	b.n	80150ea <tcp_receive+0x362>
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801502e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015032:	e05a      	b.n	80150ea <tcp_receive+0x362>
 8015034:	08026ba8 	.word	0x08026ba8
 8015038:	08026ed8 	.word	0x08026ed8
 801503c:	08026bf4 	.word	0x08026bf4
 8015040:	08026ef4 	.word	0x08026ef4
 8015044:	20004f38 	.word	0x20004f38
 8015048:	20004f2c 	.word	0x20004f2c
 801504c:	20004f30 	.word	0x20004f30
 8015050:	20004f1c 	.word	0x20004f1c
 8015054:	20004f36 	.word	0x20004f36
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801505e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015060:	4413      	add	r3, r2
 8015062:	b29a      	uxth	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801506a:	429a      	cmp	r2, r3
 801506c:	d309      	bcc.n	8015082 <tcp_receive+0x2fa>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015076:	4413      	add	r3, r2
 8015078:	b29a      	uxth	r2, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015080:	e004      	b.n	801508c <tcp_receive+0x304>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015098:	429a      	cmp	r2, r3
 801509a:	d326      	bcc.n	80150ea <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150a8:	1ad3      	subs	r3, r2, r3
 80150aa:	b29a      	uxth	r2, r3
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150bc:	4413      	add	r3, r2
 80150be:	b29a      	uxth	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d30a      	bcc.n	80150e0 <tcp_receive+0x358>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150d4:	4413      	add	r3, r2
 80150d6:	b29a      	uxth	r2, r3
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80150de:	e004      	b.n	80150ea <tcp_receive+0x362>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150f2:	4a98      	ldr	r2, [pc, #608]	; (8015354 <tcp_receive+0x5cc>)
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7ff fdcb 	bl	8014c90 <tcp_free_acked_segments>
 80150fa:	4602      	mov	r2, r0
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015108:	4a93      	ldr	r2, [pc, #588]	; (8015358 <tcp_receive+0x5d0>)
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff fdc0 	bl	8014c90 <tcp_free_acked_segments>
 8015110:	4602      	mov	r2, r0
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801511a:	2b00      	cmp	r3, #0
 801511c:	d104      	bne.n	8015128 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015124:	861a      	strh	r2, [r3, #48]	; 0x30
 8015126:	e002      	b.n	801512e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2200      	movs	r2, #0
 801512c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	2200      	movs	r2, #0
 8015132:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015138:	2b00      	cmp	r3, #0
 801513a:	d103      	bne.n	8015144 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801514a:	4b84      	ldr	r3, [pc, #528]	; (801535c <tcp_receive+0x5d4>)
 801514c:	881b      	ldrh	r3, [r3, #0]
 801514e:	4413      	add	r3, r2
 8015150:	b29a      	uxth	r2, r3
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	8b5b      	ldrh	r3, [r3, #26]
 801515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015160:	2b00      	cmp	r3, #0
 8015162:	d035      	beq.n	80151d0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015168:	2b00      	cmp	r3, #0
 801516a:	d118      	bne.n	801519e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015170:	2b00      	cmp	r3, #0
 8015172:	d00c      	beq.n	801518e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801517c:	68db      	ldr	r3, [r3, #12]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	4618      	mov	r0, r3
 8015182:	f7fa fe5e 	bl	800fe42 <lwip_htonl>
 8015186:	4603      	mov	r3, r0
 8015188:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801518a:	2b00      	cmp	r3, #0
 801518c:	dc20      	bgt.n	80151d0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	8b5b      	ldrh	r3, [r3, #26]
 8015192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015196:	b29a      	uxth	r2, r3
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801519c:	e018      	b.n	80151d0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151a6:	68db      	ldr	r3, [r3, #12]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7fa fe49 	bl	800fe42 <lwip_htonl>
 80151b0:	4603      	mov	r3, r0
 80151b2:	1ae3      	subs	r3, r4, r3
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	dc0b      	bgt.n	80151d0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	8b5b      	ldrh	r3, [r3, #26]
 80151bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151c6:	e003      	b.n	80151d0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f002 fbcd 	bl	8017968 <tcp_send_empty_ack>
 80151ce:	e000      	b.n	80151d2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80151d0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d05b      	beq.n	8015292 <tcp_receive+0x50a>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151de:	4b60      	ldr	r3, [pc, #384]	; (8015360 <tcp_receive+0x5d8>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	1ad3      	subs	r3, r2, r3
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	da54      	bge.n	8015292 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80151e8:	4b5e      	ldr	r3, [pc, #376]	; (8015364 <tcp_receive+0x5dc>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	b29a      	uxth	r2, r3
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151f2:	b29b      	uxth	r3, r3
 80151f4:	1ad3      	subs	r3, r2, r3
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80151fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015206:	10db      	asrs	r3, r3, #3
 8015208:	b21b      	sxth	r3, r3
 801520a:	b29b      	uxth	r3, r3
 801520c:	1ad3      	subs	r3, r2, r3
 801520e:	b29b      	uxth	r3, r3
 8015210:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801521a:	b29a      	uxth	r2, r3
 801521c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015220:	4413      	add	r3, r2
 8015222:	b29b      	uxth	r3, r3
 8015224:	b21a      	sxth	r2, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801522a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801522e:	2b00      	cmp	r3, #0
 8015230:	da05      	bge.n	801523e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8015232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015236:	425b      	negs	r3, r3
 8015238:	b29b      	uxth	r3, r3
 801523a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801523e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015248:	109b      	asrs	r3, r3, #2
 801524a:	b21b      	sxth	r3, r3
 801524c:	b29b      	uxth	r3, r3
 801524e:	1ad3      	subs	r3, r2, r3
 8015250:	b29b      	uxth	r3, r3
 8015252:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801525c:	b29a      	uxth	r2, r3
 801525e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015262:	4413      	add	r3, r2
 8015264:	b29b      	uxth	r3, r3
 8015266:	b21a      	sxth	r2, r3
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015272:	10db      	asrs	r3, r3, #3
 8015274:	b21b      	sxth	r3, r3
 8015276:	b29a      	uxth	r2, r3
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801527e:	b29b      	uxth	r3, r3
 8015280:	4413      	add	r3, r2
 8015282:	b29b      	uxth	r3, r3
 8015284:	b21a      	sxth	r2, r3
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	2200      	movs	r2, #0
 8015290:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015292:	4b35      	ldr	r3, [pc, #212]	; (8015368 <tcp_receive+0x5e0>)
 8015294:	881b      	ldrh	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	f000 84e1 	beq.w	8015c5e <tcp_receive+0xed6>
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	7d1b      	ldrb	r3, [r3, #20]
 80152a0:	2b06      	cmp	r3, #6
 80152a2:	f200 84dc 	bhi.w	8015c5e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152aa:	4b30      	ldr	r3, [pc, #192]	; (801536c <tcp_receive+0x5e4>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	1ad3      	subs	r3, r2, r3
 80152b0:	3b01      	subs	r3, #1
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f2c0 808e 	blt.w	80153d4 <tcp_receive+0x64c>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152bc:	4b2a      	ldr	r3, [pc, #168]	; (8015368 <tcp_receive+0x5e0>)
 80152be:	881b      	ldrh	r3, [r3, #0]
 80152c0:	4619      	mov	r1, r3
 80152c2:	4b2a      	ldr	r3, [pc, #168]	; (801536c <tcp_receive+0x5e4>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	440b      	add	r3, r1
 80152c8:	1ad3      	subs	r3, r2, r3
 80152ca:	3301      	adds	r3, #1
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	f300 8081 	bgt.w	80153d4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80152d2:	4b27      	ldr	r3, [pc, #156]	; (8015370 <tcp_receive+0x5e8>)
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152dc:	4b23      	ldr	r3, [pc, #140]	; (801536c <tcp_receive+0x5e4>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	1ad3      	subs	r3, r2, r3
 80152e2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80152e4:	4b22      	ldr	r3, [pc, #136]	; (8015370 <tcp_receive+0x5e8>)
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d106      	bne.n	80152fa <tcp_receive+0x572>
 80152ec:	4b21      	ldr	r3, [pc, #132]	; (8015374 <tcp_receive+0x5ec>)
 80152ee:	f240 5294 	movw	r2, #1428	; 0x594
 80152f2:	4921      	ldr	r1, [pc, #132]	; (8015378 <tcp_receive+0x5f0>)
 80152f4:	4821      	ldr	r0, [pc, #132]	; (801537c <tcp_receive+0x5f4>)
 80152f6:	f006 fcb1 	bl	801bc5c <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80152fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015300:	4293      	cmp	r3, r2
 8015302:	d906      	bls.n	8015312 <tcp_receive+0x58a>
 8015304:	4b1b      	ldr	r3, [pc, #108]	; (8015374 <tcp_receive+0x5ec>)
 8015306:	f240 5295 	movw	r2, #1429	; 0x595
 801530a:	491d      	ldr	r1, [pc, #116]	; (8015380 <tcp_receive+0x5f8>)
 801530c:	481b      	ldr	r0, [pc, #108]	; (801537c <tcp_receive+0x5f4>)
 801530e:	f006 fca5 	bl	801bc5c <printf>
      off = (u16_t)off32;
 8015312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015314:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015318:	4b15      	ldr	r3, [pc, #84]	; (8015370 <tcp_receive+0x5e8>)
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	891b      	ldrh	r3, [r3, #8]
 801531e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015322:	429a      	cmp	r2, r3
 8015324:	d906      	bls.n	8015334 <tcp_receive+0x5ac>
 8015326:	4b13      	ldr	r3, [pc, #76]	; (8015374 <tcp_receive+0x5ec>)
 8015328:	f240 5297 	movw	r2, #1431	; 0x597
 801532c:	4915      	ldr	r1, [pc, #84]	; (8015384 <tcp_receive+0x5fc>)
 801532e:	4813      	ldr	r0, [pc, #76]	; (801537c <tcp_receive+0x5f4>)
 8015330:	f006 fc94 	bl	801bc5c <printf>
      inseg.len -= off;
 8015334:	4b0e      	ldr	r3, [pc, #56]	; (8015370 <tcp_receive+0x5e8>)
 8015336:	891a      	ldrh	r2, [r3, #8]
 8015338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801533c:	1ad3      	subs	r3, r2, r3
 801533e:	b29a      	uxth	r2, r3
 8015340:	4b0b      	ldr	r3, [pc, #44]	; (8015370 <tcp_receive+0x5e8>)
 8015342:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015344:	4b0a      	ldr	r3, [pc, #40]	; (8015370 <tcp_receive+0x5e8>)
 8015346:	685b      	ldr	r3, [r3, #4]
 8015348:	891a      	ldrh	r2, [r3, #8]
 801534a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015352:	e029      	b.n	80153a8 <tcp_receive+0x620>
 8015354:	08026f10 	.word	0x08026f10
 8015358:	08026f18 	.word	0x08026f18
 801535c:	20004f34 	.word	0x20004f34
 8015360:	20004f30 	.word	0x20004f30
 8015364:	2000be58 	.word	0x2000be58
 8015368:	20004f36 	.word	0x20004f36
 801536c:	20004f2c 	.word	0x20004f2c
 8015370:	20004f0c 	.word	0x20004f0c
 8015374:	08026ba8 	.word	0x08026ba8
 8015378:	08026f20 	.word	0x08026f20
 801537c:	08026bf4 	.word	0x08026bf4
 8015380:	08026f30 	.word	0x08026f30
 8015384:	08026f40 	.word	0x08026f40
        off -= p->len;
 8015388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801538a:	895b      	ldrh	r3, [r3, #10]
 801538c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015398:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801539a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801539c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801539e:	2200      	movs	r2, #0
 80153a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80153a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80153a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153aa:	895b      	ldrh	r3, [r3, #10]
 80153ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d8e9      	bhi.n	8015388 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80153b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153b8:	4619      	mov	r1, r3
 80153ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80153bc:	f7fc f862 	bl	8011484 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153c4:	4a91      	ldr	r2, [pc, #580]	; (801560c <tcp_receive+0x884>)
 80153c6:	6013      	str	r3, [r2, #0]
 80153c8:	4b91      	ldr	r3, [pc, #580]	; (8015610 <tcp_receive+0x888>)
 80153ca:	68db      	ldr	r3, [r3, #12]
 80153cc:	4a8f      	ldr	r2, [pc, #572]	; (801560c <tcp_receive+0x884>)
 80153ce:	6812      	ldr	r2, [r2, #0]
 80153d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80153d2:	e00d      	b.n	80153f0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80153d4:	4b8d      	ldr	r3, [pc, #564]	; (801560c <tcp_receive+0x884>)
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153dc:	1ad3      	subs	r3, r2, r3
 80153de:	2b00      	cmp	r3, #0
 80153e0:	da06      	bge.n	80153f0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	8b5b      	ldrh	r3, [r3, #26]
 80153e6:	f043 0302 	orr.w	r3, r3, #2
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80153f0:	4b86      	ldr	r3, [pc, #536]	; (801560c <tcp_receive+0x884>)
 80153f2:	681a      	ldr	r2, [r3, #0]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f8:	1ad3      	subs	r3, r2, r3
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	f2c0 842a 	blt.w	8015c54 <tcp_receive+0xecc>
 8015400:	4b82      	ldr	r3, [pc, #520]	; (801560c <tcp_receive+0x884>)
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015408:	6879      	ldr	r1, [r7, #4]
 801540a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801540c:	440b      	add	r3, r1
 801540e:	1ad3      	subs	r3, r2, r3
 8015410:	3301      	adds	r3, #1
 8015412:	2b00      	cmp	r3, #0
 8015414:	f300 841e 	bgt.w	8015c54 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801541c:	4b7b      	ldr	r3, [pc, #492]	; (801560c <tcp_receive+0x884>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	429a      	cmp	r2, r3
 8015422:	f040 829a 	bne.w	801595a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015426:	4b7a      	ldr	r3, [pc, #488]	; (8015610 <tcp_receive+0x888>)
 8015428:	891c      	ldrh	r4, [r3, #8]
 801542a:	4b79      	ldr	r3, [pc, #484]	; (8015610 <tcp_receive+0x888>)
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	899b      	ldrh	r3, [r3, #12]
 8015430:	b29b      	uxth	r3, r3
 8015432:	4618      	mov	r0, r3
 8015434:	f7fa fcf0 	bl	800fe18 <lwip_htons>
 8015438:	4603      	mov	r3, r0
 801543a:	b2db      	uxtb	r3, r3
 801543c:	f003 0303 	and.w	r3, r3, #3
 8015440:	2b00      	cmp	r3, #0
 8015442:	d001      	beq.n	8015448 <tcp_receive+0x6c0>
 8015444:	2301      	movs	r3, #1
 8015446:	e000      	b.n	801544a <tcp_receive+0x6c2>
 8015448:	2300      	movs	r3, #0
 801544a:	4423      	add	r3, r4
 801544c:	b29a      	uxth	r2, r3
 801544e:	4b71      	ldr	r3, [pc, #452]	; (8015614 <tcp_receive+0x88c>)
 8015450:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015456:	4b6f      	ldr	r3, [pc, #444]	; (8015614 <tcp_receive+0x88c>)
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	429a      	cmp	r2, r3
 801545c:	d275      	bcs.n	801554a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801545e:	4b6c      	ldr	r3, [pc, #432]	; (8015610 <tcp_receive+0x888>)
 8015460:	68db      	ldr	r3, [r3, #12]
 8015462:	899b      	ldrh	r3, [r3, #12]
 8015464:	b29b      	uxth	r3, r3
 8015466:	4618      	mov	r0, r3
 8015468:	f7fa fcd6 	bl	800fe18 <lwip_htons>
 801546c:	4603      	mov	r3, r0
 801546e:	b2db      	uxtb	r3, r3
 8015470:	f003 0301 	and.w	r3, r3, #1
 8015474:	2b00      	cmp	r3, #0
 8015476:	d01f      	beq.n	80154b8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015478:	4b65      	ldr	r3, [pc, #404]	; (8015610 <tcp_receive+0x888>)
 801547a:	68db      	ldr	r3, [r3, #12]
 801547c:	899b      	ldrh	r3, [r3, #12]
 801547e:	b29b      	uxth	r3, r3
 8015480:	b21b      	sxth	r3, r3
 8015482:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015486:	b21c      	sxth	r4, r3
 8015488:	4b61      	ldr	r3, [pc, #388]	; (8015610 <tcp_receive+0x888>)
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	899b      	ldrh	r3, [r3, #12]
 801548e:	b29b      	uxth	r3, r3
 8015490:	4618      	mov	r0, r3
 8015492:	f7fa fcc1 	bl	800fe18 <lwip_htons>
 8015496:	4603      	mov	r3, r0
 8015498:	b2db      	uxtb	r3, r3
 801549a:	b29b      	uxth	r3, r3
 801549c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7fa fcb8 	bl	800fe18 <lwip_htons>
 80154a8:	4603      	mov	r3, r0
 80154aa:	b21b      	sxth	r3, r3
 80154ac:	4323      	orrs	r3, r4
 80154ae:	b21a      	sxth	r2, r3
 80154b0:	4b57      	ldr	r3, [pc, #348]	; (8015610 <tcp_receive+0x888>)
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	b292      	uxth	r2, r2
 80154b6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154bc:	4b54      	ldr	r3, [pc, #336]	; (8015610 <tcp_receive+0x888>)
 80154be:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80154c0:	4b53      	ldr	r3, [pc, #332]	; (8015610 <tcp_receive+0x888>)
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	899b      	ldrh	r3, [r3, #12]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7fa fca5 	bl	800fe18 <lwip_htons>
 80154ce:	4603      	mov	r3, r0
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	f003 0302 	and.w	r3, r3, #2
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d005      	beq.n	80154e6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80154da:	4b4d      	ldr	r3, [pc, #308]	; (8015610 <tcp_receive+0x888>)
 80154dc:	891b      	ldrh	r3, [r3, #8]
 80154de:	3b01      	subs	r3, #1
 80154e0:	b29a      	uxth	r2, r3
 80154e2:	4b4b      	ldr	r3, [pc, #300]	; (8015610 <tcp_receive+0x888>)
 80154e4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80154e6:	4b4a      	ldr	r3, [pc, #296]	; (8015610 <tcp_receive+0x888>)
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	4a49      	ldr	r2, [pc, #292]	; (8015610 <tcp_receive+0x888>)
 80154ec:	8912      	ldrh	r2, [r2, #8]
 80154ee:	4611      	mov	r1, r2
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fb fec7 	bl	8011284 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80154f6:	4b46      	ldr	r3, [pc, #280]	; (8015610 <tcp_receive+0x888>)
 80154f8:	891c      	ldrh	r4, [r3, #8]
 80154fa:	4b45      	ldr	r3, [pc, #276]	; (8015610 <tcp_receive+0x888>)
 80154fc:	68db      	ldr	r3, [r3, #12]
 80154fe:	899b      	ldrh	r3, [r3, #12]
 8015500:	b29b      	uxth	r3, r3
 8015502:	4618      	mov	r0, r3
 8015504:	f7fa fc88 	bl	800fe18 <lwip_htons>
 8015508:	4603      	mov	r3, r0
 801550a:	b2db      	uxtb	r3, r3
 801550c:	f003 0303 	and.w	r3, r3, #3
 8015510:	2b00      	cmp	r3, #0
 8015512:	d001      	beq.n	8015518 <tcp_receive+0x790>
 8015514:	2301      	movs	r3, #1
 8015516:	e000      	b.n	801551a <tcp_receive+0x792>
 8015518:	2300      	movs	r3, #0
 801551a:	4423      	add	r3, r4
 801551c:	b29a      	uxth	r2, r3
 801551e:	4b3d      	ldr	r3, [pc, #244]	; (8015614 <tcp_receive+0x88c>)
 8015520:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015522:	4b3c      	ldr	r3, [pc, #240]	; (8015614 <tcp_receive+0x88c>)
 8015524:	881b      	ldrh	r3, [r3, #0]
 8015526:	461a      	mov	r2, r3
 8015528:	4b38      	ldr	r3, [pc, #224]	; (801560c <tcp_receive+0x884>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	441a      	add	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015532:	6879      	ldr	r1, [r7, #4]
 8015534:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015536:	440b      	add	r3, r1
 8015538:	429a      	cmp	r2, r3
 801553a:	d006      	beq.n	801554a <tcp_receive+0x7c2>
 801553c:	4b36      	ldr	r3, [pc, #216]	; (8015618 <tcp_receive+0x890>)
 801553e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015542:	4936      	ldr	r1, [pc, #216]	; (801561c <tcp_receive+0x894>)
 8015544:	4836      	ldr	r0, [pc, #216]	; (8015620 <tcp_receive+0x898>)
 8015546:	f006 fb89 	bl	801bc5c <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801554e:	2b00      	cmp	r3, #0
 8015550:	f000 80e7 	beq.w	8015722 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015554:	4b2e      	ldr	r3, [pc, #184]	; (8015610 <tcp_receive+0x888>)
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	899b      	ldrh	r3, [r3, #12]
 801555a:	b29b      	uxth	r3, r3
 801555c:	4618      	mov	r0, r3
 801555e:	f7fa fc5b 	bl	800fe18 <lwip_htons>
 8015562:	4603      	mov	r3, r0
 8015564:	b2db      	uxtb	r3, r3
 8015566:	f003 0301 	and.w	r3, r3, #1
 801556a:	2b00      	cmp	r3, #0
 801556c:	d010      	beq.n	8015590 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801556e:	e00a      	b.n	8015586 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015574:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	f7fd fcaa 	bl	8012eda <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801558a:	2b00      	cmp	r3, #0
 801558c:	d1f0      	bne.n	8015570 <tcp_receive+0x7e8>
 801558e:	e0c8      	b.n	8015722 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015594:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015596:	e052      	b.n	801563e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	899b      	ldrh	r3, [r3, #12]
 801559e:	b29b      	uxth	r3, r3
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fa fc39 	bl	800fe18 <lwip_htons>
 80155a6:	4603      	mov	r3, r0
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	f003 0301 	and.w	r3, r3, #1
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d03d      	beq.n	801562e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80155b2:	4b17      	ldr	r3, [pc, #92]	; (8015610 <tcp_receive+0x888>)
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	899b      	ldrh	r3, [r3, #12]
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fa fc2c 	bl	800fe18 <lwip_htons>
 80155c0:	4603      	mov	r3, r0
 80155c2:	b2db      	uxtb	r3, r3
 80155c4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d130      	bne.n	801562e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80155cc:	4b10      	ldr	r3, [pc, #64]	; (8015610 <tcp_receive+0x888>)
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	899b      	ldrh	r3, [r3, #12]
 80155d2:	b29c      	uxth	r4, r3
 80155d4:	2001      	movs	r0, #1
 80155d6:	f7fa fc1f 	bl	800fe18 <lwip_htons>
 80155da:	4603      	mov	r3, r0
 80155dc:	461a      	mov	r2, r3
 80155de:	4b0c      	ldr	r3, [pc, #48]	; (8015610 <tcp_receive+0x888>)
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	4322      	orrs	r2, r4
 80155e4:	b292      	uxth	r2, r2
 80155e6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80155e8:	4b09      	ldr	r3, [pc, #36]	; (8015610 <tcp_receive+0x888>)
 80155ea:	891c      	ldrh	r4, [r3, #8]
 80155ec:	4b08      	ldr	r3, [pc, #32]	; (8015610 <tcp_receive+0x888>)
 80155ee:	68db      	ldr	r3, [r3, #12]
 80155f0:	899b      	ldrh	r3, [r3, #12]
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fa fc0f 	bl	800fe18 <lwip_htons>
 80155fa:	4603      	mov	r3, r0
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	f003 0303 	and.w	r3, r3, #3
 8015602:	2b00      	cmp	r3, #0
 8015604:	d00e      	beq.n	8015624 <tcp_receive+0x89c>
 8015606:	2301      	movs	r3, #1
 8015608:	e00d      	b.n	8015626 <tcp_receive+0x89e>
 801560a:	bf00      	nop
 801560c:	20004f2c 	.word	0x20004f2c
 8015610:	20004f0c 	.word	0x20004f0c
 8015614:	20004f36 	.word	0x20004f36
 8015618:	08026ba8 	.word	0x08026ba8
 801561c:	08026f50 	.word	0x08026f50
 8015620:	08026bf4 	.word	0x08026bf4
 8015624:	2300      	movs	r3, #0
 8015626:	4423      	add	r3, r4
 8015628:	b29a      	uxth	r2, r3
 801562a:	4b98      	ldr	r3, [pc, #608]	; (801588c <tcp_receive+0xb04>)
 801562c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015630:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015638:	6938      	ldr	r0, [r7, #16]
 801563a:	f7fd fc4e 	bl	8012eda <tcp_seg_free>
            while (next &&
 801563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015640:	2b00      	cmp	r3, #0
 8015642:	d00e      	beq.n	8015662 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015644:	4b91      	ldr	r3, [pc, #580]	; (801588c <tcp_receive+0xb04>)
 8015646:	881b      	ldrh	r3, [r3, #0]
 8015648:	461a      	mov	r2, r3
 801564a:	4b91      	ldr	r3, [pc, #580]	; (8015890 <tcp_receive+0xb08>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	441a      	add	r2, r3
 8015650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015658:	8909      	ldrh	r1, [r1, #8]
 801565a:	440b      	add	r3, r1
 801565c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801565e:	2b00      	cmp	r3, #0
 8015660:	da9a      	bge.n	8015598 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015664:	2b00      	cmp	r3, #0
 8015666:	d059      	beq.n	801571c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015668:	4b88      	ldr	r3, [pc, #544]	; (801588c <tcp_receive+0xb04>)
 801566a:	881b      	ldrh	r3, [r3, #0]
 801566c:	461a      	mov	r2, r3
 801566e:	4b88      	ldr	r3, [pc, #544]	; (8015890 <tcp_receive+0xb08>)
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	441a      	add	r2, r3
 8015674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801567c:	2b00      	cmp	r3, #0
 801567e:	dd4d      	ble.n	801571c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015682:	68db      	ldr	r3, [r3, #12]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	b29a      	uxth	r2, r3
 8015688:	4b81      	ldr	r3, [pc, #516]	; (8015890 <tcp_receive+0xb08>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	b29b      	uxth	r3, r3
 801568e:	1ad3      	subs	r3, r2, r3
 8015690:	b29a      	uxth	r2, r3
 8015692:	4b80      	ldr	r3, [pc, #512]	; (8015894 <tcp_receive+0xb0c>)
 8015694:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015696:	4b7f      	ldr	r3, [pc, #508]	; (8015894 <tcp_receive+0xb0c>)
 8015698:	68db      	ldr	r3, [r3, #12]
 801569a:	899b      	ldrh	r3, [r3, #12]
 801569c:	b29b      	uxth	r3, r3
 801569e:	4618      	mov	r0, r3
 80156a0:	f7fa fbba 	bl	800fe18 <lwip_htons>
 80156a4:	4603      	mov	r3, r0
 80156a6:	b2db      	uxtb	r3, r3
 80156a8:	f003 0302 	and.w	r3, r3, #2
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d005      	beq.n	80156bc <tcp_receive+0x934>
                inseg.len -= 1;
 80156b0:	4b78      	ldr	r3, [pc, #480]	; (8015894 <tcp_receive+0xb0c>)
 80156b2:	891b      	ldrh	r3, [r3, #8]
 80156b4:	3b01      	subs	r3, #1
 80156b6:	b29a      	uxth	r2, r3
 80156b8:	4b76      	ldr	r3, [pc, #472]	; (8015894 <tcp_receive+0xb0c>)
 80156ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80156bc:	4b75      	ldr	r3, [pc, #468]	; (8015894 <tcp_receive+0xb0c>)
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	4a74      	ldr	r2, [pc, #464]	; (8015894 <tcp_receive+0xb0c>)
 80156c2:	8912      	ldrh	r2, [r2, #8]
 80156c4:	4611      	mov	r1, r2
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7fb fddc 	bl	8011284 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80156cc:	4b71      	ldr	r3, [pc, #452]	; (8015894 <tcp_receive+0xb0c>)
 80156ce:	891c      	ldrh	r4, [r3, #8]
 80156d0:	4b70      	ldr	r3, [pc, #448]	; (8015894 <tcp_receive+0xb0c>)
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	899b      	ldrh	r3, [r3, #12]
 80156d6:	b29b      	uxth	r3, r3
 80156d8:	4618      	mov	r0, r3
 80156da:	f7fa fb9d 	bl	800fe18 <lwip_htons>
 80156de:	4603      	mov	r3, r0
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	f003 0303 	and.w	r3, r3, #3
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d001      	beq.n	80156ee <tcp_receive+0x966>
 80156ea:	2301      	movs	r3, #1
 80156ec:	e000      	b.n	80156f0 <tcp_receive+0x968>
 80156ee:	2300      	movs	r3, #0
 80156f0:	4423      	add	r3, r4
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	4b65      	ldr	r3, [pc, #404]	; (801588c <tcp_receive+0xb04>)
 80156f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80156f8:	4b64      	ldr	r3, [pc, #400]	; (801588c <tcp_receive+0xb04>)
 80156fa:	881b      	ldrh	r3, [r3, #0]
 80156fc:	461a      	mov	r2, r3
 80156fe:	4b64      	ldr	r3, [pc, #400]	; (8015890 <tcp_receive+0xb08>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	441a      	add	r2, r3
 8015704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	685b      	ldr	r3, [r3, #4]
 801570a:	429a      	cmp	r2, r3
 801570c:	d006      	beq.n	801571c <tcp_receive+0x994>
 801570e:	4b62      	ldr	r3, [pc, #392]	; (8015898 <tcp_receive+0xb10>)
 8015710:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015714:	4961      	ldr	r1, [pc, #388]	; (801589c <tcp_receive+0xb14>)
 8015716:	4862      	ldr	r0, [pc, #392]	; (80158a0 <tcp_receive+0xb18>)
 8015718:	f006 faa0 	bl	801bc5c <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015720:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015722:	4b5a      	ldr	r3, [pc, #360]	; (801588c <tcp_receive+0xb04>)
 8015724:	881b      	ldrh	r3, [r3, #0]
 8015726:	461a      	mov	r2, r3
 8015728:	4b59      	ldr	r3, [pc, #356]	; (8015890 <tcp_receive+0xb08>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	441a      	add	r2, r3
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015736:	4b55      	ldr	r3, [pc, #340]	; (801588c <tcp_receive+0xb04>)
 8015738:	881b      	ldrh	r3, [r3, #0]
 801573a:	429a      	cmp	r2, r3
 801573c:	d206      	bcs.n	801574c <tcp_receive+0x9c4>
 801573e:	4b56      	ldr	r3, [pc, #344]	; (8015898 <tcp_receive+0xb10>)
 8015740:	f240 6207 	movw	r2, #1543	; 0x607
 8015744:	4957      	ldr	r1, [pc, #348]	; (80158a4 <tcp_receive+0xb1c>)
 8015746:	4856      	ldr	r0, [pc, #344]	; (80158a0 <tcp_receive+0xb18>)
 8015748:	f006 fa88 	bl	801bc5c <printf>
        pcb->rcv_wnd -= tcplen;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015750:	4b4e      	ldr	r3, [pc, #312]	; (801588c <tcp_receive+0xb04>)
 8015752:	881b      	ldrh	r3, [r3, #0]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	b29a      	uxth	r2, r3
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7fc fe97 	bl	8012490 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015762:	4b4c      	ldr	r3, [pc, #304]	; (8015894 <tcp_receive+0xb0c>)
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	891b      	ldrh	r3, [r3, #8]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d006      	beq.n	801577a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801576c:	4b49      	ldr	r3, [pc, #292]	; (8015894 <tcp_receive+0xb0c>)
 801576e:	685b      	ldr	r3, [r3, #4]
 8015770:	4a4d      	ldr	r2, [pc, #308]	; (80158a8 <tcp_receive+0xb20>)
 8015772:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015774:	4b47      	ldr	r3, [pc, #284]	; (8015894 <tcp_receive+0xb0c>)
 8015776:	2200      	movs	r2, #0
 8015778:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801577a:	4b46      	ldr	r3, [pc, #280]	; (8015894 <tcp_receive+0xb0c>)
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	899b      	ldrh	r3, [r3, #12]
 8015780:	b29b      	uxth	r3, r3
 8015782:	4618      	mov	r0, r3
 8015784:	f7fa fb48 	bl	800fe18 <lwip_htons>
 8015788:	4603      	mov	r3, r0
 801578a:	b2db      	uxtb	r3, r3
 801578c:	f003 0301 	and.w	r3, r3, #1
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 80b8 	beq.w	8015906 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015796:	4b45      	ldr	r3, [pc, #276]	; (80158ac <tcp_receive+0xb24>)
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	f043 0320 	orr.w	r3, r3, #32
 801579e:	b2da      	uxtb	r2, r3
 80157a0:	4b42      	ldr	r3, [pc, #264]	; (80158ac <tcp_receive+0xb24>)
 80157a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80157a4:	e0af      	b.n	8015906 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	685b      	ldr	r3, [r3, #4]
 80157b4:	4a36      	ldr	r2, [pc, #216]	; (8015890 <tcp_receive+0xb08>)
 80157b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	891b      	ldrh	r3, [r3, #8]
 80157bc:	461c      	mov	r4, r3
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	899b      	ldrh	r3, [r3, #12]
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	4618      	mov	r0, r3
 80157c8:	f7fa fb26 	bl	800fe18 <lwip_htons>
 80157cc:	4603      	mov	r3, r0
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	f003 0303 	and.w	r3, r3, #3
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d001      	beq.n	80157dc <tcp_receive+0xa54>
 80157d8:	2301      	movs	r3, #1
 80157da:	e000      	b.n	80157de <tcp_receive+0xa56>
 80157dc:	2300      	movs	r3, #0
 80157de:	191a      	adds	r2, r3, r4
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e4:	441a      	add	r2, r3
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157ee:	461c      	mov	r4, r3
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	891b      	ldrh	r3, [r3, #8]
 80157f4:	461d      	mov	r5, r3
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	899b      	ldrh	r3, [r3, #12]
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	4618      	mov	r0, r3
 8015800:	f7fa fb0a 	bl	800fe18 <lwip_htons>
 8015804:	4603      	mov	r3, r0
 8015806:	b2db      	uxtb	r3, r3
 8015808:	f003 0303 	and.w	r3, r3, #3
 801580c:	2b00      	cmp	r3, #0
 801580e:	d001      	beq.n	8015814 <tcp_receive+0xa8c>
 8015810:	2301      	movs	r3, #1
 8015812:	e000      	b.n	8015816 <tcp_receive+0xa8e>
 8015814:	2300      	movs	r3, #0
 8015816:	442b      	add	r3, r5
 8015818:	429c      	cmp	r4, r3
 801581a:	d206      	bcs.n	801582a <tcp_receive+0xaa2>
 801581c:	4b1e      	ldr	r3, [pc, #120]	; (8015898 <tcp_receive+0xb10>)
 801581e:	f240 622b 	movw	r2, #1579	; 0x62b
 8015822:	4923      	ldr	r1, [pc, #140]	; (80158b0 <tcp_receive+0xb28>)
 8015824:	481e      	ldr	r0, [pc, #120]	; (80158a0 <tcp_receive+0xb18>)
 8015826:	f006 fa19 	bl	801bc5c <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	891b      	ldrh	r3, [r3, #8]
 801582e:	461c      	mov	r4, r3
 8015830:	68bb      	ldr	r3, [r7, #8]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	899b      	ldrh	r3, [r3, #12]
 8015836:	b29b      	uxth	r3, r3
 8015838:	4618      	mov	r0, r3
 801583a:	f7fa faed 	bl	800fe18 <lwip_htons>
 801583e:	4603      	mov	r3, r0
 8015840:	b2db      	uxtb	r3, r3
 8015842:	f003 0303 	and.w	r3, r3, #3
 8015846:	2b00      	cmp	r3, #0
 8015848:	d001      	beq.n	801584e <tcp_receive+0xac6>
 801584a:	2301      	movs	r3, #1
 801584c:	e000      	b.n	8015850 <tcp_receive+0xac8>
 801584e:	2300      	movs	r3, #0
 8015850:	1919      	adds	r1, r3, r4
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015856:	b28b      	uxth	r3, r1
 8015858:	1ad3      	subs	r3, r2, r3
 801585a:	b29a      	uxth	r2, r3
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015860:	6878      	ldr	r0, [r7, #4]
 8015862:	f7fc fe15 	bl	8012490 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	891b      	ldrh	r3, [r3, #8]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d028      	beq.n	80158c2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015870:	4b0d      	ldr	r3, [pc, #52]	; (80158a8 <tcp_receive+0xb20>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d01d      	beq.n	80158b4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015878:	4b0b      	ldr	r3, [pc, #44]	; (80158a8 <tcp_receive+0xb20>)
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	4619      	mov	r1, r3
 8015882:	4610      	mov	r0, r2
 8015884:	f7fb ff52 	bl	801172c <pbuf_cat>
 8015888:	e018      	b.n	80158bc <tcp_receive+0xb34>
 801588a:	bf00      	nop
 801588c:	20004f36 	.word	0x20004f36
 8015890:	20004f2c 	.word	0x20004f2c
 8015894:	20004f0c 	.word	0x20004f0c
 8015898:	08026ba8 	.word	0x08026ba8
 801589c:	08026f88 	.word	0x08026f88
 80158a0:	08026bf4 	.word	0x08026bf4
 80158a4:	08026fc4 	.word	0x08026fc4
 80158a8:	20004f3c 	.word	0x20004f3c
 80158ac:	20004f39 	.word	0x20004f39
 80158b0:	08026fe4 	.word	0x08026fe4
            } else {
              recv_data = cseg->p;
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	4a70      	ldr	r2, [pc, #448]	; (8015a7c <tcp_receive+0xcf4>)
 80158ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	2200      	movs	r2, #0
 80158c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	68db      	ldr	r3, [r3, #12]
 80158c6:	899b      	ldrh	r3, [r3, #12]
 80158c8:	b29b      	uxth	r3, r3
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7fa faa4 	bl	800fe18 <lwip_htons>
 80158d0:	4603      	mov	r3, r0
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	f003 0301 	and.w	r3, r3, #1
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d00d      	beq.n	80158f8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80158dc:	4b68      	ldr	r3, [pc, #416]	; (8015a80 <tcp_receive+0xcf8>)
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	f043 0320 	orr.w	r3, r3, #32
 80158e4:	b2da      	uxtb	r2, r3
 80158e6:	4b66      	ldr	r3, [pc, #408]	; (8015a80 <tcp_receive+0xcf8>)
 80158e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	7d1b      	ldrb	r3, [r3, #20]
 80158ee:	2b04      	cmp	r3, #4
 80158f0:	d102      	bne.n	80158f8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2207      	movs	r2, #7
 80158f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	681a      	ldr	r2, [r3, #0]
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015900:	68b8      	ldr	r0, [r7, #8]
 8015902:	f7fd faea 	bl	8012eda <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801590a:	2b00      	cmp	r3, #0
 801590c:	d008      	beq.n	8015920 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015912:	68db      	ldr	r3, [r3, #12]
 8015914:	685a      	ldr	r2, [r3, #4]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801591a:	429a      	cmp	r2, r3
 801591c:	f43f af43 	beq.w	80157a6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	8b5b      	ldrh	r3, [r3, #26]
 8015924:	f003 0301 	and.w	r3, r3, #1
 8015928:	2b00      	cmp	r3, #0
 801592a:	d00e      	beq.n	801594a <tcp_receive+0xbc2>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	8b5b      	ldrh	r3, [r3, #26]
 8015930:	f023 0301 	bic.w	r3, r3, #1
 8015934:	b29a      	uxth	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	835a      	strh	r2, [r3, #26]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	8b5b      	ldrh	r3, [r3, #26]
 801593e:	f043 0302 	orr.w	r3, r3, #2
 8015942:	b29a      	uxth	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015948:	e188      	b.n	8015c5c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	8b5b      	ldrh	r3, [r3, #26]
 801594e:	f043 0301 	orr.w	r3, r3, #1
 8015952:	b29a      	uxth	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015958:	e180      	b.n	8015c5c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801595e:	2b00      	cmp	r3, #0
 8015960:	d106      	bne.n	8015970 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015962:	4848      	ldr	r0, [pc, #288]	; (8015a84 <tcp_receive+0xcfc>)
 8015964:	f7fd faf0 	bl	8012f48 <tcp_seg_copy>
 8015968:	4602      	mov	r2, r0
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	675a      	str	r2, [r3, #116]	; 0x74
 801596e:	e16d      	b.n	8015c4c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015970:	2300      	movs	r3, #0
 8015972:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015978:	63bb      	str	r3, [r7, #56]	; 0x38
 801597a:	e157      	b.n	8015c2c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	685a      	ldr	r2, [r3, #4]
 8015982:	4b41      	ldr	r3, [pc, #260]	; (8015a88 <tcp_receive+0xd00>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	429a      	cmp	r2, r3
 8015988:	d11d      	bne.n	80159c6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801598a:	4b3e      	ldr	r3, [pc, #248]	; (8015a84 <tcp_receive+0xcfc>)
 801598c:	891a      	ldrh	r2, [r3, #8]
 801598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015990:	891b      	ldrh	r3, [r3, #8]
 8015992:	429a      	cmp	r2, r3
 8015994:	f240 814f 	bls.w	8015c36 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015998:	483a      	ldr	r0, [pc, #232]	; (8015a84 <tcp_receive+0xcfc>)
 801599a:	f7fd fad5 	bl	8012f48 <tcp_seg_copy>
 801599e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	f000 8149 	beq.w	8015c3a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80159a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d003      	beq.n	80159b6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80159ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159b0:	697a      	ldr	r2, [r7, #20]
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	e002      	b.n	80159bc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	697a      	ldr	r2, [r7, #20]
 80159ba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80159bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80159be:	6978      	ldr	r0, [r7, #20]
 80159c0:	f7ff f8de 	bl	8014b80 <tcp_oos_insert_segment>
                }
                break;
 80159c4:	e139      	b.n	8015c3a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80159c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d117      	bne.n	80159fc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80159cc:	4b2e      	ldr	r3, [pc, #184]	; (8015a88 <tcp_receive+0xd00>)
 80159ce:	681a      	ldr	r2, [r3, #0]
 80159d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	1ad3      	subs	r3, r2, r3
 80159d8:	2b00      	cmp	r3, #0
 80159da:	da57      	bge.n	8015a8c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80159dc:	4829      	ldr	r0, [pc, #164]	; (8015a84 <tcp_receive+0xcfc>)
 80159de:	f7fd fab3 	bl	8012f48 <tcp_seg_copy>
 80159e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80159e4:	69bb      	ldr	r3, [r7, #24]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	f000 8129 	beq.w	8015c3e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	69ba      	ldr	r2, [r7, #24]
 80159f0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80159f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80159f4:	69b8      	ldr	r0, [r7, #24]
 80159f6:	f7ff f8c3 	bl	8014b80 <tcp_oos_insert_segment>
                  }
                  break;
 80159fa:	e120      	b.n	8015c3e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80159fc:	4b22      	ldr	r3, [pc, #136]	; (8015a88 <tcp_receive+0xd00>)
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	685b      	ldr	r3, [r3, #4]
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	db3e      	blt.n	8015a8c <tcp_receive+0xd04>
 8015a0e:	4b1e      	ldr	r3, [pc, #120]	; (8015a88 <tcp_receive+0xd00>)
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a14:	68db      	ldr	r3, [r3, #12]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	dc35      	bgt.n	8015a8c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015a20:	4818      	ldr	r0, [pc, #96]	; (8015a84 <tcp_receive+0xcfc>)
 8015a22:	f7fd fa91 	bl	8012f48 <tcp_seg_copy>
 8015a26:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f000 8109 	beq.w	8015c42 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a38:	8912      	ldrh	r2, [r2, #8]
 8015a3a:	441a      	add	r2, r3
 8015a3c:	4b12      	ldr	r3, [pc, #72]	; (8015a88 <tcp_receive+0xd00>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	dd12      	ble.n	8015a6c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015a46:	4b10      	ldr	r3, [pc, #64]	; (8015a88 <tcp_receive+0xd00>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	b29a      	uxth	r2, r3
 8015a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	b29b      	uxth	r3, r3
 8015a54:	1ad3      	subs	r3, r2, r3
 8015a56:	b29a      	uxth	r2, r3
 8015a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a5a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a5e:	685a      	ldr	r2, [r3, #4]
 8015a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a62:	891b      	ldrh	r3, [r3, #8]
 8015a64:	4619      	mov	r1, r3
 8015a66:	4610      	mov	r0, r2
 8015a68:	f7fb fc0c 	bl	8011284 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a6e:	69fa      	ldr	r2, [r7, #28]
 8015a70:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015a72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015a74:	69f8      	ldr	r0, [r7, #28]
 8015a76:	f7ff f883 	bl	8014b80 <tcp_oos_insert_segment>
                  }
                  break;
 8015a7a:	e0e2      	b.n	8015c42 <tcp_receive+0xeba>
 8015a7c:	20004f3c 	.word	0x20004f3c
 8015a80:	20004f39 	.word	0x20004f39
 8015a84:	20004f0c 	.word	0x20004f0c
 8015a88:	20004f2c 	.word	0x20004f2c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a8e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	f040 80c6 	bne.w	8015c26 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015a9a:	4b80      	ldr	r3, [pc, #512]	; (8015c9c <tcp_receive+0xf14>)
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f340 80bd 	ble.w	8015c26 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aae:	68db      	ldr	r3, [r3, #12]
 8015ab0:	899b      	ldrh	r3, [r3, #12]
 8015ab2:	b29b      	uxth	r3, r3
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7fa f9af 	bl	800fe18 <lwip_htons>
 8015aba:	4603      	mov	r3, r0
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	f003 0301 	and.w	r3, r3, #1
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f040 80bf 	bne.w	8015c46 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015ac8:	4875      	ldr	r0, [pc, #468]	; (8015ca0 <tcp_receive+0xf18>)
 8015aca:	f7fd fa3d 	bl	8012f48 <tcp_seg_copy>
 8015ace:	4602      	mov	r2, r0
 8015ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f000 80b6 	beq.w	8015c4a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae0:	68db      	ldr	r3, [r3, #12]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ae6:	8912      	ldrh	r2, [r2, #8]
 8015ae8:	441a      	add	r2, r3
 8015aea:	4b6c      	ldr	r3, [pc, #432]	; (8015c9c <tcp_receive+0xf14>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	1ad3      	subs	r3, r2, r3
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	dd12      	ble.n	8015b1a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015af4:	4b69      	ldr	r3, [pc, #420]	; (8015c9c <tcp_receive+0xf14>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	b29a      	uxth	r2, r3
 8015afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015afc:	68db      	ldr	r3, [r3, #12]
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	b29b      	uxth	r3, r3
 8015b02:	1ad3      	subs	r3, r2, r3
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b0c:	685a      	ldr	r2, [r3, #4]
 8015b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b10:	891b      	ldrh	r3, [r3, #8]
 8015b12:	4619      	mov	r1, r3
 8015b14:	4610      	mov	r0, r2
 8015b16:	f7fb fbb5 	bl	8011284 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015b1a:	4b62      	ldr	r3, [pc, #392]	; (8015ca4 <tcp_receive+0xf1c>)
 8015b1c:	881b      	ldrh	r3, [r3, #0]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	4b5e      	ldr	r3, [pc, #376]	; (8015c9c <tcp_receive+0xf14>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	441a      	add	r2, r3
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b2a:	6879      	ldr	r1, [r7, #4]
 8015b2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b2e:	440b      	add	r3, r1
 8015b30:	1ad3      	subs	r3, r2, r3
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	f340 8089 	ble.w	8015c4a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	68db      	ldr	r3, [r3, #12]
 8015b3e:	899b      	ldrh	r3, [r3, #12]
 8015b40:	b29b      	uxth	r3, r3
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7fa f968 	bl	800fe18 <lwip_htons>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	b2db      	uxtb	r3, r3
 8015b4c:	f003 0301 	and.w	r3, r3, #1
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d022      	beq.n	8015b9a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	68db      	ldr	r3, [r3, #12]
 8015b5a:	899b      	ldrh	r3, [r3, #12]
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	b21b      	sxth	r3, r3
 8015b60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015b64:	b21c      	sxth	r4, r3
 8015b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	68db      	ldr	r3, [r3, #12]
 8015b6c:	899b      	ldrh	r3, [r3, #12]
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7fa f951 	bl	800fe18 <lwip_htons>
 8015b76:	4603      	mov	r3, r0
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	b29b      	uxth	r3, r3
 8015b7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7fa f948 	bl	800fe18 <lwip_htons>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	b21b      	sxth	r3, r3
 8015b8c:	4323      	orrs	r3, r4
 8015b8e:	b21a      	sxth	r2, r3
 8015b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	b292      	uxth	r2, r2
 8015b98:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9e:	b29a      	uxth	r2, r3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ba4:	4413      	add	r3, r2
 8015ba6:	b299      	uxth	r1, r3
 8015ba8:	4b3c      	ldr	r3, [pc, #240]	; (8015c9c <tcp_receive+0xf14>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	b29a      	uxth	r2, r3
 8015bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	1a8a      	subs	r2, r1, r2
 8015bb4:	b292      	uxth	r2, r2
 8015bb6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	685a      	ldr	r2, [r3, #4]
 8015bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	891b      	ldrh	r3, [r3, #8]
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	4610      	mov	r0, r2
 8015bc8:	f7fb fb5c 	bl	8011284 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	891c      	ldrh	r4, [r3, #8]
 8015bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	899b      	ldrh	r3, [r3, #12]
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7fa f91b 	bl	800fe18 <lwip_htons>
 8015be2:	4603      	mov	r3, r0
 8015be4:	b2db      	uxtb	r3, r3
 8015be6:	f003 0303 	and.w	r3, r3, #3
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d001      	beq.n	8015bf2 <tcp_receive+0xe6a>
 8015bee:	2301      	movs	r3, #1
 8015bf0:	e000      	b.n	8015bf4 <tcp_receive+0xe6c>
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	4423      	add	r3, r4
 8015bf6:	b29a      	uxth	r2, r3
 8015bf8:	4b2a      	ldr	r3, [pc, #168]	; (8015ca4 <tcp_receive+0xf1c>)
 8015bfa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015bfc:	4b29      	ldr	r3, [pc, #164]	; (8015ca4 <tcp_receive+0xf1c>)
 8015bfe:	881b      	ldrh	r3, [r3, #0]
 8015c00:	461a      	mov	r2, r3
 8015c02:	4b26      	ldr	r3, [pc, #152]	; (8015c9c <tcp_receive+0xf14>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	441a      	add	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c0c:	6879      	ldr	r1, [r7, #4]
 8015c0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c10:	440b      	add	r3, r1
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d019      	beq.n	8015c4a <tcp_receive+0xec2>
 8015c16:	4b24      	ldr	r3, [pc, #144]	; (8015ca8 <tcp_receive+0xf20>)
 8015c18:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015c1c:	4923      	ldr	r1, [pc, #140]	; (8015cac <tcp_receive+0xf24>)
 8015c1e:	4824      	ldr	r0, [pc, #144]	; (8015cb0 <tcp_receive+0xf28>)
 8015c20:	f006 f81c 	bl	801bc5c <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015c24:	e011      	b.n	8015c4a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	f47f aea4 	bne.w	801597c <tcp_receive+0xbf4>
 8015c34:	e00a      	b.n	8015c4c <tcp_receive+0xec4>
                break;
 8015c36:	bf00      	nop
 8015c38:	e008      	b.n	8015c4c <tcp_receive+0xec4>
                break;
 8015c3a:	bf00      	nop
 8015c3c:	e006      	b.n	8015c4c <tcp_receive+0xec4>
                  break;
 8015c3e:	bf00      	nop
 8015c40:	e004      	b.n	8015c4c <tcp_receive+0xec4>
                  break;
 8015c42:	bf00      	nop
 8015c44:	e002      	b.n	8015c4c <tcp_receive+0xec4>
                  break;
 8015c46:	bf00      	nop
 8015c48:	e000      	b.n	8015c4c <tcp_receive+0xec4>
                break;
 8015c4a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	f001 fe8b 	bl	8017968 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015c52:	e003      	b.n	8015c5c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f001 fe87 	bl	8017968 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c5a:	e01a      	b.n	8015c92 <tcp_receive+0xf0a>
 8015c5c:	e019      	b.n	8015c92 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015c5e:	4b0f      	ldr	r3, [pc, #60]	; (8015c9c <tcp_receive+0xf14>)
 8015c60:	681a      	ldr	r2, [r3, #0]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c66:	1ad3      	subs	r3, r2, r3
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	db0a      	blt.n	8015c82 <tcp_receive+0xefa>
 8015c6c:	4b0b      	ldr	r3, [pc, #44]	; (8015c9c <tcp_receive+0xf14>)
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c74:	6879      	ldr	r1, [r7, #4]
 8015c76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c78:	440b      	add	r3, r1
 8015c7a:	1ad3      	subs	r3, r2, r3
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	dd07      	ble.n	8015c92 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	8b5b      	ldrh	r3, [r3, #26]
 8015c86:	f043 0302 	orr.w	r3, r3, #2
 8015c8a:	b29a      	uxth	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015c90:	e7ff      	b.n	8015c92 <tcp_receive+0xf0a>
 8015c92:	bf00      	nop
 8015c94:	3750      	adds	r7, #80	; 0x50
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bdb0      	pop	{r4, r5, r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	20004f2c 	.word	0x20004f2c
 8015ca0:	20004f0c 	.word	0x20004f0c
 8015ca4:	20004f36 	.word	0x20004f36
 8015ca8:	08026ba8 	.word	0x08026ba8
 8015cac:	08026f50 	.word	0x08026f50
 8015cb0:	08026bf4 	.word	0x08026bf4

08015cb4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	b083      	sub	sp, #12
 8015cb8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015cba:	4b15      	ldr	r3, [pc, #84]	; (8015d10 <tcp_get_next_optbyte+0x5c>)
 8015cbc:	881b      	ldrh	r3, [r3, #0]
 8015cbe:	1c5a      	adds	r2, r3, #1
 8015cc0:	b291      	uxth	r1, r2
 8015cc2:	4a13      	ldr	r2, [pc, #76]	; (8015d10 <tcp_get_next_optbyte+0x5c>)
 8015cc4:	8011      	strh	r1, [r2, #0]
 8015cc6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015cc8:	4b12      	ldr	r3, [pc, #72]	; (8015d14 <tcp_get_next_optbyte+0x60>)
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d004      	beq.n	8015cda <tcp_get_next_optbyte+0x26>
 8015cd0:	4b11      	ldr	r3, [pc, #68]	; (8015d18 <tcp_get_next_optbyte+0x64>)
 8015cd2:	881b      	ldrh	r3, [r3, #0]
 8015cd4:	88fa      	ldrh	r2, [r7, #6]
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	d208      	bcs.n	8015cec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015cda:	4b10      	ldr	r3, [pc, #64]	; (8015d1c <tcp_get_next_optbyte+0x68>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	3314      	adds	r3, #20
 8015ce0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015ce2:	88fb      	ldrh	r3, [r7, #6]
 8015ce4:	683a      	ldr	r2, [r7, #0]
 8015ce6:	4413      	add	r3, r2
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	e00b      	b.n	8015d04 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015cec:	88fb      	ldrh	r3, [r7, #6]
 8015cee:	b2da      	uxtb	r2, r3
 8015cf0:	4b09      	ldr	r3, [pc, #36]	; (8015d18 <tcp_get_next_optbyte+0x64>)
 8015cf2:	881b      	ldrh	r3, [r3, #0]
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	1ad3      	subs	r3, r2, r3
 8015cf8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015cfa:	4b06      	ldr	r3, [pc, #24]	; (8015d14 <tcp_get_next_optbyte+0x60>)
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	797b      	ldrb	r3, [r7, #5]
 8015d00:	4413      	add	r3, r2
 8015d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr
 8015d10:	20004f28 	.word	0x20004f28
 8015d14:	20004f24 	.word	0x20004f24
 8015d18:	20004f22 	.word	0x20004f22
 8015d1c:	20004f1c 	.word	0x20004f1c

08015d20 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b084      	sub	sp, #16
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d106      	bne.n	8015d3c <tcp_parseopt+0x1c>
 8015d2e:	4b32      	ldr	r3, [pc, #200]	; (8015df8 <tcp_parseopt+0xd8>)
 8015d30:	f240 727d 	movw	r2, #1917	; 0x77d
 8015d34:	4931      	ldr	r1, [pc, #196]	; (8015dfc <tcp_parseopt+0xdc>)
 8015d36:	4832      	ldr	r0, [pc, #200]	; (8015e00 <tcp_parseopt+0xe0>)
 8015d38:	f005 ff90 	bl	801bc5c <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015d3c:	4b31      	ldr	r3, [pc, #196]	; (8015e04 <tcp_parseopt+0xe4>)
 8015d3e:	881b      	ldrh	r3, [r3, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d055      	beq.n	8015df0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015d44:	4b30      	ldr	r3, [pc, #192]	; (8015e08 <tcp_parseopt+0xe8>)
 8015d46:	2200      	movs	r2, #0
 8015d48:	801a      	strh	r2, [r3, #0]
 8015d4a:	e045      	b.n	8015dd8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015d4c:	f7ff ffb2 	bl	8015cb4 <tcp_get_next_optbyte>
 8015d50:	4603      	mov	r3, r0
 8015d52:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015d54:	7bfb      	ldrb	r3, [r7, #15]
 8015d56:	2b02      	cmp	r3, #2
 8015d58:	d006      	beq.n	8015d68 <tcp_parseopt+0x48>
 8015d5a:	2b02      	cmp	r3, #2
 8015d5c:	dc2b      	bgt.n	8015db6 <tcp_parseopt+0x96>
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d041      	beq.n	8015de6 <tcp_parseopt+0xc6>
 8015d62:	2b01      	cmp	r3, #1
 8015d64:	d127      	bne.n	8015db6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015d66:	e037      	b.n	8015dd8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015d68:	f7ff ffa4 	bl	8015cb4 <tcp_get_next_optbyte>
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	2b04      	cmp	r3, #4
 8015d70:	d13b      	bne.n	8015dea <tcp_parseopt+0xca>
 8015d72:	4b25      	ldr	r3, [pc, #148]	; (8015e08 <tcp_parseopt+0xe8>)
 8015d74:	881b      	ldrh	r3, [r3, #0]
 8015d76:	3301      	adds	r3, #1
 8015d78:	4a22      	ldr	r2, [pc, #136]	; (8015e04 <tcp_parseopt+0xe4>)
 8015d7a:	8812      	ldrh	r2, [r2, #0]
 8015d7c:	4293      	cmp	r3, r2
 8015d7e:	da34      	bge.n	8015dea <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015d80:	f7ff ff98 	bl	8015cb4 <tcp_get_next_optbyte>
 8015d84:	4603      	mov	r3, r0
 8015d86:	b29b      	uxth	r3, r3
 8015d88:	021b      	lsls	r3, r3, #8
 8015d8a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015d8c:	f7ff ff92 	bl	8015cb4 <tcp_get_next_optbyte>
 8015d90:	4603      	mov	r3, r0
 8015d92:	b29a      	uxth	r2, r3
 8015d94:	89bb      	ldrh	r3, [r7, #12]
 8015d96:	4313      	orrs	r3, r2
 8015d98:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015d9a:	89bb      	ldrh	r3, [r7, #12]
 8015d9c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015da0:	d804      	bhi.n	8015dac <tcp_parseopt+0x8c>
 8015da2:	89bb      	ldrh	r3, [r7, #12]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d001      	beq.n	8015dac <tcp_parseopt+0x8c>
 8015da8:	89ba      	ldrh	r2, [r7, #12]
 8015daa:	e001      	b.n	8015db0 <tcp_parseopt+0x90>
 8015dac:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015db4:	e010      	b.n	8015dd8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015db6:	f7ff ff7d 	bl	8015cb4 <tcp_get_next_optbyte>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015dbe:	7afb      	ldrb	r3, [r7, #11]
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	d914      	bls.n	8015dee <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015dc4:	7afb      	ldrb	r3, [r7, #11]
 8015dc6:	b29a      	uxth	r2, r3
 8015dc8:	4b0f      	ldr	r3, [pc, #60]	; (8015e08 <tcp_parseopt+0xe8>)
 8015dca:	881b      	ldrh	r3, [r3, #0]
 8015dcc:	4413      	add	r3, r2
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	3b02      	subs	r3, #2
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	4b0c      	ldr	r3, [pc, #48]	; (8015e08 <tcp_parseopt+0xe8>)
 8015dd6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015dd8:	4b0b      	ldr	r3, [pc, #44]	; (8015e08 <tcp_parseopt+0xe8>)
 8015dda:	881a      	ldrh	r2, [r3, #0]
 8015ddc:	4b09      	ldr	r3, [pc, #36]	; (8015e04 <tcp_parseopt+0xe4>)
 8015dde:	881b      	ldrh	r3, [r3, #0]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d3b3      	bcc.n	8015d4c <tcp_parseopt+0x2c>
 8015de4:	e004      	b.n	8015df0 <tcp_parseopt+0xd0>
          return;
 8015de6:	bf00      	nop
 8015de8:	e002      	b.n	8015df0 <tcp_parseopt+0xd0>
            return;
 8015dea:	bf00      	nop
 8015dec:	e000      	b.n	8015df0 <tcp_parseopt+0xd0>
            return;
 8015dee:	bf00      	nop
      }
    }
  }
}
 8015df0:	3710      	adds	r7, #16
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd80      	pop	{r7, pc}
 8015df6:	bf00      	nop
 8015df8:	08026ba8 	.word	0x08026ba8
 8015dfc:	0802700c 	.word	0x0802700c
 8015e00:	08026bf4 	.word	0x08026bf4
 8015e04:	20004f20 	.word	0x20004f20
 8015e08:	20004f28 	.word	0x20004f28

08015e0c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015e0c:	b480      	push	{r7}
 8015e0e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015e10:	4b05      	ldr	r3, [pc, #20]	; (8015e28 <tcp_trigger_input_pcb_close+0x1c>)
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	f043 0310 	orr.w	r3, r3, #16
 8015e18:	b2da      	uxtb	r2, r3
 8015e1a:	4b03      	ldr	r3, [pc, #12]	; (8015e28 <tcp_trigger_input_pcb_close+0x1c>)
 8015e1c:	701a      	strb	r2, [r3, #0]
}
 8015e1e:	bf00      	nop
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr
 8015e28:	20004f39 	.word	0x20004f39

08015e2c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b084      	sub	sp, #16
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d00a      	beq.n	8015e54 <tcp_route+0x28>
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	7a1b      	ldrb	r3, [r3, #8]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d006      	beq.n	8015e54 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	7a1b      	ldrb	r3, [r3, #8]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f7fb f812 	bl	8010e74 <netif_get_by_index>
 8015e50:	4603      	mov	r3, r0
 8015e52:	e003      	b.n	8015e5c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f003 fe35 	bl	8019ac4 <ip4_route>
 8015e5a:	4603      	mov	r3, r0
  }
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3710      	adds	r7, #16
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015e64:	b590      	push	{r4, r7, lr}
 8015e66:	b087      	sub	sp, #28
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	603b      	str	r3, [r7, #0]
 8015e70:	4613      	mov	r3, r2
 8015e72:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d105      	bne.n	8015e86 <tcp_create_segment+0x22>
 8015e7a:	4b44      	ldr	r3, [pc, #272]	; (8015f8c <tcp_create_segment+0x128>)
 8015e7c:	22a3      	movs	r2, #163	; 0xa3
 8015e7e:	4944      	ldr	r1, [pc, #272]	; (8015f90 <tcp_create_segment+0x12c>)
 8015e80:	4844      	ldr	r0, [pc, #272]	; (8015f94 <tcp_create_segment+0x130>)
 8015e82:	f005 feeb 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d105      	bne.n	8015e98 <tcp_create_segment+0x34>
 8015e8c:	4b3f      	ldr	r3, [pc, #252]	; (8015f8c <tcp_create_segment+0x128>)
 8015e8e:	22a4      	movs	r2, #164	; 0xa4
 8015e90:	4941      	ldr	r1, [pc, #260]	; (8015f98 <tcp_create_segment+0x134>)
 8015e92:	4840      	ldr	r0, [pc, #256]	; (8015f94 <tcp_create_segment+0x130>)
 8015e94:	f005 fee2 	bl	801bc5c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015e98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e9c:	009b      	lsls	r3, r3, #2
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	f003 0304 	and.w	r3, r3, #4
 8015ea4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015ea6:	2003      	movs	r0, #3
 8015ea8:	f7fa fca2 	bl	80107f0 <memp_malloc>
 8015eac:	6138      	str	r0, [r7, #16]
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d104      	bne.n	8015ebe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015eb4:	68b8      	ldr	r0, [r7, #8]
 8015eb6:	f7fb fb6b 	bl	8011590 <pbuf_free>
    return NULL;
 8015eba:	2300      	movs	r3, #0
 8015ebc:	e061      	b.n	8015f82 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015ec4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	68ba      	ldr	r2, [r7, #8]
 8015ed0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	891a      	ldrh	r2, [r3, #8]
 8015ed6:	7dfb      	ldrb	r3, [r7, #23]
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d205      	bcs.n	8015eea <tcp_create_segment+0x86>
 8015ede:	4b2b      	ldr	r3, [pc, #172]	; (8015f8c <tcp_create_segment+0x128>)
 8015ee0:	22b0      	movs	r2, #176	; 0xb0
 8015ee2:	492e      	ldr	r1, [pc, #184]	; (8015f9c <tcp_create_segment+0x138>)
 8015ee4:	482b      	ldr	r0, [pc, #172]	; (8015f94 <tcp_create_segment+0x130>)
 8015ee6:	f005 feb9 	bl	801bc5c <printf>
  seg->len = p->tot_len - optlen;
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	891a      	ldrh	r2, [r3, #8]
 8015eee:	7dfb      	ldrb	r3, [r7, #23]
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	1ad3      	subs	r3, r2, r3
 8015ef4:	b29a      	uxth	r2, r3
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015efa:	2114      	movs	r1, #20
 8015efc:	68b8      	ldr	r0, [r7, #8]
 8015efe:	f7fb fab1 	bl	8011464 <pbuf_add_header>
 8015f02:	4603      	mov	r3, r0
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d004      	beq.n	8015f12 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015f08:	6938      	ldr	r0, [r7, #16]
 8015f0a:	f7fc ffe6 	bl	8012eda <tcp_seg_free>
    return NULL;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	e037      	b.n	8015f82 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	685b      	ldr	r3, [r3, #4]
 8015f16:	685a      	ldr	r2, [r3, #4]
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	8ada      	ldrh	r2, [r3, #22]
 8015f20:	693b      	ldr	r3, [r7, #16]
 8015f22:	68dc      	ldr	r4, [r3, #12]
 8015f24:	4610      	mov	r0, r2
 8015f26:	f7f9 ff77 	bl	800fe18 <lwip_htons>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	8b1a      	ldrh	r2, [r3, #24]
 8015f32:	693b      	ldr	r3, [r7, #16]
 8015f34:	68dc      	ldr	r4, [r3, #12]
 8015f36:	4610      	mov	r0, r2
 8015f38:	f7f9 ff6e 	bl	800fe18 <lwip_htons>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	68dc      	ldr	r4, [r3, #12]
 8015f44:	6838      	ldr	r0, [r7, #0]
 8015f46:	f7f9 ff7c 	bl	800fe42 <lwip_htonl>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015f4e:	7dfb      	ldrb	r3, [r7, #23]
 8015f50:	089b      	lsrs	r3, r3, #2
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	3305      	adds	r3, #5
 8015f58:	b29b      	uxth	r3, r3
 8015f5a:	031b      	lsls	r3, r3, #12
 8015f5c:	b29a      	uxth	r2, r3
 8015f5e:	79fb      	ldrb	r3, [r7, #7]
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	4313      	orrs	r3, r2
 8015f64:	b29a      	uxth	r2, r3
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	68dc      	ldr	r4, [r3, #12]
 8015f6a:	4610      	mov	r0, r2
 8015f6c:	f7f9 ff54 	bl	800fe18 <lwip_htons>
 8015f70:	4603      	mov	r3, r0
 8015f72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	68db      	ldr	r3, [r3, #12]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	749a      	strb	r2, [r3, #18]
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015f80:	693b      	ldr	r3, [r7, #16]
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	371c      	adds	r7, #28
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd90      	pop	{r4, r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	08027028 	.word	0x08027028
 8015f90:	0802705c 	.word	0x0802705c
 8015f94:	0802707c 	.word	0x0802707c
 8015f98:	080270a4 	.word	0x080270a4
 8015f9c:	080270c8 	.word	0x080270c8

08015fa0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b086      	sub	sp, #24
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	607b      	str	r3, [r7, #4]
 8015fa8:	4603      	mov	r3, r0
 8015faa:	73fb      	strb	r3, [r7, #15]
 8015fac:	460b      	mov	r3, r1
 8015fae:	81bb      	strh	r3, [r7, #12]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015fb4:	89bb      	ldrh	r3, [r7, #12]
 8015fb6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d105      	bne.n	8015fca <tcp_pbuf_prealloc+0x2a>
 8015fbe:	4b30      	ldr	r3, [pc, #192]	; (8016080 <tcp_pbuf_prealloc+0xe0>)
 8015fc0:	22e8      	movs	r2, #232	; 0xe8
 8015fc2:	4930      	ldr	r1, [pc, #192]	; (8016084 <tcp_pbuf_prealloc+0xe4>)
 8015fc4:	4830      	ldr	r0, [pc, #192]	; (8016088 <tcp_pbuf_prealloc+0xe8>)
 8015fc6:	f005 fe49 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d105      	bne.n	8015fdc <tcp_pbuf_prealloc+0x3c>
 8015fd0:	4b2b      	ldr	r3, [pc, #172]	; (8016080 <tcp_pbuf_prealloc+0xe0>)
 8015fd2:	22e9      	movs	r2, #233	; 0xe9
 8015fd4:	492d      	ldr	r1, [pc, #180]	; (801608c <tcp_pbuf_prealloc+0xec>)
 8015fd6:	482c      	ldr	r0, [pc, #176]	; (8016088 <tcp_pbuf_prealloc+0xe8>)
 8015fd8:	f005 fe40 	bl	801bc5c <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015fdc:	89ba      	ldrh	r2, [r7, #12]
 8015fde:	897b      	ldrh	r3, [r7, #10]
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d221      	bcs.n	8016028 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015fe8:	f003 0302 	and.w	r3, r3, #2
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d111      	bne.n	8016014 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015ff0:	6a3b      	ldr	r3, [r7, #32]
 8015ff2:	8b5b      	ldrh	r3, [r3, #26]
 8015ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d115      	bne.n	8016028 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016000:	2b00      	cmp	r3, #0
 8016002:	d007      	beq.n	8016014 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016004:	6a3b      	ldr	r3, [r7, #32]
 8016006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016008:	2b00      	cmp	r3, #0
 801600a:	d103      	bne.n	8016014 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801600c:	6a3b      	ldr	r3, [r7, #32]
 801600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016010:	2b00      	cmp	r3, #0
 8016012:	d009      	beq.n	8016028 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016014:	89bb      	ldrh	r3, [r7, #12]
 8016016:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801601a:	f023 0203 	bic.w	r2, r3, #3
 801601e:	897b      	ldrh	r3, [r7, #10]
 8016020:	4293      	cmp	r3, r2
 8016022:	bf28      	it	cs
 8016024:	4613      	movcs	r3, r2
 8016026:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016028:	8af9      	ldrh	r1, [r7, #22]
 801602a:	7bfb      	ldrb	r3, [r7, #15]
 801602c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016030:	4618      	mov	r0, r3
 8016032:	f7fa ffc9 	bl	8010fc8 <pbuf_alloc>
 8016036:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016038:	693b      	ldr	r3, [r7, #16]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d101      	bne.n	8016042 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801603e:	2300      	movs	r3, #0
 8016040:	e019      	b.n	8016076 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d006      	beq.n	8016058 <tcp_pbuf_prealloc+0xb8>
 801604a:	4b0d      	ldr	r3, [pc, #52]	; (8016080 <tcp_pbuf_prealloc+0xe0>)
 801604c:	f240 120b 	movw	r2, #267	; 0x10b
 8016050:	490f      	ldr	r1, [pc, #60]	; (8016090 <tcp_pbuf_prealloc+0xf0>)
 8016052:	480d      	ldr	r0, [pc, #52]	; (8016088 <tcp_pbuf_prealloc+0xe8>)
 8016054:	f005 fe02 	bl	801bc5c <printf>
  *oversize = p->len - length;
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	895a      	ldrh	r2, [r3, #10]
 801605c:	89bb      	ldrh	r3, [r7, #12]
 801605e:	1ad3      	subs	r3, r2, r3
 8016060:	b29a      	uxth	r2, r3
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	89ba      	ldrh	r2, [r7, #12]
 801606a:	811a      	strh	r2, [r3, #8]
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	891a      	ldrh	r2, [r3, #8]
 8016070:	693b      	ldr	r3, [r7, #16]
 8016072:	815a      	strh	r2, [r3, #10]
  return p;
 8016074:	693b      	ldr	r3, [r7, #16]
}
 8016076:	4618      	mov	r0, r3
 8016078:	3718      	adds	r7, #24
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	08027028 	.word	0x08027028
 8016084:	080270e0 	.word	0x080270e0
 8016088:	0802707c 	.word	0x0802707c
 801608c:	08027104 	.word	0x08027104
 8016090:	08027124 	.word	0x08027124

08016094 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	460b      	mov	r3, r1
 801609e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d106      	bne.n	80160b4 <tcp_write_checks+0x20>
 80160a6:	4b33      	ldr	r3, [pc, #204]	; (8016174 <tcp_write_checks+0xe0>)
 80160a8:	f240 1233 	movw	r2, #307	; 0x133
 80160ac:	4932      	ldr	r1, [pc, #200]	; (8016178 <tcp_write_checks+0xe4>)
 80160ae:	4833      	ldr	r0, [pc, #204]	; (801617c <tcp_write_checks+0xe8>)
 80160b0:	f005 fdd4 	bl	801bc5c <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	7d1b      	ldrb	r3, [r3, #20]
 80160b8:	2b04      	cmp	r3, #4
 80160ba:	d00e      	beq.n	80160da <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80160c0:	2b07      	cmp	r3, #7
 80160c2:	d00a      	beq.n	80160da <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80160c8:	2b02      	cmp	r3, #2
 80160ca:	d006      	beq.n	80160da <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80160d0:	2b03      	cmp	r3, #3
 80160d2:	d002      	beq.n	80160da <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80160d4:	f06f 030a 	mvn.w	r3, #10
 80160d8:	e048      	b.n	801616c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80160da:	887b      	ldrh	r3, [r7, #2]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d101      	bne.n	80160e4 <tcp_write_checks+0x50>
    return ERR_OK;
 80160e0:	2300      	movs	r3, #0
 80160e2:	e043      	b.n	801616c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80160ea:	887a      	ldrh	r2, [r7, #2]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d909      	bls.n	8016104 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	8b5b      	ldrh	r3, [r3, #26]
 80160f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160f8:	b29a      	uxth	r2, r3
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80160fe:	f04f 33ff 	mov.w	r3, #4294967295
 8016102:	e033      	b.n	801616c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801610a:	2b08      	cmp	r3, #8
 801610c:	d909      	bls.n	8016122 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	8b5b      	ldrh	r3, [r3, #26]
 8016112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016116:	b29a      	uxth	r2, r3
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801611c:	f04f 33ff 	mov.w	r3, #4294967295
 8016120:	e024      	b.n	801616c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016128:	2b00      	cmp	r3, #0
 801612a:	d00f      	beq.n	801614c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016130:	2b00      	cmp	r3, #0
 8016132:	d11a      	bne.n	801616a <tcp_write_checks+0xd6>
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016138:	2b00      	cmp	r3, #0
 801613a:	d116      	bne.n	801616a <tcp_write_checks+0xd6>
 801613c:	4b0d      	ldr	r3, [pc, #52]	; (8016174 <tcp_write_checks+0xe0>)
 801613e:	f240 1255 	movw	r2, #341	; 0x155
 8016142:	490f      	ldr	r1, [pc, #60]	; (8016180 <tcp_write_checks+0xec>)
 8016144:	480d      	ldr	r0, [pc, #52]	; (801617c <tcp_write_checks+0xe8>)
 8016146:	f005 fd89 	bl	801bc5c <printf>
 801614a:	e00e      	b.n	801616a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016150:	2b00      	cmp	r3, #0
 8016152:	d103      	bne.n	801615c <tcp_write_checks+0xc8>
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016158:	2b00      	cmp	r3, #0
 801615a:	d006      	beq.n	801616a <tcp_write_checks+0xd6>
 801615c:	4b05      	ldr	r3, [pc, #20]	; (8016174 <tcp_write_checks+0xe0>)
 801615e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016162:	4908      	ldr	r1, [pc, #32]	; (8016184 <tcp_write_checks+0xf0>)
 8016164:	4805      	ldr	r0, [pc, #20]	; (801617c <tcp_write_checks+0xe8>)
 8016166:	f005 fd79 	bl	801bc5c <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801616a:	2300      	movs	r3, #0
}
 801616c:	4618      	mov	r0, r3
 801616e:	3708      	adds	r7, #8
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	08027028 	.word	0x08027028
 8016178:	08027138 	.word	0x08027138
 801617c:	0802707c 	.word	0x0802707c
 8016180:	08027158 	.word	0x08027158
 8016184:	08027194 	.word	0x08027194

08016188 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016188:	b590      	push	{r4, r7, lr}
 801618a:	b09b      	sub	sp, #108	; 0x6c
 801618c:	af04      	add	r7, sp, #16
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	4611      	mov	r1, r2
 8016194:	461a      	mov	r2, r3
 8016196:	460b      	mov	r3, r1
 8016198:	80fb      	strh	r3, [r7, #6]
 801619a:	4613      	mov	r3, r2
 801619c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801619e:	2300      	movs	r3, #0
 80161a0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80161a2:	2300      	movs	r3, #0
 80161a4:	653b      	str	r3, [r7, #80]	; 0x50
 80161a6:	2300      	movs	r3, #0
 80161a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80161aa:	2300      	movs	r3, #0
 80161ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80161ae:	2300      	movs	r3, #0
 80161b0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80161b2:	2300      	movs	r3, #0
 80161b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80161b8:	2300      	movs	r3, #0
 80161ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80161be:	2300      	movs	r3, #0
 80161c0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80161c2:	2300      	movs	r3, #0
 80161c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80161c6:	2300      	movs	r3, #0
 80161c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d109      	bne.n	80161e4 <tcp_write+0x5c>
 80161d0:	4ba4      	ldr	r3, [pc, #656]	; (8016464 <tcp_write+0x2dc>)
 80161d2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80161d6:	49a4      	ldr	r1, [pc, #656]	; (8016468 <tcp_write+0x2e0>)
 80161d8:	48a4      	ldr	r0, [pc, #656]	; (801646c <tcp_write+0x2e4>)
 80161da:	f005 fd3f 	bl	801bc5c <printf>
 80161de:	f06f 030f 	mvn.w	r3, #15
 80161e2:	e32a      	b.n	801683a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80161ea:	085b      	lsrs	r3, r3, #1
 80161ec:	b29a      	uxth	r2, r3
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161f2:	4293      	cmp	r3, r2
 80161f4:	bf28      	it	cs
 80161f6:	4613      	movcs	r3, r2
 80161f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80161fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d102      	bne.n	8016206 <tcp_write+0x7e>
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016204:	e000      	b.n	8016208 <tcp_write+0x80>
 8016206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016208:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d109      	bne.n	8016224 <tcp_write+0x9c>
 8016210:	4b94      	ldr	r3, [pc, #592]	; (8016464 <tcp_write+0x2dc>)
 8016212:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016216:	4996      	ldr	r1, [pc, #600]	; (8016470 <tcp_write+0x2e8>)
 8016218:	4894      	ldr	r0, [pc, #592]	; (801646c <tcp_write+0x2e4>)
 801621a:	f005 fd1f 	bl	801bc5c <printf>
 801621e:	f06f 030f 	mvn.w	r3, #15
 8016222:	e30a      	b.n	801683a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016224:	88fb      	ldrh	r3, [r7, #6]
 8016226:	4619      	mov	r1, r3
 8016228:	68f8      	ldr	r0, [r7, #12]
 801622a:	f7ff ff33 	bl	8016094 <tcp_write_checks>
 801622e:	4603      	mov	r3, r0
 8016230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016234:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016238:	2b00      	cmp	r3, #0
 801623a:	d002      	beq.n	8016242 <tcp_write+0xba>
    return err;
 801623c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016240:	e2fb      	b.n	801683a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016248:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801624c:	2300      	movs	r3, #0
 801624e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016256:	2b00      	cmp	r3, #0
 8016258:	f000 80f6 	beq.w	8016448 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016260:	653b      	str	r3, [r7, #80]	; 0x50
 8016262:	e002      	b.n	801626a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801626a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d1f8      	bne.n	8016264 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016274:	7a9b      	ldrb	r3, [r3, #10]
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	b29b      	uxth	r3, r3
 801627a:	f003 0304 	and.w	r3, r3, #4
 801627e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016284:	891b      	ldrh	r3, [r3, #8]
 8016286:	4619      	mov	r1, r3
 8016288:	8c3b      	ldrh	r3, [r7, #32]
 801628a:	440b      	add	r3, r1
 801628c:	429a      	cmp	r2, r3
 801628e:	da06      	bge.n	801629e <tcp_write+0x116>
 8016290:	4b74      	ldr	r3, [pc, #464]	; (8016464 <tcp_write+0x2dc>)
 8016292:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016296:	4977      	ldr	r1, [pc, #476]	; (8016474 <tcp_write+0x2ec>)
 8016298:	4874      	ldr	r0, [pc, #464]	; (801646c <tcp_write+0x2e4>)
 801629a:	f005 fcdf 	bl	801bc5c <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801629e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162a0:	891a      	ldrh	r2, [r3, #8]
 80162a2:	8c3b      	ldrh	r3, [r7, #32]
 80162a4:	4413      	add	r3, r2
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162aa:	1ad3      	subs	r3, r2, r3
 80162ac:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162b4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80162b6:	8a7b      	ldrh	r3, [r7, #18]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d026      	beq.n	801630a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80162bc:	8a7b      	ldrh	r3, [r7, #18]
 80162be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162c0:	429a      	cmp	r2, r3
 80162c2:	d206      	bcs.n	80162d2 <tcp_write+0x14a>
 80162c4:	4b67      	ldr	r3, [pc, #412]	; (8016464 <tcp_write+0x2dc>)
 80162c6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80162ca:	496b      	ldr	r1, [pc, #428]	; (8016478 <tcp_write+0x2f0>)
 80162cc:	4867      	ldr	r0, [pc, #412]	; (801646c <tcp_write+0x2e4>)
 80162ce:	f005 fcc5 	bl	801bc5c <printf>
      seg = last_unsent;
 80162d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80162d6:	8a7b      	ldrh	r3, [r7, #18]
 80162d8:	88fa      	ldrh	r2, [r7, #6]
 80162da:	4293      	cmp	r3, r2
 80162dc:	bf28      	it	cs
 80162de:	4613      	movcs	r3, r2
 80162e0:	b29b      	uxth	r3, r3
 80162e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162e4:	4293      	cmp	r3, r2
 80162e6:	bf28      	it	cs
 80162e8:	4613      	movcs	r3, r2
 80162ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80162ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162f2:	4413      	add	r3, r2
 80162f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80162f8:	8a7a      	ldrh	r2, [r7, #18]
 80162fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162fc:	1ad3      	subs	r3, r2, r3
 80162fe:	b29b      	uxth	r3, r3
 8016300:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016302:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016304:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016306:	1ad3      	subs	r3, r2, r3
 8016308:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801630a:	8a7b      	ldrh	r3, [r7, #18]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d00b      	beq.n	8016328 <tcp_write+0x1a0>
 8016310:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016314:	88fb      	ldrh	r3, [r7, #6]
 8016316:	429a      	cmp	r2, r3
 8016318:	d006      	beq.n	8016328 <tcp_write+0x1a0>
 801631a:	4b52      	ldr	r3, [pc, #328]	; (8016464 <tcp_write+0x2dc>)
 801631c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016320:	4956      	ldr	r1, [pc, #344]	; (801647c <tcp_write+0x2f4>)
 8016322:	4852      	ldr	r0, [pc, #328]	; (801646c <tcp_write+0x2e4>)
 8016324:	f005 fc9a 	bl	801bc5c <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801632c:	88fb      	ldrh	r3, [r7, #6]
 801632e:	429a      	cmp	r2, r3
 8016330:	f080 8167 	bcs.w	8016602 <tcp_write+0x47a>
 8016334:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016336:	2b00      	cmp	r3, #0
 8016338:	f000 8163 	beq.w	8016602 <tcp_write+0x47a>
 801633c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801633e:	891b      	ldrh	r3, [r3, #8]
 8016340:	2b00      	cmp	r3, #0
 8016342:	f000 815e 	beq.w	8016602 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016346:	88fa      	ldrh	r2, [r7, #6]
 8016348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801634c:	1ad2      	subs	r2, r2, r3
 801634e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016350:	4293      	cmp	r3, r2
 8016352:	bfa8      	it	ge
 8016354:	4613      	movge	r3, r2
 8016356:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801635a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801635c:	797b      	ldrb	r3, [r7, #5]
 801635e:	f003 0301 	and.w	r3, r3, #1
 8016362:	2b00      	cmp	r3, #0
 8016364:	d027      	beq.n	80163b6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016366:	f107 0012 	add.w	r0, r7, #18
 801636a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801636c:	8bf9      	ldrh	r1, [r7, #30]
 801636e:	2301      	movs	r3, #1
 8016370:	9302      	str	r3, [sp, #8]
 8016372:	797b      	ldrb	r3, [r7, #5]
 8016374:	9301      	str	r3, [sp, #4]
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	9300      	str	r3, [sp, #0]
 801637a:	4603      	mov	r3, r0
 801637c:	2000      	movs	r0, #0
 801637e:	f7ff fe0f 	bl	8015fa0 <tcp_pbuf_prealloc>
 8016382:	6578      	str	r0, [r7, #84]	; 0x54
 8016384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016386:	2b00      	cmp	r3, #0
 8016388:	f000 8225 	beq.w	80167d6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801638c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801638e:	6858      	ldr	r0, [r3, #4]
 8016390:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016394:	68ba      	ldr	r2, [r7, #8]
 8016396:	4413      	add	r3, r2
 8016398:	8bfa      	ldrh	r2, [r7, #30]
 801639a:	4619      	mov	r1, r3
 801639c:	f005 f9b0 	bl	801b700 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80163a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80163a2:	f7fb f983 	bl	80116ac <pbuf_clen>
 80163a6:	4603      	mov	r3, r0
 80163a8:	461a      	mov	r2, r3
 80163aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163ae:	4413      	add	r3, r2
 80163b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80163b4:	e041      	b.n	801643a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80163b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163b8:	685b      	ldr	r3, [r3, #4]
 80163ba:	637b      	str	r3, [r7, #52]	; 0x34
 80163bc:	e002      	b.n	80163c4 <tcp_write+0x23c>
 80163be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	637b      	str	r3, [r7, #52]	; 0x34
 80163c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d1f8      	bne.n	80163be <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80163cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ce:	7b1b      	ldrb	r3, [r3, #12]
 80163d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d115      	bne.n	8016404 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80163d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163de:	8952      	ldrh	r2, [r2, #10]
 80163e0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80163e2:	68ba      	ldr	r2, [r7, #8]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d10d      	bne.n	8016404 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80163e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d006      	beq.n	80163fe <tcp_write+0x276>
 80163f0:	4b1c      	ldr	r3, [pc, #112]	; (8016464 <tcp_write+0x2dc>)
 80163f2:	f240 2231 	movw	r2, #561	; 0x231
 80163f6:	4922      	ldr	r1, [pc, #136]	; (8016480 <tcp_write+0x2f8>)
 80163f8:	481c      	ldr	r0, [pc, #112]	; (801646c <tcp_write+0x2e4>)
 80163fa:	f005 fc2f 	bl	801bc5c <printf>
          extendlen = seglen;
 80163fe:	8bfb      	ldrh	r3, [r7, #30]
 8016400:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016402:	e01a      	b.n	801643a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016404:	8bfb      	ldrh	r3, [r7, #30]
 8016406:	2201      	movs	r2, #1
 8016408:	4619      	mov	r1, r3
 801640a:	2000      	movs	r0, #0
 801640c:	f7fa fddc 	bl	8010fc8 <pbuf_alloc>
 8016410:	6578      	str	r0, [r7, #84]	; 0x54
 8016412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016414:	2b00      	cmp	r3, #0
 8016416:	f000 81e0 	beq.w	80167da <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801641a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801641e:	68ba      	ldr	r2, [r7, #8]
 8016420:	441a      	add	r2, r3
 8016422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016424:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016426:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016428:	f7fb f940 	bl	80116ac <pbuf_clen>
 801642c:	4603      	mov	r3, r0
 801642e:	461a      	mov	r2, r3
 8016430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016434:	4413      	add	r3, r2
 8016436:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801643a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801643e:	8bfb      	ldrh	r3, [r7, #30]
 8016440:	4413      	add	r3, r2
 8016442:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016446:	e0dc      	b.n	8016602 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801644e:	2b00      	cmp	r3, #0
 8016450:	f000 80d7 	beq.w	8016602 <tcp_write+0x47a>
 8016454:	4b03      	ldr	r3, [pc, #12]	; (8016464 <tcp_write+0x2dc>)
 8016456:	f240 224a 	movw	r2, #586	; 0x24a
 801645a:	490a      	ldr	r1, [pc, #40]	; (8016484 <tcp_write+0x2fc>)
 801645c:	4803      	ldr	r0, [pc, #12]	; (801646c <tcp_write+0x2e4>)
 801645e:	f005 fbfd 	bl	801bc5c <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016462:	e0ce      	b.n	8016602 <tcp_write+0x47a>
 8016464:	08027028 	.word	0x08027028
 8016468:	080271c8 	.word	0x080271c8
 801646c:	0802707c 	.word	0x0802707c
 8016470:	080271e0 	.word	0x080271e0
 8016474:	08027214 	.word	0x08027214
 8016478:	0802722c 	.word	0x0802722c
 801647c:	0802724c 	.word	0x0802724c
 8016480:	0802726c 	.word	0x0802726c
 8016484:	08027298 	.word	0x08027298
    struct pbuf *p;
    u16_t left = len - pos;
 8016488:	88fa      	ldrh	r2, [r7, #6]
 801648a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801648e:	1ad3      	subs	r3, r2, r3
 8016490:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016492:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016496:	b29b      	uxth	r3, r3
 8016498:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801649a:	1ad3      	subs	r3, r2, r3
 801649c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801649e:	8b7a      	ldrh	r2, [r7, #26]
 80164a0:	8bbb      	ldrh	r3, [r7, #28]
 80164a2:	4293      	cmp	r3, r2
 80164a4:	bf28      	it	cs
 80164a6:	4613      	movcs	r3, r2
 80164a8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80164aa:	797b      	ldrb	r3, [r7, #5]
 80164ac:	f003 0301 	and.w	r3, r3, #1
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d036      	beq.n	8016522 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80164b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80164b8:	b29a      	uxth	r2, r3
 80164ba:	8b3b      	ldrh	r3, [r7, #24]
 80164bc:	4413      	add	r3, r2
 80164be:	b299      	uxth	r1, r3
 80164c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	bf0c      	ite	eq
 80164c6:	2301      	moveq	r3, #1
 80164c8:	2300      	movne	r3, #0
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	f107 0012 	add.w	r0, r7, #18
 80164d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80164d2:	9302      	str	r3, [sp, #8]
 80164d4:	797b      	ldrb	r3, [r7, #5]
 80164d6:	9301      	str	r3, [sp, #4]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	9300      	str	r3, [sp, #0]
 80164dc:	4603      	mov	r3, r0
 80164de:	2036      	movs	r0, #54	; 0x36
 80164e0:	f7ff fd5e 	bl	8015fa0 <tcp_pbuf_prealloc>
 80164e4:	6338      	str	r0, [r7, #48]	; 0x30
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f000 8178 	beq.w	80167de <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80164ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f0:	895b      	ldrh	r3, [r3, #10]
 80164f2:	8b3a      	ldrh	r2, [r7, #24]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d906      	bls.n	8016506 <tcp_write+0x37e>
 80164f8:	4b8c      	ldr	r3, [pc, #560]	; (801672c <tcp_write+0x5a4>)
 80164fa:	f240 2266 	movw	r2, #614	; 0x266
 80164fe:	498c      	ldr	r1, [pc, #560]	; (8016730 <tcp_write+0x5a8>)
 8016500:	488c      	ldr	r0, [pc, #560]	; (8016734 <tcp_write+0x5ac>)
 8016502:	f005 fbab 	bl	801bc5c <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016508:	685a      	ldr	r2, [r3, #4]
 801650a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801650e:	18d0      	adds	r0, r2, r3
 8016510:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016514:	68ba      	ldr	r2, [r7, #8]
 8016516:	4413      	add	r3, r2
 8016518:	8b3a      	ldrh	r2, [r7, #24]
 801651a:	4619      	mov	r1, r3
 801651c:	f005 f8f0 	bl	801b700 <memcpy>
 8016520:	e02f      	b.n	8016582 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016522:	8a7b      	ldrh	r3, [r7, #18]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d006      	beq.n	8016536 <tcp_write+0x3ae>
 8016528:	4b80      	ldr	r3, [pc, #512]	; (801672c <tcp_write+0x5a4>)
 801652a:	f240 2271 	movw	r2, #625	; 0x271
 801652e:	4982      	ldr	r1, [pc, #520]	; (8016738 <tcp_write+0x5b0>)
 8016530:	4880      	ldr	r0, [pc, #512]	; (8016734 <tcp_write+0x5ac>)
 8016532:	f005 fb93 	bl	801bc5c <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016536:	8b3b      	ldrh	r3, [r7, #24]
 8016538:	2201      	movs	r2, #1
 801653a:	4619      	mov	r1, r3
 801653c:	2036      	movs	r0, #54	; 0x36
 801653e:	f7fa fd43 	bl	8010fc8 <pbuf_alloc>
 8016542:	6178      	str	r0, [r7, #20]
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	2b00      	cmp	r3, #0
 8016548:	f000 814b 	beq.w	80167e2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801654c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016550:	68ba      	ldr	r2, [r7, #8]
 8016552:	441a      	add	r2, r3
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016558:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801655c:	b29b      	uxth	r3, r3
 801655e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016562:	4619      	mov	r1, r3
 8016564:	2036      	movs	r0, #54	; 0x36
 8016566:	f7fa fd2f 	bl	8010fc8 <pbuf_alloc>
 801656a:	6338      	str	r0, [r7, #48]	; 0x30
 801656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656e:	2b00      	cmp	r3, #0
 8016570:	d103      	bne.n	801657a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016572:	6978      	ldr	r0, [r7, #20]
 8016574:	f7fb f80c 	bl	8011590 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016578:	e136      	b.n	80167e8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801657a:	6979      	ldr	r1, [r7, #20]
 801657c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801657e:	f7fb f8d5 	bl	801172c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016584:	f7fb f892 	bl	80116ac <pbuf_clen>
 8016588:	4603      	mov	r3, r0
 801658a:	461a      	mov	r2, r3
 801658c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016590:	4413      	add	r3, r2
 8016592:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801659a:	2b09      	cmp	r3, #9
 801659c:	d903      	bls.n	80165a6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801659e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165a0:	f7fa fff6 	bl	8011590 <pbuf_free>
      goto memerr;
 80165a4:	e120      	b.n	80167e8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80165aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80165ae:	441a      	add	r2, r3
 80165b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165b4:	9300      	str	r3, [sp, #0]
 80165b6:	4613      	mov	r3, r2
 80165b8:	2200      	movs	r2, #0
 80165ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f7ff fc51 	bl	8015e64 <tcp_create_segment>
 80165c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80165c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	f000 810d 	beq.w	80167e6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80165cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d102      	bne.n	80165d8 <tcp_write+0x450>
      queue = seg;
 80165d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165d4:	647b      	str	r3, [r7, #68]	; 0x44
 80165d6:	e00c      	b.n	80165f2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80165d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d106      	bne.n	80165ec <tcp_write+0x464>
 80165de:	4b53      	ldr	r3, [pc, #332]	; (801672c <tcp_write+0x5a4>)
 80165e0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80165e4:	4955      	ldr	r1, [pc, #340]	; (801673c <tcp_write+0x5b4>)
 80165e6:	4853      	ldr	r0, [pc, #332]	; (8016734 <tcp_write+0x5ac>)
 80165e8:	f005 fb38 	bl	801bc5c <printf>
      prev_seg->next = seg;
 80165ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80165f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80165f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165f4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80165f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80165fa:	8b3b      	ldrh	r3, [r7, #24]
 80165fc:	4413      	add	r3, r2
 80165fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016602:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016606:	88fb      	ldrh	r3, [r7, #6]
 8016608:	429a      	cmp	r2, r3
 801660a:	f4ff af3d 	bcc.w	8016488 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801660e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016610:	2b00      	cmp	r3, #0
 8016612:	d02c      	beq.n	801666e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016616:	685b      	ldr	r3, [r3, #4]
 8016618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801661a:	e01e      	b.n	801665a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661e:	891a      	ldrh	r2, [r3, #8]
 8016620:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016622:	4413      	add	r3, r2
 8016624:	b29a      	uxth	r2, r3
 8016626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016628:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d110      	bne.n	8016654 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016638:	8952      	ldrh	r2, [r2, #10]
 801663a:	4413      	add	r3, r2
 801663c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801663e:	68b9      	ldr	r1, [r7, #8]
 8016640:	4618      	mov	r0, r3
 8016642:	f005 f85d 	bl	801b700 <memcpy>
        p->len += oversize_used;
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	895a      	ldrh	r2, [r3, #10]
 801664a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801664c:	4413      	add	r3, r2
 801664e:	b29a      	uxth	r2, r3
 8016650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016652:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	62fb      	str	r3, [r7, #44]	; 0x2c
 801665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801665c:	2b00      	cmp	r3, #0
 801665e:	d1dd      	bne.n	801661c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016662:	891a      	ldrh	r2, [r3, #8]
 8016664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016666:	4413      	add	r3, r2
 8016668:	b29a      	uxth	r2, r3
 801666a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801666c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801666e:	8a7a      	ldrh	r2, [r7, #18]
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016678:	2b00      	cmp	r3, #0
 801667a:	d018      	beq.n	80166ae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801667c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801667e:	2b00      	cmp	r3, #0
 8016680:	d106      	bne.n	8016690 <tcp_write+0x508>
 8016682:	4b2a      	ldr	r3, [pc, #168]	; (801672c <tcp_write+0x5a4>)
 8016684:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016688:	492d      	ldr	r1, [pc, #180]	; (8016740 <tcp_write+0x5b8>)
 801668a:	482a      	ldr	r0, [pc, #168]	; (8016734 <tcp_write+0x5ac>)
 801668c:	f005 fae6 	bl	801bc5c <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016692:	685b      	ldr	r3, [r3, #4]
 8016694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016696:	4618      	mov	r0, r3
 8016698:	f7fb f848 	bl	801172c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801669c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801669e:	891a      	ldrh	r2, [r3, #8]
 80166a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166a2:	891b      	ldrh	r3, [r3, #8]
 80166a4:	4413      	add	r3, r2
 80166a6:	b29a      	uxth	r2, r3
 80166a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166aa:	811a      	strh	r2, [r3, #8]
 80166ac:	e037      	b.n	801671e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80166ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d034      	beq.n	801671e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80166b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d003      	beq.n	80166c2 <tcp_write+0x53a>
 80166ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166bc:	685b      	ldr	r3, [r3, #4]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d106      	bne.n	80166d0 <tcp_write+0x548>
 80166c2:	4b1a      	ldr	r3, [pc, #104]	; (801672c <tcp_write+0x5a4>)
 80166c4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80166c8:	491e      	ldr	r1, [pc, #120]	; (8016744 <tcp_write+0x5bc>)
 80166ca:	481a      	ldr	r0, [pc, #104]	; (8016734 <tcp_write+0x5ac>)
 80166cc:	f005 fac6 	bl	801bc5c <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80166d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80166d2:	685b      	ldr	r3, [r3, #4]
 80166d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80166d6:	e009      	b.n	80166ec <tcp_write+0x564>
      p->tot_len += extendlen;
 80166d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166da:	891a      	ldrh	r2, [r3, #8]
 80166dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166de:	4413      	add	r3, r2
 80166e0:	b29a      	uxth	r2, r3
 80166e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166e4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80166e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80166ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d1f1      	bne.n	80166d8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80166f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f6:	891a      	ldrh	r2, [r3, #8]
 80166f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166fa:	4413      	add	r3, r2
 80166fc:	b29a      	uxth	r2, r3
 80166fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016700:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016704:	895a      	ldrh	r2, [r3, #10]
 8016706:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016708:	4413      	add	r3, r2
 801670a:	b29a      	uxth	r2, r3
 801670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016712:	891a      	ldrh	r2, [r3, #8]
 8016714:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016716:	4413      	add	r3, r2
 8016718:	b29a      	uxth	r2, r3
 801671a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801671c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801671e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016720:	2b00      	cmp	r3, #0
 8016722:	d111      	bne.n	8016748 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016728:	66da      	str	r2, [r3, #108]	; 0x6c
 801672a:	e010      	b.n	801674e <tcp_write+0x5c6>
 801672c:	08027028 	.word	0x08027028
 8016730:	080272c8 	.word	0x080272c8
 8016734:	0802707c 	.word	0x0802707c
 8016738:	08027308 	.word	0x08027308
 801673c:	08027318 	.word	0x08027318
 8016740:	0802732c 	.word	0x0802732c
 8016744:	08027364 	.word	0x08027364
  } else {
    last_unsent->next = queue;
 8016748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801674a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801674c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016752:	88fb      	ldrh	r3, [r7, #6]
 8016754:	441a      	add	r2, r3
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016760:	88fb      	ldrh	r3, [r7, #6]
 8016762:	1ad3      	subs	r3, r2, r3
 8016764:	b29a      	uxth	r2, r3
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016772:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801677c:	2b00      	cmp	r3, #0
 801677e:	d00e      	beq.n	801679e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016784:	2b00      	cmp	r3, #0
 8016786:	d10a      	bne.n	801679e <tcp_write+0x616>
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801678c:	2b00      	cmp	r3, #0
 801678e:	d106      	bne.n	801679e <tcp_write+0x616>
 8016790:	4b2c      	ldr	r3, [pc, #176]	; (8016844 <tcp_write+0x6bc>)
 8016792:	f240 3212 	movw	r2, #786	; 0x312
 8016796:	492c      	ldr	r1, [pc, #176]	; (8016848 <tcp_write+0x6c0>)
 8016798:	482c      	ldr	r0, [pc, #176]	; (801684c <tcp_write+0x6c4>)
 801679a:	f005 fa5f 	bl	801bc5c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801679e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d016      	beq.n	80167d2 <tcp_write+0x64a>
 80167a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d012      	beq.n	80167d2 <tcp_write+0x64a>
 80167ac:	797b      	ldrb	r3, [r7, #5]
 80167ae:	f003 0302 	and.w	r3, r3, #2
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d10d      	bne.n	80167d2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80167b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167b8:	68db      	ldr	r3, [r3, #12]
 80167ba:	899b      	ldrh	r3, [r3, #12]
 80167bc:	b29c      	uxth	r4, r3
 80167be:	2008      	movs	r0, #8
 80167c0:	f7f9 fb2a 	bl	800fe18 <lwip_htons>
 80167c4:	4603      	mov	r3, r0
 80167c6:	461a      	mov	r2, r3
 80167c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167ca:	68db      	ldr	r3, [r3, #12]
 80167cc:	4322      	orrs	r2, r4
 80167ce:	b292      	uxth	r2, r2
 80167d0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80167d2:	2300      	movs	r3, #0
 80167d4:	e031      	b.n	801683a <tcp_write+0x6b2>
          goto memerr;
 80167d6:	bf00      	nop
 80167d8:	e006      	b.n	80167e8 <tcp_write+0x660>
            goto memerr;
 80167da:	bf00      	nop
 80167dc:	e004      	b.n	80167e8 <tcp_write+0x660>
        goto memerr;
 80167de:	bf00      	nop
 80167e0:	e002      	b.n	80167e8 <tcp_write+0x660>
        goto memerr;
 80167e2:	bf00      	nop
 80167e4:	e000      	b.n	80167e8 <tcp_write+0x660>
      goto memerr;
 80167e6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	8b5b      	ldrh	r3, [r3, #26]
 80167ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167f0:	b29a      	uxth	r2, r3
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80167f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d002      	beq.n	8016802 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80167fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80167fe:	f7fa fec7 	bl	8011590 <pbuf_free>
  }
  if (queue != NULL) {
 8016802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016804:	2b00      	cmp	r3, #0
 8016806:	d002      	beq.n	801680e <tcp_write+0x686>
    tcp_segs_free(queue);
 8016808:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801680a:	f7fc fb51 	bl	8012eb0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016814:	2b00      	cmp	r3, #0
 8016816:	d00e      	beq.n	8016836 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801681c:	2b00      	cmp	r3, #0
 801681e:	d10a      	bne.n	8016836 <tcp_write+0x6ae>
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016824:	2b00      	cmp	r3, #0
 8016826:	d106      	bne.n	8016836 <tcp_write+0x6ae>
 8016828:	4b06      	ldr	r3, [pc, #24]	; (8016844 <tcp_write+0x6bc>)
 801682a:	f240 3227 	movw	r2, #807	; 0x327
 801682e:	4906      	ldr	r1, [pc, #24]	; (8016848 <tcp_write+0x6c0>)
 8016830:	4806      	ldr	r0, [pc, #24]	; (801684c <tcp_write+0x6c4>)
 8016832:	f005 fa13 	bl	801bc5c <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016836:	f04f 33ff 	mov.w	r3, #4294967295
}
 801683a:	4618      	mov	r0, r3
 801683c:	375c      	adds	r7, #92	; 0x5c
 801683e:	46bd      	mov	sp, r7
 8016840:	bd90      	pop	{r4, r7, pc}
 8016842:	bf00      	nop
 8016844:	08027028 	.word	0x08027028
 8016848:	0802739c 	.word	0x0802739c
 801684c:	0802707c 	.word	0x0802707c

08016850 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016850:	b590      	push	{r4, r7, lr}
 8016852:	b08b      	sub	sp, #44	; 0x2c
 8016854:	af02      	add	r7, sp, #8
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	460b      	mov	r3, r1
 801685a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801685c:	2300      	movs	r3, #0
 801685e:	61fb      	str	r3, [r7, #28]
 8016860:	2300      	movs	r3, #0
 8016862:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016864:	2300      	movs	r3, #0
 8016866:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d106      	bne.n	801687c <tcp_split_unsent_seg+0x2c>
 801686e:	4b95      	ldr	r3, [pc, #596]	; (8016ac4 <tcp_split_unsent_seg+0x274>)
 8016870:	f240 324b 	movw	r2, #843	; 0x34b
 8016874:	4994      	ldr	r1, [pc, #592]	; (8016ac8 <tcp_split_unsent_seg+0x278>)
 8016876:	4895      	ldr	r0, [pc, #596]	; (8016acc <tcp_split_unsent_seg+0x27c>)
 8016878:	f005 f9f0 	bl	801bc5c <printf>

  useg = pcb->unsent;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016880:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016882:	697b      	ldr	r3, [r7, #20]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d102      	bne.n	801688e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016888:	f04f 33ff 	mov.w	r3, #4294967295
 801688c:	e116      	b.n	8016abc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801688e:	887b      	ldrh	r3, [r7, #2]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d109      	bne.n	80168a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016894:	4b8b      	ldr	r3, [pc, #556]	; (8016ac4 <tcp_split_unsent_seg+0x274>)
 8016896:	f240 3253 	movw	r2, #851	; 0x353
 801689a:	498d      	ldr	r1, [pc, #564]	; (8016ad0 <tcp_split_unsent_seg+0x280>)
 801689c:	488b      	ldr	r0, [pc, #556]	; (8016acc <tcp_split_unsent_seg+0x27c>)
 801689e:	f005 f9dd 	bl	801bc5c <printf>
    return ERR_VAL;
 80168a2:	f06f 0305 	mvn.w	r3, #5
 80168a6:	e109      	b.n	8016abc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80168a8:	697b      	ldr	r3, [r7, #20]
 80168aa:	891b      	ldrh	r3, [r3, #8]
 80168ac:	887a      	ldrh	r2, [r7, #2]
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d301      	bcc.n	80168b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80168b2:	2300      	movs	r3, #0
 80168b4:	e102      	b.n	8016abc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168ba:	887a      	ldrh	r2, [r7, #2]
 80168bc:	429a      	cmp	r2, r3
 80168be:	d906      	bls.n	80168ce <tcp_split_unsent_seg+0x7e>
 80168c0:	4b80      	ldr	r3, [pc, #512]	; (8016ac4 <tcp_split_unsent_seg+0x274>)
 80168c2:	f240 325b 	movw	r2, #859	; 0x35b
 80168c6:	4983      	ldr	r1, [pc, #524]	; (8016ad4 <tcp_split_unsent_seg+0x284>)
 80168c8:	4880      	ldr	r0, [pc, #512]	; (8016acc <tcp_split_unsent_seg+0x27c>)
 80168ca:	f005 f9c7 	bl	801bc5c <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	891b      	ldrh	r3, [r3, #8]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d106      	bne.n	80168e4 <tcp_split_unsent_seg+0x94>
 80168d6:	4b7b      	ldr	r3, [pc, #492]	; (8016ac4 <tcp_split_unsent_seg+0x274>)
 80168d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80168dc:	497e      	ldr	r1, [pc, #504]	; (8016ad8 <tcp_split_unsent_seg+0x288>)
 80168de:	487b      	ldr	r0, [pc, #492]	; (8016acc <tcp_split_unsent_seg+0x27c>)
 80168e0:	f005 f9bc 	bl	801bc5c <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	7a9b      	ldrb	r3, [r3, #10]
 80168e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80168ea:	7bfb      	ldrb	r3, [r7, #15]
 80168ec:	009b      	lsls	r3, r3, #2
 80168ee:	b2db      	uxtb	r3, r3
 80168f0:	f003 0304 	and.w	r3, r3, #4
 80168f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	891a      	ldrh	r2, [r3, #8]
 80168fa:	887b      	ldrh	r3, [r7, #2]
 80168fc:	1ad3      	subs	r3, r2, r3
 80168fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016900:	7bbb      	ldrb	r3, [r7, #14]
 8016902:	b29a      	uxth	r2, r3
 8016904:	89bb      	ldrh	r3, [r7, #12]
 8016906:	4413      	add	r3, r2
 8016908:	b29b      	uxth	r3, r3
 801690a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801690e:	4619      	mov	r1, r3
 8016910:	2036      	movs	r0, #54	; 0x36
 8016912:	f7fa fb59 	bl	8010fc8 <pbuf_alloc>
 8016916:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016918:	693b      	ldr	r3, [r7, #16]
 801691a:	2b00      	cmp	r3, #0
 801691c:	f000 80b7 	beq.w	8016a8e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	891a      	ldrh	r2, [r3, #8]
 8016926:	697b      	ldr	r3, [r7, #20]
 8016928:	891b      	ldrh	r3, [r3, #8]
 801692a:	1ad3      	subs	r3, r2, r3
 801692c:	b29a      	uxth	r2, r3
 801692e:	887b      	ldrh	r3, [r7, #2]
 8016930:	4413      	add	r3, r2
 8016932:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	6858      	ldr	r0, [r3, #4]
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	685a      	ldr	r2, [r3, #4]
 801693c:	7bbb      	ldrb	r3, [r7, #14]
 801693e:	18d1      	adds	r1, r2, r3
 8016940:	897b      	ldrh	r3, [r7, #10]
 8016942:	89ba      	ldrh	r2, [r7, #12]
 8016944:	f7fb f82a 	bl	801199c <pbuf_copy_partial>
 8016948:	4603      	mov	r3, r0
 801694a:	461a      	mov	r2, r3
 801694c:	89bb      	ldrh	r3, [r7, #12]
 801694e:	4293      	cmp	r3, r2
 8016950:	f040 809f 	bne.w	8016a92 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016954:	697b      	ldr	r3, [r7, #20]
 8016956:	68db      	ldr	r3, [r3, #12]
 8016958:	899b      	ldrh	r3, [r3, #12]
 801695a:	b29b      	uxth	r3, r3
 801695c:	4618      	mov	r0, r3
 801695e:	f7f9 fa5b 	bl	800fe18 <lwip_htons>
 8016962:	4603      	mov	r3, r0
 8016964:	b2db      	uxtb	r3, r3
 8016966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801696a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801696c:	2300      	movs	r3, #0
 801696e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016970:	7efb      	ldrb	r3, [r7, #27]
 8016972:	f003 0308 	and.w	r3, r3, #8
 8016976:	2b00      	cmp	r3, #0
 8016978:	d007      	beq.n	801698a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801697a:	7efb      	ldrb	r3, [r7, #27]
 801697c:	f023 0308 	bic.w	r3, r3, #8
 8016980:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016982:	7ebb      	ldrb	r3, [r7, #26]
 8016984:	f043 0308 	orr.w	r3, r3, #8
 8016988:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801698a:	7efb      	ldrb	r3, [r7, #27]
 801698c:	f003 0301 	and.w	r3, r3, #1
 8016990:	2b00      	cmp	r3, #0
 8016992:	d007      	beq.n	80169a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016994:	7efb      	ldrb	r3, [r7, #27]
 8016996:	f023 0301 	bic.w	r3, r3, #1
 801699a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801699c:	7ebb      	ldrb	r3, [r7, #26]
 801699e:	f043 0301 	orr.w	r3, r3, #1
 80169a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	68db      	ldr	r3, [r3, #12]
 80169a8:	685b      	ldr	r3, [r3, #4]
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7f9 fa49 	bl	800fe42 <lwip_htonl>
 80169b0:	4602      	mov	r2, r0
 80169b2:	887b      	ldrh	r3, [r7, #2]
 80169b4:	18d1      	adds	r1, r2, r3
 80169b6:	7eba      	ldrb	r2, [r7, #26]
 80169b8:	7bfb      	ldrb	r3, [r7, #15]
 80169ba:	9300      	str	r3, [sp, #0]
 80169bc:	460b      	mov	r3, r1
 80169be:	6939      	ldr	r1, [r7, #16]
 80169c0:	6878      	ldr	r0, [r7, #4]
 80169c2:	f7ff fa4f 	bl	8015e64 <tcp_create_segment>
 80169c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d063      	beq.n	8016a96 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7fa fe6a 	bl	80116ac <pbuf_clen>
 80169d8:	4603      	mov	r3, r0
 80169da:	461a      	mov	r2, r3
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80169e2:	1a9b      	subs	r3, r3, r2
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80169ec:	697b      	ldr	r3, [r7, #20]
 80169ee:	6858      	ldr	r0, [r3, #4]
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	685b      	ldr	r3, [r3, #4]
 80169f4:	891a      	ldrh	r2, [r3, #8]
 80169f6:	89bb      	ldrh	r3, [r7, #12]
 80169f8:	1ad3      	subs	r3, r2, r3
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	4619      	mov	r1, r3
 80169fe:	f7fa fc41 	bl	8011284 <pbuf_realloc>
  useg->len -= remainder;
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	891a      	ldrh	r2, [r3, #8]
 8016a06:	89bb      	ldrh	r3, [r7, #12]
 8016a08:	1ad3      	subs	r3, r2, r3
 8016a0a:	b29a      	uxth	r2, r3
 8016a0c:	697b      	ldr	r3, [r7, #20]
 8016a0e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	899b      	ldrh	r3, [r3, #12]
 8016a16:	b29c      	uxth	r4, r3
 8016a18:	7efb      	ldrb	r3, [r7, #27]
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7f9 f9fb 	bl	800fe18 <lwip_htons>
 8016a22:	4603      	mov	r3, r0
 8016a24:	461a      	mov	r2, r3
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	68db      	ldr	r3, [r3, #12]
 8016a2a:	4322      	orrs	r2, r4
 8016a2c:	b292      	uxth	r2, r2
 8016a2e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7fa fe39 	bl	80116ac <pbuf_clen>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a44:	4413      	add	r3, r2
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	4618      	mov	r0, r3
 8016a54:	f7fa fe2a 	bl	80116ac <pbuf_clen>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	461a      	mov	r2, r3
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a62:	4413      	add	r3, r2
 8016a64:	b29a      	uxth	r2, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	69fa      	ldr	r2, [r7, #28]
 8016a78:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016a7a:	69fb      	ldr	r3, [r7, #28]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d103      	bne.n	8016a8a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2200      	movs	r2, #0
 8016a86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	e016      	b.n	8016abc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016a8e:	bf00      	nop
 8016a90:	e002      	b.n	8016a98 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016a92:	bf00      	nop
 8016a94:	e000      	b.n	8016a98 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016a96:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016a98:	69fb      	ldr	r3, [r7, #28]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d006      	beq.n	8016aac <tcp_split_unsent_seg+0x25c>
 8016a9e:	4b09      	ldr	r3, [pc, #36]	; (8016ac4 <tcp_split_unsent_seg+0x274>)
 8016aa0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016aa4:	490d      	ldr	r1, [pc, #52]	; (8016adc <tcp_split_unsent_seg+0x28c>)
 8016aa6:	4809      	ldr	r0, [pc, #36]	; (8016acc <tcp_split_unsent_seg+0x27c>)
 8016aa8:	f005 f8d8 	bl	801bc5c <printf>
  if (p != NULL) {
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d002      	beq.n	8016ab8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016ab2:	6938      	ldr	r0, [r7, #16]
 8016ab4:	f7fa fd6c 	bl	8011590 <pbuf_free>
  }

  return ERR_MEM;
 8016ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	3724      	adds	r7, #36	; 0x24
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd90      	pop	{r4, r7, pc}
 8016ac4:	08027028 	.word	0x08027028
 8016ac8:	080273bc 	.word	0x080273bc
 8016acc:	0802707c 	.word	0x0802707c
 8016ad0:	080273e0 	.word	0x080273e0
 8016ad4:	08027404 	.word	0x08027404
 8016ad8:	08027414 	.word	0x08027414
 8016adc:	08027424 	.word	0x08027424

08016ae0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016ae0:	b590      	push	{r4, r7, lr}
 8016ae2:	b085      	sub	sp, #20
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d106      	bne.n	8016afc <tcp_send_fin+0x1c>
 8016aee:	4b21      	ldr	r3, [pc, #132]	; (8016b74 <tcp_send_fin+0x94>)
 8016af0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016af4:	4920      	ldr	r1, [pc, #128]	; (8016b78 <tcp_send_fin+0x98>)
 8016af6:	4821      	ldr	r0, [pc, #132]	; (8016b7c <tcp_send_fin+0x9c>)
 8016af8:	f005 f8b0 	bl	801bc5c <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d02e      	beq.n	8016b62 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b08:	60fb      	str	r3, [r7, #12]
 8016b0a:	e002      	b.n	8016b12 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d1f8      	bne.n	8016b0c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	899b      	ldrh	r3, [r3, #12]
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7f9 f978 	bl	800fe18 <lwip_htons>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	b2db      	uxtb	r3, r3
 8016b2c:	f003 0307 	and.w	r3, r3, #7
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d116      	bne.n	8016b62 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	68db      	ldr	r3, [r3, #12]
 8016b38:	899b      	ldrh	r3, [r3, #12]
 8016b3a:	b29c      	uxth	r4, r3
 8016b3c:	2001      	movs	r0, #1
 8016b3e:	f7f9 f96b 	bl	800fe18 <lwip_htons>
 8016b42:	4603      	mov	r3, r0
 8016b44:	461a      	mov	r2, r3
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	4322      	orrs	r2, r4
 8016b4c:	b292      	uxth	r2, r2
 8016b4e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	8b5b      	ldrh	r3, [r3, #26]
 8016b54:	f043 0320 	orr.w	r3, r3, #32
 8016b58:	b29a      	uxth	r2, r3
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e004      	b.n	8016b6c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016b62:	2101      	movs	r1, #1
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f000 f80b 	bl	8016b80 <tcp_enqueue_flags>
 8016b6a:	4603      	mov	r3, r0
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3714      	adds	r7, #20
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd90      	pop	{r4, r7, pc}
 8016b74:	08027028 	.word	0x08027028
 8016b78:	08027430 	.word	0x08027430
 8016b7c:	0802707c 	.word	0x0802707c

08016b80 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b08a      	sub	sp, #40	; 0x28
 8016b84:	af02      	add	r7, sp, #8
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	460b      	mov	r3, r1
 8016b8a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016b94:	78fb      	ldrb	r3, [r7, #3]
 8016b96:	f003 0303 	and.w	r3, r3, #3
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d106      	bne.n	8016bac <tcp_enqueue_flags+0x2c>
 8016b9e:	4b67      	ldr	r3, [pc, #412]	; (8016d3c <tcp_enqueue_flags+0x1bc>)
 8016ba0:	f240 4211 	movw	r2, #1041	; 0x411
 8016ba4:	4966      	ldr	r1, [pc, #408]	; (8016d40 <tcp_enqueue_flags+0x1c0>)
 8016ba6:	4867      	ldr	r0, [pc, #412]	; (8016d44 <tcp_enqueue_flags+0x1c4>)
 8016ba8:	f005 f858 	bl	801bc5c <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d106      	bne.n	8016bc0 <tcp_enqueue_flags+0x40>
 8016bb2:	4b62      	ldr	r3, [pc, #392]	; (8016d3c <tcp_enqueue_flags+0x1bc>)
 8016bb4:	f240 4213 	movw	r2, #1043	; 0x413
 8016bb8:	4963      	ldr	r1, [pc, #396]	; (8016d48 <tcp_enqueue_flags+0x1c8>)
 8016bba:	4862      	ldr	r0, [pc, #392]	; (8016d44 <tcp_enqueue_flags+0x1c4>)
 8016bbc:	f005 f84e 	bl	801bc5c <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016bc0:	78fb      	ldrb	r3, [r7, #3]
 8016bc2:	f003 0302 	and.w	r3, r3, #2
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d001      	beq.n	8016bce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016bca:	2301      	movs	r3, #1
 8016bcc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016bce:	7ffb      	ldrb	r3, [r7, #31]
 8016bd0:	009b      	lsls	r3, r3, #2
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	f003 0304 	and.w	r3, r3, #4
 8016bd8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016bda:	7dfb      	ldrb	r3, [r7, #23]
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016be2:	4619      	mov	r1, r3
 8016be4:	2036      	movs	r0, #54	; 0x36
 8016be6:	f7fa f9ef 	bl	8010fc8 <pbuf_alloc>
 8016bea:	6138      	str	r0, [r7, #16]
 8016bec:	693b      	ldr	r3, [r7, #16]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d109      	bne.n	8016c06 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	8b5b      	ldrh	r3, [r3, #26]
 8016bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bfa:	b29a      	uxth	r2, r3
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016c00:	f04f 33ff 	mov.w	r3, #4294967295
 8016c04:	e095      	b.n	8016d32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	895a      	ldrh	r2, [r3, #10]
 8016c0a:	7dfb      	ldrb	r3, [r7, #23]
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	d206      	bcs.n	8016c20 <tcp_enqueue_flags+0xa0>
 8016c12:	4b4a      	ldr	r3, [pc, #296]	; (8016d3c <tcp_enqueue_flags+0x1bc>)
 8016c14:	f240 4239 	movw	r2, #1081	; 0x439
 8016c18:	494c      	ldr	r1, [pc, #304]	; (8016d4c <tcp_enqueue_flags+0x1cc>)
 8016c1a:	484a      	ldr	r0, [pc, #296]	; (8016d44 <tcp_enqueue_flags+0x1c4>)
 8016c1c:	f005 f81e 	bl	801bc5c <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016c24:	78fa      	ldrb	r2, [r7, #3]
 8016c26:	7ffb      	ldrb	r3, [r7, #31]
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	460b      	mov	r3, r1
 8016c2c:	6939      	ldr	r1, [r7, #16]
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f7ff f918 	bl	8015e64 <tcp_create_segment>
 8016c34:	60f8      	str	r0, [r7, #12]
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d109      	bne.n	8016c50 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	8b5b      	ldrh	r3, [r3, #26]
 8016c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c44:	b29a      	uxth	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4e:	e070      	b.n	8016d32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	f003 0303 	and.w	r3, r3, #3
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d006      	beq.n	8016c6a <tcp_enqueue_flags+0xea>
 8016c5c:	4b37      	ldr	r3, [pc, #220]	; (8016d3c <tcp_enqueue_flags+0x1bc>)
 8016c5e:	f240 4242 	movw	r2, #1090	; 0x442
 8016c62:	493b      	ldr	r1, [pc, #236]	; (8016d50 <tcp_enqueue_flags+0x1d0>)
 8016c64:	4837      	ldr	r0, [pc, #220]	; (8016d44 <tcp_enqueue_flags+0x1c4>)
 8016c66:	f004 fff9 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	891b      	ldrh	r3, [r3, #8]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d006      	beq.n	8016c80 <tcp_enqueue_flags+0x100>
 8016c72:	4b32      	ldr	r3, [pc, #200]	; (8016d3c <tcp_enqueue_flags+0x1bc>)
 8016c74:	f240 4243 	movw	r2, #1091	; 0x443
 8016c78:	4936      	ldr	r1, [pc, #216]	; (8016d54 <tcp_enqueue_flags+0x1d4>)
 8016c7a:	4832      	ldr	r0, [pc, #200]	; (8016d44 <tcp_enqueue_flags+0x1c4>)
 8016c7c:	f004 ffee 	bl	801bc5c <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d103      	bne.n	8016c90 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	68fa      	ldr	r2, [r7, #12]
 8016c8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8016c8e:	e00d      	b.n	8016cac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c94:	61bb      	str	r3, [r7, #24]
 8016c96:	e002      	b.n	8016c9e <tcp_enqueue_flags+0x11e>
 8016c98:	69bb      	ldr	r3, [r7, #24]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	61bb      	str	r3, [r7, #24]
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d1f8      	bne.n	8016c98 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016ca6:	69bb      	ldr	r3, [r7, #24]
 8016ca8:	68fa      	ldr	r2, [r7, #12]
 8016caa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016cb4:	78fb      	ldrb	r3, [r7, #3]
 8016cb6:	f003 0302 	and.w	r3, r3, #2
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d104      	bne.n	8016cc8 <tcp_enqueue_flags+0x148>
 8016cbe:	78fb      	ldrb	r3, [r7, #3]
 8016cc0:	f003 0301 	and.w	r3, r3, #1
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d004      	beq.n	8016cd2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ccc:	1c5a      	adds	r2, r3, #1
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016cd2:	78fb      	ldrb	r3, [r7, #3]
 8016cd4:	f003 0301 	and.w	r3, r3, #1
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d006      	beq.n	8016cea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	8b5b      	ldrh	r3, [r3, #26]
 8016ce0:	f043 0320 	orr.w	r3, r3, #32
 8016ce4:	b29a      	uxth	r2, r3
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7fa fcdc 	bl	80116ac <pbuf_clen>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016cfe:	4413      	add	r3, r2
 8016d00:	b29a      	uxth	r2, r3
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d00e      	beq.n	8016d30 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d10a      	bne.n	8016d30 <tcp_enqueue_flags+0x1b0>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d106      	bne.n	8016d30 <tcp_enqueue_flags+0x1b0>
 8016d22:	4b06      	ldr	r3, [pc, #24]	; (8016d3c <tcp_enqueue_flags+0x1bc>)
 8016d24:	f240 4265 	movw	r2, #1125	; 0x465
 8016d28:	490b      	ldr	r1, [pc, #44]	; (8016d58 <tcp_enqueue_flags+0x1d8>)
 8016d2a:	4806      	ldr	r0, [pc, #24]	; (8016d44 <tcp_enqueue_flags+0x1c4>)
 8016d2c:	f004 ff96 	bl	801bc5c <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016d30:	2300      	movs	r3, #0
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3720      	adds	r7, #32
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	08027028 	.word	0x08027028
 8016d40:	0802744c 	.word	0x0802744c
 8016d44:	0802707c 	.word	0x0802707c
 8016d48:	080274a4 	.word	0x080274a4
 8016d4c:	080274c4 	.word	0x080274c4
 8016d50:	08027500 	.word	0x08027500
 8016d54:	08027518 	.word	0x08027518
 8016d58:	08027544 	.word	0x08027544

08016d5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016d5c:	b5b0      	push	{r4, r5, r7, lr}
 8016d5e:	b08a      	sub	sp, #40	; 0x28
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d106      	bne.n	8016d78 <tcp_output+0x1c>
 8016d6a:	4b9e      	ldr	r3, [pc, #632]	; (8016fe4 <tcp_output+0x288>)
 8016d6c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016d70:	499d      	ldr	r1, [pc, #628]	; (8016fe8 <tcp_output+0x28c>)
 8016d72:	489e      	ldr	r0, [pc, #632]	; (8016fec <tcp_output+0x290>)
 8016d74:	f004 ff72 	bl	801bc5c <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	7d1b      	ldrb	r3, [r3, #20]
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d106      	bne.n	8016d8e <tcp_output+0x32>
 8016d80:	4b98      	ldr	r3, [pc, #608]	; (8016fe4 <tcp_output+0x288>)
 8016d82:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016d86:	499a      	ldr	r1, [pc, #616]	; (8016ff0 <tcp_output+0x294>)
 8016d88:	4898      	ldr	r0, [pc, #608]	; (8016fec <tcp_output+0x290>)
 8016d8a:	f004 ff67 	bl	801bc5c <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016d8e:	4b99      	ldr	r3, [pc, #612]	; (8016ff4 <tcp_output+0x298>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d101      	bne.n	8016d9c <tcp_output+0x40>
    return ERR_OK;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	e1ce      	b.n	801713a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016da8:	4293      	cmp	r3, r2
 8016daa:	bf28      	it	cs
 8016dac:	4613      	movcs	r3, r2
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016db6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d10b      	bne.n	8016dd6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	8b5b      	ldrh	r3, [r3, #26]
 8016dc2:	f003 0302 	and.w	r3, r3, #2
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	f000 81aa 	beq.w	8017120 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f000 fdcb 	bl	8017968 <tcp_send_empty_ack>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	e1b1      	b.n	801713a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016dd6:	6879      	ldr	r1, [r7, #4]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	3304      	adds	r3, #4
 8016ddc:	461a      	mov	r2, r3
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f7ff f824 	bl	8015e2c <tcp_route>
 8016de4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d102      	bne.n	8016df2 <tcp_output+0x96>
    return ERR_RTE;
 8016dec:	f06f 0303 	mvn.w	r3, #3
 8016df0:	e1a3      	b.n	801713a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d003      	beq.n	8016e00 <tcp_output+0xa4>
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d111      	bne.n	8016e24 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d002      	beq.n	8016e0c <tcp_output+0xb0>
 8016e06:	697b      	ldr	r3, [r7, #20]
 8016e08:	3304      	adds	r3, #4
 8016e0a:	e000      	b.n	8016e0e <tcp_output+0xb2>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d102      	bne.n	8016e1c <tcp_output+0xc0>
      return ERR_RTE;
 8016e16:	f06f 0303 	mvn.w	r3, #3
 8016e1a:	e18e      	b.n	801713a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e26:	68db      	ldr	r3, [r3, #12]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7f9 f809 	bl	800fe42 <lwip_htonl>
 8016e30:	4602      	mov	r2, r0
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e36:	1ad3      	subs	r3, r2, r3
 8016e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e3a:	8912      	ldrh	r2, [r2, #8]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	69ba      	ldr	r2, [r7, #24]
 8016e40:	429a      	cmp	r2, r3
 8016e42:	d227      	bcs.n	8016e94 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	4293      	cmp	r3, r2
 8016e50:	d114      	bne.n	8016e7c <tcp_output+0x120>
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d110      	bne.n	8016e7c <tcp_output+0x120>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d10b      	bne.n	8016e7c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2200      	movs	r2, #0
 8016e68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2201      	movs	r2, #1
 8016e70:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2200      	movs	r2, #0
 8016e78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	8b5b      	ldrh	r3, [r3, #26]
 8016e80:	f003 0302 	and.w	r3, r3, #2
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	f000 814d 	beq.w	8017124 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	f000 fd6c 	bl	8017968 <tcp_send_empty_ack>
 8016e90:	4603      	mov	r3, r0
 8016e92:	e152      	b.n	801713a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2200      	movs	r2, #0
 8016e98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ea0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016ea2:	6a3b      	ldr	r3, [r7, #32]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f000 811c 	beq.w	80170e2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016eaa:	e002      	b.n	8016eb2 <tcp_output+0x156>
 8016eac:	6a3b      	ldr	r3, [r7, #32]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	623b      	str	r3, [r7, #32]
 8016eb2:	6a3b      	ldr	r3, [r7, #32]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d1f8      	bne.n	8016eac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016eba:	e112      	b.n	80170e2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ebe:	68db      	ldr	r3, [r3, #12]
 8016ec0:	899b      	ldrh	r3, [r3, #12]
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7f8 ffa7 	bl	800fe18 <lwip_htons>
 8016eca:	4603      	mov	r3, r0
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	f003 0304 	and.w	r3, r3, #4
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d006      	beq.n	8016ee4 <tcp_output+0x188>
 8016ed6:	4b43      	ldr	r3, [pc, #268]	; (8016fe4 <tcp_output+0x288>)
 8016ed8:	f240 5236 	movw	r2, #1334	; 0x536
 8016edc:	4946      	ldr	r1, [pc, #280]	; (8016ff8 <tcp_output+0x29c>)
 8016ede:	4843      	ldr	r0, [pc, #268]	; (8016fec <tcp_output+0x290>)
 8016ee0:	f004 febc 	bl	801bc5c <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d01f      	beq.n	8016f2c <tcp_output+0x1d0>
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	8b5b      	ldrh	r3, [r3, #26]
 8016ef0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d119      	bne.n	8016f2c <tcp_output+0x1d0>
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d00b      	beq.n	8016f18 <tcp_output+0x1bc>
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d110      	bne.n	8016f2c <tcp_output+0x1d0>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f0e:	891a      	ldrh	r2, [r3, #8]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d209      	bcs.n	8016f2c <tcp_output+0x1d0>
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d004      	beq.n	8016f2c <tcp_output+0x1d0>
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f28:	2b08      	cmp	r3, #8
 8016f2a:	d901      	bls.n	8016f30 <tcp_output+0x1d4>
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	e000      	b.n	8016f32 <tcp_output+0x1d6>
 8016f30:	2300      	movs	r3, #0
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d106      	bne.n	8016f44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	8b5b      	ldrh	r3, [r3, #26]
 8016f3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f000 80e4 	beq.w	801710c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	7d1b      	ldrb	r3, [r3, #20]
 8016f48:	2b02      	cmp	r3, #2
 8016f4a:	d00d      	beq.n	8016f68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4e:	68db      	ldr	r3, [r3, #12]
 8016f50:	899b      	ldrh	r3, [r3, #12]
 8016f52:	b29c      	uxth	r4, r3
 8016f54:	2010      	movs	r0, #16
 8016f56:	f7f8 ff5f 	bl	800fe18 <lwip_htons>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f60:	68db      	ldr	r3, [r3, #12]
 8016f62:	4322      	orrs	r2, r4
 8016f64:	b292      	uxth	r2, r2
 8016f66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016f68:	697a      	ldr	r2, [r7, #20]
 8016f6a:	6879      	ldr	r1, [r7, #4]
 8016f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f6e:	f000 f909 	bl	8017184 <tcp_output_segment>
 8016f72:	4603      	mov	r3, r0
 8016f74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d009      	beq.n	8016f92 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	8b5b      	ldrh	r3, [r3, #26]
 8016f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f86:	b29a      	uxth	r2, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	835a      	strh	r2, [r3, #26]
      return err;
 8016f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f90:	e0d3      	b.n	801713a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f94:	681a      	ldr	r2, [r3, #0]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	7d1b      	ldrb	r3, [r3, #20]
 8016f9e:	2b02      	cmp	r3, #2
 8016fa0:	d006      	beq.n	8016fb0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	8b5b      	ldrh	r3, [r3, #26]
 8016fa6:	f023 0303 	bic.w	r3, r3, #3
 8016faa:	b29a      	uxth	r2, r3
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	685b      	ldr	r3, [r3, #4]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f7f8 ff43 	bl	800fe42 <lwip_htonl>
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc0:	891b      	ldrh	r3, [r3, #8]
 8016fc2:	461d      	mov	r5, r3
 8016fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	899b      	ldrh	r3, [r3, #12]
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7f8 ff23 	bl	800fe18 <lwip_htons>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	f003 0303 	and.w	r3, r3, #3
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00e      	beq.n	8016ffc <tcp_output+0x2a0>
 8016fde:	2301      	movs	r3, #1
 8016fe0:	e00d      	b.n	8016ffe <tcp_output+0x2a2>
 8016fe2:	bf00      	nop
 8016fe4:	08027028 	.word	0x08027028
 8016fe8:	0802756c 	.word	0x0802756c
 8016fec:	0802707c 	.word	0x0802707c
 8016ff0:	08027584 	.word	0x08027584
 8016ff4:	2000be68 	.word	0x2000be68
 8016ff8:	080275ac 	.word	0x080275ac
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	442b      	add	r3, r5
 8017000:	4423      	add	r3, r4
 8017002:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	1ad3      	subs	r3, r2, r3
 801700c:	2b00      	cmp	r3, #0
 801700e:	da02      	bge.n	8017016 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	68ba      	ldr	r2, [r7, #8]
 8017014:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017018:	891b      	ldrh	r3, [r3, #8]
 801701a:	461c      	mov	r4, r3
 801701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	899b      	ldrh	r3, [r3, #12]
 8017022:	b29b      	uxth	r3, r3
 8017024:	4618      	mov	r0, r3
 8017026:	f7f8 fef7 	bl	800fe18 <lwip_htons>
 801702a:	4603      	mov	r3, r0
 801702c:	b2db      	uxtb	r3, r3
 801702e:	f003 0303 	and.w	r3, r3, #3
 8017032:	2b00      	cmp	r3, #0
 8017034:	d001      	beq.n	801703a <tcp_output+0x2de>
 8017036:	2301      	movs	r3, #1
 8017038:	e000      	b.n	801703c <tcp_output+0x2e0>
 801703a:	2300      	movs	r3, #0
 801703c:	4423      	add	r3, r4
 801703e:	2b00      	cmp	r3, #0
 8017040:	d049      	beq.n	80170d6 <tcp_output+0x37a>
      seg->next = NULL;
 8017042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017044:	2200      	movs	r2, #0
 8017046:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801704c:	2b00      	cmp	r3, #0
 801704e:	d105      	bne.n	801705c <tcp_output+0x300>
        pcb->unacked = seg;
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017054:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017058:	623b      	str	r3, [r7, #32]
 801705a:	e03f      	b.n	80170dc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705e:	68db      	ldr	r3, [r3, #12]
 8017060:	685b      	ldr	r3, [r3, #4]
 8017062:	4618      	mov	r0, r3
 8017064:	f7f8 feed 	bl	800fe42 <lwip_htonl>
 8017068:	4604      	mov	r4, r0
 801706a:	6a3b      	ldr	r3, [r7, #32]
 801706c:	68db      	ldr	r3, [r3, #12]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	4618      	mov	r0, r3
 8017072:	f7f8 fee6 	bl	800fe42 <lwip_htonl>
 8017076:	4603      	mov	r3, r0
 8017078:	1ae3      	subs	r3, r4, r3
 801707a:	2b00      	cmp	r3, #0
 801707c:	da24      	bge.n	80170c8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	3370      	adds	r3, #112	; 0x70
 8017082:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017084:	e002      	b.n	801708c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801708c:	69fb      	ldr	r3, [r7, #28]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d011      	beq.n	80170b8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017094:	69fb      	ldr	r3, [r7, #28]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	68db      	ldr	r3, [r3, #12]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	4618      	mov	r0, r3
 801709e:	f7f8 fed0 	bl	800fe42 <lwip_htonl>
 80170a2:	4604      	mov	r4, r0
 80170a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a6:	68db      	ldr	r3, [r3, #12]
 80170a8:	685b      	ldr	r3, [r3, #4]
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7f8 fec9 	bl	800fe42 <lwip_htonl>
 80170b0:	4603      	mov	r3, r0
 80170b2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	dbe6      	blt.n	8017086 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80170b8:	69fb      	ldr	r3, [r7, #28]
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170be:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170c4:	601a      	str	r2, [r3, #0]
 80170c6:	e009      	b.n	80170dc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80170c8:	6a3b      	ldr	r3, [r7, #32]
 80170ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170cc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80170ce:	6a3b      	ldr	r3, [r7, #32]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	623b      	str	r3, [r7, #32]
 80170d4:	e002      	b.n	80170dc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80170d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170d8:	f7fb feff 	bl	8012eda <tcp_seg_free>
    }
    seg = pcb->unsent;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80170e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d012      	beq.n	801710e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80170e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ea:	68db      	ldr	r3, [r3, #12]
 80170ec:	685b      	ldr	r3, [r3, #4]
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7f8 fea7 	bl	800fe42 <lwip_htonl>
 80170f4:	4602      	mov	r2, r0
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170fa:	1ad3      	subs	r3, r2, r3
 80170fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170fe:	8912      	ldrh	r2, [r2, #8]
 8017100:	4413      	add	r3, r2
  while (seg != NULL &&
 8017102:	69ba      	ldr	r2, [r7, #24]
 8017104:	429a      	cmp	r2, r3
 8017106:	f4bf aed9 	bcs.w	8016ebc <tcp_output+0x160>
 801710a:	e000      	b.n	801710e <tcp_output+0x3b2>
      break;
 801710c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017112:	2b00      	cmp	r3, #0
 8017114:	d108      	bne.n	8017128 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2200      	movs	r2, #0
 801711a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801711e:	e004      	b.n	801712a <tcp_output+0x3ce>
    goto output_done;
 8017120:	bf00      	nop
 8017122:	e002      	b.n	801712a <tcp_output+0x3ce>
    goto output_done;
 8017124:	bf00      	nop
 8017126:	e000      	b.n	801712a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017128:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	8b5b      	ldrh	r3, [r3, #26]
 801712e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017132:	b29a      	uxth	r2, r3
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	3728      	adds	r7, #40	; 0x28
 801713e:	46bd      	mov	sp, r7
 8017140:	bdb0      	pop	{r4, r5, r7, pc}
 8017142:	bf00      	nop

08017144 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d106      	bne.n	8017160 <tcp_output_segment_busy+0x1c>
 8017152:	4b09      	ldr	r3, [pc, #36]	; (8017178 <tcp_output_segment_busy+0x34>)
 8017154:	f240 529a 	movw	r2, #1434	; 0x59a
 8017158:	4908      	ldr	r1, [pc, #32]	; (801717c <tcp_output_segment_busy+0x38>)
 801715a:	4809      	ldr	r0, [pc, #36]	; (8017180 <tcp_output_segment_busy+0x3c>)
 801715c:	f004 fd7e 	bl	801bc5c <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	685b      	ldr	r3, [r3, #4]
 8017164:	7b9b      	ldrb	r3, [r3, #14]
 8017166:	2b01      	cmp	r3, #1
 8017168:	d001      	beq.n	801716e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801716a:	2301      	movs	r3, #1
 801716c:	e000      	b.n	8017170 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801716e:	2300      	movs	r3, #0
}
 8017170:	4618      	mov	r0, r3
 8017172:	3708      	adds	r7, #8
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}
 8017178:	08027028 	.word	0x08027028
 801717c:	080275c4 	.word	0x080275c4
 8017180:	0802707c 	.word	0x0802707c

08017184 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017184:	b5b0      	push	{r4, r5, r7, lr}
 8017186:	b08c      	sub	sp, #48	; 0x30
 8017188:	af04      	add	r7, sp, #16
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d106      	bne.n	80171a4 <tcp_output_segment+0x20>
 8017196:	4b63      	ldr	r3, [pc, #396]	; (8017324 <tcp_output_segment+0x1a0>)
 8017198:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801719c:	4962      	ldr	r1, [pc, #392]	; (8017328 <tcp_output_segment+0x1a4>)
 801719e:	4863      	ldr	r0, [pc, #396]	; (801732c <tcp_output_segment+0x1a8>)
 80171a0:	f004 fd5c 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d106      	bne.n	80171b8 <tcp_output_segment+0x34>
 80171aa:	4b5e      	ldr	r3, [pc, #376]	; (8017324 <tcp_output_segment+0x1a0>)
 80171ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80171b0:	495f      	ldr	r1, [pc, #380]	; (8017330 <tcp_output_segment+0x1ac>)
 80171b2:	485e      	ldr	r0, [pc, #376]	; (801732c <tcp_output_segment+0x1a8>)
 80171b4:	f004 fd52 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d106      	bne.n	80171cc <tcp_output_segment+0x48>
 80171be:	4b59      	ldr	r3, [pc, #356]	; (8017324 <tcp_output_segment+0x1a0>)
 80171c0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80171c4:	495b      	ldr	r1, [pc, #364]	; (8017334 <tcp_output_segment+0x1b0>)
 80171c6:	4859      	ldr	r0, [pc, #356]	; (801732c <tcp_output_segment+0x1a8>)
 80171c8:	f004 fd48 	bl	801bc5c <printf>

  if (tcp_output_segment_busy(seg)) {
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	f7ff ffb9 	bl	8017144 <tcp_output_segment_busy>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d001      	beq.n	80171dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80171d8:	2300      	movs	r3, #0
 80171da:	e09f      	b.n	801731c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80171dc:	68bb      	ldr	r3, [r7, #8]
 80171de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	68dc      	ldr	r4, [r3, #12]
 80171e4:	4610      	mov	r0, r2
 80171e6:	f7f8 fe2c 	bl	800fe42 <lwip_htonl>
 80171ea:	4603      	mov	r3, r0
 80171ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	68dc      	ldr	r4, [r3, #12]
 80171f6:	4610      	mov	r0, r2
 80171f8:	f7f8 fe0e 	bl	800fe18 <lwip_htons>
 80171fc:	4603      	mov	r3, r0
 80171fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017204:	68ba      	ldr	r2, [r7, #8]
 8017206:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017208:	441a      	add	r2, r3
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	68db      	ldr	r3, [r3, #12]
 8017212:	3314      	adds	r3, #20
 8017214:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	7a9b      	ldrb	r3, [r3, #10]
 801721a:	f003 0301 	and.w	r3, r3, #1
 801721e:	2b00      	cmp	r3, #0
 8017220:	d015      	beq.n	801724e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	3304      	adds	r3, #4
 8017226:	461a      	mov	r2, r3
 8017228:	6879      	ldr	r1, [r7, #4]
 801722a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801722e:	f7fc fa37 	bl	80136a0 <tcp_eff_send_mss_netif>
 8017232:	4603      	mov	r3, r0
 8017234:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017236:	8b7b      	ldrh	r3, [r7, #26]
 8017238:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801723c:	4618      	mov	r0, r3
 801723e:	f7f8 fe00 	bl	800fe42 <lwip_htonl>
 8017242:	4602      	mov	r2, r0
 8017244:	69fb      	ldr	r3, [r7, #28]
 8017246:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017248:	69fb      	ldr	r3, [r7, #28]
 801724a:	3304      	adds	r3, #4
 801724c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801724e:	68bb      	ldr	r3, [r7, #8]
 8017250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017254:	2b00      	cmp	r3, #0
 8017256:	da02      	bge.n	801725e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	2200      	movs	r2, #0
 801725c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017262:	2b00      	cmp	r3, #0
 8017264:	d10c      	bne.n	8017280 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017266:	4b34      	ldr	r3, [pc, #208]	; (8017338 <tcp_output_segment+0x1b4>)
 8017268:	681a      	ldr	r2, [r3, #0]
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	68db      	ldr	r3, [r3, #12]
 8017272:	685b      	ldr	r3, [r3, #4]
 8017274:	4618      	mov	r0, r3
 8017276:	f7f8 fde4 	bl	800fe42 <lwip_htonl>
 801727a:	4602      	mov	r2, r0
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	68da      	ldr	r2, [r3, #12]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	1ad3      	subs	r3, r2, r3
 801728c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	8959      	ldrh	r1, [r3, #10]
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	8b3a      	ldrh	r2, [r7, #24]
 801729a:	1a8a      	subs	r2, r1, r2
 801729c:	b292      	uxth	r2, r2
 801729e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	8919      	ldrh	r1, [r3, #8]
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	8b3a      	ldrh	r2, [r7, #24]
 80172ac:	1a8a      	subs	r2, r1, r2
 80172ae:	b292      	uxth	r2, r2
 80172b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	68fa      	ldr	r2, [r7, #12]
 80172b8:	68d2      	ldr	r2, [r2, #12]
 80172ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	2200      	movs	r2, #0
 80172c2:	741a      	strb	r2, [r3, #16]
 80172c4:	2200      	movs	r2, #0
 80172c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	68db      	ldr	r3, [r3, #12]
 80172cc:	f103 0214 	add.w	r2, r3, #20
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	7a9b      	ldrb	r3, [r3, #10]
 80172d4:	009b      	lsls	r3, r3, #2
 80172d6:	f003 0304 	and.w	r3, r3, #4
 80172da:	4413      	add	r3, r2
 80172dc:	69fa      	ldr	r2, [r7, #28]
 80172de:	429a      	cmp	r2, r3
 80172e0:	d006      	beq.n	80172f0 <tcp_output_segment+0x16c>
 80172e2:	4b10      	ldr	r3, [pc, #64]	; (8017324 <tcp_output_segment+0x1a0>)
 80172e4:	f240 621c 	movw	r2, #1564	; 0x61c
 80172e8:	4914      	ldr	r1, [pc, #80]	; (801733c <tcp_output_segment+0x1b8>)
 80172ea:	4810      	ldr	r0, [pc, #64]	; (801732c <tcp_output_segment+0x1a8>)
 80172ec:	f004 fcb6 	bl	801bc5c <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	6858      	ldr	r0, [r3, #4]
 80172f4:	68b9      	ldr	r1, [r7, #8]
 80172f6:	68bb      	ldr	r3, [r7, #8]
 80172f8:	1d1c      	adds	r4, r3, #4
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	7add      	ldrb	r5, [r3, #11]
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	7a9b      	ldrb	r3, [r3, #10]
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	9202      	str	r2, [sp, #8]
 8017306:	2206      	movs	r2, #6
 8017308:	9201      	str	r2, [sp, #4]
 801730a:	9300      	str	r3, [sp, #0]
 801730c:	462b      	mov	r3, r5
 801730e:	4622      	mov	r2, r4
 8017310:	f002 fd96 	bl	8019e40 <ip4_output_if>
 8017314:	4603      	mov	r3, r0
 8017316:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017318:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801731c:	4618      	mov	r0, r3
 801731e:	3720      	adds	r7, #32
 8017320:	46bd      	mov	sp, r7
 8017322:	bdb0      	pop	{r4, r5, r7, pc}
 8017324:	08027028 	.word	0x08027028
 8017328:	080275ec 	.word	0x080275ec
 801732c:	0802707c 	.word	0x0802707c
 8017330:	0802760c 	.word	0x0802760c
 8017334:	0802762c 	.word	0x0802762c
 8017338:	2000be58 	.word	0x2000be58
 801733c:	08027650 	.word	0x08027650

08017340 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017340:	b5b0      	push	{r4, r5, r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d106      	bne.n	801735c <tcp_rexmit_rto_prepare+0x1c>
 801734e:	4b31      	ldr	r3, [pc, #196]	; (8017414 <tcp_rexmit_rto_prepare+0xd4>)
 8017350:	f240 6263 	movw	r2, #1635	; 0x663
 8017354:	4930      	ldr	r1, [pc, #192]	; (8017418 <tcp_rexmit_rto_prepare+0xd8>)
 8017356:	4831      	ldr	r0, [pc, #196]	; (801741c <tcp_rexmit_rto_prepare+0xdc>)
 8017358:	f004 fc80 	bl	801bc5c <printf>

  if (pcb->unacked == NULL) {
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017360:	2b00      	cmp	r3, #0
 8017362:	d102      	bne.n	801736a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017364:	f06f 0305 	mvn.w	r3, #5
 8017368:	e050      	b.n	801740c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801736e:	60fb      	str	r3, [r7, #12]
 8017370:	e00b      	b.n	801738a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017372:	68f8      	ldr	r0, [r7, #12]
 8017374:	f7ff fee6 	bl	8017144 <tcp_output_segment_busy>
 8017378:	4603      	mov	r3, r0
 801737a:	2b00      	cmp	r3, #0
 801737c:	d002      	beq.n	8017384 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801737e:	f06f 0305 	mvn.w	r3, #5
 8017382:	e043      	b.n	801740c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	60fb      	str	r3, [r7, #12]
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d1ef      	bne.n	8017372 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017392:	68f8      	ldr	r0, [r7, #12]
 8017394:	f7ff fed6 	bl	8017144 <tcp_output_segment_busy>
 8017398:	4603      	mov	r3, r0
 801739a:	2b00      	cmp	r3, #0
 801739c:	d002      	beq.n	80173a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801739e:	f06f 0305 	mvn.w	r3, #5
 80173a2:	e033      	b.n	801740c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2200      	movs	r2, #0
 80173b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	8b5b      	ldrh	r3, [r3, #26]
 80173be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	68db      	ldr	r3, [r3, #12]
 80173cc:	685b      	ldr	r3, [r3, #4]
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7f8 fd37 	bl	800fe42 <lwip_htonl>
 80173d4:	4604      	mov	r4, r0
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	891b      	ldrh	r3, [r3, #8]
 80173da:	461d      	mov	r5, r3
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	68db      	ldr	r3, [r3, #12]
 80173e0:	899b      	ldrh	r3, [r3, #12]
 80173e2:	b29b      	uxth	r3, r3
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7f8 fd17 	bl	800fe18 <lwip_htons>
 80173ea:	4603      	mov	r3, r0
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	f003 0303 	and.w	r3, r3, #3
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d001      	beq.n	80173fa <tcp_rexmit_rto_prepare+0xba>
 80173f6:	2301      	movs	r3, #1
 80173f8:	e000      	b.n	80173fc <tcp_rexmit_rto_prepare+0xbc>
 80173fa:	2300      	movs	r3, #0
 80173fc:	442b      	add	r3, r5
 80173fe:	18e2      	adds	r2, r4, r3
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2200      	movs	r2, #0
 8017408:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3710      	adds	r7, #16
 8017410:	46bd      	mov	sp, r7
 8017412:	bdb0      	pop	{r4, r5, r7, pc}
 8017414:	08027028 	.word	0x08027028
 8017418:	08027664 	.word	0x08027664
 801741c:	0802707c 	.word	0x0802707c

08017420 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b082      	sub	sp, #8
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d106      	bne.n	801743c <tcp_rexmit_rto_commit+0x1c>
 801742e:	4b0d      	ldr	r3, [pc, #52]	; (8017464 <tcp_rexmit_rto_commit+0x44>)
 8017430:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017434:	490c      	ldr	r1, [pc, #48]	; (8017468 <tcp_rexmit_rto_commit+0x48>)
 8017436:	480d      	ldr	r0, [pc, #52]	; (801746c <tcp_rexmit_rto_commit+0x4c>)
 8017438:	f004 fc10 	bl	801bc5c <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017442:	2bff      	cmp	r3, #255	; 0xff
 8017444:	d007      	beq.n	8017456 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801744c:	3301      	adds	r3, #1
 801744e:	b2da      	uxtb	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f7ff fc80 	bl	8016d5c <tcp_output>
}
 801745c:	bf00      	nop
 801745e:	3708      	adds	r7, #8
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}
 8017464:	08027028 	.word	0x08027028
 8017468:	08027688 	.word	0x08027688
 801746c:	0802707c 	.word	0x0802707c

08017470 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b082      	sub	sp, #8
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d106      	bne.n	801748c <tcp_rexmit_rto+0x1c>
 801747e:	4b0a      	ldr	r3, [pc, #40]	; (80174a8 <tcp_rexmit_rto+0x38>)
 8017480:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017484:	4909      	ldr	r1, [pc, #36]	; (80174ac <tcp_rexmit_rto+0x3c>)
 8017486:	480a      	ldr	r0, [pc, #40]	; (80174b0 <tcp_rexmit_rto+0x40>)
 8017488:	f004 fbe8 	bl	801bc5c <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f7ff ff57 	bl	8017340 <tcp_rexmit_rto_prepare>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	d102      	bne.n	801749e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f7ff ffc1 	bl	8017420 <tcp_rexmit_rto_commit>
  }
}
 801749e:	bf00      	nop
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	08027028 	.word	0x08027028
 80174ac:	080276ac 	.word	0x080276ac
 80174b0:	0802707c 	.word	0x0802707c

080174b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80174b4:	b590      	push	{r4, r7, lr}
 80174b6:	b085      	sub	sp, #20
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <tcp_rexmit+0x1c>
 80174c2:	4b2f      	ldr	r3, [pc, #188]	; (8017580 <tcp_rexmit+0xcc>)
 80174c4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80174c8:	492e      	ldr	r1, [pc, #184]	; (8017584 <tcp_rexmit+0xd0>)
 80174ca:	482f      	ldr	r0, [pc, #188]	; (8017588 <tcp_rexmit+0xd4>)
 80174cc:	f004 fbc6 	bl	801bc5c <printf>

  if (pcb->unacked == NULL) {
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d102      	bne.n	80174de <tcp_rexmit+0x2a>
    return ERR_VAL;
 80174d8:	f06f 0305 	mvn.w	r3, #5
 80174dc:	e04c      	b.n	8017578 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80174e4:	68b8      	ldr	r0, [r7, #8]
 80174e6:	f7ff fe2d 	bl	8017144 <tcp_output_segment_busy>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d002      	beq.n	80174f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80174f0:	f06f 0305 	mvn.w	r3, #5
 80174f4:	e040      	b.n	8017578 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80174f6:	68bb      	ldr	r3, [r7, #8]
 80174f8:	681a      	ldr	r2, [r3, #0]
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	336c      	adds	r3, #108	; 0x6c
 8017502:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017504:	e002      	b.n	801750c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d011      	beq.n	8017538 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	68db      	ldr	r3, [r3, #12]
 801751a:	685b      	ldr	r3, [r3, #4]
 801751c:	4618      	mov	r0, r3
 801751e:	f7f8 fc90 	bl	800fe42 <lwip_htonl>
 8017522:	4604      	mov	r4, r0
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	68db      	ldr	r3, [r3, #12]
 8017528:	685b      	ldr	r3, [r3, #4]
 801752a:	4618      	mov	r0, r3
 801752c:	f7f8 fc89 	bl	800fe42 <lwip_htonl>
 8017530:	4603      	mov	r3, r0
 8017532:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017534:	2b00      	cmp	r3, #0
 8017536:	dbe6      	blt.n	8017506 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	68ba      	ldr	r2, [r7, #8]
 8017544:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d103      	bne.n	8017556 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801755c:	2bff      	cmp	r3, #255	; 0xff
 801755e:	d007      	beq.n	8017570 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017566:	3301      	adds	r3, #1
 8017568:	b2da      	uxtb	r2, r3
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2200      	movs	r2, #0
 8017574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017576:	2300      	movs	r3, #0
}
 8017578:	4618      	mov	r0, r3
 801757a:	3714      	adds	r7, #20
 801757c:	46bd      	mov	sp, r7
 801757e:	bd90      	pop	{r4, r7, pc}
 8017580:	08027028 	.word	0x08027028
 8017584:	080276c8 	.word	0x080276c8
 8017588:	0802707c 	.word	0x0802707c

0801758c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d106      	bne.n	80175a8 <tcp_rexmit_fast+0x1c>
 801759a:	4b2a      	ldr	r3, [pc, #168]	; (8017644 <tcp_rexmit_fast+0xb8>)
 801759c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80175a0:	4929      	ldr	r1, [pc, #164]	; (8017648 <tcp_rexmit_fast+0xbc>)
 80175a2:	482a      	ldr	r0, [pc, #168]	; (801764c <tcp_rexmit_fast+0xc0>)
 80175a4:	f004 fb5a 	bl	801bc5c <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d045      	beq.n	801763c <tcp_rexmit_fast+0xb0>
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	8b5b      	ldrh	r3, [r3, #26]
 80175b4:	f003 0304 	and.w	r3, r3, #4
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d13f      	bne.n	801763c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f7ff ff79 	bl	80174b4 <tcp_rexmit>
 80175c2:	4603      	mov	r3, r0
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d139      	bne.n	801763c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80175d4:	4293      	cmp	r3, r2
 80175d6:	bf28      	it	cs
 80175d8:	4613      	movcs	r3, r2
 80175da:	b29b      	uxth	r3, r3
 80175dc:	2b00      	cmp	r3, #0
 80175de:	da00      	bge.n	80175e2 <tcp_rexmit_fast+0x56>
 80175e0:	3301      	adds	r3, #1
 80175e2:	105b      	asrs	r3, r3, #1
 80175e4:	b29a      	uxth	r2, r3
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80175f2:	461a      	mov	r2, r3
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175f8:	005b      	lsls	r3, r3, #1
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d206      	bcs.n	801760c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017602:	005b      	lsls	r3, r3, #1
 8017604:	b29a      	uxth	r2, r3
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017616:	4619      	mov	r1, r3
 8017618:	0049      	lsls	r1, r1, #1
 801761a:	440b      	add	r3, r1
 801761c:	b29b      	uxth	r3, r3
 801761e:	4413      	add	r3, r2
 8017620:	b29a      	uxth	r2, r3
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	8b5b      	ldrh	r3, [r3, #26]
 801762c:	f043 0304 	orr.w	r3, r3, #4
 8017630:	b29a      	uxth	r2, r3
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2200      	movs	r2, #0
 801763a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801763c:	bf00      	nop
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}
 8017644:	08027028 	.word	0x08027028
 8017648:	080276e0 	.word	0x080276e0
 801764c:	0802707c 	.word	0x0802707c

08017650 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	b086      	sub	sp, #24
 8017654:	af00      	add	r7, sp, #0
 8017656:	60f8      	str	r0, [r7, #12]
 8017658:	607b      	str	r3, [r7, #4]
 801765a:	460b      	mov	r3, r1
 801765c:	817b      	strh	r3, [r7, #10]
 801765e:	4613      	mov	r3, r2
 8017660:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017662:	897a      	ldrh	r2, [r7, #10]
 8017664:	893b      	ldrh	r3, [r7, #8]
 8017666:	4413      	add	r3, r2
 8017668:	b29b      	uxth	r3, r3
 801766a:	3314      	adds	r3, #20
 801766c:	b29b      	uxth	r3, r3
 801766e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017672:	4619      	mov	r1, r3
 8017674:	2022      	movs	r0, #34	; 0x22
 8017676:	f7f9 fca7 	bl	8010fc8 <pbuf_alloc>
 801767a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d04d      	beq.n	801771e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017682:	897b      	ldrh	r3, [r7, #10]
 8017684:	3313      	adds	r3, #19
 8017686:	697a      	ldr	r2, [r7, #20]
 8017688:	8952      	ldrh	r2, [r2, #10]
 801768a:	4293      	cmp	r3, r2
 801768c:	db06      	blt.n	801769c <tcp_output_alloc_header_common+0x4c>
 801768e:	4b26      	ldr	r3, [pc, #152]	; (8017728 <tcp_output_alloc_header_common+0xd8>)
 8017690:	f240 7223 	movw	r2, #1827	; 0x723
 8017694:	4925      	ldr	r1, [pc, #148]	; (801772c <tcp_output_alloc_header_common+0xdc>)
 8017696:	4826      	ldr	r0, [pc, #152]	; (8017730 <tcp_output_alloc_header_common+0xe0>)
 8017698:	f004 fae0 	bl	801bc5c <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80176a2:	8c3b      	ldrh	r3, [r7, #32]
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7f8 fbb7 	bl	800fe18 <lwip_htons>
 80176aa:	4603      	mov	r3, r0
 80176ac:	461a      	mov	r2, r3
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80176b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176b4:	4618      	mov	r0, r3
 80176b6:	f7f8 fbaf 	bl	800fe18 <lwip_htons>
 80176ba:	4603      	mov	r3, r0
 80176bc:	461a      	mov	r2, r3
 80176be:	693b      	ldr	r3, [r7, #16]
 80176c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	687a      	ldr	r2, [r7, #4]
 80176c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80176c8:	68f8      	ldr	r0, [r7, #12]
 80176ca:	f7f8 fbba 	bl	800fe42 <lwip_htonl>
 80176ce:	4602      	mov	r2, r0
 80176d0:	693b      	ldr	r3, [r7, #16]
 80176d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80176d4:	897b      	ldrh	r3, [r7, #10]
 80176d6:	089b      	lsrs	r3, r3, #2
 80176d8:	b29b      	uxth	r3, r3
 80176da:	3305      	adds	r3, #5
 80176dc:	b29b      	uxth	r3, r3
 80176de:	031b      	lsls	r3, r3, #12
 80176e0:	b29a      	uxth	r2, r3
 80176e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	4313      	orrs	r3, r2
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7f8 fb93 	bl	800fe18 <lwip_htons>
 80176f2:	4603      	mov	r3, r0
 80176f4:	461a      	mov	r2, r3
 80176f6:	693b      	ldr	r3, [r7, #16]
 80176f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80176fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7f8 fb8b 	bl	800fe18 <lwip_htons>
 8017702:	4603      	mov	r3, r0
 8017704:	461a      	mov	r2, r3
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	2200      	movs	r2, #0
 801770e:	741a      	strb	r2, [r3, #16]
 8017710:	2200      	movs	r2, #0
 8017712:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017714:	693b      	ldr	r3, [r7, #16]
 8017716:	2200      	movs	r2, #0
 8017718:	749a      	strb	r2, [r3, #18]
 801771a:	2200      	movs	r2, #0
 801771c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801771e:	697b      	ldr	r3, [r7, #20]
}
 8017720:	4618      	mov	r0, r3
 8017722:	3718      	adds	r7, #24
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	08027028 	.word	0x08027028
 801772c:	08027700 	.word	0x08027700
 8017730:	0802707c 	.word	0x0802707c

08017734 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017734:	b5b0      	push	{r4, r5, r7, lr}
 8017736:	b08a      	sub	sp, #40	; 0x28
 8017738:	af04      	add	r7, sp, #16
 801773a:	60f8      	str	r0, [r7, #12]
 801773c:	607b      	str	r3, [r7, #4]
 801773e:	460b      	mov	r3, r1
 8017740:	817b      	strh	r3, [r7, #10]
 8017742:	4613      	mov	r3, r2
 8017744:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d106      	bne.n	801775a <tcp_output_alloc_header+0x26>
 801774c:	4b15      	ldr	r3, [pc, #84]	; (80177a4 <tcp_output_alloc_header+0x70>)
 801774e:	f240 7242 	movw	r2, #1858	; 0x742
 8017752:	4915      	ldr	r1, [pc, #84]	; (80177a8 <tcp_output_alloc_header+0x74>)
 8017754:	4815      	ldr	r0, [pc, #84]	; (80177ac <tcp_output_alloc_header+0x78>)
 8017756:	f004 fa81 	bl	801bc5c <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	8adb      	ldrh	r3, [r3, #22]
 8017762:	68fa      	ldr	r2, [r7, #12]
 8017764:	8b12      	ldrh	r2, [r2, #24]
 8017766:	68f9      	ldr	r1, [r7, #12]
 8017768:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801776a:	893d      	ldrh	r5, [r7, #8]
 801776c:	897c      	ldrh	r4, [r7, #10]
 801776e:	9103      	str	r1, [sp, #12]
 8017770:	2110      	movs	r1, #16
 8017772:	9102      	str	r1, [sp, #8]
 8017774:	9201      	str	r2, [sp, #4]
 8017776:	9300      	str	r3, [sp, #0]
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	462a      	mov	r2, r5
 801777c:	4621      	mov	r1, r4
 801777e:	f7ff ff67 	bl	8017650 <tcp_output_alloc_header_common>
 8017782:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017784:	697b      	ldr	r3, [r7, #20]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d006      	beq.n	8017798 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801778e:	68fa      	ldr	r2, [r7, #12]
 8017790:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017792:	441a      	add	r2, r3
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017798:	697b      	ldr	r3, [r7, #20]
}
 801779a:	4618      	mov	r0, r3
 801779c:	3718      	adds	r7, #24
 801779e:	46bd      	mov	sp, r7
 80177a0:	bdb0      	pop	{r4, r5, r7, pc}
 80177a2:	bf00      	nop
 80177a4:	08027028 	.word	0x08027028
 80177a8:	08027730 	.word	0x08027730
 80177ac:	0802707c 	.word	0x0802707c

080177b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b088      	sub	sp, #32
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	4611      	mov	r1, r2
 80177bc:	461a      	mov	r2, r3
 80177be:	460b      	mov	r3, r1
 80177c0:	71fb      	strb	r3, [r7, #7]
 80177c2:	4613      	mov	r3, r2
 80177c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80177c6:	2300      	movs	r3, #0
 80177c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80177ca:	68bb      	ldr	r3, [r7, #8]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d106      	bne.n	80177de <tcp_output_fill_options+0x2e>
 80177d0:	4b13      	ldr	r3, [pc, #76]	; (8017820 <tcp_output_fill_options+0x70>)
 80177d2:	f240 7256 	movw	r2, #1878	; 0x756
 80177d6:	4913      	ldr	r1, [pc, #76]	; (8017824 <tcp_output_fill_options+0x74>)
 80177d8:	4813      	ldr	r0, [pc, #76]	; (8017828 <tcp_output_fill_options+0x78>)
 80177da:	f004 fa3f 	bl	801bc5c <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	685b      	ldr	r3, [r3, #4]
 80177e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80177e4:	69bb      	ldr	r3, [r7, #24]
 80177e6:	3314      	adds	r3, #20
 80177e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80177ea:	69bb      	ldr	r3, [r7, #24]
 80177ec:	f103 0214 	add.w	r2, r3, #20
 80177f0:	8bfb      	ldrh	r3, [r7, #30]
 80177f2:	009b      	lsls	r3, r3, #2
 80177f4:	4619      	mov	r1, r3
 80177f6:	79fb      	ldrb	r3, [r7, #7]
 80177f8:	009b      	lsls	r3, r3, #2
 80177fa:	f003 0304 	and.w	r3, r3, #4
 80177fe:	440b      	add	r3, r1
 8017800:	4413      	add	r3, r2
 8017802:	697a      	ldr	r2, [r7, #20]
 8017804:	429a      	cmp	r2, r3
 8017806:	d006      	beq.n	8017816 <tcp_output_fill_options+0x66>
 8017808:	4b05      	ldr	r3, [pc, #20]	; (8017820 <tcp_output_fill_options+0x70>)
 801780a:	f240 7275 	movw	r2, #1909	; 0x775
 801780e:	4907      	ldr	r1, [pc, #28]	; (801782c <tcp_output_fill_options+0x7c>)
 8017810:	4805      	ldr	r0, [pc, #20]	; (8017828 <tcp_output_fill_options+0x78>)
 8017812:	f004 fa23 	bl	801bc5c <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017816:	bf00      	nop
 8017818:	3720      	adds	r7, #32
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}
 801781e:	bf00      	nop
 8017820:	08027028 	.word	0x08027028
 8017824:	08027758 	.word	0x08027758
 8017828:	0802707c 	.word	0x0802707c
 801782c:	08027650 	.word	0x08027650

08017830 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b08a      	sub	sp, #40	; 0x28
 8017834:	af04      	add	r7, sp, #16
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	607a      	str	r2, [r7, #4]
 801783c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d106      	bne.n	8017852 <tcp_output_control_segment+0x22>
 8017844:	4b1c      	ldr	r3, [pc, #112]	; (80178b8 <tcp_output_control_segment+0x88>)
 8017846:	f240 7287 	movw	r2, #1927	; 0x787
 801784a:	491c      	ldr	r1, [pc, #112]	; (80178bc <tcp_output_control_segment+0x8c>)
 801784c:	481c      	ldr	r0, [pc, #112]	; (80178c0 <tcp_output_control_segment+0x90>)
 801784e:	f004 fa05 	bl	801bc5c <printf>

  netif = tcp_route(pcb, src, dst);
 8017852:	683a      	ldr	r2, [r7, #0]
 8017854:	6879      	ldr	r1, [r7, #4]
 8017856:	68f8      	ldr	r0, [r7, #12]
 8017858:	f7fe fae8 	bl	8015e2c <tcp_route>
 801785c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801785e:	693b      	ldr	r3, [r7, #16]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d102      	bne.n	801786a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017864:	23fc      	movs	r3, #252	; 0xfc
 8017866:	75fb      	strb	r3, [r7, #23]
 8017868:	e01c      	b.n	80178a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d006      	beq.n	801787e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	7adb      	ldrb	r3, [r3, #11]
 8017874:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	7a9b      	ldrb	r3, [r3, #10]
 801787a:	757b      	strb	r3, [r7, #21]
 801787c:	e003      	b.n	8017886 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801787e:	23ff      	movs	r3, #255	; 0xff
 8017880:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017882:	2300      	movs	r3, #0
 8017884:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017886:	7dba      	ldrb	r2, [r7, #22]
 8017888:	693b      	ldr	r3, [r7, #16]
 801788a:	9302      	str	r3, [sp, #8]
 801788c:	2306      	movs	r3, #6
 801788e:	9301      	str	r3, [sp, #4]
 8017890:	7d7b      	ldrb	r3, [r7, #21]
 8017892:	9300      	str	r3, [sp, #0]
 8017894:	4613      	mov	r3, r2
 8017896:	683a      	ldr	r2, [r7, #0]
 8017898:	6879      	ldr	r1, [r7, #4]
 801789a:	68b8      	ldr	r0, [r7, #8]
 801789c:	f002 fad0 	bl	8019e40 <ip4_output_if>
 80178a0:	4603      	mov	r3, r0
 80178a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80178a4:	68b8      	ldr	r0, [r7, #8]
 80178a6:	f7f9 fe73 	bl	8011590 <pbuf_free>
  return err;
 80178aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80178ae:	4618      	mov	r0, r3
 80178b0:	3718      	adds	r7, #24
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}
 80178b6:	bf00      	nop
 80178b8:	08027028 	.word	0x08027028
 80178bc:	08027780 	.word	0x08027780
 80178c0:	0802707c 	.word	0x0802707c

080178c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80178c4:	b590      	push	{r4, r7, lr}
 80178c6:	b08b      	sub	sp, #44	; 0x2c
 80178c8:	af04      	add	r7, sp, #16
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	60b9      	str	r1, [r7, #8]
 80178ce:	607a      	str	r2, [r7, #4]
 80178d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d106      	bne.n	80178e6 <tcp_rst+0x22>
 80178d8:	4b1f      	ldr	r3, [pc, #124]	; (8017958 <tcp_rst+0x94>)
 80178da:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80178de:	491f      	ldr	r1, [pc, #124]	; (801795c <tcp_rst+0x98>)
 80178e0:	481f      	ldr	r0, [pc, #124]	; (8017960 <tcp_rst+0x9c>)
 80178e2:	f004 f9bb 	bl	801bc5c <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80178e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d106      	bne.n	80178fa <tcp_rst+0x36>
 80178ec:	4b1a      	ldr	r3, [pc, #104]	; (8017958 <tcp_rst+0x94>)
 80178ee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80178f2:	491c      	ldr	r1, [pc, #112]	; (8017964 <tcp_rst+0xa0>)
 80178f4:	481a      	ldr	r0, [pc, #104]	; (8017960 <tcp_rst+0x9c>)
 80178f6:	f004 f9b1 	bl	801bc5c <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178fa:	2300      	movs	r3, #0
 80178fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80178fe:	f246 0308 	movw	r3, #24584	; 0x6008
 8017902:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017904:	7dfb      	ldrb	r3, [r7, #23]
 8017906:	b29c      	uxth	r4, r3
 8017908:	68b8      	ldr	r0, [r7, #8]
 801790a:	f7f8 fa9a 	bl	800fe42 <lwip_htonl>
 801790e:	4602      	mov	r2, r0
 8017910:	8abb      	ldrh	r3, [r7, #20]
 8017912:	9303      	str	r3, [sp, #12]
 8017914:	2314      	movs	r3, #20
 8017916:	9302      	str	r3, [sp, #8]
 8017918:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801791a:	9301      	str	r3, [sp, #4]
 801791c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801791e:	9300      	str	r3, [sp, #0]
 8017920:	4613      	mov	r3, r2
 8017922:	2200      	movs	r2, #0
 8017924:	4621      	mov	r1, r4
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f7ff fe92 	bl	8017650 <tcp_output_alloc_header_common>
 801792c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801792e:	693b      	ldr	r3, [r7, #16]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d00c      	beq.n	801794e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017934:	7dfb      	ldrb	r3, [r7, #23]
 8017936:	2200      	movs	r2, #0
 8017938:	6939      	ldr	r1, [r7, #16]
 801793a:	68f8      	ldr	r0, [r7, #12]
 801793c:	f7ff ff38 	bl	80177b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017942:	683a      	ldr	r2, [r7, #0]
 8017944:	6939      	ldr	r1, [r7, #16]
 8017946:	68f8      	ldr	r0, [r7, #12]
 8017948:	f7ff ff72 	bl	8017830 <tcp_output_control_segment>
 801794c:	e000      	b.n	8017950 <tcp_rst+0x8c>
    return;
 801794e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017950:	371c      	adds	r7, #28
 8017952:	46bd      	mov	sp, r7
 8017954:	bd90      	pop	{r4, r7, pc}
 8017956:	bf00      	nop
 8017958:	08027028 	.word	0x08027028
 801795c:	080277ac 	.word	0x080277ac
 8017960:	0802707c 	.word	0x0802707c
 8017964:	080277c8 	.word	0x080277c8

08017968 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017968:	b590      	push	{r4, r7, lr}
 801796a:	b087      	sub	sp, #28
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017970:	2300      	movs	r3, #0
 8017972:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017974:	2300      	movs	r3, #0
 8017976:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d106      	bne.n	801798c <tcp_send_empty_ack+0x24>
 801797e:	4b28      	ldr	r3, [pc, #160]	; (8017a20 <tcp_send_empty_ack+0xb8>)
 8017980:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017984:	4927      	ldr	r1, [pc, #156]	; (8017a24 <tcp_send_empty_ack+0xbc>)
 8017986:	4828      	ldr	r0, [pc, #160]	; (8017a28 <tcp_send_empty_ack+0xc0>)
 8017988:	f004 f968 	bl	801bc5c <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801798c:	7dfb      	ldrb	r3, [r7, #23]
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	b2db      	uxtb	r3, r3
 8017992:	f003 0304 	and.w	r3, r3, #4
 8017996:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017998:	7d7b      	ldrb	r3, [r7, #21]
 801799a:	b29c      	uxth	r4, r3
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7f8 fa4e 	bl	800fe42 <lwip_htonl>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2200      	movs	r2, #0
 80179aa:	4621      	mov	r1, r4
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7ff fec1 	bl	8017734 <tcp_output_alloc_header>
 80179b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d109      	bne.n	80179ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	8b5b      	ldrh	r3, [r3, #26]
 80179be:	f043 0303 	orr.w	r3, r3, #3
 80179c2:	b29a      	uxth	r2, r3
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80179c8:	f06f 0301 	mvn.w	r3, #1
 80179cc:	e023      	b.n	8017a16 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80179ce:	7dbb      	ldrb	r3, [r7, #22]
 80179d0:	7dfa      	ldrb	r2, [r7, #23]
 80179d2:	6939      	ldr	r1, [r7, #16]
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f7ff feeb 	bl	80177b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	3304      	adds	r3, #4
 80179e0:	6939      	ldr	r1, [r7, #16]
 80179e2:	6878      	ldr	r0, [r7, #4]
 80179e4:	f7ff ff24 	bl	8017830 <tcp_output_control_segment>
 80179e8:	4603      	mov	r3, r0
 80179ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80179ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d007      	beq.n	8017a04 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	8b5b      	ldrh	r3, [r3, #26]
 80179f8:	f043 0303 	orr.w	r3, r3, #3
 80179fc:	b29a      	uxth	r2, r3
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	835a      	strh	r2, [r3, #26]
 8017a02:	e006      	b.n	8017a12 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	8b5b      	ldrh	r3, [r3, #26]
 8017a08:	f023 0303 	bic.w	r3, r3, #3
 8017a0c:	b29a      	uxth	r2, r3
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	371c      	adds	r7, #28
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd90      	pop	{r4, r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	08027028 	.word	0x08027028
 8017a24:	080277e4 	.word	0x080277e4
 8017a28:	0802707c 	.word	0x0802707c

08017a2c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017a2c:	b590      	push	{r4, r7, lr}
 8017a2e:	b087      	sub	sp, #28
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017a34:	2300      	movs	r3, #0
 8017a36:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d106      	bne.n	8017a4c <tcp_keepalive+0x20>
 8017a3e:	4b18      	ldr	r3, [pc, #96]	; (8017aa0 <tcp_keepalive+0x74>)
 8017a40:	f640 0224 	movw	r2, #2084	; 0x824
 8017a44:	4917      	ldr	r1, [pc, #92]	; (8017aa4 <tcp_keepalive+0x78>)
 8017a46:	4818      	ldr	r0, [pc, #96]	; (8017aa8 <tcp_keepalive+0x7c>)
 8017a48:	f004 f908 	bl	801bc5c <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017a4c:	7dfb      	ldrb	r3, [r7, #23]
 8017a4e:	b29c      	uxth	r4, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a54:	3b01      	subs	r3, #1
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7f8 f9f3 	bl	800fe42 <lwip_htonl>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2200      	movs	r2, #0
 8017a60:	4621      	mov	r1, r4
 8017a62:	6878      	ldr	r0, [r7, #4]
 8017a64:	f7ff fe66 	bl	8017734 <tcp_output_alloc_header>
 8017a68:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017a6a:	693b      	ldr	r3, [r7, #16]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d102      	bne.n	8017a76 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017a70:	f04f 33ff 	mov.w	r3, #4294967295
 8017a74:	e010      	b.n	8017a98 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a76:	7dfb      	ldrb	r3, [r7, #23]
 8017a78:	2200      	movs	r2, #0
 8017a7a:	6939      	ldr	r1, [r7, #16]
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ff fe97 	bl	80177b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a82:	687a      	ldr	r2, [r7, #4]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	3304      	adds	r3, #4
 8017a88:	6939      	ldr	r1, [r7, #16]
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7ff fed0 	bl	8017830 <tcp_output_control_segment>
 8017a90:	4603      	mov	r3, r0
 8017a92:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	371c      	adds	r7, #28
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd90      	pop	{r4, r7, pc}
 8017aa0:	08027028 	.word	0x08027028
 8017aa4:	08027804 	.word	0x08027804
 8017aa8:	0802707c 	.word	0x0802707c

08017aac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017aac:	b590      	push	{r4, r7, lr}
 8017aae:	b08b      	sub	sp, #44	; 0x2c
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d106      	bne.n	8017ace <tcp_zero_window_probe+0x22>
 8017ac0:	4b4c      	ldr	r3, [pc, #304]	; (8017bf4 <tcp_zero_window_probe+0x148>)
 8017ac2:	f640 024f 	movw	r2, #2127	; 0x84f
 8017ac6:	494c      	ldr	r1, [pc, #304]	; (8017bf8 <tcp_zero_window_probe+0x14c>)
 8017ac8:	484c      	ldr	r0, [pc, #304]	; (8017bfc <tcp_zero_window_probe+0x150>)
 8017aca:	f004 f8c7 	bl	801bc5c <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ad2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d101      	bne.n	8017ade <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017ada:	2300      	movs	r3, #0
 8017adc:	e086      	b.n	8017bec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017ae4:	2bff      	cmp	r3, #255	; 0xff
 8017ae6:	d007      	beq.n	8017af8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017aee:	3301      	adds	r3, #1
 8017af0:	b2da      	uxtb	r2, r3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017af8:	6a3b      	ldr	r3, [r7, #32]
 8017afa:	68db      	ldr	r3, [r3, #12]
 8017afc:	899b      	ldrh	r3, [r3, #12]
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	4618      	mov	r0, r3
 8017b02:	f7f8 f989 	bl	800fe18 <lwip_htons>
 8017b06:	4603      	mov	r3, r0
 8017b08:	b2db      	uxtb	r3, r3
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d005      	beq.n	8017b1e <tcp_zero_window_probe+0x72>
 8017b12:	6a3b      	ldr	r3, [r7, #32]
 8017b14:	891b      	ldrh	r3, [r3, #8]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d101      	bne.n	8017b1e <tcp_zero_window_probe+0x72>
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	e000      	b.n	8017b20 <tcp_zero_window_probe+0x74>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017b22:	7ffb      	ldrb	r3, [r7, #31]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	bf0c      	ite	eq
 8017b28:	2301      	moveq	r3, #1
 8017b2a:	2300      	movne	r3, #0
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b34:	b299      	uxth	r1, r3
 8017b36:	6a3b      	ldr	r3, [r7, #32]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	8bba      	ldrh	r2, [r7, #28]
 8017b3e:	6878      	ldr	r0, [r7, #4]
 8017b40:	f7ff fdf8 	bl	8017734 <tcp_output_alloc_header>
 8017b44:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017b46:	69bb      	ldr	r3, [r7, #24]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d102      	bne.n	8017b52 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b50:	e04c      	b.n	8017bec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017b52:	69bb      	ldr	r3, [r7, #24]
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017b58:	7ffb      	ldrb	r3, [r7, #31]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d011      	beq.n	8017b82 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	899b      	ldrh	r3, [r3, #12]
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	b21b      	sxth	r3, r3
 8017b66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017b6a:	b21c      	sxth	r4, r3
 8017b6c:	2011      	movs	r0, #17
 8017b6e:	f7f8 f953 	bl	800fe18 <lwip_htons>
 8017b72:	4603      	mov	r3, r0
 8017b74:	b21b      	sxth	r3, r3
 8017b76:	4323      	orrs	r3, r4
 8017b78:	b21b      	sxth	r3, r3
 8017b7a:	b29a      	uxth	r2, r3
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	819a      	strh	r2, [r3, #12]
 8017b80:	e010      	b.n	8017ba4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017b82:	69bb      	ldr	r3, [r7, #24]
 8017b84:	685b      	ldr	r3, [r3, #4]
 8017b86:	3314      	adds	r3, #20
 8017b88:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017b8a:	6a3b      	ldr	r3, [r7, #32]
 8017b8c:	6858      	ldr	r0, [r3, #4]
 8017b8e:	6a3b      	ldr	r3, [r7, #32]
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	891a      	ldrh	r2, [r3, #8]
 8017b94:	6a3b      	ldr	r3, [r7, #32]
 8017b96:	891b      	ldrh	r3, [r3, #8]
 8017b98:	1ad3      	subs	r3, r2, r3
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	2201      	movs	r2, #1
 8017b9e:	6939      	ldr	r1, [r7, #16]
 8017ba0:	f7f9 fefc 	bl	801199c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017ba4:	6a3b      	ldr	r3, [r7, #32]
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	685b      	ldr	r3, [r3, #4]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7f8 f949 	bl	800fe42 <lwip_htonl>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	1ad3      	subs	r3, r2, r3
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	da02      	bge.n	8017bc8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	68fa      	ldr	r2, [r7, #12]
 8017bc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bcc:	2200      	movs	r2, #0
 8017bce:	69b9      	ldr	r1, [r7, #24]
 8017bd0:	6878      	ldr	r0, [r7, #4]
 8017bd2:	f7ff fded 	bl	80177b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	3304      	adds	r3, #4
 8017bdc:	69b9      	ldr	r1, [r7, #24]
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f7ff fe26 	bl	8017830 <tcp_output_control_segment>
 8017be4:	4603      	mov	r3, r0
 8017be6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017be8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017bec:	4618      	mov	r0, r3
 8017bee:	372c      	adds	r7, #44	; 0x2c
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd90      	pop	{r4, r7, pc}
 8017bf4:	08027028 	.word	0x08027028
 8017bf8:	08027820 	.word	0x08027820
 8017bfc:	0802707c 	.word	0x0802707c

08017c00 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017c08:	f7f9 ffb6 	bl	8011b78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017c0c:	4b0a      	ldr	r3, [pc, #40]	; (8017c38 <tcpip_tcp_timer+0x38>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d103      	bne.n	8017c1c <tcpip_tcp_timer+0x1c>
 8017c14:	4b09      	ldr	r3, [pc, #36]	; (8017c3c <tcpip_tcp_timer+0x3c>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d005      	beq.n	8017c28 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	4908      	ldr	r1, [pc, #32]	; (8017c40 <tcpip_tcp_timer+0x40>)
 8017c20:	20fa      	movs	r0, #250	; 0xfa
 8017c22:	f000 f8f3 	bl	8017e0c <sys_timeout>
 8017c26:	e003      	b.n	8017c30 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017c28:	4b06      	ldr	r3, [pc, #24]	; (8017c44 <tcpip_tcp_timer+0x44>)
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	601a      	str	r2, [r3, #0]
  }
}
 8017c2e:	bf00      	nop
 8017c30:	bf00      	nop
 8017c32:	3708      	adds	r7, #8
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	2000be54 	.word	0x2000be54
 8017c3c:	2000be64 	.word	0x2000be64
 8017c40:	08017c01 	.word	0x08017c01
 8017c44:	20004f48 	.word	0x20004f48

08017c48 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017c4c:	4b0a      	ldr	r3, [pc, #40]	; (8017c78 <tcp_timer_needed+0x30>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d10f      	bne.n	8017c74 <tcp_timer_needed+0x2c>
 8017c54:	4b09      	ldr	r3, [pc, #36]	; (8017c7c <tcp_timer_needed+0x34>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d103      	bne.n	8017c64 <tcp_timer_needed+0x1c>
 8017c5c:	4b08      	ldr	r3, [pc, #32]	; (8017c80 <tcp_timer_needed+0x38>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d007      	beq.n	8017c74 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017c64:	4b04      	ldr	r3, [pc, #16]	; (8017c78 <tcp_timer_needed+0x30>)
 8017c66:	2201      	movs	r2, #1
 8017c68:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	4905      	ldr	r1, [pc, #20]	; (8017c84 <tcp_timer_needed+0x3c>)
 8017c6e:	20fa      	movs	r0, #250	; 0xfa
 8017c70:	f000 f8cc 	bl	8017e0c <sys_timeout>
  }
}
 8017c74:	bf00      	nop
 8017c76:	bd80      	pop	{r7, pc}
 8017c78:	20004f48 	.word	0x20004f48
 8017c7c:	2000be54 	.word	0x2000be54
 8017c80:	2000be64 	.word	0x2000be64
 8017c84:	08017c01 	.word	0x08017c01

08017c88 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b086      	sub	sp, #24
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	60f8      	str	r0, [r7, #12]
 8017c90:	60b9      	str	r1, [r7, #8]
 8017c92:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017c94:	200a      	movs	r0, #10
 8017c96:	f7f8 fdab 	bl	80107f0 <memp_malloc>
 8017c9a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017c9c:	693b      	ldr	r3, [r7, #16]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d109      	bne.n	8017cb6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d151      	bne.n	8017d4c <sys_timeout_abs+0xc4>
 8017ca8:	4b2a      	ldr	r3, [pc, #168]	; (8017d54 <sys_timeout_abs+0xcc>)
 8017caa:	22be      	movs	r2, #190	; 0xbe
 8017cac:	492a      	ldr	r1, [pc, #168]	; (8017d58 <sys_timeout_abs+0xd0>)
 8017cae:	482b      	ldr	r0, [pc, #172]	; (8017d5c <sys_timeout_abs+0xd4>)
 8017cb0:	f003 ffd4 	bl	801bc5c <printf>
    return;
 8017cb4:	e04a      	b.n	8017d4c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017cb6:	693b      	ldr	r3, [r7, #16]
 8017cb8:	2200      	movs	r2, #0
 8017cba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017cbc:	693b      	ldr	r3, [r7, #16]
 8017cbe:	68ba      	ldr	r2, [r7, #8]
 8017cc0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017cc2:	693b      	ldr	r3, [r7, #16]
 8017cc4:	687a      	ldr	r2, [r7, #4]
 8017cc6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017cc8:	693b      	ldr	r3, [r7, #16]
 8017cca:	68fa      	ldr	r2, [r7, #12]
 8017ccc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017cce:	4b24      	ldr	r3, [pc, #144]	; (8017d60 <sys_timeout_abs+0xd8>)
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d103      	bne.n	8017cde <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017cd6:	4a22      	ldr	r2, [pc, #136]	; (8017d60 <sys_timeout_abs+0xd8>)
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	6013      	str	r3, [r2, #0]
    return;
 8017cdc:	e037      	b.n	8017d4e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	685a      	ldr	r2, [r3, #4]
 8017ce2:	4b1f      	ldr	r3, [pc, #124]	; (8017d60 <sys_timeout_abs+0xd8>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	1ad3      	subs	r3, r2, r3
 8017cea:	0fdb      	lsrs	r3, r3, #31
 8017cec:	f003 0301 	and.w	r3, r3, #1
 8017cf0:	b2db      	uxtb	r3, r3
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d007      	beq.n	8017d06 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017cf6:	4b1a      	ldr	r3, [pc, #104]	; (8017d60 <sys_timeout_abs+0xd8>)
 8017cf8:	681a      	ldr	r2, [r3, #0]
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017cfe:	4a18      	ldr	r2, [pc, #96]	; (8017d60 <sys_timeout_abs+0xd8>)
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	6013      	str	r3, [r2, #0]
 8017d04:	e023      	b.n	8017d4e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017d06:	4b16      	ldr	r3, [pc, #88]	; (8017d60 <sys_timeout_abs+0xd8>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	617b      	str	r3, [r7, #20]
 8017d0c:	e01a      	b.n	8017d44 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017d0e:	697b      	ldr	r3, [r7, #20]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d00b      	beq.n	8017d2e <sys_timeout_abs+0xa6>
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	685a      	ldr	r2, [r3, #4]
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	1ad3      	subs	r3, r2, r3
 8017d22:	0fdb      	lsrs	r3, r3, #31
 8017d24:	f003 0301 	and.w	r3, r3, #1
 8017d28:	b2db      	uxtb	r3, r3
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d007      	beq.n	8017d3e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017d2e:	697b      	ldr	r3, [r7, #20]
 8017d30:	681a      	ldr	r2, [r3, #0]
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	693a      	ldr	r2, [r7, #16]
 8017d3a:	601a      	str	r2, [r3, #0]
        break;
 8017d3c:	e007      	b.n	8017d4e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017d3e:	697b      	ldr	r3, [r7, #20]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	617b      	str	r3, [r7, #20]
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d1e1      	bne.n	8017d0e <sys_timeout_abs+0x86>
 8017d4a:	e000      	b.n	8017d4e <sys_timeout_abs+0xc6>
    return;
 8017d4c:	bf00      	nop
      }
    }
  }
}
 8017d4e:	3718      	adds	r7, #24
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}
 8017d54:	08027844 	.word	0x08027844
 8017d58:	08027878 	.word	0x08027878
 8017d5c:	080278b8 	.word	0x080278b8
 8017d60:	20004f40 	.word	0x20004f40

08017d64 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b086      	sub	sp, #24
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017d70:	697b      	ldr	r3, [r7, #20]
 8017d72:	685b      	ldr	r3, [r3, #4]
 8017d74:	4798      	blx	r3

  now = sys_now();
 8017d76:	f7f2 f86f 	bl	8009e58 <sys_now>
 8017d7a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	681a      	ldr	r2, [r3, #0]
 8017d80:	4b0f      	ldr	r3, [pc, #60]	; (8017dc0 <lwip_cyclic_timer+0x5c>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	4413      	add	r3, r2
 8017d86:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017d88:	68fa      	ldr	r2, [r7, #12]
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	1ad3      	subs	r3, r2, r3
 8017d8e:	0fdb      	lsrs	r3, r3, #31
 8017d90:	f003 0301 	and.w	r3, r3, #1
 8017d94:	b2db      	uxtb	r3, r3
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d009      	beq.n	8017dae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017d9a:	697b      	ldr	r3, [r7, #20]
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	693b      	ldr	r3, [r7, #16]
 8017da0:	4413      	add	r3, r2
 8017da2:	687a      	ldr	r2, [r7, #4]
 8017da4:	4907      	ldr	r1, [pc, #28]	; (8017dc4 <lwip_cyclic_timer+0x60>)
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7ff ff6e 	bl	8017c88 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017dac:	e004      	b.n	8017db8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017dae:	687a      	ldr	r2, [r7, #4]
 8017db0:	4904      	ldr	r1, [pc, #16]	; (8017dc4 <lwip_cyclic_timer+0x60>)
 8017db2:	68f8      	ldr	r0, [r7, #12]
 8017db4:	f7ff ff68 	bl	8017c88 <sys_timeout_abs>
}
 8017db8:	bf00      	nop
 8017dba:	3718      	adds	r7, #24
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}
 8017dc0:	20004f44 	.word	0x20004f44
 8017dc4:	08017d65 	.word	0x08017d65

08017dc8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017dce:	2301      	movs	r3, #1
 8017dd0:	607b      	str	r3, [r7, #4]
 8017dd2:	e00e      	b.n	8017df2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017dd4:	4a0b      	ldr	r2, [pc, #44]	; (8017e04 <sys_timeouts_init+0x3c>)
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	00db      	lsls	r3, r3, #3
 8017de0:	4a08      	ldr	r2, [pc, #32]	; (8017e04 <sys_timeouts_init+0x3c>)
 8017de2:	4413      	add	r3, r2
 8017de4:	461a      	mov	r2, r3
 8017de6:	4908      	ldr	r1, [pc, #32]	; (8017e08 <sys_timeouts_init+0x40>)
 8017de8:	f000 f810 	bl	8017e0c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	3301      	adds	r3, #1
 8017df0:	607b      	str	r3, [r7, #4]
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	2b02      	cmp	r3, #2
 8017df6:	d9ed      	bls.n	8017dd4 <sys_timeouts_init+0xc>
  }
}
 8017df8:	bf00      	nop
 8017dfa:	bf00      	nop
 8017dfc:	3708      	adds	r7, #8
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}
 8017e02:	bf00      	nop
 8017e04:	08029170 	.word	0x08029170
 8017e08:	08017d65 	.word	0x08017d65

08017e0c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b086      	sub	sp, #24
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017e1e:	d306      	bcc.n	8017e2e <sys_timeout+0x22>
 8017e20:	4b0a      	ldr	r3, [pc, #40]	; (8017e4c <sys_timeout+0x40>)
 8017e22:	f240 1229 	movw	r2, #297	; 0x129
 8017e26:	490a      	ldr	r1, [pc, #40]	; (8017e50 <sys_timeout+0x44>)
 8017e28:	480a      	ldr	r0, [pc, #40]	; (8017e54 <sys_timeout+0x48>)
 8017e2a:	f003 ff17 	bl	801bc5c <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017e2e:	f7f2 f813 	bl	8009e58 <sys_now>
 8017e32:	4602      	mov	r2, r0
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	4413      	add	r3, r2
 8017e38:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017e3a:	687a      	ldr	r2, [r7, #4]
 8017e3c:	68b9      	ldr	r1, [r7, #8]
 8017e3e:	6978      	ldr	r0, [r7, #20]
 8017e40:	f7ff ff22 	bl	8017c88 <sys_timeout_abs>
#endif
}
 8017e44:	bf00      	nop
 8017e46:	3718      	adds	r7, #24
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	08027844 	.word	0x08027844
 8017e50:	080278e0 	.word	0x080278e0
 8017e54:	080278b8 	.word	0x080278b8

08017e58 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	b084      	sub	sp, #16
 8017e5c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017e5e:	f7f1 fffb 	bl	8009e58 <sys_now>
 8017e62:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017e64:	4b17      	ldr	r3, [pc, #92]	; (8017ec4 <sys_check_timeouts+0x6c>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d022      	beq.n	8017eb6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	685b      	ldr	r3, [r3, #4]
 8017e74:	68fa      	ldr	r2, [r7, #12]
 8017e76:	1ad3      	subs	r3, r2, r3
 8017e78:	0fdb      	lsrs	r3, r3, #31
 8017e7a:	f003 0301 	and.w	r3, r3, #1
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d11a      	bne.n	8017eba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017e84:	68bb      	ldr	r3, [r7, #8]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	4a0e      	ldr	r2, [pc, #56]	; (8017ec4 <sys_check_timeouts+0x6c>)
 8017e8a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017e8c:	68bb      	ldr	r3, [r7, #8]
 8017e8e:	689b      	ldr	r3, [r3, #8]
 8017e90:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017e92:	68bb      	ldr	r3, [r7, #8]
 8017e94:	68db      	ldr	r3, [r3, #12]
 8017e96:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	4a0a      	ldr	r2, [pc, #40]	; (8017ec8 <sys_check_timeouts+0x70>)
 8017e9e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017ea0:	68b9      	ldr	r1, [r7, #8]
 8017ea2:	200a      	movs	r0, #10
 8017ea4:	f7f8 fcf6 	bl	8010894 <memp_free>
    if (handler != NULL) {
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d0da      	beq.n	8017e64 <sys_check_timeouts+0xc>
      handler(arg);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	6838      	ldr	r0, [r7, #0]
 8017eb2:	4798      	blx	r3
  do {
 8017eb4:	e7d6      	b.n	8017e64 <sys_check_timeouts+0xc>
      return;
 8017eb6:	bf00      	nop
 8017eb8:	e000      	b.n	8017ebc <sys_check_timeouts+0x64>
      return;
 8017eba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017ebc:	3710      	adds	r7, #16
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}
 8017ec2:	bf00      	nop
 8017ec4:	20004f40 	.word	0x20004f40
 8017ec8:	20004f44 	.word	0x20004f44

08017ecc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017ed2:	4b16      	ldr	r3, [pc, #88]	; (8017f2c <sys_timeouts_sleeptime+0x60>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d102      	bne.n	8017ee0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017eda:	f04f 33ff 	mov.w	r3, #4294967295
 8017ede:	e020      	b.n	8017f22 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017ee0:	f7f1 ffba 	bl	8009e58 <sys_now>
 8017ee4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017ee6:	4b11      	ldr	r3, [pc, #68]	; (8017f2c <sys_timeouts_sleeptime+0x60>)
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	685a      	ldr	r2, [r3, #4]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	1ad3      	subs	r3, r2, r3
 8017ef0:	0fdb      	lsrs	r3, r3, #31
 8017ef2:	f003 0301 	and.w	r3, r3, #1
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d001      	beq.n	8017f00 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017efc:	2300      	movs	r3, #0
 8017efe:	e010      	b.n	8017f22 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017f00:	4b0a      	ldr	r3, [pc, #40]	; (8017f2c <sys_timeouts_sleeptime+0x60>)
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	685a      	ldr	r2, [r3, #4]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	1ad3      	subs	r3, r2, r3
 8017f0a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	da06      	bge.n	8017f20 <sys_timeouts_sleeptime+0x54>
 8017f12:	4b07      	ldr	r3, [pc, #28]	; (8017f30 <sys_timeouts_sleeptime+0x64>)
 8017f14:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017f18:	4906      	ldr	r1, [pc, #24]	; (8017f34 <sys_timeouts_sleeptime+0x68>)
 8017f1a:	4807      	ldr	r0, [pc, #28]	; (8017f38 <sys_timeouts_sleeptime+0x6c>)
 8017f1c:	f003 fe9e 	bl	801bc5c <printf>
    return ret;
 8017f20:	683b      	ldr	r3, [r7, #0]
  }
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	3708      	adds	r7, #8
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	bf00      	nop
 8017f2c:	20004f40 	.word	0x20004f40
 8017f30:	08027844 	.word	0x08027844
 8017f34:	08027918 	.word	0x08027918
 8017f38:	080278b8 	.word	0x080278b8

08017f3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017f40:	f003 fe9e 	bl	801bc80 <rand>
 8017f44:	4603      	mov	r3, r0
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017f52:	b29a      	uxth	r2, r3
 8017f54:	4b01      	ldr	r3, [pc, #4]	; (8017f5c <udp_init+0x20>)
 8017f56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017f58:	bf00      	nop
 8017f5a:	bd80      	pop	{r7, pc}
 8017f5c:	20000034 	.word	0x20000034

08017f60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017f60:	b480      	push	{r7}
 8017f62:	b083      	sub	sp, #12
 8017f64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017f66:	2300      	movs	r3, #0
 8017f68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017f6a:	4b17      	ldr	r3, [pc, #92]	; (8017fc8 <udp_new_port+0x68>)
 8017f6c:	881b      	ldrh	r3, [r3, #0]
 8017f6e:	1c5a      	adds	r2, r3, #1
 8017f70:	b291      	uxth	r1, r2
 8017f72:	4a15      	ldr	r2, [pc, #84]	; (8017fc8 <udp_new_port+0x68>)
 8017f74:	8011      	strh	r1, [r2, #0]
 8017f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f7a:	4293      	cmp	r3, r2
 8017f7c:	d103      	bne.n	8017f86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017f7e:	4b12      	ldr	r3, [pc, #72]	; (8017fc8 <udp_new_port+0x68>)
 8017f80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017f84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f86:	4b11      	ldr	r3, [pc, #68]	; (8017fcc <udp_new_port+0x6c>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	603b      	str	r3, [r7, #0]
 8017f8c:	e011      	b.n	8017fb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017f8e:	683b      	ldr	r3, [r7, #0]
 8017f90:	8a5a      	ldrh	r2, [r3, #18]
 8017f92:	4b0d      	ldr	r3, [pc, #52]	; (8017fc8 <udp_new_port+0x68>)
 8017f94:	881b      	ldrh	r3, [r3, #0]
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d108      	bne.n	8017fac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017f9a:	88fb      	ldrh	r3, [r7, #6]
 8017f9c:	3301      	adds	r3, #1
 8017f9e:	80fb      	strh	r3, [r7, #6]
 8017fa0:	88fb      	ldrh	r3, [r7, #6]
 8017fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017fa6:	d3e0      	bcc.n	8017f6a <udp_new_port+0xa>
        return 0;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	e007      	b.n	8017fbc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fac:	683b      	ldr	r3, [r7, #0]
 8017fae:	68db      	ldr	r3, [r3, #12]
 8017fb0:	603b      	str	r3, [r7, #0]
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d1ea      	bne.n	8017f8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017fb8:	4b03      	ldr	r3, [pc, #12]	; (8017fc8 <udp_new_port+0x68>)
 8017fba:	881b      	ldrh	r3, [r3, #0]
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	370c      	adds	r7, #12
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc6:	4770      	bx	lr
 8017fc8:	20000034 	.word	0x20000034
 8017fcc:	2000be6c 	.word	0x2000be6c

08017fd0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b084      	sub	sp, #16
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	60f8      	str	r0, [r7, #12]
 8017fd8:	60b9      	str	r1, [r7, #8]
 8017fda:	4613      	mov	r3, r2
 8017fdc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d105      	bne.n	8017ff0 <udp_input_local_match+0x20>
 8017fe4:	4b27      	ldr	r3, [pc, #156]	; (8018084 <udp_input_local_match+0xb4>)
 8017fe6:	2287      	movs	r2, #135	; 0x87
 8017fe8:	4927      	ldr	r1, [pc, #156]	; (8018088 <udp_input_local_match+0xb8>)
 8017fea:	4828      	ldr	r0, [pc, #160]	; (801808c <udp_input_local_match+0xbc>)
 8017fec:	f003 fe36 	bl	801bc5c <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d105      	bne.n	8018002 <udp_input_local_match+0x32>
 8017ff6:	4b23      	ldr	r3, [pc, #140]	; (8018084 <udp_input_local_match+0xb4>)
 8017ff8:	2288      	movs	r2, #136	; 0x88
 8017ffa:	4925      	ldr	r1, [pc, #148]	; (8018090 <udp_input_local_match+0xc0>)
 8017ffc:	4823      	ldr	r0, [pc, #140]	; (801808c <udp_input_local_match+0xbc>)
 8017ffe:	f003 fe2d 	bl	801bc5c <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	7a1b      	ldrb	r3, [r3, #8]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d00b      	beq.n	8018022 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	7a1a      	ldrb	r2, [r3, #8]
 801800e:	4b21      	ldr	r3, [pc, #132]	; (8018094 <udp_input_local_match+0xc4>)
 8018010:	685b      	ldr	r3, [r3, #4]
 8018012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018016:	3301      	adds	r3, #1
 8018018:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801801a:	429a      	cmp	r2, r3
 801801c:	d001      	beq.n	8018022 <udp_input_local_match+0x52>
    return 0;
 801801e:	2300      	movs	r3, #0
 8018020:	e02b      	b.n	801807a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018022:	79fb      	ldrb	r3, [r7, #7]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d018      	beq.n	801805a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d013      	beq.n	8018056 <udp_input_local_match+0x86>
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d00f      	beq.n	8018056 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018036:	4b17      	ldr	r3, [pc, #92]	; (8018094 <udp_input_local_match+0xc4>)
 8018038:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801803a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801803e:	d00a      	beq.n	8018056 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	4b13      	ldr	r3, [pc, #76]	; (8018094 <udp_input_local_match+0xc4>)
 8018046:	695b      	ldr	r3, [r3, #20]
 8018048:	405a      	eors	r2, r3
 801804a:	68bb      	ldr	r3, [r7, #8]
 801804c:	3308      	adds	r3, #8
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018052:	2b00      	cmp	r3, #0
 8018054:	d110      	bne.n	8018078 <udp_input_local_match+0xa8>
          return 1;
 8018056:	2301      	movs	r3, #1
 8018058:	e00f      	b.n	801807a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d009      	beq.n	8018074 <udp_input_local_match+0xa4>
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d005      	beq.n	8018074 <udp_input_local_match+0xa4>
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	681a      	ldr	r2, [r3, #0]
 801806c:	4b09      	ldr	r3, [pc, #36]	; (8018094 <udp_input_local_match+0xc4>)
 801806e:	695b      	ldr	r3, [r3, #20]
 8018070:	429a      	cmp	r2, r3
 8018072:	d101      	bne.n	8018078 <udp_input_local_match+0xa8>
        return 1;
 8018074:	2301      	movs	r3, #1
 8018076:	e000      	b.n	801807a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018078:	2300      	movs	r3, #0
}
 801807a:	4618      	mov	r0, r3
 801807c:	3710      	adds	r7, #16
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
 8018082:	bf00      	nop
 8018084:	0802792c 	.word	0x0802792c
 8018088:	0802795c 	.word	0x0802795c
 801808c:	08027980 	.word	0x08027980
 8018090:	080279a8 	.word	0x080279a8
 8018094:	20008740 	.word	0x20008740

08018098 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018098:	b590      	push	{r4, r7, lr}
 801809a:	b08d      	sub	sp, #52	; 0x34
 801809c:	af02      	add	r7, sp, #8
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80180a2:	2300      	movs	r3, #0
 80180a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d105      	bne.n	80180b8 <udp_input+0x20>
 80180ac:	4b7c      	ldr	r3, [pc, #496]	; (80182a0 <udp_input+0x208>)
 80180ae:	22cf      	movs	r2, #207	; 0xcf
 80180b0:	497c      	ldr	r1, [pc, #496]	; (80182a4 <udp_input+0x20c>)
 80180b2:	487d      	ldr	r0, [pc, #500]	; (80182a8 <udp_input+0x210>)
 80180b4:	f003 fdd2 	bl	801bc5c <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d105      	bne.n	80180ca <udp_input+0x32>
 80180be:	4b78      	ldr	r3, [pc, #480]	; (80182a0 <udp_input+0x208>)
 80180c0:	22d0      	movs	r2, #208	; 0xd0
 80180c2:	497a      	ldr	r1, [pc, #488]	; (80182ac <udp_input+0x214>)
 80180c4:	4878      	ldr	r0, [pc, #480]	; (80182a8 <udp_input+0x210>)
 80180c6:	f003 fdc9 	bl	801bc5c <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	895b      	ldrh	r3, [r3, #10]
 80180ce:	2b07      	cmp	r3, #7
 80180d0:	d803      	bhi.n	80180da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7f9 fa5c 	bl	8011590 <pbuf_free>
    goto end;
 80180d8:	e0de      	b.n	8018298 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80180e0:	4b73      	ldr	r3, [pc, #460]	; (80182b0 <udp_input+0x218>)
 80180e2:	695b      	ldr	r3, [r3, #20]
 80180e4:	4a72      	ldr	r2, [pc, #456]	; (80182b0 <udp_input+0x218>)
 80180e6:	6812      	ldr	r2, [r2, #0]
 80180e8:	4611      	mov	r1, r2
 80180ea:	4618      	mov	r0, r3
 80180ec:	f001 ff80 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 80180f0:	4603      	mov	r3, r0
 80180f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	881b      	ldrh	r3, [r3, #0]
 80180f8:	b29b      	uxth	r3, r3
 80180fa:	4618      	mov	r0, r3
 80180fc:	f7f7 fe8c 	bl	800fe18 <lwip_htons>
 8018100:	4603      	mov	r3, r0
 8018102:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	885b      	ldrh	r3, [r3, #2]
 8018108:	b29b      	uxth	r3, r3
 801810a:	4618      	mov	r0, r3
 801810c:	f7f7 fe84 	bl	800fe18 <lwip_htons>
 8018110:	4603      	mov	r3, r0
 8018112:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018114:	2300      	movs	r3, #0
 8018116:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018118:	2300      	movs	r3, #0
 801811a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801811c:	2300      	movs	r3, #0
 801811e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018120:	4b64      	ldr	r3, [pc, #400]	; (80182b4 <udp_input+0x21c>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	627b      	str	r3, [r7, #36]	; 0x24
 8018126:	e054      	b.n	80181d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812a:	8a5b      	ldrh	r3, [r3, #18]
 801812c:	89fa      	ldrh	r2, [r7, #14]
 801812e:	429a      	cmp	r2, r3
 8018130:	d14a      	bne.n	80181c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018132:	7cfb      	ldrb	r3, [r7, #19]
 8018134:	461a      	mov	r2, r3
 8018136:	6839      	ldr	r1, [r7, #0]
 8018138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801813a:	f7ff ff49 	bl	8017fd0 <udp_input_local_match>
 801813e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018140:	2b00      	cmp	r3, #0
 8018142:	d041      	beq.n	80181c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018146:	7c1b      	ldrb	r3, [r3, #16]
 8018148:	f003 0304 	and.w	r3, r3, #4
 801814c:	2b00      	cmp	r3, #0
 801814e:	d11d      	bne.n	801818c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018150:	69fb      	ldr	r3, [r7, #28]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d102      	bne.n	801815c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018158:	61fb      	str	r3, [r7, #28]
 801815a:	e017      	b.n	801818c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801815c:	7cfb      	ldrb	r3, [r7, #19]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d014      	beq.n	801818c <udp_input+0xf4>
 8018162:	4b53      	ldr	r3, [pc, #332]	; (80182b0 <udp_input+0x218>)
 8018164:	695b      	ldr	r3, [r3, #20]
 8018166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801816a:	d10f      	bne.n	801818c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801816c:	69fb      	ldr	r3, [r7, #28]
 801816e:	681a      	ldr	r2, [r3, #0]
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	3304      	adds	r3, #4
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	429a      	cmp	r2, r3
 8018178:	d008      	beq.n	801818c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	3304      	adds	r3, #4
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	429a      	cmp	r2, r3
 8018186:	d101      	bne.n	801818c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818e:	8a9b      	ldrh	r3, [r3, #20]
 8018190:	8a3a      	ldrh	r2, [r7, #16]
 8018192:	429a      	cmp	r2, r3
 8018194:	d118      	bne.n	80181c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018198:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801819a:	2b00      	cmp	r3, #0
 801819c:	d005      	beq.n	80181aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a0:	685a      	ldr	r2, [r3, #4]
 80181a2:	4b43      	ldr	r3, [pc, #268]	; (80182b0 <udp_input+0x218>)
 80181a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80181a6:	429a      	cmp	r2, r3
 80181a8:	d10e      	bne.n	80181c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80181aa:	6a3b      	ldr	r3, [r7, #32]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d014      	beq.n	80181da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80181b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b2:	68da      	ldr	r2, [r3, #12]
 80181b4:	6a3b      	ldr	r3, [r7, #32]
 80181b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80181b8:	4b3e      	ldr	r3, [pc, #248]	; (80182b4 <udp_input+0x21c>)
 80181ba:	681a      	ldr	r2, [r3, #0]
 80181bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80181c0:	4a3c      	ldr	r2, [pc, #240]	; (80182b4 <udp_input+0x21c>)
 80181c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80181c6:	e008      	b.n	80181da <udp_input+0x142>
      }
    }

    prev = pcb;
 80181c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80181cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	627b      	str	r3, [r7, #36]	; 0x24
 80181d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1a7      	bne.n	8018128 <udp_input+0x90>
 80181d8:	e000      	b.n	80181dc <udp_input+0x144>
        break;
 80181da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80181dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d101      	bne.n	80181e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80181e2:	69fb      	ldr	r3, [r7, #28]
 80181e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d002      	beq.n	80181f2 <udp_input+0x15a>
    for_us = 1;
 80181ec:	2301      	movs	r3, #1
 80181ee:	76fb      	strb	r3, [r7, #27]
 80181f0:	e00a      	b.n	8018208 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	3304      	adds	r3, #4
 80181f6:	681a      	ldr	r2, [r3, #0]
 80181f8:	4b2d      	ldr	r3, [pc, #180]	; (80182b0 <udp_input+0x218>)
 80181fa:	695b      	ldr	r3, [r3, #20]
 80181fc:	429a      	cmp	r2, r3
 80181fe:	bf0c      	ite	eq
 8018200:	2301      	moveq	r3, #1
 8018202:	2300      	movne	r3, #0
 8018204:	b2db      	uxtb	r3, r3
 8018206:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018208:	7efb      	ldrb	r3, [r7, #27]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d041      	beq.n	8018292 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801820e:	2108      	movs	r1, #8
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f7f9 f937 	bl	8011484 <pbuf_remove_header>
 8018216:	4603      	mov	r3, r0
 8018218:	2b00      	cmp	r3, #0
 801821a:	d00a      	beq.n	8018232 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801821c:	4b20      	ldr	r3, [pc, #128]	; (80182a0 <udp_input+0x208>)
 801821e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018222:	4925      	ldr	r1, [pc, #148]	; (80182b8 <udp_input+0x220>)
 8018224:	4820      	ldr	r0, [pc, #128]	; (80182a8 <udp_input+0x210>)
 8018226:	f003 fd19 	bl	801bc5c <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f7f9 f9b0 	bl	8011590 <pbuf_free>
      goto end;
 8018230:	e032      	b.n	8018298 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018234:	2b00      	cmp	r3, #0
 8018236:	d012      	beq.n	801825e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823a:	699b      	ldr	r3, [r3, #24]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d00a      	beq.n	8018256 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018242:	699c      	ldr	r4, [r3, #24]
 8018244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018246:	69d8      	ldr	r0, [r3, #28]
 8018248:	8a3b      	ldrh	r3, [r7, #16]
 801824a:	9300      	str	r3, [sp, #0]
 801824c:	4b1b      	ldr	r3, [pc, #108]	; (80182bc <udp_input+0x224>)
 801824e:	687a      	ldr	r2, [r7, #4]
 8018250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018252:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018254:	e021      	b.n	801829a <udp_input+0x202>
        pbuf_free(p);
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f7f9 f99a 	bl	8011590 <pbuf_free>
        goto end;
 801825c:	e01c      	b.n	8018298 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801825e:	7cfb      	ldrb	r3, [r7, #19]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d112      	bne.n	801828a <udp_input+0x1f2>
 8018264:	4b12      	ldr	r3, [pc, #72]	; (80182b0 <udp_input+0x218>)
 8018266:	695b      	ldr	r3, [r3, #20]
 8018268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801826c:	2be0      	cmp	r3, #224	; 0xe0
 801826e:	d00c      	beq.n	801828a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018270:	4b0f      	ldr	r3, [pc, #60]	; (80182b0 <udp_input+0x218>)
 8018272:	899b      	ldrh	r3, [r3, #12]
 8018274:	3308      	adds	r3, #8
 8018276:	b29b      	uxth	r3, r3
 8018278:	b21b      	sxth	r3, r3
 801827a:	4619      	mov	r1, r3
 801827c:	6878      	ldr	r0, [r7, #4]
 801827e:	f7f9 f974 	bl	801156a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018282:	2103      	movs	r1, #3
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f001 fb93 	bl	80199b0 <icmp_dest_unreach>
      pbuf_free(p);
 801828a:	6878      	ldr	r0, [r7, #4]
 801828c:	f7f9 f980 	bl	8011590 <pbuf_free>
  return;
 8018290:	e003      	b.n	801829a <udp_input+0x202>
    pbuf_free(p);
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f7f9 f97c 	bl	8011590 <pbuf_free>
  return;
 8018298:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801829a:	372c      	adds	r7, #44	; 0x2c
 801829c:	46bd      	mov	sp, r7
 801829e:	bd90      	pop	{r4, r7, pc}
 80182a0:	0802792c 	.word	0x0802792c
 80182a4:	080279d0 	.word	0x080279d0
 80182a8:	08027980 	.word	0x08027980
 80182ac:	080279e8 	.word	0x080279e8
 80182b0:	20008740 	.word	0x20008740
 80182b4:	2000be6c 	.word	0x2000be6c
 80182b8:	08027a04 	.word	0x08027a04
 80182bc:	20008750 	.word	0x20008750

080182c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
 80182c8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d109      	bne.n	80182e4 <udp_send+0x24>
 80182d0:	4b11      	ldr	r3, [pc, #68]	; (8018318 <udp_send+0x58>)
 80182d2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80182d6:	4911      	ldr	r1, [pc, #68]	; (801831c <udp_send+0x5c>)
 80182d8:	4811      	ldr	r0, [pc, #68]	; (8018320 <udp_send+0x60>)
 80182da:	f003 fcbf 	bl	801bc5c <printf>
 80182de:	f06f 030f 	mvn.w	r3, #15
 80182e2:	e015      	b.n	8018310 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80182e4:	683b      	ldr	r3, [r7, #0]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d109      	bne.n	80182fe <udp_send+0x3e>
 80182ea:	4b0b      	ldr	r3, [pc, #44]	; (8018318 <udp_send+0x58>)
 80182ec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80182f0:	490c      	ldr	r1, [pc, #48]	; (8018324 <udp_send+0x64>)
 80182f2:	480b      	ldr	r0, [pc, #44]	; (8018320 <udp_send+0x60>)
 80182f4:	f003 fcb2 	bl	801bc5c <printf>
 80182f8:	f06f 030f 	mvn.w	r3, #15
 80182fc:	e008      	b.n	8018310 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	1d1a      	adds	r2, r3, #4
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	8a9b      	ldrh	r3, [r3, #20]
 8018306:	6839      	ldr	r1, [r7, #0]
 8018308:	6878      	ldr	r0, [r7, #4]
 801830a:	f000 f80d 	bl	8018328 <udp_sendto>
 801830e:	4603      	mov	r3, r0
}
 8018310:	4618      	mov	r0, r3
 8018312:	3708      	adds	r7, #8
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}
 8018318:	0802792c 	.word	0x0802792c
 801831c:	08027a20 	.word	0x08027a20
 8018320:	08027980 	.word	0x08027980
 8018324:	08027a38 	.word	0x08027a38

08018328 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b088      	sub	sp, #32
 801832c:	af02      	add	r7, sp, #8
 801832e:	60f8      	str	r0, [r7, #12]
 8018330:	60b9      	str	r1, [r7, #8]
 8018332:	607a      	str	r2, [r7, #4]
 8018334:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2b00      	cmp	r3, #0
 801833a:	d109      	bne.n	8018350 <udp_sendto+0x28>
 801833c:	4b23      	ldr	r3, [pc, #140]	; (80183cc <udp_sendto+0xa4>)
 801833e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018342:	4923      	ldr	r1, [pc, #140]	; (80183d0 <udp_sendto+0xa8>)
 8018344:	4823      	ldr	r0, [pc, #140]	; (80183d4 <udp_sendto+0xac>)
 8018346:	f003 fc89 	bl	801bc5c <printf>
 801834a:	f06f 030f 	mvn.w	r3, #15
 801834e:	e038      	b.n	80183c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d109      	bne.n	801836a <udp_sendto+0x42>
 8018356:	4b1d      	ldr	r3, [pc, #116]	; (80183cc <udp_sendto+0xa4>)
 8018358:	f240 2219 	movw	r2, #537	; 0x219
 801835c:	491e      	ldr	r1, [pc, #120]	; (80183d8 <udp_sendto+0xb0>)
 801835e:	481d      	ldr	r0, [pc, #116]	; (80183d4 <udp_sendto+0xac>)
 8018360:	f003 fc7c 	bl	801bc5c <printf>
 8018364:	f06f 030f 	mvn.w	r3, #15
 8018368:	e02b      	b.n	80183c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d109      	bne.n	8018384 <udp_sendto+0x5c>
 8018370:	4b16      	ldr	r3, [pc, #88]	; (80183cc <udp_sendto+0xa4>)
 8018372:	f240 221a 	movw	r2, #538	; 0x21a
 8018376:	4919      	ldr	r1, [pc, #100]	; (80183dc <udp_sendto+0xb4>)
 8018378:	4816      	ldr	r0, [pc, #88]	; (80183d4 <udp_sendto+0xac>)
 801837a:	f003 fc6f 	bl	801bc5c <printf>
 801837e:	f06f 030f 	mvn.w	r3, #15
 8018382:	e01e      	b.n	80183c2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	7a1b      	ldrb	r3, [r3, #8]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d006      	beq.n	801839a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	7a1b      	ldrb	r3, [r3, #8]
 8018390:	4618      	mov	r0, r3
 8018392:	f7f8 fd6f 	bl	8010e74 <netif_get_by_index>
 8018396:	6178      	str	r0, [r7, #20]
 8018398:	e003      	b.n	80183a2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f001 fb92 	bl	8019ac4 <ip4_route>
 80183a0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d102      	bne.n	80183ae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80183a8:	f06f 0303 	mvn.w	r3, #3
 80183ac:	e009      	b.n	80183c2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80183ae:	887a      	ldrh	r2, [r7, #2]
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	9300      	str	r3, [sp, #0]
 80183b4:	4613      	mov	r3, r2
 80183b6:	687a      	ldr	r2, [r7, #4]
 80183b8:	68b9      	ldr	r1, [r7, #8]
 80183ba:	68f8      	ldr	r0, [r7, #12]
 80183bc:	f000 f810 	bl	80183e0 <udp_sendto_if>
 80183c0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3718      	adds	r7, #24
 80183c6:	46bd      	mov	sp, r7
 80183c8:	bd80      	pop	{r7, pc}
 80183ca:	bf00      	nop
 80183cc:	0802792c 	.word	0x0802792c
 80183d0:	08027a50 	.word	0x08027a50
 80183d4:	08027980 	.word	0x08027980
 80183d8:	08027a68 	.word	0x08027a68
 80183dc:	08027a84 	.word	0x08027a84

080183e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80183e0:	b580      	push	{r7, lr}
 80183e2:	b088      	sub	sp, #32
 80183e4:	af02      	add	r7, sp, #8
 80183e6:	60f8      	str	r0, [r7, #12]
 80183e8:	60b9      	str	r1, [r7, #8]
 80183ea:	607a      	str	r2, [r7, #4]
 80183ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d109      	bne.n	8018408 <udp_sendto_if+0x28>
 80183f4:	4b2e      	ldr	r3, [pc, #184]	; (80184b0 <udp_sendto_if+0xd0>)
 80183f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80183fa:	492e      	ldr	r1, [pc, #184]	; (80184b4 <udp_sendto_if+0xd4>)
 80183fc:	482e      	ldr	r0, [pc, #184]	; (80184b8 <udp_sendto_if+0xd8>)
 80183fe:	f003 fc2d 	bl	801bc5c <printf>
 8018402:	f06f 030f 	mvn.w	r3, #15
 8018406:	e04f      	b.n	80184a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d109      	bne.n	8018422 <udp_sendto_if+0x42>
 801840e:	4b28      	ldr	r3, [pc, #160]	; (80184b0 <udp_sendto_if+0xd0>)
 8018410:	f240 2281 	movw	r2, #641	; 0x281
 8018414:	4929      	ldr	r1, [pc, #164]	; (80184bc <udp_sendto_if+0xdc>)
 8018416:	4828      	ldr	r0, [pc, #160]	; (80184b8 <udp_sendto_if+0xd8>)
 8018418:	f003 fc20 	bl	801bc5c <printf>
 801841c:	f06f 030f 	mvn.w	r3, #15
 8018420:	e042      	b.n	80184a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d109      	bne.n	801843c <udp_sendto_if+0x5c>
 8018428:	4b21      	ldr	r3, [pc, #132]	; (80184b0 <udp_sendto_if+0xd0>)
 801842a:	f240 2282 	movw	r2, #642	; 0x282
 801842e:	4924      	ldr	r1, [pc, #144]	; (80184c0 <udp_sendto_if+0xe0>)
 8018430:	4821      	ldr	r0, [pc, #132]	; (80184b8 <udp_sendto_if+0xd8>)
 8018432:	f003 fc13 	bl	801bc5c <printf>
 8018436:	f06f 030f 	mvn.w	r3, #15
 801843a:	e035      	b.n	80184a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d109      	bne.n	8018456 <udp_sendto_if+0x76>
 8018442:	4b1b      	ldr	r3, [pc, #108]	; (80184b0 <udp_sendto_if+0xd0>)
 8018444:	f240 2283 	movw	r2, #643	; 0x283
 8018448:	491e      	ldr	r1, [pc, #120]	; (80184c4 <udp_sendto_if+0xe4>)
 801844a:	481b      	ldr	r0, [pc, #108]	; (80184b8 <udp_sendto_if+0xd8>)
 801844c:	f003 fc06 	bl	801bc5c <printf>
 8018450:	f06f 030f 	mvn.w	r3, #15
 8018454:	e028      	b.n	80184a8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d009      	beq.n	8018470 <udp_sendto_if+0x90>
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d005      	beq.n	8018470 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801846c:	2be0      	cmp	r3, #224	; 0xe0
 801846e:	d103      	bne.n	8018478 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018470:	6a3b      	ldr	r3, [r7, #32]
 8018472:	3304      	adds	r3, #4
 8018474:	617b      	str	r3, [r7, #20]
 8018476:	e00b      	b.n	8018490 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	681a      	ldr	r2, [r3, #0]
 801847c:	6a3b      	ldr	r3, [r7, #32]
 801847e:	3304      	adds	r3, #4
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	429a      	cmp	r2, r3
 8018484:	d002      	beq.n	801848c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018486:	f06f 0303 	mvn.w	r3, #3
 801848a:	e00d      	b.n	80184a8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018490:	887a      	ldrh	r2, [r7, #2]
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	9301      	str	r3, [sp, #4]
 8018496:	6a3b      	ldr	r3, [r7, #32]
 8018498:	9300      	str	r3, [sp, #0]
 801849a:	4613      	mov	r3, r2
 801849c:	687a      	ldr	r2, [r7, #4]
 801849e:	68b9      	ldr	r1, [r7, #8]
 80184a0:	68f8      	ldr	r0, [r7, #12]
 80184a2:	f000 f811 	bl	80184c8 <udp_sendto_if_src>
 80184a6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80184a8:	4618      	mov	r0, r3
 80184aa:	3718      	adds	r7, #24
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	0802792c 	.word	0x0802792c
 80184b4:	08027aa0 	.word	0x08027aa0
 80184b8:	08027980 	.word	0x08027980
 80184bc:	08027abc 	.word	0x08027abc
 80184c0:	08027ad8 	.word	0x08027ad8
 80184c4:	08027af8 	.word	0x08027af8

080184c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b08c      	sub	sp, #48	; 0x30
 80184cc:	af04      	add	r7, sp, #16
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	607a      	str	r2, [r7, #4]
 80184d4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d109      	bne.n	80184f0 <udp_sendto_if_src+0x28>
 80184dc:	4b65      	ldr	r3, [pc, #404]	; (8018674 <udp_sendto_if_src+0x1ac>)
 80184de:	f240 22d1 	movw	r2, #721	; 0x2d1
 80184e2:	4965      	ldr	r1, [pc, #404]	; (8018678 <udp_sendto_if_src+0x1b0>)
 80184e4:	4865      	ldr	r0, [pc, #404]	; (801867c <udp_sendto_if_src+0x1b4>)
 80184e6:	f003 fbb9 	bl	801bc5c <printf>
 80184ea:	f06f 030f 	mvn.w	r3, #15
 80184ee:	e0bc      	b.n	801866a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80184f0:	68bb      	ldr	r3, [r7, #8]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d109      	bne.n	801850a <udp_sendto_if_src+0x42>
 80184f6:	4b5f      	ldr	r3, [pc, #380]	; (8018674 <udp_sendto_if_src+0x1ac>)
 80184f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80184fc:	4960      	ldr	r1, [pc, #384]	; (8018680 <udp_sendto_if_src+0x1b8>)
 80184fe:	485f      	ldr	r0, [pc, #380]	; (801867c <udp_sendto_if_src+0x1b4>)
 8018500:	f003 fbac 	bl	801bc5c <printf>
 8018504:	f06f 030f 	mvn.w	r3, #15
 8018508:	e0af      	b.n	801866a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d109      	bne.n	8018524 <udp_sendto_if_src+0x5c>
 8018510:	4b58      	ldr	r3, [pc, #352]	; (8018674 <udp_sendto_if_src+0x1ac>)
 8018512:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018516:	495b      	ldr	r1, [pc, #364]	; (8018684 <udp_sendto_if_src+0x1bc>)
 8018518:	4858      	ldr	r0, [pc, #352]	; (801867c <udp_sendto_if_src+0x1b4>)
 801851a:	f003 fb9f 	bl	801bc5c <printf>
 801851e:	f06f 030f 	mvn.w	r3, #15
 8018522:	e0a2      	b.n	801866a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018526:	2b00      	cmp	r3, #0
 8018528:	d109      	bne.n	801853e <udp_sendto_if_src+0x76>
 801852a:	4b52      	ldr	r3, [pc, #328]	; (8018674 <udp_sendto_if_src+0x1ac>)
 801852c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8018530:	4955      	ldr	r1, [pc, #340]	; (8018688 <udp_sendto_if_src+0x1c0>)
 8018532:	4852      	ldr	r0, [pc, #328]	; (801867c <udp_sendto_if_src+0x1b4>)
 8018534:	f003 fb92 	bl	801bc5c <printf>
 8018538:	f06f 030f 	mvn.w	r3, #15
 801853c:	e095      	b.n	801866a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018540:	2b00      	cmp	r3, #0
 8018542:	d109      	bne.n	8018558 <udp_sendto_if_src+0x90>
 8018544:	4b4b      	ldr	r3, [pc, #300]	; (8018674 <udp_sendto_if_src+0x1ac>)
 8018546:	f240 22d5 	movw	r2, #725	; 0x2d5
 801854a:	4950      	ldr	r1, [pc, #320]	; (801868c <udp_sendto_if_src+0x1c4>)
 801854c:	484b      	ldr	r0, [pc, #300]	; (801867c <udp_sendto_if_src+0x1b4>)
 801854e:	f003 fb85 	bl	801bc5c <printf>
 8018552:	f06f 030f 	mvn.w	r3, #15
 8018556:	e088      	b.n	801866a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	8a5b      	ldrh	r3, [r3, #18]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d10f      	bne.n	8018580 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018560:	68f9      	ldr	r1, [r7, #12]
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	8a5b      	ldrh	r3, [r3, #18]
 8018566:	461a      	mov	r2, r3
 8018568:	68f8      	ldr	r0, [r7, #12]
 801856a:	f000 f893 	bl	8018694 <udp_bind>
 801856e:	4603      	mov	r3, r0
 8018570:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018572:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d002      	beq.n	8018580 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801857a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801857e:	e074      	b.n	801866a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	891b      	ldrh	r3, [r3, #8]
 8018584:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018588:	4293      	cmp	r3, r2
 801858a:	d902      	bls.n	8018592 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801858c:	f04f 33ff 	mov.w	r3, #4294967295
 8018590:	e06b      	b.n	801866a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018592:	2108      	movs	r1, #8
 8018594:	68b8      	ldr	r0, [r7, #8]
 8018596:	f7f8 ff65 	bl	8011464 <pbuf_add_header>
 801859a:	4603      	mov	r3, r0
 801859c:	2b00      	cmp	r3, #0
 801859e:	d015      	beq.n	80185cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80185a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80185a4:	2108      	movs	r1, #8
 80185a6:	2022      	movs	r0, #34	; 0x22
 80185a8:	f7f8 fd0e 	bl	8010fc8 <pbuf_alloc>
 80185ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80185ae:	69fb      	ldr	r3, [r7, #28]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d102      	bne.n	80185ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80185b4:	f04f 33ff 	mov.w	r3, #4294967295
 80185b8:	e057      	b.n	801866a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	891b      	ldrh	r3, [r3, #8]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d006      	beq.n	80185d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80185c2:	68b9      	ldr	r1, [r7, #8]
 80185c4:	69f8      	ldr	r0, [r7, #28]
 80185c6:	f7f9 f907 	bl	80117d8 <pbuf_chain>
 80185ca:	e001      	b.n	80185d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80185cc:	68bb      	ldr	r3, [r7, #8]
 80185ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80185d0:	69fb      	ldr	r3, [r7, #28]
 80185d2:	895b      	ldrh	r3, [r3, #10]
 80185d4:	2b07      	cmp	r3, #7
 80185d6:	d806      	bhi.n	80185e6 <udp_sendto_if_src+0x11e>
 80185d8:	4b26      	ldr	r3, [pc, #152]	; (8018674 <udp_sendto_if_src+0x1ac>)
 80185da:	f240 320d 	movw	r2, #781	; 0x30d
 80185de:	492c      	ldr	r1, [pc, #176]	; (8018690 <udp_sendto_if_src+0x1c8>)
 80185e0:	4826      	ldr	r0, [pc, #152]	; (801867c <udp_sendto_if_src+0x1b4>)
 80185e2:	f003 fb3b 	bl	801bc5c <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80185e6:	69fb      	ldr	r3, [r7, #28]
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	8a5b      	ldrh	r3, [r3, #18]
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f7 fc11 	bl	800fe18 <lwip_htons>
 80185f6:	4603      	mov	r3, r0
 80185f8:	461a      	mov	r2, r3
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80185fe:	887b      	ldrh	r3, [r7, #2]
 8018600:	4618      	mov	r0, r3
 8018602:	f7f7 fc09 	bl	800fe18 <lwip_htons>
 8018606:	4603      	mov	r3, r0
 8018608:	461a      	mov	r2, r3
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	2200      	movs	r2, #0
 8018612:	719a      	strb	r2, [r3, #6]
 8018614:	2200      	movs	r2, #0
 8018616:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018618:	69fb      	ldr	r3, [r7, #28]
 801861a:	891b      	ldrh	r3, [r3, #8]
 801861c:	4618      	mov	r0, r3
 801861e:	f7f7 fbfb 	bl	800fe18 <lwip_htons>
 8018622:	4603      	mov	r3, r0
 8018624:	461a      	mov	r2, r3
 8018626:	697b      	ldr	r3, [r7, #20]
 8018628:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801862a:	2311      	movs	r3, #17
 801862c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	7adb      	ldrb	r3, [r3, #11]
 8018632:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	7a9b      	ldrb	r3, [r3, #10]
 8018638:	7cb9      	ldrb	r1, [r7, #18]
 801863a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801863c:	9202      	str	r2, [sp, #8]
 801863e:	7cfa      	ldrb	r2, [r7, #19]
 8018640:	9201      	str	r2, [sp, #4]
 8018642:	9300      	str	r3, [sp, #0]
 8018644:	460b      	mov	r3, r1
 8018646:	687a      	ldr	r2, [r7, #4]
 8018648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801864a:	69f8      	ldr	r0, [r7, #28]
 801864c:	f001 fc22 	bl	8019e94 <ip4_output_if_src>
 8018650:	4603      	mov	r3, r0
 8018652:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018654:	69fa      	ldr	r2, [r7, #28]
 8018656:	68bb      	ldr	r3, [r7, #8]
 8018658:	429a      	cmp	r2, r3
 801865a:	d004      	beq.n	8018666 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801865c:	69f8      	ldr	r0, [r7, #28]
 801865e:	f7f8 ff97 	bl	8011590 <pbuf_free>
    q = NULL;
 8018662:	2300      	movs	r3, #0
 8018664:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018666:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801866a:	4618      	mov	r0, r3
 801866c:	3720      	adds	r7, #32
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}
 8018672:	bf00      	nop
 8018674:	0802792c 	.word	0x0802792c
 8018678:	08027b18 	.word	0x08027b18
 801867c:	08027980 	.word	0x08027980
 8018680:	08027b38 	.word	0x08027b38
 8018684:	08027b58 	.word	0x08027b58
 8018688:	08027b7c 	.word	0x08027b7c
 801868c:	08027ba0 	.word	0x08027ba0
 8018690:	08027bc4 	.word	0x08027bc4

08018694 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b086      	sub	sp, #24
 8018698:	af00      	add	r7, sp, #0
 801869a:	60f8      	str	r0, [r7, #12]
 801869c:	60b9      	str	r1, [r7, #8]
 801869e:	4613      	mov	r3, r2
 80186a0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80186a2:	68bb      	ldr	r3, [r7, #8]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d101      	bne.n	80186ac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80186a8:	4b39      	ldr	r3, [pc, #228]	; (8018790 <udp_bind+0xfc>)
 80186aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d109      	bne.n	80186c6 <udp_bind+0x32>
 80186b2:	4b38      	ldr	r3, [pc, #224]	; (8018794 <udp_bind+0x100>)
 80186b4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80186b8:	4937      	ldr	r1, [pc, #220]	; (8018798 <udp_bind+0x104>)
 80186ba:	4838      	ldr	r0, [pc, #224]	; (801879c <udp_bind+0x108>)
 80186bc:	f003 face 	bl	801bc5c <printf>
 80186c0:	f06f 030f 	mvn.w	r3, #15
 80186c4:	e060      	b.n	8018788 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80186c6:	2300      	movs	r3, #0
 80186c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186ca:	4b35      	ldr	r3, [pc, #212]	; (80187a0 <udp_bind+0x10c>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	617b      	str	r3, [r7, #20]
 80186d0:	e009      	b.n	80186e6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80186d2:	68fa      	ldr	r2, [r7, #12]
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d102      	bne.n	80186e0 <udp_bind+0x4c>
      rebind = 1;
 80186da:	2301      	movs	r3, #1
 80186dc:	74fb      	strb	r3, [r7, #19]
      break;
 80186de:	e005      	b.n	80186ec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	68db      	ldr	r3, [r3, #12]
 80186e4:	617b      	str	r3, [r7, #20]
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d1f2      	bne.n	80186d2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80186ec:	88fb      	ldrh	r3, [r7, #6]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d109      	bne.n	8018706 <udp_bind+0x72>
    port = udp_new_port();
 80186f2:	f7ff fc35 	bl	8017f60 <udp_new_port>
 80186f6:	4603      	mov	r3, r0
 80186f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80186fa:	88fb      	ldrh	r3, [r7, #6]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d12c      	bne.n	801875a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018700:	f06f 0307 	mvn.w	r3, #7
 8018704:	e040      	b.n	8018788 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018706:	4b26      	ldr	r3, [pc, #152]	; (80187a0 <udp_bind+0x10c>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	617b      	str	r3, [r7, #20]
 801870c:	e022      	b.n	8018754 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801870e:	68fa      	ldr	r2, [r7, #12]
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	429a      	cmp	r2, r3
 8018714:	d01b      	beq.n	801874e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018716:	697b      	ldr	r3, [r7, #20]
 8018718:	8a5b      	ldrh	r3, [r3, #18]
 801871a:	88fa      	ldrh	r2, [r7, #6]
 801871c:	429a      	cmp	r2, r3
 801871e:	d116      	bne.n	801874e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	681a      	ldr	r2, [r3, #0]
 8018724:	68bb      	ldr	r3, [r7, #8]
 8018726:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018728:	429a      	cmp	r2, r3
 801872a:	d00d      	beq.n	8018748 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d00a      	beq.n	8018748 <udp_bind+0xb4>
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d006      	beq.n	8018748 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801873a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801873c:	2b00      	cmp	r3, #0
 801873e:	d003      	beq.n	8018748 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018740:	697b      	ldr	r3, [r7, #20]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d102      	bne.n	801874e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018748:	f06f 0307 	mvn.w	r3, #7
 801874c:	e01c      	b.n	8018788 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801874e:	697b      	ldr	r3, [r7, #20]
 8018750:	68db      	ldr	r3, [r3, #12]
 8018752:	617b      	str	r3, [r7, #20]
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d1d9      	bne.n	801870e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d002      	beq.n	8018766 <udp_bind+0xd2>
 8018760:	68bb      	ldr	r3, [r7, #8]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	e000      	b.n	8018768 <udp_bind+0xd4>
 8018766:	2300      	movs	r3, #0
 8018768:	68fa      	ldr	r2, [r7, #12]
 801876a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	88fa      	ldrh	r2, [r7, #6]
 8018770:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018772:	7cfb      	ldrb	r3, [r7, #19]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d106      	bne.n	8018786 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018778:	4b09      	ldr	r3, [pc, #36]	; (80187a0 <udp_bind+0x10c>)
 801877a:	681a      	ldr	r2, [r3, #0]
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018780:	4a07      	ldr	r2, [pc, #28]	; (80187a0 <udp_bind+0x10c>)
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018786:	2300      	movs	r3, #0
}
 8018788:	4618      	mov	r0, r3
 801878a:	3718      	adds	r7, #24
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}
 8018790:	08029188 	.word	0x08029188
 8018794:	0802792c 	.word	0x0802792c
 8018798:	08027bf4 	.word	0x08027bf4
 801879c:	08027980 	.word	0x08027980
 80187a0:	2000be6c 	.word	0x2000be6c

080187a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b084      	sub	sp, #16
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d107      	bne.n	80187c6 <udp_recv+0x22>
 80187b6:	4b08      	ldr	r3, [pc, #32]	; (80187d8 <udp_recv+0x34>)
 80187b8:	f240 428a 	movw	r2, #1162	; 0x48a
 80187bc:	4907      	ldr	r1, [pc, #28]	; (80187dc <udp_recv+0x38>)
 80187be:	4808      	ldr	r0, [pc, #32]	; (80187e0 <udp_recv+0x3c>)
 80187c0:	f003 fa4c 	bl	801bc5c <printf>
 80187c4:	e005      	b.n	80187d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	68ba      	ldr	r2, [r7, #8]
 80187ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	687a      	ldr	r2, [r7, #4]
 80187d0:	61da      	str	r2, [r3, #28]
}
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}
 80187d8:	0802792c 	.word	0x0802792c
 80187dc:	08027c60 	.word	0x08027c60
 80187e0:	08027980 	.word	0x08027980

080187e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b084      	sub	sp, #16
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d107      	bne.n	8018802 <udp_remove+0x1e>
 80187f2:	4b19      	ldr	r3, [pc, #100]	; (8018858 <udp_remove+0x74>)
 80187f4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80187f8:	4918      	ldr	r1, [pc, #96]	; (801885c <udp_remove+0x78>)
 80187fa:	4819      	ldr	r0, [pc, #100]	; (8018860 <udp_remove+0x7c>)
 80187fc:	f003 fa2e 	bl	801bc5c <printf>
 8018800:	e026      	b.n	8018850 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018802:	4b18      	ldr	r3, [pc, #96]	; (8018864 <udp_remove+0x80>)
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	687a      	ldr	r2, [r7, #4]
 8018808:	429a      	cmp	r2, r3
 801880a:	d105      	bne.n	8018818 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801880c:	4b15      	ldr	r3, [pc, #84]	; (8018864 <udp_remove+0x80>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	4a14      	ldr	r2, [pc, #80]	; (8018864 <udp_remove+0x80>)
 8018814:	6013      	str	r3, [r2, #0]
 8018816:	e017      	b.n	8018848 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018818:	4b12      	ldr	r3, [pc, #72]	; (8018864 <udp_remove+0x80>)
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	60fb      	str	r3, [r7, #12]
 801881e:	e010      	b.n	8018842 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	68db      	ldr	r3, [r3, #12]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d009      	beq.n	801883c <udp_remove+0x58>
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	68db      	ldr	r3, [r3, #12]
 801882c:	687a      	ldr	r2, [r7, #4]
 801882e:	429a      	cmp	r2, r3
 8018830:	d104      	bne.n	801883c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	68da      	ldr	r2, [r3, #12]
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	60da      	str	r2, [r3, #12]
        break;
 801883a:	e005      	b.n	8018848 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	68db      	ldr	r3, [r3, #12]
 8018840:	60fb      	str	r3, [r7, #12]
 8018842:	68fb      	ldr	r3, [r7, #12]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d1eb      	bne.n	8018820 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018848:	6879      	ldr	r1, [r7, #4]
 801884a:	2000      	movs	r0, #0
 801884c:	f7f8 f822 	bl	8010894 <memp_free>
}
 8018850:	3710      	adds	r7, #16
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	0802792c 	.word	0x0802792c
 801885c:	08027c78 	.word	0x08027c78
 8018860:	08027980 	.word	0x08027980
 8018864:	2000be6c 	.word	0x2000be6c

08018868 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b082      	sub	sp, #8
 801886c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801886e:	2000      	movs	r0, #0
 8018870:	f7f7 ffbe 	bl	80107f0 <memp_malloc>
 8018874:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d007      	beq.n	801888c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801887c:	2220      	movs	r2, #32
 801887e:	2100      	movs	r1, #0
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f002 ff65 	bl	801b750 <memset>
    pcb->ttl = UDP_TTL;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	22ff      	movs	r2, #255	; 0xff
 801888a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801888c:	687b      	ldr	r3, [r7, #4]
}
 801888e:	4618      	mov	r0, r3
 8018890:	3708      	adds	r7, #8
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}

08018896 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018896:	b580      	push	{r7, lr}
 8018898:	b084      	sub	sp, #16
 801889a:	af00      	add	r7, sp, #0
 801889c:	4603      	mov	r3, r0
 801889e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80188a0:	f7ff ffe2 	bl	8018868 <udp_new>
 80188a4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80188a6:	68fb      	ldr	r3, [r7, #12]
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3710      	adds	r7, #16
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80188b0:	b480      	push	{r7}
 80188b2:	b085      	sub	sp, #20
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d01e      	beq.n	80188fe <udp_netif_ip_addr_changed+0x4e>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d01a      	beq.n	80188fe <udp_netif_ip_addr_changed+0x4e>
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d017      	beq.n	80188fe <udp_netif_ip_addr_changed+0x4e>
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d013      	beq.n	80188fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80188d6:	4b0d      	ldr	r3, [pc, #52]	; (801890c <udp_netif_ip_addr_changed+0x5c>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	60fb      	str	r3, [r7, #12]
 80188dc:	e00c      	b.n	80188f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	681a      	ldr	r2, [r3, #0]
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	429a      	cmp	r2, r3
 80188e8:	d103      	bne.n	80188f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	68db      	ldr	r3, [r3, #12]
 80188f6:	60fb      	str	r3, [r7, #12]
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d1ef      	bne.n	80188de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80188fe:	bf00      	nop
 8018900:	3714      	adds	r7, #20
 8018902:	46bd      	mov	sp, r7
 8018904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018908:	4770      	bx	lr
 801890a:	bf00      	nop
 801890c:	2000be6c 	.word	0x2000be6c

08018910 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018918:	4915      	ldr	r1, [pc, #84]	; (8018970 <etharp_free_entry+0x60>)
 801891a:	687a      	ldr	r2, [r7, #4]
 801891c:	4613      	mov	r3, r2
 801891e:	005b      	lsls	r3, r3, #1
 8018920:	4413      	add	r3, r2
 8018922:	00db      	lsls	r3, r3, #3
 8018924:	440b      	add	r3, r1
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d013      	beq.n	8018954 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801892c:	4910      	ldr	r1, [pc, #64]	; (8018970 <etharp_free_entry+0x60>)
 801892e:	687a      	ldr	r2, [r7, #4]
 8018930:	4613      	mov	r3, r2
 8018932:	005b      	lsls	r3, r3, #1
 8018934:	4413      	add	r3, r2
 8018936:	00db      	lsls	r3, r3, #3
 8018938:	440b      	add	r3, r1
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	4618      	mov	r0, r3
 801893e:	f7f8 fe27 	bl	8011590 <pbuf_free>
    arp_table[i].q = NULL;
 8018942:	490b      	ldr	r1, [pc, #44]	; (8018970 <etharp_free_entry+0x60>)
 8018944:	687a      	ldr	r2, [r7, #4]
 8018946:	4613      	mov	r3, r2
 8018948:	005b      	lsls	r3, r3, #1
 801894a:	4413      	add	r3, r2
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	440b      	add	r3, r1
 8018950:	2200      	movs	r2, #0
 8018952:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018954:	4906      	ldr	r1, [pc, #24]	; (8018970 <etharp_free_entry+0x60>)
 8018956:	687a      	ldr	r2, [r7, #4]
 8018958:	4613      	mov	r3, r2
 801895a:	005b      	lsls	r3, r3, #1
 801895c:	4413      	add	r3, r2
 801895e:	00db      	lsls	r3, r3, #3
 8018960:	440b      	add	r3, r1
 8018962:	3314      	adds	r3, #20
 8018964:	2200      	movs	r2, #0
 8018966:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018968:	bf00      	nop
 801896a:	3708      	adds	r7, #8
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}
 8018970:	20004f4c 	.word	0x20004f4c

08018974 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b082      	sub	sp, #8
 8018978:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801897a:	2300      	movs	r3, #0
 801897c:	607b      	str	r3, [r7, #4]
 801897e:	e096      	b.n	8018aae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018980:	494f      	ldr	r1, [pc, #316]	; (8018ac0 <etharp_tmr+0x14c>)
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	4613      	mov	r3, r2
 8018986:	005b      	lsls	r3, r3, #1
 8018988:	4413      	add	r3, r2
 801898a:	00db      	lsls	r3, r3, #3
 801898c:	440b      	add	r3, r1
 801898e:	3314      	adds	r3, #20
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018994:	78fb      	ldrb	r3, [r7, #3]
 8018996:	2b00      	cmp	r3, #0
 8018998:	f000 8086 	beq.w	8018aa8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801899c:	4948      	ldr	r1, [pc, #288]	; (8018ac0 <etharp_tmr+0x14c>)
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	4613      	mov	r3, r2
 80189a2:	005b      	lsls	r3, r3, #1
 80189a4:	4413      	add	r3, r2
 80189a6:	00db      	lsls	r3, r3, #3
 80189a8:	440b      	add	r3, r1
 80189aa:	3312      	adds	r3, #18
 80189ac:	881b      	ldrh	r3, [r3, #0]
 80189ae:	3301      	adds	r3, #1
 80189b0:	b298      	uxth	r0, r3
 80189b2:	4943      	ldr	r1, [pc, #268]	; (8018ac0 <etharp_tmr+0x14c>)
 80189b4:	687a      	ldr	r2, [r7, #4]
 80189b6:	4613      	mov	r3, r2
 80189b8:	005b      	lsls	r3, r3, #1
 80189ba:	4413      	add	r3, r2
 80189bc:	00db      	lsls	r3, r3, #3
 80189be:	440b      	add	r3, r1
 80189c0:	3312      	adds	r3, #18
 80189c2:	4602      	mov	r2, r0
 80189c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80189c6:	493e      	ldr	r1, [pc, #248]	; (8018ac0 <etharp_tmr+0x14c>)
 80189c8:	687a      	ldr	r2, [r7, #4]
 80189ca:	4613      	mov	r3, r2
 80189cc:	005b      	lsls	r3, r3, #1
 80189ce:	4413      	add	r3, r2
 80189d0:	00db      	lsls	r3, r3, #3
 80189d2:	440b      	add	r3, r1
 80189d4:	3312      	adds	r3, #18
 80189d6:	881b      	ldrh	r3, [r3, #0]
 80189d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80189dc:	d215      	bcs.n	8018a0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80189de:	4938      	ldr	r1, [pc, #224]	; (8018ac0 <etharp_tmr+0x14c>)
 80189e0:	687a      	ldr	r2, [r7, #4]
 80189e2:	4613      	mov	r3, r2
 80189e4:	005b      	lsls	r3, r3, #1
 80189e6:	4413      	add	r3, r2
 80189e8:	00db      	lsls	r3, r3, #3
 80189ea:	440b      	add	r3, r1
 80189ec:	3314      	adds	r3, #20
 80189ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80189f0:	2b01      	cmp	r3, #1
 80189f2:	d10e      	bne.n	8018a12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80189f4:	4932      	ldr	r1, [pc, #200]	; (8018ac0 <etharp_tmr+0x14c>)
 80189f6:	687a      	ldr	r2, [r7, #4]
 80189f8:	4613      	mov	r3, r2
 80189fa:	005b      	lsls	r3, r3, #1
 80189fc:	4413      	add	r3, r2
 80189fe:	00db      	lsls	r3, r3, #3
 8018a00:	440b      	add	r3, r1
 8018a02:	3312      	adds	r3, #18
 8018a04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018a06:	2b04      	cmp	r3, #4
 8018a08:	d903      	bls.n	8018a12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018a0a:	6878      	ldr	r0, [r7, #4]
 8018a0c:	f7ff ff80 	bl	8018910 <etharp_free_entry>
 8018a10:	e04a      	b.n	8018aa8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018a12:	492b      	ldr	r1, [pc, #172]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a14:	687a      	ldr	r2, [r7, #4]
 8018a16:	4613      	mov	r3, r2
 8018a18:	005b      	lsls	r3, r3, #1
 8018a1a:	4413      	add	r3, r2
 8018a1c:	00db      	lsls	r3, r3, #3
 8018a1e:	440b      	add	r3, r1
 8018a20:	3314      	adds	r3, #20
 8018a22:	781b      	ldrb	r3, [r3, #0]
 8018a24:	2b03      	cmp	r3, #3
 8018a26:	d10a      	bne.n	8018a3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018a28:	4925      	ldr	r1, [pc, #148]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a2a:	687a      	ldr	r2, [r7, #4]
 8018a2c:	4613      	mov	r3, r2
 8018a2e:	005b      	lsls	r3, r3, #1
 8018a30:	4413      	add	r3, r2
 8018a32:	00db      	lsls	r3, r3, #3
 8018a34:	440b      	add	r3, r1
 8018a36:	3314      	adds	r3, #20
 8018a38:	2204      	movs	r2, #4
 8018a3a:	701a      	strb	r2, [r3, #0]
 8018a3c:	e034      	b.n	8018aa8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018a3e:	4920      	ldr	r1, [pc, #128]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	4613      	mov	r3, r2
 8018a44:	005b      	lsls	r3, r3, #1
 8018a46:	4413      	add	r3, r2
 8018a48:	00db      	lsls	r3, r3, #3
 8018a4a:	440b      	add	r3, r1
 8018a4c:	3314      	adds	r3, #20
 8018a4e:	781b      	ldrb	r3, [r3, #0]
 8018a50:	2b04      	cmp	r3, #4
 8018a52:	d10a      	bne.n	8018a6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018a54:	491a      	ldr	r1, [pc, #104]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	4613      	mov	r3, r2
 8018a5a:	005b      	lsls	r3, r3, #1
 8018a5c:	4413      	add	r3, r2
 8018a5e:	00db      	lsls	r3, r3, #3
 8018a60:	440b      	add	r3, r1
 8018a62:	3314      	adds	r3, #20
 8018a64:	2202      	movs	r2, #2
 8018a66:	701a      	strb	r2, [r3, #0]
 8018a68:	e01e      	b.n	8018aa8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018a6a:	4915      	ldr	r1, [pc, #84]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	4613      	mov	r3, r2
 8018a70:	005b      	lsls	r3, r3, #1
 8018a72:	4413      	add	r3, r2
 8018a74:	00db      	lsls	r3, r3, #3
 8018a76:	440b      	add	r3, r1
 8018a78:	3314      	adds	r3, #20
 8018a7a:	781b      	ldrb	r3, [r3, #0]
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d113      	bne.n	8018aa8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018a80:	490f      	ldr	r1, [pc, #60]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	4613      	mov	r3, r2
 8018a86:	005b      	lsls	r3, r3, #1
 8018a88:	4413      	add	r3, r2
 8018a8a:	00db      	lsls	r3, r3, #3
 8018a8c:	440b      	add	r3, r1
 8018a8e:	3308      	adds	r3, #8
 8018a90:	6818      	ldr	r0, [r3, #0]
 8018a92:	687a      	ldr	r2, [r7, #4]
 8018a94:	4613      	mov	r3, r2
 8018a96:	005b      	lsls	r3, r3, #1
 8018a98:	4413      	add	r3, r2
 8018a9a:	00db      	lsls	r3, r3, #3
 8018a9c:	4a08      	ldr	r2, [pc, #32]	; (8018ac0 <etharp_tmr+0x14c>)
 8018a9e:	4413      	add	r3, r2
 8018aa0:	3304      	adds	r3, #4
 8018aa2:	4619      	mov	r1, r3
 8018aa4:	f000 fe6e 	bl	8019784 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	3301      	adds	r3, #1
 8018aac:	607b      	str	r3, [r7, #4]
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2b09      	cmp	r3, #9
 8018ab2:	f77f af65 	ble.w	8018980 <etharp_tmr+0xc>
      }
    }
  }
}
 8018ab6:	bf00      	nop
 8018ab8:	bf00      	nop
 8018aba:	3708      	adds	r7, #8
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}
 8018ac0:	20004f4c 	.word	0x20004f4c

08018ac4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b08a      	sub	sp, #40	; 0x28
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	60f8      	str	r0, [r7, #12]
 8018acc:	460b      	mov	r3, r1
 8018ace:	607a      	str	r2, [r7, #4]
 8018ad0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018ad2:	230a      	movs	r3, #10
 8018ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018ad6:	230a      	movs	r3, #10
 8018ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018ada:	230a      	movs	r3, #10
 8018adc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018ae2:	230a      	movs	r3, #10
 8018ae4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	83bb      	strh	r3, [r7, #28]
 8018aea:	2300      	movs	r3, #0
 8018aec:	837b      	strh	r3, [r7, #26]
 8018aee:	2300      	movs	r3, #0
 8018af0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018af2:	2300      	movs	r3, #0
 8018af4:	843b      	strh	r3, [r7, #32]
 8018af6:	e0ae      	b.n	8018c56 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018af8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018afc:	49a6      	ldr	r1, [pc, #664]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018afe:	4613      	mov	r3, r2
 8018b00:	005b      	lsls	r3, r3, #1
 8018b02:	4413      	add	r3, r2
 8018b04:	00db      	lsls	r3, r3, #3
 8018b06:	440b      	add	r3, r1
 8018b08:	3314      	adds	r3, #20
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018b0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b12:	2b0a      	cmp	r3, #10
 8018b14:	d105      	bne.n	8018b22 <etharp_find_entry+0x5e>
 8018b16:	7dfb      	ldrb	r3, [r7, #23]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d102      	bne.n	8018b22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018b1c:	8c3b      	ldrh	r3, [r7, #32]
 8018b1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8018b20:	e095      	b.n	8018c4e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018b22:	7dfb      	ldrb	r3, [r7, #23]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	f000 8092 	beq.w	8018c4e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018b2a:	7dfb      	ldrb	r3, [r7, #23]
 8018b2c:	2b01      	cmp	r3, #1
 8018b2e:	d009      	beq.n	8018b44 <etharp_find_entry+0x80>
 8018b30:	7dfb      	ldrb	r3, [r7, #23]
 8018b32:	2b01      	cmp	r3, #1
 8018b34:	d806      	bhi.n	8018b44 <etharp_find_entry+0x80>
 8018b36:	4b99      	ldr	r3, [pc, #612]	; (8018d9c <etharp_find_entry+0x2d8>)
 8018b38:	f240 1223 	movw	r2, #291	; 0x123
 8018b3c:	4998      	ldr	r1, [pc, #608]	; (8018da0 <etharp_find_entry+0x2dc>)
 8018b3e:	4899      	ldr	r0, [pc, #612]	; (8018da4 <etharp_find_entry+0x2e0>)
 8018b40:	f003 f88c 	bl	801bc5c <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d020      	beq.n	8018b8c <etharp_find_entry+0xc8>
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	6819      	ldr	r1, [r3, #0]
 8018b4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b52:	4891      	ldr	r0, [pc, #580]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018b54:	4613      	mov	r3, r2
 8018b56:	005b      	lsls	r3, r3, #1
 8018b58:	4413      	add	r3, r2
 8018b5a:	00db      	lsls	r3, r3, #3
 8018b5c:	4403      	add	r3, r0
 8018b5e:	3304      	adds	r3, #4
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	4299      	cmp	r1, r3
 8018b64:	d112      	bne.n	8018b8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d00c      	beq.n	8018b86 <etharp_find_entry+0xc2>
 8018b6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b70:	4989      	ldr	r1, [pc, #548]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018b72:	4613      	mov	r3, r2
 8018b74:	005b      	lsls	r3, r3, #1
 8018b76:	4413      	add	r3, r2
 8018b78:	00db      	lsls	r3, r3, #3
 8018b7a:	440b      	add	r3, r1
 8018b7c:	3308      	adds	r3, #8
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	687a      	ldr	r2, [r7, #4]
 8018b82:	429a      	cmp	r2, r3
 8018b84:	d102      	bne.n	8018b8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018b86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b8a:	e100      	b.n	8018d8e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018b8c:	7dfb      	ldrb	r3, [r7, #23]
 8018b8e:	2b01      	cmp	r3, #1
 8018b90:	d140      	bne.n	8018c14 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018b92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b96:	4980      	ldr	r1, [pc, #512]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018b98:	4613      	mov	r3, r2
 8018b9a:	005b      	lsls	r3, r3, #1
 8018b9c:	4413      	add	r3, r2
 8018b9e:	00db      	lsls	r3, r3, #3
 8018ba0:	440b      	add	r3, r1
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d01a      	beq.n	8018bde <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018ba8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bac:	497a      	ldr	r1, [pc, #488]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018bae:	4613      	mov	r3, r2
 8018bb0:	005b      	lsls	r3, r3, #1
 8018bb2:	4413      	add	r3, r2
 8018bb4:	00db      	lsls	r3, r3, #3
 8018bb6:	440b      	add	r3, r1
 8018bb8:	3312      	adds	r3, #18
 8018bba:	881b      	ldrh	r3, [r3, #0]
 8018bbc:	8bba      	ldrh	r2, [r7, #28]
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d845      	bhi.n	8018c4e <etharp_find_entry+0x18a>
            old_queue = i;
 8018bc2:	8c3b      	ldrh	r3, [r7, #32]
 8018bc4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018bc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bca:	4973      	ldr	r1, [pc, #460]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018bcc:	4613      	mov	r3, r2
 8018bce:	005b      	lsls	r3, r3, #1
 8018bd0:	4413      	add	r3, r2
 8018bd2:	00db      	lsls	r3, r3, #3
 8018bd4:	440b      	add	r3, r1
 8018bd6:	3312      	adds	r3, #18
 8018bd8:	881b      	ldrh	r3, [r3, #0]
 8018bda:	83bb      	strh	r3, [r7, #28]
 8018bdc:	e037      	b.n	8018c4e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018bde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018be2:	496d      	ldr	r1, [pc, #436]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018be4:	4613      	mov	r3, r2
 8018be6:	005b      	lsls	r3, r3, #1
 8018be8:	4413      	add	r3, r2
 8018bea:	00db      	lsls	r3, r3, #3
 8018bec:	440b      	add	r3, r1
 8018bee:	3312      	adds	r3, #18
 8018bf0:	881b      	ldrh	r3, [r3, #0]
 8018bf2:	8b7a      	ldrh	r2, [r7, #26]
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d82a      	bhi.n	8018c4e <etharp_find_entry+0x18a>
            old_pending = i;
 8018bf8:	8c3b      	ldrh	r3, [r7, #32]
 8018bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018bfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c00:	4965      	ldr	r1, [pc, #404]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018c02:	4613      	mov	r3, r2
 8018c04:	005b      	lsls	r3, r3, #1
 8018c06:	4413      	add	r3, r2
 8018c08:	00db      	lsls	r3, r3, #3
 8018c0a:	440b      	add	r3, r1
 8018c0c:	3312      	adds	r3, #18
 8018c0e:	881b      	ldrh	r3, [r3, #0]
 8018c10:	837b      	strh	r3, [r7, #26]
 8018c12:	e01c      	b.n	8018c4e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018c14:	7dfb      	ldrb	r3, [r7, #23]
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d919      	bls.n	8018c4e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018c1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c1e:	495e      	ldr	r1, [pc, #376]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018c20:	4613      	mov	r3, r2
 8018c22:	005b      	lsls	r3, r3, #1
 8018c24:	4413      	add	r3, r2
 8018c26:	00db      	lsls	r3, r3, #3
 8018c28:	440b      	add	r3, r1
 8018c2a:	3312      	adds	r3, #18
 8018c2c:	881b      	ldrh	r3, [r3, #0]
 8018c2e:	8b3a      	ldrh	r2, [r7, #24]
 8018c30:	429a      	cmp	r2, r3
 8018c32:	d80c      	bhi.n	8018c4e <etharp_find_entry+0x18a>
            old_stable = i;
 8018c34:	8c3b      	ldrh	r3, [r7, #32]
 8018c36:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018c38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c3c:	4956      	ldr	r1, [pc, #344]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018c3e:	4613      	mov	r3, r2
 8018c40:	005b      	lsls	r3, r3, #1
 8018c42:	4413      	add	r3, r2
 8018c44:	00db      	lsls	r3, r3, #3
 8018c46:	440b      	add	r3, r1
 8018c48:	3312      	adds	r3, #18
 8018c4a:	881b      	ldrh	r3, [r3, #0]
 8018c4c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c4e:	8c3b      	ldrh	r3, [r7, #32]
 8018c50:	3301      	adds	r3, #1
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	843b      	strh	r3, [r7, #32]
 8018c56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c5a:	2b09      	cmp	r3, #9
 8018c5c:	f77f af4c 	ble.w	8018af8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018c60:	7afb      	ldrb	r3, [r7, #11]
 8018c62:	f003 0302 	and.w	r3, r3, #2
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d108      	bne.n	8018c7c <etharp_find_entry+0x1b8>
 8018c6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018c6e:	2b0a      	cmp	r3, #10
 8018c70:	d107      	bne.n	8018c82 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018c72:	7afb      	ldrb	r3, [r7, #11]
 8018c74:	f003 0301 	and.w	r3, r3, #1
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d102      	bne.n	8018c82 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018c80:	e085      	b.n	8018d8e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018c82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018c86:	2b09      	cmp	r3, #9
 8018c88:	dc02      	bgt.n	8018c90 <etharp_find_entry+0x1cc>
    i = empty;
 8018c8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018c8c:	843b      	strh	r3, [r7, #32]
 8018c8e:	e039      	b.n	8018d04 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018c90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018c94:	2b09      	cmp	r3, #9
 8018c96:	dc14      	bgt.n	8018cc2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c9a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018c9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ca0:	493d      	ldr	r1, [pc, #244]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	005b      	lsls	r3, r3, #1
 8018ca6:	4413      	add	r3, r2
 8018ca8:	00db      	lsls	r3, r3, #3
 8018caa:	440b      	add	r3, r1
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d018      	beq.n	8018ce4 <etharp_find_entry+0x220>
 8018cb2:	4b3a      	ldr	r3, [pc, #232]	; (8018d9c <etharp_find_entry+0x2d8>)
 8018cb4:	f240 126d 	movw	r2, #365	; 0x16d
 8018cb8:	493b      	ldr	r1, [pc, #236]	; (8018da8 <etharp_find_entry+0x2e4>)
 8018cba:	483a      	ldr	r0, [pc, #232]	; (8018da4 <etharp_find_entry+0x2e0>)
 8018cbc:	f002 ffce 	bl	801bc5c <printf>
 8018cc0:	e010      	b.n	8018ce4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018cc2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018cc6:	2b09      	cmp	r3, #9
 8018cc8:	dc02      	bgt.n	8018cd0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018cca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018ccc:	843b      	strh	r3, [r7, #32]
 8018cce:	e009      	b.n	8018ce4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018cd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018cd4:	2b09      	cmp	r3, #9
 8018cd6:	dc02      	bgt.n	8018cde <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018cd8:	8bfb      	ldrh	r3, [r7, #30]
 8018cda:	843b      	strh	r3, [r7, #32]
 8018cdc:	e002      	b.n	8018ce4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018cde:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce2:	e054      	b.n	8018d8e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018ce4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ce8:	2b09      	cmp	r3, #9
 8018cea:	dd06      	ble.n	8018cfa <etharp_find_entry+0x236>
 8018cec:	4b2b      	ldr	r3, [pc, #172]	; (8018d9c <etharp_find_entry+0x2d8>)
 8018cee:	f240 127f 	movw	r2, #383	; 0x17f
 8018cf2:	492e      	ldr	r1, [pc, #184]	; (8018dac <etharp_find_entry+0x2e8>)
 8018cf4:	482b      	ldr	r0, [pc, #172]	; (8018da4 <etharp_find_entry+0x2e0>)
 8018cf6:	f002 ffb1 	bl	801bc5c <printf>
    etharp_free_entry(i);
 8018cfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f7ff fe06 	bl	8018910 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018d04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018d08:	2b09      	cmp	r3, #9
 8018d0a:	dd06      	ble.n	8018d1a <etharp_find_entry+0x256>
 8018d0c:	4b23      	ldr	r3, [pc, #140]	; (8018d9c <etharp_find_entry+0x2d8>)
 8018d0e:	f240 1283 	movw	r2, #387	; 0x183
 8018d12:	4926      	ldr	r1, [pc, #152]	; (8018dac <etharp_find_entry+0x2e8>)
 8018d14:	4823      	ldr	r0, [pc, #140]	; (8018da4 <etharp_find_entry+0x2e0>)
 8018d16:	f002 ffa1 	bl	801bc5c <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018d1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d1e:	491e      	ldr	r1, [pc, #120]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018d20:	4613      	mov	r3, r2
 8018d22:	005b      	lsls	r3, r3, #1
 8018d24:	4413      	add	r3, r2
 8018d26:	00db      	lsls	r3, r3, #3
 8018d28:	440b      	add	r3, r1
 8018d2a:	3314      	adds	r3, #20
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d006      	beq.n	8018d40 <etharp_find_entry+0x27c>
 8018d32:	4b1a      	ldr	r3, [pc, #104]	; (8018d9c <etharp_find_entry+0x2d8>)
 8018d34:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018d38:	491d      	ldr	r1, [pc, #116]	; (8018db0 <etharp_find_entry+0x2ec>)
 8018d3a:	481a      	ldr	r0, [pc, #104]	; (8018da4 <etharp_find_entry+0x2e0>)
 8018d3c:	f002 ff8e 	bl	801bc5c <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d00b      	beq.n	8018d5e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018d46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	6819      	ldr	r1, [r3, #0]
 8018d4e:	4812      	ldr	r0, [pc, #72]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018d50:	4613      	mov	r3, r2
 8018d52:	005b      	lsls	r3, r3, #1
 8018d54:	4413      	add	r3, r2
 8018d56:	00db      	lsls	r3, r3, #3
 8018d58:	4403      	add	r3, r0
 8018d5a:	3304      	adds	r3, #4
 8018d5c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018d5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d62:	490d      	ldr	r1, [pc, #52]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018d64:	4613      	mov	r3, r2
 8018d66:	005b      	lsls	r3, r3, #1
 8018d68:	4413      	add	r3, r2
 8018d6a:	00db      	lsls	r3, r3, #3
 8018d6c:	440b      	add	r3, r1
 8018d6e:	3312      	adds	r3, #18
 8018d70:	2200      	movs	r2, #0
 8018d72:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018d74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d78:	4907      	ldr	r1, [pc, #28]	; (8018d98 <etharp_find_entry+0x2d4>)
 8018d7a:	4613      	mov	r3, r2
 8018d7c:	005b      	lsls	r3, r3, #1
 8018d7e:	4413      	add	r3, r2
 8018d80:	00db      	lsls	r3, r3, #3
 8018d82:	440b      	add	r3, r1
 8018d84:	3308      	adds	r3, #8
 8018d86:	687a      	ldr	r2, [r7, #4]
 8018d88:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018d8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018d8e:	4618      	mov	r0, r3
 8018d90:	3728      	adds	r7, #40	; 0x28
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	20004f4c 	.word	0x20004f4c
 8018d9c:	08027c90 	.word	0x08027c90
 8018da0:	08027cc8 	.word	0x08027cc8
 8018da4:	08027d08 	.word	0x08027d08
 8018da8:	08027d30 	.word	0x08027d30
 8018dac:	08027d48 	.word	0x08027d48
 8018db0:	08027d5c 	.word	0x08027d5c

08018db4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b088      	sub	sp, #32
 8018db8:	af02      	add	r7, sp, #8
 8018dba:	60f8      	str	r0, [r7, #12]
 8018dbc:	60b9      	str	r1, [r7, #8]
 8018dbe:	607a      	str	r2, [r7, #4]
 8018dc0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018dc8:	2b06      	cmp	r3, #6
 8018dca:	d006      	beq.n	8018dda <etharp_update_arp_entry+0x26>
 8018dcc:	4b48      	ldr	r3, [pc, #288]	; (8018ef0 <etharp_update_arp_entry+0x13c>)
 8018dce:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018dd2:	4948      	ldr	r1, [pc, #288]	; (8018ef4 <etharp_update_arp_entry+0x140>)
 8018dd4:	4848      	ldr	r0, [pc, #288]	; (8018ef8 <etharp_update_arp_entry+0x144>)
 8018dd6:	f002 ff41 	bl	801bc5c <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d012      	beq.n	8018e06 <etharp_update_arp_entry+0x52>
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d00e      	beq.n	8018e06 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	68f9      	ldr	r1, [r7, #12]
 8018dee:	4618      	mov	r0, r3
 8018df0:	f001 f8fe 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 8018df4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d105      	bne.n	8018e06 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e02:	2be0      	cmp	r3, #224	; 0xe0
 8018e04:	d102      	bne.n	8018e0c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018e06:	f06f 030f 	mvn.w	r3, #15
 8018e0a:	e06c      	b.n	8018ee6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018e0c:	78fb      	ldrb	r3, [r7, #3]
 8018e0e:	68fa      	ldr	r2, [r7, #12]
 8018e10:	4619      	mov	r1, r3
 8018e12:	68b8      	ldr	r0, [r7, #8]
 8018e14:	f7ff fe56 	bl	8018ac4 <etharp_find_entry>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018e1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	da02      	bge.n	8018e2a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018e24:	8afb      	ldrh	r3, [r7, #22]
 8018e26:	b25b      	sxtb	r3, r3
 8018e28:	e05d      	b.n	8018ee6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018e2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e2e:	4933      	ldr	r1, [pc, #204]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018e30:	4613      	mov	r3, r2
 8018e32:	005b      	lsls	r3, r3, #1
 8018e34:	4413      	add	r3, r2
 8018e36:	00db      	lsls	r3, r3, #3
 8018e38:	440b      	add	r3, r1
 8018e3a:	3314      	adds	r3, #20
 8018e3c:	2202      	movs	r2, #2
 8018e3e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018e40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e44:	492d      	ldr	r1, [pc, #180]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018e46:	4613      	mov	r3, r2
 8018e48:	005b      	lsls	r3, r3, #1
 8018e4a:	4413      	add	r3, r2
 8018e4c:	00db      	lsls	r3, r3, #3
 8018e4e:	440b      	add	r3, r1
 8018e50:	3308      	adds	r3, #8
 8018e52:	68fa      	ldr	r2, [r7, #12]
 8018e54:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018e56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	005b      	lsls	r3, r3, #1
 8018e5e:	4413      	add	r3, r2
 8018e60:	00db      	lsls	r3, r3, #3
 8018e62:	3308      	adds	r3, #8
 8018e64:	4a25      	ldr	r2, [pc, #148]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018e66:	4413      	add	r3, r2
 8018e68:	3304      	adds	r3, #4
 8018e6a:	2206      	movs	r2, #6
 8018e6c:	6879      	ldr	r1, [r7, #4]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f002 fc46 	bl	801b700 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018e74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e78:	4920      	ldr	r1, [pc, #128]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018e7a:	4613      	mov	r3, r2
 8018e7c:	005b      	lsls	r3, r3, #1
 8018e7e:	4413      	add	r3, r2
 8018e80:	00db      	lsls	r3, r3, #3
 8018e82:	440b      	add	r3, r1
 8018e84:	3312      	adds	r3, #18
 8018e86:	2200      	movs	r2, #0
 8018e88:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018e8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e8e:	491b      	ldr	r1, [pc, #108]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018e90:	4613      	mov	r3, r2
 8018e92:	005b      	lsls	r3, r3, #1
 8018e94:	4413      	add	r3, r2
 8018e96:	00db      	lsls	r3, r3, #3
 8018e98:	440b      	add	r3, r1
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d021      	beq.n	8018ee4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018ea0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ea4:	4915      	ldr	r1, [pc, #84]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018ea6:	4613      	mov	r3, r2
 8018ea8:	005b      	lsls	r3, r3, #1
 8018eaa:	4413      	add	r3, r2
 8018eac:	00db      	lsls	r3, r3, #3
 8018eae:	440b      	add	r3, r1
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018eb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018eb8:	4910      	ldr	r1, [pc, #64]	; (8018efc <etharp_update_arp_entry+0x148>)
 8018eba:	4613      	mov	r3, r2
 8018ebc:	005b      	lsls	r3, r3, #1
 8018ebe:	4413      	add	r3, r2
 8018ec0:	00db      	lsls	r3, r3, #3
 8018ec2:	440b      	add	r3, r1
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8018ece:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018ed2:	9300      	str	r3, [sp, #0]
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6939      	ldr	r1, [r7, #16]
 8018ed8:	68f8      	ldr	r0, [r7, #12]
 8018eda:	f002 f8bb 	bl	801b054 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018ede:	6938      	ldr	r0, [r7, #16]
 8018ee0:	f7f8 fb56 	bl	8011590 <pbuf_free>
  }
  return ERR_OK;
 8018ee4:	2300      	movs	r3, #0
}
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3718      	adds	r7, #24
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}
 8018eee:	bf00      	nop
 8018ef0:	08027c90 	.word	0x08027c90
 8018ef4:	08027d88 	.word	0x08027d88
 8018ef8:	08027d08 	.word	0x08027d08
 8018efc:	20004f4c 	.word	0x20004f4c

08018f00 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b084      	sub	sp, #16
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018f08:	2300      	movs	r3, #0
 8018f0a:	60fb      	str	r3, [r7, #12]
 8018f0c:	e01e      	b.n	8018f4c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018f0e:	4913      	ldr	r1, [pc, #76]	; (8018f5c <etharp_cleanup_netif+0x5c>)
 8018f10:	68fa      	ldr	r2, [r7, #12]
 8018f12:	4613      	mov	r3, r2
 8018f14:	005b      	lsls	r3, r3, #1
 8018f16:	4413      	add	r3, r2
 8018f18:	00db      	lsls	r3, r3, #3
 8018f1a:	440b      	add	r3, r1
 8018f1c:	3314      	adds	r3, #20
 8018f1e:	781b      	ldrb	r3, [r3, #0]
 8018f20:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018f22:	7afb      	ldrb	r3, [r7, #11]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d00e      	beq.n	8018f46 <etharp_cleanup_netif+0x46>
 8018f28:	490c      	ldr	r1, [pc, #48]	; (8018f5c <etharp_cleanup_netif+0x5c>)
 8018f2a:	68fa      	ldr	r2, [r7, #12]
 8018f2c:	4613      	mov	r3, r2
 8018f2e:	005b      	lsls	r3, r3, #1
 8018f30:	4413      	add	r3, r2
 8018f32:	00db      	lsls	r3, r3, #3
 8018f34:	440b      	add	r3, r1
 8018f36:	3308      	adds	r3, #8
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	687a      	ldr	r2, [r7, #4]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d102      	bne.n	8018f46 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018f40:	68f8      	ldr	r0, [r7, #12]
 8018f42:	f7ff fce5 	bl	8018910 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	3301      	adds	r3, #1
 8018f4a:	60fb      	str	r3, [r7, #12]
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	2b09      	cmp	r3, #9
 8018f50:	dddd      	ble.n	8018f0e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018f52:	bf00      	nop
 8018f54:	bf00      	nop
 8018f56:	3710      	adds	r7, #16
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}
 8018f5c:	20004f4c 	.word	0x20004f4c

08018f60 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018f60:	b5b0      	push	{r4, r5, r7, lr}
 8018f62:	b08a      	sub	sp, #40	; 0x28
 8018f64:	af04      	add	r7, sp, #16
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d107      	bne.n	8018f80 <etharp_input+0x20>
 8018f70:	4b3d      	ldr	r3, [pc, #244]	; (8019068 <etharp_input+0x108>)
 8018f72:	f240 228a 	movw	r2, #650	; 0x28a
 8018f76:	493d      	ldr	r1, [pc, #244]	; (801906c <etharp_input+0x10c>)
 8018f78:	483d      	ldr	r0, [pc, #244]	; (8019070 <etharp_input+0x110>)
 8018f7a:	f002 fe6f 	bl	801bc5c <printf>
 8018f7e:	e06f      	b.n	8019060 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	685b      	ldr	r3, [r3, #4]
 8018f84:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018f86:	693b      	ldr	r3, [r7, #16]
 8018f88:	881b      	ldrh	r3, [r3, #0]
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018f90:	d10c      	bne.n	8018fac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018f96:	2b06      	cmp	r3, #6
 8018f98:	d108      	bne.n	8018fac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018f9e:	2b04      	cmp	r3, #4
 8018fa0:	d104      	bne.n	8018fac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018fa2:	693b      	ldr	r3, [r7, #16]
 8018fa4:	885b      	ldrh	r3, [r3, #2]
 8018fa6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018fa8:	2b08      	cmp	r3, #8
 8018faa:	d003      	beq.n	8018fb4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018fac:	6878      	ldr	r0, [r7, #4]
 8018fae:	f7f8 faef 	bl	8011590 <pbuf_free>
    return;
 8018fb2:	e055      	b.n	8019060 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	330e      	adds	r3, #14
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	3318      	adds	r3, #24
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	3304      	adds	r3, #4
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d102      	bne.n	8018fd4 <etharp_input+0x74>
    for_us = 0;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	75fb      	strb	r3, [r7, #23]
 8018fd2:	e009      	b.n	8018fe8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018fd4:	68ba      	ldr	r2, [r7, #8]
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	3304      	adds	r3, #4
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	429a      	cmp	r2, r3
 8018fde:	bf0c      	ite	eq
 8018fe0:	2301      	moveq	r3, #1
 8018fe2:	2300      	movne	r3, #0
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018fe8:	693b      	ldr	r3, [r7, #16]
 8018fea:	f103 0208 	add.w	r2, r3, #8
 8018fee:	7dfb      	ldrb	r3, [r7, #23]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d001      	beq.n	8018ff8 <etharp_input+0x98>
 8018ff4:	2301      	movs	r3, #1
 8018ff6:	e000      	b.n	8018ffa <etharp_input+0x9a>
 8018ff8:	2302      	movs	r3, #2
 8018ffa:	f107 010c 	add.w	r1, r7, #12
 8018ffe:	6838      	ldr	r0, [r7, #0]
 8019000:	f7ff fed8 	bl	8018db4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019004:	693b      	ldr	r3, [r7, #16]
 8019006:	88db      	ldrh	r3, [r3, #6]
 8019008:	b29b      	uxth	r3, r3
 801900a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801900e:	d003      	beq.n	8019018 <etharp_input+0xb8>
 8019010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019014:	d01e      	beq.n	8019054 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019016:	e020      	b.n	801905a <etharp_input+0xfa>
      if (for_us) {
 8019018:	7dfb      	ldrb	r3, [r7, #23]
 801901a:	2b00      	cmp	r3, #0
 801901c:	d01c      	beq.n	8019058 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8019024:	693b      	ldr	r3, [r7, #16]
 8019026:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019034:	693a      	ldr	r2, [r7, #16]
 8019036:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019038:	2102      	movs	r1, #2
 801903a:	9103      	str	r1, [sp, #12]
 801903c:	f107 010c 	add.w	r1, r7, #12
 8019040:	9102      	str	r1, [sp, #8]
 8019042:	9201      	str	r2, [sp, #4]
 8019044:	9300      	str	r3, [sp, #0]
 8019046:	462b      	mov	r3, r5
 8019048:	4622      	mov	r2, r4
 801904a:	4601      	mov	r1, r0
 801904c:	6838      	ldr	r0, [r7, #0]
 801904e:	f000 faeb 	bl	8019628 <etharp_raw>
      break;
 8019052:	e001      	b.n	8019058 <etharp_input+0xf8>
      break;
 8019054:	bf00      	nop
 8019056:	e000      	b.n	801905a <etharp_input+0xfa>
      break;
 8019058:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	f7f8 fa98 	bl	8011590 <pbuf_free>
}
 8019060:	3718      	adds	r7, #24
 8019062:	46bd      	mov	sp, r7
 8019064:	bdb0      	pop	{r4, r5, r7, pc}
 8019066:	bf00      	nop
 8019068:	08027c90 	.word	0x08027c90
 801906c:	08027de0 	.word	0x08027de0
 8019070:	08027d08 	.word	0x08027d08

08019074 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b086      	sub	sp, #24
 8019078:	af02      	add	r7, sp, #8
 801907a:	60f8      	str	r0, [r7, #12]
 801907c:	60b9      	str	r1, [r7, #8]
 801907e:	4613      	mov	r3, r2
 8019080:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019082:	79fa      	ldrb	r2, [r7, #7]
 8019084:	4944      	ldr	r1, [pc, #272]	; (8019198 <etharp_output_to_arp_index+0x124>)
 8019086:	4613      	mov	r3, r2
 8019088:	005b      	lsls	r3, r3, #1
 801908a:	4413      	add	r3, r2
 801908c:	00db      	lsls	r3, r3, #3
 801908e:	440b      	add	r3, r1
 8019090:	3314      	adds	r3, #20
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	2b01      	cmp	r3, #1
 8019096:	d806      	bhi.n	80190a6 <etharp_output_to_arp_index+0x32>
 8019098:	4b40      	ldr	r3, [pc, #256]	; (801919c <etharp_output_to_arp_index+0x128>)
 801909a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801909e:	4940      	ldr	r1, [pc, #256]	; (80191a0 <etharp_output_to_arp_index+0x12c>)
 80190a0:	4840      	ldr	r0, [pc, #256]	; (80191a4 <etharp_output_to_arp_index+0x130>)
 80190a2:	f002 fddb 	bl	801bc5c <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80190a6:	79fa      	ldrb	r2, [r7, #7]
 80190a8:	493b      	ldr	r1, [pc, #236]	; (8019198 <etharp_output_to_arp_index+0x124>)
 80190aa:	4613      	mov	r3, r2
 80190ac:	005b      	lsls	r3, r3, #1
 80190ae:	4413      	add	r3, r2
 80190b0:	00db      	lsls	r3, r3, #3
 80190b2:	440b      	add	r3, r1
 80190b4:	3314      	adds	r3, #20
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	2b02      	cmp	r3, #2
 80190ba:	d153      	bne.n	8019164 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80190bc:	79fa      	ldrb	r2, [r7, #7]
 80190be:	4936      	ldr	r1, [pc, #216]	; (8019198 <etharp_output_to_arp_index+0x124>)
 80190c0:	4613      	mov	r3, r2
 80190c2:	005b      	lsls	r3, r3, #1
 80190c4:	4413      	add	r3, r2
 80190c6:	00db      	lsls	r3, r3, #3
 80190c8:	440b      	add	r3, r1
 80190ca:	3312      	adds	r3, #18
 80190cc:	881b      	ldrh	r3, [r3, #0]
 80190ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80190d2:	d919      	bls.n	8019108 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80190d4:	79fa      	ldrb	r2, [r7, #7]
 80190d6:	4613      	mov	r3, r2
 80190d8:	005b      	lsls	r3, r3, #1
 80190da:	4413      	add	r3, r2
 80190dc:	00db      	lsls	r3, r3, #3
 80190de:	4a2e      	ldr	r2, [pc, #184]	; (8019198 <etharp_output_to_arp_index+0x124>)
 80190e0:	4413      	add	r3, r2
 80190e2:	3304      	adds	r3, #4
 80190e4:	4619      	mov	r1, r3
 80190e6:	68f8      	ldr	r0, [r7, #12]
 80190e8:	f000 fb4c 	bl	8019784 <etharp_request>
 80190ec:	4603      	mov	r3, r0
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d138      	bne.n	8019164 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80190f2:	79fa      	ldrb	r2, [r7, #7]
 80190f4:	4928      	ldr	r1, [pc, #160]	; (8019198 <etharp_output_to_arp_index+0x124>)
 80190f6:	4613      	mov	r3, r2
 80190f8:	005b      	lsls	r3, r3, #1
 80190fa:	4413      	add	r3, r2
 80190fc:	00db      	lsls	r3, r3, #3
 80190fe:	440b      	add	r3, r1
 8019100:	3314      	adds	r3, #20
 8019102:	2203      	movs	r2, #3
 8019104:	701a      	strb	r2, [r3, #0]
 8019106:	e02d      	b.n	8019164 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019108:	79fa      	ldrb	r2, [r7, #7]
 801910a:	4923      	ldr	r1, [pc, #140]	; (8019198 <etharp_output_to_arp_index+0x124>)
 801910c:	4613      	mov	r3, r2
 801910e:	005b      	lsls	r3, r3, #1
 8019110:	4413      	add	r3, r2
 8019112:	00db      	lsls	r3, r3, #3
 8019114:	440b      	add	r3, r1
 8019116:	3312      	adds	r3, #18
 8019118:	881b      	ldrh	r3, [r3, #0]
 801911a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801911e:	d321      	bcc.n	8019164 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019120:	79fa      	ldrb	r2, [r7, #7]
 8019122:	4613      	mov	r3, r2
 8019124:	005b      	lsls	r3, r3, #1
 8019126:	4413      	add	r3, r2
 8019128:	00db      	lsls	r3, r3, #3
 801912a:	4a1b      	ldr	r2, [pc, #108]	; (8019198 <etharp_output_to_arp_index+0x124>)
 801912c:	4413      	add	r3, r2
 801912e:	1d19      	adds	r1, r3, #4
 8019130:	79fa      	ldrb	r2, [r7, #7]
 8019132:	4613      	mov	r3, r2
 8019134:	005b      	lsls	r3, r3, #1
 8019136:	4413      	add	r3, r2
 8019138:	00db      	lsls	r3, r3, #3
 801913a:	3308      	adds	r3, #8
 801913c:	4a16      	ldr	r2, [pc, #88]	; (8019198 <etharp_output_to_arp_index+0x124>)
 801913e:	4413      	add	r3, r2
 8019140:	3304      	adds	r3, #4
 8019142:	461a      	mov	r2, r3
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f000 fafb 	bl	8019740 <etharp_request_dst>
 801914a:	4603      	mov	r3, r0
 801914c:	2b00      	cmp	r3, #0
 801914e:	d109      	bne.n	8019164 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019150:	79fa      	ldrb	r2, [r7, #7]
 8019152:	4911      	ldr	r1, [pc, #68]	; (8019198 <etharp_output_to_arp_index+0x124>)
 8019154:	4613      	mov	r3, r2
 8019156:	005b      	lsls	r3, r3, #1
 8019158:	4413      	add	r3, r2
 801915a:	00db      	lsls	r3, r3, #3
 801915c:	440b      	add	r3, r1
 801915e:	3314      	adds	r3, #20
 8019160:	2203      	movs	r2, #3
 8019162:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	f103 0122 	add.w	r1, r3, #34	; 0x22
 801916a:	79fa      	ldrb	r2, [r7, #7]
 801916c:	4613      	mov	r3, r2
 801916e:	005b      	lsls	r3, r3, #1
 8019170:	4413      	add	r3, r2
 8019172:	00db      	lsls	r3, r3, #3
 8019174:	3308      	adds	r3, #8
 8019176:	4a08      	ldr	r2, [pc, #32]	; (8019198 <etharp_output_to_arp_index+0x124>)
 8019178:	4413      	add	r3, r2
 801917a:	3304      	adds	r3, #4
 801917c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019180:	9200      	str	r2, [sp, #0]
 8019182:	460a      	mov	r2, r1
 8019184:	68b9      	ldr	r1, [r7, #8]
 8019186:	68f8      	ldr	r0, [r7, #12]
 8019188:	f001 ff64 	bl	801b054 <ethernet_output>
 801918c:	4603      	mov	r3, r0
}
 801918e:	4618      	mov	r0, r3
 8019190:	3710      	adds	r7, #16
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}
 8019196:	bf00      	nop
 8019198:	20004f4c 	.word	0x20004f4c
 801919c:	08027c90 	.word	0x08027c90
 80191a0:	08027e00 	.word	0x08027e00
 80191a4:	08027d08 	.word	0x08027d08

080191a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b08a      	sub	sp, #40	; 0x28
 80191ac:	af02      	add	r7, sp, #8
 80191ae:	60f8      	str	r0, [r7, #12]
 80191b0:	60b9      	str	r1, [r7, #8]
 80191b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d106      	bne.n	80191cc <etharp_output+0x24>
 80191be:	4b73      	ldr	r3, [pc, #460]	; (801938c <etharp_output+0x1e4>)
 80191c0:	f240 321e 	movw	r2, #798	; 0x31e
 80191c4:	4972      	ldr	r1, [pc, #456]	; (8019390 <etharp_output+0x1e8>)
 80191c6:	4873      	ldr	r0, [pc, #460]	; (8019394 <etharp_output+0x1ec>)
 80191c8:	f002 fd48 	bl	801bc5c <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80191cc:	68bb      	ldr	r3, [r7, #8]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d106      	bne.n	80191e0 <etharp_output+0x38>
 80191d2:	4b6e      	ldr	r3, [pc, #440]	; (801938c <etharp_output+0x1e4>)
 80191d4:	f240 321f 	movw	r2, #799	; 0x31f
 80191d8:	496f      	ldr	r1, [pc, #444]	; (8019398 <etharp_output+0x1f0>)
 80191da:	486e      	ldr	r0, [pc, #440]	; (8019394 <etharp_output+0x1ec>)
 80191dc:	f002 fd3e 	bl	801bc5c <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d106      	bne.n	80191f4 <etharp_output+0x4c>
 80191e6:	4b69      	ldr	r3, [pc, #420]	; (801938c <etharp_output+0x1e4>)
 80191e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80191ec:	496b      	ldr	r1, [pc, #428]	; (801939c <etharp_output+0x1f4>)
 80191ee:	4869      	ldr	r0, [pc, #420]	; (8019394 <etharp_output+0x1ec>)
 80191f0:	f002 fd34 	bl	801bc5c <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	68f9      	ldr	r1, [r7, #12]
 80191fa:	4618      	mov	r0, r3
 80191fc:	f000 fef8 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 8019200:	4603      	mov	r3, r0
 8019202:	2b00      	cmp	r3, #0
 8019204:	d002      	beq.n	801920c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019206:	4b66      	ldr	r3, [pc, #408]	; (80193a0 <etharp_output+0x1f8>)
 8019208:	61fb      	str	r3, [r7, #28]
 801920a:	e0af      	b.n	801936c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019214:	2be0      	cmp	r3, #224	; 0xe0
 8019216:	d118      	bne.n	801924a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019218:	2301      	movs	r3, #1
 801921a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801921c:	2300      	movs	r3, #0
 801921e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019220:	235e      	movs	r3, #94	; 0x5e
 8019222:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	3301      	adds	r3, #1
 8019228:	781b      	ldrb	r3, [r3, #0]
 801922a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801922e:	b2db      	uxtb	r3, r3
 8019230:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	3302      	adds	r3, #2
 8019236:	781b      	ldrb	r3, [r3, #0]
 8019238:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	3303      	adds	r3, #3
 801923e:	781b      	ldrb	r3, [r3, #0]
 8019240:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019242:	f107 0310 	add.w	r3, r7, #16
 8019246:	61fb      	str	r3, [r7, #28]
 8019248:	e090      	b.n	801936c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681a      	ldr	r2, [r3, #0]
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	3304      	adds	r3, #4
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	405a      	eors	r2, r3
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	3308      	adds	r3, #8
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	4013      	ands	r3, r2
 801925e:	2b00      	cmp	r3, #0
 8019260:	d012      	beq.n	8019288 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019268:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801926c:	4293      	cmp	r3, r2
 801926e:	d00b      	beq.n	8019288 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	330c      	adds	r3, #12
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d003      	beq.n	8019282 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	330c      	adds	r3, #12
 801927e:	61bb      	str	r3, [r7, #24]
 8019280:	e002      	b.n	8019288 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019282:	f06f 0303 	mvn.w	r3, #3
 8019286:	e07d      	b.n	8019384 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019288:	4b46      	ldr	r3, [pc, #280]	; (80193a4 <etharp_output+0x1fc>)
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	4619      	mov	r1, r3
 801928e:	4a46      	ldr	r2, [pc, #280]	; (80193a8 <etharp_output+0x200>)
 8019290:	460b      	mov	r3, r1
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	440b      	add	r3, r1
 8019296:	00db      	lsls	r3, r3, #3
 8019298:	4413      	add	r3, r2
 801929a:	3314      	adds	r3, #20
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	2b01      	cmp	r3, #1
 80192a0:	d925      	bls.n	80192ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80192a2:	4b40      	ldr	r3, [pc, #256]	; (80193a4 <etharp_output+0x1fc>)
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	4619      	mov	r1, r3
 80192a8:	4a3f      	ldr	r2, [pc, #252]	; (80193a8 <etharp_output+0x200>)
 80192aa:	460b      	mov	r3, r1
 80192ac:	005b      	lsls	r3, r3, #1
 80192ae:	440b      	add	r3, r1
 80192b0:	00db      	lsls	r3, r3, #3
 80192b2:	4413      	add	r3, r2
 80192b4:	3308      	adds	r3, #8
 80192b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80192b8:	68fa      	ldr	r2, [r7, #12]
 80192ba:	429a      	cmp	r2, r3
 80192bc:	d117      	bne.n	80192ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80192be:	69bb      	ldr	r3, [r7, #24]
 80192c0:	681a      	ldr	r2, [r3, #0]
 80192c2:	4b38      	ldr	r3, [pc, #224]	; (80193a4 <etharp_output+0x1fc>)
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	4618      	mov	r0, r3
 80192c8:	4937      	ldr	r1, [pc, #220]	; (80193a8 <etharp_output+0x200>)
 80192ca:	4603      	mov	r3, r0
 80192cc:	005b      	lsls	r3, r3, #1
 80192ce:	4403      	add	r3, r0
 80192d0:	00db      	lsls	r3, r3, #3
 80192d2:	440b      	add	r3, r1
 80192d4:	3304      	adds	r3, #4
 80192d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80192d8:	429a      	cmp	r2, r3
 80192da:	d108      	bne.n	80192ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80192dc:	4b31      	ldr	r3, [pc, #196]	; (80193a4 <etharp_output+0x1fc>)
 80192de:	781b      	ldrb	r3, [r3, #0]
 80192e0:	461a      	mov	r2, r3
 80192e2:	68b9      	ldr	r1, [r7, #8]
 80192e4:	68f8      	ldr	r0, [r7, #12]
 80192e6:	f7ff fec5 	bl	8019074 <etharp_output_to_arp_index>
 80192ea:	4603      	mov	r3, r0
 80192ec:	e04a      	b.n	8019384 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80192ee:	2300      	movs	r3, #0
 80192f0:	75fb      	strb	r3, [r7, #23]
 80192f2:	e031      	b.n	8019358 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80192f4:	7dfa      	ldrb	r2, [r7, #23]
 80192f6:	492c      	ldr	r1, [pc, #176]	; (80193a8 <etharp_output+0x200>)
 80192f8:	4613      	mov	r3, r2
 80192fa:	005b      	lsls	r3, r3, #1
 80192fc:	4413      	add	r3, r2
 80192fe:	00db      	lsls	r3, r3, #3
 8019300:	440b      	add	r3, r1
 8019302:	3314      	adds	r3, #20
 8019304:	781b      	ldrb	r3, [r3, #0]
 8019306:	2b01      	cmp	r3, #1
 8019308:	d923      	bls.n	8019352 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801930a:	7dfa      	ldrb	r2, [r7, #23]
 801930c:	4926      	ldr	r1, [pc, #152]	; (80193a8 <etharp_output+0x200>)
 801930e:	4613      	mov	r3, r2
 8019310:	005b      	lsls	r3, r3, #1
 8019312:	4413      	add	r3, r2
 8019314:	00db      	lsls	r3, r3, #3
 8019316:	440b      	add	r3, r1
 8019318:	3308      	adds	r3, #8
 801931a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801931c:	68fa      	ldr	r2, [r7, #12]
 801931e:	429a      	cmp	r2, r3
 8019320:	d117      	bne.n	8019352 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019322:	69bb      	ldr	r3, [r7, #24]
 8019324:	6819      	ldr	r1, [r3, #0]
 8019326:	7dfa      	ldrb	r2, [r7, #23]
 8019328:	481f      	ldr	r0, [pc, #124]	; (80193a8 <etharp_output+0x200>)
 801932a:	4613      	mov	r3, r2
 801932c:	005b      	lsls	r3, r3, #1
 801932e:	4413      	add	r3, r2
 8019330:	00db      	lsls	r3, r3, #3
 8019332:	4403      	add	r3, r0
 8019334:	3304      	adds	r3, #4
 8019336:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019338:	4299      	cmp	r1, r3
 801933a:	d10a      	bne.n	8019352 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801933c:	4a19      	ldr	r2, [pc, #100]	; (80193a4 <etharp_output+0x1fc>)
 801933e:	7dfb      	ldrb	r3, [r7, #23]
 8019340:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019342:	7dfb      	ldrb	r3, [r7, #23]
 8019344:	461a      	mov	r2, r3
 8019346:	68b9      	ldr	r1, [r7, #8]
 8019348:	68f8      	ldr	r0, [r7, #12]
 801934a:	f7ff fe93 	bl	8019074 <etharp_output_to_arp_index>
 801934e:	4603      	mov	r3, r0
 8019350:	e018      	b.n	8019384 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019352:	7dfb      	ldrb	r3, [r7, #23]
 8019354:	3301      	adds	r3, #1
 8019356:	75fb      	strb	r3, [r7, #23]
 8019358:	7dfb      	ldrb	r3, [r7, #23]
 801935a:	2b09      	cmp	r3, #9
 801935c:	d9ca      	bls.n	80192f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801935e:	68ba      	ldr	r2, [r7, #8]
 8019360:	69b9      	ldr	r1, [r7, #24]
 8019362:	68f8      	ldr	r0, [r7, #12]
 8019364:	f000 f822 	bl	80193ac <etharp_query>
 8019368:	4603      	mov	r3, r0
 801936a:	e00b      	b.n	8019384 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8019372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019376:	9300      	str	r3, [sp, #0]
 8019378:	69fb      	ldr	r3, [r7, #28]
 801937a:	68b9      	ldr	r1, [r7, #8]
 801937c:	68f8      	ldr	r0, [r7, #12]
 801937e:	f001 fe69 	bl	801b054 <ethernet_output>
 8019382:	4603      	mov	r3, r0
}
 8019384:	4618      	mov	r0, r3
 8019386:	3720      	adds	r7, #32
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}
 801938c:	08027c90 	.word	0x08027c90
 8019390:	08027de0 	.word	0x08027de0
 8019394:	08027d08 	.word	0x08027d08
 8019398:	08027e30 	.word	0x08027e30
 801939c:	08027dd0 	.word	0x08027dd0
 80193a0:	0802918c 	.word	0x0802918c
 80193a4:	2000503c 	.word	0x2000503c
 80193a8:	20004f4c 	.word	0x20004f4c

080193ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b08c      	sub	sp, #48	; 0x30
 80193b0:	af02      	add	r7, sp, #8
 80193b2:	60f8      	str	r0, [r7, #12]
 80193b4:	60b9      	str	r1, [r7, #8]
 80193b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	3322      	adds	r3, #34	; 0x22
 80193bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80193be:	23ff      	movs	r3, #255	; 0xff
 80193c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80193c4:	2300      	movs	r3, #0
 80193c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80193c8:	68bb      	ldr	r3, [r7, #8]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	68f9      	ldr	r1, [r7, #12]
 80193ce:	4618      	mov	r0, r3
 80193d0:	f000 fe0e 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 80193d4:	4603      	mov	r3, r0
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d10c      	bne.n	80193f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80193e2:	2be0      	cmp	r3, #224	; 0xe0
 80193e4:	d006      	beq.n	80193f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80193e6:	68bb      	ldr	r3, [r7, #8]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d003      	beq.n	80193f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d102      	bne.n	80193fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80193f4:	f06f 030f 	mvn.w	r3, #15
 80193f8:	e101      	b.n	80195fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80193fa:	68fa      	ldr	r2, [r7, #12]
 80193fc:	2101      	movs	r1, #1
 80193fe:	68b8      	ldr	r0, [r7, #8]
 8019400:	f7ff fb60 	bl	8018ac4 <etharp_find_entry>
 8019404:	4603      	mov	r3, r0
 8019406:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801940c:	2b00      	cmp	r3, #0
 801940e:	da02      	bge.n	8019416 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019410:	8a7b      	ldrh	r3, [r7, #18]
 8019412:	b25b      	sxtb	r3, r3
 8019414:	e0f3      	b.n	80195fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019416:	8a7b      	ldrh	r3, [r7, #18]
 8019418:	2b7e      	cmp	r3, #126	; 0x7e
 801941a:	d906      	bls.n	801942a <etharp_query+0x7e>
 801941c:	4b7a      	ldr	r3, [pc, #488]	; (8019608 <etharp_query+0x25c>)
 801941e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019422:	497a      	ldr	r1, [pc, #488]	; (801960c <etharp_query+0x260>)
 8019424:	487a      	ldr	r0, [pc, #488]	; (8019610 <etharp_query+0x264>)
 8019426:	f002 fc19 	bl	801bc5c <printf>
  i = (netif_addr_idx_t)i_err;
 801942a:	8a7b      	ldrh	r3, [r7, #18]
 801942c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801942e:	7c7a      	ldrb	r2, [r7, #17]
 8019430:	4978      	ldr	r1, [pc, #480]	; (8019614 <etharp_query+0x268>)
 8019432:	4613      	mov	r3, r2
 8019434:	005b      	lsls	r3, r3, #1
 8019436:	4413      	add	r3, r2
 8019438:	00db      	lsls	r3, r3, #3
 801943a:	440b      	add	r3, r1
 801943c:	3314      	adds	r3, #20
 801943e:	781b      	ldrb	r3, [r3, #0]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d115      	bne.n	8019470 <etharp_query+0xc4>
    is_new_entry = 1;
 8019444:	2301      	movs	r3, #1
 8019446:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019448:	7c7a      	ldrb	r2, [r7, #17]
 801944a:	4972      	ldr	r1, [pc, #456]	; (8019614 <etharp_query+0x268>)
 801944c:	4613      	mov	r3, r2
 801944e:	005b      	lsls	r3, r3, #1
 8019450:	4413      	add	r3, r2
 8019452:	00db      	lsls	r3, r3, #3
 8019454:	440b      	add	r3, r1
 8019456:	3314      	adds	r3, #20
 8019458:	2201      	movs	r2, #1
 801945a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801945c:	7c7a      	ldrb	r2, [r7, #17]
 801945e:	496d      	ldr	r1, [pc, #436]	; (8019614 <etharp_query+0x268>)
 8019460:	4613      	mov	r3, r2
 8019462:	005b      	lsls	r3, r3, #1
 8019464:	4413      	add	r3, r2
 8019466:	00db      	lsls	r3, r3, #3
 8019468:	440b      	add	r3, r1
 801946a:	3308      	adds	r3, #8
 801946c:	68fa      	ldr	r2, [r7, #12]
 801946e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019470:	7c7a      	ldrb	r2, [r7, #17]
 8019472:	4968      	ldr	r1, [pc, #416]	; (8019614 <etharp_query+0x268>)
 8019474:	4613      	mov	r3, r2
 8019476:	005b      	lsls	r3, r3, #1
 8019478:	4413      	add	r3, r2
 801947a:	00db      	lsls	r3, r3, #3
 801947c:	440b      	add	r3, r1
 801947e:	3314      	adds	r3, #20
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	2b01      	cmp	r3, #1
 8019484:	d011      	beq.n	80194aa <etharp_query+0xfe>
 8019486:	7c7a      	ldrb	r2, [r7, #17]
 8019488:	4962      	ldr	r1, [pc, #392]	; (8019614 <etharp_query+0x268>)
 801948a:	4613      	mov	r3, r2
 801948c:	005b      	lsls	r3, r3, #1
 801948e:	4413      	add	r3, r2
 8019490:	00db      	lsls	r3, r3, #3
 8019492:	440b      	add	r3, r1
 8019494:	3314      	adds	r3, #20
 8019496:	781b      	ldrb	r3, [r3, #0]
 8019498:	2b01      	cmp	r3, #1
 801949a:	d806      	bhi.n	80194aa <etharp_query+0xfe>
 801949c:	4b5a      	ldr	r3, [pc, #360]	; (8019608 <etharp_query+0x25c>)
 801949e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80194a2:	495d      	ldr	r1, [pc, #372]	; (8019618 <etharp_query+0x26c>)
 80194a4:	485a      	ldr	r0, [pc, #360]	; (8019610 <etharp_query+0x264>)
 80194a6:	f002 fbd9 	bl	801bc5c <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80194aa:	6a3b      	ldr	r3, [r7, #32]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d102      	bne.n	80194b6 <etharp_query+0x10a>
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d10c      	bne.n	80194d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80194b6:	68b9      	ldr	r1, [r7, #8]
 80194b8:	68f8      	ldr	r0, [r7, #12]
 80194ba:	f000 f963 	bl	8019784 <etharp_request>
 80194be:	4603      	mov	r3, r0
 80194c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d102      	bne.n	80194d0 <etharp_query+0x124>
      return result;
 80194ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80194ce:	e096      	b.n	80195fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d106      	bne.n	80194e4 <etharp_query+0x138>
 80194d6:	4b4c      	ldr	r3, [pc, #304]	; (8019608 <etharp_query+0x25c>)
 80194d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80194dc:	494f      	ldr	r1, [pc, #316]	; (801961c <etharp_query+0x270>)
 80194de:	484c      	ldr	r0, [pc, #304]	; (8019610 <etharp_query+0x264>)
 80194e0:	f002 fbbc 	bl	801bc5c <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80194e4:	7c7a      	ldrb	r2, [r7, #17]
 80194e6:	494b      	ldr	r1, [pc, #300]	; (8019614 <etharp_query+0x268>)
 80194e8:	4613      	mov	r3, r2
 80194ea:	005b      	lsls	r3, r3, #1
 80194ec:	4413      	add	r3, r2
 80194ee:	00db      	lsls	r3, r3, #3
 80194f0:	440b      	add	r3, r1
 80194f2:	3314      	adds	r3, #20
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	2b01      	cmp	r3, #1
 80194f8:	d917      	bls.n	801952a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80194fa:	4a49      	ldr	r2, [pc, #292]	; (8019620 <etharp_query+0x274>)
 80194fc:	7c7b      	ldrb	r3, [r7, #17]
 80194fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019500:	7c7a      	ldrb	r2, [r7, #17]
 8019502:	4613      	mov	r3, r2
 8019504:	005b      	lsls	r3, r3, #1
 8019506:	4413      	add	r3, r2
 8019508:	00db      	lsls	r3, r3, #3
 801950a:	3308      	adds	r3, #8
 801950c:	4a41      	ldr	r2, [pc, #260]	; (8019614 <etharp_query+0x268>)
 801950e:	4413      	add	r3, r2
 8019510:	3304      	adds	r3, #4
 8019512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019516:	9200      	str	r2, [sp, #0]
 8019518:	697a      	ldr	r2, [r7, #20]
 801951a:	6879      	ldr	r1, [r7, #4]
 801951c:	68f8      	ldr	r0, [r7, #12]
 801951e:	f001 fd99 	bl	801b054 <ethernet_output>
 8019522:	4603      	mov	r3, r0
 8019524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019528:	e067      	b.n	80195fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801952a:	7c7a      	ldrb	r2, [r7, #17]
 801952c:	4939      	ldr	r1, [pc, #228]	; (8019614 <etharp_query+0x268>)
 801952e:	4613      	mov	r3, r2
 8019530:	005b      	lsls	r3, r3, #1
 8019532:	4413      	add	r3, r2
 8019534:	00db      	lsls	r3, r3, #3
 8019536:	440b      	add	r3, r1
 8019538:	3314      	adds	r3, #20
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	2b01      	cmp	r3, #1
 801953e:	d15c      	bne.n	80195fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019540:	2300      	movs	r3, #0
 8019542:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019548:	e01c      	b.n	8019584 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801954a:	69fb      	ldr	r3, [r7, #28]
 801954c:	895a      	ldrh	r2, [r3, #10]
 801954e:	69fb      	ldr	r3, [r7, #28]
 8019550:	891b      	ldrh	r3, [r3, #8]
 8019552:	429a      	cmp	r2, r3
 8019554:	d10a      	bne.n	801956c <etharp_query+0x1c0>
 8019556:	69fb      	ldr	r3, [r7, #28]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d006      	beq.n	801956c <etharp_query+0x1c0>
 801955e:	4b2a      	ldr	r3, [pc, #168]	; (8019608 <etharp_query+0x25c>)
 8019560:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019564:	492f      	ldr	r1, [pc, #188]	; (8019624 <etharp_query+0x278>)
 8019566:	482a      	ldr	r0, [pc, #168]	; (8019610 <etharp_query+0x264>)
 8019568:	f002 fb78 	bl	801bc5c <printf>
      if (PBUF_NEEDS_COPY(p)) {
 801956c:	69fb      	ldr	r3, [r7, #28]
 801956e:	7b1b      	ldrb	r3, [r3, #12]
 8019570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019574:	2b00      	cmp	r3, #0
 8019576:	d002      	beq.n	801957e <etharp_query+0x1d2>
        copy_needed = 1;
 8019578:	2301      	movs	r3, #1
 801957a:	61bb      	str	r3, [r7, #24]
        break;
 801957c:	e005      	b.n	801958a <etharp_query+0x1de>
      }
      p = p->next;
 801957e:	69fb      	ldr	r3, [r7, #28]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019584:	69fb      	ldr	r3, [r7, #28]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d1df      	bne.n	801954a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801958a:	69bb      	ldr	r3, [r7, #24]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d007      	beq.n	80195a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019596:	200e      	movs	r0, #14
 8019598:	f7f8 fa72 	bl	8011a80 <pbuf_clone>
 801959c:	61f8      	str	r0, [r7, #28]
 801959e:	e004      	b.n	80195aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80195a4:	69f8      	ldr	r0, [r7, #28]
 80195a6:	f7f8 f899 	bl	80116dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d021      	beq.n	80195f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80195b0:	7c7a      	ldrb	r2, [r7, #17]
 80195b2:	4918      	ldr	r1, [pc, #96]	; (8019614 <etharp_query+0x268>)
 80195b4:	4613      	mov	r3, r2
 80195b6:	005b      	lsls	r3, r3, #1
 80195b8:	4413      	add	r3, r2
 80195ba:	00db      	lsls	r3, r3, #3
 80195bc:	440b      	add	r3, r1
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d00a      	beq.n	80195da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80195c4:	7c7a      	ldrb	r2, [r7, #17]
 80195c6:	4913      	ldr	r1, [pc, #76]	; (8019614 <etharp_query+0x268>)
 80195c8:	4613      	mov	r3, r2
 80195ca:	005b      	lsls	r3, r3, #1
 80195cc:	4413      	add	r3, r2
 80195ce:	00db      	lsls	r3, r3, #3
 80195d0:	440b      	add	r3, r1
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7f7 ffdb 	bl	8011590 <pbuf_free>
      }
      arp_table[i].q = p;
 80195da:	7c7a      	ldrb	r2, [r7, #17]
 80195dc:	490d      	ldr	r1, [pc, #52]	; (8019614 <etharp_query+0x268>)
 80195de:	4613      	mov	r3, r2
 80195e0:	005b      	lsls	r3, r3, #1
 80195e2:	4413      	add	r3, r2
 80195e4:	00db      	lsls	r3, r3, #3
 80195e6:	440b      	add	r3, r1
 80195e8:	69fa      	ldr	r2, [r7, #28]
 80195ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80195ec:	2300      	movs	r3, #0
 80195ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80195f2:	e002      	b.n	80195fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80195f4:	23ff      	movs	r3, #255	; 0xff
 80195f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80195fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80195fe:	4618      	mov	r0, r3
 8019600:	3728      	adds	r7, #40	; 0x28
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}
 8019606:	bf00      	nop
 8019608:	08027c90 	.word	0x08027c90
 801960c:	08027e3c 	.word	0x08027e3c
 8019610:	08027d08 	.word	0x08027d08
 8019614:	20004f4c 	.word	0x20004f4c
 8019618:	08027e4c 	.word	0x08027e4c
 801961c:	08027e30 	.word	0x08027e30
 8019620:	2000503c 	.word	0x2000503c
 8019624:	08027e74 	.word	0x08027e74

08019628 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b08a      	sub	sp, #40	; 0x28
 801962c:	af02      	add	r7, sp, #8
 801962e:	60f8      	str	r0, [r7, #12]
 8019630:	60b9      	str	r1, [r7, #8]
 8019632:	607a      	str	r2, [r7, #4]
 8019634:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019636:	2300      	movs	r3, #0
 8019638:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d106      	bne.n	801964e <etharp_raw+0x26>
 8019640:	4b3a      	ldr	r3, [pc, #232]	; (801972c <etharp_raw+0x104>)
 8019642:	f240 4257 	movw	r2, #1111	; 0x457
 8019646:	493a      	ldr	r1, [pc, #232]	; (8019730 <etharp_raw+0x108>)
 8019648:	483a      	ldr	r0, [pc, #232]	; (8019734 <etharp_raw+0x10c>)
 801964a:	f002 fb07 	bl	801bc5c <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801964e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019652:	211c      	movs	r1, #28
 8019654:	200e      	movs	r0, #14
 8019656:	f7f7 fcb7 	bl	8010fc8 <pbuf_alloc>
 801965a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801965c:	69bb      	ldr	r3, [r7, #24]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d102      	bne.n	8019668 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019662:	f04f 33ff 	mov.w	r3, #4294967295
 8019666:	e05d      	b.n	8019724 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019668:	69bb      	ldr	r3, [r7, #24]
 801966a:	895b      	ldrh	r3, [r3, #10]
 801966c:	2b1b      	cmp	r3, #27
 801966e:	d806      	bhi.n	801967e <etharp_raw+0x56>
 8019670:	4b2e      	ldr	r3, [pc, #184]	; (801972c <etharp_raw+0x104>)
 8019672:	f240 4262 	movw	r2, #1122	; 0x462
 8019676:	4930      	ldr	r1, [pc, #192]	; (8019738 <etharp_raw+0x110>)
 8019678:	482e      	ldr	r0, [pc, #184]	; (8019734 <etharp_raw+0x10c>)
 801967a:	f002 faef 	bl	801bc5c <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801967e:	69bb      	ldr	r3, [r7, #24]
 8019680:	685b      	ldr	r3, [r3, #4]
 8019682:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019684:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019686:	4618      	mov	r0, r3
 8019688:	f7f6 fbc6 	bl	800fe18 <lwip_htons>
 801968c:	4603      	mov	r3, r0
 801968e:	461a      	mov	r2, r3
 8019690:	697b      	ldr	r3, [r7, #20]
 8019692:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801969a:	2b06      	cmp	r3, #6
 801969c:	d006      	beq.n	80196ac <etharp_raw+0x84>
 801969e:	4b23      	ldr	r3, [pc, #140]	; (801972c <etharp_raw+0x104>)
 80196a0:	f240 4269 	movw	r2, #1129	; 0x469
 80196a4:	4925      	ldr	r1, [pc, #148]	; (801973c <etharp_raw+0x114>)
 80196a6:	4823      	ldr	r0, [pc, #140]	; (8019734 <etharp_raw+0x10c>)
 80196a8:	f002 fad8 	bl	801bc5c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	3308      	adds	r3, #8
 80196b0:	2206      	movs	r2, #6
 80196b2:	6839      	ldr	r1, [r7, #0]
 80196b4:	4618      	mov	r0, r3
 80196b6:	f002 f823 	bl	801b700 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	3312      	adds	r3, #18
 80196be:	2206      	movs	r2, #6
 80196c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80196c2:	4618      	mov	r0, r3
 80196c4:	f002 f81c 	bl	801b700 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80196c8:	697b      	ldr	r3, [r7, #20]
 80196ca:	330e      	adds	r3, #14
 80196cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80196ce:	6812      	ldr	r2, [r2, #0]
 80196d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	3318      	adds	r3, #24
 80196d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196d8:	6812      	ldr	r2, [r2, #0]
 80196da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	2200      	movs	r2, #0
 80196e0:	701a      	strb	r2, [r3, #0]
 80196e2:	2200      	movs	r2, #0
 80196e4:	f042 0201 	orr.w	r2, r2, #1
 80196e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80196ea:	697b      	ldr	r3, [r7, #20]
 80196ec:	2200      	movs	r2, #0
 80196ee:	f042 0208 	orr.w	r2, r2, #8
 80196f2:	709a      	strb	r2, [r3, #2]
 80196f4:	2200      	movs	r2, #0
 80196f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80196f8:	697b      	ldr	r3, [r7, #20]
 80196fa:	2206      	movs	r2, #6
 80196fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80196fe:	697b      	ldr	r3, [r7, #20]
 8019700:	2204      	movs	r2, #4
 8019702:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019704:	f640 0306 	movw	r3, #2054	; 0x806
 8019708:	9300      	str	r3, [sp, #0]
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	68ba      	ldr	r2, [r7, #8]
 801970e:	69b9      	ldr	r1, [r7, #24]
 8019710:	68f8      	ldr	r0, [r7, #12]
 8019712:	f001 fc9f 	bl	801b054 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019716:	69b8      	ldr	r0, [r7, #24]
 8019718:	f7f7 ff3a 	bl	8011590 <pbuf_free>
  p = NULL;
 801971c:	2300      	movs	r3, #0
 801971e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019720:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019724:	4618      	mov	r0, r3
 8019726:	3720      	adds	r7, #32
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	08027c90 	.word	0x08027c90
 8019730:	08027de0 	.word	0x08027de0
 8019734:	08027d08 	.word	0x08027d08
 8019738:	08027e90 	.word	0x08027e90
 801973c:	08027ec4 	.word	0x08027ec4

08019740 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b088      	sub	sp, #32
 8019744:	af04      	add	r7, sp, #16
 8019746:	60f8      	str	r0, [r7, #12]
 8019748:	60b9      	str	r1, [r7, #8]
 801974a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801975c:	2201      	movs	r2, #1
 801975e:	9203      	str	r2, [sp, #12]
 8019760:	68ba      	ldr	r2, [r7, #8]
 8019762:	9202      	str	r2, [sp, #8]
 8019764:	4a06      	ldr	r2, [pc, #24]	; (8019780 <etharp_request_dst+0x40>)
 8019766:	9201      	str	r2, [sp, #4]
 8019768:	9300      	str	r3, [sp, #0]
 801976a:	4603      	mov	r3, r0
 801976c:	687a      	ldr	r2, [r7, #4]
 801976e:	68f8      	ldr	r0, [r7, #12]
 8019770:	f7ff ff5a 	bl	8019628 <etharp_raw>
 8019774:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019776:	4618      	mov	r0, r3
 8019778:	3710      	adds	r7, #16
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
 801977e:	bf00      	nop
 8019780:	08029194 	.word	0x08029194

08019784 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b082      	sub	sp, #8
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
 801978c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801978e:	4a05      	ldr	r2, [pc, #20]	; (80197a4 <etharp_request+0x20>)
 8019790:	6839      	ldr	r1, [r7, #0]
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	f7ff ffd4 	bl	8019740 <etharp_request_dst>
 8019798:	4603      	mov	r3, r0
}
 801979a:	4618      	mov	r0, r3
 801979c:	3708      	adds	r7, #8
 801979e:	46bd      	mov	sp, r7
 80197a0:	bd80      	pop	{r7, pc}
 80197a2:	bf00      	nop
 80197a4:	0802918c 	.word	0x0802918c

080197a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b08e      	sub	sp, #56	; 0x38
 80197ac:	af04      	add	r7, sp, #16
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80197b2:	4b79      	ldr	r3, [pc, #484]	; (8019998 <icmp_input+0x1f0>)
 80197b4:	689b      	ldr	r3, [r3, #8]
 80197b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80197b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ba:	781b      	ldrb	r3, [r3, #0]
 80197bc:	f003 030f 	and.w	r3, r3, #15
 80197c0:	b2db      	uxtb	r3, r3
 80197c2:	009b      	lsls	r3, r3, #2
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80197c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80197ca:	2b13      	cmp	r3, #19
 80197cc:	f240 80cd 	bls.w	801996a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	895b      	ldrh	r3, [r3, #10]
 80197d4:	2b03      	cmp	r3, #3
 80197d6:	f240 80ca 	bls.w	801996e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	685b      	ldr	r3, [r3, #4]
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80197e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	f000 80b7 	beq.w	801995c <icmp_input+0x1b4>
 80197ee:	2b08      	cmp	r3, #8
 80197f0:	f040 80b7 	bne.w	8019962 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80197f4:	4b69      	ldr	r3, [pc, #420]	; (801999c <icmp_input+0x1f4>)
 80197f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80197f8:	4b67      	ldr	r3, [pc, #412]	; (8019998 <icmp_input+0x1f0>)
 80197fa:	695b      	ldr	r3, [r3, #20]
 80197fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019800:	2be0      	cmp	r3, #224	; 0xe0
 8019802:	f000 80bb 	beq.w	801997c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019806:	4b64      	ldr	r3, [pc, #400]	; (8019998 <icmp_input+0x1f0>)
 8019808:	695b      	ldr	r3, [r3, #20]
 801980a:	4a63      	ldr	r2, [pc, #396]	; (8019998 <icmp_input+0x1f0>)
 801980c:	6812      	ldr	r2, [r2, #0]
 801980e:	4611      	mov	r1, r2
 8019810:	4618      	mov	r0, r3
 8019812:	f000 fbed 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 8019816:	4603      	mov	r3, r0
 8019818:	2b00      	cmp	r3, #0
 801981a:	f040 80b1 	bne.w	8019980 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	891b      	ldrh	r3, [r3, #8]
 8019822:	2b07      	cmp	r3, #7
 8019824:	f240 80a5 	bls.w	8019972 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801982a:	330e      	adds	r3, #14
 801982c:	4619      	mov	r1, r3
 801982e:	6878      	ldr	r0, [r7, #4]
 8019830:	f7f7 fe18 	bl	8011464 <pbuf_add_header>
 8019834:	4603      	mov	r3, r0
 8019836:	2b00      	cmp	r3, #0
 8019838:	d04b      	beq.n	80198d2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	891a      	ldrh	r2, [r3, #8]
 801983e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019840:	4413      	add	r3, r2
 8019842:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	891b      	ldrh	r3, [r3, #8]
 8019848:	8b7a      	ldrh	r2, [r7, #26]
 801984a:	429a      	cmp	r2, r3
 801984c:	f0c0 809a 	bcc.w	8019984 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019850:	8b7b      	ldrh	r3, [r7, #26]
 8019852:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019856:	4619      	mov	r1, r3
 8019858:	200e      	movs	r0, #14
 801985a:	f7f7 fbb5 	bl	8010fc8 <pbuf_alloc>
 801985e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	2b00      	cmp	r3, #0
 8019864:	f000 8090 	beq.w	8019988 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019868:	697b      	ldr	r3, [r7, #20]
 801986a:	895b      	ldrh	r3, [r3, #10]
 801986c:	461a      	mov	r2, r3
 801986e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019870:	3308      	adds	r3, #8
 8019872:	429a      	cmp	r2, r3
 8019874:	d203      	bcs.n	801987e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019876:	6978      	ldr	r0, [r7, #20]
 8019878:	f7f7 fe8a 	bl	8011590 <pbuf_free>
          goto icmperr;
 801987c:	e085      	b.n	801998a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801987e:	697b      	ldr	r3, [r7, #20]
 8019880:	685b      	ldr	r3, [r3, #4]
 8019882:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019886:	4618      	mov	r0, r3
 8019888:	f001 ff3a 	bl	801b700 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801988c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801988e:	4619      	mov	r1, r3
 8019890:	6978      	ldr	r0, [r7, #20]
 8019892:	f7f7 fdf7 	bl	8011484 <pbuf_remove_header>
 8019896:	4603      	mov	r3, r0
 8019898:	2b00      	cmp	r3, #0
 801989a:	d009      	beq.n	80198b0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801989c:	4b40      	ldr	r3, [pc, #256]	; (80199a0 <icmp_input+0x1f8>)
 801989e:	22b6      	movs	r2, #182	; 0xb6
 80198a0:	4940      	ldr	r1, [pc, #256]	; (80199a4 <icmp_input+0x1fc>)
 80198a2:	4841      	ldr	r0, [pc, #260]	; (80199a8 <icmp_input+0x200>)
 80198a4:	f002 f9da 	bl	801bc5c <printf>
          pbuf_free(r);
 80198a8:	6978      	ldr	r0, [r7, #20]
 80198aa:	f7f7 fe71 	bl	8011590 <pbuf_free>
          goto icmperr;
 80198ae:	e06c      	b.n	801998a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80198b0:	6879      	ldr	r1, [r7, #4]
 80198b2:	6978      	ldr	r0, [r7, #20]
 80198b4:	f7f7 ffa0 	bl	80117f8 <pbuf_copy>
 80198b8:	4603      	mov	r3, r0
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d003      	beq.n	80198c6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80198be:	6978      	ldr	r0, [r7, #20]
 80198c0:	f7f7 fe66 	bl	8011590 <pbuf_free>
          goto icmperr;
 80198c4:	e061      	b.n	801998a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80198c6:	6878      	ldr	r0, [r7, #4]
 80198c8:	f7f7 fe62 	bl	8011590 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	607b      	str	r3, [r7, #4]
 80198d0:	e00f      	b.n	80198f2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80198d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80198d4:	330e      	adds	r3, #14
 80198d6:	4619      	mov	r1, r3
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f7f7 fdd3 	bl	8011484 <pbuf_remove_header>
 80198de:	4603      	mov	r3, r0
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d006      	beq.n	80198f2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80198e4:	4b2e      	ldr	r3, [pc, #184]	; (80199a0 <icmp_input+0x1f8>)
 80198e6:	22c7      	movs	r2, #199	; 0xc7
 80198e8:	4930      	ldr	r1, [pc, #192]	; (80199ac <icmp_input+0x204>)
 80198ea:	482f      	ldr	r0, [pc, #188]	; (80199a8 <icmp_input+0x200>)
 80198ec:	f002 f9b6 	bl	801bc5c <printf>
          goto icmperr;
 80198f0:	e04b      	b.n	801998a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	685b      	ldr	r3, [r3, #4]
 80198f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80198f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80198fa:	4619      	mov	r1, r3
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f7f7 fdb1 	bl	8011464 <pbuf_add_header>
 8019902:	4603      	mov	r3, r0
 8019904:	2b00      	cmp	r3, #0
 8019906:	d12b      	bne.n	8019960 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	685b      	ldr	r3, [r3, #4]
 801990c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801990e:	69fb      	ldr	r3, [r7, #28]
 8019910:	681a      	ldr	r2, [r3, #0]
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019916:	4b20      	ldr	r3, [pc, #128]	; (8019998 <icmp_input+0x1f0>)
 8019918:	691a      	ldr	r2, [r3, #16]
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801991e:	693b      	ldr	r3, [r7, #16]
 8019920:	2200      	movs	r2, #0
 8019922:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019924:	693b      	ldr	r3, [r7, #16]
 8019926:	2200      	movs	r2, #0
 8019928:	709a      	strb	r2, [r3, #2]
 801992a:	2200      	movs	r2, #0
 801992c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	22ff      	movs	r2, #255	; 0xff
 8019932:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	2200      	movs	r2, #0
 8019938:	729a      	strb	r2, [r3, #10]
 801993a:	2200      	movs	r2, #0
 801993c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	9302      	str	r3, [sp, #8]
 8019942:	2301      	movs	r3, #1
 8019944:	9301      	str	r3, [sp, #4]
 8019946:	2300      	movs	r3, #0
 8019948:	9300      	str	r3, [sp, #0]
 801994a:	23ff      	movs	r3, #255	; 0xff
 801994c:	2200      	movs	r2, #0
 801994e:	69f9      	ldr	r1, [r7, #28]
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f000 fa75 	bl	8019e40 <ip4_output_if>
 8019956:	4603      	mov	r3, r0
 8019958:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801995a:	e001      	b.n	8019960 <icmp_input+0x1b8>
      break;
 801995c:	bf00      	nop
 801995e:	e000      	b.n	8019962 <icmp_input+0x1ba>
      break;
 8019960:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019962:	6878      	ldr	r0, [r7, #4]
 8019964:	f7f7 fe14 	bl	8011590 <pbuf_free>
  return;
 8019968:	e013      	b.n	8019992 <icmp_input+0x1ea>
    goto lenerr;
 801996a:	bf00      	nop
 801996c:	e002      	b.n	8019974 <icmp_input+0x1cc>
    goto lenerr;
 801996e:	bf00      	nop
 8019970:	e000      	b.n	8019974 <icmp_input+0x1cc>
        goto lenerr;
 8019972:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f7f7 fe0b 	bl	8011590 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801997a:	e00a      	b.n	8019992 <icmp_input+0x1ea>
        goto icmperr;
 801997c:	bf00      	nop
 801997e:	e004      	b.n	801998a <icmp_input+0x1e2>
        goto icmperr;
 8019980:	bf00      	nop
 8019982:	e002      	b.n	801998a <icmp_input+0x1e2>
          goto icmperr;
 8019984:	bf00      	nop
 8019986:	e000      	b.n	801998a <icmp_input+0x1e2>
          goto icmperr;
 8019988:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	f7f7 fe00 	bl	8011590 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019990:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019992:	3728      	adds	r7, #40	; 0x28
 8019994:	46bd      	mov	sp, r7
 8019996:	bd80      	pop	{r7, pc}
 8019998:	20008740 	.word	0x20008740
 801999c:	20008754 	.word	0x20008754
 80199a0:	08027f08 	.word	0x08027f08
 80199a4:	08027f40 	.word	0x08027f40
 80199a8:	08027f78 	.word	0x08027f78
 80199ac:	08027fa0 	.word	0x08027fa0

080199b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	460b      	mov	r3, r1
 80199ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80199bc:	78fb      	ldrb	r3, [r7, #3]
 80199be:	461a      	mov	r2, r3
 80199c0:	2103      	movs	r1, #3
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f000 f814 	bl	80199f0 <icmp_send_response>
}
 80199c8:	bf00      	nop
 80199ca:	3708      	adds	r7, #8
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b082      	sub	sp, #8
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	460b      	mov	r3, r1
 80199da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80199dc:	78fb      	ldrb	r3, [r7, #3]
 80199de:	461a      	mov	r2, r3
 80199e0:	210b      	movs	r1, #11
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f000 f804 	bl	80199f0 <icmp_send_response>
}
 80199e8:	bf00      	nop
 80199ea:	3708      	adds	r7, #8
 80199ec:	46bd      	mov	sp, r7
 80199ee:	bd80      	pop	{r7, pc}

080199f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b08c      	sub	sp, #48	; 0x30
 80199f4:	af04      	add	r7, sp, #16
 80199f6:	6078      	str	r0, [r7, #4]
 80199f8:	460b      	mov	r3, r1
 80199fa:	70fb      	strb	r3, [r7, #3]
 80199fc:	4613      	mov	r3, r2
 80199fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019a00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a04:	2124      	movs	r1, #36	; 0x24
 8019a06:	2022      	movs	r0, #34	; 0x22
 8019a08:	f7f7 fade 	bl	8010fc8 <pbuf_alloc>
 8019a0c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019a0e:	69fb      	ldr	r3, [r7, #28]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d04c      	beq.n	8019aae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	895b      	ldrh	r3, [r3, #10]
 8019a18:	2b23      	cmp	r3, #35	; 0x23
 8019a1a:	d806      	bhi.n	8019a2a <icmp_send_response+0x3a>
 8019a1c:	4b26      	ldr	r3, [pc, #152]	; (8019ab8 <icmp_send_response+0xc8>)
 8019a1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019a22:	4926      	ldr	r1, [pc, #152]	; (8019abc <icmp_send_response+0xcc>)
 8019a24:	4826      	ldr	r0, [pc, #152]	; (8019ac0 <icmp_send_response+0xd0>)
 8019a26:	f002 f919 	bl	801bc5c <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	685b      	ldr	r3, [r3, #4]
 8019a2e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019a30:	69fb      	ldr	r3, [r7, #28]
 8019a32:	685b      	ldr	r3, [r3, #4]
 8019a34:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	78fa      	ldrb	r2, [r7, #3]
 8019a3a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019a3c:	697b      	ldr	r3, [r7, #20]
 8019a3e:	78ba      	ldrb	r2, [r7, #2]
 8019a40:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	2200      	movs	r2, #0
 8019a46:	711a      	strb	r2, [r3, #4]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019a4c:	697b      	ldr	r3, [r7, #20]
 8019a4e:	2200      	movs	r2, #0
 8019a50:	719a      	strb	r2, [r3, #6]
 8019a52:	2200      	movs	r2, #0
 8019a54:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019a56:	69fb      	ldr	r3, [r7, #28]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	f103 0008 	add.w	r0, r3, #8
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	221c      	movs	r2, #28
 8019a64:	4619      	mov	r1, r3
 8019a66:	f001 fe4b 	bl	801b700 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019a6a:	69bb      	ldr	r3, [r7, #24]
 8019a6c:	68db      	ldr	r3, [r3, #12]
 8019a6e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019a70:	f107 030c 	add.w	r3, r7, #12
 8019a74:	4618      	mov	r0, r3
 8019a76:	f000 f825 	bl	8019ac4 <ip4_route>
 8019a7a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019a7c:	693b      	ldr	r3, [r7, #16]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d011      	beq.n	8019aa6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019a82:	697b      	ldr	r3, [r7, #20]
 8019a84:	2200      	movs	r2, #0
 8019a86:	709a      	strb	r2, [r3, #2]
 8019a88:	2200      	movs	r2, #0
 8019a8a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019a8c:	f107 020c 	add.w	r2, r7, #12
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	9302      	str	r3, [sp, #8]
 8019a94:	2301      	movs	r3, #1
 8019a96:	9301      	str	r3, [sp, #4]
 8019a98:	2300      	movs	r3, #0
 8019a9a:	9300      	str	r3, [sp, #0]
 8019a9c:	23ff      	movs	r3, #255	; 0xff
 8019a9e:	2100      	movs	r1, #0
 8019aa0:	69f8      	ldr	r0, [r7, #28]
 8019aa2:	f000 f9cd 	bl	8019e40 <ip4_output_if>
  }
  pbuf_free(q);
 8019aa6:	69f8      	ldr	r0, [r7, #28]
 8019aa8:	f7f7 fd72 	bl	8011590 <pbuf_free>
 8019aac:	e000      	b.n	8019ab0 <icmp_send_response+0xc0>
    return;
 8019aae:	bf00      	nop
}
 8019ab0:	3720      	adds	r7, #32
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	08027f08 	.word	0x08027f08
 8019abc:	08027fd4 	.word	0x08027fd4
 8019ac0:	08027f78 	.word	0x08027f78

08019ac4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019ac4:	b480      	push	{r7}
 8019ac6:	b085      	sub	sp, #20
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019acc:	4b33      	ldr	r3, [pc, #204]	; (8019b9c <ip4_route+0xd8>)
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	60fb      	str	r3, [r7, #12]
 8019ad2:	e036      	b.n	8019b42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019ada:	f003 0301 	and.w	r3, r3, #1
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d02b      	beq.n	8019b3c <ip4_route+0x78>
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019aea:	089b      	lsrs	r3, r3, #2
 8019aec:	f003 0301 	and.w	r3, r3, #1
 8019af0:	b2db      	uxtb	r3, r3
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d022      	beq.n	8019b3c <ip4_route+0x78>
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	3304      	adds	r3, #4
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d01d      	beq.n	8019b3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	681a      	ldr	r2, [r3, #0]
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	3304      	adds	r3, #4
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	405a      	eors	r2, r3
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	3308      	adds	r3, #8
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	4013      	ands	r3, r2
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d101      	bne.n	8019b1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	e038      	b.n	8019b8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019b22:	f003 0302 	and.w	r3, r3, #2
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d108      	bne.n	8019b3c <ip4_route+0x78>
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	681a      	ldr	r2, [r3, #0]
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	330c      	adds	r3, #12
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	429a      	cmp	r2, r3
 8019b36:	d101      	bne.n	8019b3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	e028      	b.n	8019b8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	60fb      	str	r3, [r7, #12]
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d1c5      	bne.n	8019ad4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019b48:	4b15      	ldr	r3, [pc, #84]	; (8019ba0 <ip4_route+0xdc>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d01a      	beq.n	8019b86 <ip4_route+0xc2>
 8019b50:	4b13      	ldr	r3, [pc, #76]	; (8019ba0 <ip4_route+0xdc>)
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019b58:	f003 0301 	and.w	r3, r3, #1
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d012      	beq.n	8019b86 <ip4_route+0xc2>
 8019b60:	4b0f      	ldr	r3, [pc, #60]	; (8019ba0 <ip4_route+0xdc>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019b68:	f003 0304 	and.w	r3, r3, #4
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d00a      	beq.n	8019b86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019b70:	4b0b      	ldr	r3, [pc, #44]	; (8019ba0 <ip4_route+0xdc>)
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	3304      	adds	r3, #4
 8019b76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d004      	beq.n	8019b86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	b2db      	uxtb	r3, r3
 8019b82:	2b7f      	cmp	r3, #127	; 0x7f
 8019b84:	d101      	bne.n	8019b8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019b86:	2300      	movs	r3, #0
 8019b88:	e001      	b.n	8019b8e <ip4_route+0xca>
  }

  return netif_default;
 8019b8a:	4b05      	ldr	r3, [pc, #20]	; (8019ba0 <ip4_route+0xdc>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
}
 8019b8e:	4618      	mov	r0, r3
 8019b90:	3714      	adds	r7, #20
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr
 8019b9a:	bf00      	nop
 8019b9c:	2000be44 	.word	0x2000be44
 8019ba0:	2000be48 	.word	0x2000be48

08019ba4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b082      	sub	sp, #8
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019bb2:	f003 0301 	and.w	r3, r3, #1
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d016      	beq.n	8019bea <ip4_input_accept+0x46>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	3304      	adds	r3, #4
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d011      	beq.n	8019bea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019bc6:	4b0b      	ldr	r3, [pc, #44]	; (8019bf4 <ip4_input_accept+0x50>)
 8019bc8:	695a      	ldr	r2, [r3, #20]
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	3304      	adds	r3, #4
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	d008      	beq.n	8019be6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019bd4:	4b07      	ldr	r3, [pc, #28]	; (8019bf4 <ip4_input_accept+0x50>)
 8019bd6:	695b      	ldr	r3, [r3, #20]
 8019bd8:	6879      	ldr	r1, [r7, #4]
 8019bda:	4618      	mov	r0, r3
 8019bdc:	f000 fa08 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 8019be0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d001      	beq.n	8019bea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019be6:	2301      	movs	r3, #1
 8019be8:	e000      	b.n	8019bec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019bea:	2300      	movs	r3, #0
}
 8019bec:	4618      	mov	r0, r3
 8019bee:	3708      	adds	r7, #8
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	bd80      	pop	{r7, pc}
 8019bf4:	20008740 	.word	0x20008740

08019bf8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b086      	sub	sp, #24
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
 8019c00:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	685b      	ldr	r3, [r3, #4]
 8019c06:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019c08:	697b      	ldr	r3, [r7, #20]
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	091b      	lsrs	r3, r3, #4
 8019c0e:	b2db      	uxtb	r3, r3
 8019c10:	2b04      	cmp	r3, #4
 8019c12:	d004      	beq.n	8019c1e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019c14:	6878      	ldr	r0, [r7, #4]
 8019c16:	f7f7 fcbb 	bl	8011590 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	e107      	b.n	8019e2e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	781b      	ldrb	r3, [r3, #0]
 8019c22:	f003 030f 	and.w	r3, r3, #15
 8019c26:	b2db      	uxtb	r3, r3
 8019c28:	009b      	lsls	r3, r3, #2
 8019c2a:	b2db      	uxtb	r3, r3
 8019c2c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	885b      	ldrh	r3, [r3, #2]
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	4618      	mov	r0, r3
 8019c36:	f7f6 f8ef 	bl	800fe18 <lwip_htons>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	891b      	ldrh	r3, [r3, #8]
 8019c42:	89ba      	ldrh	r2, [r7, #12]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d204      	bcs.n	8019c52 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019c48:	89bb      	ldrh	r3, [r7, #12]
 8019c4a:	4619      	mov	r1, r3
 8019c4c:	6878      	ldr	r0, [r7, #4]
 8019c4e:	f7f7 fb19 	bl	8011284 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	895b      	ldrh	r3, [r3, #10]
 8019c56:	89fa      	ldrh	r2, [r7, #14]
 8019c58:	429a      	cmp	r2, r3
 8019c5a:	d807      	bhi.n	8019c6c <ip4_input+0x74>
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	891b      	ldrh	r3, [r3, #8]
 8019c60:	89ba      	ldrh	r2, [r7, #12]
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d802      	bhi.n	8019c6c <ip4_input+0x74>
 8019c66:	89fb      	ldrh	r3, [r7, #14]
 8019c68:	2b13      	cmp	r3, #19
 8019c6a:	d804      	bhi.n	8019c76 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019c6c:	6878      	ldr	r0, [r7, #4]
 8019c6e:	f7f7 fc8f 	bl	8011590 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019c72:	2300      	movs	r3, #0
 8019c74:	e0db      	b.n	8019e2e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	691b      	ldr	r3, [r3, #16]
 8019c7a:	4a6f      	ldr	r2, [pc, #444]	; (8019e38 <ip4_input+0x240>)
 8019c7c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019c7e:	697b      	ldr	r3, [r7, #20]
 8019c80:	68db      	ldr	r3, [r3, #12]
 8019c82:	4a6d      	ldr	r2, [pc, #436]	; (8019e38 <ip4_input+0x240>)
 8019c84:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019c86:	4b6c      	ldr	r3, [pc, #432]	; (8019e38 <ip4_input+0x240>)
 8019c88:	695b      	ldr	r3, [r3, #20]
 8019c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019c8e:	2be0      	cmp	r3, #224	; 0xe0
 8019c90:	d112      	bne.n	8019cb8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019c98:	f003 0301 	and.w	r3, r3, #1
 8019c9c:	b2db      	uxtb	r3, r3
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d007      	beq.n	8019cb2 <ip4_input+0xba>
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	3304      	adds	r3, #4
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d002      	beq.n	8019cb2 <ip4_input+0xba>
      netif = inp;
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	613b      	str	r3, [r7, #16]
 8019cb0:	e02a      	b.n	8019d08 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	613b      	str	r3, [r7, #16]
 8019cb6:	e027      	b.n	8019d08 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019cb8:	6838      	ldr	r0, [r7, #0]
 8019cba:	f7ff ff73 	bl	8019ba4 <ip4_input_accept>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d002      	beq.n	8019cca <ip4_input+0xd2>
      netif = inp;
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	613b      	str	r3, [r7, #16]
 8019cc8:	e01e      	b.n	8019d08 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019cca:	2300      	movs	r3, #0
 8019ccc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019cce:	4b5a      	ldr	r3, [pc, #360]	; (8019e38 <ip4_input+0x240>)
 8019cd0:	695b      	ldr	r3, [r3, #20]
 8019cd2:	b2db      	uxtb	r3, r3
 8019cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8019cd6:	d017      	beq.n	8019d08 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019cd8:	4b58      	ldr	r3, [pc, #352]	; (8019e3c <ip4_input+0x244>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	613b      	str	r3, [r7, #16]
 8019cde:	e00e      	b.n	8019cfe <ip4_input+0x106>
          if (netif == inp) {
 8019ce0:	693a      	ldr	r2, [r7, #16]
 8019ce2:	683b      	ldr	r3, [r7, #0]
 8019ce4:	429a      	cmp	r2, r3
 8019ce6:	d006      	beq.n	8019cf6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019ce8:	6938      	ldr	r0, [r7, #16]
 8019cea:	f7ff ff5b 	bl	8019ba4 <ip4_input_accept>
 8019cee:	4603      	mov	r3, r0
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d108      	bne.n	8019d06 <ip4_input+0x10e>
 8019cf4:	e000      	b.n	8019cf8 <ip4_input+0x100>
            continue;
 8019cf6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019cf8:	693b      	ldr	r3, [r7, #16]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	613b      	str	r3, [r7, #16]
 8019cfe:	693b      	ldr	r3, [r7, #16]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d1ed      	bne.n	8019ce0 <ip4_input+0xe8>
 8019d04:	e000      	b.n	8019d08 <ip4_input+0x110>
            break;
 8019d06:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019d08:	4b4b      	ldr	r3, [pc, #300]	; (8019e38 <ip4_input+0x240>)
 8019d0a:	691b      	ldr	r3, [r3, #16]
 8019d0c:	6839      	ldr	r1, [r7, #0]
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f000 f96e 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 8019d14:	4603      	mov	r3, r0
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d105      	bne.n	8019d26 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019d1a:	4b47      	ldr	r3, [pc, #284]	; (8019e38 <ip4_input+0x240>)
 8019d1c:	691b      	ldr	r3, [r3, #16]
 8019d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019d22:	2be0      	cmp	r3, #224	; 0xe0
 8019d24:	d104      	bne.n	8019d30 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019d26:	6878      	ldr	r0, [r7, #4]
 8019d28:	f7f7 fc32 	bl	8011590 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	e07e      	b.n	8019e2e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019d30:	693b      	ldr	r3, [r7, #16]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d104      	bne.n	8019d40 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019d36:	6878      	ldr	r0, [r7, #4]
 8019d38:	f7f7 fc2a 	bl	8011590 <pbuf_free>
    return ERR_OK;
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	e076      	b.n	8019e2e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	88db      	ldrh	r3, [r3, #6]
 8019d44:	b29b      	uxth	r3, r3
 8019d46:	461a      	mov	r2, r3
 8019d48:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019d4c:	4013      	ands	r3, r2
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d00b      	beq.n	8019d6a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019d52:	6878      	ldr	r0, [r7, #4]
 8019d54:	f000 fdbc 	bl	801a8d0 <ip4_reass>
 8019d58:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d101      	bne.n	8019d64 <ip4_input+0x16c>
      return ERR_OK;
 8019d60:	2300      	movs	r3, #0
 8019d62:	e064      	b.n	8019e2e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	685b      	ldr	r3, [r3, #4]
 8019d68:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019d6a:	4a33      	ldr	r2, [pc, #204]	; (8019e38 <ip4_input+0x240>)
 8019d6c:	693b      	ldr	r3, [r7, #16]
 8019d6e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019d70:	4a31      	ldr	r2, [pc, #196]	; (8019e38 <ip4_input+0x240>)
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019d76:	4a30      	ldr	r2, [pc, #192]	; (8019e38 <ip4_input+0x240>)
 8019d78:	697b      	ldr	r3, [r7, #20]
 8019d7a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	f003 030f 	and.w	r3, r3, #15
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	009b      	lsls	r3, r3, #2
 8019d88:	b2db      	uxtb	r3, r3
 8019d8a:	b29a      	uxth	r2, r3
 8019d8c:	4b2a      	ldr	r3, [pc, #168]	; (8019e38 <ip4_input+0x240>)
 8019d8e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019d90:	89fb      	ldrh	r3, [r7, #14]
 8019d92:	4619      	mov	r1, r3
 8019d94:	6878      	ldr	r0, [r7, #4]
 8019d96:	f7f7 fb75 	bl	8011484 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019d9a:	697b      	ldr	r3, [r7, #20]
 8019d9c:	7a5b      	ldrb	r3, [r3, #9]
 8019d9e:	2b11      	cmp	r3, #17
 8019da0:	d006      	beq.n	8019db0 <ip4_input+0x1b8>
 8019da2:	2b11      	cmp	r3, #17
 8019da4:	dc13      	bgt.n	8019dce <ip4_input+0x1d6>
 8019da6:	2b01      	cmp	r3, #1
 8019da8:	d00c      	beq.n	8019dc4 <ip4_input+0x1cc>
 8019daa:	2b06      	cmp	r3, #6
 8019dac:	d005      	beq.n	8019dba <ip4_input+0x1c2>
 8019dae:	e00e      	b.n	8019dce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019db0:	6839      	ldr	r1, [r7, #0]
 8019db2:	6878      	ldr	r0, [r7, #4]
 8019db4:	f7fe f970 	bl	8018098 <udp_input>
        break;
 8019db8:	e026      	b.n	8019e08 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019dba:	6839      	ldr	r1, [r7, #0]
 8019dbc:	6878      	ldr	r0, [r7, #4]
 8019dbe:	f7f9 fd2d 	bl	801381c <tcp_input>
        break;
 8019dc2:	e021      	b.n	8019e08 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019dc4:	6839      	ldr	r1, [r7, #0]
 8019dc6:	6878      	ldr	r0, [r7, #4]
 8019dc8:	f7ff fcee 	bl	80197a8 <icmp_input>
        break;
 8019dcc:	e01c      	b.n	8019e08 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019dce:	4b1a      	ldr	r3, [pc, #104]	; (8019e38 <ip4_input+0x240>)
 8019dd0:	695b      	ldr	r3, [r3, #20]
 8019dd2:	6939      	ldr	r1, [r7, #16]
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f000 f90b 	bl	8019ff0 <ip4_addr_isbroadcast_u32>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d10f      	bne.n	8019e00 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019de0:	4b15      	ldr	r3, [pc, #84]	; (8019e38 <ip4_input+0x240>)
 8019de2:	695b      	ldr	r3, [r3, #20]
 8019de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019de8:	2be0      	cmp	r3, #224	; 0xe0
 8019dea:	d009      	beq.n	8019e00 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019dec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019df0:	4619      	mov	r1, r3
 8019df2:	6878      	ldr	r0, [r7, #4]
 8019df4:	f7f7 fbb9 	bl	801156a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019df8:	2102      	movs	r1, #2
 8019dfa:	6878      	ldr	r0, [r7, #4]
 8019dfc:	f7ff fdd8 	bl	80199b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019e00:	6878      	ldr	r0, [r7, #4]
 8019e02:	f7f7 fbc5 	bl	8011590 <pbuf_free>
        break;
 8019e06:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019e08:	4b0b      	ldr	r3, [pc, #44]	; (8019e38 <ip4_input+0x240>)
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019e0e:	4b0a      	ldr	r3, [pc, #40]	; (8019e38 <ip4_input+0x240>)
 8019e10:	2200      	movs	r2, #0
 8019e12:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019e14:	4b08      	ldr	r3, [pc, #32]	; (8019e38 <ip4_input+0x240>)
 8019e16:	2200      	movs	r2, #0
 8019e18:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019e1a:	4b07      	ldr	r3, [pc, #28]	; (8019e38 <ip4_input+0x240>)
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019e20:	4b05      	ldr	r3, [pc, #20]	; (8019e38 <ip4_input+0x240>)
 8019e22:	2200      	movs	r2, #0
 8019e24:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019e26:	4b04      	ldr	r3, [pc, #16]	; (8019e38 <ip4_input+0x240>)
 8019e28:	2200      	movs	r2, #0
 8019e2a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019e2c:	2300      	movs	r3, #0
}
 8019e2e:	4618      	mov	r0, r3
 8019e30:	3718      	adds	r7, #24
 8019e32:	46bd      	mov	sp, r7
 8019e34:	bd80      	pop	{r7, pc}
 8019e36:	bf00      	nop
 8019e38:	20008740 	.word	0x20008740
 8019e3c:	2000be44 	.word	0x2000be44

08019e40 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b08a      	sub	sp, #40	; 0x28
 8019e44:	af04      	add	r7, sp, #16
 8019e46:	60f8      	str	r0, [r7, #12]
 8019e48:	60b9      	str	r1, [r7, #8]
 8019e4a:	607a      	str	r2, [r7, #4]
 8019e4c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d009      	beq.n	8019e6c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d003      	beq.n	8019e66 <ip4_output_if+0x26>
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d102      	bne.n	8019e6c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e68:	3304      	adds	r3, #4
 8019e6a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019e6c:	78fa      	ldrb	r2, [r7, #3]
 8019e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e70:	9302      	str	r3, [sp, #8]
 8019e72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019e76:	9301      	str	r3, [sp, #4]
 8019e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019e7c:	9300      	str	r3, [sp, #0]
 8019e7e:	4613      	mov	r3, r2
 8019e80:	687a      	ldr	r2, [r7, #4]
 8019e82:	6979      	ldr	r1, [r7, #20]
 8019e84:	68f8      	ldr	r0, [r7, #12]
 8019e86:	f000 f805 	bl	8019e94 <ip4_output_if_src>
 8019e8a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	3718      	adds	r7, #24
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b088      	sub	sp, #32
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	60f8      	str	r0, [r7, #12]
 8019e9c:	60b9      	str	r1, [r7, #8]
 8019e9e:	607a      	str	r2, [r7, #4]
 8019ea0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	7b9b      	ldrb	r3, [r3, #14]
 8019ea6:	2b01      	cmp	r3, #1
 8019ea8:	d006      	beq.n	8019eb8 <ip4_output_if_src+0x24>
 8019eaa:	4b4b      	ldr	r3, [pc, #300]	; (8019fd8 <ip4_output_if_src+0x144>)
 8019eac:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019eb0:	494a      	ldr	r1, [pc, #296]	; (8019fdc <ip4_output_if_src+0x148>)
 8019eb2:	484b      	ldr	r0, [pc, #300]	; (8019fe0 <ip4_output_if_src+0x14c>)
 8019eb4:	f001 fed2 	bl	801bc5c <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d060      	beq.n	8019f80 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019ebe:	2314      	movs	r3, #20
 8019ec0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019ec2:	2114      	movs	r1, #20
 8019ec4:	68f8      	ldr	r0, [r7, #12]
 8019ec6:	f7f7 facd 	bl	8011464 <pbuf_add_header>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d002      	beq.n	8019ed6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019ed0:	f06f 0301 	mvn.w	r3, #1
 8019ed4:	e07c      	b.n	8019fd0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	685b      	ldr	r3, [r3, #4]
 8019eda:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	895b      	ldrh	r3, [r3, #10]
 8019ee0:	2b13      	cmp	r3, #19
 8019ee2:	d806      	bhi.n	8019ef2 <ip4_output_if_src+0x5e>
 8019ee4:	4b3c      	ldr	r3, [pc, #240]	; (8019fd8 <ip4_output_if_src+0x144>)
 8019ee6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019eea:	493e      	ldr	r1, [pc, #248]	; (8019fe4 <ip4_output_if_src+0x150>)
 8019eec:	483c      	ldr	r0, [pc, #240]	; (8019fe0 <ip4_output_if_src+0x14c>)
 8019eee:	f001 feb5 	bl	801bc5c <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019ef2:	69fb      	ldr	r3, [r7, #28]
 8019ef4:	78fa      	ldrb	r2, [r7, #3]
 8019ef6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019ef8:	69fb      	ldr	r3, [r7, #28]
 8019efa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019efe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681a      	ldr	r2, [r3, #0]
 8019f04:	69fb      	ldr	r3, [r7, #28]
 8019f06:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019f08:	8b7b      	ldrh	r3, [r7, #26]
 8019f0a:	089b      	lsrs	r3, r3, #2
 8019f0c:	b29b      	uxth	r3, r3
 8019f0e:	b2db      	uxtb	r3, r3
 8019f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f14:	b2da      	uxtb	r2, r3
 8019f16:	69fb      	ldr	r3, [r7, #28]
 8019f18:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019f1a:	69fb      	ldr	r3, [r7, #28]
 8019f1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019f20:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	891b      	ldrh	r3, [r3, #8]
 8019f26:	4618      	mov	r0, r3
 8019f28:	f7f5 ff76 	bl	800fe18 <lwip_htons>
 8019f2c:	4603      	mov	r3, r0
 8019f2e:	461a      	mov	r2, r3
 8019f30:	69fb      	ldr	r3, [r7, #28]
 8019f32:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	2200      	movs	r2, #0
 8019f38:	719a      	strb	r2, [r3, #6]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019f3e:	4b2a      	ldr	r3, [pc, #168]	; (8019fe8 <ip4_output_if_src+0x154>)
 8019f40:	881b      	ldrh	r3, [r3, #0]
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7f5 ff68 	bl	800fe18 <lwip_htons>
 8019f48:	4603      	mov	r3, r0
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	69fb      	ldr	r3, [r7, #28]
 8019f4e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019f50:	4b25      	ldr	r3, [pc, #148]	; (8019fe8 <ip4_output_if_src+0x154>)
 8019f52:	881b      	ldrh	r3, [r3, #0]
 8019f54:	3301      	adds	r3, #1
 8019f56:	b29a      	uxth	r2, r3
 8019f58:	4b23      	ldr	r3, [pc, #140]	; (8019fe8 <ip4_output_if_src+0x154>)
 8019f5a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d104      	bne.n	8019f6c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019f62:	4b22      	ldr	r3, [pc, #136]	; (8019fec <ip4_output_if_src+0x158>)
 8019f64:	681a      	ldr	r2, [r3, #0]
 8019f66:	69fb      	ldr	r3, [r7, #28]
 8019f68:	60da      	str	r2, [r3, #12]
 8019f6a:	e003      	b.n	8019f74 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019f6c:	68bb      	ldr	r3, [r7, #8]
 8019f6e:	681a      	ldr	r2, [r3, #0]
 8019f70:	69fb      	ldr	r3, [r7, #28]
 8019f72:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019f74:	69fb      	ldr	r3, [r7, #28]
 8019f76:	2200      	movs	r2, #0
 8019f78:	729a      	strb	r2, [r3, #10]
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	72da      	strb	r2, [r3, #11]
 8019f7e:	e00f      	b.n	8019fa0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	895b      	ldrh	r3, [r3, #10]
 8019f84:	2b13      	cmp	r3, #19
 8019f86:	d802      	bhi.n	8019f8e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019f88:	f06f 0301 	mvn.w	r3, #1
 8019f8c:	e020      	b.n	8019fd0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019f94:	69fb      	ldr	r3, [r7, #28]
 8019f96:	691b      	ldr	r3, [r3, #16]
 8019f98:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019f9a:	f107 0314 	add.w	r3, r7, #20
 8019f9e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa2:	8c1b      	ldrh	r3, [r3, #32]
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d00c      	beq.n	8019fc2 <ip4_output_if_src+0x12e>
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	891a      	ldrh	r2, [r3, #8]
 8019fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fae:	8c1b      	ldrh	r3, [r3, #32]
 8019fb0:	429a      	cmp	r2, r3
 8019fb2:	d906      	bls.n	8019fc2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019fb4:	687a      	ldr	r2, [r7, #4]
 8019fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019fb8:	68f8      	ldr	r0, [r7, #12]
 8019fba:	f000 fe77 	bl	801acac <ip4_frag>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	e006      	b.n	8019fd0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc4:	695b      	ldr	r3, [r3, #20]
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	68f9      	ldr	r1, [r7, #12]
 8019fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019fcc:	4798      	blx	r3
 8019fce:	4603      	mov	r3, r0
}
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	3720      	adds	r7, #32
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bd80      	pop	{r7, pc}
 8019fd8:	08028000 	.word	0x08028000
 8019fdc:	08028034 	.word	0x08028034
 8019fe0:	08028040 	.word	0x08028040
 8019fe4:	08028068 	.word	0x08028068
 8019fe8:	2000503e 	.word	0x2000503e
 8019fec:	08029188 	.word	0x08029188

08019ff0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019ff0:	b480      	push	{r7}
 8019ff2:	b085      	sub	sp, #20
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a004:	d002      	beq.n	801a00c <ip4_addr_isbroadcast_u32+0x1c>
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d101      	bne.n	801a010 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a00c:	2301      	movs	r3, #1
 801a00e:	e02a      	b.n	801a066 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a010:	683b      	ldr	r3, [r7, #0]
 801a012:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801a016:	f003 0302 	and.w	r3, r3, #2
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d101      	bne.n	801a022 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a01e:	2300      	movs	r3, #0
 801a020:	e021      	b.n	801a066 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a022:	683b      	ldr	r3, [r7, #0]
 801a024:	3304      	adds	r3, #4
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	687a      	ldr	r2, [r7, #4]
 801a02a:	429a      	cmp	r2, r3
 801a02c:	d101      	bne.n	801a032 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a02e:	2300      	movs	r3, #0
 801a030:	e019      	b.n	801a066 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a032:	68fa      	ldr	r2, [r7, #12]
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	3304      	adds	r3, #4
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	405a      	eors	r2, r3
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	3308      	adds	r3, #8
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	4013      	ands	r3, r2
 801a044:	2b00      	cmp	r3, #0
 801a046:	d10d      	bne.n	801a064 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	3308      	adds	r3, #8
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	43da      	mvns	r2, r3
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	3308      	adds	r3, #8
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a05c:	429a      	cmp	r2, r3
 801a05e:	d101      	bne.n	801a064 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a060:	2301      	movs	r3, #1
 801a062:	e000      	b.n	801a066 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a064:	2300      	movs	r3, #0
  }
}
 801a066:	4618      	mov	r0, r3
 801a068:	3714      	adds	r7, #20
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr
	...

0801a074 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b08a      	sub	sp, #40	; 0x28
 801a078:	af00      	add	r7, sp, #0
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801a07e:	f107 030c 	add.w	r3, r7, #12
 801a082:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801a08c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a090:	3301      	adds	r3, #1
 801a092:	4a89      	ldr	r2, [pc, #548]	; (801a2b8 <ip4addr_aton+0x244>)
 801a094:	4413      	add	r3, r2
 801a096:	781b      	ldrb	r3, [r3, #0]
 801a098:	f003 0304 	and.w	r3, r3, #4
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d101      	bne.n	801a0a4 <ip4addr_aton+0x30>
      return 0;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	e105      	b.n	801a2b0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801a0a8:	230a      	movs	r3, #10
 801a0aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801a0ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a0b2:	2b30      	cmp	r3, #48	; 0x30
 801a0b4:	d11c      	bne.n	801a0f0 <ip4addr_aton+0x7c>
      c = *++cp;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	3301      	adds	r3, #1
 801a0ba:	607b      	str	r3, [r7, #4]
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	781b      	ldrb	r3, [r3, #0]
 801a0c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801a0c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a0c8:	2b78      	cmp	r3, #120	; 0x78
 801a0ca:	d003      	beq.n	801a0d4 <ip4addr_aton+0x60>
 801a0cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a0d0:	2b58      	cmp	r3, #88	; 0x58
 801a0d2:	d10a      	bne.n	801a0ea <ip4addr_aton+0x76>
        base = 16;
 801a0d4:	2310      	movs	r3, #16
 801a0d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	3301      	adds	r3, #1
 801a0de:	607b      	str	r3, [r7, #4]
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	781b      	ldrb	r3, [r3, #0]
 801a0e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a0e8:	e002      	b.n	801a0f0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801a0ea:	2308      	movs	r3, #8
 801a0ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801a0f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	4a70      	ldr	r2, [pc, #448]	; (801a2b8 <ip4addr_aton+0x244>)
 801a0f8:	4413      	add	r3, r2
 801a0fa:	781b      	ldrb	r3, [r3, #0]
 801a0fc:	f003 0304 	and.w	r3, r3, #4
 801a100:	2b00      	cmp	r3, #0
 801a102:	d011      	beq.n	801a128 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801a104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a10a:	fb02 f203 	mul.w	r2, r2, r3
 801a10e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a112:	4413      	add	r3, r2
 801a114:	3b30      	subs	r3, #48	; 0x30
 801a116:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	3301      	adds	r3, #1
 801a11c:	607b      	str	r3, [r7, #4]
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	781b      	ldrb	r3, [r3, #0]
 801a122:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a126:	e7e3      	b.n	801a0f0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801a128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a12c:	2b10      	cmp	r3, #16
 801a12e:	d127      	bne.n	801a180 <ip4addr_aton+0x10c>
 801a130:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a134:	3301      	adds	r3, #1
 801a136:	4a60      	ldr	r2, [pc, #384]	; (801a2b8 <ip4addr_aton+0x244>)
 801a138:	4413      	add	r3, r2
 801a13a:	781b      	ldrb	r3, [r3, #0]
 801a13c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a140:	2b00      	cmp	r3, #0
 801a142:	d01d      	beq.n	801a180 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a146:	011b      	lsls	r3, r3, #4
 801a148:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a14c:	f102 010a 	add.w	r1, r2, #10
 801a150:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a154:	3201      	adds	r2, #1
 801a156:	4858      	ldr	r0, [pc, #352]	; (801a2b8 <ip4addr_aton+0x244>)
 801a158:	4402      	add	r2, r0
 801a15a:	7812      	ldrb	r2, [r2, #0]
 801a15c:	f002 0203 	and.w	r2, r2, #3
 801a160:	2a02      	cmp	r2, #2
 801a162:	d101      	bne.n	801a168 <ip4addr_aton+0xf4>
 801a164:	2261      	movs	r2, #97	; 0x61
 801a166:	e000      	b.n	801a16a <ip4addr_aton+0xf6>
 801a168:	2241      	movs	r2, #65	; 0x41
 801a16a:	1a8a      	subs	r2, r1, r2
 801a16c:	4313      	orrs	r3, r2
 801a16e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	3301      	adds	r3, #1
 801a174:	607b      	str	r3, [r7, #4]
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	781b      	ldrb	r3, [r3, #0]
 801a17a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801a17e:	e7b7      	b.n	801a0f0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a180:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a184:	2b2e      	cmp	r3, #46	; 0x2e
 801a186:	d114      	bne.n	801a1b2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a188:	f107 030c 	add.w	r3, r7, #12
 801a18c:	330c      	adds	r3, #12
 801a18e:	69fa      	ldr	r2, [r7, #28]
 801a190:	429a      	cmp	r2, r3
 801a192:	d301      	bcc.n	801a198 <ip4addr_aton+0x124>
        return 0;
 801a194:	2300      	movs	r3, #0
 801a196:	e08b      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a198:	69fb      	ldr	r3, [r7, #28]
 801a19a:	1d1a      	adds	r2, r3, #4
 801a19c:	61fa      	str	r2, [r7, #28]
 801a19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1a0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	3301      	adds	r3, #1
 801a1a6:	607b      	str	r3, [r7, #4]
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	781b      	ldrb	r3, [r3, #0]
 801a1ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801a1b0:	e76c      	b.n	801a08c <ip4addr_aton+0x18>
    } else {
      break;
 801a1b2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a1b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d00b      	beq.n	801a1d4 <ip4addr_aton+0x160>
 801a1bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a1c0:	3301      	adds	r3, #1
 801a1c2:	4a3d      	ldr	r2, [pc, #244]	; (801a2b8 <ip4addr_aton+0x244>)
 801a1c4:	4413      	add	r3, r2
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	f003 0308 	and.w	r3, r3, #8
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d101      	bne.n	801a1d4 <ip4addr_aton+0x160>
    return 0;
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	e06d      	b.n	801a2b0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a1d4:	f107 030c 	add.w	r3, r7, #12
 801a1d8:	69fa      	ldr	r2, [r7, #28]
 801a1da:	1ad3      	subs	r3, r2, r3
 801a1dc:	109b      	asrs	r3, r3, #2
 801a1de:	3301      	adds	r3, #1
 801a1e0:	2b04      	cmp	r3, #4
 801a1e2:	d853      	bhi.n	801a28c <ip4addr_aton+0x218>
 801a1e4:	a201      	add	r2, pc, #4	; (adr r2, 801a1ec <ip4addr_aton+0x178>)
 801a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1ea:	bf00      	nop
 801a1ec:	0801a201 	.word	0x0801a201
 801a1f0:	0801a29b 	.word	0x0801a29b
 801a1f4:	0801a205 	.word	0x0801a205
 801a1f8:	0801a227 	.word	0x0801a227
 801a1fc:	0801a255 	.word	0x0801a255

    case 0:
      return 0;       /* initial nondigit */
 801a200:	2300      	movs	r3, #0
 801a202:	e055      	b.n	801a2b0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a20a:	d301      	bcc.n	801a210 <ip4addr_aton+0x19c>
        return 0;
 801a20c:	2300      	movs	r3, #0
 801a20e:	e04f      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2bff      	cmp	r3, #255	; 0xff
 801a214:	d901      	bls.n	801a21a <ip4addr_aton+0x1a6>
        return 0;
 801a216:	2300      	movs	r3, #0
 801a218:	e04a      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	061b      	lsls	r3, r3, #24
 801a21e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a220:	4313      	orrs	r3, r2
 801a222:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a224:	e03a      	b.n	801a29c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a22c:	d301      	bcc.n	801a232 <ip4addr_aton+0x1be>
        return 0;
 801a22e:	2300      	movs	r3, #0
 801a230:	e03e      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	2bff      	cmp	r3, #255	; 0xff
 801a236:	d802      	bhi.n	801a23e <ip4addr_aton+0x1ca>
 801a238:	693b      	ldr	r3, [r7, #16]
 801a23a:	2bff      	cmp	r3, #255	; 0xff
 801a23c:	d901      	bls.n	801a242 <ip4addr_aton+0x1ce>
        return 0;
 801a23e:	2300      	movs	r3, #0
 801a240:	e036      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	061a      	lsls	r2, r3, #24
 801a246:	693b      	ldr	r3, [r7, #16]
 801a248:	041b      	lsls	r3, r3, #16
 801a24a:	4313      	orrs	r3, r2
 801a24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a24e:	4313      	orrs	r3, r2
 801a250:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a252:	e023      	b.n	801a29c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a256:	2bff      	cmp	r3, #255	; 0xff
 801a258:	d901      	bls.n	801a25e <ip4addr_aton+0x1ea>
        return 0;
 801a25a:	2300      	movs	r3, #0
 801a25c:	e028      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	2bff      	cmp	r3, #255	; 0xff
 801a262:	d805      	bhi.n	801a270 <ip4addr_aton+0x1fc>
 801a264:	693b      	ldr	r3, [r7, #16]
 801a266:	2bff      	cmp	r3, #255	; 0xff
 801a268:	d802      	bhi.n	801a270 <ip4addr_aton+0x1fc>
 801a26a:	697b      	ldr	r3, [r7, #20]
 801a26c:	2bff      	cmp	r3, #255	; 0xff
 801a26e:	d901      	bls.n	801a274 <ip4addr_aton+0x200>
        return 0;
 801a270:	2300      	movs	r3, #0
 801a272:	e01d      	b.n	801a2b0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	061a      	lsls	r2, r3, #24
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	041b      	lsls	r3, r3, #16
 801a27c:	431a      	orrs	r2, r3
 801a27e:	697b      	ldr	r3, [r7, #20]
 801a280:	021b      	lsls	r3, r3, #8
 801a282:	4313      	orrs	r3, r2
 801a284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a286:	4313      	orrs	r3, r2
 801a288:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a28a:	e007      	b.n	801a29c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a28c:	4b0b      	ldr	r3, [pc, #44]	; (801a2bc <ip4addr_aton+0x248>)
 801a28e:	22f9      	movs	r2, #249	; 0xf9
 801a290:	490b      	ldr	r1, [pc, #44]	; (801a2c0 <ip4addr_aton+0x24c>)
 801a292:	480c      	ldr	r0, [pc, #48]	; (801a2c4 <ip4addr_aton+0x250>)
 801a294:	f001 fce2 	bl	801bc5c <printf>
      break;
 801a298:	e000      	b.n	801a29c <ip4addr_aton+0x228>
      break;
 801a29a:	bf00      	nop
  }
  if (addr) {
 801a29c:	683b      	ldr	r3, [r7, #0]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d005      	beq.n	801a2ae <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a2a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a2a4:	f7f5 fdcd 	bl	800fe42 <lwip_htonl>
 801a2a8:	4602      	mov	r2, r0
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a2ae:	2301      	movs	r3, #1
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3728      	adds	r7, #40	; 0x28
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}
 801a2b8:	080291a4 	.word	0x080291a4
 801a2bc:	08028098 	.word	0x08028098
 801a2c0:	080280d4 	.word	0x080280d4
 801a2c4:	080280e0 	.word	0x080280e0

0801a2c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a2c8:	b580      	push	{r7, lr}
 801a2ca:	b084      	sub	sp, #16
 801a2cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a2d2:	4b12      	ldr	r3, [pc, #72]	; (801a31c <ip_reass_tmr+0x54>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a2d8:	e018      	b.n	801a30c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a2da:	68fb      	ldr	r3, [r7, #12]
 801a2dc:	7fdb      	ldrb	r3, [r3, #31]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d00b      	beq.n	801a2fa <ip_reass_tmr+0x32>
      r->timer--;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	7fdb      	ldrb	r3, [r3, #31]
 801a2e6:	3b01      	subs	r3, #1
 801a2e8:	b2da      	uxtb	r2, r3
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	60fb      	str	r3, [r7, #12]
 801a2f8:	e008      	b.n	801a30c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a304:	68b9      	ldr	r1, [r7, #8]
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	f000 f80a 	bl	801a320 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1e3      	bne.n	801a2da <ip_reass_tmr+0x12>
    }
  }
}
 801a312:	bf00      	nop
 801a314:	bf00      	nop
 801a316:	3710      	adds	r7, #16
 801a318:	46bd      	mov	sp, r7
 801a31a:	bd80      	pop	{r7, pc}
 801a31c:	20005040 	.word	0x20005040

0801a320 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a320:	b580      	push	{r7, lr}
 801a322:	b088      	sub	sp, #32
 801a324:	af00      	add	r7, sp, #0
 801a326:	6078      	str	r0, [r7, #4]
 801a328:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a32a:	2300      	movs	r3, #0
 801a32c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a32e:	683a      	ldr	r2, [r7, #0]
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	429a      	cmp	r2, r3
 801a334:	d105      	bne.n	801a342 <ip_reass_free_complete_datagram+0x22>
 801a336:	4b45      	ldr	r3, [pc, #276]	; (801a44c <ip_reass_free_complete_datagram+0x12c>)
 801a338:	22ab      	movs	r2, #171	; 0xab
 801a33a:	4945      	ldr	r1, [pc, #276]	; (801a450 <ip_reass_free_complete_datagram+0x130>)
 801a33c:	4845      	ldr	r0, [pc, #276]	; (801a454 <ip_reass_free_complete_datagram+0x134>)
 801a33e:	f001 fc8d 	bl	801bc5c <printf>
  if (prev != NULL) {
 801a342:	683b      	ldr	r3, [r7, #0]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d00a      	beq.n	801a35e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a348:	683b      	ldr	r3, [r7, #0]
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	687a      	ldr	r2, [r7, #4]
 801a34e:	429a      	cmp	r2, r3
 801a350:	d005      	beq.n	801a35e <ip_reass_free_complete_datagram+0x3e>
 801a352:	4b3e      	ldr	r3, [pc, #248]	; (801a44c <ip_reass_free_complete_datagram+0x12c>)
 801a354:	22ad      	movs	r2, #173	; 0xad
 801a356:	4940      	ldr	r1, [pc, #256]	; (801a458 <ip_reass_free_complete_datagram+0x138>)
 801a358:	483e      	ldr	r0, [pc, #248]	; (801a454 <ip_reass_free_complete_datagram+0x134>)
 801a35a:	f001 fc7f 	bl	801bc5c <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	685b      	ldr	r3, [r3, #4]
 801a362:	685b      	ldr	r3, [r3, #4]
 801a364:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a366:	697b      	ldr	r3, [r7, #20]
 801a368:	889b      	ldrh	r3, [r3, #4]
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d12a      	bne.n	801a3c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	685b      	ldr	r3, [r3, #4]
 801a374:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a376:	697b      	ldr	r3, [r7, #20]
 801a378:	681a      	ldr	r2, [r3, #0]
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a37e:	69bb      	ldr	r3, [r7, #24]
 801a380:	6858      	ldr	r0, [r3, #4]
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	3308      	adds	r3, #8
 801a386:	2214      	movs	r2, #20
 801a388:	4619      	mov	r1, r3
 801a38a:	f001 f9b9 	bl	801b700 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a38e:	2101      	movs	r1, #1
 801a390:	69b8      	ldr	r0, [r7, #24]
 801a392:	f7ff fb1d 	bl	80199d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a396:	69b8      	ldr	r0, [r7, #24]
 801a398:	f7f7 f988 	bl	80116ac <pbuf_clen>
 801a39c:	4603      	mov	r3, r0
 801a39e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a3a0:	8bfa      	ldrh	r2, [r7, #30]
 801a3a2:	8a7b      	ldrh	r3, [r7, #18]
 801a3a4:	4413      	add	r3, r2
 801a3a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3aa:	db05      	blt.n	801a3b8 <ip_reass_free_complete_datagram+0x98>
 801a3ac:	4b27      	ldr	r3, [pc, #156]	; (801a44c <ip_reass_free_complete_datagram+0x12c>)
 801a3ae:	22bc      	movs	r2, #188	; 0xbc
 801a3b0:	492a      	ldr	r1, [pc, #168]	; (801a45c <ip_reass_free_complete_datagram+0x13c>)
 801a3b2:	4828      	ldr	r0, [pc, #160]	; (801a454 <ip_reass_free_complete_datagram+0x134>)
 801a3b4:	f001 fc52 	bl	801bc5c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a3b8:	8bfa      	ldrh	r2, [r7, #30]
 801a3ba:	8a7b      	ldrh	r3, [r7, #18]
 801a3bc:	4413      	add	r3, r2
 801a3be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a3c0:	69b8      	ldr	r0, [r7, #24]
 801a3c2:	f7f7 f8e5 	bl	8011590 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	685b      	ldr	r3, [r3, #4]
 801a3ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a3cc:	e01f      	b.n	801a40e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a3ce:	69bb      	ldr	r3, [r7, #24]
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a3d4:	69bb      	ldr	r3, [r7, #24]
 801a3d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a3d8:	697b      	ldr	r3, [r7, #20]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a3de:	68f8      	ldr	r0, [r7, #12]
 801a3e0:	f7f7 f964 	bl	80116ac <pbuf_clen>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a3e8:	8bfa      	ldrh	r2, [r7, #30]
 801a3ea:	8a7b      	ldrh	r3, [r7, #18]
 801a3ec:	4413      	add	r3, r2
 801a3ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3f2:	db05      	blt.n	801a400 <ip_reass_free_complete_datagram+0xe0>
 801a3f4:	4b15      	ldr	r3, [pc, #84]	; (801a44c <ip_reass_free_complete_datagram+0x12c>)
 801a3f6:	22cc      	movs	r2, #204	; 0xcc
 801a3f8:	4918      	ldr	r1, [pc, #96]	; (801a45c <ip_reass_free_complete_datagram+0x13c>)
 801a3fa:	4816      	ldr	r0, [pc, #88]	; (801a454 <ip_reass_free_complete_datagram+0x134>)
 801a3fc:	f001 fc2e 	bl	801bc5c <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a400:	8bfa      	ldrh	r2, [r7, #30]
 801a402:	8a7b      	ldrh	r3, [r7, #18]
 801a404:	4413      	add	r3, r2
 801a406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a408:	68f8      	ldr	r0, [r7, #12]
 801a40a:	f7f7 f8c1 	bl	8011590 <pbuf_free>
  while (p != NULL) {
 801a40e:	69bb      	ldr	r3, [r7, #24]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d1dc      	bne.n	801a3ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a414:	6839      	ldr	r1, [r7, #0]
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	f000 f8c2 	bl	801a5a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a41c:	4b10      	ldr	r3, [pc, #64]	; (801a460 <ip_reass_free_complete_datagram+0x140>)
 801a41e:	881b      	ldrh	r3, [r3, #0]
 801a420:	8bfa      	ldrh	r2, [r7, #30]
 801a422:	429a      	cmp	r2, r3
 801a424:	d905      	bls.n	801a432 <ip_reass_free_complete_datagram+0x112>
 801a426:	4b09      	ldr	r3, [pc, #36]	; (801a44c <ip_reass_free_complete_datagram+0x12c>)
 801a428:	22d2      	movs	r2, #210	; 0xd2
 801a42a:	490e      	ldr	r1, [pc, #56]	; (801a464 <ip_reass_free_complete_datagram+0x144>)
 801a42c:	4809      	ldr	r0, [pc, #36]	; (801a454 <ip_reass_free_complete_datagram+0x134>)
 801a42e:	f001 fc15 	bl	801bc5c <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a432:	4b0b      	ldr	r3, [pc, #44]	; (801a460 <ip_reass_free_complete_datagram+0x140>)
 801a434:	881a      	ldrh	r2, [r3, #0]
 801a436:	8bfb      	ldrh	r3, [r7, #30]
 801a438:	1ad3      	subs	r3, r2, r3
 801a43a:	b29a      	uxth	r2, r3
 801a43c:	4b08      	ldr	r3, [pc, #32]	; (801a460 <ip_reass_free_complete_datagram+0x140>)
 801a43e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a440:	8bfb      	ldrh	r3, [r7, #30]
}
 801a442:	4618      	mov	r0, r3
 801a444:	3720      	adds	r7, #32
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}
 801a44a:	bf00      	nop
 801a44c:	08028108 	.word	0x08028108
 801a450:	08028144 	.word	0x08028144
 801a454:	08028150 	.word	0x08028150
 801a458:	08028178 	.word	0x08028178
 801a45c:	0802818c 	.word	0x0802818c
 801a460:	20005044 	.word	0x20005044
 801a464:	080281ac 	.word	0x080281ac

0801a468 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b08a      	sub	sp, #40	; 0x28
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
 801a470:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a472:	2300      	movs	r3, #0
 801a474:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a476:	2300      	movs	r3, #0
 801a478:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a47a:	2300      	movs	r3, #0
 801a47c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a47e:	2300      	movs	r3, #0
 801a480:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a482:	2300      	movs	r3, #0
 801a484:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a486:	4b28      	ldr	r3, [pc, #160]	; (801a528 <ip_reass_remove_oldest_datagram+0xc0>)
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a48c:	e030      	b.n	801a4f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a490:	695a      	ldr	r2, [r3, #20]
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	68db      	ldr	r3, [r3, #12]
 801a496:	429a      	cmp	r2, r3
 801a498:	d10c      	bne.n	801a4b4 <ip_reass_remove_oldest_datagram+0x4c>
 801a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a49c:	699a      	ldr	r2, [r3, #24]
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	691b      	ldr	r3, [r3, #16]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	d106      	bne.n	801a4b4 <ip_reass_remove_oldest_datagram+0x4c>
 801a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4a8:	899a      	ldrh	r2, [r3, #12]
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	889b      	ldrh	r3, [r3, #4]
 801a4ae:	b29b      	uxth	r3, r3
 801a4b0:	429a      	cmp	r2, r3
 801a4b2:	d014      	beq.n	801a4de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a4b4:	693b      	ldr	r3, [r7, #16]
 801a4b6:	3301      	adds	r3, #1
 801a4b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a4ba:	6a3b      	ldr	r3, [r7, #32]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d104      	bne.n	801a4ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a4c4:	69fb      	ldr	r3, [r7, #28]
 801a4c6:	61bb      	str	r3, [r7, #24]
 801a4c8:	e009      	b.n	801a4de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4cc:	7fda      	ldrb	r2, [r3, #31]
 801a4ce:	6a3b      	ldr	r3, [r7, #32]
 801a4d0:	7fdb      	ldrb	r3, [r3, #31]
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	d803      	bhi.n	801a4de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a4da:	69fb      	ldr	r3, [r7, #28]
 801a4dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d001      	beq.n	801a4ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d1cb      	bne.n	801a48e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a4f6:	6a3b      	ldr	r3, [r7, #32]
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d008      	beq.n	801a50e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a4fc:	69b9      	ldr	r1, [r7, #24]
 801a4fe:	6a38      	ldr	r0, [r7, #32]
 801a500:	f7ff ff0e 	bl	801a320 <ip_reass_free_complete_datagram>
 801a504:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a506:	697a      	ldr	r2, [r7, #20]
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	4413      	add	r3, r2
 801a50c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a50e:	697a      	ldr	r2, [r7, #20]
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	429a      	cmp	r2, r3
 801a514:	da02      	bge.n	801a51c <ip_reass_remove_oldest_datagram+0xb4>
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	2b01      	cmp	r3, #1
 801a51a:	dcac      	bgt.n	801a476 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a51c:	697b      	ldr	r3, [r7, #20]
}
 801a51e:	4618      	mov	r0, r3
 801a520:	3728      	adds	r7, #40	; 0x28
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}
 801a526:	bf00      	nop
 801a528:	20005040 	.word	0x20005040

0801a52c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b084      	sub	sp, #16
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
 801a534:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a536:	2004      	movs	r0, #4
 801a538:	f7f6 f95a 	bl	80107f0 <memp_malloc>
 801a53c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	2b00      	cmp	r3, #0
 801a542:	d110      	bne.n	801a566 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a544:	6839      	ldr	r1, [r7, #0]
 801a546:	6878      	ldr	r0, [r7, #4]
 801a548:	f7ff ff8e 	bl	801a468 <ip_reass_remove_oldest_datagram>
 801a54c:	4602      	mov	r2, r0
 801a54e:	683b      	ldr	r3, [r7, #0]
 801a550:	4293      	cmp	r3, r2
 801a552:	dc03      	bgt.n	801a55c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a554:	2004      	movs	r0, #4
 801a556:	f7f6 f94b 	bl	80107f0 <memp_malloc>
 801a55a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d101      	bne.n	801a566 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a562:	2300      	movs	r3, #0
 801a564:	e016      	b.n	801a594 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a566:	2220      	movs	r2, #32
 801a568:	2100      	movs	r1, #0
 801a56a:	68f8      	ldr	r0, [r7, #12]
 801a56c:	f001 f8f0 	bl	801b750 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	220f      	movs	r2, #15
 801a574:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a576:	4b09      	ldr	r3, [pc, #36]	; (801a59c <ip_reass_enqueue_new_datagram+0x70>)
 801a578:	681a      	ldr	r2, [r3, #0]
 801a57a:	68fb      	ldr	r3, [r7, #12]
 801a57c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a57e:	4a07      	ldr	r2, [pc, #28]	; (801a59c <ip_reass_enqueue_new_datagram+0x70>)
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	3308      	adds	r3, #8
 801a588:	2214      	movs	r2, #20
 801a58a:	6879      	ldr	r1, [r7, #4]
 801a58c:	4618      	mov	r0, r3
 801a58e:	f001 f8b7 	bl	801b700 <memcpy>
  return ipr;
 801a592:	68fb      	ldr	r3, [r7, #12]
}
 801a594:	4618      	mov	r0, r3
 801a596:	3710      	adds	r7, #16
 801a598:	46bd      	mov	sp, r7
 801a59a:	bd80      	pop	{r7, pc}
 801a59c:	20005040 	.word	0x20005040

0801a5a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b082      	sub	sp, #8
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
 801a5a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a5aa:	4b10      	ldr	r3, [pc, #64]	; (801a5ec <ip_reass_dequeue_datagram+0x4c>)
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	687a      	ldr	r2, [r7, #4]
 801a5b0:	429a      	cmp	r2, r3
 801a5b2:	d104      	bne.n	801a5be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	4a0c      	ldr	r2, [pc, #48]	; (801a5ec <ip_reass_dequeue_datagram+0x4c>)
 801a5ba:	6013      	str	r3, [r2, #0]
 801a5bc:	e00d      	b.n	801a5da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d106      	bne.n	801a5d2 <ip_reass_dequeue_datagram+0x32>
 801a5c4:	4b0a      	ldr	r3, [pc, #40]	; (801a5f0 <ip_reass_dequeue_datagram+0x50>)
 801a5c6:	f240 1245 	movw	r2, #325	; 0x145
 801a5ca:	490a      	ldr	r1, [pc, #40]	; (801a5f4 <ip_reass_dequeue_datagram+0x54>)
 801a5cc:	480a      	ldr	r0, [pc, #40]	; (801a5f8 <ip_reass_dequeue_datagram+0x58>)
 801a5ce:	f001 fb45 	bl	801bc5c <printf>
    prev->next = ipr->next;
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681a      	ldr	r2, [r3, #0]
 801a5d6:	683b      	ldr	r3, [r7, #0]
 801a5d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a5da:	6879      	ldr	r1, [r7, #4]
 801a5dc:	2004      	movs	r0, #4
 801a5de:	f7f6 f959 	bl	8010894 <memp_free>
}
 801a5e2:	bf00      	nop
 801a5e4:	3708      	adds	r7, #8
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	20005040 	.word	0x20005040
 801a5f0:	08028108 	.word	0x08028108
 801a5f4:	080281d0 	.word	0x080281d0
 801a5f8:	08028150 	.word	0x08028150

0801a5fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b08c      	sub	sp, #48	; 0x30
 801a600:	af00      	add	r7, sp, #0
 801a602:	60f8      	str	r0, [r7, #12]
 801a604:	60b9      	str	r1, [r7, #8]
 801a606:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a608:	2300      	movs	r3, #0
 801a60a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a60c:	2301      	movs	r3, #1
 801a60e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a610:	68bb      	ldr	r3, [r7, #8]
 801a612:	685b      	ldr	r3, [r3, #4]
 801a614:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a616:	69fb      	ldr	r3, [r7, #28]
 801a618:	885b      	ldrh	r3, [r3, #2]
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	4618      	mov	r0, r3
 801a61e:	f7f5 fbfb 	bl	800fe18 <lwip_htons>
 801a622:	4603      	mov	r3, r0
 801a624:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a626:	69fb      	ldr	r3, [r7, #28]
 801a628:	781b      	ldrb	r3, [r3, #0]
 801a62a:	f003 030f 	and.w	r3, r3, #15
 801a62e:	b2db      	uxtb	r3, r3
 801a630:	009b      	lsls	r3, r3, #2
 801a632:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a634:	7e7b      	ldrb	r3, [r7, #25]
 801a636:	b29b      	uxth	r3, r3
 801a638:	8b7a      	ldrh	r2, [r7, #26]
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d202      	bcs.n	801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a63e:	f04f 33ff 	mov.w	r3, #4294967295
 801a642:	e135      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a644:	7e7b      	ldrb	r3, [r7, #25]
 801a646:	b29b      	uxth	r3, r3
 801a648:	8b7a      	ldrh	r2, [r7, #26]
 801a64a:	1ad3      	subs	r3, r2, r3
 801a64c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a64e:	69fb      	ldr	r3, [r7, #28]
 801a650:	88db      	ldrh	r3, [r3, #6]
 801a652:	b29b      	uxth	r3, r3
 801a654:	4618      	mov	r0, r3
 801a656:	f7f5 fbdf 	bl	800fe18 <lwip_htons>
 801a65a:	4603      	mov	r3, r0
 801a65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a660:	b29b      	uxth	r3, r3
 801a662:	00db      	lsls	r3, r3, #3
 801a664:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	685b      	ldr	r3, [r3, #4]
 801a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a66e:	2200      	movs	r2, #0
 801a670:	701a      	strb	r2, [r3, #0]
 801a672:	2200      	movs	r2, #0
 801a674:	705a      	strb	r2, [r3, #1]
 801a676:	2200      	movs	r2, #0
 801a678:	709a      	strb	r2, [r3, #2]
 801a67a:	2200      	movs	r2, #0
 801a67c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a680:	8afa      	ldrh	r2, [r7, #22]
 801a682:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a684:	8afa      	ldrh	r2, [r7, #22]
 801a686:	8b7b      	ldrh	r3, [r7, #26]
 801a688:	4413      	add	r3, r2
 801a68a:	b29a      	uxth	r2, r3
 801a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a68e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a692:	88db      	ldrh	r3, [r3, #6]
 801a694:	b29b      	uxth	r3, r3
 801a696:	8afa      	ldrh	r2, [r7, #22]
 801a698:	429a      	cmp	r2, r3
 801a69a:	d902      	bls.n	801a6a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a69c:	f04f 33ff 	mov.w	r3, #4294967295
 801a6a0:	e106      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	685b      	ldr	r3, [r3, #4]
 801a6a6:	627b      	str	r3, [r7, #36]	; 0x24
 801a6a8:	e068      	b.n	801a77c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ac:	685b      	ldr	r3, [r3, #4]
 801a6ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b2:	889b      	ldrh	r3, [r3, #4]
 801a6b4:	b29a      	uxth	r2, r3
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	889b      	ldrh	r3, [r3, #4]
 801a6ba:	b29b      	uxth	r3, r3
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d235      	bcs.n	801a72c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d020      	beq.n	801a70e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ce:	889b      	ldrh	r3, [r3, #4]
 801a6d0:	b29a      	uxth	r2, r3
 801a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6d4:	88db      	ldrh	r3, [r3, #6]
 801a6d6:	b29b      	uxth	r3, r3
 801a6d8:	429a      	cmp	r2, r3
 801a6da:	d307      	bcc.n	801a6ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6de:	88db      	ldrh	r3, [r3, #6]
 801a6e0:	b29a      	uxth	r2, r3
 801a6e2:	693b      	ldr	r3, [r7, #16]
 801a6e4:	889b      	ldrh	r3, [r3, #4]
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	429a      	cmp	r2, r3
 801a6ea:	d902      	bls.n	801a6f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f0:	e0de      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f4:	68ba      	ldr	r2, [r7, #8]
 801a6f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6fa:	88db      	ldrh	r3, [r3, #6]
 801a6fc:	b29a      	uxth	r2, r3
 801a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a700:	889b      	ldrh	r3, [r3, #4]
 801a702:	b29b      	uxth	r3, r3
 801a704:	429a      	cmp	r2, r3
 801a706:	d03d      	beq.n	801a784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a708:	2300      	movs	r3, #0
 801a70a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a70c:	e03a      	b.n	801a784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a710:	88db      	ldrh	r3, [r3, #6]
 801a712:	b29a      	uxth	r2, r3
 801a714:	693b      	ldr	r3, [r7, #16]
 801a716:	889b      	ldrh	r3, [r3, #4]
 801a718:	b29b      	uxth	r3, r3
 801a71a:	429a      	cmp	r2, r3
 801a71c:	d902      	bls.n	801a724 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a71e:	f04f 33ff 	mov.w	r3, #4294967295
 801a722:	e0c5      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	68ba      	ldr	r2, [r7, #8]
 801a728:	605a      	str	r2, [r3, #4]
      break;
 801a72a:	e02b      	b.n	801a784 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a72e:	889b      	ldrh	r3, [r3, #4]
 801a730:	b29a      	uxth	r2, r3
 801a732:	693b      	ldr	r3, [r7, #16]
 801a734:	889b      	ldrh	r3, [r3, #4]
 801a736:	b29b      	uxth	r3, r3
 801a738:	429a      	cmp	r2, r3
 801a73a:	d102      	bne.n	801a742 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a73c:	f04f 33ff 	mov.w	r3, #4294967295
 801a740:	e0b6      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a744:	889b      	ldrh	r3, [r3, #4]
 801a746:	b29a      	uxth	r2, r3
 801a748:	693b      	ldr	r3, [r7, #16]
 801a74a:	88db      	ldrh	r3, [r3, #6]
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	429a      	cmp	r2, r3
 801a750:	d202      	bcs.n	801a758 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a752:	f04f 33ff 	mov.w	r3, #4294967295
 801a756:	e0ab      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d009      	beq.n	801a772 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a760:	88db      	ldrh	r3, [r3, #6]
 801a762:	b29a      	uxth	r2, r3
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	889b      	ldrh	r3, [r3, #4]
 801a768:	b29b      	uxth	r3, r3
 801a76a:	429a      	cmp	r2, r3
 801a76c:	d001      	beq.n	801a772 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a76e:	2300      	movs	r3, #0
 801a770:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a772:	693b      	ldr	r3, [r7, #16]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a778:	693b      	ldr	r3, [r7, #16]
 801a77a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d193      	bne.n	801a6aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a782:	e000      	b.n	801a786 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a784:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d12d      	bne.n	801a7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d01c      	beq.n	801a7cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a794:	88db      	ldrh	r3, [r3, #6]
 801a796:	b29a      	uxth	r2, r3
 801a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a79a:	889b      	ldrh	r3, [r3, #4]
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	d906      	bls.n	801a7b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a7a2:	4b45      	ldr	r3, [pc, #276]	; (801a8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a7a8:	4944      	ldr	r1, [pc, #272]	; (801a8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a7aa:	4845      	ldr	r0, [pc, #276]	; (801a8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7ac:	f001 fa56 	bl	801bc5c <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b2:	68ba      	ldr	r2, [r7, #8]
 801a7b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b8:	88db      	ldrh	r3, [r3, #6]
 801a7ba:	b29a      	uxth	r2, r3
 801a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7be:	889b      	ldrh	r3, [r3, #4]
 801a7c0:	b29b      	uxth	r3, r3
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	d010      	beq.n	801a7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	623b      	str	r3, [r7, #32]
 801a7ca:	e00d      	b.n	801a7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	685b      	ldr	r3, [r3, #4]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d006      	beq.n	801a7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a7d4:	4b38      	ldr	r3, [pc, #224]	; (801a8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a7da:	493a      	ldr	r1, [pc, #232]	; (801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a7dc:	4838      	ldr	r0, [pc, #224]	; (801a8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7de:	f001 fa3d 	bl	801bc5c <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	68ba      	ldr	r2, [r7, #8]
 801a7e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d105      	bne.n	801a7fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	7f9b      	ldrb	r3, [r3, #30]
 801a7f2:	f003 0301 	and.w	r3, r3, #1
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d059      	beq.n	801a8ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a7fa:	6a3b      	ldr	r3, [r7, #32]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d04f      	beq.n	801a8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	685b      	ldr	r3, [r3, #4]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d006      	beq.n	801a816 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	685b      	ldr	r3, [r3, #4]
 801a80c:	685b      	ldr	r3, [r3, #4]
 801a80e:	889b      	ldrh	r3, [r3, #4]
 801a810:	b29b      	uxth	r3, r3
 801a812:	2b00      	cmp	r3, #0
 801a814:	d002      	beq.n	801a81c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a816:	2300      	movs	r3, #0
 801a818:	623b      	str	r3, [r7, #32]
 801a81a:	e041      	b.n	801a8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a81e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a826:	e012      	b.n	801a84e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a82a:	685b      	ldr	r3, [r3, #4]
 801a82c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a830:	88db      	ldrh	r3, [r3, #6]
 801a832:	b29a      	uxth	r2, r3
 801a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a836:	889b      	ldrh	r3, [r3, #4]
 801a838:	b29b      	uxth	r3, r3
 801a83a:	429a      	cmp	r2, r3
 801a83c:	d002      	beq.n	801a844 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a83e:	2300      	movs	r3, #0
 801a840:	623b      	str	r3, [r7, #32]
            break;
 801a842:	e007      	b.n	801a854 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a846:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a850:	2b00      	cmp	r3, #0
 801a852:	d1e9      	bne.n	801a828 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a854:	6a3b      	ldr	r3, [r7, #32]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d022      	beq.n	801a8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d106      	bne.n	801a870 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a862:	4b15      	ldr	r3, [pc, #84]	; (801a8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a864:	f240 12df 	movw	r2, #479	; 0x1df
 801a868:	4917      	ldr	r1, [pc, #92]	; (801a8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a86a:	4815      	ldr	r0, [pc, #84]	; (801a8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a86c:	f001 f9f6 	bl	801bc5c <printf>
          LWIP_ASSERT("sanity check",
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	685b      	ldr	r3, [r3, #4]
 801a874:	685b      	ldr	r3, [r3, #4]
 801a876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a878:	429a      	cmp	r2, r3
 801a87a:	d106      	bne.n	801a88a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a87c:	4b0e      	ldr	r3, [pc, #56]	; (801a8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a87e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a882:	4911      	ldr	r1, [pc, #68]	; (801a8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a884:	480e      	ldr	r0, [pc, #56]	; (801a8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a886:	f001 f9e9 	bl	801bc5c <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d006      	beq.n	801a8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a892:	4b09      	ldr	r3, [pc, #36]	; (801a8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a894:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a898:	490c      	ldr	r1, [pc, #48]	; (801a8cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a89a:	4809      	ldr	r0, [pc, #36]	; (801a8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a89c:	f001 f9de 	bl	801bc5c <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a8a0:	6a3b      	ldr	r3, [r7, #32]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	bf14      	ite	ne
 801a8a6:	2301      	movne	r3, #1
 801a8a8:	2300      	moveq	r3, #0
 801a8aa:	b2db      	uxtb	r3, r3
 801a8ac:	e000      	b.n	801a8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a8ae:	2300      	movs	r3, #0
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3730      	adds	r7, #48	; 0x30
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd80      	pop	{r7, pc}
 801a8b8:	08028108 	.word	0x08028108
 801a8bc:	080281ec 	.word	0x080281ec
 801a8c0:	08028150 	.word	0x08028150
 801a8c4:	0802820c 	.word	0x0802820c
 801a8c8:	08028244 	.word	0x08028244
 801a8cc:	08028254 	.word	0x08028254

0801a8d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b08e      	sub	sp, #56	; 0x38
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	685b      	ldr	r3, [r3, #4]
 801a8dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e0:	781b      	ldrb	r3, [r3, #0]
 801a8e2:	f003 030f 	and.w	r3, r3, #15
 801a8e6:	b2db      	uxtb	r3, r3
 801a8e8:	009b      	lsls	r3, r3, #2
 801a8ea:	b2db      	uxtb	r3, r3
 801a8ec:	2b14      	cmp	r3, #20
 801a8ee:	f040 8167 	bne.w	801abc0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f4:	88db      	ldrh	r3, [r3, #6]
 801a8f6:	b29b      	uxth	r3, r3
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7f5 fa8d 	bl	800fe18 <lwip_htons>
 801a8fe:	4603      	mov	r3, r0
 801a900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a904:	b29b      	uxth	r3, r3
 801a906:	00db      	lsls	r3, r3, #3
 801a908:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a90c:	885b      	ldrh	r3, [r3, #2]
 801a90e:	b29b      	uxth	r3, r3
 801a910:	4618      	mov	r0, r3
 801a912:	f7f5 fa81 	bl	800fe18 <lwip_htons>
 801a916:	4603      	mov	r3, r0
 801a918:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	f003 030f 	and.w	r3, r3, #15
 801a922:	b2db      	uxtb	r3, r3
 801a924:	009b      	lsls	r3, r3, #2
 801a926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a92e:	b29b      	uxth	r3, r3
 801a930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a932:	429a      	cmp	r2, r3
 801a934:	f0c0 8146 	bcc.w	801abc4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a93c:	b29b      	uxth	r3, r3
 801a93e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a940:	1ad3      	subs	r3, r2, r3
 801a942:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	f7f6 feb1 	bl	80116ac <pbuf_clen>
 801a94a:	4603      	mov	r3, r0
 801a94c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a94e:	4b9f      	ldr	r3, [pc, #636]	; (801abcc <ip4_reass+0x2fc>)
 801a950:	881b      	ldrh	r3, [r3, #0]
 801a952:	461a      	mov	r2, r3
 801a954:	8c3b      	ldrh	r3, [r7, #32]
 801a956:	4413      	add	r3, r2
 801a958:	2b0a      	cmp	r3, #10
 801a95a:	dd10      	ble.n	801a97e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a95c:	8c3b      	ldrh	r3, [r7, #32]
 801a95e:	4619      	mov	r1, r3
 801a960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a962:	f7ff fd81 	bl	801a468 <ip_reass_remove_oldest_datagram>
 801a966:	4603      	mov	r3, r0
 801a968:	2b00      	cmp	r3, #0
 801a96a:	f000 812d 	beq.w	801abc8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a96e:	4b97      	ldr	r3, [pc, #604]	; (801abcc <ip4_reass+0x2fc>)
 801a970:	881b      	ldrh	r3, [r3, #0]
 801a972:	461a      	mov	r2, r3
 801a974:	8c3b      	ldrh	r3, [r7, #32]
 801a976:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a978:	2b0a      	cmp	r3, #10
 801a97a:	f300 8125 	bgt.w	801abc8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a97e:	4b94      	ldr	r3, [pc, #592]	; (801abd0 <ip4_reass+0x300>)
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	633b      	str	r3, [r7, #48]	; 0x30
 801a984:	e015      	b.n	801a9b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a988:	695a      	ldr	r2, [r3, #20]
 801a98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a98c:	68db      	ldr	r3, [r3, #12]
 801a98e:	429a      	cmp	r2, r3
 801a990:	d10c      	bne.n	801a9ac <ip4_reass+0xdc>
 801a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a994:	699a      	ldr	r2, [r3, #24]
 801a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a998:	691b      	ldr	r3, [r3, #16]
 801a99a:	429a      	cmp	r2, r3
 801a99c:	d106      	bne.n	801a9ac <ip4_reass+0xdc>
 801a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a0:	899a      	ldrh	r2, [r3, #12]
 801a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9a4:	889b      	ldrh	r3, [r3, #4]
 801a9a6:	b29b      	uxth	r3, r3
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	d006      	beq.n	801a9ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	633b      	str	r3, [r7, #48]	; 0x30
 801a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d1e6      	bne.n	801a986 <ip4_reass+0xb6>
 801a9b8:	e000      	b.n	801a9bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a9ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d109      	bne.n	801a9d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a9c2:	8c3b      	ldrh	r3, [r7, #32]
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9c8:	f7ff fdb0 	bl	801a52c <ip_reass_enqueue_new_datagram>
 801a9cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d11c      	bne.n	801aa0e <ip4_reass+0x13e>
      goto nullreturn;
 801a9d4:	e109      	b.n	801abea <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d8:	88db      	ldrh	r3, [r3, #6]
 801a9da:	b29b      	uxth	r3, r3
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f5 fa1b 	bl	800fe18 <lwip_htons>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d110      	bne.n	801aa0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ee:	89db      	ldrh	r3, [r3, #14]
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7f5 fa11 	bl	800fe18 <lwip_htons>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d006      	beq.n	801aa0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa02:	3308      	adds	r3, #8
 801aa04:	2214      	movs	r2, #20
 801aa06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aa08:	4618      	mov	r0, r3
 801aa0a:	f000 fe79 	bl	801b700 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa10:	88db      	ldrh	r3, [r3, #6]
 801aa12:	b29b      	uxth	r3, r3
 801aa14:	f003 0320 	and.w	r3, r3, #32
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	bf0c      	ite	eq
 801aa1c:	2301      	moveq	r3, #1
 801aa1e:	2300      	movne	r3, #0
 801aa20:	b2db      	uxtb	r3, r3
 801aa22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801aa24:	69fb      	ldr	r3, [r7, #28]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d00e      	beq.n	801aa48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801aa2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801aa2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa2e:	4413      	add	r3, r2
 801aa30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801aa32:	8b7a      	ldrh	r2, [r7, #26]
 801aa34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801aa36:	429a      	cmp	r2, r3
 801aa38:	f0c0 80a0 	bcc.w	801ab7c <ip4_reass+0x2ac>
 801aa3c:	8b7b      	ldrh	r3, [r7, #26]
 801aa3e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801aa42:	4293      	cmp	r3, r2
 801aa44:	f200 809a 	bhi.w	801ab7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801aa48:	69fa      	ldr	r2, [r7, #28]
 801aa4a:	6879      	ldr	r1, [r7, #4]
 801aa4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa4e:	f7ff fdd5 	bl	801a5fc <ip_reass_chain_frag_into_datagram_and_validate>
 801aa52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa5a:	f000 8091 	beq.w	801ab80 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801aa5e:	4b5b      	ldr	r3, [pc, #364]	; (801abcc <ip4_reass+0x2fc>)
 801aa60:	881a      	ldrh	r2, [r3, #0]
 801aa62:	8c3b      	ldrh	r3, [r7, #32]
 801aa64:	4413      	add	r3, r2
 801aa66:	b29a      	uxth	r2, r3
 801aa68:	4b58      	ldr	r3, [pc, #352]	; (801abcc <ip4_reass+0x2fc>)
 801aa6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d00d      	beq.n	801aa8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801aa72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801aa74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa76:	4413      	add	r3, r2
 801aa78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa7c:	8a7a      	ldrh	r2, [r7, #18]
 801aa7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa82:	7f9b      	ldrb	r3, [r3, #30]
 801aa84:	f043 0301 	orr.w	r3, r3, #1
 801aa88:	b2da      	uxtb	r2, r3
 801aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	2b01      	cmp	r3, #1
 801aa92:	d171      	bne.n	801ab78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa96:	8b9b      	ldrh	r3, [r3, #28]
 801aa98:	3314      	adds	r3, #20
 801aa9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	685b      	ldr	r3, [r3, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaa8:	685b      	ldr	r3, [r3, #4]
 801aaaa:	685b      	ldr	r3, [r3, #4]
 801aaac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aab0:	3308      	adds	r3, #8
 801aab2:	2214      	movs	r2, #20
 801aab4:	4619      	mov	r1, r3
 801aab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aab8:	f000 fe22 	bl	801b700 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801aabc:	8a3b      	ldrh	r3, [r7, #16]
 801aabe:	4618      	mov	r0, r3
 801aac0:	f7f5 f9aa 	bl	800fe18 <lwip_htons>
 801aac4:	4603      	mov	r3, r0
 801aac6:	461a      	mov	r2, r3
 801aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aace:	2200      	movs	r2, #0
 801aad0:	719a      	strb	r2, [r3, #6]
 801aad2:	2200      	movs	r2, #0
 801aad4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aad8:	2200      	movs	r2, #0
 801aada:	729a      	strb	r2, [r3, #10]
 801aadc:	2200      	movs	r2, #0
 801aade:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801aae6:	e00d      	b.n	801ab04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801aae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aaea:	685b      	ldr	r3, [r3, #4]
 801aaec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801aaee:	2114      	movs	r1, #20
 801aaf0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801aaf2:	f7f6 fcc7 	bl	8011484 <pbuf_remove_header>
      pbuf_cat(p, r);
 801aaf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aaf8:	6878      	ldr	r0, [r7, #4]
 801aafa:	f7f6 fe17 	bl	801172c <pbuf_cat>
      r = iprh->next_pbuf;
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801ab04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d1ee      	bne.n	801aae8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ab0a:	4b31      	ldr	r3, [pc, #196]	; (801abd0 <ip4_reass+0x300>)
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab10:	429a      	cmp	r2, r3
 801ab12:	d102      	bne.n	801ab1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ab14:	2300      	movs	r3, #0
 801ab16:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab18:	e010      	b.n	801ab3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ab1a:	4b2d      	ldr	r3, [pc, #180]	; (801abd0 <ip4_reass+0x300>)
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab20:	e007      	b.n	801ab32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ab22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d006      	beq.n	801ab3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d1f4      	bne.n	801ab22 <ip4_reass+0x252>
 801ab38:	e000      	b.n	801ab3c <ip4_reass+0x26c>
          break;
 801ab3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ab3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ab3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab40:	f7ff fd2e 	bl	801a5a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	f7f6 fdb1 	bl	80116ac <pbuf_clen>
 801ab4a:	4603      	mov	r3, r0
 801ab4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ab4e:	4b1f      	ldr	r3, [pc, #124]	; (801abcc <ip4_reass+0x2fc>)
 801ab50:	881b      	ldrh	r3, [r3, #0]
 801ab52:	8c3a      	ldrh	r2, [r7, #32]
 801ab54:	429a      	cmp	r2, r3
 801ab56:	d906      	bls.n	801ab66 <ip4_reass+0x296>
 801ab58:	4b1e      	ldr	r3, [pc, #120]	; (801abd4 <ip4_reass+0x304>)
 801ab5a:	f240 229b 	movw	r2, #667	; 0x29b
 801ab5e:	491e      	ldr	r1, [pc, #120]	; (801abd8 <ip4_reass+0x308>)
 801ab60:	481e      	ldr	r0, [pc, #120]	; (801abdc <ip4_reass+0x30c>)
 801ab62:	f001 f87b 	bl	801bc5c <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ab66:	4b19      	ldr	r3, [pc, #100]	; (801abcc <ip4_reass+0x2fc>)
 801ab68:	881a      	ldrh	r2, [r3, #0]
 801ab6a:	8c3b      	ldrh	r3, [r7, #32]
 801ab6c:	1ad3      	subs	r3, r2, r3
 801ab6e:	b29a      	uxth	r2, r3
 801ab70:	4b16      	ldr	r3, [pc, #88]	; (801abcc <ip4_reass+0x2fc>)
 801ab72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	e03c      	b.n	801abf2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ab78:	2300      	movs	r3, #0
 801ab7a:	e03a      	b.n	801abf2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801ab7c:	bf00      	nop
 801ab7e:	e000      	b.n	801ab82 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801ab80:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d106      	bne.n	801ab96 <ip4_reass+0x2c6>
 801ab88:	4b12      	ldr	r3, [pc, #72]	; (801abd4 <ip4_reass+0x304>)
 801ab8a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801ab8e:	4914      	ldr	r1, [pc, #80]	; (801abe0 <ip4_reass+0x310>)
 801ab90:	4812      	ldr	r0, [pc, #72]	; (801abdc <ip4_reass+0x30c>)
 801ab92:	f001 f863 	bl	801bc5c <printf>
  if (ipr->p == NULL) {
 801ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab98:	685b      	ldr	r3, [r3, #4]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d124      	bne.n	801abe8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ab9e:	4b0c      	ldr	r3, [pc, #48]	; (801abd0 <ip4_reass+0x300>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d006      	beq.n	801abb6 <ip4_reass+0x2e6>
 801aba8:	4b0a      	ldr	r3, [pc, #40]	; (801abd4 <ip4_reass+0x304>)
 801abaa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801abae:	490d      	ldr	r1, [pc, #52]	; (801abe4 <ip4_reass+0x314>)
 801abb0:	480a      	ldr	r0, [pc, #40]	; (801abdc <ip4_reass+0x30c>)
 801abb2:	f001 f853 	bl	801bc5c <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801abb6:	2100      	movs	r1, #0
 801abb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801abba:	f7ff fcf1 	bl	801a5a0 <ip_reass_dequeue_datagram>
 801abbe:	e014      	b.n	801abea <ip4_reass+0x31a>
    goto nullreturn;
 801abc0:	bf00      	nop
 801abc2:	e012      	b.n	801abea <ip4_reass+0x31a>
    goto nullreturn;
 801abc4:	bf00      	nop
 801abc6:	e010      	b.n	801abea <ip4_reass+0x31a>
      goto nullreturn;
 801abc8:	bf00      	nop
 801abca:	e00e      	b.n	801abea <ip4_reass+0x31a>
 801abcc:	20005044 	.word	0x20005044
 801abd0:	20005040 	.word	0x20005040
 801abd4:	08028108 	.word	0x08028108
 801abd8:	08028278 	.word	0x08028278
 801abdc:	08028150 	.word	0x08028150
 801abe0:	08028294 	.word	0x08028294
 801abe4:	080282a0 	.word	0x080282a0
  }

nullreturn:
 801abe8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801abea:	6878      	ldr	r0, [r7, #4]
 801abec:	f7f6 fcd0 	bl	8011590 <pbuf_free>
  return NULL;
 801abf0:	2300      	movs	r3, #0
}
 801abf2:	4618      	mov	r0, r3
 801abf4:	3738      	adds	r7, #56	; 0x38
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}
 801abfa:	bf00      	nop

0801abfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ac00:	2005      	movs	r0, #5
 801ac02:	f7f5 fdf5 	bl	80107f0 <memp_malloc>
 801ac06:	4603      	mov	r3, r0
}
 801ac08:	4618      	mov	r0, r3
 801ac0a:	bd80      	pop	{r7, pc}

0801ac0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b082      	sub	sp, #8
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d106      	bne.n	801ac28 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ac1a:	4b07      	ldr	r3, [pc, #28]	; (801ac38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ac1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ac20:	4906      	ldr	r1, [pc, #24]	; (801ac3c <ip_frag_free_pbuf_custom_ref+0x30>)
 801ac22:	4807      	ldr	r0, [pc, #28]	; (801ac40 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ac24:	f001 f81a 	bl	801bc5c <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ac28:	6879      	ldr	r1, [r7, #4]
 801ac2a:	2005      	movs	r0, #5
 801ac2c:	f7f5 fe32 	bl	8010894 <memp_free>
}
 801ac30:	bf00      	nop
 801ac32:	3708      	adds	r7, #8
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bd80      	pop	{r7, pc}
 801ac38:	08028108 	.word	0x08028108
 801ac3c:	080282c0 	.word	0x080282c0
 801ac40:	08028150 	.word	0x08028150

0801ac44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b084      	sub	sp, #16
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d106      	bne.n	801ac64 <ipfrag_free_pbuf_custom+0x20>
 801ac56:	4b11      	ldr	r3, [pc, #68]	; (801ac9c <ipfrag_free_pbuf_custom+0x58>)
 801ac58:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ac5c:	4910      	ldr	r1, [pc, #64]	; (801aca0 <ipfrag_free_pbuf_custom+0x5c>)
 801ac5e:	4811      	ldr	r0, [pc, #68]	; (801aca4 <ipfrag_free_pbuf_custom+0x60>)
 801ac60:	f000 fffc 	bl	801bc5c <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ac64:	68fa      	ldr	r2, [r7, #12]
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	d006      	beq.n	801ac7a <ipfrag_free_pbuf_custom+0x36>
 801ac6c:	4b0b      	ldr	r3, [pc, #44]	; (801ac9c <ipfrag_free_pbuf_custom+0x58>)
 801ac6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ac72:	490d      	ldr	r1, [pc, #52]	; (801aca8 <ipfrag_free_pbuf_custom+0x64>)
 801ac74:	480b      	ldr	r0, [pc, #44]	; (801aca4 <ipfrag_free_pbuf_custom+0x60>)
 801ac76:	f000 fff1 	bl	801bc5c <printf>
  if (pcr->original != NULL) {
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	695b      	ldr	r3, [r3, #20]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d004      	beq.n	801ac8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	695b      	ldr	r3, [r3, #20]
 801ac86:	4618      	mov	r0, r3
 801ac88:	f7f6 fc82 	bl	8011590 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ac8c:	68f8      	ldr	r0, [r7, #12]
 801ac8e:	f7ff ffbd 	bl	801ac0c <ip_frag_free_pbuf_custom_ref>
}
 801ac92:	bf00      	nop
 801ac94:	3710      	adds	r7, #16
 801ac96:	46bd      	mov	sp, r7
 801ac98:	bd80      	pop	{r7, pc}
 801ac9a:	bf00      	nop
 801ac9c:	08028108 	.word	0x08028108
 801aca0:	080282cc 	.word	0x080282cc
 801aca4:	08028150 	.word	0x08028150
 801aca8:	080282d8 	.word	0x080282d8

0801acac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b094      	sub	sp, #80	; 0x50
 801acb0:	af02      	add	r7, sp, #8
 801acb2:	60f8      	str	r0, [r7, #12]
 801acb4:	60b9      	str	r1, [r7, #8]
 801acb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801acb8:	2300      	movs	r3, #0
 801acba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801acbe:	68bb      	ldr	r3, [r7, #8]
 801acc0:	8c1b      	ldrh	r3, [r3, #32]
 801acc2:	3b14      	subs	r3, #20
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	da00      	bge.n	801acca <ip4_frag+0x1e>
 801acc8:	3307      	adds	r3, #7
 801acca:	10db      	asrs	r3, r3, #3
 801accc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801acce:	2314      	movs	r3, #20
 801acd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	685b      	ldr	r3, [r3, #4]
 801acd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801acda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801acdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801acde:	781b      	ldrb	r3, [r3, #0]
 801ace0:	f003 030f 	and.w	r3, r3, #15
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	009b      	lsls	r3, r3, #2
 801ace8:	b2db      	uxtb	r3, r3
 801acea:	2b14      	cmp	r3, #20
 801acec:	d002      	beq.n	801acf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801acee:	f06f 0305 	mvn.w	r3, #5
 801acf2:	e110      	b.n	801af16 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	895b      	ldrh	r3, [r3, #10]
 801acf8:	2b13      	cmp	r3, #19
 801acfa:	d809      	bhi.n	801ad10 <ip4_frag+0x64>
 801acfc:	4b88      	ldr	r3, [pc, #544]	; (801af20 <ip4_frag+0x274>)
 801acfe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ad02:	4988      	ldr	r1, [pc, #544]	; (801af24 <ip4_frag+0x278>)
 801ad04:	4888      	ldr	r0, [pc, #544]	; (801af28 <ip4_frag+0x27c>)
 801ad06:	f000 ffa9 	bl	801bc5c <printf>
 801ad0a:	f06f 0305 	mvn.w	r3, #5
 801ad0e:	e102      	b.n	801af16 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ad10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad12:	88db      	ldrh	r3, [r3, #6]
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	4618      	mov	r0, r3
 801ad18:	f7f5 f87e 	bl	800fe18 <lwip_htons>
 801ad1c:	4603      	mov	r3, r0
 801ad1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ad20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ad22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ad2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ad2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ad30:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	891b      	ldrh	r3, [r3, #8]
 801ad36:	3b14      	subs	r3, #20
 801ad38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ad3c:	e0e1      	b.n	801af02 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ad3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad40:	00db      	lsls	r3, r3, #3
 801ad42:	b29b      	uxth	r3, r3
 801ad44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ad48:	4293      	cmp	r3, r2
 801ad4a:	bf28      	it	cs
 801ad4c:	4613      	movcs	r3, r2
 801ad4e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ad50:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad54:	2114      	movs	r1, #20
 801ad56:	200e      	movs	r0, #14
 801ad58:	f7f6 f936 	bl	8010fc8 <pbuf_alloc>
 801ad5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	f000 80d5 	beq.w	801af10 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ad66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad68:	895b      	ldrh	r3, [r3, #10]
 801ad6a:	2b13      	cmp	r3, #19
 801ad6c:	d806      	bhi.n	801ad7c <ip4_frag+0xd0>
 801ad6e:	4b6c      	ldr	r3, [pc, #432]	; (801af20 <ip4_frag+0x274>)
 801ad70:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ad74:	496d      	ldr	r1, [pc, #436]	; (801af2c <ip4_frag+0x280>)
 801ad76:	486c      	ldr	r0, [pc, #432]	; (801af28 <ip4_frag+0x27c>)
 801ad78:	f000 ff70 	bl	801bc5c <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad7e:	685b      	ldr	r3, [r3, #4]
 801ad80:	2214      	movs	r2, #20
 801ad82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ad84:	4618      	mov	r0, r3
 801ad86:	f000 fcbb 	bl	801b700 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8c:	685b      	ldr	r3, [r3, #4]
 801ad8e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ad90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ad92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ad96:	e064      	b.n	801ae62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	895a      	ldrh	r2, [r3, #10]
 801ad9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ad9e:	1ad3      	subs	r3, r2, r3
 801ada0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	895b      	ldrh	r3, [r3, #10]
 801ada6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ada8:	429a      	cmp	r2, r3
 801adaa:	d906      	bls.n	801adba <ip4_frag+0x10e>
 801adac:	4b5c      	ldr	r3, [pc, #368]	; (801af20 <ip4_frag+0x274>)
 801adae:	f240 322d 	movw	r2, #813	; 0x32d
 801adb2:	495f      	ldr	r1, [pc, #380]	; (801af30 <ip4_frag+0x284>)
 801adb4:	485c      	ldr	r0, [pc, #368]	; (801af28 <ip4_frag+0x27c>)
 801adb6:	f000 ff51 	bl	801bc5c <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801adba:	8bfa      	ldrh	r2, [r7, #30]
 801adbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801adc0:	4293      	cmp	r3, r2
 801adc2:	bf28      	it	cs
 801adc4:	4613      	movcs	r3, r2
 801adc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801adca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801adce:	2b00      	cmp	r3, #0
 801add0:	d105      	bne.n	801adde <ip4_frag+0x132>
        poff = 0;
 801add2:	2300      	movs	r3, #0
 801add4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	60fb      	str	r3, [r7, #12]
        continue;
 801addc:	e041      	b.n	801ae62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801adde:	f7ff ff0d 	bl	801abfc <ip_frag_alloc_pbuf_custom_ref>
 801ade2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ade4:	69bb      	ldr	r3, [r7, #24]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d103      	bne.n	801adf2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801adea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801adec:	f7f6 fbd0 	bl	8011590 <pbuf_free>
        goto memerr;
 801adf0:	e08f      	b.n	801af12 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801adf2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801adf8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801adfa:	4413      	add	r3, r2
 801adfc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ae00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ae04:	9201      	str	r2, [sp, #4]
 801ae06:	9300      	str	r3, [sp, #0]
 801ae08:	4603      	mov	r3, r0
 801ae0a:	2241      	movs	r2, #65	; 0x41
 801ae0c:	2000      	movs	r0, #0
 801ae0e:	f7f6 fa05 	bl	801121c <pbuf_alloced_custom>
 801ae12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ae14:	697b      	ldr	r3, [r7, #20]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d106      	bne.n	801ae28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ae1a:	69b8      	ldr	r0, [r7, #24]
 801ae1c:	f7ff fef6 	bl	801ac0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ae20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae22:	f7f6 fbb5 	bl	8011590 <pbuf_free>
        goto memerr;
 801ae26:	e074      	b.n	801af12 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ae28:	68f8      	ldr	r0, [r7, #12]
 801ae2a:	f7f6 fc57 	bl	80116dc <pbuf_ref>
      pcr->original = p;
 801ae2e:	69bb      	ldr	r3, [r7, #24]
 801ae30:	68fa      	ldr	r2, [r7, #12]
 801ae32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ae34:	69bb      	ldr	r3, [r7, #24]
 801ae36:	4a3f      	ldr	r2, [pc, #252]	; (801af34 <ip4_frag+0x288>)
 801ae38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ae3a:	6979      	ldr	r1, [r7, #20]
 801ae3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae3e:	f7f6 fc75 	bl	801172c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ae42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ae46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ae4a:	1ad3      	subs	r3, r2, r3
 801ae4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ae50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d004      	beq.n	801ae62 <ip4_frag+0x1b6>
        poff = 0;
 801ae58:	2300      	movs	r3, #0
 801ae5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ae62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d196      	bne.n	801ad98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ae6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ae6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ae70:	4413      	add	r3, r2
 801ae72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ae74:	68bb      	ldr	r3, [r7, #8]
 801ae76:	8c1b      	ldrh	r3, [r3, #32]
 801ae78:	f1a3 0213 	sub.w	r2, r3, #19
 801ae7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae80:	429a      	cmp	r2, r3
 801ae82:	bfcc      	ite	gt
 801ae84:	2301      	movgt	r3, #1
 801ae86:	2300      	movle	r3, #0
 801ae88:	b2db      	uxtb	r3, r3
 801ae8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ae8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ae90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ae96:	6a3b      	ldr	r3, [r7, #32]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d002      	beq.n	801aea2 <ip4_frag+0x1f6>
 801ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d003      	beq.n	801aeaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801aea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801aea8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801aeaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7f4 ffb3 	bl	800fe18 <lwip_htons>
 801aeb2:	4603      	mov	r3, r0
 801aeb4:	461a      	mov	r2, r3
 801aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801aeba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aebc:	3314      	adds	r3, #20
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	4618      	mov	r0, r3
 801aec2:	f7f4 ffa9 	bl	800fe18 <lwip_htons>
 801aec6:	4603      	mov	r3, r0
 801aec8:	461a      	mov	r2, r3
 801aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aecc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aed0:	2200      	movs	r2, #0
 801aed2:	729a      	strb	r2, [r3, #10]
 801aed4:	2200      	movs	r2, #0
 801aed6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801aed8:	68bb      	ldr	r3, [r7, #8]
 801aeda:	695b      	ldr	r3, [r3, #20]
 801aedc:	687a      	ldr	r2, [r7, #4]
 801aede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801aee0:	68b8      	ldr	r0, [r7, #8]
 801aee2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801aee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aee6:	f7f6 fb53 	bl	8011590 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801aeea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aeee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aef0:	1ad3      	subs	r3, r2, r3
 801aef2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801aef6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801aefa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801aefc:	4413      	add	r3, r2
 801aefe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801af02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af06:	2b00      	cmp	r3, #0
 801af08:	f47f af19 	bne.w	801ad3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801af0c:	2300      	movs	r3, #0
 801af0e:	e002      	b.n	801af16 <ip4_frag+0x26a>
      goto memerr;
 801af10:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801af12:	f04f 33ff 	mov.w	r3, #4294967295
}
 801af16:	4618      	mov	r0, r3
 801af18:	3748      	adds	r7, #72	; 0x48
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	08028108 	.word	0x08028108
 801af24:	080282e4 	.word	0x080282e4
 801af28:	08028150 	.word	0x08028150
 801af2c:	08028300 	.word	0x08028300
 801af30:	08028320 	.word	0x08028320
 801af34:	0801ac45 	.word	0x0801ac45

0801af38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b086      	sub	sp, #24
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
 801af40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801af42:	230e      	movs	r3, #14
 801af44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	895b      	ldrh	r3, [r3, #10]
 801af4a:	2b0e      	cmp	r3, #14
 801af4c:	d96e      	bls.n	801b02c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	7bdb      	ldrb	r3, [r3, #15]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d106      	bne.n	801af64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801af5c:	3301      	adds	r3, #1
 801af5e:	b2da      	uxtb	r2, r3
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	685b      	ldr	r3, [r3, #4]
 801af68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801af6a:	693b      	ldr	r3, [r7, #16]
 801af6c:	7b1a      	ldrb	r2, [r3, #12]
 801af6e:	7b5b      	ldrb	r3, [r3, #13]
 801af70:	021b      	lsls	r3, r3, #8
 801af72:	4313      	orrs	r3, r2
 801af74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801af76:	693b      	ldr	r3, [r7, #16]
 801af78:	781b      	ldrb	r3, [r3, #0]
 801af7a:	f003 0301 	and.w	r3, r3, #1
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d023      	beq.n	801afca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801af82:	693b      	ldr	r3, [r7, #16]
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	2b01      	cmp	r3, #1
 801af88:	d10f      	bne.n	801afaa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801af8a:	693b      	ldr	r3, [r7, #16]
 801af8c:	785b      	ldrb	r3, [r3, #1]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d11b      	bne.n	801afca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801af92:	693b      	ldr	r3, [r7, #16]
 801af94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801af96:	2b5e      	cmp	r3, #94	; 0x5e
 801af98:	d117      	bne.n	801afca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	7b5b      	ldrb	r3, [r3, #13]
 801af9e:	f043 0310 	orr.w	r3, r3, #16
 801afa2:	b2da      	uxtb	r2, r3
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	735a      	strb	r2, [r3, #13]
 801afa8:	e00f      	b.n	801afca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801afaa:	693b      	ldr	r3, [r7, #16]
 801afac:	2206      	movs	r2, #6
 801afae:	4928      	ldr	r1, [pc, #160]	; (801b050 <ethernet_input+0x118>)
 801afb0:	4618      	mov	r0, r3
 801afb2:	f000 fb97 	bl	801b6e4 <memcmp>
 801afb6:	4603      	mov	r3, r0
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d106      	bne.n	801afca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	7b5b      	ldrb	r3, [r3, #13]
 801afc0:	f043 0308 	orr.w	r3, r3, #8
 801afc4:	b2da      	uxtb	r2, r3
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801afca:	89fb      	ldrh	r3, [r7, #14]
 801afcc:	2b08      	cmp	r3, #8
 801afce:	d003      	beq.n	801afd8 <ethernet_input+0xa0>
 801afd0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801afd4:	d014      	beq.n	801b000 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801afd6:	e032      	b.n	801b03e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801afd8:	683b      	ldr	r3, [r7, #0]
 801afda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801afde:	f003 0308 	and.w	r3, r3, #8
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d024      	beq.n	801b030 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801afe6:	8afb      	ldrh	r3, [r7, #22]
 801afe8:	4619      	mov	r1, r3
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f7f6 fa4a 	bl	8011484 <pbuf_remove_header>
 801aff0:	4603      	mov	r3, r0
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d11e      	bne.n	801b034 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801aff6:	6839      	ldr	r1, [r7, #0]
 801aff8:	6878      	ldr	r0, [r7, #4]
 801affa:	f7fe fdfd 	bl	8019bf8 <ip4_input>
      break;
 801affe:	e013      	b.n	801b028 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b000:	683b      	ldr	r3, [r7, #0]
 801b002:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801b006:	f003 0308 	and.w	r3, r3, #8
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d014      	beq.n	801b038 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b00e:	8afb      	ldrh	r3, [r7, #22]
 801b010:	4619      	mov	r1, r3
 801b012:	6878      	ldr	r0, [r7, #4]
 801b014:	f7f6 fa36 	bl	8011484 <pbuf_remove_header>
 801b018:	4603      	mov	r3, r0
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d10e      	bne.n	801b03c <ethernet_input+0x104>
        etharp_input(p, netif);
 801b01e:	6839      	ldr	r1, [r7, #0]
 801b020:	6878      	ldr	r0, [r7, #4]
 801b022:	f7fd ff9d 	bl	8018f60 <etharp_input>
      break;
 801b026:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b028:	2300      	movs	r3, #0
 801b02a:	e00c      	b.n	801b046 <ethernet_input+0x10e>
    goto free_and_return;
 801b02c:	bf00      	nop
 801b02e:	e006      	b.n	801b03e <ethernet_input+0x106>
        goto free_and_return;
 801b030:	bf00      	nop
 801b032:	e004      	b.n	801b03e <ethernet_input+0x106>
        goto free_and_return;
 801b034:	bf00      	nop
 801b036:	e002      	b.n	801b03e <ethernet_input+0x106>
        goto free_and_return;
 801b038:	bf00      	nop
 801b03a:	e000      	b.n	801b03e <ethernet_input+0x106>
        goto free_and_return;
 801b03c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b03e:	6878      	ldr	r0, [r7, #4]
 801b040:	f7f6 faa6 	bl	8011590 <pbuf_free>
  return ERR_OK;
 801b044:	2300      	movs	r3, #0
}
 801b046:	4618      	mov	r0, r3
 801b048:	3718      	adds	r7, #24
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd80      	pop	{r7, pc}
 801b04e:	bf00      	nop
 801b050:	0802918c 	.word	0x0802918c

0801b054 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b054:	b580      	push	{r7, lr}
 801b056:	b086      	sub	sp, #24
 801b058:	af00      	add	r7, sp, #0
 801b05a:	60f8      	str	r0, [r7, #12]
 801b05c:	60b9      	str	r1, [r7, #8]
 801b05e:	607a      	str	r2, [r7, #4]
 801b060:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b062:	8c3b      	ldrh	r3, [r7, #32]
 801b064:	4618      	mov	r0, r3
 801b066:	f7f4 fed7 	bl	800fe18 <lwip_htons>
 801b06a:	4603      	mov	r3, r0
 801b06c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b06e:	210e      	movs	r1, #14
 801b070:	68b8      	ldr	r0, [r7, #8]
 801b072:	f7f6 f9f7 	bl	8011464 <pbuf_add_header>
 801b076:	4603      	mov	r3, r0
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d125      	bne.n	801b0c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b07c:	68bb      	ldr	r3, [r7, #8]
 801b07e:	685b      	ldr	r3, [r3, #4]
 801b080:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b082:	693b      	ldr	r3, [r7, #16]
 801b084:	8afa      	ldrh	r2, [r7, #22]
 801b086:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b088:	693b      	ldr	r3, [r7, #16]
 801b08a:	2206      	movs	r2, #6
 801b08c:	6839      	ldr	r1, [r7, #0]
 801b08e:	4618      	mov	r0, r3
 801b090:	f000 fb36 	bl	801b700 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b094:	693b      	ldr	r3, [r7, #16]
 801b096:	3306      	adds	r3, #6
 801b098:	2206      	movs	r2, #6
 801b09a:	6879      	ldr	r1, [r7, #4]
 801b09c:	4618      	mov	r0, r3
 801b09e:	f000 fb2f 	bl	801b700 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b0a8:	2b06      	cmp	r3, #6
 801b0aa:	d006      	beq.n	801b0ba <ethernet_output+0x66>
 801b0ac:	4b0a      	ldr	r3, [pc, #40]	; (801b0d8 <ethernet_output+0x84>)
 801b0ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b0b2:	490a      	ldr	r1, [pc, #40]	; (801b0dc <ethernet_output+0x88>)
 801b0b4:	480a      	ldr	r0, [pc, #40]	; (801b0e0 <ethernet_output+0x8c>)
 801b0b6:	f000 fdd1 	bl	801bc5c <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	699b      	ldr	r3, [r3, #24]
 801b0be:	68b9      	ldr	r1, [r7, #8]
 801b0c0:	68f8      	ldr	r0, [r7, #12]
 801b0c2:	4798      	blx	r3
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	e002      	b.n	801b0ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b0c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b0ca:	f06f 0301 	mvn.w	r3, #1
}
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	3718      	adds	r7, #24
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
 801b0d6:	bf00      	nop
 801b0d8:	08028330 	.word	0x08028330
 801b0dc:	08028368 	.word	0x08028368
 801b0e0:	0802839c 	.word	0x0802839c

0801b0e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b086      	sub	sp, #24
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	60bb      	str	r3, [r7, #8]
 801b0f2:	2304      	movs	r3, #4
 801b0f4:	60fb      	str	r3, [r7, #12]
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	613b      	str	r3, [r7, #16]
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b0fe:	f107 0308 	add.w	r3, r7, #8
 801b102:	2100      	movs	r1, #0
 801b104:	4618      	mov	r0, r3
 801b106:	f7ef f8a0 	bl	800a24a <osMessageCreate>
 801b10a:	4602      	mov	r2, r0
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d102      	bne.n	801b11e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801b118:	f04f 33ff 	mov.w	r3, #4294967295
 801b11c:	e000      	b.n	801b120 <sys_mbox_new+0x3c>

  return ERR_OK;
 801b11e:	2300      	movs	r3, #0
}
 801b120:	4618      	mov	r0, r3
 801b122:	3718      	adds	r7, #24
 801b124:	46bd      	mov	sp, r7
 801b126:	bd80      	pop	{r7, pc}

0801b128 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b082      	sub	sp, #8
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	4618      	mov	r0, r3
 801b136:	f7ef f965 	bl	800a404 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	4618      	mov	r0, r3
 801b140:	f7ef f976 	bl	800a430 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b144:	bf00      	nop
 801b146:	3708      	adds	r7, #8
 801b148:	46bd      	mov	sp, r7
 801b14a:	bd80      	pop	{r7, pc}

0801b14c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	b084      	sub	sp, #16
 801b150:	af00      	add	r7, sp, #0
 801b152:	6078      	str	r0, [r7, #4]
 801b154:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	6839      	ldr	r1, [r7, #0]
 801b15c:	2200      	movs	r2, #0
 801b15e:	4618      	mov	r0, r3
 801b160:	f7ef f89c 	bl	800a29c <osMessagePut>
 801b164:	4603      	mov	r3, r0
 801b166:	2b00      	cmp	r3, #0
 801b168:	d102      	bne.n	801b170 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801b16a:	2300      	movs	r3, #0
 801b16c:	73fb      	strb	r3, [r7, #15]
 801b16e:	e001      	b.n	801b174 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b170:	23ff      	movs	r3, #255	; 0xff
 801b172:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b178:	4618      	mov	r0, r3
 801b17a:	3710      	adds	r7, #16
 801b17c:	46bd      	mov	sp, r7
 801b17e:	bd80      	pop	{r7, pc}

0801b180 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b08c      	sub	sp, #48	; 0x30
 801b184:	af00      	add	r7, sp, #0
 801b186:	61f8      	str	r0, [r7, #28]
 801b188:	61b9      	str	r1, [r7, #24]
 801b18a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801b18c:	f7ee fe9c 	bl	8009ec8 <osKernelSysTick>
 801b190:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b192:	697b      	ldr	r3, [r7, #20]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d017      	beq.n	801b1c8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801b198:	69fb      	ldr	r3, [r7, #28]
 801b19a:	6819      	ldr	r1, [r3, #0]
 801b19c:	f107 0320 	add.w	r3, r7, #32
 801b1a0:	697a      	ldr	r2, [r7, #20]
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f7ef f8ba 	bl	800a31c <osMessageGet>

    if(event.status == osEventMessage)
 801b1a8:	6a3b      	ldr	r3, [r7, #32]
 801b1aa:	2b10      	cmp	r3, #16
 801b1ac:	d109      	bne.n	801b1c2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b0:	461a      	mov	r2, r3
 801b1b2:	69bb      	ldr	r3, [r7, #24]
 801b1b4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b1b6:	f7ee fe87 	bl	8009ec8 <osKernelSysTick>
 801b1ba:	4602      	mov	r2, r0
 801b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1be:	1ad3      	subs	r3, r2, r3
 801b1c0:	e019      	b.n	801b1f6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b1c2:	f04f 33ff 	mov.w	r3, #4294967295
 801b1c6:	e016      	b.n	801b1f6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801b1c8:	69fb      	ldr	r3, [r7, #28]
 801b1ca:	6819      	ldr	r1, [r3, #0]
 801b1cc:	463b      	mov	r3, r7
 801b1ce:	f04f 32ff 	mov.w	r2, #4294967295
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f7ef f8a2 	bl	800a31c <osMessageGet>
 801b1d8:	f107 0320 	add.w	r3, r7, #32
 801b1dc:	463a      	mov	r2, r7
 801b1de:	ca07      	ldmia	r2, {r0, r1, r2}
 801b1e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1e6:	461a      	mov	r2, r3
 801b1e8:	69bb      	ldr	r3, [r7, #24]
 801b1ea:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b1ec:	f7ee fe6c 	bl	8009ec8 <osKernelSysTick>
 801b1f0:	4602      	mov	r2, r0
 801b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b1f4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	3730      	adds	r7, #48	; 0x30
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	bd80      	pop	{r7, pc}

0801b1fe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b1fe:	b580      	push	{r7, lr}
 801b200:	b086      	sub	sp, #24
 801b202:	af00      	add	r7, sp, #0
 801b204:	6078      	str	r0, [r7, #4]
 801b206:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	6819      	ldr	r1, [r3, #0]
 801b20c:	f107 030c 	add.w	r3, r7, #12
 801b210:	2200      	movs	r2, #0
 801b212:	4618      	mov	r0, r3
 801b214:	f7ef f882 	bl	800a31c <osMessageGet>

  if(event.status == osEventMessage)
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	2b10      	cmp	r3, #16
 801b21c:	d105      	bne.n	801b22a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801b21e:	693b      	ldr	r3, [r7, #16]
 801b220:	461a      	mov	r2, r3
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801b226:	2300      	movs	r3, #0
 801b228:	e001      	b.n	801b22e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b22a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b22e:	4618      	mov	r0, r3
 801b230:	3718      	adds	r7, #24
 801b232:	46bd      	mov	sp, r7
 801b234:	bd80      	pop	{r7, pc}

0801b236 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b236:	b480      	push	{r7}
 801b238:	b083      	sub	sp, #12
 801b23a:	af00      	add	r7, sp, #0
 801b23c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d101      	bne.n	801b24a <sys_mbox_valid+0x14>
    return 0;
 801b246:	2300      	movs	r3, #0
 801b248:	e000      	b.n	801b24c <sys_mbox_valid+0x16>
  else
    return 1;
 801b24a:	2301      	movs	r3, #1
}
 801b24c:	4618      	mov	r0, r3
 801b24e:	370c      	adds	r7, #12
 801b250:	46bd      	mov	sp, r7
 801b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b256:	4770      	bx	lr

0801b258 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b258:	b480      	push	{r7}
 801b25a:	b083      	sub	sp, #12
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2200      	movs	r2, #0
 801b264:	601a      	str	r2, [r3, #0]
}
 801b266:	bf00      	nop
 801b268:	370c      	adds	r7, #12
 801b26a:	46bd      	mov	sp, r7
 801b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b270:	4770      	bx	lr

0801b272 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b272:	b580      	push	{r7, lr}
 801b274:	b084      	sub	sp, #16
 801b276:	af00      	add	r7, sp, #0
 801b278:	6078      	str	r0, [r7, #4]
 801b27a:	460b      	mov	r3, r1
 801b27c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801b27e:	2300      	movs	r3, #0
 801b280:	60bb      	str	r3, [r7, #8]
 801b282:	2300      	movs	r3, #0
 801b284:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801b286:	f107 0308 	add.w	r3, r7, #8
 801b28a:	2101      	movs	r1, #1
 801b28c:	4618      	mov	r0, r3
 801b28e:	f7ee ff13 	bl	800a0b8 <osSemaphoreCreate>
 801b292:	4602      	mov	r2, r0
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d102      	bne.n	801b2a6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b2a0:	f04f 33ff 	mov.w	r3, #4294967295
 801b2a4:	e009      	b.n	801b2ba <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801b2a6:	78fb      	ldrb	r3, [r7, #3]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d105      	bne.n	801b2b8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	2100      	movs	r1, #0
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	f7ee ff32 	bl	800a11c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b2b8:	2300      	movs	r3, #0
}
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	3710      	adds	r7, #16
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	bd80      	pop	{r7, pc}

0801b2c2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b2c2:	b580      	push	{r7, lr}
 801b2c4:	b084      	sub	sp, #16
 801b2c6:	af00      	add	r7, sp, #0
 801b2c8:	6078      	str	r0, [r7, #4]
 801b2ca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801b2cc:	f7ee fdfc 	bl	8009ec8 <osKernelSysTick>
 801b2d0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b2d2:	683b      	ldr	r3, [r7, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d011      	beq.n	801b2fc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	6839      	ldr	r1, [r7, #0]
 801b2de:	4618      	mov	r0, r3
 801b2e0:	f7ee ff1c 	bl	800a11c <osSemaphoreWait>
 801b2e4:	4603      	mov	r3, r0
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d105      	bne.n	801b2f6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801b2ea:	f7ee fded 	bl	8009ec8 <osKernelSysTick>
 801b2ee:	4602      	mov	r2, r0
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	1ad3      	subs	r3, r2, r3
 801b2f4:	e012      	b.n	801b31c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b2f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b2fa:	e00f      	b.n	801b31c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801b2fc:	bf00      	nop
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	f04f 31ff 	mov.w	r1, #4294967295
 801b306:	4618      	mov	r0, r3
 801b308:	f7ee ff08 	bl	800a11c <osSemaphoreWait>
 801b30c:	4603      	mov	r3, r0
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d1f5      	bne.n	801b2fe <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801b312:	f7ee fdd9 	bl	8009ec8 <osKernelSysTick>
 801b316:	4602      	mov	r2, r0
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b31c:	4618      	mov	r0, r3
 801b31e:	3710      	adds	r7, #16
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}

0801b324 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b324:	b580      	push	{r7, lr}
 801b326:	b082      	sub	sp, #8
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	4618      	mov	r0, r3
 801b332:	f7ee ff41 	bl	800a1b8 <osSemaphoreRelease>
}
 801b336:	bf00      	nop
 801b338:	3708      	adds	r7, #8
 801b33a:	46bd      	mov	sp, r7
 801b33c:	bd80      	pop	{r7, pc}

0801b33e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b33e:	b580      	push	{r7, lr}
 801b340:	b082      	sub	sp, #8
 801b342:	af00      	add	r7, sp, #0
 801b344:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	4618      	mov	r0, r3
 801b34c:	f7ee ff6a 	bl	800a224 <osSemaphoreDelete>
}
 801b350:	bf00      	nop
 801b352:	3708      	adds	r7, #8
 801b354:	46bd      	mov	sp, r7
 801b356:	bd80      	pop	{r7, pc}

0801b358 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b358:	b480      	push	{r7}
 801b35a:	b083      	sub	sp, #12
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d101      	bne.n	801b36c <sys_sem_valid+0x14>
    return 0;
 801b368:	2300      	movs	r3, #0
 801b36a:	e000      	b.n	801b36e <sys_sem_valid+0x16>
  else
    return 1;
 801b36c:	2301      	movs	r3, #1
}
 801b36e:	4618      	mov	r0, r3
 801b370:	370c      	adds	r7, #12
 801b372:	46bd      	mov	sp, r7
 801b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b378:	4770      	bx	lr

0801b37a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b37a:	b480      	push	{r7}
 801b37c:	b083      	sub	sp, #12
 801b37e:	af00      	add	r7, sp, #0
 801b380:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	2200      	movs	r2, #0
 801b386:	601a      	str	r2, [r3, #0]
}
 801b388:	bf00      	nop
 801b38a:	370c      	adds	r7, #12
 801b38c:	46bd      	mov	sp, r7
 801b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b392:	4770      	bx	lr

0801b394 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b398:	4803      	ldr	r0, [pc, #12]	; (801b3a8 <sys_init+0x14>)
 801b39a:	f7ee fdf1 	bl	8009f80 <osMutexCreate>
 801b39e:	4603      	mov	r3, r0
 801b3a0:	4a02      	ldr	r2, [pc, #8]	; (801b3ac <sys_init+0x18>)
 801b3a2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b3a4:	bf00      	nop
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	0802919c 	.word	0x0802919c
 801b3ac:	2000be74 	.word	0x2000be74

0801b3b0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b084      	sub	sp, #16
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	60bb      	str	r3, [r7, #8]
 801b3bc:	2300      	movs	r3, #0
 801b3be:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b3c0:	f107 0308 	add.w	r3, r7, #8
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f7ee fddb 	bl	8009f80 <osMutexCreate>
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d102      	bne.n	801b3de <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b3d8:	f04f 33ff 	mov.w	r3, #4294967295
 801b3dc:	e000      	b.n	801b3e0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b3de:	2300      	movs	r3, #0
}
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	3710      	adds	r7, #16
 801b3e4:	46bd      	mov	sp, r7
 801b3e6:	bd80      	pop	{r7, pc}

0801b3e8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	b082      	sub	sp, #8
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	f04f 31ff 	mov.w	r1, #4294967295
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7ee fdd9 	bl	8009fb0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b3fe:	bf00      	nop
 801b400:	3708      	adds	r7, #8
 801b402:	46bd      	mov	sp, r7
 801b404:	bd80      	pop	{r7, pc}

0801b406 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b406:	b580      	push	{r7, lr}
 801b408:	b082      	sub	sp, #8
 801b40a:	af00      	add	r7, sp, #0
 801b40c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	4618      	mov	r0, r3
 801b414:	f7ee fe1a 	bl	800a04c <osMutexRelease>
}
 801b418:	bf00      	nop
 801b41a:	3708      	adds	r7, #8
 801b41c:	46bd      	mov	sp, r7
 801b41e:	bd80      	pop	{r7, pc}

0801b420 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b08c      	sub	sp, #48	; 0x30
 801b424:	af00      	add	r7, sp, #0
 801b426:	60f8      	str	r0, [r7, #12]
 801b428:	60b9      	str	r1, [r7, #8]
 801b42a:	607a      	str	r2, [r7, #4]
 801b42c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b42e:	f107 0314 	add.w	r3, r7, #20
 801b432:	2200      	movs	r2, #0
 801b434:	601a      	str	r2, [r3, #0]
 801b436:	605a      	str	r2, [r3, #4]
 801b438:	609a      	str	r2, [r3, #8]
 801b43a:	60da      	str	r2, [r3, #12]
 801b43c:	611a      	str	r2, [r3, #16]
 801b43e:	615a      	str	r2, [r3, #20]
 801b440:	619a      	str	r2, [r3, #24]
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	617b      	str	r3, [r7, #20]
 801b446:	68bb      	ldr	r3, [r7, #8]
 801b448:	61bb      	str	r3, [r7, #24]
 801b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b44c:	b21b      	sxth	r3, r3
 801b44e:	83bb      	strh	r3, [r7, #28]
 801b450:	683b      	ldr	r3, [r7, #0]
 801b452:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b454:	f107 0314 	add.w	r3, r7, #20
 801b458:	6879      	ldr	r1, [r7, #4]
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7ee fd44 	bl	8009ee8 <osThreadCreate>
 801b460:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b462:	4618      	mov	r0, r3
 801b464:	3730      	adds	r7, #48	; 0x30
 801b466:	46bd      	mov	sp, r7
 801b468:	bd80      	pop	{r7, pc}
	...

0801b46c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b470:	4b04      	ldr	r3, [pc, #16]	; (801b484 <sys_arch_protect+0x18>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	f04f 31ff 	mov.w	r1, #4294967295
 801b478:	4618      	mov	r0, r3
 801b47a:	f7ee fd99 	bl	8009fb0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b47e:	2301      	movs	r3, #1
}
 801b480:	4618      	mov	r0, r3
 801b482:	bd80      	pop	{r7, pc}
 801b484:	2000be74 	.word	0x2000be74

0801b488 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b082      	sub	sp, #8
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b490:	4b04      	ldr	r3, [pc, #16]	; (801b4a4 <sys_arch_unprotect+0x1c>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	4618      	mov	r0, r3
 801b496:	f7ee fdd9 	bl	800a04c <osMutexRelease>
}
 801b49a:	bf00      	nop
 801b49c:	3708      	adds	r7, #8
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	bd80      	pop	{r7, pc}
 801b4a2:	bf00      	nop
 801b4a4:	2000be74 	.word	0x2000be74

0801b4a8 <atoi>:
 801b4a8:	220a      	movs	r2, #10
 801b4aa:	2100      	movs	r1, #0
 801b4ac:	f000 bd12 	b.w	801bed4 <strtol>

0801b4b0 <__libc_init_array>:
 801b4b0:	b570      	push	{r4, r5, r6, lr}
 801b4b2:	4d0d      	ldr	r5, [pc, #52]	; (801b4e8 <__libc_init_array+0x38>)
 801b4b4:	4c0d      	ldr	r4, [pc, #52]	; (801b4ec <__libc_init_array+0x3c>)
 801b4b6:	1b64      	subs	r4, r4, r5
 801b4b8:	10a4      	asrs	r4, r4, #2
 801b4ba:	2600      	movs	r6, #0
 801b4bc:	42a6      	cmp	r6, r4
 801b4be:	d109      	bne.n	801b4d4 <__libc_init_array+0x24>
 801b4c0:	4d0b      	ldr	r5, [pc, #44]	; (801b4f0 <__libc_init_array+0x40>)
 801b4c2:	4c0c      	ldr	r4, [pc, #48]	; (801b4f4 <__libc_init_array+0x44>)
 801b4c4:	f009 fa0e 	bl	80248e4 <_init>
 801b4c8:	1b64      	subs	r4, r4, r5
 801b4ca:	10a4      	asrs	r4, r4, #2
 801b4cc:	2600      	movs	r6, #0
 801b4ce:	42a6      	cmp	r6, r4
 801b4d0:	d105      	bne.n	801b4de <__libc_init_array+0x2e>
 801b4d2:	bd70      	pop	{r4, r5, r6, pc}
 801b4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4d8:	4798      	blx	r3
 801b4da:	3601      	adds	r6, #1
 801b4dc:	e7ee      	b.n	801b4bc <__libc_init_array+0xc>
 801b4de:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4e2:	4798      	blx	r3
 801b4e4:	3601      	adds	r6, #1
 801b4e6:	e7f2      	b.n	801b4ce <__libc_init_array+0x1e>
 801b4e8:	080296d0 	.word	0x080296d0
 801b4ec:	080296d0 	.word	0x080296d0
 801b4f0:	080296d0 	.word	0x080296d0
 801b4f4:	080296d8 	.word	0x080296d8

0801b4f8 <localtime_r>:
 801b4f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b4fc:	4607      	mov	r7, r0
 801b4fe:	9101      	str	r1, [sp, #4]
 801b500:	f004 fd10 	bl	801ff24 <__gettzinfo>
 801b504:	9901      	ldr	r1, [sp, #4]
 801b506:	4680      	mov	r8, r0
 801b508:	4638      	mov	r0, r7
 801b50a:	f004 fd0f 	bl	801ff2c <gmtime_r>
 801b50e:	6943      	ldr	r3, [r0, #20]
 801b510:	079a      	lsls	r2, r3, #30
 801b512:	4604      	mov	r4, r0
 801b514:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801b518:	d105      	bne.n	801b526 <localtime_r+0x2e>
 801b51a:	2264      	movs	r2, #100	; 0x64
 801b51c:	fb96 f3f2 	sdiv	r3, r6, r2
 801b520:	fb02 6313 	mls	r3, r2, r3, r6
 801b524:	bb7b      	cbnz	r3, 801b586 <localtime_r+0x8e>
 801b526:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801b52a:	fb96 f5f3 	sdiv	r5, r6, r3
 801b52e:	fb03 6515 	mls	r5, r3, r5, r6
 801b532:	fab5 f585 	clz	r5, r5
 801b536:	096d      	lsrs	r5, r5, #5
 801b538:	4b68      	ldr	r3, [pc, #416]	; (801b6dc <localtime_r+0x1e4>)
 801b53a:	2230      	movs	r2, #48	; 0x30
 801b53c:	fb02 3505 	mla	r5, r2, r5, r3
 801b540:	f001 ff5a 	bl	801d3f8 <__tz_lock>
 801b544:	f001 ff64 	bl	801d410 <_tzset_unlocked>
 801b548:	4b65      	ldr	r3, [pc, #404]	; (801b6e0 <localtime_r+0x1e8>)
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	b353      	cbz	r3, 801b5a4 <localtime_r+0xac>
 801b54e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b552:	42b3      	cmp	r3, r6
 801b554:	d119      	bne.n	801b58a <localtime_r+0x92>
 801b556:	f8d8 1000 	ldr.w	r1, [r8]
 801b55a:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b55e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801b562:	b9d1      	cbnz	r1, 801b59a <localtime_r+0xa2>
 801b564:	4296      	cmp	r6, r2
 801b566:	eb77 0303 	sbcs.w	r3, r7, r3
 801b56a:	da23      	bge.n	801b5b4 <localtime_r+0xbc>
 801b56c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b570:	4296      	cmp	r6, r2
 801b572:	eb77 0303 	sbcs.w	r3, r7, r3
 801b576:	bfb4      	ite	lt
 801b578:	2301      	movlt	r3, #1
 801b57a:	2300      	movge	r3, #0
 801b57c:	6223      	str	r3, [r4, #32]
 801b57e:	db1b      	blt.n	801b5b8 <localtime_r+0xc0>
 801b580:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801b584:	e01a      	b.n	801b5bc <localtime_r+0xc4>
 801b586:	2501      	movs	r5, #1
 801b588:	e7d6      	b.n	801b538 <localtime_r+0x40>
 801b58a:	4630      	mov	r0, r6
 801b58c:	f001 fe8c 	bl	801d2a8 <__tzcalc_limits>
 801b590:	2800      	cmp	r0, #0
 801b592:	d1e0      	bne.n	801b556 <localtime_r+0x5e>
 801b594:	f04f 33ff 	mov.w	r3, #4294967295
 801b598:	e004      	b.n	801b5a4 <localtime_r+0xac>
 801b59a:	4296      	cmp	r6, r2
 801b59c:	eb77 0303 	sbcs.w	r3, r7, r3
 801b5a0:	da02      	bge.n	801b5a8 <localtime_r+0xb0>
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	6223      	str	r3, [r4, #32]
 801b5a6:	e7eb      	b.n	801b580 <localtime_r+0x88>
 801b5a8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b5ac:	4296      	cmp	r6, r2
 801b5ae:	eb77 0303 	sbcs.w	r3, r7, r3
 801b5b2:	daf6      	bge.n	801b5a2 <localtime_r+0xaa>
 801b5b4:	2301      	movs	r3, #1
 801b5b6:	6223      	str	r3, [r4, #32]
 801b5b8:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801b5bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b5c0:	203c      	movs	r0, #60	; 0x3c
 801b5c2:	fb91 f6f3 	sdiv	r6, r1, r3
 801b5c6:	fb03 1316 	mls	r3, r3, r6, r1
 801b5ca:	6861      	ldr	r1, [r4, #4]
 801b5cc:	fb93 f2f0 	sdiv	r2, r3, r0
 801b5d0:	fb00 3012 	mls	r0, r0, r2, r3
 801b5d4:	6823      	ldr	r3, [r4, #0]
 801b5d6:	1a89      	subs	r1, r1, r2
 801b5d8:	68a2      	ldr	r2, [r4, #8]
 801b5da:	6061      	str	r1, [r4, #4]
 801b5dc:	1a1b      	subs	r3, r3, r0
 801b5de:	1b92      	subs	r2, r2, r6
 801b5e0:	2b3b      	cmp	r3, #59	; 0x3b
 801b5e2:	6023      	str	r3, [r4, #0]
 801b5e4:	60a2      	str	r2, [r4, #8]
 801b5e6:	dd35      	ble.n	801b654 <localtime_r+0x15c>
 801b5e8:	3101      	adds	r1, #1
 801b5ea:	6061      	str	r1, [r4, #4]
 801b5ec:	3b3c      	subs	r3, #60	; 0x3c
 801b5ee:	6023      	str	r3, [r4, #0]
 801b5f0:	6863      	ldr	r3, [r4, #4]
 801b5f2:	2b3b      	cmp	r3, #59	; 0x3b
 801b5f4:	dd34      	ble.n	801b660 <localtime_r+0x168>
 801b5f6:	3201      	adds	r2, #1
 801b5f8:	60a2      	str	r2, [r4, #8]
 801b5fa:	3b3c      	subs	r3, #60	; 0x3c
 801b5fc:	6063      	str	r3, [r4, #4]
 801b5fe:	68a3      	ldr	r3, [r4, #8]
 801b600:	2b17      	cmp	r3, #23
 801b602:	dd33      	ble.n	801b66c <localtime_r+0x174>
 801b604:	69e2      	ldr	r2, [r4, #28]
 801b606:	3201      	adds	r2, #1
 801b608:	61e2      	str	r2, [r4, #28]
 801b60a:	69a2      	ldr	r2, [r4, #24]
 801b60c:	3201      	adds	r2, #1
 801b60e:	2a06      	cmp	r2, #6
 801b610:	bfc8      	it	gt
 801b612:	2200      	movgt	r2, #0
 801b614:	61a2      	str	r2, [r4, #24]
 801b616:	68e2      	ldr	r2, [r4, #12]
 801b618:	3b18      	subs	r3, #24
 801b61a:	3201      	adds	r2, #1
 801b61c:	60a3      	str	r3, [r4, #8]
 801b61e:	6923      	ldr	r3, [r4, #16]
 801b620:	60e2      	str	r2, [r4, #12]
 801b622:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801b626:	428a      	cmp	r2, r1
 801b628:	dd0e      	ble.n	801b648 <localtime_r+0x150>
 801b62a:	2b0b      	cmp	r3, #11
 801b62c:	eba2 0201 	sub.w	r2, r2, r1
 801b630:	60e2      	str	r2, [r4, #12]
 801b632:	f103 0201 	add.w	r2, r3, #1
 801b636:	bf09      	itett	eq
 801b638:	6963      	ldreq	r3, [r4, #20]
 801b63a:	6122      	strne	r2, [r4, #16]
 801b63c:	2200      	moveq	r2, #0
 801b63e:	3301      	addeq	r3, #1
 801b640:	bf02      	ittt	eq
 801b642:	6122      	streq	r2, [r4, #16]
 801b644:	6163      	streq	r3, [r4, #20]
 801b646:	61e2      	streq	r2, [r4, #28]
 801b648:	f001 fedc 	bl	801d404 <__tz_unlock>
 801b64c:	4620      	mov	r0, r4
 801b64e:	b002      	add	sp, #8
 801b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b654:	2b00      	cmp	r3, #0
 801b656:	dacb      	bge.n	801b5f0 <localtime_r+0xf8>
 801b658:	3901      	subs	r1, #1
 801b65a:	6061      	str	r1, [r4, #4]
 801b65c:	333c      	adds	r3, #60	; 0x3c
 801b65e:	e7c6      	b.n	801b5ee <localtime_r+0xf6>
 801b660:	2b00      	cmp	r3, #0
 801b662:	dacc      	bge.n	801b5fe <localtime_r+0x106>
 801b664:	3a01      	subs	r2, #1
 801b666:	60a2      	str	r2, [r4, #8]
 801b668:	333c      	adds	r3, #60	; 0x3c
 801b66a:	e7c7      	b.n	801b5fc <localtime_r+0x104>
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	daeb      	bge.n	801b648 <localtime_r+0x150>
 801b670:	69e2      	ldr	r2, [r4, #28]
 801b672:	3a01      	subs	r2, #1
 801b674:	61e2      	str	r2, [r4, #28]
 801b676:	69a2      	ldr	r2, [r4, #24]
 801b678:	3a01      	subs	r2, #1
 801b67a:	bf48      	it	mi
 801b67c:	2206      	movmi	r2, #6
 801b67e:	61a2      	str	r2, [r4, #24]
 801b680:	68e2      	ldr	r2, [r4, #12]
 801b682:	3318      	adds	r3, #24
 801b684:	3a01      	subs	r2, #1
 801b686:	60e2      	str	r2, [r4, #12]
 801b688:	60a3      	str	r3, [r4, #8]
 801b68a:	2a00      	cmp	r2, #0
 801b68c:	d1dc      	bne.n	801b648 <localtime_r+0x150>
 801b68e:	6923      	ldr	r3, [r4, #16]
 801b690:	3b01      	subs	r3, #1
 801b692:	d405      	bmi.n	801b6a0 <localtime_r+0x1a8>
 801b694:	6123      	str	r3, [r4, #16]
 801b696:	6923      	ldr	r3, [r4, #16]
 801b698:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b69c:	60e3      	str	r3, [r4, #12]
 801b69e:	e7d3      	b.n	801b648 <localtime_r+0x150>
 801b6a0:	230b      	movs	r3, #11
 801b6a2:	6123      	str	r3, [r4, #16]
 801b6a4:	6963      	ldr	r3, [r4, #20]
 801b6a6:	1e5a      	subs	r2, r3, #1
 801b6a8:	6162      	str	r2, [r4, #20]
 801b6aa:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801b6ae:	0793      	lsls	r3, r2, #30
 801b6b0:	d105      	bne.n	801b6be <localtime_r+0x1c6>
 801b6b2:	2164      	movs	r1, #100	; 0x64
 801b6b4:	fb92 f3f1 	sdiv	r3, r2, r1
 801b6b8:	fb01 2313 	mls	r3, r1, r3, r2
 801b6bc:	b963      	cbnz	r3, 801b6d8 <localtime_r+0x1e0>
 801b6be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b6c2:	fb92 f3f1 	sdiv	r3, r2, r1
 801b6c6:	fb01 2313 	mls	r3, r1, r3, r2
 801b6ca:	fab3 f383 	clz	r3, r3
 801b6ce:	095b      	lsrs	r3, r3, #5
 801b6d0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801b6d4:	61e3      	str	r3, [r4, #28]
 801b6d6:	e7de      	b.n	801b696 <localtime_r+0x19e>
 801b6d8:	2301      	movs	r3, #1
 801b6da:	e7f9      	b.n	801b6d0 <localtime_r+0x1d8>
 801b6dc:	0802930c 	.word	0x0802930c
 801b6e0:	20005060 	.word	0x20005060

0801b6e4 <memcmp>:
 801b6e4:	b530      	push	{r4, r5, lr}
 801b6e6:	3901      	subs	r1, #1
 801b6e8:	2400      	movs	r4, #0
 801b6ea:	42a2      	cmp	r2, r4
 801b6ec:	d101      	bne.n	801b6f2 <memcmp+0xe>
 801b6ee:	2000      	movs	r0, #0
 801b6f0:	e005      	b.n	801b6fe <memcmp+0x1a>
 801b6f2:	5d03      	ldrb	r3, [r0, r4]
 801b6f4:	3401      	adds	r4, #1
 801b6f6:	5d0d      	ldrb	r5, [r1, r4]
 801b6f8:	42ab      	cmp	r3, r5
 801b6fa:	d0f6      	beq.n	801b6ea <memcmp+0x6>
 801b6fc:	1b58      	subs	r0, r3, r5
 801b6fe:	bd30      	pop	{r4, r5, pc}

0801b700 <memcpy>:
 801b700:	440a      	add	r2, r1
 801b702:	4291      	cmp	r1, r2
 801b704:	f100 33ff 	add.w	r3, r0, #4294967295
 801b708:	d100      	bne.n	801b70c <memcpy+0xc>
 801b70a:	4770      	bx	lr
 801b70c:	b510      	push	{r4, lr}
 801b70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b712:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b716:	4291      	cmp	r1, r2
 801b718:	d1f9      	bne.n	801b70e <memcpy+0xe>
 801b71a:	bd10      	pop	{r4, pc}

0801b71c <memmove>:
 801b71c:	4288      	cmp	r0, r1
 801b71e:	b510      	push	{r4, lr}
 801b720:	eb01 0402 	add.w	r4, r1, r2
 801b724:	d902      	bls.n	801b72c <memmove+0x10>
 801b726:	4284      	cmp	r4, r0
 801b728:	4623      	mov	r3, r4
 801b72a:	d807      	bhi.n	801b73c <memmove+0x20>
 801b72c:	1e43      	subs	r3, r0, #1
 801b72e:	42a1      	cmp	r1, r4
 801b730:	d008      	beq.n	801b744 <memmove+0x28>
 801b732:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b736:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b73a:	e7f8      	b.n	801b72e <memmove+0x12>
 801b73c:	4402      	add	r2, r0
 801b73e:	4601      	mov	r1, r0
 801b740:	428a      	cmp	r2, r1
 801b742:	d100      	bne.n	801b746 <memmove+0x2a>
 801b744:	bd10      	pop	{r4, pc}
 801b746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b74a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b74e:	e7f7      	b.n	801b740 <memmove+0x24>

0801b750 <memset>:
 801b750:	4402      	add	r2, r0
 801b752:	4603      	mov	r3, r0
 801b754:	4293      	cmp	r3, r2
 801b756:	d100      	bne.n	801b75a <memset+0xa>
 801b758:	4770      	bx	lr
 801b75a:	f803 1b01 	strb.w	r1, [r3], #1
 801b75e:	e7f9      	b.n	801b754 <memset+0x4>

0801b760 <validate_structure>:
 801b760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b762:	6801      	ldr	r1, [r0, #0]
 801b764:	293b      	cmp	r1, #59	; 0x3b
 801b766:	4604      	mov	r4, r0
 801b768:	d911      	bls.n	801b78e <validate_structure+0x2e>
 801b76a:	223c      	movs	r2, #60	; 0x3c
 801b76c:	4668      	mov	r0, sp
 801b76e:	f003 fab1 	bl	801ecd4 <div>
 801b772:	9a01      	ldr	r2, [sp, #4]
 801b774:	6863      	ldr	r3, [r4, #4]
 801b776:	9900      	ldr	r1, [sp, #0]
 801b778:	2a00      	cmp	r2, #0
 801b77a:	440b      	add	r3, r1
 801b77c:	6063      	str	r3, [r4, #4]
 801b77e:	bfbb      	ittet	lt
 801b780:	323c      	addlt	r2, #60	; 0x3c
 801b782:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b786:	6022      	strge	r2, [r4, #0]
 801b788:	6022      	strlt	r2, [r4, #0]
 801b78a:	bfb8      	it	lt
 801b78c:	6063      	strlt	r3, [r4, #4]
 801b78e:	6861      	ldr	r1, [r4, #4]
 801b790:	293b      	cmp	r1, #59	; 0x3b
 801b792:	d911      	bls.n	801b7b8 <validate_structure+0x58>
 801b794:	223c      	movs	r2, #60	; 0x3c
 801b796:	4668      	mov	r0, sp
 801b798:	f003 fa9c 	bl	801ecd4 <div>
 801b79c:	9a01      	ldr	r2, [sp, #4]
 801b79e:	68a3      	ldr	r3, [r4, #8]
 801b7a0:	9900      	ldr	r1, [sp, #0]
 801b7a2:	2a00      	cmp	r2, #0
 801b7a4:	440b      	add	r3, r1
 801b7a6:	60a3      	str	r3, [r4, #8]
 801b7a8:	bfbb      	ittet	lt
 801b7aa:	323c      	addlt	r2, #60	; 0x3c
 801b7ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b7b0:	6062      	strge	r2, [r4, #4]
 801b7b2:	6062      	strlt	r2, [r4, #4]
 801b7b4:	bfb8      	it	lt
 801b7b6:	60a3      	strlt	r3, [r4, #8]
 801b7b8:	68a1      	ldr	r1, [r4, #8]
 801b7ba:	2917      	cmp	r1, #23
 801b7bc:	d911      	bls.n	801b7e2 <validate_structure+0x82>
 801b7be:	2218      	movs	r2, #24
 801b7c0:	4668      	mov	r0, sp
 801b7c2:	f003 fa87 	bl	801ecd4 <div>
 801b7c6:	9a01      	ldr	r2, [sp, #4]
 801b7c8:	68e3      	ldr	r3, [r4, #12]
 801b7ca:	9900      	ldr	r1, [sp, #0]
 801b7cc:	2a00      	cmp	r2, #0
 801b7ce:	440b      	add	r3, r1
 801b7d0:	60e3      	str	r3, [r4, #12]
 801b7d2:	bfbb      	ittet	lt
 801b7d4:	3218      	addlt	r2, #24
 801b7d6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b7da:	60a2      	strge	r2, [r4, #8]
 801b7dc:	60a2      	strlt	r2, [r4, #8]
 801b7de:	bfb8      	it	lt
 801b7e0:	60e3      	strlt	r3, [r4, #12]
 801b7e2:	6921      	ldr	r1, [r4, #16]
 801b7e4:	290b      	cmp	r1, #11
 801b7e6:	d911      	bls.n	801b80c <validate_structure+0xac>
 801b7e8:	220c      	movs	r2, #12
 801b7ea:	4668      	mov	r0, sp
 801b7ec:	f003 fa72 	bl	801ecd4 <div>
 801b7f0:	9a01      	ldr	r2, [sp, #4]
 801b7f2:	6963      	ldr	r3, [r4, #20]
 801b7f4:	9900      	ldr	r1, [sp, #0]
 801b7f6:	2a00      	cmp	r2, #0
 801b7f8:	440b      	add	r3, r1
 801b7fa:	6163      	str	r3, [r4, #20]
 801b7fc:	bfbb      	ittet	lt
 801b7fe:	320c      	addlt	r2, #12
 801b800:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b804:	6122      	strge	r2, [r4, #16]
 801b806:	6122      	strlt	r2, [r4, #16]
 801b808:	bfb8      	it	lt
 801b80a:	6163      	strlt	r3, [r4, #20]
 801b80c:	6963      	ldr	r3, [r4, #20]
 801b80e:	0799      	lsls	r1, r3, #30
 801b810:	d120      	bne.n	801b854 <validate_structure+0xf4>
 801b812:	2164      	movs	r1, #100	; 0x64
 801b814:	fb93 f2f1 	sdiv	r2, r3, r1
 801b818:	fb01 3212 	mls	r2, r1, r2, r3
 801b81c:	b9e2      	cbnz	r2, 801b858 <validate_structure+0xf8>
 801b81e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801b822:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b826:	fb93 f2f1 	sdiv	r2, r3, r1
 801b82a:	fb01 3312 	mls	r3, r1, r2, r3
 801b82e:	2b00      	cmp	r3, #0
 801b830:	bf14      	ite	ne
 801b832:	231c      	movne	r3, #28
 801b834:	231d      	moveq	r3, #29
 801b836:	68e2      	ldr	r2, [r4, #12]
 801b838:	2a00      	cmp	r2, #0
 801b83a:	dc0f      	bgt.n	801b85c <validate_structure+0xfc>
 801b83c:	4f33      	ldr	r7, [pc, #204]	; (801b90c <validate_structure+0x1ac>)
 801b83e:	260b      	movs	r6, #11
 801b840:	2064      	movs	r0, #100	; 0x64
 801b842:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801b846:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b84a:	f1bc 0f00 	cmp.w	ip, #0
 801b84e:	dd31      	ble.n	801b8b4 <validate_structure+0x154>
 801b850:	b003      	add	sp, #12
 801b852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b854:	231c      	movs	r3, #28
 801b856:	e7ee      	b.n	801b836 <validate_structure+0xd6>
 801b858:	231d      	movs	r3, #29
 801b85a:	e7ec      	b.n	801b836 <validate_structure+0xd6>
 801b85c:	4f2b      	ldr	r7, [pc, #172]	; (801b90c <validate_structure+0x1ac>)
 801b85e:	f04f 0c00 	mov.w	ip, #0
 801b862:	2564      	movs	r5, #100	; 0x64
 801b864:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b868:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801b86c:	2a01      	cmp	r2, #1
 801b86e:	bf14      	ite	ne
 801b870:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801b874:	4618      	moveq	r0, r3
 801b876:	4281      	cmp	r1, r0
 801b878:	ddea      	ble.n	801b850 <validate_structure+0xf0>
 801b87a:	3201      	adds	r2, #1
 801b87c:	1a09      	subs	r1, r1, r0
 801b87e:	2a0c      	cmp	r2, #12
 801b880:	60e1      	str	r1, [r4, #12]
 801b882:	6122      	str	r2, [r4, #16]
 801b884:	d1f0      	bne.n	801b868 <validate_structure+0x108>
 801b886:	6963      	ldr	r3, [r4, #20]
 801b888:	1c5a      	adds	r2, r3, #1
 801b88a:	0791      	lsls	r1, r2, #30
 801b88c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801b890:	d137      	bne.n	801b902 <validate_structure+0x1a2>
 801b892:	fb92 f1f5 	sdiv	r1, r2, r5
 801b896:	fb05 2211 	mls	r2, r5, r1, r2
 801b89a:	2a00      	cmp	r2, #0
 801b89c:	d133      	bne.n	801b906 <validate_structure+0x1a6>
 801b89e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801b8a2:	fb93 f2f6 	sdiv	r2, r3, r6
 801b8a6:	fb06 3312 	mls	r3, r6, r2, r3
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	bf14      	ite	ne
 801b8ae:	231c      	movne	r3, #28
 801b8b0:	231d      	moveq	r3, #29
 801b8b2:	e7d9      	b.n	801b868 <validate_structure+0x108>
 801b8b4:	6921      	ldr	r1, [r4, #16]
 801b8b6:	3901      	subs	r1, #1
 801b8b8:	6121      	str	r1, [r4, #16]
 801b8ba:	3101      	adds	r1, #1
 801b8bc:	d114      	bne.n	801b8e8 <validate_structure+0x188>
 801b8be:	6963      	ldr	r3, [r4, #20]
 801b8c0:	1e59      	subs	r1, r3, #1
 801b8c2:	078a      	lsls	r2, r1, #30
 801b8c4:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801b8c8:	d117      	bne.n	801b8fa <validate_structure+0x19a>
 801b8ca:	fb91 f2f0 	sdiv	r2, r1, r0
 801b8ce:	fb00 1112 	mls	r1, r0, r2, r1
 801b8d2:	b9a1      	cbnz	r1, 801b8fe <validate_structure+0x19e>
 801b8d4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801b8d8:	fb93 f2f5 	sdiv	r2, r3, r5
 801b8dc:	fb05 3312 	mls	r3, r5, r2, r3
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	bf14      	ite	ne
 801b8e4:	231c      	movne	r3, #28
 801b8e6:	231d      	moveq	r3, #29
 801b8e8:	6922      	ldr	r2, [r4, #16]
 801b8ea:	2a01      	cmp	r2, #1
 801b8ec:	bf14      	ite	ne
 801b8ee:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801b8f2:	461a      	moveq	r2, r3
 801b8f4:	4462      	add	r2, ip
 801b8f6:	60e2      	str	r2, [r4, #12]
 801b8f8:	e7a5      	b.n	801b846 <validate_structure+0xe6>
 801b8fa:	231c      	movs	r3, #28
 801b8fc:	e7f4      	b.n	801b8e8 <validate_structure+0x188>
 801b8fe:	231d      	movs	r3, #29
 801b900:	e7f2      	b.n	801b8e8 <validate_structure+0x188>
 801b902:	231c      	movs	r3, #28
 801b904:	e7b0      	b.n	801b868 <validate_structure+0x108>
 801b906:	231d      	movs	r3, #29
 801b908:	e7ae      	b.n	801b868 <validate_structure+0x108>
 801b90a:	bf00      	nop
 801b90c:	080292ac 	.word	0x080292ac

0801b910 <mktime>:
 801b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b914:	b08b      	sub	sp, #44	; 0x2c
 801b916:	4605      	mov	r5, r0
 801b918:	f004 fb04 	bl	801ff24 <__gettzinfo>
 801b91c:	4607      	mov	r7, r0
 801b91e:	4628      	mov	r0, r5
 801b920:	f7ff ff1e 	bl	801b760 <validate_structure>
 801b924:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b928:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801b92c:	68a8      	ldr	r0, [r5, #8]
 801b92e:	696e      	ldr	r6, [r5, #20]
 801b930:	fb0a 2303 	mla	r3, sl, r3, r2
 801b934:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801b938:	fb0a 3a00 	mla	sl, sl, r0, r3
 801b93c:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801b940:	4ac3      	ldr	r2, [pc, #780]	; (801bc50 <mktime+0x340>)
 801b942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b946:	3c01      	subs	r4, #1
 801b948:	2b01      	cmp	r3, #1
 801b94a:	4414      	add	r4, r2
 801b94c:	dd11      	ble.n	801b972 <mktime+0x62>
 801b94e:	07b1      	lsls	r1, r6, #30
 801b950:	d10f      	bne.n	801b972 <mktime+0x62>
 801b952:	2264      	movs	r2, #100	; 0x64
 801b954:	fb96 f3f2 	sdiv	r3, r6, r2
 801b958:	fb02 6313 	mls	r3, r2, r3, r6
 801b95c:	b943      	cbnz	r3, 801b970 <mktime+0x60>
 801b95e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b962:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b966:	fb91 f3f2 	sdiv	r3, r1, r2
 801b96a:	fb02 1313 	mls	r3, r2, r3, r1
 801b96e:	b903      	cbnz	r3, 801b972 <mktime+0x62>
 801b970:	3401      	adds	r4, #1
 801b972:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801b976:	3310      	adds	r3, #16
 801b978:	f644 6220 	movw	r2, #20000	; 0x4e20
 801b97c:	4293      	cmp	r3, r2
 801b97e:	61ec      	str	r4, [r5, #28]
 801b980:	f200 8161 	bhi.w	801bc46 <mktime+0x336>
 801b984:	2e46      	cmp	r6, #70	; 0x46
 801b986:	dd77      	ble.n	801ba78 <mktime+0x168>
 801b988:	2346      	movs	r3, #70	; 0x46
 801b98a:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b98e:	2164      	movs	r1, #100	; 0x64
 801b990:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b994:	079a      	lsls	r2, r3, #30
 801b996:	d169      	bne.n	801ba6c <mktime+0x15c>
 801b998:	fb93 f2f1 	sdiv	r2, r3, r1
 801b99c:	fb01 3212 	mls	r2, r1, r2, r3
 801b9a0:	2a00      	cmp	r2, #0
 801b9a2:	d166      	bne.n	801ba72 <mktime+0x162>
 801b9a4:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b9a8:	fb9c f2f0 	sdiv	r2, ip, r0
 801b9ac:	fb00 c212 	mls	r2, r0, r2, ip
 801b9b0:	2a00      	cmp	r2, #0
 801b9b2:	bf14      	ite	ne
 801b9b4:	4672      	movne	r2, lr
 801b9b6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b9ba:	3301      	adds	r3, #1
 801b9bc:	429e      	cmp	r6, r3
 801b9be:	4414      	add	r4, r2
 801b9c0:	d1e8      	bne.n	801b994 <mktime+0x84>
 801b9c2:	4ba4      	ldr	r3, [pc, #656]	; (801bc54 <mktime+0x344>)
 801b9c4:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801b9c8:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801b9cc:	f001 fd14 	bl	801d3f8 <__tz_lock>
 801b9d0:	f001 fd1e 	bl	801d410 <_tzset_unlocked>
 801b9d4:	4ba0      	ldr	r3, [pc, #640]	; (801bc58 <mktime+0x348>)
 801b9d6:	f8d3 9000 	ldr.w	r9, [r3]
 801b9da:	f1b9 0f00 	cmp.w	r9, #0
 801b9de:	d03f      	beq.n	801ba60 <mktime+0x150>
 801b9e0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801b9e4:	6968      	ldr	r0, [r5, #20]
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	f1b9 0f01 	cmp.w	r9, #1
 801b9ec:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801b9f0:	46c8      	mov	r8, r9
 801b9f2:	bfa8      	it	ge
 801b9f4:	f04f 0801 	movge.w	r8, #1
 801b9f8:	4283      	cmp	r3, r0
 801b9fa:	d17f      	bne.n	801bafc <mktime+0x1ec>
 801b9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9fe:	4619      	mov	r1, r3
 801ba00:	17da      	asrs	r2, r3, #31
 801ba02:	e9cd 1200 	strd	r1, r2, [sp]
 801ba06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801ba0a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ba0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba14:	1a80      	subs	r0, r0, r2
 801ba16:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801ba1a:	4582      	cmp	sl, r0
 801ba1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ba20:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ba24:	da71      	bge.n	801bb0a <mktime+0x1fa>
 801ba26:	9800      	ldr	r0, [sp, #0]
 801ba28:	6a39      	ldr	r1, [r7, #32]
 801ba2a:	1a09      	subs	r1, r1, r0
 801ba2c:	9104      	str	r1, [sp, #16]
 801ba2e:	9801      	ldr	r0, [sp, #4]
 801ba30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ba32:	eb61 0100 	sbc.w	r1, r1, r0
 801ba36:	9105      	str	r1, [sp, #20]
 801ba38:	6839      	ldr	r1, [r7, #0]
 801ba3a:	2900      	cmp	r1, #0
 801ba3c:	d075      	beq.n	801bb2a <mktime+0x21a>
 801ba3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba42:	4582      	cmp	sl, r0
 801ba44:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ba48:	db05      	blt.n	801ba56 <mktime+0x146>
 801ba4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ba4e:	4582      	cmp	sl, r0
 801ba50:	eb7b 0101 	sbcs.w	r1, fp, r1
 801ba54:	db6f      	blt.n	801bb36 <mktime+0x226>
 801ba56:	f1b9 0f00 	cmp.w	r9, #0
 801ba5a:	f04f 0900 	mov.w	r9, #0
 801ba5e:	da6f      	bge.n	801bb40 <mktime+0x230>
 801ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba62:	eb1a 0a03 	adds.w	sl, sl, r3
 801ba66:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801ba6a:	e0ae      	b.n	801bbca <mktime+0x2ba>
 801ba6c:	f240 126d 	movw	r2, #365	; 0x16d
 801ba70:	e7a3      	b.n	801b9ba <mktime+0xaa>
 801ba72:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801ba76:	e7a0      	b.n	801b9ba <mktime+0xaa>
 801ba78:	d0a3      	beq.n	801b9c2 <mktime+0xb2>
 801ba7a:	2345      	movs	r3, #69	; 0x45
 801ba7c:	f240 1e6d 	movw	lr, #365	; 0x16d
 801ba80:	2164      	movs	r1, #100	; 0x64
 801ba82:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801ba86:	e012      	b.n	801baae <mktime+0x19e>
 801ba88:	bb62      	cbnz	r2, 801bae4 <mktime+0x1d4>
 801ba8a:	fb93 f2f1 	sdiv	r2, r3, r1
 801ba8e:	fb01 3212 	mls	r2, r1, r2, r3
 801ba92:	bb52      	cbnz	r2, 801baea <mktime+0x1da>
 801ba94:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801ba98:	fb9c f2f0 	sdiv	r2, ip, r0
 801ba9c:	fb00 c212 	mls	r2, r0, r2, ip
 801baa0:	2a00      	cmp	r2, #0
 801baa2:	bf14      	ite	ne
 801baa4:	4672      	movne	r2, lr
 801baa6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801baaa:	1aa4      	subs	r4, r4, r2
 801baac:	3b01      	subs	r3, #1
 801baae:	429e      	cmp	r6, r3
 801bab0:	f003 0203 	and.w	r2, r3, #3
 801bab4:	dbe8      	blt.n	801ba88 <mktime+0x178>
 801bab6:	b9da      	cbnz	r2, 801baf0 <mktime+0x1e0>
 801bab8:	2264      	movs	r2, #100	; 0x64
 801baba:	fb96 f3f2 	sdiv	r3, r6, r2
 801babe:	fb02 6313 	mls	r3, r2, r3, r6
 801bac2:	b9c3      	cbnz	r3, 801baf6 <mktime+0x1e6>
 801bac4:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801bac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801bacc:	fb91 f3f2 	sdiv	r3, r1, r2
 801bad0:	fb02 1313 	mls	r3, r2, r3, r1
 801bad4:	2b00      	cmp	r3, #0
 801bad6:	f240 136d 	movw	r3, #365	; 0x16d
 801bada:	bf08      	it	eq
 801badc:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801bae0:	1ae4      	subs	r4, r4, r3
 801bae2:	e76e      	b.n	801b9c2 <mktime+0xb2>
 801bae4:	f240 126d 	movw	r2, #365	; 0x16d
 801bae8:	e7df      	b.n	801baaa <mktime+0x19a>
 801baea:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801baee:	e7dc      	b.n	801baaa <mktime+0x19a>
 801baf0:	f240 136d 	movw	r3, #365	; 0x16d
 801baf4:	e7f4      	b.n	801bae0 <mktime+0x1d0>
 801baf6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801bafa:	e7f1      	b.n	801bae0 <mktime+0x1d0>
 801bafc:	f001 fbd4 	bl	801d2a8 <__tzcalc_limits>
 801bb00:	2800      	cmp	r0, #0
 801bb02:	f47f af7b 	bne.w	801b9fc <mktime+0xec>
 801bb06:	46c1      	mov	r9, r8
 801bb08:	e054      	b.n	801bbb4 <mktime+0x2a4>
 801bb0a:	9800      	ldr	r0, [sp, #0]
 801bb0c:	9902      	ldr	r1, [sp, #8]
 801bb0e:	1a09      	subs	r1, r1, r0
 801bb10:	9108      	str	r1, [sp, #32]
 801bb12:	9801      	ldr	r0, [sp, #4]
 801bb14:	9903      	ldr	r1, [sp, #12]
 801bb16:	eb61 0100 	sbc.w	r1, r1, r0
 801bb1a:	9109      	str	r1, [sp, #36]	; 0x24
 801bb1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bb20:	4582      	cmp	sl, r0
 801bb22:	eb7b 0101 	sbcs.w	r1, fp, r1
 801bb26:	dbee      	blt.n	801bb06 <mktime+0x1f6>
 801bb28:	e77d      	b.n	801ba26 <mktime+0x116>
 801bb2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb2e:	4582      	cmp	sl, r0
 801bb30:	eb7b 0101 	sbcs.w	r1, fp, r1
 801bb34:	db89      	blt.n	801ba4a <mktime+0x13a>
 801bb36:	f1b9 0f00 	cmp.w	r9, #0
 801bb3a:	db3f      	blt.n	801bbbc <mktime+0x2ac>
 801bb3c:	f04f 0901 	mov.w	r9, #1
 801bb40:	ea88 0809 	eor.w	r8, r8, r9
 801bb44:	f1b8 0f01 	cmp.w	r8, #1
 801bb48:	d134      	bne.n	801bbb4 <mktime+0x2a4>
 801bb4a:	f1b9 0f00 	cmp.w	r9, #0
 801bb4e:	d04f      	beq.n	801bbf0 <mktime+0x2e0>
 801bb50:	1ad3      	subs	r3, r2, r3
 801bb52:	682a      	ldr	r2, [r5, #0]
 801bb54:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801bb58:	441a      	add	r2, r3
 801bb5a:	eb1a 0a03 	adds.w	sl, sl, r3
 801bb5e:	602a      	str	r2, [r5, #0]
 801bb60:	4628      	mov	r0, r5
 801bb62:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801bb66:	f7ff fdfb 	bl	801b760 <validate_structure>
 801bb6a:	68ea      	ldr	r2, [r5, #12]
 801bb6c:	ebb2 0208 	subs.w	r2, r2, r8
 801bb70:	d020      	beq.n	801bbb4 <mktime+0x2a4>
 801bb72:	2a01      	cmp	r2, #1
 801bb74:	dc3e      	bgt.n	801bbf4 <mktime+0x2e4>
 801bb76:	1c90      	adds	r0, r2, #2
 801bb78:	bfd8      	it	le
 801bb7a:	2201      	movle	r2, #1
 801bb7c:	69eb      	ldr	r3, [r5, #28]
 801bb7e:	18d3      	adds	r3, r2, r3
 801bb80:	4414      	add	r4, r2
 801bb82:	d540      	bpl.n	801bc06 <mktime+0x2f6>
 801bb84:	1e72      	subs	r2, r6, #1
 801bb86:	0791      	lsls	r1, r2, #30
 801bb88:	d137      	bne.n	801bbfa <mktime+0x2ea>
 801bb8a:	2164      	movs	r1, #100	; 0x64
 801bb8c:	fb92 f3f1 	sdiv	r3, r2, r1
 801bb90:	fb01 2313 	mls	r3, r1, r3, r2
 801bb94:	bba3      	cbnz	r3, 801bc00 <mktime+0x2f0>
 801bb96:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801bb9a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801bb9e:	fb96 f3f2 	sdiv	r3, r6, r2
 801bba2:	fb02 6613 	mls	r6, r2, r3, r6
 801bba6:	2e00      	cmp	r6, #0
 801bba8:	f240 136d 	movw	r3, #365	; 0x16d
 801bbac:	bf18      	it	ne
 801bbae:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801bbb2:	61eb      	str	r3, [r5, #28]
 801bbb4:	f1b9 0f01 	cmp.w	r9, #1
 801bbb8:	f47f af52 	bne.w	801ba60 <mktime+0x150>
 801bbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bbbe:	eb1a 0a03 	adds.w	sl, sl, r3
 801bbc2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801bbc6:	f04f 0901 	mov.w	r9, #1
 801bbca:	f001 fc1b 	bl	801d404 <__tz_unlock>
 801bbce:	3404      	adds	r4, #4
 801bbd0:	2307      	movs	r3, #7
 801bbd2:	fb94 f3f3 	sdiv	r3, r4, r3
 801bbd6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801bbda:	1ae4      	subs	r4, r4, r3
 801bbdc:	bf48      	it	mi
 801bbde:	3407      	addmi	r4, #7
 801bbe0:	f8c5 9020 	str.w	r9, [r5, #32]
 801bbe4:	61ac      	str	r4, [r5, #24]
 801bbe6:	4650      	mov	r0, sl
 801bbe8:	4659      	mov	r1, fp
 801bbea:	b00b      	add	sp, #44	; 0x2c
 801bbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbf0:	1a9b      	subs	r3, r3, r2
 801bbf2:	e7ae      	b.n	801bb52 <mktime+0x242>
 801bbf4:	f04f 32ff 	mov.w	r2, #4294967295
 801bbf8:	e7c0      	b.n	801bb7c <mktime+0x26c>
 801bbfa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801bbfe:	e7d8      	b.n	801bbb2 <mktime+0x2a2>
 801bc00:	f240 136d 	movw	r3, #365	; 0x16d
 801bc04:	e7d5      	b.n	801bbb2 <mktime+0x2a2>
 801bc06:	07b2      	lsls	r2, r6, #30
 801bc08:	d117      	bne.n	801bc3a <mktime+0x32a>
 801bc0a:	2164      	movs	r1, #100	; 0x64
 801bc0c:	fb96 f2f1 	sdiv	r2, r6, r1
 801bc10:	fb01 6212 	mls	r2, r1, r2, r6
 801bc14:	b9a2      	cbnz	r2, 801bc40 <mktime+0x330>
 801bc16:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801bc1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801bc1e:	fb96 f2f1 	sdiv	r2, r6, r1
 801bc22:	fb01 6612 	mls	r6, r1, r2, r6
 801bc26:	2e00      	cmp	r6, #0
 801bc28:	f240 126d 	movw	r2, #365	; 0x16d
 801bc2c:	bf08      	it	eq
 801bc2e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801bc32:	4293      	cmp	r3, r2
 801bc34:	bfa8      	it	ge
 801bc36:	1a9b      	subge	r3, r3, r2
 801bc38:	e7bb      	b.n	801bbb2 <mktime+0x2a2>
 801bc3a:	f240 126d 	movw	r2, #365	; 0x16d
 801bc3e:	e7f8      	b.n	801bc32 <mktime+0x322>
 801bc40:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801bc44:	e7f5      	b.n	801bc32 <mktime+0x322>
 801bc46:	f04f 3aff 	mov.w	sl, #4294967295
 801bc4a:	f04f 3bff 	mov.w	fp, #4294967295
 801bc4e:	e7ca      	b.n	801bbe6 <mktime+0x2d6>
 801bc50:	080292dc 	.word	0x080292dc
 801bc54:	00015180 	.word	0x00015180
 801bc58:	20005060 	.word	0x20005060

0801bc5c <printf>:
 801bc5c:	b40f      	push	{r0, r1, r2, r3}
 801bc5e:	b507      	push	{r0, r1, r2, lr}
 801bc60:	4906      	ldr	r1, [pc, #24]	; (801bc7c <printf+0x20>)
 801bc62:	ab04      	add	r3, sp, #16
 801bc64:	6808      	ldr	r0, [r1, #0]
 801bc66:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc6a:	6881      	ldr	r1, [r0, #8]
 801bc6c:	9301      	str	r3, [sp, #4]
 801bc6e:	f001 fd53 	bl	801d718 <_vfprintf_r>
 801bc72:	b003      	add	sp, #12
 801bc74:	f85d eb04 	ldr.w	lr, [sp], #4
 801bc78:	b004      	add	sp, #16
 801bc7a:	4770      	bx	lr
 801bc7c:	20000038 	.word	0x20000038

0801bc80 <rand>:
 801bc80:	4b0b      	ldr	r3, [pc, #44]	; (801bcb0 <rand+0x30>)
 801bc82:	480c      	ldr	r0, [pc, #48]	; (801bcb4 <rand+0x34>)
 801bc84:	6819      	ldr	r1, [r3, #0]
 801bc86:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801bc8a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801bc8e:	b510      	push	{r4, lr}
 801bc90:	4c09      	ldr	r4, [pc, #36]	; (801bcb8 <rand+0x38>)
 801bc92:	4350      	muls	r0, r2
 801bc94:	fb04 0003 	mla	r0, r4, r3, r0
 801bc98:	fba2 3404 	umull	r3, r4, r2, r4
 801bc9c:	1c5a      	adds	r2, r3, #1
 801bc9e:	4404      	add	r4, r0
 801bca0:	f144 0000 	adc.w	r0, r4, #0
 801bca4:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 801bca8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801bcac:	bd10      	pop	{r4, pc}
 801bcae:	bf00      	nop
 801bcb0:	20000038 	.word	0x20000038
 801bcb4:	5851f42d 	.word	0x5851f42d
 801bcb8:	4c957f2d 	.word	0x4c957f2d

0801bcbc <snprintf>:
 801bcbc:	b40c      	push	{r2, r3}
 801bcbe:	b530      	push	{r4, r5, lr}
 801bcc0:	4b17      	ldr	r3, [pc, #92]	; (801bd20 <snprintf+0x64>)
 801bcc2:	1e0c      	subs	r4, r1, #0
 801bcc4:	681d      	ldr	r5, [r3, #0]
 801bcc6:	b09d      	sub	sp, #116	; 0x74
 801bcc8:	da08      	bge.n	801bcdc <snprintf+0x20>
 801bcca:	238b      	movs	r3, #139	; 0x8b
 801bccc:	602b      	str	r3, [r5, #0]
 801bcce:	f04f 30ff 	mov.w	r0, #4294967295
 801bcd2:	b01d      	add	sp, #116	; 0x74
 801bcd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bcd8:	b002      	add	sp, #8
 801bcda:	4770      	bx	lr
 801bcdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bce4:	bf14      	ite	ne
 801bce6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bcea:	4623      	moveq	r3, r4
 801bcec:	9304      	str	r3, [sp, #16]
 801bcee:	9307      	str	r3, [sp, #28]
 801bcf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcf4:	9002      	str	r0, [sp, #8]
 801bcf6:	9006      	str	r0, [sp, #24]
 801bcf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bcfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bcfe:	ab21      	add	r3, sp, #132	; 0x84
 801bd00:	a902      	add	r1, sp, #8
 801bd02:	4628      	mov	r0, r5
 801bd04:	9301      	str	r3, [sp, #4]
 801bd06:	f000 f8ef 	bl	801bee8 <_svfprintf_r>
 801bd0a:	1c43      	adds	r3, r0, #1
 801bd0c:	bfbc      	itt	lt
 801bd0e:	238b      	movlt	r3, #139	; 0x8b
 801bd10:	602b      	strlt	r3, [r5, #0]
 801bd12:	2c00      	cmp	r4, #0
 801bd14:	d0dd      	beq.n	801bcd2 <snprintf+0x16>
 801bd16:	9b02      	ldr	r3, [sp, #8]
 801bd18:	2200      	movs	r2, #0
 801bd1a:	701a      	strb	r2, [r3, #0]
 801bd1c:	e7d9      	b.n	801bcd2 <snprintf+0x16>
 801bd1e:	bf00      	nop
 801bd20:	20000038 	.word	0x20000038

0801bd24 <sprintf>:
 801bd24:	b40e      	push	{r1, r2, r3}
 801bd26:	b500      	push	{lr}
 801bd28:	b09c      	sub	sp, #112	; 0x70
 801bd2a:	ab1d      	add	r3, sp, #116	; 0x74
 801bd2c:	9002      	str	r0, [sp, #8]
 801bd2e:	9006      	str	r0, [sp, #24]
 801bd30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bd34:	4809      	ldr	r0, [pc, #36]	; (801bd5c <sprintf+0x38>)
 801bd36:	9107      	str	r1, [sp, #28]
 801bd38:	9104      	str	r1, [sp, #16]
 801bd3a:	4909      	ldr	r1, [pc, #36]	; (801bd60 <sprintf+0x3c>)
 801bd3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd40:	9105      	str	r1, [sp, #20]
 801bd42:	6800      	ldr	r0, [r0, #0]
 801bd44:	9301      	str	r3, [sp, #4]
 801bd46:	a902      	add	r1, sp, #8
 801bd48:	f000 f8ce 	bl	801bee8 <_svfprintf_r>
 801bd4c:	9b02      	ldr	r3, [sp, #8]
 801bd4e:	2200      	movs	r2, #0
 801bd50:	701a      	strb	r2, [r3, #0]
 801bd52:	b01c      	add	sp, #112	; 0x70
 801bd54:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd58:	b003      	add	sp, #12
 801bd5a:	4770      	bx	lr
 801bd5c:	20000038 	.word	0x20000038
 801bd60:	ffff0208 	.word	0xffff0208

0801bd64 <strchr>:
 801bd64:	b2c9      	uxtb	r1, r1
 801bd66:	4603      	mov	r3, r0
 801bd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd6c:	b11a      	cbz	r2, 801bd76 <strchr+0x12>
 801bd6e:	428a      	cmp	r2, r1
 801bd70:	d1f9      	bne.n	801bd66 <strchr+0x2>
 801bd72:	4618      	mov	r0, r3
 801bd74:	4770      	bx	lr
 801bd76:	2900      	cmp	r1, #0
 801bd78:	bf18      	it	ne
 801bd7a:	2300      	movne	r3, #0
 801bd7c:	e7f9      	b.n	801bd72 <strchr+0xe>

0801bd7e <strncmp>:
 801bd7e:	b510      	push	{r4, lr}
 801bd80:	b16a      	cbz	r2, 801bd9e <strncmp+0x20>
 801bd82:	3901      	subs	r1, #1
 801bd84:	1884      	adds	r4, r0, r2
 801bd86:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bd8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bd8e:	4293      	cmp	r3, r2
 801bd90:	d103      	bne.n	801bd9a <strncmp+0x1c>
 801bd92:	42a0      	cmp	r0, r4
 801bd94:	d001      	beq.n	801bd9a <strncmp+0x1c>
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d1f5      	bne.n	801bd86 <strncmp+0x8>
 801bd9a:	1a98      	subs	r0, r3, r2
 801bd9c:	bd10      	pop	{r4, pc}
 801bd9e:	4610      	mov	r0, r2
 801bda0:	e7fc      	b.n	801bd9c <strncmp+0x1e>

0801bda2 <strncpy>:
 801bda2:	b510      	push	{r4, lr}
 801bda4:	3901      	subs	r1, #1
 801bda6:	4603      	mov	r3, r0
 801bda8:	b132      	cbz	r2, 801bdb8 <strncpy+0x16>
 801bdaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bdae:	f803 4b01 	strb.w	r4, [r3], #1
 801bdb2:	3a01      	subs	r2, #1
 801bdb4:	2c00      	cmp	r4, #0
 801bdb6:	d1f7      	bne.n	801bda8 <strncpy+0x6>
 801bdb8:	441a      	add	r2, r3
 801bdba:	2100      	movs	r1, #0
 801bdbc:	4293      	cmp	r3, r2
 801bdbe:	d100      	bne.n	801bdc2 <strncpy+0x20>
 801bdc0:	bd10      	pop	{r4, pc}
 801bdc2:	f803 1b01 	strb.w	r1, [r3], #1
 801bdc6:	e7f9      	b.n	801bdbc <strncpy+0x1a>

0801bdc8 <_strtol_l.isra.0>:
 801bdc8:	2b01      	cmp	r3, #1
 801bdca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdce:	d001      	beq.n	801bdd4 <_strtol_l.isra.0+0xc>
 801bdd0:	2b24      	cmp	r3, #36	; 0x24
 801bdd2:	d906      	bls.n	801bde2 <_strtol_l.isra.0+0x1a>
 801bdd4:	f003 fdf4 	bl	801f9c0 <__errno>
 801bdd8:	2316      	movs	r3, #22
 801bdda:	6003      	str	r3, [r0, #0]
 801bddc:	2000      	movs	r0, #0
 801bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bde2:	4f3a      	ldr	r7, [pc, #232]	; (801becc <_strtol_l.isra.0+0x104>)
 801bde4:	468e      	mov	lr, r1
 801bde6:	4676      	mov	r6, lr
 801bde8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bdec:	5de5      	ldrb	r5, [r4, r7]
 801bdee:	f015 0508 	ands.w	r5, r5, #8
 801bdf2:	d1f8      	bne.n	801bde6 <_strtol_l.isra.0+0x1e>
 801bdf4:	2c2d      	cmp	r4, #45	; 0x2d
 801bdf6:	d134      	bne.n	801be62 <_strtol_l.isra.0+0x9a>
 801bdf8:	f89e 4000 	ldrb.w	r4, [lr]
 801bdfc:	f04f 0801 	mov.w	r8, #1
 801be00:	f106 0e02 	add.w	lr, r6, #2
 801be04:	2b00      	cmp	r3, #0
 801be06:	d05c      	beq.n	801bec2 <_strtol_l.isra.0+0xfa>
 801be08:	2b10      	cmp	r3, #16
 801be0a:	d10c      	bne.n	801be26 <_strtol_l.isra.0+0x5e>
 801be0c:	2c30      	cmp	r4, #48	; 0x30
 801be0e:	d10a      	bne.n	801be26 <_strtol_l.isra.0+0x5e>
 801be10:	f89e 4000 	ldrb.w	r4, [lr]
 801be14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801be18:	2c58      	cmp	r4, #88	; 0x58
 801be1a:	d14d      	bne.n	801beb8 <_strtol_l.isra.0+0xf0>
 801be1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801be20:	2310      	movs	r3, #16
 801be22:	f10e 0e02 	add.w	lr, lr, #2
 801be26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801be2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801be2e:	2600      	movs	r6, #0
 801be30:	fbbc f9f3 	udiv	r9, ip, r3
 801be34:	4635      	mov	r5, r6
 801be36:	fb03 ca19 	mls	sl, r3, r9, ip
 801be3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801be3e:	2f09      	cmp	r7, #9
 801be40:	d818      	bhi.n	801be74 <_strtol_l.isra.0+0xac>
 801be42:	463c      	mov	r4, r7
 801be44:	42a3      	cmp	r3, r4
 801be46:	dd24      	ble.n	801be92 <_strtol_l.isra.0+0xca>
 801be48:	2e00      	cmp	r6, #0
 801be4a:	db1f      	blt.n	801be8c <_strtol_l.isra.0+0xc4>
 801be4c:	45a9      	cmp	r9, r5
 801be4e:	d31d      	bcc.n	801be8c <_strtol_l.isra.0+0xc4>
 801be50:	d101      	bne.n	801be56 <_strtol_l.isra.0+0x8e>
 801be52:	45a2      	cmp	sl, r4
 801be54:	db1a      	blt.n	801be8c <_strtol_l.isra.0+0xc4>
 801be56:	fb05 4503 	mla	r5, r5, r3, r4
 801be5a:	2601      	movs	r6, #1
 801be5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801be60:	e7eb      	b.n	801be3a <_strtol_l.isra.0+0x72>
 801be62:	2c2b      	cmp	r4, #43	; 0x2b
 801be64:	bf08      	it	eq
 801be66:	f89e 4000 	ldrbeq.w	r4, [lr]
 801be6a:	46a8      	mov	r8, r5
 801be6c:	bf08      	it	eq
 801be6e:	f106 0e02 	addeq.w	lr, r6, #2
 801be72:	e7c7      	b.n	801be04 <_strtol_l.isra.0+0x3c>
 801be74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801be78:	2f19      	cmp	r7, #25
 801be7a:	d801      	bhi.n	801be80 <_strtol_l.isra.0+0xb8>
 801be7c:	3c37      	subs	r4, #55	; 0x37
 801be7e:	e7e1      	b.n	801be44 <_strtol_l.isra.0+0x7c>
 801be80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801be84:	2f19      	cmp	r7, #25
 801be86:	d804      	bhi.n	801be92 <_strtol_l.isra.0+0xca>
 801be88:	3c57      	subs	r4, #87	; 0x57
 801be8a:	e7db      	b.n	801be44 <_strtol_l.isra.0+0x7c>
 801be8c:	f04f 36ff 	mov.w	r6, #4294967295
 801be90:	e7e4      	b.n	801be5c <_strtol_l.isra.0+0x94>
 801be92:	2e00      	cmp	r6, #0
 801be94:	da05      	bge.n	801bea2 <_strtol_l.isra.0+0xda>
 801be96:	2322      	movs	r3, #34	; 0x22
 801be98:	6003      	str	r3, [r0, #0]
 801be9a:	4665      	mov	r5, ip
 801be9c:	b942      	cbnz	r2, 801beb0 <_strtol_l.isra.0+0xe8>
 801be9e:	4628      	mov	r0, r5
 801bea0:	e79d      	b.n	801bdde <_strtol_l.isra.0+0x16>
 801bea2:	f1b8 0f00 	cmp.w	r8, #0
 801bea6:	d000      	beq.n	801beaa <_strtol_l.isra.0+0xe2>
 801bea8:	426d      	negs	r5, r5
 801beaa:	2a00      	cmp	r2, #0
 801beac:	d0f7      	beq.n	801be9e <_strtol_l.isra.0+0xd6>
 801beae:	b10e      	cbz	r6, 801beb4 <_strtol_l.isra.0+0xec>
 801beb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 801beb4:	6011      	str	r1, [r2, #0]
 801beb6:	e7f2      	b.n	801be9e <_strtol_l.isra.0+0xd6>
 801beb8:	2430      	movs	r4, #48	; 0x30
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d1b3      	bne.n	801be26 <_strtol_l.isra.0+0x5e>
 801bebe:	2308      	movs	r3, #8
 801bec0:	e7b1      	b.n	801be26 <_strtol_l.isra.0+0x5e>
 801bec2:	2c30      	cmp	r4, #48	; 0x30
 801bec4:	d0a4      	beq.n	801be10 <_strtol_l.isra.0+0x48>
 801bec6:	230a      	movs	r3, #10
 801bec8:	e7ad      	b.n	801be26 <_strtol_l.isra.0+0x5e>
 801beca:	bf00      	nop
 801becc:	080291a5 	.word	0x080291a5

0801bed0 <_strtol_r>:
 801bed0:	f7ff bf7a 	b.w	801bdc8 <_strtol_l.isra.0>

0801bed4 <strtol>:
 801bed4:	4613      	mov	r3, r2
 801bed6:	460a      	mov	r2, r1
 801bed8:	4601      	mov	r1, r0
 801beda:	4802      	ldr	r0, [pc, #8]	; (801bee4 <strtol+0x10>)
 801bedc:	6800      	ldr	r0, [r0, #0]
 801bede:	f7ff bf73 	b.w	801bdc8 <_strtol_l.isra.0>
 801bee2:	bf00      	nop
 801bee4:	20000038 	.word	0x20000038

0801bee8 <_svfprintf_r>:
 801bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beec:	ed2d 8b04 	vpush	{d8-d9}
 801bef0:	b0cf      	sub	sp, #316	; 0x13c
 801bef2:	4689      	mov	r9, r1
 801bef4:	4693      	mov	fp, r2
 801bef6:	461e      	mov	r6, r3
 801bef8:	4682      	mov	sl, r0
 801befa:	f004 f8c7 	bl	802008c <_localeconv_r>
 801befe:	6803      	ldr	r3, [r0, #0]
 801bf00:	9313      	str	r3, [sp, #76]	; 0x4c
 801bf02:	4618      	mov	r0, r3
 801bf04:	f7e4 f98e 	bl	8000224 <strlen>
 801bf08:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bf0c:	900e      	str	r0, [sp, #56]	; 0x38
 801bf0e:	0618      	lsls	r0, r3, #24
 801bf10:	d51a      	bpl.n	801bf48 <_svfprintf_r+0x60>
 801bf12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bf16:	b9bb      	cbnz	r3, 801bf48 <_svfprintf_r+0x60>
 801bf18:	2140      	movs	r1, #64	; 0x40
 801bf1a:	4650      	mov	r0, sl
 801bf1c:	f004 f93c 	bl	8020198 <_malloc_r>
 801bf20:	f8c9 0000 	str.w	r0, [r9]
 801bf24:	f8c9 0010 	str.w	r0, [r9, #16]
 801bf28:	b958      	cbnz	r0, 801bf42 <_svfprintf_r+0x5a>
 801bf2a:	230c      	movs	r3, #12
 801bf2c:	f8ca 3000 	str.w	r3, [sl]
 801bf30:	f04f 33ff 	mov.w	r3, #4294967295
 801bf34:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf36:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bf38:	b04f      	add	sp, #316	; 0x13c
 801bf3a:	ecbd 8b04 	vpop	{d8-d9}
 801bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf42:	2340      	movs	r3, #64	; 0x40
 801bf44:	f8c9 3014 	str.w	r3, [r9, #20]
 801bf48:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801c198 <_svfprintf_r+0x2b0>
 801bf4c:	2500      	movs	r5, #0
 801bf4e:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801bf52:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bf56:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801bf5a:	ac25      	add	r4, sp, #148	; 0x94
 801bf5c:	9422      	str	r4, [sp, #136]	; 0x88
 801bf5e:	9505      	str	r5, [sp, #20]
 801bf60:	950a      	str	r5, [sp, #40]	; 0x28
 801bf62:	9512      	str	r5, [sp, #72]	; 0x48
 801bf64:	9514      	str	r5, [sp, #80]	; 0x50
 801bf66:	950f      	str	r5, [sp, #60]	; 0x3c
 801bf68:	465b      	mov	r3, fp
 801bf6a:	461d      	mov	r5, r3
 801bf6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf70:	b10a      	cbz	r2, 801bf76 <_svfprintf_r+0x8e>
 801bf72:	2a25      	cmp	r2, #37	; 0x25
 801bf74:	d1f9      	bne.n	801bf6a <_svfprintf_r+0x82>
 801bf76:	ebb5 070b 	subs.w	r7, r5, fp
 801bf7a:	d00d      	beq.n	801bf98 <_svfprintf_r+0xb0>
 801bf7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bf7e:	443b      	add	r3, r7
 801bf80:	9324      	str	r3, [sp, #144]	; 0x90
 801bf82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bf84:	3301      	adds	r3, #1
 801bf86:	2b07      	cmp	r3, #7
 801bf88:	e9c4 b700 	strd	fp, r7, [r4]
 801bf8c:	9323      	str	r3, [sp, #140]	; 0x8c
 801bf8e:	dc79      	bgt.n	801c084 <_svfprintf_r+0x19c>
 801bf90:	3408      	adds	r4, #8
 801bf92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf94:	443b      	add	r3, r7
 801bf96:	930f      	str	r3, [sp, #60]	; 0x3c
 801bf98:	782b      	ldrb	r3, [r5, #0]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	f001 8140 	beq.w	801d220 <_svfprintf_r+0x1338>
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	f04f 32ff 	mov.w	r2, #4294967295
 801bfa6:	3501      	adds	r5, #1
 801bfa8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bfac:	9204      	str	r2, [sp, #16]
 801bfae:	9310      	str	r3, [sp, #64]	; 0x40
 801bfb0:	4698      	mov	r8, r3
 801bfb2:	270a      	movs	r7, #10
 801bfb4:	212b      	movs	r1, #43	; 0x2b
 801bfb6:	462a      	mov	r2, r5
 801bfb8:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bfbc:	9307      	str	r3, [sp, #28]
 801bfbe:	920b      	str	r2, [sp, #44]	; 0x2c
 801bfc0:	9b07      	ldr	r3, [sp, #28]
 801bfc2:	3b20      	subs	r3, #32
 801bfc4:	2b5a      	cmp	r3, #90	; 0x5a
 801bfc6:	f200 85b4 	bhi.w	801cb32 <_svfprintf_r+0xc4a>
 801bfca:	e8df f013 	tbh	[pc, r3, lsl #1]
 801bfce:	007e      	.short	0x007e
 801bfd0:	05b205b2 	.word	0x05b205b2
 801bfd4:	05b20086 	.word	0x05b20086
 801bfd8:	05b205b2 	.word	0x05b205b2
 801bfdc:	05b20065 	.word	0x05b20065
 801bfe0:	008905b2 	.word	0x008905b2
 801bfe4:	05b20093 	.word	0x05b20093
 801bfe8:	00960090 	.word	0x00960090
 801bfec:	00b305b2 	.word	0x00b305b2
 801bff0:	00b600b6 	.word	0x00b600b6
 801bff4:	00b600b6 	.word	0x00b600b6
 801bff8:	00b600b6 	.word	0x00b600b6
 801bffc:	00b600b6 	.word	0x00b600b6
 801c000:	05b200b6 	.word	0x05b200b6
 801c004:	05b205b2 	.word	0x05b205b2
 801c008:	05b205b2 	.word	0x05b205b2
 801c00c:	05b205b2 	.word	0x05b205b2
 801c010:	05b20127 	.word	0x05b20127
 801c014:	00fc00e9 	.word	0x00fc00e9
 801c018:	01270127 	.word	0x01270127
 801c01c:	05b20127 	.word	0x05b20127
 801c020:	05b205b2 	.word	0x05b205b2
 801c024:	00c605b2 	.word	0x00c605b2
 801c028:	05b205b2 	.word	0x05b205b2
 801c02c:	05b20492 	.word	0x05b20492
 801c030:	05b205b2 	.word	0x05b205b2
 801c034:	05b204d9 	.word	0x05b204d9
 801c038:	05b204fa 	.word	0x05b204fa
 801c03c:	051905b2 	.word	0x051905b2
 801c040:	05b205b2 	.word	0x05b205b2
 801c044:	05b205b2 	.word	0x05b205b2
 801c048:	05b205b2 	.word	0x05b205b2
 801c04c:	05b205b2 	.word	0x05b205b2
 801c050:	05b20127 	.word	0x05b20127
 801c054:	00fe00e9 	.word	0x00fe00e9
 801c058:	01270127 	.word	0x01270127
 801c05c:	00c90127 	.word	0x00c90127
 801c060:	00dd00fe 	.word	0x00dd00fe
 801c064:	00d605b2 	.word	0x00d605b2
 801c068:	046f05b2 	.word	0x046f05b2
 801c06c:	04c80494 	.word	0x04c80494
 801c070:	05b200dd 	.word	0x05b200dd
 801c074:	007c04d9 	.word	0x007c04d9
 801c078:	05b204fc 	.word	0x05b204fc
 801c07c:	053605b2 	.word	0x053605b2
 801c080:	007c05b2 	.word	0x007c05b2
 801c084:	aa22      	add	r2, sp, #136	; 0x88
 801c086:	4649      	mov	r1, r9
 801c088:	4650      	mov	r0, sl
 801c08a:	f004 ff4d 	bl	8020f28 <__ssprint_r>
 801c08e:	2800      	cmp	r0, #0
 801c090:	f040 8132 	bne.w	801c2f8 <_svfprintf_r+0x410>
 801c094:	ac25      	add	r4, sp, #148	; 0x94
 801c096:	e77c      	b.n	801bf92 <_svfprintf_r+0xaa>
 801c098:	4650      	mov	r0, sl
 801c09a:	f003 fff7 	bl	802008c <_localeconv_r>
 801c09e:	6843      	ldr	r3, [r0, #4]
 801c0a0:	9314      	str	r3, [sp, #80]	; 0x50
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	f7e4 f8be 	bl	8000224 <strlen>
 801c0a8:	9012      	str	r0, [sp, #72]	; 0x48
 801c0aa:	4650      	mov	r0, sl
 801c0ac:	f003 ffee 	bl	802008c <_localeconv_r>
 801c0b0:	6883      	ldr	r3, [r0, #8]
 801c0b2:	930a      	str	r3, [sp, #40]	; 0x28
 801c0b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c0b6:	212b      	movs	r1, #43	; 0x2b
 801c0b8:	b12b      	cbz	r3, 801c0c6 <_svfprintf_r+0x1de>
 801c0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0bc:	b11b      	cbz	r3, 801c0c6 <_svfprintf_r+0x1de>
 801c0be:	781b      	ldrb	r3, [r3, #0]
 801c0c0:	b10b      	cbz	r3, 801c0c6 <_svfprintf_r+0x1de>
 801c0c2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801c0c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c0c8:	e775      	b.n	801bfb6 <_svfprintf_r+0xce>
 801c0ca:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d1f9      	bne.n	801c0c6 <_svfprintf_r+0x1de>
 801c0d2:	2320      	movs	r3, #32
 801c0d4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c0d8:	e7f5      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c0da:	f048 0801 	orr.w	r8, r8, #1
 801c0de:	e7f2      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c0e0:	f856 3b04 	ldr.w	r3, [r6], #4
 801c0e4:	9310      	str	r3, [sp, #64]	; 0x40
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	daed      	bge.n	801c0c6 <_svfprintf_r+0x1de>
 801c0ea:	425b      	negs	r3, r3
 801c0ec:	9310      	str	r3, [sp, #64]	; 0x40
 801c0ee:	f048 0804 	orr.w	r8, r8, #4
 801c0f2:	e7e8      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c0f4:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801c0f8:	e7e5      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c0fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c0fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c100:	9307      	str	r3, [sp, #28]
 801c102:	2b2a      	cmp	r3, #42	; 0x2a
 801c104:	d113      	bne.n	801c12e <_svfprintf_r+0x246>
 801c106:	f856 0b04 	ldr.w	r0, [r6], #4
 801c10a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c10c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801c110:	9304      	str	r3, [sp, #16]
 801c112:	e7d8      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c114:	9804      	ldr	r0, [sp, #16]
 801c116:	fb07 3300 	mla	r3, r7, r0, r3
 801c11a:	9304      	str	r3, [sp, #16]
 801c11c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c120:	9307      	str	r3, [sp, #28]
 801c122:	9b07      	ldr	r3, [sp, #28]
 801c124:	3b30      	subs	r3, #48	; 0x30
 801c126:	2b09      	cmp	r3, #9
 801c128:	d9f4      	bls.n	801c114 <_svfprintf_r+0x22c>
 801c12a:	920b      	str	r2, [sp, #44]	; 0x2c
 801c12c:	e748      	b.n	801bfc0 <_svfprintf_r+0xd8>
 801c12e:	2300      	movs	r3, #0
 801c130:	9304      	str	r3, [sp, #16]
 801c132:	e7f6      	b.n	801c122 <_svfprintf_r+0x23a>
 801c134:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801c138:	e7c5      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c13a:	2300      	movs	r3, #0
 801c13c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c13e:	9310      	str	r3, [sp, #64]	; 0x40
 801c140:	9b07      	ldr	r3, [sp, #28]
 801c142:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c144:	3b30      	subs	r3, #48	; 0x30
 801c146:	fb07 3300 	mla	r3, r7, r0, r3
 801c14a:	9310      	str	r3, [sp, #64]	; 0x40
 801c14c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c150:	9307      	str	r3, [sp, #28]
 801c152:	3b30      	subs	r3, #48	; 0x30
 801c154:	2b09      	cmp	r3, #9
 801c156:	d9f3      	bls.n	801c140 <_svfprintf_r+0x258>
 801c158:	e7e7      	b.n	801c12a <_svfprintf_r+0x242>
 801c15a:	f048 0808 	orr.w	r8, r8, #8
 801c15e:	e7b2      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c162:	781b      	ldrb	r3, [r3, #0]
 801c164:	2b68      	cmp	r3, #104	; 0x68
 801c166:	bf01      	itttt	eq
 801c168:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801c16a:	3301      	addeq	r3, #1
 801c16c:	930b      	streq	r3, [sp, #44]	; 0x2c
 801c16e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801c172:	bf18      	it	ne
 801c174:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801c178:	e7a5      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c17c:	781b      	ldrb	r3, [r3, #0]
 801c17e:	2b6c      	cmp	r3, #108	; 0x6c
 801c180:	d105      	bne.n	801c18e <_svfprintf_r+0x2a6>
 801c182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c184:	3301      	adds	r3, #1
 801c186:	930b      	str	r3, [sp, #44]	; 0x2c
 801c188:	f048 0820 	orr.w	r8, r8, #32
 801c18c:	e79b      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c18e:	f048 0810 	orr.w	r8, r8, #16
 801c192:	e798      	b.n	801c0c6 <_svfprintf_r+0x1de>
 801c194:	f3af 8000 	nop.w
	...
 801c1a0:	4632      	mov	r2, r6
 801c1a2:	2000      	movs	r0, #0
 801c1a4:	f852 3b04 	ldr.w	r3, [r2], #4
 801c1a8:	9206      	str	r2, [sp, #24]
 801c1aa:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801c1ae:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801c1b2:	2301      	movs	r3, #1
 801c1b4:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801c1b8:	9003      	str	r0, [sp, #12]
 801c1ba:	9304      	str	r3, [sp, #16]
 801c1bc:	4606      	mov	r6, r0
 801c1be:	4605      	mov	r5, r0
 801c1c0:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801c1c4:	e1b8      	b.n	801c538 <_svfprintf_r+0x650>
 801c1c6:	f048 0810 	orr.w	r8, r8, #16
 801c1ca:	f018 0f20 	tst.w	r8, #32
 801c1ce:	d012      	beq.n	801c1f6 <_svfprintf_r+0x30e>
 801c1d0:	3607      	adds	r6, #7
 801c1d2:	f026 0307 	bic.w	r3, r6, #7
 801c1d6:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c1da:	9306      	str	r3, [sp, #24]
 801c1dc:	2e00      	cmp	r6, #0
 801c1de:	f177 0300 	sbcs.w	r3, r7, #0
 801c1e2:	da06      	bge.n	801c1f2 <_svfprintf_r+0x30a>
 801c1e4:	4276      	negs	r6, r6
 801c1e6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801c1ea:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801c1ee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c1f2:	2301      	movs	r3, #1
 801c1f4:	e38e      	b.n	801c914 <_svfprintf_r+0xa2c>
 801c1f6:	1d33      	adds	r3, r6, #4
 801c1f8:	f018 0f10 	tst.w	r8, #16
 801c1fc:	9306      	str	r3, [sp, #24]
 801c1fe:	d002      	beq.n	801c206 <_svfprintf_r+0x31e>
 801c200:	6836      	ldr	r6, [r6, #0]
 801c202:	17f7      	asrs	r7, r6, #31
 801c204:	e7ea      	b.n	801c1dc <_svfprintf_r+0x2f4>
 801c206:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c20a:	6836      	ldr	r6, [r6, #0]
 801c20c:	d001      	beq.n	801c212 <_svfprintf_r+0x32a>
 801c20e:	b236      	sxth	r6, r6
 801c210:	e7f7      	b.n	801c202 <_svfprintf_r+0x31a>
 801c212:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c216:	bf18      	it	ne
 801c218:	b276      	sxtbne	r6, r6
 801c21a:	e7f2      	b.n	801c202 <_svfprintf_r+0x31a>
 801c21c:	3607      	adds	r6, #7
 801c21e:	f026 0307 	bic.w	r3, r6, #7
 801c222:	ecb3 7b02 	vldmia	r3!, {d7}
 801c226:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c22a:	9306      	str	r3, [sp, #24]
 801c22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c22e:	ee09 3a10 	vmov	s18, r3
 801c232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c238:	ee09 3a90 	vmov	s19, r3
 801c23c:	f04f 32ff 	mov.w	r2, #4294967295
 801c240:	4b3a      	ldr	r3, [pc, #232]	; (801c32c <_svfprintf_r+0x444>)
 801c242:	ec51 0b19 	vmov	r0, r1, d9
 801c246:	f7e4 fca1 	bl	8000b8c <__aeabi_dcmpun>
 801c24a:	bb10      	cbnz	r0, 801c292 <_svfprintf_r+0x3aa>
 801c24c:	4b37      	ldr	r3, [pc, #220]	; (801c32c <_svfprintf_r+0x444>)
 801c24e:	ec51 0b19 	vmov	r0, r1, d9
 801c252:	f04f 32ff 	mov.w	r2, #4294967295
 801c256:	f7e4 fc7b 	bl	8000b50 <__aeabi_dcmple>
 801c25a:	b9d0      	cbnz	r0, 801c292 <_svfprintf_r+0x3aa>
 801c25c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c260:	2200      	movs	r2, #0
 801c262:	2300      	movs	r3, #0
 801c264:	f7e4 fc6a 	bl	8000b3c <__aeabi_dcmplt>
 801c268:	b110      	cbz	r0, 801c270 <_svfprintf_r+0x388>
 801c26a:	232d      	movs	r3, #45	; 0x2d
 801c26c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c270:	4a2f      	ldr	r2, [pc, #188]	; (801c330 <_svfprintf_r+0x448>)
 801c272:	4830      	ldr	r0, [pc, #192]	; (801c334 <_svfprintf_r+0x44c>)
 801c274:	9b07      	ldr	r3, [sp, #28]
 801c276:	2100      	movs	r1, #0
 801c278:	2b47      	cmp	r3, #71	; 0x47
 801c27a:	bfd4      	ite	le
 801c27c:	4693      	movle	fp, r2
 801c27e:	4683      	movgt	fp, r0
 801c280:	2303      	movs	r3, #3
 801c282:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801c286:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801c28a:	2600      	movs	r6, #0
 801c28c:	4633      	mov	r3, r6
 801c28e:	f001 b802 	b.w	801d296 <_svfprintf_r+0x13ae>
 801c292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c296:	4610      	mov	r0, r2
 801c298:	4619      	mov	r1, r3
 801c29a:	f7e4 fc77 	bl	8000b8c <__aeabi_dcmpun>
 801c29e:	b140      	cbz	r0, 801c2b2 <_svfprintf_r+0x3ca>
 801c2a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2a2:	4a25      	ldr	r2, [pc, #148]	; (801c338 <_svfprintf_r+0x450>)
 801c2a4:	4825      	ldr	r0, [pc, #148]	; (801c33c <_svfprintf_r+0x454>)
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	bfbc      	itt	lt
 801c2aa:	232d      	movlt	r3, #45	; 0x2d
 801c2ac:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801c2b0:	e7e0      	b.n	801c274 <_svfprintf_r+0x38c>
 801c2b2:	9b07      	ldr	r3, [sp, #28]
 801c2b4:	f023 0320 	bic.w	r3, r3, #32
 801c2b8:	2b41      	cmp	r3, #65	; 0x41
 801c2ba:	9308      	str	r3, [sp, #32]
 801c2bc:	d125      	bne.n	801c30a <_svfprintf_r+0x422>
 801c2be:	2330      	movs	r3, #48	; 0x30
 801c2c0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801c2c4:	9b07      	ldr	r3, [sp, #28]
 801c2c6:	2b61      	cmp	r3, #97	; 0x61
 801c2c8:	bf0c      	ite	eq
 801c2ca:	2378      	moveq	r3, #120	; 0x78
 801c2cc:	2358      	movne	r3, #88	; 0x58
 801c2ce:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801c2d2:	9b04      	ldr	r3, [sp, #16]
 801c2d4:	2b63      	cmp	r3, #99	; 0x63
 801c2d6:	f048 0802 	orr.w	r8, r8, #2
 801c2da:	dd31      	ble.n	801c340 <_svfprintf_r+0x458>
 801c2dc:	1c59      	adds	r1, r3, #1
 801c2de:	4650      	mov	r0, sl
 801c2e0:	f003 ff5a 	bl	8020198 <_malloc_r>
 801c2e4:	4683      	mov	fp, r0
 801c2e6:	2800      	cmp	r0, #0
 801c2e8:	f040 81fe 	bne.w	801c6e8 <_svfprintf_r+0x800>
 801c2ec:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2f4:	f8a9 300c 	strh.w	r3, [r9, #12]
 801c2f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801c2fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c302:	bf18      	it	ne
 801c304:	f04f 33ff 	movne.w	r3, #4294967295
 801c308:	e614      	b.n	801bf34 <_svfprintf_r+0x4c>
 801c30a:	9b04      	ldr	r3, [sp, #16]
 801c30c:	3301      	adds	r3, #1
 801c30e:	f000 81ed 	beq.w	801c6ec <_svfprintf_r+0x804>
 801c312:	9b08      	ldr	r3, [sp, #32]
 801c314:	2b47      	cmp	r3, #71	; 0x47
 801c316:	f040 81ec 	bne.w	801c6f2 <_svfprintf_r+0x80a>
 801c31a:	9b04      	ldr	r3, [sp, #16]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	f040 81e8 	bne.w	801c6f2 <_svfprintf_r+0x80a>
 801c322:	9303      	str	r3, [sp, #12]
 801c324:	2301      	movs	r3, #1
 801c326:	9304      	str	r3, [sp, #16]
 801c328:	e00d      	b.n	801c346 <_svfprintf_r+0x45e>
 801c32a:	bf00      	nop
 801c32c:	7fefffff 	.word	0x7fefffff
 801c330:	0802936c 	.word	0x0802936c
 801c334:	08029370 	.word	0x08029370
 801c338:	08029374 	.word	0x08029374
 801c33c:	08029378 	.word	0x08029378
 801c340:	9003      	str	r0, [sp, #12]
 801c342:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801c346:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801c34a:	9311      	str	r3, [sp, #68]	; 0x44
 801c34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c34e:	2b00      	cmp	r3, #0
 801c350:	f280 81d1 	bge.w	801c6f6 <_svfprintf_r+0x80e>
 801c354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c356:	ee08 3a10 	vmov	s16, r3
 801c35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c35c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801c360:	ee08 3a90 	vmov	s17, r3
 801c364:	232d      	movs	r3, #45	; 0x2d
 801c366:	9318      	str	r3, [sp, #96]	; 0x60
 801c368:	9b08      	ldr	r3, [sp, #32]
 801c36a:	2b41      	cmp	r3, #65	; 0x41
 801c36c:	f040 81e1 	bne.w	801c732 <_svfprintf_r+0x84a>
 801c370:	eeb0 0a48 	vmov.f32	s0, s16
 801c374:	eef0 0a68 	vmov.f32	s1, s17
 801c378:	a81c      	add	r0, sp, #112	; 0x70
 801c37a:	f004 fc8b 	bl	8020c94 <frexp>
 801c37e:	2200      	movs	r2, #0
 801c380:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801c384:	ec51 0b10 	vmov	r0, r1, d0
 801c388:	f7e4 f966 	bl	8000658 <__aeabi_dmul>
 801c38c:	2200      	movs	r2, #0
 801c38e:	2300      	movs	r3, #0
 801c390:	4606      	mov	r6, r0
 801c392:	460f      	mov	r7, r1
 801c394:	f7e4 fbc8 	bl	8000b28 <__aeabi_dcmpeq>
 801c398:	b108      	cbz	r0, 801c39e <_svfprintf_r+0x4b6>
 801c39a:	2301      	movs	r3, #1
 801c39c:	931c      	str	r3, [sp, #112]	; 0x70
 801c39e:	4bb4      	ldr	r3, [pc, #720]	; (801c670 <_svfprintf_r+0x788>)
 801c3a0:	4ab4      	ldr	r2, [pc, #720]	; (801c674 <_svfprintf_r+0x78c>)
 801c3a2:	9907      	ldr	r1, [sp, #28]
 801c3a4:	2961      	cmp	r1, #97	; 0x61
 801c3a6:	bf18      	it	ne
 801c3a8:	461a      	movne	r2, r3
 801c3aa:	9b04      	ldr	r3, [sp, #16]
 801c3ac:	9217      	str	r2, [sp, #92]	; 0x5c
 801c3ae:	3b01      	subs	r3, #1
 801c3b0:	9305      	str	r3, [sp, #20]
 801c3b2:	465d      	mov	r5, fp
 801c3b4:	4bb0      	ldr	r3, [pc, #704]	; (801c678 <_svfprintf_r+0x790>)
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	4630      	mov	r0, r6
 801c3ba:	4639      	mov	r1, r7
 801c3bc:	f7e4 f94c 	bl	8000658 <__aeabi_dmul>
 801c3c0:	460f      	mov	r7, r1
 801c3c2:	4606      	mov	r6, r0
 801c3c4:	f7e4 fbf8 	bl	8000bb8 <__aeabi_d2iz>
 801c3c8:	9019      	str	r0, [sp, #100]	; 0x64
 801c3ca:	f7e4 f8db 	bl	8000584 <__aeabi_i2d>
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	460b      	mov	r3, r1
 801c3d2:	4630      	mov	r0, r6
 801c3d4:	4639      	mov	r1, r7
 801c3d6:	f7e3 ff87 	bl	80002e8 <__aeabi_dsub>
 801c3da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c3dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c3de:	5c9b      	ldrb	r3, [r3, r2]
 801c3e0:	f805 3b01 	strb.w	r3, [r5], #1
 801c3e4:	9b05      	ldr	r3, [sp, #20]
 801c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c3e8:	1c5a      	adds	r2, r3, #1
 801c3ea:	4606      	mov	r6, r0
 801c3ec:	460f      	mov	r7, r1
 801c3ee:	d007      	beq.n	801c400 <_svfprintf_r+0x518>
 801c3f0:	3b01      	subs	r3, #1
 801c3f2:	9305      	str	r3, [sp, #20]
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	2300      	movs	r3, #0
 801c3f8:	f7e4 fb96 	bl	8000b28 <__aeabi_dcmpeq>
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	d0d9      	beq.n	801c3b4 <_svfprintf_r+0x4cc>
 801c400:	4b9e      	ldr	r3, [pc, #632]	; (801c67c <_svfprintf_r+0x794>)
 801c402:	2200      	movs	r2, #0
 801c404:	4630      	mov	r0, r6
 801c406:	4639      	mov	r1, r7
 801c408:	f7e4 fbb6 	bl	8000b78 <__aeabi_dcmpgt>
 801c40c:	b960      	cbnz	r0, 801c428 <_svfprintf_r+0x540>
 801c40e:	4b9b      	ldr	r3, [pc, #620]	; (801c67c <_svfprintf_r+0x794>)
 801c410:	2200      	movs	r2, #0
 801c412:	4630      	mov	r0, r6
 801c414:	4639      	mov	r1, r7
 801c416:	f7e4 fb87 	bl	8000b28 <__aeabi_dcmpeq>
 801c41a:	2800      	cmp	r0, #0
 801c41c:	f000 8184 	beq.w	801c728 <_svfprintf_r+0x840>
 801c420:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c422:	07df      	lsls	r7, r3, #31
 801c424:	f140 8180 	bpl.w	801c728 <_svfprintf_r+0x840>
 801c428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c42a:	9520      	str	r5, [sp, #128]	; 0x80
 801c42c:	7bd9      	ldrb	r1, [r3, #15]
 801c42e:	2030      	movs	r0, #48	; 0x30
 801c430:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c432:	1e53      	subs	r3, r2, #1
 801c434:	9320      	str	r3, [sp, #128]	; 0x80
 801c436:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801c43a:	428b      	cmp	r3, r1
 801c43c:	f000 8163 	beq.w	801c706 <_svfprintf_r+0x81e>
 801c440:	2b39      	cmp	r3, #57	; 0x39
 801c442:	bf0b      	itete	eq
 801c444:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801c446:	3301      	addne	r3, #1
 801c448:	7a9b      	ldrbeq	r3, [r3, #10]
 801c44a:	b2db      	uxtbne	r3, r3
 801c44c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c450:	eba5 030b 	sub.w	r3, r5, fp
 801c454:	9305      	str	r3, [sp, #20]
 801c456:	9b08      	ldr	r3, [sp, #32]
 801c458:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c45a:	2b47      	cmp	r3, #71	; 0x47
 801c45c:	f040 81b1 	bne.w	801c7c2 <_svfprintf_r+0x8da>
 801c460:	1cee      	adds	r6, r5, #3
 801c462:	db03      	blt.n	801c46c <_svfprintf_r+0x584>
 801c464:	9b04      	ldr	r3, [sp, #16]
 801c466:	42ab      	cmp	r3, r5
 801c468:	f280 81d6 	bge.w	801c818 <_svfprintf_r+0x930>
 801c46c:	9b07      	ldr	r3, [sp, #28]
 801c46e:	3b02      	subs	r3, #2
 801c470:	9307      	str	r3, [sp, #28]
 801c472:	9907      	ldr	r1, [sp, #28]
 801c474:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801c478:	f021 0120 	bic.w	r1, r1, #32
 801c47c:	2941      	cmp	r1, #65	; 0x41
 801c47e:	bf08      	it	eq
 801c480:	320f      	addeq	r2, #15
 801c482:	f105 33ff 	add.w	r3, r5, #4294967295
 801c486:	bf06      	itte	eq
 801c488:	b2d2      	uxtbeq	r2, r2
 801c48a:	2101      	moveq	r1, #1
 801c48c:	2100      	movne	r1, #0
 801c48e:	2b00      	cmp	r3, #0
 801c490:	931c      	str	r3, [sp, #112]	; 0x70
 801c492:	bfb8      	it	lt
 801c494:	f1c5 0301 	rsblt	r3, r5, #1
 801c498:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801c49c:	bfb4      	ite	lt
 801c49e:	222d      	movlt	r2, #45	; 0x2d
 801c4a0:	222b      	movge	r2, #43	; 0x2b
 801c4a2:	2b09      	cmp	r3, #9
 801c4a4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801c4a8:	f340 81a4 	ble.w	801c7f4 <_svfprintf_r+0x90c>
 801c4ac:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801c4b0:	260a      	movs	r6, #10
 801c4b2:	4611      	mov	r1, r2
 801c4b4:	fb93 f5f6 	sdiv	r5, r3, r6
 801c4b8:	fb06 3015 	mls	r0, r6, r5, r3
 801c4bc:	3030      	adds	r0, #48	; 0x30
 801c4be:	f801 0c01 	strb.w	r0, [r1, #-1]
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	2863      	cmp	r0, #99	; 0x63
 801c4c6:	f102 32ff 	add.w	r2, r2, #4294967295
 801c4ca:	462b      	mov	r3, r5
 801c4cc:	dcf1      	bgt.n	801c4b2 <_svfprintf_r+0x5ca>
 801c4ce:	3330      	adds	r3, #48	; 0x30
 801c4d0:	1e88      	subs	r0, r1, #2
 801c4d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c4d6:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801c4da:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c4de:	4603      	mov	r3, r0
 801c4e0:	42ab      	cmp	r3, r5
 801c4e2:	f0c0 8182 	bcc.w	801c7ea <_svfprintf_r+0x902>
 801c4e6:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801c4ea:	1a52      	subs	r2, r2, r1
 801c4ec:	42a8      	cmp	r0, r5
 801c4ee:	bf88      	it	hi
 801c4f0:	2200      	movhi	r2, #0
 801c4f2:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801c4f6:	441a      	add	r2, r3
 801c4f8:	ab1e      	add	r3, sp, #120	; 0x78
 801c4fa:	1ad3      	subs	r3, r2, r3
 801c4fc:	9a05      	ldr	r2, [sp, #20]
 801c4fe:	9315      	str	r3, [sp, #84]	; 0x54
 801c500:	2a01      	cmp	r2, #1
 801c502:	4413      	add	r3, r2
 801c504:	9304      	str	r3, [sp, #16]
 801c506:	dc02      	bgt.n	801c50e <_svfprintf_r+0x626>
 801c508:	f018 0f01 	tst.w	r8, #1
 801c50c:	d003      	beq.n	801c516 <_svfprintf_r+0x62e>
 801c50e:	9b04      	ldr	r3, [sp, #16]
 801c510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c512:	4413      	add	r3, r2
 801c514:	9304      	str	r3, [sp, #16]
 801c516:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801c51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c51e:	9311      	str	r3, [sp, #68]	; 0x44
 801c520:	2300      	movs	r3, #0
 801c522:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c526:	461d      	mov	r5, r3
 801c528:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c52a:	b113      	cbz	r3, 801c532 <_svfprintf_r+0x64a>
 801c52c:	232d      	movs	r3, #45	; 0x2d
 801c52e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c532:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801c536:	2600      	movs	r6, #0
 801c538:	9b04      	ldr	r3, [sp, #16]
 801c53a:	42b3      	cmp	r3, r6
 801c53c:	bfb8      	it	lt
 801c53e:	4633      	movlt	r3, r6
 801c540:	9311      	str	r3, [sp, #68]	; 0x44
 801c542:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c546:	b113      	cbz	r3, 801c54e <_svfprintf_r+0x666>
 801c548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c54a:	3301      	adds	r3, #1
 801c54c:	9311      	str	r3, [sp, #68]	; 0x44
 801c54e:	f018 0302 	ands.w	r3, r8, #2
 801c552:	9317      	str	r3, [sp, #92]	; 0x5c
 801c554:	bf1e      	ittt	ne
 801c556:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801c558:	3302      	addne	r3, #2
 801c55a:	9311      	strne	r3, [sp, #68]	; 0x44
 801c55c:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801c560:	9318      	str	r3, [sp, #96]	; 0x60
 801c562:	d11f      	bne.n	801c5a4 <_svfprintf_r+0x6bc>
 801c564:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c568:	1a9f      	subs	r7, r3, r2
 801c56a:	2f00      	cmp	r7, #0
 801c56c:	dd1a      	ble.n	801c5a4 <_svfprintf_r+0x6bc>
 801c56e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c572:	4843      	ldr	r0, [pc, #268]	; (801c680 <_svfprintf_r+0x798>)
 801c574:	6020      	str	r0, [r4, #0]
 801c576:	2f10      	cmp	r7, #16
 801c578:	f103 0301 	add.w	r3, r3, #1
 801c57c:	f104 0108 	add.w	r1, r4, #8
 801c580:	f300 82e6 	bgt.w	801cb50 <_svfprintf_r+0xc68>
 801c584:	6067      	str	r7, [r4, #4]
 801c586:	2b07      	cmp	r3, #7
 801c588:	4417      	add	r7, r2
 801c58a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c58e:	f340 82f2 	ble.w	801cb76 <_svfprintf_r+0xc8e>
 801c592:	aa22      	add	r2, sp, #136	; 0x88
 801c594:	4649      	mov	r1, r9
 801c596:	4650      	mov	r0, sl
 801c598:	f004 fcc6 	bl	8020f28 <__ssprint_r>
 801c59c:	2800      	cmp	r0, #0
 801c59e:	f040 861d 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801c5a2:	ac25      	add	r4, sp, #148	; 0x94
 801c5a4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c5a8:	b173      	cbz	r3, 801c5c8 <_svfprintf_r+0x6e0>
 801c5aa:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801c5ae:	6023      	str	r3, [r4, #0]
 801c5b0:	2301      	movs	r3, #1
 801c5b2:	6063      	str	r3, [r4, #4]
 801c5b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c5b6:	3301      	adds	r3, #1
 801c5b8:	9324      	str	r3, [sp, #144]	; 0x90
 801c5ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c5bc:	3301      	adds	r3, #1
 801c5be:	2b07      	cmp	r3, #7
 801c5c0:	9323      	str	r3, [sp, #140]	; 0x8c
 801c5c2:	f300 82da 	bgt.w	801cb7a <_svfprintf_r+0xc92>
 801c5c6:	3408      	adds	r4, #8
 801c5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c5ca:	b16b      	cbz	r3, 801c5e8 <_svfprintf_r+0x700>
 801c5cc:	ab1b      	add	r3, sp, #108	; 0x6c
 801c5ce:	6023      	str	r3, [r4, #0]
 801c5d0:	2302      	movs	r3, #2
 801c5d2:	6063      	str	r3, [r4, #4]
 801c5d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c5d6:	3302      	adds	r3, #2
 801c5d8:	9324      	str	r3, [sp, #144]	; 0x90
 801c5da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c5dc:	3301      	adds	r3, #1
 801c5de:	2b07      	cmp	r3, #7
 801c5e0:	9323      	str	r3, [sp, #140]	; 0x8c
 801c5e2:	f300 82d4 	bgt.w	801cb8e <_svfprintf_r+0xca6>
 801c5e6:	3408      	adds	r4, #8
 801c5e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c5ea:	2b80      	cmp	r3, #128	; 0x80
 801c5ec:	d11f      	bne.n	801c62e <_svfprintf_r+0x746>
 801c5ee:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c5f2:	1a9f      	subs	r7, r3, r2
 801c5f4:	2f00      	cmp	r7, #0
 801c5f6:	dd1a      	ble.n	801c62e <_svfprintf_r+0x746>
 801c5f8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c5fc:	4821      	ldr	r0, [pc, #132]	; (801c684 <_svfprintf_r+0x79c>)
 801c5fe:	6020      	str	r0, [r4, #0]
 801c600:	2f10      	cmp	r7, #16
 801c602:	f103 0301 	add.w	r3, r3, #1
 801c606:	f104 0108 	add.w	r1, r4, #8
 801c60a:	f300 82ca 	bgt.w	801cba2 <_svfprintf_r+0xcba>
 801c60e:	6067      	str	r7, [r4, #4]
 801c610:	2b07      	cmp	r3, #7
 801c612:	4417      	add	r7, r2
 801c614:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c618:	f340 82d6 	ble.w	801cbc8 <_svfprintf_r+0xce0>
 801c61c:	aa22      	add	r2, sp, #136	; 0x88
 801c61e:	4649      	mov	r1, r9
 801c620:	4650      	mov	r0, sl
 801c622:	f004 fc81 	bl	8020f28 <__ssprint_r>
 801c626:	2800      	cmp	r0, #0
 801c628:	f040 85d8 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801c62c:	ac25      	add	r4, sp, #148	; 0x94
 801c62e:	9b04      	ldr	r3, [sp, #16]
 801c630:	1af6      	subs	r6, r6, r3
 801c632:	2e00      	cmp	r6, #0
 801c634:	dd28      	ble.n	801c688 <_svfprintf_r+0x7a0>
 801c636:	4f13      	ldr	r7, [pc, #76]	; (801c684 <_svfprintf_r+0x79c>)
 801c638:	6027      	str	r7, [r4, #0]
 801c63a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c63e:	2e10      	cmp	r6, #16
 801c640:	f103 0301 	add.w	r3, r3, #1
 801c644:	f104 0108 	add.w	r1, r4, #8
 801c648:	f300 82c0 	bgt.w	801cbcc <_svfprintf_r+0xce4>
 801c64c:	6066      	str	r6, [r4, #4]
 801c64e:	2b07      	cmp	r3, #7
 801c650:	4416      	add	r6, r2
 801c652:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c656:	f340 82cc 	ble.w	801cbf2 <_svfprintf_r+0xd0a>
 801c65a:	aa22      	add	r2, sp, #136	; 0x88
 801c65c:	4649      	mov	r1, r9
 801c65e:	4650      	mov	r0, sl
 801c660:	f004 fc62 	bl	8020f28 <__ssprint_r>
 801c664:	2800      	cmp	r0, #0
 801c666:	f040 85b9 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801c66a:	ac25      	add	r4, sp, #148	; 0x94
 801c66c:	e00c      	b.n	801c688 <_svfprintf_r+0x7a0>
 801c66e:	bf00      	nop
 801c670:	0802938d 	.word	0x0802938d
 801c674:	0802937c 	.word	0x0802937c
 801c678:	40300000 	.word	0x40300000
 801c67c:	3fe00000 	.word	0x3fe00000
 801c680:	080293a0 	.word	0x080293a0
 801c684:	080293b0 	.word	0x080293b0
 801c688:	f418 7f80 	tst.w	r8, #256	; 0x100
 801c68c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801c68e:	f040 82b7 	bne.w	801cc00 <_svfprintf_r+0xd18>
 801c692:	9b04      	ldr	r3, [sp, #16]
 801c694:	f8c4 b000 	str.w	fp, [r4]
 801c698:	441e      	add	r6, r3
 801c69a:	6063      	str	r3, [r4, #4]
 801c69c:	9624      	str	r6, [sp, #144]	; 0x90
 801c69e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c6a0:	3301      	adds	r3, #1
 801c6a2:	2b07      	cmp	r3, #7
 801c6a4:	9323      	str	r3, [sp, #140]	; 0x8c
 801c6a6:	f300 82f0 	bgt.w	801cc8a <_svfprintf_r+0xda2>
 801c6aa:	3408      	adds	r4, #8
 801c6ac:	f018 0f04 	tst.w	r8, #4
 801c6b0:	f040 8576 	bne.w	801d1a0 <_svfprintf_r+0x12b8>
 801c6b4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c6b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c6ba:	428a      	cmp	r2, r1
 801c6bc:	bfac      	ite	ge
 801c6be:	189b      	addge	r3, r3, r2
 801c6c0:	185b      	addlt	r3, r3, r1
 801c6c2:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c6c6:	b13b      	cbz	r3, 801c6d8 <_svfprintf_r+0x7f0>
 801c6c8:	aa22      	add	r2, sp, #136	; 0x88
 801c6ca:	4649      	mov	r1, r9
 801c6cc:	4650      	mov	r0, sl
 801c6ce:	f004 fc2b 	bl	8020f28 <__ssprint_r>
 801c6d2:	2800      	cmp	r0, #0
 801c6d4:	f040 8582 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801c6d8:	2300      	movs	r3, #0
 801c6da:	9323      	str	r3, [sp, #140]	; 0x8c
 801c6dc:	9b03      	ldr	r3, [sp, #12]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	f040 8598 	bne.w	801d214 <_svfprintf_r+0x132c>
 801c6e4:	ac25      	add	r4, sp, #148	; 0x94
 801c6e6:	e0ed      	b.n	801c8c4 <_svfprintf_r+0x9dc>
 801c6e8:	9003      	str	r0, [sp, #12]
 801c6ea:	e62c      	b.n	801c346 <_svfprintf_r+0x45e>
 801c6ec:	9003      	str	r0, [sp, #12]
 801c6ee:	2306      	movs	r3, #6
 801c6f0:	e619      	b.n	801c326 <_svfprintf_r+0x43e>
 801c6f2:	9003      	str	r0, [sp, #12]
 801c6f4:	e627      	b.n	801c346 <_svfprintf_r+0x45e>
 801c6f6:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c6fa:	2300      	movs	r3, #0
 801c6fc:	eeb0 8a47 	vmov.f32	s16, s14
 801c700:	eef0 8a67 	vmov.f32	s17, s15
 801c704:	e62f      	b.n	801c366 <_svfprintf_r+0x47e>
 801c706:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c70a:	e691      	b.n	801c430 <_svfprintf_r+0x548>
 801c70c:	f803 0b01 	strb.w	r0, [r3], #1
 801c710:	1aca      	subs	r2, r1, r3
 801c712:	2a00      	cmp	r2, #0
 801c714:	dafa      	bge.n	801c70c <_svfprintf_r+0x824>
 801c716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c71a:	3201      	adds	r2, #1
 801c71c:	f103 0301 	add.w	r3, r3, #1
 801c720:	bfb8      	it	lt
 801c722:	2300      	movlt	r3, #0
 801c724:	441d      	add	r5, r3
 801c726:	e693      	b.n	801c450 <_svfprintf_r+0x568>
 801c728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c72a:	462b      	mov	r3, r5
 801c72c:	18a9      	adds	r1, r5, r2
 801c72e:	2030      	movs	r0, #48	; 0x30
 801c730:	e7ee      	b.n	801c710 <_svfprintf_r+0x828>
 801c732:	9b08      	ldr	r3, [sp, #32]
 801c734:	2b46      	cmp	r3, #70	; 0x46
 801c736:	d005      	beq.n	801c744 <_svfprintf_r+0x85c>
 801c738:	2b45      	cmp	r3, #69	; 0x45
 801c73a:	d11b      	bne.n	801c774 <_svfprintf_r+0x88c>
 801c73c:	9b04      	ldr	r3, [sp, #16]
 801c73e:	1c5d      	adds	r5, r3, #1
 801c740:	2102      	movs	r1, #2
 801c742:	e001      	b.n	801c748 <_svfprintf_r+0x860>
 801c744:	9d04      	ldr	r5, [sp, #16]
 801c746:	2103      	movs	r1, #3
 801c748:	ab20      	add	r3, sp, #128	; 0x80
 801c74a:	9301      	str	r3, [sp, #4]
 801c74c:	ab1d      	add	r3, sp, #116	; 0x74
 801c74e:	9300      	str	r3, [sp, #0]
 801c750:	462a      	mov	r2, r5
 801c752:	ab1c      	add	r3, sp, #112	; 0x70
 801c754:	4650      	mov	r0, sl
 801c756:	eeb0 0a48 	vmov.f32	s0, s16
 801c75a:	eef0 0a68 	vmov.f32	s1, s17
 801c75e:	f002 fb5b 	bl	801ee18 <_dtoa_r>
 801c762:	9b08      	ldr	r3, [sp, #32]
 801c764:	2b47      	cmp	r3, #71	; 0x47
 801c766:	4683      	mov	fp, r0
 801c768:	d106      	bne.n	801c778 <_svfprintf_r+0x890>
 801c76a:	f018 0f01 	tst.w	r8, #1
 801c76e:	d103      	bne.n	801c778 <_svfprintf_r+0x890>
 801c770:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c772:	e66d      	b.n	801c450 <_svfprintf_r+0x568>
 801c774:	9d04      	ldr	r5, [sp, #16]
 801c776:	e7e3      	b.n	801c740 <_svfprintf_r+0x858>
 801c778:	9b08      	ldr	r3, [sp, #32]
 801c77a:	2b46      	cmp	r3, #70	; 0x46
 801c77c:	eb0b 0605 	add.w	r6, fp, r5
 801c780:	d10f      	bne.n	801c7a2 <_svfprintf_r+0x8ba>
 801c782:	f89b 3000 	ldrb.w	r3, [fp]
 801c786:	2b30      	cmp	r3, #48	; 0x30
 801c788:	d109      	bne.n	801c79e <_svfprintf_r+0x8b6>
 801c78a:	ec51 0b18 	vmov	r0, r1, d8
 801c78e:	2200      	movs	r2, #0
 801c790:	2300      	movs	r3, #0
 801c792:	f7e4 f9c9 	bl	8000b28 <__aeabi_dcmpeq>
 801c796:	b910      	cbnz	r0, 801c79e <_svfprintf_r+0x8b6>
 801c798:	f1c5 0501 	rsb	r5, r5, #1
 801c79c:	951c      	str	r5, [sp, #112]	; 0x70
 801c79e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c7a0:	441e      	add	r6, r3
 801c7a2:	ec51 0b18 	vmov	r0, r1, d8
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	2300      	movs	r3, #0
 801c7aa:	f7e4 f9bd 	bl	8000b28 <__aeabi_dcmpeq>
 801c7ae:	b100      	cbz	r0, 801c7b2 <_svfprintf_r+0x8ca>
 801c7b0:	9620      	str	r6, [sp, #128]	; 0x80
 801c7b2:	2230      	movs	r2, #48	; 0x30
 801c7b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c7b6:	429e      	cmp	r6, r3
 801c7b8:	d9da      	bls.n	801c770 <_svfprintf_r+0x888>
 801c7ba:	1c59      	adds	r1, r3, #1
 801c7bc:	9120      	str	r1, [sp, #128]	; 0x80
 801c7be:	701a      	strb	r2, [r3, #0]
 801c7c0:	e7f8      	b.n	801c7b4 <_svfprintf_r+0x8cc>
 801c7c2:	9b08      	ldr	r3, [sp, #32]
 801c7c4:	2b46      	cmp	r3, #70	; 0x46
 801c7c6:	f47f ae54 	bne.w	801c472 <_svfprintf_r+0x58a>
 801c7ca:	9a04      	ldr	r2, [sp, #16]
 801c7cc:	f008 0301 	and.w	r3, r8, #1
 801c7d0:	2d00      	cmp	r5, #0
 801c7d2:	ea43 0302 	orr.w	r3, r3, r2
 801c7d6:	dd1a      	ble.n	801c80e <_svfprintf_r+0x926>
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d034      	beq.n	801c846 <_svfprintf_r+0x95e>
 801c7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c7de:	18eb      	adds	r3, r5, r3
 801c7e0:	441a      	add	r2, r3
 801c7e2:	9204      	str	r2, [sp, #16]
 801c7e4:	2366      	movs	r3, #102	; 0x66
 801c7e6:	9307      	str	r3, [sp, #28]
 801c7e8:	e033      	b.n	801c852 <_svfprintf_r+0x96a>
 801c7ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c7ee:	f802 6b01 	strb.w	r6, [r2], #1
 801c7f2:	e675      	b.n	801c4e0 <_svfprintf_r+0x5f8>
 801c7f4:	b941      	cbnz	r1, 801c808 <_svfprintf_r+0x920>
 801c7f6:	2230      	movs	r2, #48	; 0x30
 801c7f8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801c7fc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801c800:	3330      	adds	r3, #48	; 0x30
 801c802:	f802 3b01 	strb.w	r3, [r2], #1
 801c806:	e677      	b.n	801c4f8 <_svfprintf_r+0x610>
 801c808:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c80c:	e7f8      	b.n	801c800 <_svfprintf_r+0x918>
 801c80e:	b1e3      	cbz	r3, 801c84a <_svfprintf_r+0x962>
 801c810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c812:	9a04      	ldr	r2, [sp, #16]
 801c814:	3301      	adds	r3, #1
 801c816:	e7e3      	b.n	801c7e0 <_svfprintf_r+0x8f8>
 801c818:	9b05      	ldr	r3, [sp, #20]
 801c81a:	429d      	cmp	r5, r3
 801c81c:	db07      	blt.n	801c82e <_svfprintf_r+0x946>
 801c81e:	f018 0f01 	tst.w	r8, #1
 801c822:	d02d      	beq.n	801c880 <_svfprintf_r+0x998>
 801c824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c826:	18eb      	adds	r3, r5, r3
 801c828:	9304      	str	r3, [sp, #16]
 801c82a:	2367      	movs	r3, #103	; 0x67
 801c82c:	e7db      	b.n	801c7e6 <_svfprintf_r+0x8fe>
 801c82e:	9b05      	ldr	r3, [sp, #20]
 801c830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c832:	2d00      	cmp	r5, #0
 801c834:	4413      	add	r3, r2
 801c836:	9304      	str	r3, [sp, #16]
 801c838:	dcf7      	bgt.n	801c82a <_svfprintf_r+0x942>
 801c83a:	9a04      	ldr	r2, [sp, #16]
 801c83c:	f1c5 0301 	rsb	r3, r5, #1
 801c840:	441a      	add	r2, r3
 801c842:	4613      	mov	r3, r2
 801c844:	e7f0      	b.n	801c828 <_svfprintf_r+0x940>
 801c846:	9504      	str	r5, [sp, #16]
 801c848:	e7cc      	b.n	801c7e4 <_svfprintf_r+0x8fc>
 801c84a:	2366      	movs	r3, #102	; 0x66
 801c84c:	9307      	str	r3, [sp, #28]
 801c84e:	2301      	movs	r3, #1
 801c850:	9304      	str	r3, [sp, #16]
 801c852:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801c856:	9309      	str	r3, [sp, #36]	; 0x24
 801c858:	d025      	beq.n	801c8a6 <_svfprintf_r+0x9be>
 801c85a:	2300      	movs	r3, #0
 801c85c:	2d00      	cmp	r5, #0
 801c85e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c862:	f77f ae61 	ble.w	801c528 <_svfprintf_r+0x640>
 801c866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c868:	781b      	ldrb	r3, [r3, #0]
 801c86a:	2bff      	cmp	r3, #255	; 0xff
 801c86c:	d10a      	bne.n	801c884 <_svfprintf_r+0x99c>
 801c86e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c872:	9904      	ldr	r1, [sp, #16]
 801c874:	4413      	add	r3, r2
 801c876:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c878:	fb02 1303 	mla	r3, r2, r3, r1
 801c87c:	9304      	str	r3, [sp, #16]
 801c87e:	e653      	b.n	801c528 <_svfprintf_r+0x640>
 801c880:	9504      	str	r5, [sp, #16]
 801c882:	e7d2      	b.n	801c82a <_svfprintf_r+0x942>
 801c884:	42ab      	cmp	r3, r5
 801c886:	daf2      	bge.n	801c86e <_svfprintf_r+0x986>
 801c888:	1aed      	subs	r5, r5, r3
 801c88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c88c:	785b      	ldrb	r3, [r3, #1]
 801c88e:	b133      	cbz	r3, 801c89e <_svfprintf_r+0x9b6>
 801c890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c892:	3301      	adds	r3, #1
 801c894:	9309      	str	r3, [sp, #36]	; 0x24
 801c896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c898:	3301      	adds	r3, #1
 801c89a:	930a      	str	r3, [sp, #40]	; 0x28
 801c89c:	e7e3      	b.n	801c866 <_svfprintf_r+0x97e>
 801c89e:	9b08      	ldr	r3, [sp, #32]
 801c8a0:	3301      	adds	r3, #1
 801c8a2:	9308      	str	r3, [sp, #32]
 801c8a4:	e7df      	b.n	801c866 <_svfprintf_r+0x97e>
 801c8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8a8:	9308      	str	r3, [sp, #32]
 801c8aa:	e63d      	b.n	801c528 <_svfprintf_r+0x640>
 801c8ac:	4632      	mov	r2, r6
 801c8ae:	f018 0f20 	tst.w	r8, #32
 801c8b2:	f852 3b04 	ldr.w	r3, [r2], #4
 801c8b6:	9206      	str	r2, [sp, #24]
 801c8b8:	d009      	beq.n	801c8ce <_svfprintf_r+0x9e6>
 801c8ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8bc:	4610      	mov	r0, r2
 801c8be:	17d1      	asrs	r1, r2, #31
 801c8c0:	e9c3 0100 	strd	r0, r1, [r3]
 801c8c4:	9e06      	ldr	r6, [sp, #24]
 801c8c6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801c8ca:	f7ff bb4d 	b.w	801bf68 <_svfprintf_r+0x80>
 801c8ce:	f018 0f10 	tst.w	r8, #16
 801c8d2:	d002      	beq.n	801c8da <_svfprintf_r+0x9f2>
 801c8d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8d6:	601a      	str	r2, [r3, #0]
 801c8d8:	e7f4      	b.n	801c8c4 <_svfprintf_r+0x9dc>
 801c8da:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c8de:	d002      	beq.n	801c8e6 <_svfprintf_r+0x9fe>
 801c8e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8e2:	801a      	strh	r2, [r3, #0]
 801c8e4:	e7ee      	b.n	801c8c4 <_svfprintf_r+0x9dc>
 801c8e6:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c8ea:	d0f3      	beq.n	801c8d4 <_svfprintf_r+0x9ec>
 801c8ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c8ee:	701a      	strb	r2, [r3, #0]
 801c8f0:	e7e8      	b.n	801c8c4 <_svfprintf_r+0x9dc>
 801c8f2:	f048 0810 	orr.w	r8, r8, #16
 801c8f6:	f018 0f20 	tst.w	r8, #32
 801c8fa:	d01e      	beq.n	801c93a <_svfprintf_r+0xa52>
 801c8fc:	3607      	adds	r6, #7
 801c8fe:	f026 0307 	bic.w	r3, r6, #7
 801c902:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c906:	9306      	str	r3, [sp, #24]
 801c908:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c90c:	2300      	movs	r3, #0
 801c90e:	2200      	movs	r2, #0
 801c910:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801c914:	9a04      	ldr	r2, [sp, #16]
 801c916:	3201      	adds	r2, #1
 801c918:	f000 848d 	beq.w	801d236 <_svfprintf_r+0x134e>
 801c91c:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801c920:	9203      	str	r2, [sp, #12]
 801c922:	ea56 0207 	orrs.w	r2, r6, r7
 801c926:	f040 848c 	bne.w	801d242 <_svfprintf_r+0x135a>
 801c92a:	9a04      	ldr	r2, [sp, #16]
 801c92c:	2a00      	cmp	r2, #0
 801c92e:	f000 80f5 	beq.w	801cb1c <_svfprintf_r+0xc34>
 801c932:	2b01      	cmp	r3, #1
 801c934:	f040 8488 	bne.w	801d248 <_svfprintf_r+0x1360>
 801c938:	e097      	b.n	801ca6a <_svfprintf_r+0xb82>
 801c93a:	1d33      	adds	r3, r6, #4
 801c93c:	f018 0f10 	tst.w	r8, #16
 801c940:	9306      	str	r3, [sp, #24]
 801c942:	d001      	beq.n	801c948 <_svfprintf_r+0xa60>
 801c944:	6836      	ldr	r6, [r6, #0]
 801c946:	e003      	b.n	801c950 <_svfprintf_r+0xa68>
 801c948:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c94c:	d002      	beq.n	801c954 <_svfprintf_r+0xa6c>
 801c94e:	8836      	ldrh	r6, [r6, #0]
 801c950:	2700      	movs	r7, #0
 801c952:	e7d9      	b.n	801c908 <_svfprintf_r+0xa20>
 801c954:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c958:	d0f4      	beq.n	801c944 <_svfprintf_r+0xa5c>
 801c95a:	7836      	ldrb	r6, [r6, #0]
 801c95c:	e7f8      	b.n	801c950 <_svfprintf_r+0xa68>
 801c95e:	4633      	mov	r3, r6
 801c960:	2278      	movs	r2, #120	; 0x78
 801c962:	f853 6b04 	ldr.w	r6, [r3], #4
 801c966:	9306      	str	r3, [sp, #24]
 801c968:	f647 0330 	movw	r3, #30768	; 0x7830
 801c96c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801c970:	4ba1      	ldr	r3, [pc, #644]	; (801cbf8 <_svfprintf_r+0xd10>)
 801c972:	9316      	str	r3, [sp, #88]	; 0x58
 801c974:	2700      	movs	r7, #0
 801c976:	f048 0802 	orr.w	r8, r8, #2
 801c97a:	2302      	movs	r3, #2
 801c97c:	9207      	str	r2, [sp, #28]
 801c97e:	e7c6      	b.n	801c90e <_svfprintf_r+0xa26>
 801c980:	4633      	mov	r3, r6
 801c982:	2500      	movs	r5, #0
 801c984:	f853 bb04 	ldr.w	fp, [r3], #4
 801c988:	9306      	str	r3, [sp, #24]
 801c98a:	9b04      	ldr	r3, [sp, #16]
 801c98c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801c990:	1c59      	adds	r1, r3, #1
 801c992:	d010      	beq.n	801c9b6 <_svfprintf_r+0xace>
 801c994:	461a      	mov	r2, r3
 801c996:	4629      	mov	r1, r5
 801c998:	4658      	mov	r0, fp
 801c99a:	f7e3 fc51 	bl	8000240 <memchr>
 801c99e:	9003      	str	r0, [sp, #12]
 801c9a0:	2800      	cmp	r0, #0
 801c9a2:	f000 80d2 	beq.w	801cb4a <_svfprintf_r+0xc62>
 801c9a6:	eba0 030b 	sub.w	r3, r0, fp
 801c9aa:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c9ae:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801c9b2:	462e      	mov	r6, r5
 801c9b4:	e5c0      	b.n	801c538 <_svfprintf_r+0x650>
 801c9b6:	4658      	mov	r0, fp
 801c9b8:	f7e3 fc34 	bl	8000224 <strlen>
 801c9bc:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801c9c0:	e463      	b.n	801c28a <_svfprintf_r+0x3a2>
 801c9c2:	f048 0810 	orr.w	r8, r8, #16
 801c9c6:	f018 0f20 	tst.w	r8, #32
 801c9ca:	d007      	beq.n	801c9dc <_svfprintf_r+0xaf4>
 801c9cc:	3607      	adds	r6, #7
 801c9ce:	f026 0307 	bic.w	r3, r6, #7
 801c9d2:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c9d6:	9306      	str	r3, [sp, #24]
 801c9d8:	2301      	movs	r3, #1
 801c9da:	e798      	b.n	801c90e <_svfprintf_r+0xa26>
 801c9dc:	1d33      	adds	r3, r6, #4
 801c9de:	f018 0f10 	tst.w	r8, #16
 801c9e2:	9306      	str	r3, [sp, #24]
 801c9e4:	d001      	beq.n	801c9ea <_svfprintf_r+0xb02>
 801c9e6:	6836      	ldr	r6, [r6, #0]
 801c9e8:	e003      	b.n	801c9f2 <_svfprintf_r+0xb0a>
 801c9ea:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c9ee:	d002      	beq.n	801c9f6 <_svfprintf_r+0xb0e>
 801c9f0:	8836      	ldrh	r6, [r6, #0]
 801c9f2:	2700      	movs	r7, #0
 801c9f4:	e7f0      	b.n	801c9d8 <_svfprintf_r+0xaf0>
 801c9f6:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c9fa:	d0f4      	beq.n	801c9e6 <_svfprintf_r+0xafe>
 801c9fc:	7836      	ldrb	r6, [r6, #0]
 801c9fe:	e7f8      	b.n	801c9f2 <_svfprintf_r+0xb0a>
 801ca00:	4b7e      	ldr	r3, [pc, #504]	; (801cbfc <_svfprintf_r+0xd14>)
 801ca02:	9316      	str	r3, [sp, #88]	; 0x58
 801ca04:	f018 0f20 	tst.w	r8, #32
 801ca08:	d019      	beq.n	801ca3e <_svfprintf_r+0xb56>
 801ca0a:	3607      	adds	r6, #7
 801ca0c:	f026 0307 	bic.w	r3, r6, #7
 801ca10:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801ca14:	9306      	str	r3, [sp, #24]
 801ca16:	f018 0f01 	tst.w	r8, #1
 801ca1a:	d00a      	beq.n	801ca32 <_svfprintf_r+0xb4a>
 801ca1c:	ea56 0307 	orrs.w	r3, r6, r7
 801ca20:	d007      	beq.n	801ca32 <_svfprintf_r+0xb4a>
 801ca22:	2330      	movs	r3, #48	; 0x30
 801ca24:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801ca28:	9b07      	ldr	r3, [sp, #28]
 801ca2a:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801ca2e:	f048 0802 	orr.w	r8, r8, #2
 801ca32:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801ca36:	2302      	movs	r3, #2
 801ca38:	e769      	b.n	801c90e <_svfprintf_r+0xa26>
 801ca3a:	4b6f      	ldr	r3, [pc, #444]	; (801cbf8 <_svfprintf_r+0xd10>)
 801ca3c:	e7e1      	b.n	801ca02 <_svfprintf_r+0xb1a>
 801ca3e:	1d33      	adds	r3, r6, #4
 801ca40:	f018 0f10 	tst.w	r8, #16
 801ca44:	9306      	str	r3, [sp, #24]
 801ca46:	d001      	beq.n	801ca4c <_svfprintf_r+0xb64>
 801ca48:	6836      	ldr	r6, [r6, #0]
 801ca4a:	e003      	b.n	801ca54 <_svfprintf_r+0xb6c>
 801ca4c:	f018 0f40 	tst.w	r8, #64	; 0x40
 801ca50:	d002      	beq.n	801ca58 <_svfprintf_r+0xb70>
 801ca52:	8836      	ldrh	r6, [r6, #0]
 801ca54:	2700      	movs	r7, #0
 801ca56:	e7de      	b.n	801ca16 <_svfprintf_r+0xb2e>
 801ca58:	f418 7f00 	tst.w	r8, #512	; 0x200
 801ca5c:	d0f4      	beq.n	801ca48 <_svfprintf_r+0xb60>
 801ca5e:	7836      	ldrb	r6, [r6, #0]
 801ca60:	e7f8      	b.n	801ca54 <_svfprintf_r+0xb6c>
 801ca62:	2f00      	cmp	r7, #0
 801ca64:	bf08      	it	eq
 801ca66:	2e0a      	cmpeq	r6, #10
 801ca68:	d206      	bcs.n	801ca78 <_svfprintf_r+0xb90>
 801ca6a:	3630      	adds	r6, #48	; 0x30
 801ca6c:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801ca70:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801ca74:	f000 bc06 	b.w	801d284 <_svfprintf_r+0x139c>
 801ca78:	2300      	movs	r3, #0
 801ca7a:	9305      	str	r3, [sp, #20]
 801ca7c:	9b03      	ldr	r3, [sp, #12]
 801ca7e:	ad4e      	add	r5, sp, #312	; 0x138
 801ca80:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801ca84:	220a      	movs	r2, #10
 801ca86:	2300      	movs	r3, #0
 801ca88:	4630      	mov	r0, r6
 801ca8a:	4639      	mov	r1, r7
 801ca8c:	f7e4 f90c 	bl	8000ca8 <__aeabi_uldivmod>
 801ca90:	9b05      	ldr	r3, [sp, #20]
 801ca92:	3230      	adds	r2, #48	; 0x30
 801ca94:	3301      	adds	r3, #1
 801ca96:	f105 3bff 	add.w	fp, r5, #4294967295
 801ca9a:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ca9e:	9305      	str	r3, [sp, #20]
 801caa0:	f1b8 0f00 	cmp.w	r8, #0
 801caa4:	d019      	beq.n	801cada <_svfprintf_r+0xbf2>
 801caa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801caa8:	9a05      	ldr	r2, [sp, #20]
 801caaa:	781b      	ldrb	r3, [r3, #0]
 801caac:	429a      	cmp	r2, r3
 801caae:	d114      	bne.n	801cada <_svfprintf_r+0xbf2>
 801cab0:	2aff      	cmp	r2, #255	; 0xff
 801cab2:	d012      	beq.n	801cada <_svfprintf_r+0xbf2>
 801cab4:	2f00      	cmp	r7, #0
 801cab6:	bf08      	it	eq
 801cab8:	2e0a      	cmpeq	r6, #10
 801caba:	d30e      	bcc.n	801cada <_svfprintf_r+0xbf2>
 801cabc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cabe:	9914      	ldr	r1, [sp, #80]	; 0x50
 801cac0:	ebab 0b03 	sub.w	fp, fp, r3
 801cac4:	461a      	mov	r2, r3
 801cac6:	4658      	mov	r0, fp
 801cac8:	f7ff f96b 	bl	801bda2 <strncpy>
 801cacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cace:	785d      	ldrb	r5, [r3, #1]
 801cad0:	b195      	cbz	r5, 801caf8 <_svfprintf_r+0xc10>
 801cad2:	3301      	adds	r3, #1
 801cad4:	930a      	str	r3, [sp, #40]	; 0x28
 801cad6:	2300      	movs	r3, #0
 801cad8:	9305      	str	r3, [sp, #20]
 801cada:	220a      	movs	r2, #10
 801cadc:	2300      	movs	r3, #0
 801cade:	4630      	mov	r0, r6
 801cae0:	4639      	mov	r1, r7
 801cae2:	f7e4 f8e1 	bl	8000ca8 <__aeabi_uldivmod>
 801cae6:	2f00      	cmp	r7, #0
 801cae8:	bf08      	it	eq
 801caea:	2e0a      	cmpeq	r6, #10
 801caec:	f0c0 83ca 	bcc.w	801d284 <_svfprintf_r+0x139c>
 801caf0:	4606      	mov	r6, r0
 801caf2:	460f      	mov	r7, r1
 801caf4:	465d      	mov	r5, fp
 801caf6:	e7c5      	b.n	801ca84 <_svfprintf_r+0xb9c>
 801caf8:	9505      	str	r5, [sp, #20]
 801cafa:	e7ee      	b.n	801cada <_svfprintf_r+0xbf2>
 801cafc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801cafe:	f006 030f 	and.w	r3, r6, #15
 801cb02:	5cd3      	ldrb	r3, [r2, r3]
 801cb04:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801cb08:	0933      	lsrs	r3, r6, #4
 801cb0a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801cb0e:	093a      	lsrs	r2, r7, #4
 801cb10:	461e      	mov	r6, r3
 801cb12:	4617      	mov	r7, r2
 801cb14:	ea56 0307 	orrs.w	r3, r6, r7
 801cb18:	d1f0      	bne.n	801cafc <_svfprintf_r+0xc14>
 801cb1a:	e3b3      	b.n	801d284 <_svfprintf_r+0x139c>
 801cb1c:	b933      	cbnz	r3, 801cb2c <_svfprintf_r+0xc44>
 801cb1e:	f018 0f01 	tst.w	r8, #1
 801cb22:	d003      	beq.n	801cb2c <_svfprintf_r+0xc44>
 801cb24:	2330      	movs	r3, #48	; 0x30
 801cb26:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801cb2a:	e7a1      	b.n	801ca70 <_svfprintf_r+0xb88>
 801cb2c:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801cb30:	e3a8      	b.n	801d284 <_svfprintf_r+0x139c>
 801cb32:	9b07      	ldr	r3, [sp, #28]
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	f000 8373 	beq.w	801d220 <_svfprintf_r+0x1338>
 801cb3a:	2000      	movs	r0, #0
 801cb3c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801cb40:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801cb44:	9606      	str	r6, [sp, #24]
 801cb46:	f7ff bb34 	b.w	801c1b2 <_svfprintf_r+0x2ca>
 801cb4a:	9e03      	ldr	r6, [sp, #12]
 801cb4c:	f7ff bb9e 	b.w	801c28c <_svfprintf_r+0x3a4>
 801cb50:	2010      	movs	r0, #16
 801cb52:	4402      	add	r2, r0
 801cb54:	2b07      	cmp	r3, #7
 801cb56:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cb5a:	6060      	str	r0, [r4, #4]
 801cb5c:	dd08      	ble.n	801cb70 <_svfprintf_r+0xc88>
 801cb5e:	aa22      	add	r2, sp, #136	; 0x88
 801cb60:	4649      	mov	r1, r9
 801cb62:	4650      	mov	r0, sl
 801cb64:	f004 f9e0 	bl	8020f28 <__ssprint_r>
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	f040 8337 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cb6e:	a925      	add	r1, sp, #148	; 0x94
 801cb70:	3f10      	subs	r7, #16
 801cb72:	460c      	mov	r4, r1
 801cb74:	e4fb      	b.n	801c56e <_svfprintf_r+0x686>
 801cb76:	460c      	mov	r4, r1
 801cb78:	e514      	b.n	801c5a4 <_svfprintf_r+0x6bc>
 801cb7a:	aa22      	add	r2, sp, #136	; 0x88
 801cb7c:	4649      	mov	r1, r9
 801cb7e:	4650      	mov	r0, sl
 801cb80:	f004 f9d2 	bl	8020f28 <__ssprint_r>
 801cb84:	2800      	cmp	r0, #0
 801cb86:	f040 8329 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cb8a:	ac25      	add	r4, sp, #148	; 0x94
 801cb8c:	e51c      	b.n	801c5c8 <_svfprintf_r+0x6e0>
 801cb8e:	aa22      	add	r2, sp, #136	; 0x88
 801cb90:	4649      	mov	r1, r9
 801cb92:	4650      	mov	r0, sl
 801cb94:	f004 f9c8 	bl	8020f28 <__ssprint_r>
 801cb98:	2800      	cmp	r0, #0
 801cb9a:	f040 831f 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cb9e:	ac25      	add	r4, sp, #148	; 0x94
 801cba0:	e522      	b.n	801c5e8 <_svfprintf_r+0x700>
 801cba2:	2010      	movs	r0, #16
 801cba4:	4402      	add	r2, r0
 801cba6:	2b07      	cmp	r3, #7
 801cba8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cbac:	6060      	str	r0, [r4, #4]
 801cbae:	dd08      	ble.n	801cbc2 <_svfprintf_r+0xcda>
 801cbb0:	aa22      	add	r2, sp, #136	; 0x88
 801cbb2:	4649      	mov	r1, r9
 801cbb4:	4650      	mov	r0, sl
 801cbb6:	f004 f9b7 	bl	8020f28 <__ssprint_r>
 801cbba:	2800      	cmp	r0, #0
 801cbbc:	f040 830e 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cbc0:	a925      	add	r1, sp, #148	; 0x94
 801cbc2:	3f10      	subs	r7, #16
 801cbc4:	460c      	mov	r4, r1
 801cbc6:	e517      	b.n	801c5f8 <_svfprintf_r+0x710>
 801cbc8:	460c      	mov	r4, r1
 801cbca:	e530      	b.n	801c62e <_svfprintf_r+0x746>
 801cbcc:	2010      	movs	r0, #16
 801cbce:	4402      	add	r2, r0
 801cbd0:	2b07      	cmp	r3, #7
 801cbd2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cbd6:	6060      	str	r0, [r4, #4]
 801cbd8:	dd08      	ble.n	801cbec <_svfprintf_r+0xd04>
 801cbda:	aa22      	add	r2, sp, #136	; 0x88
 801cbdc:	4649      	mov	r1, r9
 801cbde:	4650      	mov	r0, sl
 801cbe0:	f004 f9a2 	bl	8020f28 <__ssprint_r>
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	f040 82f9 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cbea:	a925      	add	r1, sp, #148	; 0x94
 801cbec:	3e10      	subs	r6, #16
 801cbee:	460c      	mov	r4, r1
 801cbf0:	e522      	b.n	801c638 <_svfprintf_r+0x750>
 801cbf2:	460c      	mov	r4, r1
 801cbf4:	e548      	b.n	801c688 <_svfprintf_r+0x7a0>
 801cbf6:	bf00      	nop
 801cbf8:	0802937c 	.word	0x0802937c
 801cbfc:	0802938d 	.word	0x0802938d
 801cc00:	9b07      	ldr	r3, [sp, #28]
 801cc02:	2b65      	cmp	r3, #101	; 0x65
 801cc04:	f340 8232 	ble.w	801d06c <_svfprintf_r+0x1184>
 801cc08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	2300      	movs	r3, #0
 801cc10:	f7e3 ff8a 	bl	8000b28 <__aeabi_dcmpeq>
 801cc14:	2800      	cmp	r0, #0
 801cc16:	d068      	beq.n	801ccea <_svfprintf_r+0xe02>
 801cc18:	4b6d      	ldr	r3, [pc, #436]	; (801cdd0 <_svfprintf_r+0xee8>)
 801cc1a:	6023      	str	r3, [r4, #0]
 801cc1c:	2301      	movs	r3, #1
 801cc1e:	441e      	add	r6, r3
 801cc20:	6063      	str	r3, [r4, #4]
 801cc22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc24:	9624      	str	r6, [sp, #144]	; 0x90
 801cc26:	3301      	adds	r3, #1
 801cc28:	2b07      	cmp	r3, #7
 801cc2a:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc2c:	dc37      	bgt.n	801cc9e <_svfprintf_r+0xdb6>
 801cc2e:	3408      	adds	r4, #8
 801cc30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cc32:	9a05      	ldr	r2, [sp, #20]
 801cc34:	4293      	cmp	r3, r2
 801cc36:	db03      	blt.n	801cc40 <_svfprintf_r+0xd58>
 801cc38:	f018 0f01 	tst.w	r8, #1
 801cc3c:	f43f ad36 	beq.w	801c6ac <_svfprintf_r+0x7c4>
 801cc40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cc42:	6023      	str	r3, [r4, #0]
 801cc44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cc46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc48:	6063      	str	r3, [r4, #4]
 801cc4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc4c:	4413      	add	r3, r2
 801cc4e:	9324      	str	r3, [sp, #144]	; 0x90
 801cc50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc52:	3301      	adds	r3, #1
 801cc54:	2b07      	cmp	r3, #7
 801cc56:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc58:	dc2b      	bgt.n	801ccb2 <_svfprintf_r+0xdca>
 801cc5a:	3408      	adds	r4, #8
 801cc5c:	9b05      	ldr	r3, [sp, #20]
 801cc5e:	1e5d      	subs	r5, r3, #1
 801cc60:	2d00      	cmp	r5, #0
 801cc62:	f77f ad23 	ble.w	801c6ac <_svfprintf_r+0x7c4>
 801cc66:	4e5b      	ldr	r6, [pc, #364]	; (801cdd4 <_svfprintf_r+0xeec>)
 801cc68:	2710      	movs	r7, #16
 801cc6a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801cc6e:	2d10      	cmp	r5, #16
 801cc70:	f103 0301 	add.w	r3, r3, #1
 801cc74:	f104 0108 	add.w	r1, r4, #8
 801cc78:	6026      	str	r6, [r4, #0]
 801cc7a:	dc24      	bgt.n	801ccc6 <_svfprintf_r+0xdde>
 801cc7c:	6065      	str	r5, [r4, #4]
 801cc7e:	2b07      	cmp	r3, #7
 801cc80:	4415      	add	r5, r2
 801cc82:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801cc86:	f340 8288 	ble.w	801d19a <_svfprintf_r+0x12b2>
 801cc8a:	aa22      	add	r2, sp, #136	; 0x88
 801cc8c:	4649      	mov	r1, r9
 801cc8e:	4650      	mov	r0, sl
 801cc90:	f004 f94a 	bl	8020f28 <__ssprint_r>
 801cc94:	2800      	cmp	r0, #0
 801cc96:	f040 82a1 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cc9a:	ac25      	add	r4, sp, #148	; 0x94
 801cc9c:	e506      	b.n	801c6ac <_svfprintf_r+0x7c4>
 801cc9e:	aa22      	add	r2, sp, #136	; 0x88
 801cca0:	4649      	mov	r1, r9
 801cca2:	4650      	mov	r0, sl
 801cca4:	f004 f940 	bl	8020f28 <__ssprint_r>
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	f040 8297 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801ccae:	ac25      	add	r4, sp, #148	; 0x94
 801ccb0:	e7be      	b.n	801cc30 <_svfprintf_r+0xd48>
 801ccb2:	aa22      	add	r2, sp, #136	; 0x88
 801ccb4:	4649      	mov	r1, r9
 801ccb6:	4650      	mov	r0, sl
 801ccb8:	f004 f936 	bl	8020f28 <__ssprint_r>
 801ccbc:	2800      	cmp	r0, #0
 801ccbe:	f040 828d 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801ccc2:	ac25      	add	r4, sp, #148	; 0x94
 801ccc4:	e7ca      	b.n	801cc5c <_svfprintf_r+0xd74>
 801ccc6:	3210      	adds	r2, #16
 801ccc8:	2b07      	cmp	r3, #7
 801ccca:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ccce:	6067      	str	r7, [r4, #4]
 801ccd0:	dd08      	ble.n	801cce4 <_svfprintf_r+0xdfc>
 801ccd2:	aa22      	add	r2, sp, #136	; 0x88
 801ccd4:	4649      	mov	r1, r9
 801ccd6:	4650      	mov	r0, sl
 801ccd8:	f004 f926 	bl	8020f28 <__ssprint_r>
 801ccdc:	2800      	cmp	r0, #0
 801ccde:	f040 827d 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cce2:	a925      	add	r1, sp, #148	; 0x94
 801cce4:	3d10      	subs	r5, #16
 801cce6:	460c      	mov	r4, r1
 801cce8:	e7bf      	b.n	801cc6a <_svfprintf_r+0xd82>
 801ccea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	dc73      	bgt.n	801cdd8 <_svfprintf_r+0xef0>
 801ccf0:	4b37      	ldr	r3, [pc, #220]	; (801cdd0 <_svfprintf_r+0xee8>)
 801ccf2:	6023      	str	r3, [r4, #0]
 801ccf4:	2301      	movs	r3, #1
 801ccf6:	441e      	add	r6, r3
 801ccf8:	6063      	str	r3, [r4, #4]
 801ccfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ccfc:	9624      	str	r6, [sp, #144]	; 0x90
 801ccfe:	3301      	adds	r3, #1
 801cd00:	2b07      	cmp	r3, #7
 801cd02:	9323      	str	r3, [sp, #140]	; 0x8c
 801cd04:	dc3d      	bgt.n	801cd82 <_svfprintf_r+0xe9a>
 801cd06:	3408      	adds	r4, #8
 801cd08:	9905      	ldr	r1, [sp, #20]
 801cd0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cd0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd0e:	430a      	orrs	r2, r1
 801cd10:	f008 0101 	and.w	r1, r8, #1
 801cd14:	430a      	orrs	r2, r1
 801cd16:	f43f acc9 	beq.w	801c6ac <_svfprintf_r+0x7c4>
 801cd1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd1c:	6022      	str	r2, [r4, #0]
 801cd1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd20:	6062      	str	r2, [r4, #4]
 801cd22:	4413      	add	r3, r2
 801cd24:	9324      	str	r3, [sp, #144]	; 0x90
 801cd26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd28:	3301      	adds	r3, #1
 801cd2a:	2b07      	cmp	r3, #7
 801cd2c:	9323      	str	r3, [sp, #140]	; 0x8c
 801cd2e:	dc32      	bgt.n	801cd96 <_svfprintf_r+0xeae>
 801cd30:	3408      	adds	r4, #8
 801cd32:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cd34:	2d00      	cmp	r5, #0
 801cd36:	da1b      	bge.n	801cd70 <_svfprintf_r+0xe88>
 801cd38:	4e26      	ldr	r6, [pc, #152]	; (801cdd4 <_svfprintf_r+0xeec>)
 801cd3a:	426d      	negs	r5, r5
 801cd3c:	4623      	mov	r3, r4
 801cd3e:	2710      	movs	r7, #16
 801cd40:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801cd44:	2d10      	cmp	r5, #16
 801cd46:	f102 0201 	add.w	r2, r2, #1
 801cd4a:	f104 0408 	add.w	r4, r4, #8
 801cd4e:	601e      	str	r6, [r3, #0]
 801cd50:	dc2b      	bgt.n	801cdaa <_svfprintf_r+0xec2>
 801cd52:	605d      	str	r5, [r3, #4]
 801cd54:	2a07      	cmp	r2, #7
 801cd56:	440d      	add	r5, r1
 801cd58:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801cd5c:	dd08      	ble.n	801cd70 <_svfprintf_r+0xe88>
 801cd5e:	aa22      	add	r2, sp, #136	; 0x88
 801cd60:	4649      	mov	r1, r9
 801cd62:	4650      	mov	r0, sl
 801cd64:	f004 f8e0 	bl	8020f28 <__ssprint_r>
 801cd68:	2800      	cmp	r0, #0
 801cd6a:	f040 8237 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cd6e:	ac25      	add	r4, sp, #148	; 0x94
 801cd70:	9b05      	ldr	r3, [sp, #20]
 801cd72:	9a05      	ldr	r2, [sp, #20]
 801cd74:	6063      	str	r3, [r4, #4]
 801cd76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd78:	f8c4 b000 	str.w	fp, [r4]
 801cd7c:	4413      	add	r3, r2
 801cd7e:	9324      	str	r3, [sp, #144]	; 0x90
 801cd80:	e48d      	b.n	801c69e <_svfprintf_r+0x7b6>
 801cd82:	aa22      	add	r2, sp, #136	; 0x88
 801cd84:	4649      	mov	r1, r9
 801cd86:	4650      	mov	r0, sl
 801cd88:	f004 f8ce 	bl	8020f28 <__ssprint_r>
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	f040 8225 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cd92:	ac25      	add	r4, sp, #148	; 0x94
 801cd94:	e7b8      	b.n	801cd08 <_svfprintf_r+0xe20>
 801cd96:	aa22      	add	r2, sp, #136	; 0x88
 801cd98:	4649      	mov	r1, r9
 801cd9a:	4650      	mov	r0, sl
 801cd9c:	f004 f8c4 	bl	8020f28 <__ssprint_r>
 801cda0:	2800      	cmp	r0, #0
 801cda2:	f040 821b 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cda6:	ac25      	add	r4, sp, #148	; 0x94
 801cda8:	e7c3      	b.n	801cd32 <_svfprintf_r+0xe4a>
 801cdaa:	3110      	adds	r1, #16
 801cdac:	2a07      	cmp	r2, #7
 801cdae:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801cdb2:	605f      	str	r7, [r3, #4]
 801cdb4:	dd08      	ble.n	801cdc8 <_svfprintf_r+0xee0>
 801cdb6:	aa22      	add	r2, sp, #136	; 0x88
 801cdb8:	4649      	mov	r1, r9
 801cdba:	4650      	mov	r0, sl
 801cdbc:	f004 f8b4 	bl	8020f28 <__ssprint_r>
 801cdc0:	2800      	cmp	r0, #0
 801cdc2:	f040 820b 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cdc6:	ac25      	add	r4, sp, #148	; 0x94
 801cdc8:	3d10      	subs	r5, #16
 801cdca:	4623      	mov	r3, r4
 801cdcc:	e7b8      	b.n	801cd40 <_svfprintf_r+0xe58>
 801cdce:	bf00      	nop
 801cdd0:	0802939e 	.word	0x0802939e
 801cdd4:	080293b0 	.word	0x080293b0
 801cdd8:	9b05      	ldr	r3, [sp, #20]
 801cdda:	42ab      	cmp	r3, r5
 801cddc:	bfa8      	it	ge
 801cdde:	462b      	movge	r3, r5
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	461f      	mov	r7, r3
 801cde4:	dd0a      	ble.n	801cdfc <_svfprintf_r+0xf14>
 801cde6:	441e      	add	r6, r3
 801cde8:	e9c4 b300 	strd	fp, r3, [r4]
 801cdec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cdee:	9624      	str	r6, [sp, #144]	; 0x90
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	2b07      	cmp	r3, #7
 801cdf4:	9323      	str	r3, [sp, #140]	; 0x8c
 801cdf6:	f300 8086 	bgt.w	801cf06 <_svfprintf_r+0x101e>
 801cdfa:	3408      	adds	r4, #8
 801cdfc:	2f00      	cmp	r7, #0
 801cdfe:	bfac      	ite	ge
 801ce00:	1bee      	subge	r6, r5, r7
 801ce02:	462e      	movlt	r6, r5
 801ce04:	2e00      	cmp	r6, #0
 801ce06:	dd19      	ble.n	801ce3c <_svfprintf_r+0xf54>
 801ce08:	4f97      	ldr	r7, [pc, #604]	; (801d068 <_svfprintf_r+0x1180>)
 801ce0a:	6027      	str	r7, [r4, #0]
 801ce0c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ce10:	2e10      	cmp	r6, #16
 801ce12:	f103 0301 	add.w	r3, r3, #1
 801ce16:	f104 0108 	add.w	r1, r4, #8
 801ce1a:	dc7e      	bgt.n	801cf1a <_svfprintf_r+0x1032>
 801ce1c:	6066      	str	r6, [r4, #4]
 801ce1e:	2b07      	cmp	r3, #7
 801ce20:	4416      	add	r6, r2
 801ce22:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801ce26:	f340 808b 	ble.w	801cf40 <_svfprintf_r+0x1058>
 801ce2a:	aa22      	add	r2, sp, #136	; 0x88
 801ce2c:	4649      	mov	r1, r9
 801ce2e:	4650      	mov	r0, sl
 801ce30:	f004 f87a 	bl	8020f28 <__ssprint_r>
 801ce34:	2800      	cmp	r0, #0
 801ce36:	f040 81d1 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801ce3a:	ac25      	add	r4, sp, #148	; 0x94
 801ce3c:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801ce40:	445d      	add	r5, fp
 801ce42:	d00b      	beq.n	801ce5c <_svfprintf_r+0xf74>
 801ce44:	4e88      	ldr	r6, [pc, #544]	; (801d068 <_svfprintf_r+0x1180>)
 801ce46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d17b      	bne.n	801cf44 <_svfprintf_r+0x105c>
 801ce4c:	9b08      	ldr	r3, [sp, #32]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d17b      	bne.n	801cf4a <_svfprintf_r+0x1062>
 801ce52:	9b05      	ldr	r3, [sp, #20]
 801ce54:	445b      	add	r3, fp
 801ce56:	429d      	cmp	r5, r3
 801ce58:	bf28      	it	cs
 801ce5a:	461d      	movcs	r5, r3
 801ce5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce5e:	9a05      	ldr	r2, [sp, #20]
 801ce60:	4293      	cmp	r3, r2
 801ce62:	db02      	blt.n	801ce6a <_svfprintf_r+0xf82>
 801ce64:	f018 0f01 	tst.w	r8, #1
 801ce68:	d00e      	beq.n	801ce88 <_svfprintf_r+0xfa0>
 801ce6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ce6c:	6023      	str	r3, [r4, #0]
 801ce6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ce72:	6063      	str	r3, [r4, #4]
 801ce74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ce76:	4413      	add	r3, r2
 801ce78:	9324      	str	r3, [sp, #144]	; 0x90
 801ce7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ce7c:	3301      	adds	r3, #1
 801ce7e:	2b07      	cmp	r3, #7
 801ce80:	9323      	str	r3, [sp, #140]	; 0x8c
 801ce82:	f300 80dd 	bgt.w	801d040 <_svfprintf_r+0x1158>
 801ce86:	3408      	adds	r4, #8
 801ce88:	9b05      	ldr	r3, [sp, #20]
 801ce8a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801ce8c:	eb0b 0203 	add.w	r2, fp, r3
 801ce90:	1b9e      	subs	r6, r3, r6
 801ce92:	1b52      	subs	r2, r2, r5
 801ce94:	4296      	cmp	r6, r2
 801ce96:	bfa8      	it	ge
 801ce98:	4616      	movge	r6, r2
 801ce9a:	2e00      	cmp	r6, #0
 801ce9c:	dd0b      	ble.n	801ceb6 <_svfprintf_r+0xfce>
 801ce9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cea0:	4433      	add	r3, r6
 801cea2:	9324      	str	r3, [sp, #144]	; 0x90
 801cea4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cea6:	3301      	adds	r3, #1
 801cea8:	2b07      	cmp	r3, #7
 801ceaa:	e9c4 5600 	strd	r5, r6, [r4]
 801ceae:	9323      	str	r3, [sp, #140]	; 0x8c
 801ceb0:	f300 80d0 	bgt.w	801d054 <_svfprintf_r+0x116c>
 801ceb4:	3408      	adds	r4, #8
 801ceb6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801ceb8:	9b05      	ldr	r3, [sp, #20]
 801ceba:	2e00      	cmp	r6, #0
 801cebc:	eba3 0505 	sub.w	r5, r3, r5
 801cec0:	bfa8      	it	ge
 801cec2:	1bad      	subge	r5, r5, r6
 801cec4:	2d00      	cmp	r5, #0
 801cec6:	f77f abf1 	ble.w	801c6ac <_svfprintf_r+0x7c4>
 801ceca:	4e67      	ldr	r6, [pc, #412]	; (801d068 <_svfprintf_r+0x1180>)
 801cecc:	2710      	movs	r7, #16
 801cece:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ced2:	2d10      	cmp	r5, #16
 801ced4:	f103 0301 	add.w	r3, r3, #1
 801ced8:	f104 0108 	add.w	r1, r4, #8
 801cedc:	6026      	str	r6, [r4, #0]
 801cede:	f77f aecd 	ble.w	801cc7c <_svfprintf_r+0xd94>
 801cee2:	3210      	adds	r2, #16
 801cee4:	2b07      	cmp	r3, #7
 801cee6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ceea:	6067      	str	r7, [r4, #4]
 801ceec:	dd08      	ble.n	801cf00 <_svfprintf_r+0x1018>
 801ceee:	aa22      	add	r2, sp, #136	; 0x88
 801cef0:	4649      	mov	r1, r9
 801cef2:	4650      	mov	r0, sl
 801cef4:	f004 f818 	bl	8020f28 <__ssprint_r>
 801cef8:	2800      	cmp	r0, #0
 801cefa:	f040 816f 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cefe:	a925      	add	r1, sp, #148	; 0x94
 801cf00:	3d10      	subs	r5, #16
 801cf02:	460c      	mov	r4, r1
 801cf04:	e7e3      	b.n	801cece <_svfprintf_r+0xfe6>
 801cf06:	aa22      	add	r2, sp, #136	; 0x88
 801cf08:	4649      	mov	r1, r9
 801cf0a:	4650      	mov	r0, sl
 801cf0c:	f004 f80c 	bl	8020f28 <__ssprint_r>
 801cf10:	2800      	cmp	r0, #0
 801cf12:	f040 8163 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cf16:	ac25      	add	r4, sp, #148	; 0x94
 801cf18:	e770      	b.n	801cdfc <_svfprintf_r+0xf14>
 801cf1a:	2010      	movs	r0, #16
 801cf1c:	4402      	add	r2, r0
 801cf1e:	2b07      	cmp	r3, #7
 801cf20:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cf24:	6060      	str	r0, [r4, #4]
 801cf26:	dd08      	ble.n	801cf3a <_svfprintf_r+0x1052>
 801cf28:	aa22      	add	r2, sp, #136	; 0x88
 801cf2a:	4649      	mov	r1, r9
 801cf2c:	4650      	mov	r0, sl
 801cf2e:	f003 fffb 	bl	8020f28 <__ssprint_r>
 801cf32:	2800      	cmp	r0, #0
 801cf34:	f040 8152 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cf38:	a925      	add	r1, sp, #148	; 0x94
 801cf3a:	3e10      	subs	r6, #16
 801cf3c:	460c      	mov	r4, r1
 801cf3e:	e764      	b.n	801ce0a <_svfprintf_r+0xf22>
 801cf40:	460c      	mov	r4, r1
 801cf42:	e77b      	b.n	801ce3c <_svfprintf_r+0xf54>
 801cf44:	9b08      	ldr	r3, [sp, #32]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d04a      	beq.n	801cfe0 <_svfprintf_r+0x10f8>
 801cf4a:	9b08      	ldr	r3, [sp, #32]
 801cf4c:	3b01      	subs	r3, #1
 801cf4e:	9308      	str	r3, [sp, #32]
 801cf50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cf52:	6023      	str	r3, [r4, #0]
 801cf54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cf56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf58:	6063      	str	r3, [r4, #4]
 801cf5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cf5c:	4413      	add	r3, r2
 801cf5e:	9324      	str	r3, [sp, #144]	; 0x90
 801cf60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cf62:	3301      	adds	r3, #1
 801cf64:	2b07      	cmp	r3, #7
 801cf66:	9323      	str	r3, [sp, #140]	; 0x8c
 801cf68:	dc41      	bgt.n	801cfee <_svfprintf_r+0x1106>
 801cf6a:	3408      	adds	r4, #8
 801cf6c:	9b05      	ldr	r3, [sp, #20]
 801cf6e:	445b      	add	r3, fp
 801cf70:	1b5a      	subs	r2, r3, r5
 801cf72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf74:	781b      	ldrb	r3, [r3, #0]
 801cf76:	4293      	cmp	r3, r2
 801cf78:	bfa8      	it	ge
 801cf7a:	4613      	movge	r3, r2
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	461f      	mov	r7, r3
 801cf80:	dd0a      	ble.n	801cf98 <_svfprintf_r+0x10b0>
 801cf82:	e9c4 5300 	strd	r5, r3, [r4]
 801cf86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cf88:	443b      	add	r3, r7
 801cf8a:	9324      	str	r3, [sp, #144]	; 0x90
 801cf8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cf8e:	3301      	adds	r3, #1
 801cf90:	2b07      	cmp	r3, #7
 801cf92:	9323      	str	r3, [sp, #140]	; 0x8c
 801cf94:	dc35      	bgt.n	801d002 <_svfprintf_r+0x111a>
 801cf96:	3408      	adds	r4, #8
 801cf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf9a:	781b      	ldrb	r3, [r3, #0]
 801cf9c:	2f00      	cmp	r7, #0
 801cf9e:	bfac      	ite	ge
 801cfa0:	1bdf      	subge	r7, r3, r7
 801cfa2:	461f      	movlt	r7, r3
 801cfa4:	2f00      	cmp	r7, #0
 801cfa6:	dd17      	ble.n	801cfd8 <_svfprintf_r+0x10f0>
 801cfa8:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801cfac:	2f10      	cmp	r7, #16
 801cfae:	f102 0201 	add.w	r2, r2, #1
 801cfb2:	f104 0108 	add.w	r1, r4, #8
 801cfb6:	6026      	str	r6, [r4, #0]
 801cfb8:	dc2d      	bgt.n	801d016 <_svfprintf_r+0x112e>
 801cfba:	443b      	add	r3, r7
 801cfbc:	2a07      	cmp	r2, #7
 801cfbe:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801cfc2:	6067      	str	r7, [r4, #4]
 801cfc4:	dd3a      	ble.n	801d03c <_svfprintf_r+0x1154>
 801cfc6:	aa22      	add	r2, sp, #136	; 0x88
 801cfc8:	4649      	mov	r1, r9
 801cfca:	4650      	mov	r0, sl
 801cfcc:	f003 ffac 	bl	8020f28 <__ssprint_r>
 801cfd0:	2800      	cmp	r0, #0
 801cfd2:	f040 8103 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cfd6:	ac25      	add	r4, sp, #148	; 0x94
 801cfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfda:	781b      	ldrb	r3, [r3, #0]
 801cfdc:	441d      	add	r5, r3
 801cfde:	e732      	b.n	801ce46 <_svfprintf_r+0xf5e>
 801cfe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfe2:	3b01      	subs	r3, #1
 801cfe4:	930a      	str	r3, [sp, #40]	; 0x28
 801cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfe8:	3b01      	subs	r3, #1
 801cfea:	9309      	str	r3, [sp, #36]	; 0x24
 801cfec:	e7b0      	b.n	801cf50 <_svfprintf_r+0x1068>
 801cfee:	aa22      	add	r2, sp, #136	; 0x88
 801cff0:	4649      	mov	r1, r9
 801cff2:	4650      	mov	r0, sl
 801cff4:	f003 ff98 	bl	8020f28 <__ssprint_r>
 801cff8:	2800      	cmp	r0, #0
 801cffa:	f040 80ef 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801cffe:	ac25      	add	r4, sp, #148	; 0x94
 801d000:	e7b4      	b.n	801cf6c <_svfprintf_r+0x1084>
 801d002:	aa22      	add	r2, sp, #136	; 0x88
 801d004:	4649      	mov	r1, r9
 801d006:	4650      	mov	r0, sl
 801d008:	f003 ff8e 	bl	8020f28 <__ssprint_r>
 801d00c:	2800      	cmp	r0, #0
 801d00e:	f040 80e5 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801d012:	ac25      	add	r4, sp, #148	; 0x94
 801d014:	e7c0      	b.n	801cf98 <_svfprintf_r+0x10b0>
 801d016:	2010      	movs	r0, #16
 801d018:	4403      	add	r3, r0
 801d01a:	2a07      	cmp	r2, #7
 801d01c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801d020:	6060      	str	r0, [r4, #4]
 801d022:	dd08      	ble.n	801d036 <_svfprintf_r+0x114e>
 801d024:	aa22      	add	r2, sp, #136	; 0x88
 801d026:	4649      	mov	r1, r9
 801d028:	4650      	mov	r0, sl
 801d02a:	f003 ff7d 	bl	8020f28 <__ssprint_r>
 801d02e:	2800      	cmp	r0, #0
 801d030:	f040 80d4 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801d034:	a925      	add	r1, sp, #148	; 0x94
 801d036:	3f10      	subs	r7, #16
 801d038:	460c      	mov	r4, r1
 801d03a:	e7b5      	b.n	801cfa8 <_svfprintf_r+0x10c0>
 801d03c:	460c      	mov	r4, r1
 801d03e:	e7cb      	b.n	801cfd8 <_svfprintf_r+0x10f0>
 801d040:	aa22      	add	r2, sp, #136	; 0x88
 801d042:	4649      	mov	r1, r9
 801d044:	4650      	mov	r0, sl
 801d046:	f003 ff6f 	bl	8020f28 <__ssprint_r>
 801d04a:	2800      	cmp	r0, #0
 801d04c:	f040 80c6 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801d050:	ac25      	add	r4, sp, #148	; 0x94
 801d052:	e719      	b.n	801ce88 <_svfprintf_r+0xfa0>
 801d054:	aa22      	add	r2, sp, #136	; 0x88
 801d056:	4649      	mov	r1, r9
 801d058:	4650      	mov	r0, sl
 801d05a:	f003 ff65 	bl	8020f28 <__ssprint_r>
 801d05e:	2800      	cmp	r0, #0
 801d060:	f040 80bc 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801d064:	ac25      	add	r4, sp, #148	; 0x94
 801d066:	e726      	b.n	801ceb6 <_svfprintf_r+0xfce>
 801d068:	080293b0 	.word	0x080293b0
 801d06c:	9a05      	ldr	r2, [sp, #20]
 801d06e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d070:	2a01      	cmp	r2, #1
 801d072:	f106 0601 	add.w	r6, r6, #1
 801d076:	f103 0301 	add.w	r3, r3, #1
 801d07a:	f104 0508 	add.w	r5, r4, #8
 801d07e:	dc02      	bgt.n	801d086 <_svfprintf_r+0x119e>
 801d080:	f018 0f01 	tst.w	r8, #1
 801d084:	d07e      	beq.n	801d184 <_svfprintf_r+0x129c>
 801d086:	2201      	movs	r2, #1
 801d088:	2b07      	cmp	r3, #7
 801d08a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801d08e:	f8c4 b000 	str.w	fp, [r4]
 801d092:	6062      	str	r2, [r4, #4]
 801d094:	dd08      	ble.n	801d0a8 <_svfprintf_r+0x11c0>
 801d096:	aa22      	add	r2, sp, #136	; 0x88
 801d098:	4649      	mov	r1, r9
 801d09a:	4650      	mov	r0, sl
 801d09c:	f003 ff44 	bl	8020f28 <__ssprint_r>
 801d0a0:	2800      	cmp	r0, #0
 801d0a2:	f040 809b 	bne.w	801d1dc <_svfprintf_r+0x12f4>
 801d0a6:	ad25      	add	r5, sp, #148	; 0x94
 801d0a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d0aa:	602b      	str	r3, [r5, #0]
 801d0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d0b0:	606b      	str	r3, [r5, #4]
 801d0b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d0b4:	4413      	add	r3, r2
 801d0b6:	9324      	str	r3, [sp, #144]	; 0x90
 801d0b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d0ba:	3301      	adds	r3, #1
 801d0bc:	2b07      	cmp	r3, #7
 801d0be:	9323      	str	r3, [sp, #140]	; 0x8c
 801d0c0:	dc32      	bgt.n	801d128 <_svfprintf_r+0x1240>
 801d0c2:	3508      	adds	r5, #8
 801d0c4:	9b05      	ldr	r3, [sp, #20]
 801d0c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d0ca:	1e5c      	subs	r4, r3, #1
 801d0cc:	2200      	movs	r2, #0
 801d0ce:	2300      	movs	r3, #0
 801d0d0:	f7e3 fd2a 	bl	8000b28 <__aeabi_dcmpeq>
 801d0d4:	2800      	cmp	r0, #0
 801d0d6:	d130      	bne.n	801d13a <_svfprintf_r+0x1252>
 801d0d8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801d0da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d0dc:	9a05      	ldr	r2, [sp, #20]
 801d0de:	3101      	adds	r1, #1
 801d0e0:	3b01      	subs	r3, #1
 801d0e2:	f10b 0001 	add.w	r0, fp, #1
 801d0e6:	4413      	add	r3, r2
 801d0e8:	2907      	cmp	r1, #7
 801d0ea:	e9c5 0400 	strd	r0, r4, [r5]
 801d0ee:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801d0f2:	dd50      	ble.n	801d196 <_svfprintf_r+0x12ae>
 801d0f4:	aa22      	add	r2, sp, #136	; 0x88
 801d0f6:	4649      	mov	r1, r9
 801d0f8:	4650      	mov	r0, sl
 801d0fa:	f003 ff15 	bl	8020f28 <__ssprint_r>
 801d0fe:	2800      	cmp	r0, #0
 801d100:	d16c      	bne.n	801d1dc <_svfprintf_r+0x12f4>
 801d102:	ad25      	add	r5, sp, #148	; 0x94
 801d104:	ab1e      	add	r3, sp, #120	; 0x78
 801d106:	602b      	str	r3, [r5, #0]
 801d108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d10a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801d10c:	606b      	str	r3, [r5, #4]
 801d10e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d110:	4413      	add	r3, r2
 801d112:	9324      	str	r3, [sp, #144]	; 0x90
 801d114:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d116:	3301      	adds	r3, #1
 801d118:	2b07      	cmp	r3, #7
 801d11a:	9323      	str	r3, [sp, #140]	; 0x8c
 801d11c:	f73f adb5 	bgt.w	801cc8a <_svfprintf_r+0xda2>
 801d120:	f105 0408 	add.w	r4, r5, #8
 801d124:	f7ff bac2 	b.w	801c6ac <_svfprintf_r+0x7c4>
 801d128:	aa22      	add	r2, sp, #136	; 0x88
 801d12a:	4649      	mov	r1, r9
 801d12c:	4650      	mov	r0, sl
 801d12e:	f003 fefb 	bl	8020f28 <__ssprint_r>
 801d132:	2800      	cmp	r0, #0
 801d134:	d152      	bne.n	801d1dc <_svfprintf_r+0x12f4>
 801d136:	ad25      	add	r5, sp, #148	; 0x94
 801d138:	e7c4      	b.n	801d0c4 <_svfprintf_r+0x11dc>
 801d13a:	2c00      	cmp	r4, #0
 801d13c:	dde2      	ble.n	801d104 <_svfprintf_r+0x121c>
 801d13e:	4e58      	ldr	r6, [pc, #352]	; (801d2a0 <_svfprintf_r+0x13b8>)
 801d140:	2710      	movs	r7, #16
 801d142:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d146:	2c10      	cmp	r4, #16
 801d148:	f103 0301 	add.w	r3, r3, #1
 801d14c:	f105 0108 	add.w	r1, r5, #8
 801d150:	602e      	str	r6, [r5, #0]
 801d152:	dc07      	bgt.n	801d164 <_svfprintf_r+0x127c>
 801d154:	606c      	str	r4, [r5, #4]
 801d156:	2b07      	cmp	r3, #7
 801d158:	4414      	add	r4, r2
 801d15a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801d15e:	dcc9      	bgt.n	801d0f4 <_svfprintf_r+0x120c>
 801d160:	460d      	mov	r5, r1
 801d162:	e7cf      	b.n	801d104 <_svfprintf_r+0x121c>
 801d164:	3210      	adds	r2, #16
 801d166:	2b07      	cmp	r3, #7
 801d168:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d16c:	606f      	str	r7, [r5, #4]
 801d16e:	dd06      	ble.n	801d17e <_svfprintf_r+0x1296>
 801d170:	aa22      	add	r2, sp, #136	; 0x88
 801d172:	4649      	mov	r1, r9
 801d174:	4650      	mov	r0, sl
 801d176:	f003 fed7 	bl	8020f28 <__ssprint_r>
 801d17a:	bb78      	cbnz	r0, 801d1dc <_svfprintf_r+0x12f4>
 801d17c:	a925      	add	r1, sp, #148	; 0x94
 801d17e:	3c10      	subs	r4, #16
 801d180:	460d      	mov	r5, r1
 801d182:	e7de      	b.n	801d142 <_svfprintf_r+0x125a>
 801d184:	2201      	movs	r2, #1
 801d186:	2b07      	cmp	r3, #7
 801d188:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801d18c:	f8c4 b000 	str.w	fp, [r4]
 801d190:	6062      	str	r2, [r4, #4]
 801d192:	ddb7      	ble.n	801d104 <_svfprintf_r+0x121c>
 801d194:	e7ae      	b.n	801d0f4 <_svfprintf_r+0x120c>
 801d196:	3508      	adds	r5, #8
 801d198:	e7b4      	b.n	801d104 <_svfprintf_r+0x121c>
 801d19a:	460c      	mov	r4, r1
 801d19c:	f7ff ba86 	b.w	801c6ac <_svfprintf_r+0x7c4>
 801d1a0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801d1a4:	1a9d      	subs	r5, r3, r2
 801d1a6:	2d00      	cmp	r5, #0
 801d1a8:	f77f aa84 	ble.w	801c6b4 <_svfprintf_r+0x7cc>
 801d1ac:	4e3d      	ldr	r6, [pc, #244]	; (801d2a4 <_svfprintf_r+0x13bc>)
 801d1ae:	2710      	movs	r7, #16
 801d1b0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801d1b4:	2d10      	cmp	r5, #16
 801d1b6:	f103 0301 	add.w	r3, r3, #1
 801d1ba:	6026      	str	r6, [r4, #0]
 801d1bc:	dc18      	bgt.n	801d1f0 <_svfprintf_r+0x1308>
 801d1be:	6065      	str	r5, [r4, #4]
 801d1c0:	2b07      	cmp	r3, #7
 801d1c2:	4415      	add	r5, r2
 801d1c4:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801d1c8:	f77f aa74 	ble.w	801c6b4 <_svfprintf_r+0x7cc>
 801d1cc:	aa22      	add	r2, sp, #136	; 0x88
 801d1ce:	4649      	mov	r1, r9
 801d1d0:	4650      	mov	r0, sl
 801d1d2:	f003 fea9 	bl	8020f28 <__ssprint_r>
 801d1d6:	2800      	cmp	r0, #0
 801d1d8:	f43f aa6c 	beq.w	801c6b4 <_svfprintf_r+0x7cc>
 801d1dc:	9b03      	ldr	r3, [sp, #12]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	f43f a88a 	beq.w	801c2f8 <_svfprintf_r+0x410>
 801d1e4:	4619      	mov	r1, r3
 801d1e6:	4650      	mov	r0, sl
 801d1e8:	f002 fd7a 	bl	801fce0 <_free_r>
 801d1ec:	f7ff b884 	b.w	801c2f8 <_svfprintf_r+0x410>
 801d1f0:	3210      	adds	r2, #16
 801d1f2:	2b07      	cmp	r3, #7
 801d1f4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801d1f8:	6067      	str	r7, [r4, #4]
 801d1fa:	dc02      	bgt.n	801d202 <_svfprintf_r+0x131a>
 801d1fc:	3408      	adds	r4, #8
 801d1fe:	3d10      	subs	r5, #16
 801d200:	e7d6      	b.n	801d1b0 <_svfprintf_r+0x12c8>
 801d202:	aa22      	add	r2, sp, #136	; 0x88
 801d204:	4649      	mov	r1, r9
 801d206:	4650      	mov	r0, sl
 801d208:	f003 fe8e 	bl	8020f28 <__ssprint_r>
 801d20c:	2800      	cmp	r0, #0
 801d20e:	d1e5      	bne.n	801d1dc <_svfprintf_r+0x12f4>
 801d210:	ac25      	add	r4, sp, #148	; 0x94
 801d212:	e7f4      	b.n	801d1fe <_svfprintf_r+0x1316>
 801d214:	9903      	ldr	r1, [sp, #12]
 801d216:	4650      	mov	r0, sl
 801d218:	f002 fd62 	bl	801fce0 <_free_r>
 801d21c:	f7ff ba62 	b.w	801c6e4 <_svfprintf_r+0x7fc>
 801d220:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d222:	2b00      	cmp	r3, #0
 801d224:	f43f a868 	beq.w	801c2f8 <_svfprintf_r+0x410>
 801d228:	aa22      	add	r2, sp, #136	; 0x88
 801d22a:	4649      	mov	r1, r9
 801d22c:	4650      	mov	r0, sl
 801d22e:	f003 fe7b 	bl	8020f28 <__ssprint_r>
 801d232:	f7ff b861 	b.w	801c2f8 <_svfprintf_r+0x410>
 801d236:	ea56 0207 	orrs.w	r2, r6, r7
 801d23a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d23e:	f43f ab78 	beq.w	801c932 <_svfprintf_r+0xa4a>
 801d242:	2b01      	cmp	r3, #1
 801d244:	f43f ac0d 	beq.w	801ca62 <_svfprintf_r+0xb7a>
 801d248:	2b02      	cmp	r3, #2
 801d24a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801d24e:	f43f ac55 	beq.w	801cafc <_svfprintf_r+0xc14>
 801d252:	08f2      	lsrs	r2, r6, #3
 801d254:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801d258:	08f8      	lsrs	r0, r7, #3
 801d25a:	f006 0307 	and.w	r3, r6, #7
 801d25e:	4607      	mov	r7, r0
 801d260:	4616      	mov	r6, r2
 801d262:	3330      	adds	r3, #48	; 0x30
 801d264:	ea56 0207 	orrs.w	r2, r6, r7
 801d268:	4659      	mov	r1, fp
 801d26a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801d26e:	d1f0      	bne.n	801d252 <_svfprintf_r+0x136a>
 801d270:	9a03      	ldr	r2, [sp, #12]
 801d272:	07d2      	lsls	r2, r2, #31
 801d274:	d506      	bpl.n	801d284 <_svfprintf_r+0x139c>
 801d276:	2b30      	cmp	r3, #48	; 0x30
 801d278:	d004      	beq.n	801d284 <_svfprintf_r+0x139c>
 801d27a:	2330      	movs	r3, #48	; 0x30
 801d27c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801d280:	f1a1 0b02 	sub.w	fp, r1, #2
 801d284:	ab4e      	add	r3, sp, #312	; 0x138
 801d286:	eba3 030b 	sub.w	r3, r3, fp
 801d28a:	9e04      	ldr	r6, [sp, #16]
 801d28c:	9304      	str	r3, [sp, #16]
 801d28e:	2300      	movs	r3, #0
 801d290:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d294:	9303      	str	r3, [sp, #12]
 801d296:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d29a:	461d      	mov	r5, r3
 801d29c:	f7ff b94c 	b.w	801c538 <_svfprintf_r+0x650>
 801d2a0:	080293b0 	.word	0x080293b0
 801d2a4:	080293a0 	.word	0x080293a0

0801d2a8 <__tzcalc_limits>:
 801d2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2ac:	4680      	mov	r8, r0
 801d2ae:	f002 fe39 	bl	801ff24 <__gettzinfo>
 801d2b2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801d2b6:	4598      	cmp	r8, r3
 801d2b8:	f340 8098 	ble.w	801d3ec <__tzcalc_limits+0x144>
 801d2bc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801d2c0:	4443      	add	r3, r8
 801d2c2:	109b      	asrs	r3, r3, #2
 801d2c4:	f240 126d 	movw	r2, #365	; 0x16d
 801d2c8:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801d2cc:	fb02 3505 	mla	r5, r2, r5, r3
 801d2d0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801d2d4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801d2d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801d2dc:	441d      	add	r5, r3
 801d2de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d2e2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801d2e6:	fb98 f7f3 	sdiv	r7, r8, r3
 801d2ea:	fb03 8717 	mls	r7, r3, r7, r8
 801d2ee:	4442      	add	r2, r8
 801d2f0:	fab7 fc87 	clz	ip, r7
 801d2f4:	fbb2 f2f3 	udiv	r2, r2, r3
 801d2f8:	f008 0303 	and.w	r3, r8, #3
 801d2fc:	4415      	add	r5, r2
 801d2fe:	2264      	movs	r2, #100	; 0x64
 801d300:	f8c0 8004 	str.w	r8, [r0, #4]
 801d304:	fb98 f6f2 	sdiv	r6, r8, r2
 801d308:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d30c:	fb02 8616 	mls	r6, r2, r6, r8
 801d310:	4604      	mov	r4, r0
 801d312:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801d316:	9300      	str	r3, [sp, #0]
 801d318:	f04f 0e07 	mov.w	lr, #7
 801d31c:	7a22      	ldrb	r2, [r4, #8]
 801d31e:	6963      	ldr	r3, [r4, #20]
 801d320:	2a4a      	cmp	r2, #74	; 0x4a
 801d322:	d128      	bne.n	801d376 <__tzcalc_limits+0xce>
 801d324:	9900      	ldr	r1, [sp, #0]
 801d326:	18ea      	adds	r2, r5, r3
 801d328:	b901      	cbnz	r1, 801d32c <__tzcalc_limits+0x84>
 801d32a:	b906      	cbnz	r6, 801d32e <__tzcalc_limits+0x86>
 801d32c:	bb0f      	cbnz	r7, 801d372 <__tzcalc_limits+0xca>
 801d32e:	2b3b      	cmp	r3, #59	; 0x3b
 801d330:	bfd4      	ite	le
 801d332:	2300      	movle	r3, #0
 801d334:	2301      	movgt	r3, #1
 801d336:	4413      	add	r3, r2
 801d338:	1e5a      	subs	r2, r3, #1
 801d33a:	69a3      	ldr	r3, [r4, #24]
 801d33c:	492c      	ldr	r1, [pc, #176]	; (801d3f0 <__tzcalc_limits+0x148>)
 801d33e:	fb01 3202 	mla	r2, r1, r2, r3
 801d342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d344:	4413      	add	r3, r2
 801d346:	461a      	mov	r2, r3
 801d348:	17db      	asrs	r3, r3, #31
 801d34a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801d34e:	3428      	adds	r4, #40	; 0x28
 801d350:	45a3      	cmp	fp, r4
 801d352:	d1e3      	bne.n	801d31c <__tzcalc_limits+0x74>
 801d354:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801d358:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801d35c:	4294      	cmp	r4, r2
 801d35e:	eb75 0303 	sbcs.w	r3, r5, r3
 801d362:	bfb4      	ite	lt
 801d364:	2301      	movlt	r3, #1
 801d366:	2300      	movge	r3, #0
 801d368:	6003      	str	r3, [r0, #0]
 801d36a:	2001      	movs	r0, #1
 801d36c:	b003      	add	sp, #12
 801d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d372:	2300      	movs	r3, #0
 801d374:	e7df      	b.n	801d336 <__tzcalc_limits+0x8e>
 801d376:	2a44      	cmp	r2, #68	; 0x44
 801d378:	d101      	bne.n	801d37e <__tzcalc_limits+0xd6>
 801d37a:	18ea      	adds	r2, r5, r3
 801d37c:	e7dd      	b.n	801d33a <__tzcalc_limits+0x92>
 801d37e:	9a00      	ldr	r2, [sp, #0]
 801d380:	bb72      	cbnz	r2, 801d3e0 <__tzcalc_limits+0x138>
 801d382:	2e00      	cmp	r6, #0
 801d384:	bf0c      	ite	eq
 801d386:	46e0      	moveq	r8, ip
 801d388:	f04f 0801 	movne.w	r8, #1
 801d38c:	4919      	ldr	r1, [pc, #100]	; (801d3f4 <__tzcalc_limits+0x14c>)
 801d38e:	68e2      	ldr	r2, [r4, #12]
 801d390:	9201      	str	r2, [sp, #4]
 801d392:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801d396:	fb0a 1808 	mla	r8, sl, r8, r1
 801d39a:	462a      	mov	r2, r5
 801d39c:	f04f 0900 	mov.w	r9, #0
 801d3a0:	f1a8 0804 	sub.w	r8, r8, #4
 801d3a4:	9901      	ldr	r1, [sp, #4]
 801d3a6:	f109 0901 	add.w	r9, r9, #1
 801d3aa:	4549      	cmp	r1, r9
 801d3ac:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801d3b0:	dc18      	bgt.n	801d3e4 <__tzcalc_limits+0x13c>
 801d3b2:	f102 0804 	add.w	r8, r2, #4
 801d3b6:	fb98 f9fe 	sdiv	r9, r8, lr
 801d3ba:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801d3be:	eba8 0909 	sub.w	r9, r8, r9
 801d3c2:	ebb3 0909 	subs.w	r9, r3, r9
 801d3c6:	6923      	ldr	r3, [r4, #16]
 801d3c8:	f103 33ff 	add.w	r3, r3, #4294967295
 801d3cc:	bf48      	it	mi
 801d3ce:	f109 0907 	addmi.w	r9, r9, #7
 801d3d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d3d6:	444b      	add	r3, r9
 801d3d8:	4553      	cmp	r3, sl
 801d3da:	da05      	bge.n	801d3e8 <__tzcalc_limits+0x140>
 801d3dc:	441a      	add	r2, r3
 801d3de:	e7ac      	b.n	801d33a <__tzcalc_limits+0x92>
 801d3e0:	46e0      	mov	r8, ip
 801d3e2:	e7d3      	b.n	801d38c <__tzcalc_limits+0xe4>
 801d3e4:	4452      	add	r2, sl
 801d3e6:	e7dd      	b.n	801d3a4 <__tzcalc_limits+0xfc>
 801d3e8:	3b07      	subs	r3, #7
 801d3ea:	e7f5      	b.n	801d3d8 <__tzcalc_limits+0x130>
 801d3ec:	2000      	movs	r0, #0
 801d3ee:	e7bd      	b.n	801d36c <__tzcalc_limits+0xc4>
 801d3f0:	00015180 	.word	0x00015180
 801d3f4:	0802930c 	.word	0x0802930c

0801d3f8 <__tz_lock>:
 801d3f8:	4801      	ldr	r0, [pc, #4]	; (801d400 <__tz_lock+0x8>)
 801d3fa:	f002 be4d 	b.w	8020098 <__retarget_lock_acquire>
 801d3fe:	bf00      	nop
 801d400:	2000be7f 	.word	0x2000be7f

0801d404 <__tz_unlock>:
 801d404:	4801      	ldr	r0, [pc, #4]	; (801d40c <__tz_unlock+0x8>)
 801d406:	f002 be49 	b.w	802009c <__retarget_lock_release>
 801d40a:	bf00      	nop
 801d40c:	2000be7f 	.word	0x2000be7f

0801d410 <_tzset_unlocked>:
 801d410:	4b01      	ldr	r3, [pc, #4]	; (801d418 <_tzset_unlocked+0x8>)
 801d412:	6818      	ldr	r0, [r3, #0]
 801d414:	f000 b802 	b.w	801d41c <_tzset_unlocked_r>
 801d418:	20000038 	.word	0x20000038

0801d41c <_tzset_unlocked_r>:
 801d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d420:	b08d      	sub	sp, #52	; 0x34
 801d422:	4607      	mov	r7, r0
 801d424:	f002 fd7e 	bl	801ff24 <__gettzinfo>
 801d428:	49ae      	ldr	r1, [pc, #696]	; (801d6e4 <_tzset_unlocked_r+0x2c8>)
 801d42a:	4eaf      	ldr	r6, [pc, #700]	; (801d6e8 <_tzset_unlocked_r+0x2cc>)
 801d42c:	4605      	mov	r5, r0
 801d42e:	4638      	mov	r0, r7
 801d430:	f002 fd70 	bl	801ff14 <_getenv_r>
 801d434:	4604      	mov	r4, r0
 801d436:	b970      	cbnz	r0, 801d456 <_tzset_unlocked_r+0x3a>
 801d438:	4bac      	ldr	r3, [pc, #688]	; (801d6ec <_tzset_unlocked_r+0x2d0>)
 801d43a:	4aad      	ldr	r2, [pc, #692]	; (801d6f0 <_tzset_unlocked_r+0x2d4>)
 801d43c:	6018      	str	r0, [r3, #0]
 801d43e:	4bad      	ldr	r3, [pc, #692]	; (801d6f4 <_tzset_unlocked_r+0x2d8>)
 801d440:	6018      	str	r0, [r3, #0]
 801d442:	4bad      	ldr	r3, [pc, #692]	; (801d6f8 <_tzset_unlocked_r+0x2dc>)
 801d444:	6830      	ldr	r0, [r6, #0]
 801d446:	e9c3 2200 	strd	r2, r2, [r3]
 801d44a:	f002 fe9d 	bl	8020188 <free>
 801d44e:	6034      	str	r4, [r6, #0]
 801d450:	b00d      	add	sp, #52	; 0x34
 801d452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d456:	6831      	ldr	r1, [r6, #0]
 801d458:	2900      	cmp	r1, #0
 801d45a:	d15f      	bne.n	801d51c <_tzset_unlocked_r+0x100>
 801d45c:	6830      	ldr	r0, [r6, #0]
 801d45e:	f002 fe93 	bl	8020188 <free>
 801d462:	4620      	mov	r0, r4
 801d464:	f7e2 fede 	bl	8000224 <strlen>
 801d468:	1c41      	adds	r1, r0, #1
 801d46a:	4638      	mov	r0, r7
 801d46c:	f002 fe94 	bl	8020198 <_malloc_r>
 801d470:	6030      	str	r0, [r6, #0]
 801d472:	2800      	cmp	r0, #0
 801d474:	d157      	bne.n	801d526 <_tzset_unlocked_r+0x10a>
 801d476:	7823      	ldrb	r3, [r4, #0]
 801d478:	4aa0      	ldr	r2, [pc, #640]	; (801d6fc <_tzset_unlocked_r+0x2e0>)
 801d47a:	49a1      	ldr	r1, [pc, #644]	; (801d700 <_tzset_unlocked_r+0x2e4>)
 801d47c:	2b3a      	cmp	r3, #58	; 0x3a
 801d47e:	bf08      	it	eq
 801d480:	3401      	addeq	r4, #1
 801d482:	ae0a      	add	r6, sp, #40	; 0x28
 801d484:	4633      	mov	r3, r6
 801d486:	4620      	mov	r0, r4
 801d488:	f003 fc4c 	bl	8020d24 <siscanf>
 801d48c:	2800      	cmp	r0, #0
 801d48e:	dddf      	ble.n	801d450 <_tzset_unlocked_r+0x34>
 801d490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d492:	18e7      	adds	r7, r4, r3
 801d494:	5ce3      	ldrb	r3, [r4, r3]
 801d496:	2b2d      	cmp	r3, #45	; 0x2d
 801d498:	d149      	bne.n	801d52e <_tzset_unlocked_r+0x112>
 801d49a:	3701      	adds	r7, #1
 801d49c:	f04f 34ff 	mov.w	r4, #4294967295
 801d4a0:	f10d 0a20 	add.w	sl, sp, #32
 801d4a4:	f10d 0b1e 	add.w	fp, sp, #30
 801d4a8:	f04f 0800 	mov.w	r8, #0
 801d4ac:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801d4b0:	4994      	ldr	r1, [pc, #592]	; (801d704 <_tzset_unlocked_r+0x2e8>)
 801d4b2:	9603      	str	r6, [sp, #12]
 801d4b4:	f8cd b000 	str.w	fp, [sp]
 801d4b8:	4633      	mov	r3, r6
 801d4ba:	aa07      	add	r2, sp, #28
 801d4bc:	4638      	mov	r0, r7
 801d4be:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d4c2:	f8ad 8020 	strh.w	r8, [sp, #32]
 801d4c6:	f003 fc2d 	bl	8020d24 <siscanf>
 801d4ca:	4540      	cmp	r0, r8
 801d4cc:	ddc0      	ble.n	801d450 <_tzset_unlocked_r+0x34>
 801d4ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d4d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d4d6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801d710 <_tzset_unlocked_r+0x2f4>
 801d4da:	213c      	movs	r1, #60	; 0x3c
 801d4dc:	fb01 2203 	mla	r2, r1, r3, r2
 801d4e0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d4e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d4e8:	fb01 2303 	mla	r3, r1, r3, r2
 801d4ec:	435c      	muls	r4, r3
 801d4ee:	62ac      	str	r4, [r5, #40]	; 0x28
 801d4f0:	4c81      	ldr	r4, [pc, #516]	; (801d6f8 <_tzset_unlocked_r+0x2dc>)
 801d4f2:	4b82      	ldr	r3, [pc, #520]	; (801d6fc <_tzset_unlocked_r+0x2e0>)
 801d4f4:	6023      	str	r3, [r4, #0]
 801d4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4f8:	4981      	ldr	r1, [pc, #516]	; (801d700 <_tzset_unlocked_r+0x2e4>)
 801d4fa:	441f      	add	r7, r3
 801d4fc:	464a      	mov	r2, r9
 801d4fe:	4633      	mov	r3, r6
 801d500:	4638      	mov	r0, r7
 801d502:	f003 fc0f 	bl	8020d24 <siscanf>
 801d506:	4540      	cmp	r0, r8
 801d508:	dc16      	bgt.n	801d538 <_tzset_unlocked_r+0x11c>
 801d50a:	6823      	ldr	r3, [r4, #0]
 801d50c:	6063      	str	r3, [r4, #4]
 801d50e:	4b77      	ldr	r3, [pc, #476]	; (801d6ec <_tzset_unlocked_r+0x2d0>)
 801d510:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d512:	601a      	str	r2, [r3, #0]
 801d514:	4b77      	ldr	r3, [pc, #476]	; (801d6f4 <_tzset_unlocked_r+0x2d8>)
 801d516:	f8c3 8000 	str.w	r8, [r3]
 801d51a:	e799      	b.n	801d450 <_tzset_unlocked_r+0x34>
 801d51c:	f7e2 fe78 	bl	8000210 <strcmp>
 801d520:	2800      	cmp	r0, #0
 801d522:	d19b      	bne.n	801d45c <_tzset_unlocked_r+0x40>
 801d524:	e794      	b.n	801d450 <_tzset_unlocked_r+0x34>
 801d526:	4621      	mov	r1, r4
 801d528:	f003 fc6d 	bl	8020e06 <strcpy>
 801d52c:	e7a3      	b.n	801d476 <_tzset_unlocked_r+0x5a>
 801d52e:	2b2b      	cmp	r3, #43	; 0x2b
 801d530:	bf08      	it	eq
 801d532:	3701      	addeq	r7, #1
 801d534:	2401      	movs	r4, #1
 801d536:	e7b3      	b.n	801d4a0 <_tzset_unlocked_r+0x84>
 801d538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d53a:	f8c4 9004 	str.w	r9, [r4, #4]
 801d53e:	18fc      	adds	r4, r7, r3
 801d540:	5cfb      	ldrb	r3, [r7, r3]
 801d542:	2b2d      	cmp	r3, #45	; 0x2d
 801d544:	f040 808b 	bne.w	801d65e <_tzset_unlocked_r+0x242>
 801d548:	3401      	adds	r4, #1
 801d54a:	f04f 37ff 	mov.w	r7, #4294967295
 801d54e:	2300      	movs	r3, #0
 801d550:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d554:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d558:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d55c:	930a      	str	r3, [sp, #40]	; 0x28
 801d55e:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d562:	e9cd b600 	strd	fp, r6, [sp]
 801d566:	4967      	ldr	r1, [pc, #412]	; (801d704 <_tzset_unlocked_r+0x2e8>)
 801d568:	4633      	mov	r3, r6
 801d56a:	aa07      	add	r2, sp, #28
 801d56c:	4620      	mov	r0, r4
 801d56e:	f003 fbd9 	bl	8020d24 <siscanf>
 801d572:	2800      	cmp	r0, #0
 801d574:	dc78      	bgt.n	801d668 <_tzset_unlocked_r+0x24c>
 801d576:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801d578:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801d57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d57e:	652f      	str	r7, [r5, #80]	; 0x50
 801d580:	441c      	add	r4, r3
 801d582:	462f      	mov	r7, r5
 801d584:	f04f 0900 	mov.w	r9, #0
 801d588:	7823      	ldrb	r3, [r4, #0]
 801d58a:	2b2c      	cmp	r3, #44	; 0x2c
 801d58c:	bf08      	it	eq
 801d58e:	3401      	addeq	r4, #1
 801d590:	f894 8000 	ldrb.w	r8, [r4]
 801d594:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801d598:	d178      	bne.n	801d68c <_tzset_unlocked_r+0x270>
 801d59a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801d59e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801d5a2:	ab09      	add	r3, sp, #36	; 0x24
 801d5a4:	9300      	str	r3, [sp, #0]
 801d5a6:	4958      	ldr	r1, [pc, #352]	; (801d708 <_tzset_unlocked_r+0x2ec>)
 801d5a8:	9603      	str	r6, [sp, #12]
 801d5aa:	4633      	mov	r3, r6
 801d5ac:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	f003 fbb7 	bl	8020d24 <siscanf>
 801d5b6:	2803      	cmp	r0, #3
 801d5b8:	f47f af4a 	bne.w	801d450 <_tzset_unlocked_r+0x34>
 801d5bc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d5c0:	1e4b      	subs	r3, r1, #1
 801d5c2:	2b0b      	cmp	r3, #11
 801d5c4:	f63f af44 	bhi.w	801d450 <_tzset_unlocked_r+0x34>
 801d5c8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d5cc:	1e53      	subs	r3, r2, #1
 801d5ce:	2b04      	cmp	r3, #4
 801d5d0:	f63f af3e 	bhi.w	801d450 <_tzset_unlocked_r+0x34>
 801d5d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d5d8:	2b06      	cmp	r3, #6
 801d5da:	f63f af39 	bhi.w	801d450 <_tzset_unlocked_r+0x34>
 801d5de:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801d5e2:	f887 8008 	strb.w	r8, [r7, #8]
 801d5e6:	617b      	str	r3, [r7, #20]
 801d5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5ea:	eb04 0803 	add.w	r8, r4, r3
 801d5ee:	2302      	movs	r3, #2
 801d5f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d5fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d5fe:	930a      	str	r3, [sp, #40]	; 0x28
 801d600:	f898 3000 	ldrb.w	r3, [r8]
 801d604:	2b2f      	cmp	r3, #47	; 0x2f
 801d606:	d109      	bne.n	801d61c <_tzset_unlocked_r+0x200>
 801d608:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d60c:	e9cd b600 	strd	fp, r6, [sp]
 801d610:	493e      	ldr	r1, [pc, #248]	; (801d70c <_tzset_unlocked_r+0x2f0>)
 801d612:	4633      	mov	r3, r6
 801d614:	aa07      	add	r2, sp, #28
 801d616:	4640      	mov	r0, r8
 801d618:	f003 fb84 	bl	8020d24 <siscanf>
 801d61c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d620:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d624:	213c      	movs	r1, #60	; 0x3c
 801d626:	fb01 2203 	mla	r2, r1, r3, r2
 801d62a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d62e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d632:	fb01 2303 	mla	r3, r1, r3, r2
 801d636:	61bb      	str	r3, [r7, #24]
 801d638:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d63a:	3728      	adds	r7, #40	; 0x28
 801d63c:	4444      	add	r4, r8
 801d63e:	f1b9 0f00 	cmp.w	r9, #0
 801d642:	d020      	beq.n	801d686 <_tzset_unlocked_r+0x26a>
 801d644:	6868      	ldr	r0, [r5, #4]
 801d646:	f7ff fe2f 	bl	801d2a8 <__tzcalc_limits>
 801d64a:	4b28      	ldr	r3, [pc, #160]	; (801d6ec <_tzset_unlocked_r+0x2d0>)
 801d64c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d64e:	601a      	str	r2, [r3, #0]
 801d650:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d652:	1a9b      	subs	r3, r3, r2
 801d654:	4a27      	ldr	r2, [pc, #156]	; (801d6f4 <_tzset_unlocked_r+0x2d8>)
 801d656:	bf18      	it	ne
 801d658:	2301      	movne	r3, #1
 801d65a:	6013      	str	r3, [r2, #0]
 801d65c:	e6f8      	b.n	801d450 <_tzset_unlocked_r+0x34>
 801d65e:	2b2b      	cmp	r3, #43	; 0x2b
 801d660:	bf08      	it	eq
 801d662:	3401      	addeq	r4, #1
 801d664:	2701      	movs	r7, #1
 801d666:	e772      	b.n	801d54e <_tzset_unlocked_r+0x132>
 801d668:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d66c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d670:	213c      	movs	r1, #60	; 0x3c
 801d672:	fb01 2203 	mla	r2, r1, r3, r2
 801d676:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d67a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d67e:	fb01 2303 	mla	r3, r1, r3, r2
 801d682:	435f      	muls	r7, r3
 801d684:	e77a      	b.n	801d57c <_tzset_unlocked_r+0x160>
 801d686:	f04f 0901 	mov.w	r9, #1
 801d68a:	e77d      	b.n	801d588 <_tzset_unlocked_r+0x16c>
 801d68c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801d690:	bf06      	itte	eq
 801d692:	3401      	addeq	r4, #1
 801d694:	4643      	moveq	r3, r8
 801d696:	2344      	movne	r3, #68	; 0x44
 801d698:	220a      	movs	r2, #10
 801d69a:	a90b      	add	r1, sp, #44	; 0x2c
 801d69c:	4620      	mov	r0, r4
 801d69e:	9305      	str	r3, [sp, #20]
 801d6a0:	f003 fc38 	bl	8020f14 <strtoul>
 801d6a4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801d6a8:	9b05      	ldr	r3, [sp, #20]
 801d6aa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801d6ae:	45a0      	cmp	r8, r4
 801d6b0:	d114      	bne.n	801d6dc <_tzset_unlocked_r+0x2c0>
 801d6b2:	234d      	movs	r3, #77	; 0x4d
 801d6b4:	f1b9 0f00 	cmp.w	r9, #0
 801d6b8:	d107      	bne.n	801d6ca <_tzset_unlocked_r+0x2ae>
 801d6ba:	722b      	strb	r3, [r5, #8]
 801d6bc:	2103      	movs	r1, #3
 801d6be:	2302      	movs	r3, #2
 801d6c0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801d6c4:	f8c5 9014 	str.w	r9, [r5, #20]
 801d6c8:	e791      	b.n	801d5ee <_tzset_unlocked_r+0x1d2>
 801d6ca:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801d6ce:	220b      	movs	r2, #11
 801d6d0:	2301      	movs	r3, #1
 801d6d2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801d6d6:	2300      	movs	r3, #0
 801d6d8:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d6da:	e788      	b.n	801d5ee <_tzset_unlocked_r+0x1d2>
 801d6dc:	b280      	uxth	r0, r0
 801d6de:	723b      	strb	r3, [r7, #8]
 801d6e0:	6178      	str	r0, [r7, #20]
 801d6e2:	e784      	b.n	801d5ee <_tzset_unlocked_r+0x1d2>
 801d6e4:	080293c0 	.word	0x080293c0
 801d6e8:	2000505c 	.word	0x2000505c
 801d6ec:	20005064 	.word	0x20005064
 801d6f0:	080293c3 	.word	0x080293c3
 801d6f4:	20005060 	.word	0x20005060
 801d6f8:	20000468 	.word	0x20000468
 801d6fc:	20005051 	.word	0x20005051
 801d700:	080293c7 	.word	0x080293c7
 801d704:	080293ea 	.word	0x080293ea
 801d708:	080293d6 	.word	0x080293d6
 801d70c:	080293e9 	.word	0x080293e9
 801d710:	20005046 	.word	0x20005046
 801d714:	00000000 	.word	0x00000000

0801d718 <_vfprintf_r>:
 801d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d71c:	ed2d 8b04 	vpush	{d8-d9}
 801d720:	b0cf      	sub	sp, #316	; 0x13c
 801d722:	4689      	mov	r9, r1
 801d724:	9203      	str	r2, [sp, #12]
 801d726:	461c      	mov	r4, r3
 801d728:	461e      	mov	r6, r3
 801d72a:	4682      	mov	sl, r0
 801d72c:	f002 fcae 	bl	802008c <_localeconv_r>
 801d730:	6803      	ldr	r3, [r0, #0]
 801d732:	9313      	str	r3, [sp, #76]	; 0x4c
 801d734:	4618      	mov	r0, r3
 801d736:	f7e2 fd75 	bl	8000224 <strlen>
 801d73a:	900e      	str	r0, [sp, #56]	; 0x38
 801d73c:	f1ba 0f00 	cmp.w	sl, #0
 801d740:	d005      	beq.n	801d74e <_vfprintf_r+0x36>
 801d742:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801d746:	b913      	cbnz	r3, 801d74e <_vfprintf_r+0x36>
 801d748:	4650      	mov	r0, sl
 801d74a:	f002 fa39 	bl	801fbc0 <__sinit>
 801d74e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d752:	07d8      	lsls	r0, r3, #31
 801d754:	d407      	bmi.n	801d766 <_vfprintf_r+0x4e>
 801d756:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d75a:	0599      	lsls	r1, r3, #22
 801d75c:	d403      	bmi.n	801d766 <_vfprintf_r+0x4e>
 801d75e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d762:	f002 fc9a 	bl	802009a <__retarget_lock_acquire_recursive>
 801d766:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801d76a:	049a      	lsls	r2, r3, #18
 801d76c:	d409      	bmi.n	801d782 <_vfprintf_r+0x6a>
 801d76e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d772:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d776:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d77a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d77e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801d782:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d786:	071f      	lsls	r7, r3, #28
 801d788:	d502      	bpl.n	801d790 <_vfprintf_r+0x78>
 801d78a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d78e:	b9d3      	cbnz	r3, 801d7c6 <_vfprintf_r+0xae>
 801d790:	4649      	mov	r1, r9
 801d792:	4650      	mov	r0, sl
 801d794:	f001 fa36 	bl	801ec04 <__swsetup_r>
 801d798:	b1a8      	cbz	r0, 801d7c6 <_vfprintf_r+0xae>
 801d79a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d79e:	07dd      	lsls	r5, r3, #31
 801d7a0:	d508      	bpl.n	801d7b4 <_vfprintf_r+0x9c>
 801d7a2:	f04f 33ff 	mov.w	r3, #4294967295
 801d7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d7a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d7aa:	b04f      	add	sp, #316	; 0x13c
 801d7ac:	ecbd 8b04 	vpop	{d8-d9}
 801d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7b4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d7b8:	059c      	lsls	r4, r3, #22
 801d7ba:	d4f2      	bmi.n	801d7a2 <_vfprintf_r+0x8a>
 801d7bc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d7c0:	f002 fc6d 	bl	802009e <__retarget_lock_release_recursive>
 801d7c4:	e7ed      	b.n	801d7a2 <_vfprintf_r+0x8a>
 801d7c6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d7ca:	f003 021a 	and.w	r2, r3, #26
 801d7ce:	2a0a      	cmp	r2, #10
 801d7d0:	d115      	bne.n	801d7fe <_vfprintf_r+0xe6>
 801d7d2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801d7d6:	2a00      	cmp	r2, #0
 801d7d8:	db11      	blt.n	801d7fe <_vfprintf_r+0xe6>
 801d7da:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801d7de:	07d0      	lsls	r0, r2, #31
 801d7e0:	d405      	bmi.n	801d7ee <_vfprintf_r+0xd6>
 801d7e2:	0599      	lsls	r1, r3, #22
 801d7e4:	d403      	bmi.n	801d7ee <_vfprintf_r+0xd6>
 801d7e6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d7ea:	f002 fc58 	bl	802009e <__retarget_lock_release_recursive>
 801d7ee:	9a03      	ldr	r2, [sp, #12]
 801d7f0:	4623      	mov	r3, r4
 801d7f2:	4649      	mov	r1, r9
 801d7f4:	4650      	mov	r0, sl
 801d7f6:	f001 f9c5 	bl	801eb84 <__sbprintf>
 801d7fa:	900f      	str	r0, [sp, #60]	; 0x3c
 801d7fc:	e7d4      	b.n	801d7a8 <_vfprintf_r+0x90>
 801d7fe:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 801da68 <_vfprintf_r+0x350>
 801d802:	2500      	movs	r5, #0
 801d804:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801d808:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d80c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801d810:	ac25      	add	r4, sp, #148	; 0x94
 801d812:	9422      	str	r4, [sp, #136]	; 0x88
 801d814:	9505      	str	r5, [sp, #20]
 801d816:	950a      	str	r5, [sp, #40]	; 0x28
 801d818:	9512      	str	r5, [sp, #72]	; 0x48
 801d81a:	9514      	str	r5, [sp, #80]	; 0x50
 801d81c:	950f      	str	r5, [sp, #60]	; 0x3c
 801d81e:	9b03      	ldr	r3, [sp, #12]
 801d820:	461d      	mov	r5, r3
 801d822:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d826:	b10a      	cbz	r2, 801d82c <_vfprintf_r+0x114>
 801d828:	2a25      	cmp	r2, #37	; 0x25
 801d82a:	d1f9      	bne.n	801d820 <_vfprintf_r+0x108>
 801d82c:	9b03      	ldr	r3, [sp, #12]
 801d82e:	1aef      	subs	r7, r5, r3
 801d830:	d00d      	beq.n	801d84e <_vfprintf_r+0x136>
 801d832:	e9c4 3700 	strd	r3, r7, [r4]
 801d836:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d838:	443b      	add	r3, r7
 801d83a:	9324      	str	r3, [sp, #144]	; 0x90
 801d83c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d83e:	3301      	adds	r3, #1
 801d840:	2b07      	cmp	r3, #7
 801d842:	9323      	str	r3, [sp, #140]	; 0x8c
 801d844:	dc79      	bgt.n	801d93a <_vfprintf_r+0x222>
 801d846:	3408      	adds	r4, #8
 801d848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d84a:	443b      	add	r3, r7
 801d84c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d84e:	782b      	ldrb	r3, [r5, #0]
 801d850:	2b00      	cmp	r3, #0
 801d852:	f001 8156 	beq.w	801eb02 <_vfprintf_r+0x13ea>
 801d856:	2300      	movs	r3, #0
 801d858:	3501      	adds	r5, #1
 801d85a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d85e:	f04f 38ff 	mov.w	r8, #4294967295
 801d862:	9310      	str	r3, [sp, #64]	; 0x40
 801d864:	469b      	mov	fp, r3
 801d866:	270a      	movs	r7, #10
 801d868:	212b      	movs	r1, #43	; 0x2b
 801d86a:	462a      	mov	r2, r5
 801d86c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d870:	9307      	str	r3, [sp, #28]
 801d872:	4613      	mov	r3, r2
 801d874:	930b      	str	r3, [sp, #44]	; 0x2c
 801d876:	9b07      	ldr	r3, [sp, #28]
 801d878:	3b20      	subs	r3, #32
 801d87a:	2b5a      	cmp	r3, #90	; 0x5a
 801d87c:	f200 85c0 	bhi.w	801e400 <_vfprintf_r+0xce8>
 801d880:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d884:	05be007e 	.word	0x05be007e
 801d888:	008605be 	.word	0x008605be
 801d88c:	05be05be 	.word	0x05be05be
 801d890:	006505be 	.word	0x006505be
 801d894:	05be05be 	.word	0x05be05be
 801d898:	00930089 	.word	0x00930089
 801d89c:	009005be 	.word	0x009005be
 801d8a0:	05be0096 	.word	0x05be0096
 801d8a4:	00b200af 	.word	0x00b200af
 801d8a8:	00b200b2 	.word	0x00b200b2
 801d8ac:	00b200b2 	.word	0x00b200b2
 801d8b0:	00b200b2 	.word	0x00b200b2
 801d8b4:	00b200b2 	.word	0x00b200b2
 801d8b8:	05be05be 	.word	0x05be05be
 801d8bc:	05be05be 	.word	0x05be05be
 801d8c0:	05be05be 	.word	0x05be05be
 801d8c4:	012105be 	.word	0x012105be
 801d8c8:	00df05be 	.word	0x00df05be
 801d8cc:	012100f6 	.word	0x012100f6
 801d8d0:	01210121 	.word	0x01210121
 801d8d4:	05be05be 	.word	0x05be05be
 801d8d8:	05be05be 	.word	0x05be05be
 801d8dc:	05be00c2 	.word	0x05be00c2
 801d8e0:	049005be 	.word	0x049005be
 801d8e4:	05be05be 	.word	0x05be05be
 801d8e8:	04d705be 	.word	0x04d705be
 801d8ec:	04fb05be 	.word	0x04fb05be
 801d8f0:	05be05be 	.word	0x05be05be
 801d8f4:	05be051a 	.word	0x05be051a
 801d8f8:	05be05be 	.word	0x05be05be
 801d8fc:	05be05be 	.word	0x05be05be
 801d900:	05be05be 	.word	0x05be05be
 801d904:	012105be 	.word	0x012105be
 801d908:	00df05be 	.word	0x00df05be
 801d90c:	012100f8 	.word	0x012100f8
 801d910:	01210121 	.word	0x01210121
 801d914:	00f800c5 	.word	0x00f800c5
 801d918:	05be00d9 	.word	0x05be00d9
 801d91c:	05be00d2 	.word	0x05be00d2
 801d920:	0492046d 	.word	0x0492046d
 801d924:	00d904c6 	.word	0x00d904c6
 801d928:	04d705be 	.word	0x04d705be
 801d92c:	04fd007c 	.word	0x04fd007c
 801d930:	05be05be 	.word	0x05be05be
 801d934:	05be0537 	.word	0x05be0537
 801d938:	007c      	.short	0x007c
 801d93a:	aa22      	add	r2, sp, #136	; 0x88
 801d93c:	4649      	mov	r1, r9
 801d93e:	4650      	mov	r0, sl
 801d940:	f004 fbeb 	bl	802211a <__sprint_r>
 801d944:	2800      	cmp	r0, #0
 801d946:	f040 8130 	bne.w	801dbaa <_vfprintf_r+0x492>
 801d94a:	ac25      	add	r4, sp, #148	; 0x94
 801d94c:	e77c      	b.n	801d848 <_vfprintf_r+0x130>
 801d94e:	4650      	mov	r0, sl
 801d950:	f002 fb9c 	bl	802008c <_localeconv_r>
 801d954:	6843      	ldr	r3, [r0, #4]
 801d956:	9314      	str	r3, [sp, #80]	; 0x50
 801d958:	4618      	mov	r0, r3
 801d95a:	f7e2 fc63 	bl	8000224 <strlen>
 801d95e:	9012      	str	r0, [sp, #72]	; 0x48
 801d960:	4650      	mov	r0, sl
 801d962:	f002 fb93 	bl	802008c <_localeconv_r>
 801d966:	6883      	ldr	r3, [r0, #8]
 801d968:	930a      	str	r3, [sp, #40]	; 0x28
 801d96a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d96c:	212b      	movs	r1, #43	; 0x2b
 801d96e:	b12b      	cbz	r3, 801d97c <_vfprintf_r+0x264>
 801d970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d972:	b11b      	cbz	r3, 801d97c <_vfprintf_r+0x264>
 801d974:	781b      	ldrb	r3, [r3, #0]
 801d976:	b10b      	cbz	r3, 801d97c <_vfprintf_r+0x264>
 801d978:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801d97c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d97e:	e774      	b.n	801d86a <_vfprintf_r+0x152>
 801d980:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d984:	2b00      	cmp	r3, #0
 801d986:	d1f9      	bne.n	801d97c <_vfprintf_r+0x264>
 801d988:	2320      	movs	r3, #32
 801d98a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d98e:	e7f5      	b.n	801d97c <_vfprintf_r+0x264>
 801d990:	f04b 0b01 	orr.w	fp, fp, #1
 801d994:	e7f2      	b.n	801d97c <_vfprintf_r+0x264>
 801d996:	f856 3b04 	ldr.w	r3, [r6], #4
 801d99a:	9310      	str	r3, [sp, #64]	; 0x40
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	daed      	bge.n	801d97c <_vfprintf_r+0x264>
 801d9a0:	425b      	negs	r3, r3
 801d9a2:	9310      	str	r3, [sp, #64]	; 0x40
 801d9a4:	f04b 0b04 	orr.w	fp, fp, #4
 801d9a8:	e7e8      	b.n	801d97c <_vfprintf_r+0x264>
 801d9aa:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801d9ae:	e7e5      	b.n	801d97c <_vfprintf_r+0x264>
 801d9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9b6:	9207      	str	r2, [sp, #28]
 801d9b8:	2a2a      	cmp	r2, #42	; 0x2a
 801d9ba:	d10f      	bne.n	801d9dc <_vfprintf_r+0x2c4>
 801d9bc:	f856 0b04 	ldr.w	r0, [r6], #4
 801d9c0:	930b      	str	r3, [sp, #44]	; 0x2c
 801d9c2:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801d9c6:	e7d9      	b.n	801d97c <_vfprintf_r+0x264>
 801d9c8:	fb07 2808 	mla	r8, r7, r8, r2
 801d9cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9d0:	9207      	str	r2, [sp, #28]
 801d9d2:	9a07      	ldr	r2, [sp, #28]
 801d9d4:	3a30      	subs	r2, #48	; 0x30
 801d9d6:	2a09      	cmp	r2, #9
 801d9d8:	d9f6      	bls.n	801d9c8 <_vfprintf_r+0x2b0>
 801d9da:	e74b      	b.n	801d874 <_vfprintf_r+0x15c>
 801d9dc:	f04f 0800 	mov.w	r8, #0
 801d9e0:	e7f7      	b.n	801d9d2 <_vfprintf_r+0x2ba>
 801d9e2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801d9e6:	e7c9      	b.n	801d97c <_vfprintf_r+0x264>
 801d9e8:	2200      	movs	r2, #0
 801d9ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9ec:	9210      	str	r2, [sp, #64]	; 0x40
 801d9ee:	9a07      	ldr	r2, [sp, #28]
 801d9f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d9f2:	3a30      	subs	r2, #48	; 0x30
 801d9f4:	fb07 2200 	mla	r2, r7, r0, r2
 801d9f8:	9210      	str	r2, [sp, #64]	; 0x40
 801d9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9fe:	9207      	str	r2, [sp, #28]
 801da00:	3a30      	subs	r2, #48	; 0x30
 801da02:	2a09      	cmp	r2, #9
 801da04:	d9f3      	bls.n	801d9ee <_vfprintf_r+0x2d6>
 801da06:	e735      	b.n	801d874 <_vfprintf_r+0x15c>
 801da08:	f04b 0b08 	orr.w	fp, fp, #8
 801da0c:	e7b6      	b.n	801d97c <_vfprintf_r+0x264>
 801da0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da10:	781b      	ldrb	r3, [r3, #0]
 801da12:	2b68      	cmp	r3, #104	; 0x68
 801da14:	bf01      	itttt	eq
 801da16:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801da18:	3301      	addeq	r3, #1
 801da1a:	930b      	streq	r3, [sp, #44]	; 0x2c
 801da1c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801da20:	bf18      	it	ne
 801da22:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801da26:	e7a9      	b.n	801d97c <_vfprintf_r+0x264>
 801da28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da2a:	781b      	ldrb	r3, [r3, #0]
 801da2c:	2b6c      	cmp	r3, #108	; 0x6c
 801da2e:	d105      	bne.n	801da3c <_vfprintf_r+0x324>
 801da30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da32:	3301      	adds	r3, #1
 801da34:	930b      	str	r3, [sp, #44]	; 0x2c
 801da36:	f04b 0b20 	orr.w	fp, fp, #32
 801da3a:	e79f      	b.n	801d97c <_vfprintf_r+0x264>
 801da3c:	f04b 0b10 	orr.w	fp, fp, #16
 801da40:	e79c      	b.n	801d97c <_vfprintf_r+0x264>
 801da42:	4632      	mov	r2, r6
 801da44:	2000      	movs	r0, #0
 801da46:	f852 3b04 	ldr.w	r3, [r2], #4
 801da4a:	9206      	str	r2, [sp, #24]
 801da4c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801da50:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801da54:	ab35      	add	r3, sp, #212	; 0xd4
 801da56:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801da5a:	9004      	str	r0, [sp, #16]
 801da5c:	f04f 0801 	mov.w	r8, #1
 801da60:	4606      	mov	r6, r0
 801da62:	4605      	mov	r5, r0
 801da64:	9303      	str	r3, [sp, #12]
 801da66:	e1c3      	b.n	801ddf0 <_vfprintf_r+0x6d8>
	...
 801da70:	f04b 0b10 	orr.w	fp, fp, #16
 801da74:	f01b 0f20 	tst.w	fp, #32
 801da78:	d012      	beq.n	801daa0 <_vfprintf_r+0x388>
 801da7a:	3607      	adds	r6, #7
 801da7c:	f026 0307 	bic.w	r3, r6, #7
 801da80:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801da84:	9306      	str	r3, [sp, #24]
 801da86:	2e00      	cmp	r6, #0
 801da88:	f177 0300 	sbcs.w	r3, r7, #0
 801da8c:	da06      	bge.n	801da9c <_vfprintf_r+0x384>
 801da8e:	4276      	negs	r6, r6
 801da90:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801da94:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801da98:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801da9c:	2301      	movs	r3, #1
 801da9e:	e392      	b.n	801e1c6 <_vfprintf_r+0xaae>
 801daa0:	1d33      	adds	r3, r6, #4
 801daa2:	f01b 0f10 	tst.w	fp, #16
 801daa6:	9306      	str	r3, [sp, #24]
 801daa8:	d002      	beq.n	801dab0 <_vfprintf_r+0x398>
 801daaa:	6836      	ldr	r6, [r6, #0]
 801daac:	17f7      	asrs	r7, r6, #31
 801daae:	e7ea      	b.n	801da86 <_vfprintf_r+0x36e>
 801dab0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801dab4:	6836      	ldr	r6, [r6, #0]
 801dab6:	d001      	beq.n	801dabc <_vfprintf_r+0x3a4>
 801dab8:	b236      	sxth	r6, r6
 801daba:	e7f7      	b.n	801daac <_vfprintf_r+0x394>
 801dabc:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801dac0:	bf18      	it	ne
 801dac2:	b276      	sxtbne	r6, r6
 801dac4:	e7f2      	b.n	801daac <_vfprintf_r+0x394>
 801dac6:	3607      	adds	r6, #7
 801dac8:	f026 0307 	bic.w	r3, r6, #7
 801dacc:	ecb3 7b02 	vldmia	r3!, {d7}
 801dad0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801dad4:	9306      	str	r3, [sp, #24]
 801dad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dad8:	ee09 3a10 	vmov	s18, r3
 801dadc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dae2:	ee09 3a90 	vmov	s19, r3
 801dae6:	f04f 32ff 	mov.w	r2, #4294967295
 801daea:	4b39      	ldr	r3, [pc, #228]	; (801dbd0 <_vfprintf_r+0x4b8>)
 801daec:	ec51 0b19 	vmov	r0, r1, d9
 801daf0:	f7e3 f84c 	bl	8000b8c <__aeabi_dcmpun>
 801daf4:	bb20      	cbnz	r0, 801db40 <_vfprintf_r+0x428>
 801daf6:	4b36      	ldr	r3, [pc, #216]	; (801dbd0 <_vfprintf_r+0x4b8>)
 801daf8:	ec51 0b19 	vmov	r0, r1, d9
 801dafc:	f04f 32ff 	mov.w	r2, #4294967295
 801db00:	f7e3 f826 	bl	8000b50 <__aeabi_dcmple>
 801db04:	b9e0      	cbnz	r0, 801db40 <_vfprintf_r+0x428>
 801db06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801db0a:	2200      	movs	r2, #0
 801db0c:	2300      	movs	r3, #0
 801db0e:	f7e3 f815 	bl	8000b3c <__aeabi_dcmplt>
 801db12:	b110      	cbz	r0, 801db1a <_vfprintf_r+0x402>
 801db14:	232d      	movs	r3, #45	; 0x2d
 801db16:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801db1a:	4a2e      	ldr	r2, [pc, #184]	; (801dbd4 <_vfprintf_r+0x4bc>)
 801db1c:	482e      	ldr	r0, [pc, #184]	; (801dbd8 <_vfprintf_r+0x4c0>)
 801db1e:	9907      	ldr	r1, [sp, #28]
 801db20:	4613      	mov	r3, r2
 801db22:	2947      	cmp	r1, #71	; 0x47
 801db24:	bfc8      	it	gt
 801db26:	4603      	movgt	r3, r0
 801db28:	9303      	str	r3, [sp, #12]
 801db2a:	2300      	movs	r3, #0
 801db2c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801db30:	9304      	str	r3, [sp, #16]
 801db32:	f04f 0803 	mov.w	r8, #3
 801db36:	461e      	mov	r6, r3
 801db38:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801db3c:	461d      	mov	r5, r3
 801db3e:	e157      	b.n	801ddf0 <_vfprintf_r+0x6d8>
 801db40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801db44:	4610      	mov	r0, r2
 801db46:	4619      	mov	r1, r3
 801db48:	f7e3 f820 	bl	8000b8c <__aeabi_dcmpun>
 801db4c:	b140      	cbz	r0, 801db60 <_vfprintf_r+0x448>
 801db4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801db50:	4a22      	ldr	r2, [pc, #136]	; (801dbdc <_vfprintf_r+0x4c4>)
 801db52:	4823      	ldr	r0, [pc, #140]	; (801dbe0 <_vfprintf_r+0x4c8>)
 801db54:	2b00      	cmp	r3, #0
 801db56:	bfbc      	itt	lt
 801db58:	232d      	movlt	r3, #45	; 0x2d
 801db5a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801db5e:	e7de      	b.n	801db1e <_vfprintf_r+0x406>
 801db60:	9b07      	ldr	r3, [sp, #28]
 801db62:	f023 0320 	bic.w	r3, r3, #32
 801db66:	2b41      	cmp	r3, #65	; 0x41
 801db68:	9308      	str	r3, [sp, #32]
 801db6a:	d13b      	bne.n	801dbe4 <_vfprintf_r+0x4cc>
 801db6c:	2330      	movs	r3, #48	; 0x30
 801db6e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801db72:	9b07      	ldr	r3, [sp, #28]
 801db74:	2b61      	cmp	r3, #97	; 0x61
 801db76:	bf0c      	ite	eq
 801db78:	2378      	moveq	r3, #120	; 0x78
 801db7a:	2358      	movne	r3, #88	; 0x58
 801db7c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 801db80:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801db84:	f04b 0b02 	orr.w	fp, fp, #2
 801db88:	f340 8209 	ble.w	801df9e <_vfprintf_r+0x886>
 801db8c:	f108 0101 	add.w	r1, r8, #1
 801db90:	4650      	mov	r0, sl
 801db92:	f002 fb01 	bl	8020198 <_malloc_r>
 801db96:	9003      	str	r0, [sp, #12]
 801db98:	2800      	cmp	r0, #0
 801db9a:	f040 8204 	bne.w	801dfa6 <_vfprintf_r+0x88e>
 801db9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801dba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dba6:	f8a9 300c 	strh.w	r3, [r9, #12]
 801dbaa:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801dbae:	07d9      	lsls	r1, r3, #31
 801dbb0:	d407      	bmi.n	801dbc2 <_vfprintf_r+0x4aa>
 801dbb2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801dbb6:	059a      	lsls	r2, r3, #22
 801dbb8:	d403      	bmi.n	801dbc2 <_vfprintf_r+0x4aa>
 801dbba:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801dbbe:	f002 fa6e 	bl	802009e <__retarget_lock_release_recursive>
 801dbc2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801dbc6:	065b      	lsls	r3, r3, #25
 801dbc8:	f57f adee 	bpl.w	801d7a8 <_vfprintf_r+0x90>
 801dbcc:	e5e9      	b.n	801d7a2 <_vfprintf_r+0x8a>
 801dbce:	bf00      	nop
 801dbd0:	7fefffff 	.word	0x7fefffff
 801dbd4:	0802936c 	.word	0x0802936c
 801dbd8:	08029370 	.word	0x08029370
 801dbdc:	08029374 	.word	0x08029374
 801dbe0:	08029378 	.word	0x08029378
 801dbe4:	f1b8 3fff 	cmp.w	r8, #4294967295
 801dbe8:	f000 81e0 	beq.w	801dfac <_vfprintf_r+0x894>
 801dbec:	9b08      	ldr	r3, [sp, #32]
 801dbee:	2b47      	cmp	r3, #71	; 0x47
 801dbf0:	f040 81e0 	bne.w	801dfb4 <_vfprintf_r+0x89c>
 801dbf4:	f1b8 0f00 	cmp.w	r8, #0
 801dbf8:	f040 81dc 	bne.w	801dfb4 <_vfprintf_r+0x89c>
 801dbfc:	f8cd 8010 	str.w	r8, [sp, #16]
 801dc00:	f04f 0801 	mov.w	r8, #1
 801dc04:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801dc08:	9311      	str	r3, [sp, #68]	; 0x44
 801dc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	f280 81d3 	bge.w	801dfb8 <_vfprintf_r+0x8a0>
 801dc12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc14:	ee08 3a10 	vmov	s16, r3
 801dc18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801dc1e:	ee08 3a90 	vmov	s17, r3
 801dc22:	232d      	movs	r3, #45	; 0x2d
 801dc24:	9318      	str	r3, [sp, #96]	; 0x60
 801dc26:	9b08      	ldr	r3, [sp, #32]
 801dc28:	2b41      	cmp	r3, #65	; 0x41
 801dc2a:	f040 81e3 	bne.w	801dff4 <_vfprintf_r+0x8dc>
 801dc2e:	eeb0 0a48 	vmov.f32	s0, s16
 801dc32:	eef0 0a68 	vmov.f32	s1, s17
 801dc36:	a81c      	add	r0, sp, #112	; 0x70
 801dc38:	f003 f82c 	bl	8020c94 <frexp>
 801dc3c:	2200      	movs	r2, #0
 801dc3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801dc42:	ec51 0b10 	vmov	r0, r1, d0
 801dc46:	f7e2 fd07 	bl	8000658 <__aeabi_dmul>
 801dc4a:	2200      	movs	r2, #0
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	4606      	mov	r6, r0
 801dc50:	460f      	mov	r7, r1
 801dc52:	f7e2 ff69 	bl	8000b28 <__aeabi_dcmpeq>
 801dc56:	b108      	cbz	r0, 801dc5c <_vfprintf_r+0x544>
 801dc58:	2301      	movs	r3, #1
 801dc5a:	931c      	str	r3, [sp, #112]	; 0x70
 801dc5c:	4bb7      	ldr	r3, [pc, #732]	; (801df3c <_vfprintf_r+0x824>)
 801dc5e:	4ab8      	ldr	r2, [pc, #736]	; (801df40 <_vfprintf_r+0x828>)
 801dc60:	9907      	ldr	r1, [sp, #28]
 801dc62:	9d03      	ldr	r5, [sp, #12]
 801dc64:	2961      	cmp	r1, #97	; 0x61
 801dc66:	bf18      	it	ne
 801dc68:	461a      	movne	r2, r3
 801dc6a:	f108 33ff 	add.w	r3, r8, #4294967295
 801dc6e:	9217      	str	r2, [sp, #92]	; 0x5c
 801dc70:	9305      	str	r3, [sp, #20]
 801dc72:	4bb4      	ldr	r3, [pc, #720]	; (801df44 <_vfprintf_r+0x82c>)
 801dc74:	2200      	movs	r2, #0
 801dc76:	4630      	mov	r0, r6
 801dc78:	4639      	mov	r1, r7
 801dc7a:	f7e2 fced 	bl	8000658 <__aeabi_dmul>
 801dc7e:	460f      	mov	r7, r1
 801dc80:	4606      	mov	r6, r0
 801dc82:	f7e2 ff99 	bl	8000bb8 <__aeabi_d2iz>
 801dc86:	9019      	str	r0, [sp, #100]	; 0x64
 801dc88:	f7e2 fc7c 	bl	8000584 <__aeabi_i2d>
 801dc8c:	4602      	mov	r2, r0
 801dc8e:	460b      	mov	r3, r1
 801dc90:	4630      	mov	r0, r6
 801dc92:	4639      	mov	r1, r7
 801dc94:	f7e2 fb28 	bl	80002e8 <__aeabi_dsub>
 801dc98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801dc9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dc9c:	5c9b      	ldrb	r3, [r3, r2]
 801dc9e:	f805 3b01 	strb.w	r3, [r5], #1
 801dca2:	9b05      	ldr	r3, [sp, #20]
 801dca4:	9309      	str	r3, [sp, #36]	; 0x24
 801dca6:	1c5a      	adds	r2, r3, #1
 801dca8:	4606      	mov	r6, r0
 801dcaa:	460f      	mov	r7, r1
 801dcac:	d007      	beq.n	801dcbe <_vfprintf_r+0x5a6>
 801dcae:	3b01      	subs	r3, #1
 801dcb0:	9305      	str	r3, [sp, #20]
 801dcb2:	2200      	movs	r2, #0
 801dcb4:	2300      	movs	r3, #0
 801dcb6:	f7e2 ff37 	bl	8000b28 <__aeabi_dcmpeq>
 801dcba:	2800      	cmp	r0, #0
 801dcbc:	d0d9      	beq.n	801dc72 <_vfprintf_r+0x55a>
 801dcbe:	4ba2      	ldr	r3, [pc, #648]	; (801df48 <_vfprintf_r+0x830>)
 801dcc0:	2200      	movs	r2, #0
 801dcc2:	4630      	mov	r0, r6
 801dcc4:	4639      	mov	r1, r7
 801dcc6:	f7e2 ff57 	bl	8000b78 <__aeabi_dcmpgt>
 801dcca:	b960      	cbnz	r0, 801dce6 <_vfprintf_r+0x5ce>
 801dccc:	4b9e      	ldr	r3, [pc, #632]	; (801df48 <_vfprintf_r+0x830>)
 801dcce:	2200      	movs	r2, #0
 801dcd0:	4630      	mov	r0, r6
 801dcd2:	4639      	mov	r1, r7
 801dcd4:	f7e2 ff28 	bl	8000b28 <__aeabi_dcmpeq>
 801dcd8:	2800      	cmp	r0, #0
 801dcda:	f000 8186 	beq.w	801dfea <_vfprintf_r+0x8d2>
 801dcde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dce0:	07df      	lsls	r7, r3, #31
 801dce2:	f140 8182 	bpl.w	801dfea <_vfprintf_r+0x8d2>
 801dce6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dce8:	9520      	str	r5, [sp, #128]	; 0x80
 801dcea:	7bd9      	ldrb	r1, [r3, #15]
 801dcec:	2030      	movs	r0, #48	; 0x30
 801dcee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801dcf0:	1e53      	subs	r3, r2, #1
 801dcf2:	9320      	str	r3, [sp, #128]	; 0x80
 801dcf4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801dcf8:	428b      	cmp	r3, r1
 801dcfa:	f000 8165 	beq.w	801dfc8 <_vfprintf_r+0x8b0>
 801dcfe:	2b39      	cmp	r3, #57	; 0x39
 801dd00:	bf0b      	itete	eq
 801dd02:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801dd04:	3301      	addne	r3, #1
 801dd06:	7a9b      	ldrbeq	r3, [r3, #10]
 801dd08:	b2db      	uxtbne	r3, r3
 801dd0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dd0e:	9b03      	ldr	r3, [sp, #12]
 801dd10:	1aeb      	subs	r3, r5, r3
 801dd12:	9305      	str	r3, [sp, #20]
 801dd14:	9b08      	ldr	r3, [sp, #32]
 801dd16:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801dd18:	2b47      	cmp	r3, #71	; 0x47
 801dd1a:	f040 81b3 	bne.w	801e084 <_vfprintf_r+0x96c>
 801dd1e:	1cee      	adds	r6, r5, #3
 801dd20:	db02      	blt.n	801dd28 <_vfprintf_r+0x610>
 801dd22:	4545      	cmp	r5, r8
 801dd24:	f340 81d5 	ble.w	801e0d2 <_vfprintf_r+0x9ba>
 801dd28:	9b07      	ldr	r3, [sp, #28]
 801dd2a:	3b02      	subs	r3, #2
 801dd2c:	9307      	str	r3, [sp, #28]
 801dd2e:	9907      	ldr	r1, [sp, #28]
 801dd30:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801dd34:	f021 0120 	bic.w	r1, r1, #32
 801dd38:	2941      	cmp	r1, #65	; 0x41
 801dd3a:	bf08      	it	eq
 801dd3c:	320f      	addeq	r2, #15
 801dd3e:	f105 33ff 	add.w	r3, r5, #4294967295
 801dd42:	bf06      	itte	eq
 801dd44:	b2d2      	uxtbeq	r2, r2
 801dd46:	2101      	moveq	r1, #1
 801dd48:	2100      	movne	r1, #0
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	931c      	str	r3, [sp, #112]	; 0x70
 801dd4e:	bfb8      	it	lt
 801dd50:	f1c5 0301 	rsblt	r3, r5, #1
 801dd54:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801dd58:	bfb4      	ite	lt
 801dd5a:	222d      	movlt	r2, #45	; 0x2d
 801dd5c:	222b      	movge	r2, #43	; 0x2b
 801dd5e:	2b09      	cmp	r3, #9
 801dd60:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801dd64:	f340 81a4 	ble.w	801e0b0 <_vfprintf_r+0x998>
 801dd68:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801dd6c:	260a      	movs	r6, #10
 801dd6e:	4611      	mov	r1, r2
 801dd70:	fb93 f5f6 	sdiv	r5, r3, r6
 801dd74:	fb06 3015 	mls	r0, r6, r5, r3
 801dd78:	3030      	adds	r0, #48	; 0x30
 801dd7a:	f801 0c01 	strb.w	r0, [r1, #-1]
 801dd7e:	4618      	mov	r0, r3
 801dd80:	2863      	cmp	r0, #99	; 0x63
 801dd82:	f102 32ff 	add.w	r2, r2, #4294967295
 801dd86:	462b      	mov	r3, r5
 801dd88:	dcf1      	bgt.n	801dd6e <_vfprintf_r+0x656>
 801dd8a:	3330      	adds	r3, #48	; 0x30
 801dd8c:	1e88      	subs	r0, r1, #2
 801dd8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801dd92:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801dd96:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	42ab      	cmp	r3, r5
 801dd9e:	f0c0 8182 	bcc.w	801e0a6 <_vfprintf_r+0x98e>
 801dda2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801dda6:	1a52      	subs	r2, r2, r1
 801dda8:	42a8      	cmp	r0, r5
 801ddaa:	bf88      	it	hi
 801ddac:	2200      	movhi	r2, #0
 801ddae:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801ddb2:	441a      	add	r2, r3
 801ddb4:	ab1e      	add	r3, sp, #120	; 0x78
 801ddb6:	1ad3      	subs	r3, r2, r3
 801ddb8:	9a05      	ldr	r2, [sp, #20]
 801ddba:	9315      	str	r3, [sp, #84]	; 0x54
 801ddbc:	2a01      	cmp	r2, #1
 801ddbe:	eb03 0802 	add.w	r8, r3, r2
 801ddc2:	dc02      	bgt.n	801ddca <_vfprintf_r+0x6b2>
 801ddc4:	f01b 0f01 	tst.w	fp, #1
 801ddc8:	d001      	beq.n	801ddce <_vfprintf_r+0x6b6>
 801ddca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ddcc:	4498      	add	r8, r3
 801ddce:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801ddd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ddd6:	9311      	str	r3, [sp, #68]	; 0x44
 801ddd8:	2300      	movs	r3, #0
 801ddda:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801ddde:	461d      	mov	r5, r3
 801dde0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dde2:	b113      	cbz	r3, 801ddea <_vfprintf_r+0x6d2>
 801dde4:	232d      	movs	r3, #45	; 0x2d
 801dde6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801ddea:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801ddee:	2600      	movs	r6, #0
 801ddf0:	4546      	cmp	r6, r8
 801ddf2:	4633      	mov	r3, r6
 801ddf4:	bfb8      	it	lt
 801ddf6:	4643      	movlt	r3, r8
 801ddf8:	9311      	str	r3, [sp, #68]	; 0x44
 801ddfa:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801ddfe:	b113      	cbz	r3, 801de06 <_vfprintf_r+0x6ee>
 801de00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801de02:	3301      	adds	r3, #1
 801de04:	9311      	str	r3, [sp, #68]	; 0x44
 801de06:	f01b 0302 	ands.w	r3, fp, #2
 801de0a:	9317      	str	r3, [sp, #92]	; 0x5c
 801de0c:	bf1e      	ittt	ne
 801de0e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801de10:	3302      	addne	r3, #2
 801de12:	9311      	strne	r3, [sp, #68]	; 0x44
 801de14:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801de18:	9318      	str	r3, [sp, #96]	; 0x60
 801de1a:	d11f      	bne.n	801de5c <_vfprintf_r+0x744>
 801de1c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801de20:	1a9f      	subs	r7, r3, r2
 801de22:	2f00      	cmp	r7, #0
 801de24:	dd1a      	ble.n	801de5c <_vfprintf_r+0x744>
 801de26:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801de2a:	4848      	ldr	r0, [pc, #288]	; (801df4c <_vfprintf_r+0x834>)
 801de2c:	6020      	str	r0, [r4, #0]
 801de2e:	2f10      	cmp	r7, #16
 801de30:	f103 0301 	add.w	r3, r3, #1
 801de34:	f104 0108 	add.w	r1, r4, #8
 801de38:	f300 82f0 	bgt.w	801e41c <_vfprintf_r+0xd04>
 801de3c:	6067      	str	r7, [r4, #4]
 801de3e:	2b07      	cmp	r3, #7
 801de40:	4417      	add	r7, r2
 801de42:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801de46:	f340 82fc 	ble.w	801e442 <_vfprintf_r+0xd2a>
 801de4a:	aa22      	add	r2, sp, #136	; 0x88
 801de4c:	4649      	mov	r1, r9
 801de4e:	4650      	mov	r0, sl
 801de50:	f004 f963 	bl	802211a <__sprint_r>
 801de54:	2800      	cmp	r0, #0
 801de56:	f040 8632 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801de5a:	ac25      	add	r4, sp, #148	; 0x94
 801de5c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801de60:	b173      	cbz	r3, 801de80 <_vfprintf_r+0x768>
 801de62:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801de66:	6023      	str	r3, [r4, #0]
 801de68:	2301      	movs	r3, #1
 801de6a:	6063      	str	r3, [r4, #4]
 801de6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de6e:	3301      	adds	r3, #1
 801de70:	9324      	str	r3, [sp, #144]	; 0x90
 801de72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801de74:	3301      	adds	r3, #1
 801de76:	2b07      	cmp	r3, #7
 801de78:	9323      	str	r3, [sp, #140]	; 0x8c
 801de7a:	f300 82e4 	bgt.w	801e446 <_vfprintf_r+0xd2e>
 801de7e:	3408      	adds	r4, #8
 801de80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801de82:	b16b      	cbz	r3, 801dea0 <_vfprintf_r+0x788>
 801de84:	ab1b      	add	r3, sp, #108	; 0x6c
 801de86:	6023      	str	r3, [r4, #0]
 801de88:	2302      	movs	r3, #2
 801de8a:	6063      	str	r3, [r4, #4]
 801de8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de8e:	3302      	adds	r3, #2
 801de90:	9324      	str	r3, [sp, #144]	; 0x90
 801de92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801de94:	3301      	adds	r3, #1
 801de96:	2b07      	cmp	r3, #7
 801de98:	9323      	str	r3, [sp, #140]	; 0x8c
 801de9a:	f300 82de 	bgt.w	801e45a <_vfprintf_r+0xd42>
 801de9e:	3408      	adds	r4, #8
 801dea0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dea2:	2b80      	cmp	r3, #128	; 0x80
 801dea4:	d11f      	bne.n	801dee6 <_vfprintf_r+0x7ce>
 801dea6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801deaa:	1a9f      	subs	r7, r3, r2
 801deac:	2f00      	cmp	r7, #0
 801deae:	dd1a      	ble.n	801dee6 <_vfprintf_r+0x7ce>
 801deb0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801deb4:	4826      	ldr	r0, [pc, #152]	; (801df50 <_vfprintf_r+0x838>)
 801deb6:	6020      	str	r0, [r4, #0]
 801deb8:	2f10      	cmp	r7, #16
 801deba:	f103 0301 	add.w	r3, r3, #1
 801debe:	f104 0108 	add.w	r1, r4, #8
 801dec2:	f300 82d4 	bgt.w	801e46e <_vfprintf_r+0xd56>
 801dec6:	6067      	str	r7, [r4, #4]
 801dec8:	2b07      	cmp	r3, #7
 801deca:	4417      	add	r7, r2
 801decc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801ded0:	f340 82e0 	ble.w	801e494 <_vfprintf_r+0xd7c>
 801ded4:	aa22      	add	r2, sp, #136	; 0x88
 801ded6:	4649      	mov	r1, r9
 801ded8:	4650      	mov	r0, sl
 801deda:	f004 f91e 	bl	802211a <__sprint_r>
 801dede:	2800      	cmp	r0, #0
 801dee0:	f040 85ed 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801dee4:	ac25      	add	r4, sp, #148	; 0x94
 801dee6:	eba6 0608 	sub.w	r6, r6, r8
 801deea:	2e00      	cmp	r6, #0
 801deec:	dd1a      	ble.n	801df24 <_vfprintf_r+0x80c>
 801deee:	4f18      	ldr	r7, [pc, #96]	; (801df50 <_vfprintf_r+0x838>)
 801def0:	6027      	str	r7, [r4, #0]
 801def2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801def6:	2e10      	cmp	r6, #16
 801def8:	f103 0301 	add.w	r3, r3, #1
 801defc:	f104 0108 	add.w	r1, r4, #8
 801df00:	f300 82ca 	bgt.w	801e498 <_vfprintf_r+0xd80>
 801df04:	6066      	str	r6, [r4, #4]
 801df06:	2b07      	cmp	r3, #7
 801df08:	4416      	add	r6, r2
 801df0a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801df0e:	f340 82d6 	ble.w	801e4be <_vfprintf_r+0xda6>
 801df12:	aa22      	add	r2, sp, #136	; 0x88
 801df14:	4649      	mov	r1, r9
 801df16:	4650      	mov	r0, sl
 801df18:	f004 f8ff 	bl	802211a <__sprint_r>
 801df1c:	2800      	cmp	r0, #0
 801df1e:	f040 85ce 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801df22:	ac25      	add	r4, sp, #148	; 0x94
 801df24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801df28:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801df2a:	f040 82cf 	bne.w	801e4cc <_vfprintf_r+0xdb4>
 801df2e:	9b03      	ldr	r3, [sp, #12]
 801df30:	e9c4 3800 	strd	r3, r8, [r4]
 801df34:	4446      	add	r6, r8
 801df36:	9624      	str	r6, [sp, #144]	; 0x90
 801df38:	e00c      	b.n	801df54 <_vfprintf_r+0x83c>
 801df3a:	bf00      	nop
 801df3c:	0802938d 	.word	0x0802938d
 801df40:	0802937c 	.word	0x0802937c
 801df44:	40300000 	.word	0x40300000
 801df48:	3fe00000 	.word	0x3fe00000
 801df4c:	080293fc 	.word	0x080293fc
 801df50:	0802940c 	.word	0x0802940c
 801df54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801df56:	3301      	adds	r3, #1
 801df58:	2b07      	cmp	r3, #7
 801df5a:	9323      	str	r3, [sp, #140]	; 0x8c
 801df5c:	f300 82fb 	bgt.w	801e556 <_vfprintf_r+0xe3e>
 801df60:	3408      	adds	r4, #8
 801df62:	f01b 0f04 	tst.w	fp, #4
 801df66:	f040 858c 	bne.w	801ea82 <_vfprintf_r+0x136a>
 801df6a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801df6e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801df70:	428a      	cmp	r2, r1
 801df72:	bfac      	ite	ge
 801df74:	189b      	addge	r3, r3, r2
 801df76:	185b      	addlt	r3, r3, r1
 801df78:	930f      	str	r3, [sp, #60]	; 0x3c
 801df7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df7c:	b13b      	cbz	r3, 801df8e <_vfprintf_r+0x876>
 801df7e:	aa22      	add	r2, sp, #136	; 0x88
 801df80:	4649      	mov	r1, r9
 801df82:	4650      	mov	r0, sl
 801df84:	f004 f8c9 	bl	802211a <__sprint_r>
 801df88:	2800      	cmp	r0, #0
 801df8a:	f040 8598 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801df8e:	2300      	movs	r3, #0
 801df90:	9323      	str	r3, [sp, #140]	; 0x8c
 801df92:	9b04      	ldr	r3, [sp, #16]
 801df94:	2b00      	cmp	r3, #0
 801df96:	f040 85ae 	bne.w	801eaf6 <_vfprintf_r+0x13de>
 801df9a:	ac25      	add	r4, sp, #148	; 0x94
 801df9c:	e0eb      	b.n	801e176 <_vfprintf_r+0xa5e>
 801df9e:	ab35      	add	r3, sp, #212	; 0xd4
 801dfa0:	9004      	str	r0, [sp, #16]
 801dfa2:	9303      	str	r3, [sp, #12]
 801dfa4:	e62e      	b.n	801dc04 <_vfprintf_r+0x4ec>
 801dfa6:	9b03      	ldr	r3, [sp, #12]
 801dfa8:	9304      	str	r3, [sp, #16]
 801dfaa:	e62b      	b.n	801dc04 <_vfprintf_r+0x4ec>
 801dfac:	9004      	str	r0, [sp, #16]
 801dfae:	f04f 0806 	mov.w	r8, #6
 801dfb2:	e627      	b.n	801dc04 <_vfprintf_r+0x4ec>
 801dfb4:	9004      	str	r0, [sp, #16]
 801dfb6:	e625      	b.n	801dc04 <_vfprintf_r+0x4ec>
 801dfb8:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	eeb0 8a47 	vmov.f32	s16, s14
 801dfc2:	eef0 8a67 	vmov.f32	s17, s15
 801dfc6:	e62d      	b.n	801dc24 <_vfprintf_r+0x50c>
 801dfc8:	f802 0c01 	strb.w	r0, [r2, #-1]
 801dfcc:	e68f      	b.n	801dcee <_vfprintf_r+0x5d6>
 801dfce:	f803 0b01 	strb.w	r0, [r3], #1
 801dfd2:	1aca      	subs	r2, r1, r3
 801dfd4:	2a00      	cmp	r2, #0
 801dfd6:	dafa      	bge.n	801dfce <_vfprintf_r+0x8b6>
 801dfd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfdc:	3201      	adds	r2, #1
 801dfde:	f103 0301 	add.w	r3, r3, #1
 801dfe2:	bfb8      	it	lt
 801dfe4:	2300      	movlt	r3, #0
 801dfe6:	441d      	add	r5, r3
 801dfe8:	e691      	b.n	801dd0e <_vfprintf_r+0x5f6>
 801dfea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dfec:	462b      	mov	r3, r5
 801dfee:	18a9      	adds	r1, r5, r2
 801dff0:	2030      	movs	r0, #48	; 0x30
 801dff2:	e7ee      	b.n	801dfd2 <_vfprintf_r+0x8ba>
 801dff4:	9b08      	ldr	r3, [sp, #32]
 801dff6:	2b46      	cmp	r3, #70	; 0x46
 801dff8:	d005      	beq.n	801e006 <_vfprintf_r+0x8ee>
 801dffa:	2b45      	cmp	r3, #69	; 0x45
 801dffc:	d11b      	bne.n	801e036 <_vfprintf_r+0x91e>
 801dffe:	f108 0501 	add.w	r5, r8, #1
 801e002:	2102      	movs	r1, #2
 801e004:	e001      	b.n	801e00a <_vfprintf_r+0x8f2>
 801e006:	4645      	mov	r5, r8
 801e008:	2103      	movs	r1, #3
 801e00a:	ab20      	add	r3, sp, #128	; 0x80
 801e00c:	9301      	str	r3, [sp, #4]
 801e00e:	ab1d      	add	r3, sp, #116	; 0x74
 801e010:	9300      	str	r3, [sp, #0]
 801e012:	462a      	mov	r2, r5
 801e014:	ab1c      	add	r3, sp, #112	; 0x70
 801e016:	4650      	mov	r0, sl
 801e018:	eeb0 0a48 	vmov.f32	s0, s16
 801e01c:	eef0 0a68 	vmov.f32	s1, s17
 801e020:	f000 fefa 	bl	801ee18 <_dtoa_r>
 801e024:	9b08      	ldr	r3, [sp, #32]
 801e026:	9003      	str	r0, [sp, #12]
 801e028:	2b47      	cmp	r3, #71	; 0x47
 801e02a:	d106      	bne.n	801e03a <_vfprintf_r+0x922>
 801e02c:	f01b 0f01 	tst.w	fp, #1
 801e030:	d103      	bne.n	801e03a <_vfprintf_r+0x922>
 801e032:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801e034:	e66b      	b.n	801dd0e <_vfprintf_r+0x5f6>
 801e036:	4645      	mov	r5, r8
 801e038:	e7e3      	b.n	801e002 <_vfprintf_r+0x8ea>
 801e03a:	9b03      	ldr	r3, [sp, #12]
 801e03c:	195e      	adds	r6, r3, r5
 801e03e:	9b08      	ldr	r3, [sp, #32]
 801e040:	2b46      	cmp	r3, #70	; 0x46
 801e042:	d10f      	bne.n	801e064 <_vfprintf_r+0x94c>
 801e044:	9b03      	ldr	r3, [sp, #12]
 801e046:	781b      	ldrb	r3, [r3, #0]
 801e048:	2b30      	cmp	r3, #48	; 0x30
 801e04a:	d109      	bne.n	801e060 <_vfprintf_r+0x948>
 801e04c:	ec51 0b18 	vmov	r0, r1, d8
 801e050:	2200      	movs	r2, #0
 801e052:	2300      	movs	r3, #0
 801e054:	f7e2 fd68 	bl	8000b28 <__aeabi_dcmpeq>
 801e058:	b910      	cbnz	r0, 801e060 <_vfprintf_r+0x948>
 801e05a:	f1c5 0501 	rsb	r5, r5, #1
 801e05e:	951c      	str	r5, [sp, #112]	; 0x70
 801e060:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e062:	441e      	add	r6, r3
 801e064:	ec51 0b18 	vmov	r0, r1, d8
 801e068:	2200      	movs	r2, #0
 801e06a:	2300      	movs	r3, #0
 801e06c:	f7e2 fd5c 	bl	8000b28 <__aeabi_dcmpeq>
 801e070:	b100      	cbz	r0, 801e074 <_vfprintf_r+0x95c>
 801e072:	9620      	str	r6, [sp, #128]	; 0x80
 801e074:	2230      	movs	r2, #48	; 0x30
 801e076:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e078:	429e      	cmp	r6, r3
 801e07a:	d9da      	bls.n	801e032 <_vfprintf_r+0x91a>
 801e07c:	1c59      	adds	r1, r3, #1
 801e07e:	9120      	str	r1, [sp, #128]	; 0x80
 801e080:	701a      	strb	r2, [r3, #0]
 801e082:	e7f8      	b.n	801e076 <_vfprintf_r+0x95e>
 801e084:	9b08      	ldr	r3, [sp, #32]
 801e086:	2b46      	cmp	r3, #70	; 0x46
 801e088:	f47f ae51 	bne.w	801dd2e <_vfprintf_r+0x616>
 801e08c:	f00b 0301 	and.w	r3, fp, #1
 801e090:	2d00      	cmp	r5, #0
 801e092:	ea43 0308 	orr.w	r3, r3, r8
 801e096:	dd18      	ble.n	801e0ca <_vfprintf_r+0x9b2>
 801e098:	b383      	cbz	r3, 801e0fc <_vfprintf_r+0x9e4>
 801e09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e09c:	18eb      	adds	r3, r5, r3
 801e09e:	4498      	add	r8, r3
 801e0a0:	2366      	movs	r3, #102	; 0x66
 801e0a2:	9307      	str	r3, [sp, #28]
 801e0a4:	e030      	b.n	801e108 <_vfprintf_r+0x9f0>
 801e0a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 801e0aa:	f802 6b01 	strb.w	r6, [r2], #1
 801e0ae:	e675      	b.n	801dd9c <_vfprintf_r+0x684>
 801e0b0:	b941      	cbnz	r1, 801e0c4 <_vfprintf_r+0x9ac>
 801e0b2:	2230      	movs	r2, #48	; 0x30
 801e0b4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801e0b8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801e0bc:	3330      	adds	r3, #48	; 0x30
 801e0be:	f802 3b01 	strb.w	r3, [r2], #1
 801e0c2:	e677      	b.n	801ddb4 <_vfprintf_r+0x69c>
 801e0c4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801e0c8:	e7f8      	b.n	801e0bc <_vfprintf_r+0x9a4>
 801e0ca:	b1cb      	cbz	r3, 801e100 <_vfprintf_r+0x9e8>
 801e0cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0ce:	3301      	adds	r3, #1
 801e0d0:	e7e5      	b.n	801e09e <_vfprintf_r+0x986>
 801e0d2:	9b05      	ldr	r3, [sp, #20]
 801e0d4:	429d      	cmp	r5, r3
 801e0d6:	db07      	blt.n	801e0e8 <_vfprintf_r+0x9d0>
 801e0d8:	f01b 0f01 	tst.w	fp, #1
 801e0dc:	d029      	beq.n	801e132 <_vfprintf_r+0xa1a>
 801e0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e0e0:	eb05 0803 	add.w	r8, r5, r3
 801e0e4:	2367      	movs	r3, #103	; 0x67
 801e0e6:	e7dc      	b.n	801e0a2 <_vfprintf_r+0x98a>
 801e0e8:	9b05      	ldr	r3, [sp, #20]
 801e0ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e0ec:	2d00      	cmp	r5, #0
 801e0ee:	eb03 0802 	add.w	r8, r3, r2
 801e0f2:	dcf7      	bgt.n	801e0e4 <_vfprintf_r+0x9cc>
 801e0f4:	f1c5 0301 	rsb	r3, r5, #1
 801e0f8:	4498      	add	r8, r3
 801e0fa:	e7f3      	b.n	801e0e4 <_vfprintf_r+0x9cc>
 801e0fc:	46a8      	mov	r8, r5
 801e0fe:	e7cf      	b.n	801e0a0 <_vfprintf_r+0x988>
 801e100:	2366      	movs	r3, #102	; 0x66
 801e102:	9307      	str	r3, [sp, #28]
 801e104:	f04f 0801 	mov.w	r8, #1
 801e108:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801e10c:	9309      	str	r3, [sp, #36]	; 0x24
 801e10e:	d023      	beq.n	801e158 <_vfprintf_r+0xa40>
 801e110:	2300      	movs	r3, #0
 801e112:	2d00      	cmp	r5, #0
 801e114:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801e118:	f77f ae62 	ble.w	801dde0 <_vfprintf_r+0x6c8>
 801e11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e11e:	781b      	ldrb	r3, [r3, #0]
 801e120:	2bff      	cmp	r3, #255	; 0xff
 801e122:	d108      	bne.n	801e136 <_vfprintf_r+0xa1e>
 801e124:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e128:	4413      	add	r3, r2
 801e12a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e12c:	fb02 8803 	mla	r8, r2, r3, r8
 801e130:	e656      	b.n	801dde0 <_vfprintf_r+0x6c8>
 801e132:	46a8      	mov	r8, r5
 801e134:	e7d6      	b.n	801e0e4 <_vfprintf_r+0x9cc>
 801e136:	42ab      	cmp	r3, r5
 801e138:	daf4      	bge.n	801e124 <_vfprintf_r+0xa0c>
 801e13a:	1aed      	subs	r5, r5, r3
 801e13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e13e:	785b      	ldrb	r3, [r3, #1]
 801e140:	b133      	cbz	r3, 801e150 <_vfprintf_r+0xa38>
 801e142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e144:	3301      	adds	r3, #1
 801e146:	9309      	str	r3, [sp, #36]	; 0x24
 801e148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e14a:	3301      	adds	r3, #1
 801e14c:	930a      	str	r3, [sp, #40]	; 0x28
 801e14e:	e7e5      	b.n	801e11c <_vfprintf_r+0xa04>
 801e150:	9b08      	ldr	r3, [sp, #32]
 801e152:	3301      	adds	r3, #1
 801e154:	9308      	str	r3, [sp, #32]
 801e156:	e7e1      	b.n	801e11c <_vfprintf_r+0xa04>
 801e158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e15a:	9308      	str	r3, [sp, #32]
 801e15c:	e640      	b.n	801dde0 <_vfprintf_r+0x6c8>
 801e15e:	4632      	mov	r2, r6
 801e160:	f01b 0f20 	tst.w	fp, #32
 801e164:	f852 3b04 	ldr.w	r3, [r2], #4
 801e168:	9206      	str	r2, [sp, #24]
 801e16a:	d009      	beq.n	801e180 <_vfprintf_r+0xa68>
 801e16c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e16e:	4610      	mov	r0, r2
 801e170:	17d1      	asrs	r1, r2, #31
 801e172:	e9c3 0100 	strd	r0, r1, [r3]
 801e176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e178:	9e06      	ldr	r6, [sp, #24]
 801e17a:	9303      	str	r3, [sp, #12]
 801e17c:	f7ff bb4f 	b.w	801d81e <_vfprintf_r+0x106>
 801e180:	f01b 0f10 	tst.w	fp, #16
 801e184:	d002      	beq.n	801e18c <_vfprintf_r+0xa74>
 801e186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e188:	601a      	str	r2, [r3, #0]
 801e18a:	e7f4      	b.n	801e176 <_vfprintf_r+0xa5e>
 801e18c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801e190:	d002      	beq.n	801e198 <_vfprintf_r+0xa80>
 801e192:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e194:	801a      	strh	r2, [r3, #0]
 801e196:	e7ee      	b.n	801e176 <_vfprintf_r+0xa5e>
 801e198:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801e19c:	d0f3      	beq.n	801e186 <_vfprintf_r+0xa6e>
 801e19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e1a0:	701a      	strb	r2, [r3, #0]
 801e1a2:	e7e8      	b.n	801e176 <_vfprintf_r+0xa5e>
 801e1a4:	f04b 0b10 	orr.w	fp, fp, #16
 801e1a8:	f01b 0f20 	tst.w	fp, #32
 801e1ac:	d01e      	beq.n	801e1ec <_vfprintf_r+0xad4>
 801e1ae:	3607      	adds	r6, #7
 801e1b0:	f026 0307 	bic.w	r3, r6, #7
 801e1b4:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801e1b8:	9306      	str	r3, [sp, #24]
 801e1ba:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801e1be:	2300      	movs	r3, #0
 801e1c0:	2200      	movs	r2, #0
 801e1c2:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801e1c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e1ca:	f000 84a9 	beq.w	801eb20 <_vfprintf_r+0x1408>
 801e1ce:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801e1d2:	9204      	str	r2, [sp, #16]
 801e1d4:	ea56 0207 	orrs.w	r2, r6, r7
 801e1d8:	f040 84a8 	bne.w	801eb2c <_vfprintf_r+0x1414>
 801e1dc:	f1b8 0f00 	cmp.w	r8, #0
 801e1e0:	f000 8104 	beq.w	801e3ec <_vfprintf_r+0xcd4>
 801e1e4:	2b01      	cmp	r3, #1
 801e1e6:	f040 84a4 	bne.w	801eb32 <_vfprintf_r+0x141a>
 801e1ea:	e09a      	b.n	801e322 <_vfprintf_r+0xc0a>
 801e1ec:	1d33      	adds	r3, r6, #4
 801e1ee:	f01b 0f10 	tst.w	fp, #16
 801e1f2:	9306      	str	r3, [sp, #24]
 801e1f4:	d001      	beq.n	801e1fa <_vfprintf_r+0xae2>
 801e1f6:	6836      	ldr	r6, [r6, #0]
 801e1f8:	e003      	b.n	801e202 <_vfprintf_r+0xaea>
 801e1fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801e1fe:	d002      	beq.n	801e206 <_vfprintf_r+0xaee>
 801e200:	8836      	ldrh	r6, [r6, #0]
 801e202:	2700      	movs	r7, #0
 801e204:	e7d9      	b.n	801e1ba <_vfprintf_r+0xaa2>
 801e206:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801e20a:	d0f4      	beq.n	801e1f6 <_vfprintf_r+0xade>
 801e20c:	7836      	ldrb	r6, [r6, #0]
 801e20e:	e7f8      	b.n	801e202 <_vfprintf_r+0xaea>
 801e210:	4633      	mov	r3, r6
 801e212:	2278      	movs	r2, #120	; 0x78
 801e214:	f853 6b04 	ldr.w	r6, [r3], #4
 801e218:	9306      	str	r3, [sp, #24]
 801e21a:	f647 0330 	movw	r3, #30768	; 0x7830
 801e21e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801e222:	4ba8      	ldr	r3, [pc, #672]	; (801e4c4 <_vfprintf_r+0xdac>)
 801e224:	9316      	str	r3, [sp, #88]	; 0x58
 801e226:	2700      	movs	r7, #0
 801e228:	f04b 0b02 	orr.w	fp, fp, #2
 801e22c:	2302      	movs	r3, #2
 801e22e:	9207      	str	r2, [sp, #28]
 801e230:	e7c6      	b.n	801e1c0 <_vfprintf_r+0xaa8>
 801e232:	4632      	mov	r2, r6
 801e234:	2500      	movs	r5, #0
 801e236:	f852 3b04 	ldr.w	r3, [r2], #4
 801e23a:	9303      	str	r3, [sp, #12]
 801e23c:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e240:	9206      	str	r2, [sp, #24]
 801e242:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801e246:	d010      	beq.n	801e26a <_vfprintf_r+0xb52>
 801e248:	9803      	ldr	r0, [sp, #12]
 801e24a:	4642      	mov	r2, r8
 801e24c:	4629      	mov	r1, r5
 801e24e:	f7e1 fff7 	bl	8000240 <memchr>
 801e252:	9004      	str	r0, [sp, #16]
 801e254:	2800      	cmp	r0, #0
 801e256:	f000 80df 	beq.w	801e418 <_vfprintf_r+0xd00>
 801e25a:	9a03      	ldr	r2, [sp, #12]
 801e25c:	9504      	str	r5, [sp, #16]
 801e25e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801e262:	eba0 0802 	sub.w	r8, r0, r2
 801e266:	462e      	mov	r6, r5
 801e268:	e5c2      	b.n	801ddf0 <_vfprintf_r+0x6d8>
 801e26a:	9803      	ldr	r0, [sp, #12]
 801e26c:	f7e1 ffda 	bl	8000224 <strlen>
 801e270:	462e      	mov	r6, r5
 801e272:	4680      	mov	r8, r0
 801e274:	9504      	str	r5, [sp, #16]
 801e276:	4633      	mov	r3, r6
 801e278:	e45e      	b.n	801db38 <_vfprintf_r+0x420>
 801e27a:	f04b 0b10 	orr.w	fp, fp, #16
 801e27e:	f01b 0f20 	tst.w	fp, #32
 801e282:	d007      	beq.n	801e294 <_vfprintf_r+0xb7c>
 801e284:	3607      	adds	r6, #7
 801e286:	f026 0307 	bic.w	r3, r6, #7
 801e28a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801e28e:	9306      	str	r3, [sp, #24]
 801e290:	2301      	movs	r3, #1
 801e292:	e795      	b.n	801e1c0 <_vfprintf_r+0xaa8>
 801e294:	1d33      	adds	r3, r6, #4
 801e296:	f01b 0f10 	tst.w	fp, #16
 801e29a:	9306      	str	r3, [sp, #24]
 801e29c:	d001      	beq.n	801e2a2 <_vfprintf_r+0xb8a>
 801e29e:	6836      	ldr	r6, [r6, #0]
 801e2a0:	e003      	b.n	801e2aa <_vfprintf_r+0xb92>
 801e2a2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801e2a6:	d002      	beq.n	801e2ae <_vfprintf_r+0xb96>
 801e2a8:	8836      	ldrh	r6, [r6, #0]
 801e2aa:	2700      	movs	r7, #0
 801e2ac:	e7f0      	b.n	801e290 <_vfprintf_r+0xb78>
 801e2ae:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801e2b2:	d0f4      	beq.n	801e29e <_vfprintf_r+0xb86>
 801e2b4:	7836      	ldrb	r6, [r6, #0]
 801e2b6:	e7f8      	b.n	801e2aa <_vfprintf_r+0xb92>
 801e2b8:	4b83      	ldr	r3, [pc, #524]	; (801e4c8 <_vfprintf_r+0xdb0>)
 801e2ba:	9316      	str	r3, [sp, #88]	; 0x58
 801e2bc:	f01b 0f20 	tst.w	fp, #32
 801e2c0:	d019      	beq.n	801e2f6 <_vfprintf_r+0xbde>
 801e2c2:	3607      	adds	r6, #7
 801e2c4:	f026 0307 	bic.w	r3, r6, #7
 801e2c8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801e2cc:	9306      	str	r3, [sp, #24]
 801e2ce:	f01b 0f01 	tst.w	fp, #1
 801e2d2:	d00a      	beq.n	801e2ea <_vfprintf_r+0xbd2>
 801e2d4:	ea56 0307 	orrs.w	r3, r6, r7
 801e2d8:	d007      	beq.n	801e2ea <_vfprintf_r+0xbd2>
 801e2da:	2330      	movs	r3, #48	; 0x30
 801e2dc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801e2e0:	9b07      	ldr	r3, [sp, #28]
 801e2e2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801e2e6:	f04b 0b02 	orr.w	fp, fp, #2
 801e2ea:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801e2ee:	2302      	movs	r3, #2
 801e2f0:	e766      	b.n	801e1c0 <_vfprintf_r+0xaa8>
 801e2f2:	4b74      	ldr	r3, [pc, #464]	; (801e4c4 <_vfprintf_r+0xdac>)
 801e2f4:	e7e1      	b.n	801e2ba <_vfprintf_r+0xba2>
 801e2f6:	1d33      	adds	r3, r6, #4
 801e2f8:	f01b 0f10 	tst.w	fp, #16
 801e2fc:	9306      	str	r3, [sp, #24]
 801e2fe:	d001      	beq.n	801e304 <_vfprintf_r+0xbec>
 801e300:	6836      	ldr	r6, [r6, #0]
 801e302:	e003      	b.n	801e30c <_vfprintf_r+0xbf4>
 801e304:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801e308:	d002      	beq.n	801e310 <_vfprintf_r+0xbf8>
 801e30a:	8836      	ldrh	r6, [r6, #0]
 801e30c:	2700      	movs	r7, #0
 801e30e:	e7de      	b.n	801e2ce <_vfprintf_r+0xbb6>
 801e310:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801e314:	d0f4      	beq.n	801e300 <_vfprintf_r+0xbe8>
 801e316:	7836      	ldrb	r6, [r6, #0]
 801e318:	e7f8      	b.n	801e30c <_vfprintf_r+0xbf4>
 801e31a:	2f00      	cmp	r7, #0
 801e31c:	bf08      	it	eq
 801e31e:	2e0a      	cmpeq	r6, #10
 801e320:	d206      	bcs.n	801e330 <_vfprintf_r+0xc18>
 801e322:	3630      	adds	r6, #48	; 0x30
 801e324:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801e328:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801e32c:	f000 bc23 	b.w	801eb76 <_vfprintf_r+0x145e>
 801e330:	2300      	movs	r3, #0
 801e332:	9305      	str	r3, [sp, #20]
 801e334:	9b04      	ldr	r3, [sp, #16]
 801e336:	ad4e      	add	r5, sp, #312	; 0x138
 801e338:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 801e33c:	1e6b      	subs	r3, r5, #1
 801e33e:	9303      	str	r3, [sp, #12]
 801e340:	220a      	movs	r2, #10
 801e342:	2300      	movs	r3, #0
 801e344:	4630      	mov	r0, r6
 801e346:	4639      	mov	r1, r7
 801e348:	f7e2 fcae 	bl	8000ca8 <__aeabi_uldivmod>
 801e34c:	9b05      	ldr	r3, [sp, #20]
 801e34e:	3230      	adds	r2, #48	; 0x30
 801e350:	3301      	adds	r3, #1
 801e352:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e356:	9305      	str	r3, [sp, #20]
 801e358:	f1bb 0f00 	cmp.w	fp, #0
 801e35c:	d019      	beq.n	801e392 <_vfprintf_r+0xc7a>
 801e35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e360:	9a05      	ldr	r2, [sp, #20]
 801e362:	781b      	ldrb	r3, [r3, #0]
 801e364:	429a      	cmp	r2, r3
 801e366:	d114      	bne.n	801e392 <_vfprintf_r+0xc7a>
 801e368:	2aff      	cmp	r2, #255	; 0xff
 801e36a:	d012      	beq.n	801e392 <_vfprintf_r+0xc7a>
 801e36c:	2f00      	cmp	r7, #0
 801e36e:	bf08      	it	eq
 801e370:	2e0a      	cmpeq	r6, #10
 801e372:	d30e      	bcc.n	801e392 <_vfprintf_r+0xc7a>
 801e374:	9b03      	ldr	r3, [sp, #12]
 801e376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e378:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e37a:	1a9b      	subs	r3, r3, r2
 801e37c:	4618      	mov	r0, r3
 801e37e:	9303      	str	r3, [sp, #12]
 801e380:	f7fd fd0f 	bl	801bda2 <strncpy>
 801e384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e386:	785d      	ldrb	r5, [r3, #1]
 801e388:	b1e5      	cbz	r5, 801e3c4 <_vfprintf_r+0xcac>
 801e38a:	3301      	adds	r3, #1
 801e38c:	930a      	str	r3, [sp, #40]	; 0x28
 801e38e:	2300      	movs	r3, #0
 801e390:	9305      	str	r3, [sp, #20]
 801e392:	220a      	movs	r2, #10
 801e394:	2300      	movs	r3, #0
 801e396:	4630      	mov	r0, r6
 801e398:	4639      	mov	r1, r7
 801e39a:	f7e2 fc85 	bl	8000ca8 <__aeabi_uldivmod>
 801e39e:	2f00      	cmp	r7, #0
 801e3a0:	bf08      	it	eq
 801e3a2:	2e0a      	cmpeq	r6, #10
 801e3a4:	d20a      	bcs.n	801e3bc <_vfprintf_r+0xca4>
 801e3a6:	9b03      	ldr	r3, [sp, #12]
 801e3a8:	f8dd b010 	ldr.w	fp, [sp, #16]
 801e3ac:	aa4e      	add	r2, sp, #312	; 0x138
 801e3ae:	4646      	mov	r6, r8
 801e3b0:	eba2 0803 	sub.w	r8, r2, r3
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	9304      	str	r3, [sp, #16]
 801e3b8:	f7ff bbbe 	b.w	801db38 <_vfprintf_r+0x420>
 801e3bc:	9d03      	ldr	r5, [sp, #12]
 801e3be:	4606      	mov	r6, r0
 801e3c0:	460f      	mov	r7, r1
 801e3c2:	e7bb      	b.n	801e33c <_vfprintf_r+0xc24>
 801e3c4:	9505      	str	r5, [sp, #20]
 801e3c6:	e7e4      	b.n	801e392 <_vfprintf_r+0xc7a>
 801e3c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e3ca:	f006 030f 	and.w	r3, r6, #15
 801e3ce:	5cd3      	ldrb	r3, [r2, r3]
 801e3d0:	9a03      	ldr	r2, [sp, #12]
 801e3d2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801e3d6:	0933      	lsrs	r3, r6, #4
 801e3d8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801e3dc:	9203      	str	r2, [sp, #12]
 801e3de:	093a      	lsrs	r2, r7, #4
 801e3e0:	461e      	mov	r6, r3
 801e3e2:	4617      	mov	r7, r2
 801e3e4:	ea56 0307 	orrs.w	r3, r6, r7
 801e3e8:	d1ee      	bne.n	801e3c8 <_vfprintf_r+0xcb0>
 801e3ea:	e7dc      	b.n	801e3a6 <_vfprintf_r+0xc8e>
 801e3ec:	b933      	cbnz	r3, 801e3fc <_vfprintf_r+0xce4>
 801e3ee:	f01b 0f01 	tst.w	fp, #1
 801e3f2:	d003      	beq.n	801e3fc <_vfprintf_r+0xce4>
 801e3f4:	2330      	movs	r3, #48	; 0x30
 801e3f6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801e3fa:	e795      	b.n	801e328 <_vfprintf_r+0xc10>
 801e3fc:	ab4e      	add	r3, sp, #312	; 0x138
 801e3fe:	e3ba      	b.n	801eb76 <_vfprintf_r+0x145e>
 801e400:	9b07      	ldr	r3, [sp, #28]
 801e402:	2b00      	cmp	r3, #0
 801e404:	f000 837d 	beq.w	801eb02 <_vfprintf_r+0x13ea>
 801e408:	2000      	movs	r0, #0
 801e40a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801e40e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801e412:	9606      	str	r6, [sp, #24]
 801e414:	f7ff bb1e 	b.w	801da54 <_vfprintf_r+0x33c>
 801e418:	9e04      	ldr	r6, [sp, #16]
 801e41a:	e72c      	b.n	801e276 <_vfprintf_r+0xb5e>
 801e41c:	2010      	movs	r0, #16
 801e41e:	4402      	add	r2, r0
 801e420:	2b07      	cmp	r3, #7
 801e422:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e426:	6060      	str	r0, [r4, #4]
 801e428:	dd08      	ble.n	801e43c <_vfprintf_r+0xd24>
 801e42a:	aa22      	add	r2, sp, #136	; 0x88
 801e42c:	4649      	mov	r1, r9
 801e42e:	4650      	mov	r0, sl
 801e430:	f003 fe73 	bl	802211a <__sprint_r>
 801e434:	2800      	cmp	r0, #0
 801e436:	f040 8342 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e43a:	a925      	add	r1, sp, #148	; 0x94
 801e43c:	3f10      	subs	r7, #16
 801e43e:	460c      	mov	r4, r1
 801e440:	e4f1      	b.n	801de26 <_vfprintf_r+0x70e>
 801e442:	460c      	mov	r4, r1
 801e444:	e50a      	b.n	801de5c <_vfprintf_r+0x744>
 801e446:	aa22      	add	r2, sp, #136	; 0x88
 801e448:	4649      	mov	r1, r9
 801e44a:	4650      	mov	r0, sl
 801e44c:	f003 fe65 	bl	802211a <__sprint_r>
 801e450:	2800      	cmp	r0, #0
 801e452:	f040 8334 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e456:	ac25      	add	r4, sp, #148	; 0x94
 801e458:	e512      	b.n	801de80 <_vfprintf_r+0x768>
 801e45a:	aa22      	add	r2, sp, #136	; 0x88
 801e45c:	4649      	mov	r1, r9
 801e45e:	4650      	mov	r0, sl
 801e460:	f003 fe5b 	bl	802211a <__sprint_r>
 801e464:	2800      	cmp	r0, #0
 801e466:	f040 832a 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e46a:	ac25      	add	r4, sp, #148	; 0x94
 801e46c:	e518      	b.n	801dea0 <_vfprintf_r+0x788>
 801e46e:	2010      	movs	r0, #16
 801e470:	4402      	add	r2, r0
 801e472:	2b07      	cmp	r3, #7
 801e474:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e478:	6060      	str	r0, [r4, #4]
 801e47a:	dd08      	ble.n	801e48e <_vfprintf_r+0xd76>
 801e47c:	aa22      	add	r2, sp, #136	; 0x88
 801e47e:	4649      	mov	r1, r9
 801e480:	4650      	mov	r0, sl
 801e482:	f003 fe4a 	bl	802211a <__sprint_r>
 801e486:	2800      	cmp	r0, #0
 801e488:	f040 8319 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e48c:	a925      	add	r1, sp, #148	; 0x94
 801e48e:	3f10      	subs	r7, #16
 801e490:	460c      	mov	r4, r1
 801e492:	e50d      	b.n	801deb0 <_vfprintf_r+0x798>
 801e494:	460c      	mov	r4, r1
 801e496:	e526      	b.n	801dee6 <_vfprintf_r+0x7ce>
 801e498:	2010      	movs	r0, #16
 801e49a:	4402      	add	r2, r0
 801e49c:	2b07      	cmp	r3, #7
 801e49e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e4a2:	6060      	str	r0, [r4, #4]
 801e4a4:	dd08      	ble.n	801e4b8 <_vfprintf_r+0xda0>
 801e4a6:	aa22      	add	r2, sp, #136	; 0x88
 801e4a8:	4649      	mov	r1, r9
 801e4aa:	4650      	mov	r0, sl
 801e4ac:	f003 fe35 	bl	802211a <__sprint_r>
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	f040 8304 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e4b6:	a925      	add	r1, sp, #148	; 0x94
 801e4b8:	3e10      	subs	r6, #16
 801e4ba:	460c      	mov	r4, r1
 801e4bc:	e518      	b.n	801def0 <_vfprintf_r+0x7d8>
 801e4be:	460c      	mov	r4, r1
 801e4c0:	e530      	b.n	801df24 <_vfprintf_r+0x80c>
 801e4c2:	bf00      	nop
 801e4c4:	0802937c 	.word	0x0802937c
 801e4c8:	0802938d 	.word	0x0802938d
 801e4cc:	9b07      	ldr	r3, [sp, #28]
 801e4ce:	2b65      	cmp	r3, #101	; 0x65
 801e4d0:	f340 8242 	ble.w	801e958 <_vfprintf_r+0x1240>
 801e4d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e4d8:	2200      	movs	r2, #0
 801e4da:	2300      	movs	r3, #0
 801e4dc:	f7e2 fb24 	bl	8000b28 <__aeabi_dcmpeq>
 801e4e0:	2800      	cmp	r0, #0
 801e4e2:	d068      	beq.n	801e5b6 <_vfprintf_r+0xe9e>
 801e4e4:	4b6d      	ldr	r3, [pc, #436]	; (801e69c <_vfprintf_r+0xf84>)
 801e4e6:	6023      	str	r3, [r4, #0]
 801e4e8:	2301      	movs	r3, #1
 801e4ea:	441e      	add	r6, r3
 801e4ec:	6063      	str	r3, [r4, #4]
 801e4ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e4f0:	9624      	str	r6, [sp, #144]	; 0x90
 801e4f2:	3301      	adds	r3, #1
 801e4f4:	2b07      	cmp	r3, #7
 801e4f6:	9323      	str	r3, [sp, #140]	; 0x8c
 801e4f8:	dc37      	bgt.n	801e56a <_vfprintf_r+0xe52>
 801e4fa:	3408      	adds	r4, #8
 801e4fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e4fe:	9a05      	ldr	r2, [sp, #20]
 801e500:	4293      	cmp	r3, r2
 801e502:	db03      	blt.n	801e50c <_vfprintf_r+0xdf4>
 801e504:	f01b 0f01 	tst.w	fp, #1
 801e508:	f43f ad2b 	beq.w	801df62 <_vfprintf_r+0x84a>
 801e50c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e50e:	6023      	str	r3, [r4, #0]
 801e510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e514:	6063      	str	r3, [r4, #4]
 801e516:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e518:	4413      	add	r3, r2
 801e51a:	9324      	str	r3, [sp, #144]	; 0x90
 801e51c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e51e:	3301      	adds	r3, #1
 801e520:	2b07      	cmp	r3, #7
 801e522:	9323      	str	r3, [sp, #140]	; 0x8c
 801e524:	dc2b      	bgt.n	801e57e <_vfprintf_r+0xe66>
 801e526:	3408      	adds	r4, #8
 801e528:	9b05      	ldr	r3, [sp, #20]
 801e52a:	1e5d      	subs	r5, r3, #1
 801e52c:	2d00      	cmp	r5, #0
 801e52e:	f77f ad18 	ble.w	801df62 <_vfprintf_r+0x84a>
 801e532:	4e5b      	ldr	r6, [pc, #364]	; (801e6a0 <_vfprintf_r+0xf88>)
 801e534:	2710      	movs	r7, #16
 801e536:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e53a:	2d10      	cmp	r5, #16
 801e53c:	f103 0301 	add.w	r3, r3, #1
 801e540:	f104 0108 	add.w	r1, r4, #8
 801e544:	6026      	str	r6, [r4, #0]
 801e546:	dc24      	bgt.n	801e592 <_vfprintf_r+0xe7a>
 801e548:	6065      	str	r5, [r4, #4]
 801e54a:	2b07      	cmp	r3, #7
 801e54c:	4415      	add	r5, r2
 801e54e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e552:	f340 8293 	ble.w	801ea7c <_vfprintf_r+0x1364>
 801e556:	aa22      	add	r2, sp, #136	; 0x88
 801e558:	4649      	mov	r1, r9
 801e55a:	4650      	mov	r0, sl
 801e55c:	f003 fddd 	bl	802211a <__sprint_r>
 801e560:	2800      	cmp	r0, #0
 801e562:	f040 82ac 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e566:	ac25      	add	r4, sp, #148	; 0x94
 801e568:	e4fb      	b.n	801df62 <_vfprintf_r+0x84a>
 801e56a:	aa22      	add	r2, sp, #136	; 0x88
 801e56c:	4649      	mov	r1, r9
 801e56e:	4650      	mov	r0, sl
 801e570:	f003 fdd3 	bl	802211a <__sprint_r>
 801e574:	2800      	cmp	r0, #0
 801e576:	f040 82a2 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e57a:	ac25      	add	r4, sp, #148	; 0x94
 801e57c:	e7be      	b.n	801e4fc <_vfprintf_r+0xde4>
 801e57e:	aa22      	add	r2, sp, #136	; 0x88
 801e580:	4649      	mov	r1, r9
 801e582:	4650      	mov	r0, sl
 801e584:	f003 fdc9 	bl	802211a <__sprint_r>
 801e588:	2800      	cmp	r0, #0
 801e58a:	f040 8298 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e58e:	ac25      	add	r4, sp, #148	; 0x94
 801e590:	e7ca      	b.n	801e528 <_vfprintf_r+0xe10>
 801e592:	3210      	adds	r2, #16
 801e594:	2b07      	cmp	r3, #7
 801e596:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e59a:	6067      	str	r7, [r4, #4]
 801e59c:	dd08      	ble.n	801e5b0 <_vfprintf_r+0xe98>
 801e59e:	aa22      	add	r2, sp, #136	; 0x88
 801e5a0:	4649      	mov	r1, r9
 801e5a2:	4650      	mov	r0, sl
 801e5a4:	f003 fdb9 	bl	802211a <__sprint_r>
 801e5a8:	2800      	cmp	r0, #0
 801e5aa:	f040 8288 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e5ae:	a925      	add	r1, sp, #148	; 0x94
 801e5b0:	3d10      	subs	r5, #16
 801e5b2:	460c      	mov	r4, r1
 801e5b4:	e7bf      	b.n	801e536 <_vfprintf_r+0xe1e>
 801e5b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	dc73      	bgt.n	801e6a4 <_vfprintf_r+0xf8c>
 801e5bc:	4b37      	ldr	r3, [pc, #220]	; (801e69c <_vfprintf_r+0xf84>)
 801e5be:	6023      	str	r3, [r4, #0]
 801e5c0:	2301      	movs	r3, #1
 801e5c2:	441e      	add	r6, r3
 801e5c4:	6063      	str	r3, [r4, #4]
 801e5c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e5c8:	9624      	str	r6, [sp, #144]	; 0x90
 801e5ca:	3301      	adds	r3, #1
 801e5cc:	2b07      	cmp	r3, #7
 801e5ce:	9323      	str	r3, [sp, #140]	; 0x8c
 801e5d0:	dc3d      	bgt.n	801e64e <_vfprintf_r+0xf36>
 801e5d2:	3408      	adds	r4, #8
 801e5d4:	9905      	ldr	r1, [sp, #20]
 801e5d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e5d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5da:	430a      	orrs	r2, r1
 801e5dc:	f00b 0101 	and.w	r1, fp, #1
 801e5e0:	430a      	orrs	r2, r1
 801e5e2:	f43f acbe 	beq.w	801df62 <_vfprintf_r+0x84a>
 801e5e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e5e8:	6022      	str	r2, [r4, #0]
 801e5ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e5ec:	6062      	str	r2, [r4, #4]
 801e5ee:	4413      	add	r3, r2
 801e5f0:	9324      	str	r3, [sp, #144]	; 0x90
 801e5f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e5f4:	3301      	adds	r3, #1
 801e5f6:	2b07      	cmp	r3, #7
 801e5f8:	9323      	str	r3, [sp, #140]	; 0x8c
 801e5fa:	dc32      	bgt.n	801e662 <_vfprintf_r+0xf4a>
 801e5fc:	3408      	adds	r4, #8
 801e5fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e600:	2d00      	cmp	r5, #0
 801e602:	da1b      	bge.n	801e63c <_vfprintf_r+0xf24>
 801e604:	4e26      	ldr	r6, [pc, #152]	; (801e6a0 <_vfprintf_r+0xf88>)
 801e606:	426d      	negs	r5, r5
 801e608:	4623      	mov	r3, r4
 801e60a:	2710      	movs	r7, #16
 801e60c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801e610:	2d10      	cmp	r5, #16
 801e612:	f102 0201 	add.w	r2, r2, #1
 801e616:	f104 0408 	add.w	r4, r4, #8
 801e61a:	601e      	str	r6, [r3, #0]
 801e61c:	dc2b      	bgt.n	801e676 <_vfprintf_r+0xf5e>
 801e61e:	605d      	str	r5, [r3, #4]
 801e620:	2a07      	cmp	r2, #7
 801e622:	440d      	add	r5, r1
 801e624:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801e628:	dd08      	ble.n	801e63c <_vfprintf_r+0xf24>
 801e62a:	aa22      	add	r2, sp, #136	; 0x88
 801e62c:	4649      	mov	r1, r9
 801e62e:	4650      	mov	r0, sl
 801e630:	f003 fd73 	bl	802211a <__sprint_r>
 801e634:	2800      	cmp	r0, #0
 801e636:	f040 8242 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e63a:	ac25      	add	r4, sp, #148	; 0x94
 801e63c:	9b03      	ldr	r3, [sp, #12]
 801e63e:	6023      	str	r3, [r4, #0]
 801e640:	9b05      	ldr	r3, [sp, #20]
 801e642:	9a05      	ldr	r2, [sp, #20]
 801e644:	6063      	str	r3, [r4, #4]
 801e646:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e648:	4413      	add	r3, r2
 801e64a:	9324      	str	r3, [sp, #144]	; 0x90
 801e64c:	e482      	b.n	801df54 <_vfprintf_r+0x83c>
 801e64e:	aa22      	add	r2, sp, #136	; 0x88
 801e650:	4649      	mov	r1, r9
 801e652:	4650      	mov	r0, sl
 801e654:	f003 fd61 	bl	802211a <__sprint_r>
 801e658:	2800      	cmp	r0, #0
 801e65a:	f040 8230 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e65e:	ac25      	add	r4, sp, #148	; 0x94
 801e660:	e7b8      	b.n	801e5d4 <_vfprintf_r+0xebc>
 801e662:	aa22      	add	r2, sp, #136	; 0x88
 801e664:	4649      	mov	r1, r9
 801e666:	4650      	mov	r0, sl
 801e668:	f003 fd57 	bl	802211a <__sprint_r>
 801e66c:	2800      	cmp	r0, #0
 801e66e:	f040 8226 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e672:	ac25      	add	r4, sp, #148	; 0x94
 801e674:	e7c3      	b.n	801e5fe <_vfprintf_r+0xee6>
 801e676:	3110      	adds	r1, #16
 801e678:	2a07      	cmp	r2, #7
 801e67a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801e67e:	605f      	str	r7, [r3, #4]
 801e680:	dd08      	ble.n	801e694 <_vfprintf_r+0xf7c>
 801e682:	aa22      	add	r2, sp, #136	; 0x88
 801e684:	4649      	mov	r1, r9
 801e686:	4650      	mov	r0, sl
 801e688:	f003 fd47 	bl	802211a <__sprint_r>
 801e68c:	2800      	cmp	r0, #0
 801e68e:	f040 8216 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e692:	ac25      	add	r4, sp, #148	; 0x94
 801e694:	3d10      	subs	r5, #16
 801e696:	4623      	mov	r3, r4
 801e698:	e7b8      	b.n	801e60c <_vfprintf_r+0xef4>
 801e69a:	bf00      	nop
 801e69c:	0802939e 	.word	0x0802939e
 801e6a0:	0802940c 	.word	0x0802940c
 801e6a4:	9b05      	ldr	r3, [sp, #20]
 801e6a6:	42ab      	cmp	r3, r5
 801e6a8:	bfa8      	it	ge
 801e6aa:	462b      	movge	r3, r5
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	461f      	mov	r7, r3
 801e6b0:	dd0b      	ble.n	801e6ca <_vfprintf_r+0xfb2>
 801e6b2:	9b03      	ldr	r3, [sp, #12]
 801e6b4:	e9c4 3700 	strd	r3, r7, [r4]
 801e6b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e6ba:	3301      	adds	r3, #1
 801e6bc:	443e      	add	r6, r7
 801e6be:	2b07      	cmp	r3, #7
 801e6c0:	9624      	str	r6, [sp, #144]	; 0x90
 801e6c2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e6c4:	f300 808c 	bgt.w	801e7e0 <_vfprintf_r+0x10c8>
 801e6c8:	3408      	adds	r4, #8
 801e6ca:	2f00      	cmp	r7, #0
 801e6cc:	bfac      	ite	ge
 801e6ce:	1bee      	subge	r6, r5, r7
 801e6d0:	462e      	movlt	r6, r5
 801e6d2:	2e00      	cmp	r6, #0
 801e6d4:	dd1c      	ble.n	801e710 <_vfprintf_r+0xff8>
 801e6d6:	4f9f      	ldr	r7, [pc, #636]	; (801e954 <_vfprintf_r+0x123c>)
 801e6d8:	f04f 0810 	mov.w	r8, #16
 801e6dc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e6e0:	2e10      	cmp	r6, #16
 801e6e2:	f103 0301 	add.w	r3, r3, #1
 801e6e6:	f104 0108 	add.w	r1, r4, #8
 801e6ea:	6027      	str	r7, [r4, #0]
 801e6ec:	f300 8082 	bgt.w	801e7f4 <_vfprintf_r+0x10dc>
 801e6f0:	6066      	str	r6, [r4, #4]
 801e6f2:	2b07      	cmp	r3, #7
 801e6f4:	4416      	add	r6, r2
 801e6f6:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e6fa:	f340 808e 	ble.w	801e81a <_vfprintf_r+0x1102>
 801e6fe:	aa22      	add	r2, sp, #136	; 0x88
 801e700:	4649      	mov	r1, r9
 801e702:	4650      	mov	r0, sl
 801e704:	f003 fd09 	bl	802211a <__sprint_r>
 801e708:	2800      	cmp	r0, #0
 801e70a:	f040 81d8 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e70e:	ac25      	add	r4, sp, #148	; 0x94
 801e710:	9b03      	ldr	r3, [sp, #12]
 801e712:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801e716:	441d      	add	r5, r3
 801e718:	d00d      	beq.n	801e736 <_vfprintf_r+0x101e>
 801e71a:	4e8e      	ldr	r6, [pc, #568]	; (801e954 <_vfprintf_r+0x123c>)
 801e71c:	2710      	movs	r7, #16
 801e71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e720:	2b00      	cmp	r3, #0
 801e722:	d17c      	bne.n	801e81e <_vfprintf_r+0x1106>
 801e724:	9b08      	ldr	r3, [sp, #32]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d17c      	bne.n	801e824 <_vfprintf_r+0x110c>
 801e72a:	9b03      	ldr	r3, [sp, #12]
 801e72c:	9a05      	ldr	r2, [sp, #20]
 801e72e:	4413      	add	r3, r2
 801e730:	429d      	cmp	r5, r3
 801e732:	bf28      	it	cs
 801e734:	461d      	movcs	r5, r3
 801e736:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e738:	9a05      	ldr	r2, [sp, #20]
 801e73a:	4293      	cmp	r3, r2
 801e73c:	db02      	blt.n	801e744 <_vfprintf_r+0x102c>
 801e73e:	f01b 0f01 	tst.w	fp, #1
 801e742:	d00e      	beq.n	801e762 <_vfprintf_r+0x104a>
 801e744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e746:	6023      	str	r3, [r4, #0]
 801e748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e74a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e74c:	6063      	str	r3, [r4, #4]
 801e74e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e750:	4413      	add	r3, r2
 801e752:	9324      	str	r3, [sp, #144]	; 0x90
 801e754:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e756:	3301      	adds	r3, #1
 801e758:	2b07      	cmp	r3, #7
 801e75a:	9323      	str	r3, [sp, #140]	; 0x8c
 801e75c:	f300 80e5 	bgt.w	801e92a <_vfprintf_r+0x1212>
 801e760:	3408      	adds	r4, #8
 801e762:	9905      	ldr	r1, [sp, #20]
 801e764:	9b03      	ldr	r3, [sp, #12]
 801e766:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801e768:	440b      	add	r3, r1
 801e76a:	1b8e      	subs	r6, r1, r6
 801e76c:	1b5a      	subs	r2, r3, r5
 801e76e:	4296      	cmp	r6, r2
 801e770:	bfa8      	it	ge
 801e772:	4616      	movge	r6, r2
 801e774:	2e00      	cmp	r6, #0
 801e776:	dd0b      	ble.n	801e790 <_vfprintf_r+0x1078>
 801e778:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e77a:	4433      	add	r3, r6
 801e77c:	9324      	str	r3, [sp, #144]	; 0x90
 801e77e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e780:	3301      	adds	r3, #1
 801e782:	2b07      	cmp	r3, #7
 801e784:	e9c4 5600 	strd	r5, r6, [r4]
 801e788:	9323      	str	r3, [sp, #140]	; 0x8c
 801e78a:	f300 80d8 	bgt.w	801e93e <_vfprintf_r+0x1226>
 801e78e:	3408      	adds	r4, #8
 801e790:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e792:	9b05      	ldr	r3, [sp, #20]
 801e794:	2e00      	cmp	r6, #0
 801e796:	eba3 0505 	sub.w	r5, r3, r5
 801e79a:	bfa8      	it	ge
 801e79c:	1bad      	subge	r5, r5, r6
 801e79e:	2d00      	cmp	r5, #0
 801e7a0:	f77f abdf 	ble.w	801df62 <_vfprintf_r+0x84a>
 801e7a4:	4e6b      	ldr	r6, [pc, #428]	; (801e954 <_vfprintf_r+0x123c>)
 801e7a6:	2710      	movs	r7, #16
 801e7a8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e7ac:	2d10      	cmp	r5, #16
 801e7ae:	f103 0301 	add.w	r3, r3, #1
 801e7b2:	f104 0108 	add.w	r1, r4, #8
 801e7b6:	6026      	str	r6, [r4, #0]
 801e7b8:	f77f aec6 	ble.w	801e548 <_vfprintf_r+0xe30>
 801e7bc:	3210      	adds	r2, #16
 801e7be:	2b07      	cmp	r3, #7
 801e7c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e7c4:	6067      	str	r7, [r4, #4]
 801e7c6:	dd08      	ble.n	801e7da <_vfprintf_r+0x10c2>
 801e7c8:	aa22      	add	r2, sp, #136	; 0x88
 801e7ca:	4649      	mov	r1, r9
 801e7cc:	4650      	mov	r0, sl
 801e7ce:	f003 fca4 	bl	802211a <__sprint_r>
 801e7d2:	2800      	cmp	r0, #0
 801e7d4:	f040 8173 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e7d8:	a925      	add	r1, sp, #148	; 0x94
 801e7da:	3d10      	subs	r5, #16
 801e7dc:	460c      	mov	r4, r1
 801e7de:	e7e3      	b.n	801e7a8 <_vfprintf_r+0x1090>
 801e7e0:	aa22      	add	r2, sp, #136	; 0x88
 801e7e2:	4649      	mov	r1, r9
 801e7e4:	4650      	mov	r0, sl
 801e7e6:	f003 fc98 	bl	802211a <__sprint_r>
 801e7ea:	2800      	cmp	r0, #0
 801e7ec:	f040 8167 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e7f0:	ac25      	add	r4, sp, #148	; 0x94
 801e7f2:	e76a      	b.n	801e6ca <_vfprintf_r+0xfb2>
 801e7f4:	3210      	adds	r2, #16
 801e7f6:	2b07      	cmp	r3, #7
 801e7f8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e7fc:	f8c4 8004 	str.w	r8, [r4, #4]
 801e800:	dd08      	ble.n	801e814 <_vfprintf_r+0x10fc>
 801e802:	aa22      	add	r2, sp, #136	; 0x88
 801e804:	4649      	mov	r1, r9
 801e806:	4650      	mov	r0, sl
 801e808:	f003 fc87 	bl	802211a <__sprint_r>
 801e80c:	2800      	cmp	r0, #0
 801e80e:	f040 8156 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e812:	a925      	add	r1, sp, #148	; 0x94
 801e814:	3e10      	subs	r6, #16
 801e816:	460c      	mov	r4, r1
 801e818:	e760      	b.n	801e6dc <_vfprintf_r+0xfc4>
 801e81a:	460c      	mov	r4, r1
 801e81c:	e778      	b.n	801e710 <_vfprintf_r+0xff8>
 801e81e:	9b08      	ldr	r3, [sp, #32]
 801e820:	2b00      	cmp	r3, #0
 801e822:	d052      	beq.n	801e8ca <_vfprintf_r+0x11b2>
 801e824:	9b08      	ldr	r3, [sp, #32]
 801e826:	3b01      	subs	r3, #1
 801e828:	9308      	str	r3, [sp, #32]
 801e82a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e82c:	6023      	str	r3, [r4, #0]
 801e82e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e832:	6063      	str	r3, [r4, #4]
 801e834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e836:	4413      	add	r3, r2
 801e838:	9324      	str	r3, [sp, #144]	; 0x90
 801e83a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e83c:	3301      	adds	r3, #1
 801e83e:	2b07      	cmp	r3, #7
 801e840:	9323      	str	r3, [sp, #140]	; 0x8c
 801e842:	dc49      	bgt.n	801e8d8 <_vfprintf_r+0x11c0>
 801e844:	3408      	adds	r4, #8
 801e846:	9b03      	ldr	r3, [sp, #12]
 801e848:	9a05      	ldr	r2, [sp, #20]
 801e84a:	eb03 0802 	add.w	r8, r3, r2
 801e84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e850:	781b      	ldrb	r3, [r3, #0]
 801e852:	eba8 0805 	sub.w	r8, r8, r5
 801e856:	4598      	cmp	r8, r3
 801e858:	bfa8      	it	ge
 801e85a:	4698      	movge	r8, r3
 801e85c:	f1b8 0f00 	cmp.w	r8, #0
 801e860:	dd0a      	ble.n	801e878 <_vfprintf_r+0x1160>
 801e862:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e864:	4443      	add	r3, r8
 801e866:	9324      	str	r3, [sp, #144]	; 0x90
 801e868:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e86a:	3301      	adds	r3, #1
 801e86c:	2b07      	cmp	r3, #7
 801e86e:	e9c4 5800 	strd	r5, r8, [r4]
 801e872:	9323      	str	r3, [sp, #140]	; 0x8c
 801e874:	dc3a      	bgt.n	801e8ec <_vfprintf_r+0x11d4>
 801e876:	3408      	adds	r4, #8
 801e878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e87a:	781b      	ldrb	r3, [r3, #0]
 801e87c:	f1b8 0f00 	cmp.w	r8, #0
 801e880:	bfac      	ite	ge
 801e882:	eba3 0808 	subge.w	r8, r3, r8
 801e886:	4698      	movlt	r8, r3
 801e888:	f1b8 0f00 	cmp.w	r8, #0
 801e88c:	dd19      	ble.n	801e8c2 <_vfprintf_r+0x11aa>
 801e88e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801e892:	f1b8 0f10 	cmp.w	r8, #16
 801e896:	f102 0201 	add.w	r2, r2, #1
 801e89a:	f104 0108 	add.w	r1, r4, #8
 801e89e:	6026      	str	r6, [r4, #0]
 801e8a0:	dc2e      	bgt.n	801e900 <_vfprintf_r+0x11e8>
 801e8a2:	4443      	add	r3, r8
 801e8a4:	2a07      	cmp	r2, #7
 801e8a6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e8aa:	f8c4 8004 	str.w	r8, [r4, #4]
 801e8ae:	dd3a      	ble.n	801e926 <_vfprintf_r+0x120e>
 801e8b0:	aa22      	add	r2, sp, #136	; 0x88
 801e8b2:	4649      	mov	r1, r9
 801e8b4:	4650      	mov	r0, sl
 801e8b6:	f003 fc30 	bl	802211a <__sprint_r>
 801e8ba:	2800      	cmp	r0, #0
 801e8bc:	f040 80ff 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e8c0:	ac25      	add	r4, sp, #148	; 0x94
 801e8c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8c4:	781b      	ldrb	r3, [r3, #0]
 801e8c6:	441d      	add	r5, r3
 801e8c8:	e729      	b.n	801e71e <_vfprintf_r+0x1006>
 801e8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8cc:	3b01      	subs	r3, #1
 801e8ce:	930a      	str	r3, [sp, #40]	; 0x28
 801e8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8d2:	3b01      	subs	r3, #1
 801e8d4:	9309      	str	r3, [sp, #36]	; 0x24
 801e8d6:	e7a8      	b.n	801e82a <_vfprintf_r+0x1112>
 801e8d8:	aa22      	add	r2, sp, #136	; 0x88
 801e8da:	4649      	mov	r1, r9
 801e8dc:	4650      	mov	r0, sl
 801e8de:	f003 fc1c 	bl	802211a <__sprint_r>
 801e8e2:	2800      	cmp	r0, #0
 801e8e4:	f040 80eb 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e8e8:	ac25      	add	r4, sp, #148	; 0x94
 801e8ea:	e7ac      	b.n	801e846 <_vfprintf_r+0x112e>
 801e8ec:	aa22      	add	r2, sp, #136	; 0x88
 801e8ee:	4649      	mov	r1, r9
 801e8f0:	4650      	mov	r0, sl
 801e8f2:	f003 fc12 	bl	802211a <__sprint_r>
 801e8f6:	2800      	cmp	r0, #0
 801e8f8:	f040 80e1 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e8fc:	ac25      	add	r4, sp, #148	; 0x94
 801e8fe:	e7bb      	b.n	801e878 <_vfprintf_r+0x1160>
 801e900:	3310      	adds	r3, #16
 801e902:	2a07      	cmp	r2, #7
 801e904:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e908:	6067      	str	r7, [r4, #4]
 801e90a:	dd08      	ble.n	801e91e <_vfprintf_r+0x1206>
 801e90c:	aa22      	add	r2, sp, #136	; 0x88
 801e90e:	4649      	mov	r1, r9
 801e910:	4650      	mov	r0, sl
 801e912:	f003 fc02 	bl	802211a <__sprint_r>
 801e916:	2800      	cmp	r0, #0
 801e918:	f040 80d1 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e91c:	a925      	add	r1, sp, #148	; 0x94
 801e91e:	f1a8 0810 	sub.w	r8, r8, #16
 801e922:	460c      	mov	r4, r1
 801e924:	e7b3      	b.n	801e88e <_vfprintf_r+0x1176>
 801e926:	460c      	mov	r4, r1
 801e928:	e7cb      	b.n	801e8c2 <_vfprintf_r+0x11aa>
 801e92a:	aa22      	add	r2, sp, #136	; 0x88
 801e92c:	4649      	mov	r1, r9
 801e92e:	4650      	mov	r0, sl
 801e930:	f003 fbf3 	bl	802211a <__sprint_r>
 801e934:	2800      	cmp	r0, #0
 801e936:	f040 80c2 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e93a:	ac25      	add	r4, sp, #148	; 0x94
 801e93c:	e711      	b.n	801e762 <_vfprintf_r+0x104a>
 801e93e:	aa22      	add	r2, sp, #136	; 0x88
 801e940:	4649      	mov	r1, r9
 801e942:	4650      	mov	r0, sl
 801e944:	f003 fbe9 	bl	802211a <__sprint_r>
 801e948:	2800      	cmp	r0, #0
 801e94a:	f040 80b8 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e94e:	ac25      	add	r4, sp, #148	; 0x94
 801e950:	e71e      	b.n	801e790 <_vfprintf_r+0x1078>
 801e952:	bf00      	nop
 801e954:	0802940c 	.word	0x0802940c
 801e958:	9a05      	ldr	r2, [sp, #20]
 801e95a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e95c:	2a01      	cmp	r2, #1
 801e95e:	9a03      	ldr	r2, [sp, #12]
 801e960:	6022      	str	r2, [r4, #0]
 801e962:	f106 0601 	add.w	r6, r6, #1
 801e966:	f103 0301 	add.w	r3, r3, #1
 801e96a:	f04f 0201 	mov.w	r2, #1
 801e96e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e972:	f104 0508 	add.w	r5, r4, #8
 801e976:	6062      	str	r2, [r4, #4]
 801e978:	dc02      	bgt.n	801e980 <_vfprintf_r+0x1268>
 801e97a:	f01b 0f01 	tst.w	fp, #1
 801e97e:	d078      	beq.n	801ea72 <_vfprintf_r+0x135a>
 801e980:	2b07      	cmp	r3, #7
 801e982:	dd08      	ble.n	801e996 <_vfprintf_r+0x127e>
 801e984:	aa22      	add	r2, sp, #136	; 0x88
 801e986:	4649      	mov	r1, r9
 801e988:	4650      	mov	r0, sl
 801e98a:	f003 fbc6 	bl	802211a <__sprint_r>
 801e98e:	2800      	cmp	r0, #0
 801e990:	f040 8095 	bne.w	801eabe <_vfprintf_r+0x13a6>
 801e994:	ad25      	add	r5, sp, #148	; 0x94
 801e996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e998:	602b      	str	r3, [r5, #0]
 801e99a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e99c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e99e:	606b      	str	r3, [r5, #4]
 801e9a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e9a2:	4413      	add	r3, r2
 801e9a4:	9324      	str	r3, [sp, #144]	; 0x90
 801e9a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e9a8:	3301      	adds	r3, #1
 801e9aa:	2b07      	cmp	r3, #7
 801e9ac:	9323      	str	r3, [sp, #140]	; 0x8c
 801e9ae:	dc32      	bgt.n	801ea16 <_vfprintf_r+0x12fe>
 801e9b0:	3508      	adds	r5, #8
 801e9b2:	9b05      	ldr	r3, [sp, #20]
 801e9b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e9b8:	1e5c      	subs	r4, r3, #1
 801e9ba:	2200      	movs	r2, #0
 801e9bc:	2300      	movs	r3, #0
 801e9be:	f7e2 f8b3 	bl	8000b28 <__aeabi_dcmpeq>
 801e9c2:	2800      	cmp	r0, #0
 801e9c4:	d130      	bne.n	801ea28 <_vfprintf_r+0x1310>
 801e9c6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e9c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e9ca:	9803      	ldr	r0, [sp, #12]
 801e9cc:	9a05      	ldr	r2, [sp, #20]
 801e9ce:	3101      	adds	r1, #1
 801e9d0:	3b01      	subs	r3, #1
 801e9d2:	3001      	adds	r0, #1
 801e9d4:	4413      	add	r3, r2
 801e9d6:	2907      	cmp	r1, #7
 801e9d8:	e9c5 0400 	strd	r0, r4, [r5]
 801e9dc:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801e9e0:	dd4a      	ble.n	801ea78 <_vfprintf_r+0x1360>
 801e9e2:	aa22      	add	r2, sp, #136	; 0x88
 801e9e4:	4649      	mov	r1, r9
 801e9e6:	4650      	mov	r0, sl
 801e9e8:	f003 fb97 	bl	802211a <__sprint_r>
 801e9ec:	2800      	cmp	r0, #0
 801e9ee:	d166      	bne.n	801eabe <_vfprintf_r+0x13a6>
 801e9f0:	ad25      	add	r5, sp, #148	; 0x94
 801e9f2:	ab1e      	add	r3, sp, #120	; 0x78
 801e9f4:	602b      	str	r3, [r5, #0]
 801e9f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e9f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e9fa:	606b      	str	r3, [r5, #4]
 801e9fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e9fe:	4413      	add	r3, r2
 801ea00:	9324      	str	r3, [sp, #144]	; 0x90
 801ea02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea04:	3301      	adds	r3, #1
 801ea06:	2b07      	cmp	r3, #7
 801ea08:	9323      	str	r3, [sp, #140]	; 0x8c
 801ea0a:	f73f ada4 	bgt.w	801e556 <_vfprintf_r+0xe3e>
 801ea0e:	f105 0408 	add.w	r4, r5, #8
 801ea12:	f7ff baa6 	b.w	801df62 <_vfprintf_r+0x84a>
 801ea16:	aa22      	add	r2, sp, #136	; 0x88
 801ea18:	4649      	mov	r1, r9
 801ea1a:	4650      	mov	r0, sl
 801ea1c:	f003 fb7d 	bl	802211a <__sprint_r>
 801ea20:	2800      	cmp	r0, #0
 801ea22:	d14c      	bne.n	801eabe <_vfprintf_r+0x13a6>
 801ea24:	ad25      	add	r5, sp, #148	; 0x94
 801ea26:	e7c4      	b.n	801e9b2 <_vfprintf_r+0x129a>
 801ea28:	2c00      	cmp	r4, #0
 801ea2a:	dde2      	ble.n	801e9f2 <_vfprintf_r+0x12da>
 801ea2c:	4e53      	ldr	r6, [pc, #332]	; (801eb7c <_vfprintf_r+0x1464>)
 801ea2e:	2710      	movs	r7, #16
 801ea30:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ea34:	2c10      	cmp	r4, #16
 801ea36:	f103 0301 	add.w	r3, r3, #1
 801ea3a:	f105 0108 	add.w	r1, r5, #8
 801ea3e:	602e      	str	r6, [r5, #0]
 801ea40:	dc07      	bgt.n	801ea52 <_vfprintf_r+0x133a>
 801ea42:	606c      	str	r4, [r5, #4]
 801ea44:	2b07      	cmp	r3, #7
 801ea46:	4414      	add	r4, r2
 801ea48:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801ea4c:	dcc9      	bgt.n	801e9e2 <_vfprintf_r+0x12ca>
 801ea4e:	460d      	mov	r5, r1
 801ea50:	e7cf      	b.n	801e9f2 <_vfprintf_r+0x12da>
 801ea52:	3210      	adds	r2, #16
 801ea54:	2b07      	cmp	r3, #7
 801ea56:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ea5a:	606f      	str	r7, [r5, #4]
 801ea5c:	dd06      	ble.n	801ea6c <_vfprintf_r+0x1354>
 801ea5e:	aa22      	add	r2, sp, #136	; 0x88
 801ea60:	4649      	mov	r1, r9
 801ea62:	4650      	mov	r0, sl
 801ea64:	f003 fb59 	bl	802211a <__sprint_r>
 801ea68:	bb48      	cbnz	r0, 801eabe <_vfprintf_r+0x13a6>
 801ea6a:	a925      	add	r1, sp, #148	; 0x94
 801ea6c:	3c10      	subs	r4, #16
 801ea6e:	460d      	mov	r5, r1
 801ea70:	e7de      	b.n	801ea30 <_vfprintf_r+0x1318>
 801ea72:	2b07      	cmp	r3, #7
 801ea74:	ddbd      	ble.n	801e9f2 <_vfprintf_r+0x12da>
 801ea76:	e7b4      	b.n	801e9e2 <_vfprintf_r+0x12ca>
 801ea78:	3508      	adds	r5, #8
 801ea7a:	e7ba      	b.n	801e9f2 <_vfprintf_r+0x12da>
 801ea7c:	460c      	mov	r4, r1
 801ea7e:	f7ff ba70 	b.w	801df62 <_vfprintf_r+0x84a>
 801ea82:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801ea86:	1a9d      	subs	r5, r3, r2
 801ea88:	2d00      	cmp	r5, #0
 801ea8a:	f77f aa6e 	ble.w	801df6a <_vfprintf_r+0x852>
 801ea8e:	4e3c      	ldr	r6, [pc, #240]	; (801eb80 <_vfprintf_r+0x1468>)
 801ea90:	2710      	movs	r7, #16
 801ea92:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ea96:	2d10      	cmp	r5, #16
 801ea98:	f103 0301 	add.w	r3, r3, #1
 801ea9c:	6026      	str	r6, [r4, #0]
 801ea9e:	dc18      	bgt.n	801ead2 <_vfprintf_r+0x13ba>
 801eaa0:	6065      	str	r5, [r4, #4]
 801eaa2:	2b07      	cmp	r3, #7
 801eaa4:	4415      	add	r5, r2
 801eaa6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801eaaa:	f77f aa5e 	ble.w	801df6a <_vfprintf_r+0x852>
 801eaae:	aa22      	add	r2, sp, #136	; 0x88
 801eab0:	4649      	mov	r1, r9
 801eab2:	4650      	mov	r0, sl
 801eab4:	f003 fb31 	bl	802211a <__sprint_r>
 801eab8:	2800      	cmp	r0, #0
 801eaba:	f43f aa56 	beq.w	801df6a <_vfprintf_r+0x852>
 801eabe:	9b04      	ldr	r3, [sp, #16]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	f43f a872 	beq.w	801dbaa <_vfprintf_r+0x492>
 801eac6:	4619      	mov	r1, r3
 801eac8:	4650      	mov	r0, sl
 801eaca:	f001 f909 	bl	801fce0 <_free_r>
 801eace:	f7ff b86c 	b.w	801dbaa <_vfprintf_r+0x492>
 801ead2:	3210      	adds	r2, #16
 801ead4:	2b07      	cmp	r3, #7
 801ead6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801eada:	6067      	str	r7, [r4, #4]
 801eadc:	dc02      	bgt.n	801eae4 <_vfprintf_r+0x13cc>
 801eade:	3408      	adds	r4, #8
 801eae0:	3d10      	subs	r5, #16
 801eae2:	e7d6      	b.n	801ea92 <_vfprintf_r+0x137a>
 801eae4:	aa22      	add	r2, sp, #136	; 0x88
 801eae6:	4649      	mov	r1, r9
 801eae8:	4650      	mov	r0, sl
 801eaea:	f003 fb16 	bl	802211a <__sprint_r>
 801eaee:	2800      	cmp	r0, #0
 801eaf0:	d1e5      	bne.n	801eabe <_vfprintf_r+0x13a6>
 801eaf2:	ac25      	add	r4, sp, #148	; 0x94
 801eaf4:	e7f4      	b.n	801eae0 <_vfprintf_r+0x13c8>
 801eaf6:	9904      	ldr	r1, [sp, #16]
 801eaf8:	4650      	mov	r0, sl
 801eafa:	f001 f8f1 	bl	801fce0 <_free_r>
 801eafe:	f7ff ba4c 	b.w	801df9a <_vfprintf_r+0x882>
 801eb02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eb04:	b91b      	cbnz	r3, 801eb0e <_vfprintf_r+0x13f6>
 801eb06:	2300      	movs	r3, #0
 801eb08:	9323      	str	r3, [sp, #140]	; 0x8c
 801eb0a:	f7ff b84e 	b.w	801dbaa <_vfprintf_r+0x492>
 801eb0e:	aa22      	add	r2, sp, #136	; 0x88
 801eb10:	4649      	mov	r1, r9
 801eb12:	4650      	mov	r0, sl
 801eb14:	f003 fb01 	bl	802211a <__sprint_r>
 801eb18:	2800      	cmp	r0, #0
 801eb1a:	d0f4      	beq.n	801eb06 <_vfprintf_r+0x13ee>
 801eb1c:	f7ff b845 	b.w	801dbaa <_vfprintf_r+0x492>
 801eb20:	ea56 0207 	orrs.w	r2, r6, r7
 801eb24:	f8cd b010 	str.w	fp, [sp, #16]
 801eb28:	f43f ab5c 	beq.w	801e1e4 <_vfprintf_r+0xacc>
 801eb2c:	2b01      	cmp	r3, #1
 801eb2e:	f43f abf4 	beq.w	801e31a <_vfprintf_r+0xc02>
 801eb32:	2b02      	cmp	r3, #2
 801eb34:	ab4e      	add	r3, sp, #312	; 0x138
 801eb36:	9303      	str	r3, [sp, #12]
 801eb38:	f43f ac46 	beq.w	801e3c8 <_vfprintf_r+0xcb0>
 801eb3c:	9903      	ldr	r1, [sp, #12]
 801eb3e:	f006 0307 	and.w	r3, r6, #7
 801eb42:	460a      	mov	r2, r1
 801eb44:	3330      	adds	r3, #48	; 0x30
 801eb46:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801eb4a:	9203      	str	r2, [sp, #12]
 801eb4c:	08f2      	lsrs	r2, r6, #3
 801eb4e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801eb52:	08f8      	lsrs	r0, r7, #3
 801eb54:	4616      	mov	r6, r2
 801eb56:	4607      	mov	r7, r0
 801eb58:	ea56 0207 	orrs.w	r2, r6, r7
 801eb5c:	d1ee      	bne.n	801eb3c <_vfprintf_r+0x1424>
 801eb5e:	9a04      	ldr	r2, [sp, #16]
 801eb60:	07d0      	lsls	r0, r2, #31
 801eb62:	f57f ac20 	bpl.w	801e3a6 <_vfprintf_r+0xc8e>
 801eb66:	2b30      	cmp	r3, #48	; 0x30
 801eb68:	f43f ac1d 	beq.w	801e3a6 <_vfprintf_r+0xc8e>
 801eb6c:	9a03      	ldr	r2, [sp, #12]
 801eb6e:	2330      	movs	r3, #48	; 0x30
 801eb70:	f802 3c01 	strb.w	r3, [r2, #-1]
 801eb74:	1e8b      	subs	r3, r1, #2
 801eb76:	9303      	str	r3, [sp, #12]
 801eb78:	e415      	b.n	801e3a6 <_vfprintf_r+0xc8e>
 801eb7a:	bf00      	nop
 801eb7c:	0802940c 	.word	0x0802940c
 801eb80:	080293fc 	.word	0x080293fc

0801eb84 <__sbprintf>:
 801eb84:	b570      	push	{r4, r5, r6, lr}
 801eb86:	460c      	mov	r4, r1
 801eb88:	8989      	ldrh	r1, [r1, #12]
 801eb8a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801eb8e:	f021 0102 	bic.w	r1, r1, #2
 801eb92:	f8ad 1014 	strh.w	r1, [sp, #20]
 801eb96:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801eb98:	911b      	str	r1, [sp, #108]	; 0x6c
 801eb9a:	89e1      	ldrh	r1, [r4, #14]
 801eb9c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801eba0:	69e1      	ldr	r1, [r4, #28]
 801eba2:	9109      	str	r1, [sp, #36]	; 0x24
 801eba4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801eba6:	910b      	str	r1, [sp, #44]	; 0x2c
 801eba8:	a91c      	add	r1, sp, #112	; 0x70
 801ebaa:	9102      	str	r1, [sp, #8]
 801ebac:	9106      	str	r1, [sp, #24]
 801ebae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ebb2:	4606      	mov	r6, r0
 801ebb4:	9104      	str	r1, [sp, #16]
 801ebb6:	9107      	str	r1, [sp, #28]
 801ebb8:	a818      	add	r0, sp, #96	; 0x60
 801ebba:	2100      	movs	r1, #0
 801ebbc:	e9cd 3200 	strd	r3, r2, [sp]
 801ebc0:	9108      	str	r1, [sp, #32]
 801ebc2:	f001 fa67 	bl	8020094 <__retarget_lock_init_recursive>
 801ebc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ebca:	a902      	add	r1, sp, #8
 801ebcc:	4630      	mov	r0, r6
 801ebce:	f7fe fda3 	bl	801d718 <_vfprintf_r>
 801ebd2:	1e05      	subs	r5, r0, #0
 801ebd4:	db07      	blt.n	801ebe6 <__sbprintf+0x62>
 801ebd6:	a902      	add	r1, sp, #8
 801ebd8:	4630      	mov	r0, r6
 801ebda:	f000 ff85 	bl	801fae8 <_fflush_r>
 801ebde:	2800      	cmp	r0, #0
 801ebe0:	bf18      	it	ne
 801ebe2:	f04f 35ff 	movne.w	r5, #4294967295
 801ebe6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ebea:	9818      	ldr	r0, [sp, #96]	; 0x60
 801ebec:	065b      	lsls	r3, r3, #25
 801ebee:	bf42      	ittt	mi
 801ebf0:	89a3      	ldrhmi	r3, [r4, #12]
 801ebf2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801ebf6:	81a3      	strhmi	r3, [r4, #12]
 801ebf8:	f001 fa4d 	bl	8020096 <__retarget_lock_close_recursive>
 801ebfc:	4628      	mov	r0, r5
 801ebfe:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801ec02:	bd70      	pop	{r4, r5, r6, pc}

0801ec04 <__swsetup_r>:
 801ec04:	b538      	push	{r3, r4, r5, lr}
 801ec06:	4b2a      	ldr	r3, [pc, #168]	; (801ecb0 <__swsetup_r+0xac>)
 801ec08:	4605      	mov	r5, r0
 801ec0a:	6818      	ldr	r0, [r3, #0]
 801ec0c:	460c      	mov	r4, r1
 801ec0e:	b118      	cbz	r0, 801ec18 <__swsetup_r+0x14>
 801ec10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ec12:	b90b      	cbnz	r3, 801ec18 <__swsetup_r+0x14>
 801ec14:	f000 ffd4 	bl	801fbc0 <__sinit>
 801ec18:	89a3      	ldrh	r3, [r4, #12]
 801ec1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ec1e:	0718      	lsls	r0, r3, #28
 801ec20:	d422      	bmi.n	801ec68 <__swsetup_r+0x64>
 801ec22:	06d9      	lsls	r1, r3, #27
 801ec24:	d407      	bmi.n	801ec36 <__swsetup_r+0x32>
 801ec26:	2309      	movs	r3, #9
 801ec28:	602b      	str	r3, [r5, #0]
 801ec2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ec2e:	81a3      	strh	r3, [r4, #12]
 801ec30:	f04f 30ff 	mov.w	r0, #4294967295
 801ec34:	e034      	b.n	801eca0 <__swsetup_r+0x9c>
 801ec36:	0758      	lsls	r0, r3, #29
 801ec38:	d512      	bpl.n	801ec60 <__swsetup_r+0x5c>
 801ec3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ec3c:	b141      	cbz	r1, 801ec50 <__swsetup_r+0x4c>
 801ec3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801ec42:	4299      	cmp	r1, r3
 801ec44:	d002      	beq.n	801ec4c <__swsetup_r+0x48>
 801ec46:	4628      	mov	r0, r5
 801ec48:	f001 f84a 	bl	801fce0 <_free_r>
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	6323      	str	r3, [r4, #48]	; 0x30
 801ec50:	89a3      	ldrh	r3, [r4, #12]
 801ec52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ec56:	81a3      	strh	r3, [r4, #12]
 801ec58:	2300      	movs	r3, #0
 801ec5a:	6063      	str	r3, [r4, #4]
 801ec5c:	6923      	ldr	r3, [r4, #16]
 801ec5e:	6023      	str	r3, [r4, #0]
 801ec60:	89a3      	ldrh	r3, [r4, #12]
 801ec62:	f043 0308 	orr.w	r3, r3, #8
 801ec66:	81a3      	strh	r3, [r4, #12]
 801ec68:	6923      	ldr	r3, [r4, #16]
 801ec6a:	b94b      	cbnz	r3, 801ec80 <__swsetup_r+0x7c>
 801ec6c:	89a3      	ldrh	r3, [r4, #12]
 801ec6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ec72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ec76:	d003      	beq.n	801ec80 <__swsetup_r+0x7c>
 801ec78:	4621      	mov	r1, r4
 801ec7a:	4628      	mov	r0, r5
 801ec7c:	f001 fa3c 	bl	80200f8 <__smakebuf_r>
 801ec80:	89a0      	ldrh	r0, [r4, #12]
 801ec82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ec86:	f010 0301 	ands.w	r3, r0, #1
 801ec8a:	d00a      	beq.n	801eca2 <__swsetup_r+0x9e>
 801ec8c:	2300      	movs	r3, #0
 801ec8e:	60a3      	str	r3, [r4, #8]
 801ec90:	6963      	ldr	r3, [r4, #20]
 801ec92:	425b      	negs	r3, r3
 801ec94:	61a3      	str	r3, [r4, #24]
 801ec96:	6923      	ldr	r3, [r4, #16]
 801ec98:	b943      	cbnz	r3, 801ecac <__swsetup_r+0xa8>
 801ec9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ec9e:	d1c4      	bne.n	801ec2a <__swsetup_r+0x26>
 801eca0:	bd38      	pop	{r3, r4, r5, pc}
 801eca2:	0781      	lsls	r1, r0, #30
 801eca4:	bf58      	it	pl
 801eca6:	6963      	ldrpl	r3, [r4, #20]
 801eca8:	60a3      	str	r3, [r4, #8]
 801ecaa:	e7f4      	b.n	801ec96 <__swsetup_r+0x92>
 801ecac:	2000      	movs	r0, #0
 801ecae:	e7f7      	b.n	801eca0 <__swsetup_r+0x9c>
 801ecb0:	20000038 	.word	0x20000038

0801ecb4 <register_fini>:
 801ecb4:	4b02      	ldr	r3, [pc, #8]	; (801ecc0 <register_fini+0xc>)
 801ecb6:	b113      	cbz	r3, 801ecbe <register_fini+0xa>
 801ecb8:	4802      	ldr	r0, [pc, #8]	; (801ecc4 <register_fini+0x10>)
 801ecba:	f000 b805 	b.w	801ecc8 <atexit>
 801ecbe:	4770      	bx	lr
 801ecc0:	00000000 	.word	0x00000000
 801ecc4:	0801fc11 	.word	0x0801fc11

0801ecc8 <atexit>:
 801ecc8:	2300      	movs	r3, #0
 801ecca:	4601      	mov	r1, r0
 801eccc:	461a      	mov	r2, r3
 801ecce:	4618      	mov	r0, r3
 801ecd0:	f003 bf30 	b.w	8022b34 <__register_exitproc>

0801ecd4 <div>:
 801ecd4:	2900      	cmp	r1, #0
 801ecd6:	b510      	push	{r4, lr}
 801ecd8:	fb91 f4f2 	sdiv	r4, r1, r2
 801ecdc:	fb02 1314 	mls	r3, r2, r4, r1
 801ece0:	db06      	blt.n	801ecf0 <div+0x1c>
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	da01      	bge.n	801ecea <div+0x16>
 801ece6:	3401      	adds	r4, #1
 801ece8:	1a9b      	subs	r3, r3, r2
 801ecea:	e9c0 4300 	strd	r4, r3, [r0]
 801ecee:	bd10      	pop	{r4, pc}
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	bfc4      	itt	gt
 801ecf4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801ecf8:	189b      	addgt	r3, r3, r2
 801ecfa:	e7f6      	b.n	801ecea <div+0x16>

0801ecfc <quorem>:
 801ecfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed00:	6903      	ldr	r3, [r0, #16]
 801ed02:	690c      	ldr	r4, [r1, #16]
 801ed04:	42a3      	cmp	r3, r4
 801ed06:	4607      	mov	r7, r0
 801ed08:	f2c0 8081 	blt.w	801ee0e <quorem+0x112>
 801ed0c:	3c01      	subs	r4, #1
 801ed0e:	f101 0814 	add.w	r8, r1, #20
 801ed12:	f100 0514 	add.w	r5, r0, #20
 801ed16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ed1a:	9301      	str	r3, [sp, #4]
 801ed1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ed20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ed24:	3301      	adds	r3, #1
 801ed26:	429a      	cmp	r2, r3
 801ed28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ed2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ed30:	fbb2 f6f3 	udiv	r6, r2, r3
 801ed34:	d331      	bcc.n	801ed9a <quorem+0x9e>
 801ed36:	f04f 0e00 	mov.w	lr, #0
 801ed3a:	4640      	mov	r0, r8
 801ed3c:	46ac      	mov	ip, r5
 801ed3e:	46f2      	mov	sl, lr
 801ed40:	f850 2b04 	ldr.w	r2, [r0], #4
 801ed44:	b293      	uxth	r3, r2
 801ed46:	fb06 e303 	mla	r3, r6, r3, lr
 801ed4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ed4e:	b29b      	uxth	r3, r3
 801ed50:	ebaa 0303 	sub.w	r3, sl, r3
 801ed54:	0c12      	lsrs	r2, r2, #16
 801ed56:	f8dc a000 	ldr.w	sl, [ip]
 801ed5a:	fb06 e202 	mla	r2, r6, r2, lr
 801ed5e:	fa13 f38a 	uxtah	r3, r3, sl
 801ed62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ed66:	fa1f fa82 	uxth.w	sl, r2
 801ed6a:	f8dc 2000 	ldr.w	r2, [ip]
 801ed6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ed72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ed76:	b29b      	uxth	r3, r3
 801ed78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed7c:	4581      	cmp	r9, r0
 801ed7e:	f84c 3b04 	str.w	r3, [ip], #4
 801ed82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ed86:	d2db      	bcs.n	801ed40 <quorem+0x44>
 801ed88:	f855 300b 	ldr.w	r3, [r5, fp]
 801ed8c:	b92b      	cbnz	r3, 801ed9a <quorem+0x9e>
 801ed8e:	9b01      	ldr	r3, [sp, #4]
 801ed90:	3b04      	subs	r3, #4
 801ed92:	429d      	cmp	r5, r3
 801ed94:	461a      	mov	r2, r3
 801ed96:	d32e      	bcc.n	801edf6 <quorem+0xfa>
 801ed98:	613c      	str	r4, [r7, #16]
 801ed9a:	4638      	mov	r0, r7
 801ed9c:	f001 fe7a 	bl	8020a94 <__mcmp>
 801eda0:	2800      	cmp	r0, #0
 801eda2:	db24      	blt.n	801edee <quorem+0xf2>
 801eda4:	3601      	adds	r6, #1
 801eda6:	4628      	mov	r0, r5
 801eda8:	f04f 0c00 	mov.w	ip, #0
 801edac:	f858 2b04 	ldr.w	r2, [r8], #4
 801edb0:	f8d0 e000 	ldr.w	lr, [r0]
 801edb4:	b293      	uxth	r3, r2
 801edb6:	ebac 0303 	sub.w	r3, ip, r3
 801edba:	0c12      	lsrs	r2, r2, #16
 801edbc:	fa13 f38e 	uxtah	r3, r3, lr
 801edc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801edc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801edc8:	b29b      	uxth	r3, r3
 801edca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801edce:	45c1      	cmp	r9, r8
 801edd0:	f840 3b04 	str.w	r3, [r0], #4
 801edd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801edd8:	d2e8      	bcs.n	801edac <quorem+0xb0>
 801edda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801edde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ede2:	b922      	cbnz	r2, 801edee <quorem+0xf2>
 801ede4:	3b04      	subs	r3, #4
 801ede6:	429d      	cmp	r5, r3
 801ede8:	461a      	mov	r2, r3
 801edea:	d30a      	bcc.n	801ee02 <quorem+0x106>
 801edec:	613c      	str	r4, [r7, #16]
 801edee:	4630      	mov	r0, r6
 801edf0:	b003      	add	sp, #12
 801edf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf6:	6812      	ldr	r2, [r2, #0]
 801edf8:	3b04      	subs	r3, #4
 801edfa:	2a00      	cmp	r2, #0
 801edfc:	d1cc      	bne.n	801ed98 <quorem+0x9c>
 801edfe:	3c01      	subs	r4, #1
 801ee00:	e7c7      	b.n	801ed92 <quorem+0x96>
 801ee02:	6812      	ldr	r2, [r2, #0]
 801ee04:	3b04      	subs	r3, #4
 801ee06:	2a00      	cmp	r2, #0
 801ee08:	d1f0      	bne.n	801edec <quorem+0xf0>
 801ee0a:	3c01      	subs	r4, #1
 801ee0c:	e7eb      	b.n	801ede6 <quorem+0xea>
 801ee0e:	2000      	movs	r0, #0
 801ee10:	e7ee      	b.n	801edf0 <quorem+0xf4>
 801ee12:	0000      	movs	r0, r0
 801ee14:	0000      	movs	r0, r0
	...

0801ee18 <_dtoa_r>:
 801ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee1c:	ed2d 8b02 	vpush	{d8}
 801ee20:	b095      	sub	sp, #84	; 0x54
 801ee22:	ec57 6b10 	vmov	r6, r7, d0
 801ee26:	9105      	str	r1, [sp, #20]
 801ee28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801ee2a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ee2c:	9209      	str	r2, [sp, #36]	; 0x24
 801ee2e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801ee32:	4604      	mov	r4, r0
 801ee34:	930f      	str	r3, [sp, #60]	; 0x3c
 801ee36:	b141      	cbz	r1, 801ee4a <_dtoa_r+0x32>
 801ee38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ee3a:	604a      	str	r2, [r1, #4]
 801ee3c:	2301      	movs	r3, #1
 801ee3e:	4093      	lsls	r3, r2
 801ee40:	608b      	str	r3, [r1, #8]
 801ee42:	f001 fc1c 	bl	802067e <_Bfree>
 801ee46:	2300      	movs	r3, #0
 801ee48:	6423      	str	r3, [r4, #64]	; 0x40
 801ee4a:	1e3b      	subs	r3, r7, #0
 801ee4c:	bfb9      	ittee	lt
 801ee4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ee52:	9303      	strlt	r3, [sp, #12]
 801ee54:	2300      	movge	r3, #0
 801ee56:	602b      	strge	r3, [r5, #0]
 801ee58:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ee5c:	4ba2      	ldr	r3, [pc, #648]	; (801f0e8 <_dtoa_r+0x2d0>)
 801ee5e:	bfbc      	itt	lt
 801ee60:	2201      	movlt	r2, #1
 801ee62:	602a      	strlt	r2, [r5, #0]
 801ee64:	ea33 0309 	bics.w	r3, r3, r9
 801ee68:	d11b      	bne.n	801eea2 <_dtoa_r+0x8a>
 801ee6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee6c:	f242 730f 	movw	r3, #9999	; 0x270f
 801ee70:	6013      	str	r3, [r2, #0]
 801ee72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ee76:	4333      	orrs	r3, r6
 801ee78:	f000 8578 	beq.w	801f96c <_dtoa_r+0xb54>
 801ee7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ee7e:	b90b      	cbnz	r3, 801ee84 <_dtoa_r+0x6c>
 801ee80:	4b9a      	ldr	r3, [pc, #616]	; (801f0ec <_dtoa_r+0x2d4>)
 801ee82:	e024      	b.n	801eece <_dtoa_r+0xb6>
 801ee84:	4b99      	ldr	r3, [pc, #612]	; (801f0ec <_dtoa_r+0x2d4>)
 801ee86:	9300      	str	r3, [sp, #0]
 801ee88:	3303      	adds	r3, #3
 801ee8a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ee8c:	6013      	str	r3, [r2, #0]
 801ee8e:	9800      	ldr	r0, [sp, #0]
 801ee90:	b015      	add	sp, #84	; 0x54
 801ee92:	ecbd 8b02 	vpop	{d8}
 801ee96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee9a:	4b95      	ldr	r3, [pc, #596]	; (801f0f0 <_dtoa_r+0x2d8>)
 801ee9c:	9300      	str	r3, [sp, #0]
 801ee9e:	3308      	adds	r3, #8
 801eea0:	e7f3      	b.n	801ee8a <_dtoa_r+0x72>
 801eea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eea6:	2200      	movs	r2, #0
 801eea8:	ec51 0b17 	vmov	r0, r1, d7
 801eeac:	2300      	movs	r3, #0
 801eeae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801eeb2:	f7e1 fe39 	bl	8000b28 <__aeabi_dcmpeq>
 801eeb6:	4680      	mov	r8, r0
 801eeb8:	b158      	cbz	r0, 801eed2 <_dtoa_r+0xba>
 801eeba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eebc:	2301      	movs	r3, #1
 801eebe:	6013      	str	r3, [r2, #0]
 801eec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	f000 854f 	beq.w	801f966 <_dtoa_r+0xb4e>
 801eec8:	488a      	ldr	r0, [pc, #552]	; (801f0f4 <_dtoa_r+0x2dc>)
 801eeca:	6018      	str	r0, [r3, #0]
 801eecc:	1e43      	subs	r3, r0, #1
 801eece:	9300      	str	r3, [sp, #0]
 801eed0:	e7dd      	b.n	801ee8e <_dtoa_r+0x76>
 801eed2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801eed6:	aa12      	add	r2, sp, #72	; 0x48
 801eed8:	a913      	add	r1, sp, #76	; 0x4c
 801eeda:	4620      	mov	r0, r4
 801eedc:	f001 fe7e 	bl	8020bdc <__d2b>
 801eee0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801eee4:	4683      	mov	fp, r0
 801eee6:	2d00      	cmp	r5, #0
 801eee8:	d07c      	beq.n	801efe4 <_dtoa_r+0x1cc>
 801eeea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eeec:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801eef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eef4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801eef8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801eefc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ef00:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ef04:	4b7c      	ldr	r3, [pc, #496]	; (801f0f8 <_dtoa_r+0x2e0>)
 801ef06:	2200      	movs	r2, #0
 801ef08:	4630      	mov	r0, r6
 801ef0a:	4639      	mov	r1, r7
 801ef0c:	f7e1 f9ec 	bl	80002e8 <__aeabi_dsub>
 801ef10:	a36f      	add	r3, pc, #444	; (adr r3, 801f0d0 <_dtoa_r+0x2b8>)
 801ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef16:	f7e1 fb9f 	bl	8000658 <__aeabi_dmul>
 801ef1a:	a36f      	add	r3, pc, #444	; (adr r3, 801f0d8 <_dtoa_r+0x2c0>)
 801ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef20:	f7e1 f9e4 	bl	80002ec <__adddf3>
 801ef24:	4606      	mov	r6, r0
 801ef26:	4628      	mov	r0, r5
 801ef28:	460f      	mov	r7, r1
 801ef2a:	f7e1 fb2b 	bl	8000584 <__aeabi_i2d>
 801ef2e:	a36c      	add	r3, pc, #432	; (adr r3, 801f0e0 <_dtoa_r+0x2c8>)
 801ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef34:	f7e1 fb90 	bl	8000658 <__aeabi_dmul>
 801ef38:	4602      	mov	r2, r0
 801ef3a:	460b      	mov	r3, r1
 801ef3c:	4630      	mov	r0, r6
 801ef3e:	4639      	mov	r1, r7
 801ef40:	f7e1 f9d4 	bl	80002ec <__adddf3>
 801ef44:	4606      	mov	r6, r0
 801ef46:	460f      	mov	r7, r1
 801ef48:	f7e1 fe36 	bl	8000bb8 <__aeabi_d2iz>
 801ef4c:	2200      	movs	r2, #0
 801ef4e:	4682      	mov	sl, r0
 801ef50:	2300      	movs	r3, #0
 801ef52:	4630      	mov	r0, r6
 801ef54:	4639      	mov	r1, r7
 801ef56:	f7e1 fdf1 	bl	8000b3c <__aeabi_dcmplt>
 801ef5a:	b148      	cbz	r0, 801ef70 <_dtoa_r+0x158>
 801ef5c:	4650      	mov	r0, sl
 801ef5e:	f7e1 fb11 	bl	8000584 <__aeabi_i2d>
 801ef62:	4632      	mov	r2, r6
 801ef64:	463b      	mov	r3, r7
 801ef66:	f7e1 fddf 	bl	8000b28 <__aeabi_dcmpeq>
 801ef6a:	b908      	cbnz	r0, 801ef70 <_dtoa_r+0x158>
 801ef6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef70:	f1ba 0f16 	cmp.w	sl, #22
 801ef74:	d854      	bhi.n	801f020 <_dtoa_r+0x208>
 801ef76:	4b61      	ldr	r3, [pc, #388]	; (801f0fc <_dtoa_r+0x2e4>)
 801ef78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ef7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ef84:	f7e1 fdda 	bl	8000b3c <__aeabi_dcmplt>
 801ef88:	2800      	cmp	r0, #0
 801ef8a:	d04b      	beq.n	801f024 <_dtoa_r+0x20c>
 801ef8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ef90:	2300      	movs	r3, #0
 801ef92:	930e      	str	r3, [sp, #56]	; 0x38
 801ef94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ef96:	1b5d      	subs	r5, r3, r5
 801ef98:	1e6b      	subs	r3, r5, #1
 801ef9a:	9304      	str	r3, [sp, #16]
 801ef9c:	bf43      	ittte	mi
 801ef9e:	2300      	movmi	r3, #0
 801efa0:	f1c5 0801 	rsbmi	r8, r5, #1
 801efa4:	9304      	strmi	r3, [sp, #16]
 801efa6:	f04f 0800 	movpl.w	r8, #0
 801efaa:	f1ba 0f00 	cmp.w	sl, #0
 801efae:	db3b      	blt.n	801f028 <_dtoa_r+0x210>
 801efb0:	9b04      	ldr	r3, [sp, #16]
 801efb2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801efb6:	4453      	add	r3, sl
 801efb8:	9304      	str	r3, [sp, #16]
 801efba:	2300      	movs	r3, #0
 801efbc:	9306      	str	r3, [sp, #24]
 801efbe:	9b05      	ldr	r3, [sp, #20]
 801efc0:	2b09      	cmp	r3, #9
 801efc2:	d86a      	bhi.n	801f09a <_dtoa_r+0x282>
 801efc4:	2b05      	cmp	r3, #5
 801efc6:	bfc4      	itt	gt
 801efc8:	3b04      	subgt	r3, #4
 801efca:	9305      	strgt	r3, [sp, #20]
 801efcc:	9b05      	ldr	r3, [sp, #20]
 801efce:	f1a3 0302 	sub.w	r3, r3, #2
 801efd2:	bfcc      	ite	gt
 801efd4:	2500      	movgt	r5, #0
 801efd6:	2501      	movle	r5, #1
 801efd8:	2b03      	cmp	r3, #3
 801efda:	d86a      	bhi.n	801f0b2 <_dtoa_r+0x29a>
 801efdc:	e8df f003 	tbb	[pc, r3]
 801efe0:	5b4d4f2c 	.word	0x5b4d4f2c
 801efe4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801efe8:	441d      	add	r5, r3
 801efea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801efee:	2b20      	cmp	r3, #32
 801eff0:	bfc1      	itttt	gt
 801eff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801eff6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801effa:	fa09 f303 	lslgt.w	r3, r9, r3
 801effe:	fa26 f000 	lsrgt.w	r0, r6, r0
 801f002:	bfda      	itte	le
 801f004:	f1c3 0320 	rsble	r3, r3, #32
 801f008:	fa06 f003 	lslle.w	r0, r6, r3
 801f00c:	4318      	orrgt	r0, r3
 801f00e:	f7e1 faa9 	bl	8000564 <__aeabi_ui2d>
 801f012:	2301      	movs	r3, #1
 801f014:	4606      	mov	r6, r0
 801f016:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801f01a:	3d01      	subs	r5, #1
 801f01c:	9310      	str	r3, [sp, #64]	; 0x40
 801f01e:	e771      	b.n	801ef04 <_dtoa_r+0xec>
 801f020:	2301      	movs	r3, #1
 801f022:	e7b6      	b.n	801ef92 <_dtoa_r+0x17a>
 801f024:	900e      	str	r0, [sp, #56]	; 0x38
 801f026:	e7b5      	b.n	801ef94 <_dtoa_r+0x17c>
 801f028:	f1ca 0300 	rsb	r3, sl, #0
 801f02c:	9306      	str	r3, [sp, #24]
 801f02e:	2300      	movs	r3, #0
 801f030:	eba8 080a 	sub.w	r8, r8, sl
 801f034:	930d      	str	r3, [sp, #52]	; 0x34
 801f036:	e7c2      	b.n	801efbe <_dtoa_r+0x1a6>
 801f038:	2300      	movs	r3, #0
 801f03a:	9308      	str	r3, [sp, #32]
 801f03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f03e:	2b00      	cmp	r3, #0
 801f040:	dc3a      	bgt.n	801f0b8 <_dtoa_r+0x2a0>
 801f042:	f04f 0901 	mov.w	r9, #1
 801f046:	f8cd 9004 	str.w	r9, [sp, #4]
 801f04a:	464b      	mov	r3, r9
 801f04c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f050:	2200      	movs	r2, #0
 801f052:	6462      	str	r2, [r4, #68]	; 0x44
 801f054:	2204      	movs	r2, #4
 801f056:	f102 0014 	add.w	r0, r2, #20
 801f05a:	4298      	cmp	r0, r3
 801f05c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801f05e:	d931      	bls.n	801f0c4 <_dtoa_r+0x2ac>
 801f060:	4620      	mov	r0, r4
 801f062:	f001 fae7 	bl	8020634 <_Balloc>
 801f066:	9000      	str	r0, [sp, #0]
 801f068:	2800      	cmp	r0, #0
 801f06a:	d14d      	bne.n	801f108 <_dtoa_r+0x2f0>
 801f06c:	4b24      	ldr	r3, [pc, #144]	; (801f100 <_dtoa_r+0x2e8>)
 801f06e:	4602      	mov	r2, r0
 801f070:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f074:	4823      	ldr	r0, [pc, #140]	; (801f104 <_dtoa_r+0x2ec>)
 801f076:	f003 fd9d 	bl	8022bb4 <__assert_func>
 801f07a:	2301      	movs	r3, #1
 801f07c:	e7dd      	b.n	801f03a <_dtoa_r+0x222>
 801f07e:	2300      	movs	r3, #0
 801f080:	9308      	str	r3, [sp, #32]
 801f082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f084:	eb0a 0903 	add.w	r9, sl, r3
 801f088:	f109 0301 	add.w	r3, r9, #1
 801f08c:	2b01      	cmp	r3, #1
 801f08e:	9301      	str	r3, [sp, #4]
 801f090:	bfb8      	it	lt
 801f092:	2301      	movlt	r3, #1
 801f094:	e7dc      	b.n	801f050 <_dtoa_r+0x238>
 801f096:	2301      	movs	r3, #1
 801f098:	e7f2      	b.n	801f080 <_dtoa_r+0x268>
 801f09a:	2501      	movs	r5, #1
 801f09c:	2300      	movs	r3, #0
 801f09e:	9305      	str	r3, [sp, #20]
 801f0a0:	9508      	str	r5, [sp, #32]
 801f0a2:	f04f 39ff 	mov.w	r9, #4294967295
 801f0a6:	2200      	movs	r2, #0
 801f0a8:	f8cd 9004 	str.w	r9, [sp, #4]
 801f0ac:	2312      	movs	r3, #18
 801f0ae:	9209      	str	r2, [sp, #36]	; 0x24
 801f0b0:	e7ce      	b.n	801f050 <_dtoa_r+0x238>
 801f0b2:	2301      	movs	r3, #1
 801f0b4:	9308      	str	r3, [sp, #32]
 801f0b6:	e7f4      	b.n	801f0a2 <_dtoa_r+0x28a>
 801f0b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f0bc:	f8cd 9004 	str.w	r9, [sp, #4]
 801f0c0:	464b      	mov	r3, r9
 801f0c2:	e7c5      	b.n	801f050 <_dtoa_r+0x238>
 801f0c4:	3101      	adds	r1, #1
 801f0c6:	6461      	str	r1, [r4, #68]	; 0x44
 801f0c8:	0052      	lsls	r2, r2, #1
 801f0ca:	e7c4      	b.n	801f056 <_dtoa_r+0x23e>
 801f0cc:	f3af 8000 	nop.w
 801f0d0:	636f4361 	.word	0x636f4361
 801f0d4:	3fd287a7 	.word	0x3fd287a7
 801f0d8:	8b60c8b3 	.word	0x8b60c8b3
 801f0dc:	3fc68a28 	.word	0x3fc68a28
 801f0e0:	509f79fb 	.word	0x509f79fb
 801f0e4:	3fd34413 	.word	0x3fd34413
 801f0e8:	7ff00000 	.word	0x7ff00000
 801f0ec:	0802941c 	.word	0x0802941c
 801f0f0:	08029420 	.word	0x08029420
 801f0f4:	0802939f 	.word	0x0802939f
 801f0f8:	3ff80000 	.word	0x3ff80000
 801f0fc:	08029528 	.word	0x08029528
 801f100:	08029429 	.word	0x08029429
 801f104:	0802943a 	.word	0x0802943a
 801f108:	9b00      	ldr	r3, [sp, #0]
 801f10a:	6423      	str	r3, [r4, #64]	; 0x40
 801f10c:	9b01      	ldr	r3, [sp, #4]
 801f10e:	2b0e      	cmp	r3, #14
 801f110:	f200 80ad 	bhi.w	801f26e <_dtoa_r+0x456>
 801f114:	2d00      	cmp	r5, #0
 801f116:	f000 80aa 	beq.w	801f26e <_dtoa_r+0x456>
 801f11a:	f1ba 0f00 	cmp.w	sl, #0
 801f11e:	dd36      	ble.n	801f18e <_dtoa_r+0x376>
 801f120:	4ac2      	ldr	r2, [pc, #776]	; (801f42c <_dtoa_r+0x614>)
 801f122:	f00a 030f 	and.w	r3, sl, #15
 801f126:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801f12a:	ed93 7b00 	vldr	d7, [r3]
 801f12e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801f132:	ea4f 172a 	mov.w	r7, sl, asr #4
 801f136:	eeb0 8a47 	vmov.f32	s16, s14
 801f13a:	eef0 8a67 	vmov.f32	s17, s15
 801f13e:	d016      	beq.n	801f16e <_dtoa_r+0x356>
 801f140:	4bbb      	ldr	r3, [pc, #748]	; (801f430 <_dtoa_r+0x618>)
 801f142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f146:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f14a:	f7e1 fbaf 	bl	80008ac <__aeabi_ddiv>
 801f14e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f152:	f007 070f 	and.w	r7, r7, #15
 801f156:	2503      	movs	r5, #3
 801f158:	4eb5      	ldr	r6, [pc, #724]	; (801f430 <_dtoa_r+0x618>)
 801f15a:	b957      	cbnz	r7, 801f172 <_dtoa_r+0x35a>
 801f15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f160:	ec53 2b18 	vmov	r2, r3, d8
 801f164:	f7e1 fba2 	bl	80008ac <__aeabi_ddiv>
 801f168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f16c:	e029      	b.n	801f1c2 <_dtoa_r+0x3aa>
 801f16e:	2502      	movs	r5, #2
 801f170:	e7f2      	b.n	801f158 <_dtoa_r+0x340>
 801f172:	07f9      	lsls	r1, r7, #31
 801f174:	d508      	bpl.n	801f188 <_dtoa_r+0x370>
 801f176:	ec51 0b18 	vmov	r0, r1, d8
 801f17a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f17e:	f7e1 fa6b 	bl	8000658 <__aeabi_dmul>
 801f182:	ec41 0b18 	vmov	d8, r0, r1
 801f186:	3501      	adds	r5, #1
 801f188:	107f      	asrs	r7, r7, #1
 801f18a:	3608      	adds	r6, #8
 801f18c:	e7e5      	b.n	801f15a <_dtoa_r+0x342>
 801f18e:	f000 80a6 	beq.w	801f2de <_dtoa_r+0x4c6>
 801f192:	f1ca 0600 	rsb	r6, sl, #0
 801f196:	4ba5      	ldr	r3, [pc, #660]	; (801f42c <_dtoa_r+0x614>)
 801f198:	4fa5      	ldr	r7, [pc, #660]	; (801f430 <_dtoa_r+0x618>)
 801f19a:	f006 020f 	and.w	r2, r6, #15
 801f19e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801f1aa:	f7e1 fa55 	bl	8000658 <__aeabi_dmul>
 801f1ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1b2:	1136      	asrs	r6, r6, #4
 801f1b4:	2300      	movs	r3, #0
 801f1b6:	2502      	movs	r5, #2
 801f1b8:	2e00      	cmp	r6, #0
 801f1ba:	f040 8085 	bne.w	801f2c8 <_dtoa_r+0x4b0>
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d1d2      	bne.n	801f168 <_dtoa_r+0x350>
 801f1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	f000 808c 	beq.w	801f2e2 <_dtoa_r+0x4ca>
 801f1ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f1ce:	4b99      	ldr	r3, [pc, #612]	; (801f434 <_dtoa_r+0x61c>)
 801f1d0:	2200      	movs	r2, #0
 801f1d2:	4630      	mov	r0, r6
 801f1d4:	4639      	mov	r1, r7
 801f1d6:	f7e1 fcb1 	bl	8000b3c <__aeabi_dcmplt>
 801f1da:	2800      	cmp	r0, #0
 801f1dc:	f000 8081 	beq.w	801f2e2 <_dtoa_r+0x4ca>
 801f1e0:	9b01      	ldr	r3, [sp, #4]
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d07d      	beq.n	801f2e2 <_dtoa_r+0x4ca>
 801f1e6:	f1b9 0f00 	cmp.w	r9, #0
 801f1ea:	dd3c      	ble.n	801f266 <_dtoa_r+0x44e>
 801f1ec:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f1f0:	9307      	str	r3, [sp, #28]
 801f1f2:	2200      	movs	r2, #0
 801f1f4:	4b90      	ldr	r3, [pc, #576]	; (801f438 <_dtoa_r+0x620>)
 801f1f6:	4630      	mov	r0, r6
 801f1f8:	4639      	mov	r1, r7
 801f1fa:	f7e1 fa2d 	bl	8000658 <__aeabi_dmul>
 801f1fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f202:	3501      	adds	r5, #1
 801f204:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801f208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f20c:	4628      	mov	r0, r5
 801f20e:	f7e1 f9b9 	bl	8000584 <__aeabi_i2d>
 801f212:	4632      	mov	r2, r6
 801f214:	463b      	mov	r3, r7
 801f216:	f7e1 fa1f 	bl	8000658 <__aeabi_dmul>
 801f21a:	4b88      	ldr	r3, [pc, #544]	; (801f43c <_dtoa_r+0x624>)
 801f21c:	2200      	movs	r2, #0
 801f21e:	f7e1 f865 	bl	80002ec <__adddf3>
 801f222:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801f226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f22a:	9303      	str	r3, [sp, #12]
 801f22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d15c      	bne.n	801f2ec <_dtoa_r+0x4d4>
 801f232:	4b83      	ldr	r3, [pc, #524]	; (801f440 <_dtoa_r+0x628>)
 801f234:	2200      	movs	r2, #0
 801f236:	4630      	mov	r0, r6
 801f238:	4639      	mov	r1, r7
 801f23a:	f7e1 f855 	bl	80002e8 <__aeabi_dsub>
 801f23e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f242:	4606      	mov	r6, r0
 801f244:	460f      	mov	r7, r1
 801f246:	f7e1 fc97 	bl	8000b78 <__aeabi_dcmpgt>
 801f24a:	2800      	cmp	r0, #0
 801f24c:	f040 8295 	bne.w	801f77a <_dtoa_r+0x962>
 801f250:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801f254:	4630      	mov	r0, r6
 801f256:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f25a:	4639      	mov	r1, r7
 801f25c:	f7e1 fc6e 	bl	8000b3c <__aeabi_dcmplt>
 801f260:	2800      	cmp	r0, #0
 801f262:	f040 8287 	bne.w	801f774 <_dtoa_r+0x95c>
 801f266:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801f26a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f26e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f270:	2b00      	cmp	r3, #0
 801f272:	f2c0 8157 	blt.w	801f524 <_dtoa_r+0x70c>
 801f276:	f1ba 0f0e 	cmp.w	sl, #14
 801f27a:	f300 8153 	bgt.w	801f524 <_dtoa_r+0x70c>
 801f27e:	4b6b      	ldr	r3, [pc, #428]	; (801f42c <_dtoa_r+0x614>)
 801f280:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801f284:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	f280 80e2 	bge.w	801f454 <_dtoa_r+0x63c>
 801f290:	9b01      	ldr	r3, [sp, #4]
 801f292:	2b00      	cmp	r3, #0
 801f294:	f300 80de 	bgt.w	801f454 <_dtoa_r+0x63c>
 801f298:	f040 826c 	bne.w	801f774 <_dtoa_r+0x95c>
 801f29c:	4b68      	ldr	r3, [pc, #416]	; (801f440 <_dtoa_r+0x628>)
 801f29e:	2200      	movs	r2, #0
 801f2a0:	4640      	mov	r0, r8
 801f2a2:	4649      	mov	r1, r9
 801f2a4:	f7e1 f9d8 	bl	8000658 <__aeabi_dmul>
 801f2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f2ac:	f7e1 fc5a 	bl	8000b64 <__aeabi_dcmpge>
 801f2b0:	9e01      	ldr	r6, [sp, #4]
 801f2b2:	4637      	mov	r7, r6
 801f2b4:	2800      	cmp	r0, #0
 801f2b6:	f040 8242 	bne.w	801f73e <_dtoa_r+0x926>
 801f2ba:	9d00      	ldr	r5, [sp, #0]
 801f2bc:	2331      	movs	r3, #49	; 0x31
 801f2be:	f805 3b01 	strb.w	r3, [r5], #1
 801f2c2:	f10a 0a01 	add.w	sl, sl, #1
 801f2c6:	e23e      	b.n	801f746 <_dtoa_r+0x92e>
 801f2c8:	07f2      	lsls	r2, r6, #31
 801f2ca:	d505      	bpl.n	801f2d8 <_dtoa_r+0x4c0>
 801f2cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f2d0:	f7e1 f9c2 	bl	8000658 <__aeabi_dmul>
 801f2d4:	3501      	adds	r5, #1
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	1076      	asrs	r6, r6, #1
 801f2da:	3708      	adds	r7, #8
 801f2dc:	e76c      	b.n	801f1b8 <_dtoa_r+0x3a0>
 801f2de:	2502      	movs	r5, #2
 801f2e0:	e76f      	b.n	801f1c2 <_dtoa_r+0x3aa>
 801f2e2:	9b01      	ldr	r3, [sp, #4]
 801f2e4:	f8cd a01c 	str.w	sl, [sp, #28]
 801f2e8:	930c      	str	r3, [sp, #48]	; 0x30
 801f2ea:	e78d      	b.n	801f208 <_dtoa_r+0x3f0>
 801f2ec:	9900      	ldr	r1, [sp, #0]
 801f2ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f2f2:	4b4e      	ldr	r3, [pc, #312]	; (801f42c <_dtoa_r+0x614>)
 801f2f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2f8:	4401      	add	r1, r0
 801f2fa:	9102      	str	r1, [sp, #8]
 801f2fc:	9908      	ldr	r1, [sp, #32]
 801f2fe:	eeb0 8a47 	vmov.f32	s16, s14
 801f302:	eef0 8a67 	vmov.f32	s17, s15
 801f306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f30a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f30e:	2900      	cmp	r1, #0
 801f310:	d045      	beq.n	801f39e <_dtoa_r+0x586>
 801f312:	494c      	ldr	r1, [pc, #304]	; (801f444 <_dtoa_r+0x62c>)
 801f314:	2000      	movs	r0, #0
 801f316:	f7e1 fac9 	bl	80008ac <__aeabi_ddiv>
 801f31a:	ec53 2b18 	vmov	r2, r3, d8
 801f31e:	f7e0 ffe3 	bl	80002e8 <__aeabi_dsub>
 801f322:	9d00      	ldr	r5, [sp, #0]
 801f324:	ec41 0b18 	vmov	d8, r0, r1
 801f328:	4639      	mov	r1, r7
 801f32a:	4630      	mov	r0, r6
 801f32c:	f7e1 fc44 	bl	8000bb8 <__aeabi_d2iz>
 801f330:	900c      	str	r0, [sp, #48]	; 0x30
 801f332:	f7e1 f927 	bl	8000584 <__aeabi_i2d>
 801f336:	4602      	mov	r2, r0
 801f338:	460b      	mov	r3, r1
 801f33a:	4630      	mov	r0, r6
 801f33c:	4639      	mov	r1, r7
 801f33e:	f7e0 ffd3 	bl	80002e8 <__aeabi_dsub>
 801f342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f344:	3330      	adds	r3, #48	; 0x30
 801f346:	f805 3b01 	strb.w	r3, [r5], #1
 801f34a:	ec53 2b18 	vmov	r2, r3, d8
 801f34e:	4606      	mov	r6, r0
 801f350:	460f      	mov	r7, r1
 801f352:	f7e1 fbf3 	bl	8000b3c <__aeabi_dcmplt>
 801f356:	2800      	cmp	r0, #0
 801f358:	d165      	bne.n	801f426 <_dtoa_r+0x60e>
 801f35a:	4632      	mov	r2, r6
 801f35c:	463b      	mov	r3, r7
 801f35e:	4935      	ldr	r1, [pc, #212]	; (801f434 <_dtoa_r+0x61c>)
 801f360:	2000      	movs	r0, #0
 801f362:	f7e0 ffc1 	bl	80002e8 <__aeabi_dsub>
 801f366:	ec53 2b18 	vmov	r2, r3, d8
 801f36a:	f7e1 fbe7 	bl	8000b3c <__aeabi_dcmplt>
 801f36e:	2800      	cmp	r0, #0
 801f370:	f040 80b8 	bne.w	801f4e4 <_dtoa_r+0x6cc>
 801f374:	9b02      	ldr	r3, [sp, #8]
 801f376:	429d      	cmp	r5, r3
 801f378:	f43f af75 	beq.w	801f266 <_dtoa_r+0x44e>
 801f37c:	4b2e      	ldr	r3, [pc, #184]	; (801f438 <_dtoa_r+0x620>)
 801f37e:	ec51 0b18 	vmov	r0, r1, d8
 801f382:	2200      	movs	r2, #0
 801f384:	f7e1 f968 	bl	8000658 <__aeabi_dmul>
 801f388:	4b2b      	ldr	r3, [pc, #172]	; (801f438 <_dtoa_r+0x620>)
 801f38a:	ec41 0b18 	vmov	d8, r0, r1
 801f38e:	2200      	movs	r2, #0
 801f390:	4630      	mov	r0, r6
 801f392:	4639      	mov	r1, r7
 801f394:	f7e1 f960 	bl	8000658 <__aeabi_dmul>
 801f398:	4606      	mov	r6, r0
 801f39a:	460f      	mov	r7, r1
 801f39c:	e7c4      	b.n	801f328 <_dtoa_r+0x510>
 801f39e:	ec51 0b17 	vmov	r0, r1, d7
 801f3a2:	f7e1 f959 	bl	8000658 <__aeabi_dmul>
 801f3a6:	9b02      	ldr	r3, [sp, #8]
 801f3a8:	9d00      	ldr	r5, [sp, #0]
 801f3aa:	930c      	str	r3, [sp, #48]	; 0x30
 801f3ac:	ec41 0b18 	vmov	d8, r0, r1
 801f3b0:	4639      	mov	r1, r7
 801f3b2:	4630      	mov	r0, r6
 801f3b4:	f7e1 fc00 	bl	8000bb8 <__aeabi_d2iz>
 801f3b8:	9011      	str	r0, [sp, #68]	; 0x44
 801f3ba:	f7e1 f8e3 	bl	8000584 <__aeabi_i2d>
 801f3be:	4602      	mov	r2, r0
 801f3c0:	460b      	mov	r3, r1
 801f3c2:	4630      	mov	r0, r6
 801f3c4:	4639      	mov	r1, r7
 801f3c6:	f7e0 ff8f 	bl	80002e8 <__aeabi_dsub>
 801f3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f3cc:	3330      	adds	r3, #48	; 0x30
 801f3ce:	f805 3b01 	strb.w	r3, [r5], #1
 801f3d2:	9b02      	ldr	r3, [sp, #8]
 801f3d4:	429d      	cmp	r5, r3
 801f3d6:	4606      	mov	r6, r0
 801f3d8:	460f      	mov	r7, r1
 801f3da:	f04f 0200 	mov.w	r2, #0
 801f3de:	d133      	bne.n	801f448 <_dtoa_r+0x630>
 801f3e0:	4b18      	ldr	r3, [pc, #96]	; (801f444 <_dtoa_r+0x62c>)
 801f3e2:	ec51 0b18 	vmov	r0, r1, d8
 801f3e6:	f7e0 ff81 	bl	80002ec <__adddf3>
 801f3ea:	4602      	mov	r2, r0
 801f3ec:	460b      	mov	r3, r1
 801f3ee:	4630      	mov	r0, r6
 801f3f0:	4639      	mov	r1, r7
 801f3f2:	f7e1 fbc1 	bl	8000b78 <__aeabi_dcmpgt>
 801f3f6:	2800      	cmp	r0, #0
 801f3f8:	d174      	bne.n	801f4e4 <_dtoa_r+0x6cc>
 801f3fa:	ec53 2b18 	vmov	r2, r3, d8
 801f3fe:	4911      	ldr	r1, [pc, #68]	; (801f444 <_dtoa_r+0x62c>)
 801f400:	2000      	movs	r0, #0
 801f402:	f7e0 ff71 	bl	80002e8 <__aeabi_dsub>
 801f406:	4602      	mov	r2, r0
 801f408:	460b      	mov	r3, r1
 801f40a:	4630      	mov	r0, r6
 801f40c:	4639      	mov	r1, r7
 801f40e:	f7e1 fb95 	bl	8000b3c <__aeabi_dcmplt>
 801f412:	2800      	cmp	r0, #0
 801f414:	f43f af27 	beq.w	801f266 <_dtoa_r+0x44e>
 801f418:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f41a:	1e6b      	subs	r3, r5, #1
 801f41c:	930c      	str	r3, [sp, #48]	; 0x30
 801f41e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f422:	2b30      	cmp	r3, #48	; 0x30
 801f424:	d0f8      	beq.n	801f418 <_dtoa_r+0x600>
 801f426:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f42a:	e049      	b.n	801f4c0 <_dtoa_r+0x6a8>
 801f42c:	08029528 	.word	0x08029528
 801f430:	08029500 	.word	0x08029500
 801f434:	3ff00000 	.word	0x3ff00000
 801f438:	40240000 	.word	0x40240000
 801f43c:	401c0000 	.word	0x401c0000
 801f440:	40140000 	.word	0x40140000
 801f444:	3fe00000 	.word	0x3fe00000
 801f448:	4baf      	ldr	r3, [pc, #700]	; (801f708 <_dtoa_r+0x8f0>)
 801f44a:	f7e1 f905 	bl	8000658 <__aeabi_dmul>
 801f44e:	4606      	mov	r6, r0
 801f450:	460f      	mov	r7, r1
 801f452:	e7ad      	b.n	801f3b0 <_dtoa_r+0x598>
 801f454:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f458:	9d00      	ldr	r5, [sp, #0]
 801f45a:	4642      	mov	r2, r8
 801f45c:	464b      	mov	r3, r9
 801f45e:	4630      	mov	r0, r6
 801f460:	4639      	mov	r1, r7
 801f462:	f7e1 fa23 	bl	80008ac <__aeabi_ddiv>
 801f466:	f7e1 fba7 	bl	8000bb8 <__aeabi_d2iz>
 801f46a:	9002      	str	r0, [sp, #8]
 801f46c:	f7e1 f88a 	bl	8000584 <__aeabi_i2d>
 801f470:	4642      	mov	r2, r8
 801f472:	464b      	mov	r3, r9
 801f474:	f7e1 f8f0 	bl	8000658 <__aeabi_dmul>
 801f478:	4602      	mov	r2, r0
 801f47a:	460b      	mov	r3, r1
 801f47c:	4630      	mov	r0, r6
 801f47e:	4639      	mov	r1, r7
 801f480:	f7e0 ff32 	bl	80002e8 <__aeabi_dsub>
 801f484:	9e02      	ldr	r6, [sp, #8]
 801f486:	9f01      	ldr	r7, [sp, #4]
 801f488:	3630      	adds	r6, #48	; 0x30
 801f48a:	f805 6b01 	strb.w	r6, [r5], #1
 801f48e:	9e00      	ldr	r6, [sp, #0]
 801f490:	1bae      	subs	r6, r5, r6
 801f492:	42b7      	cmp	r7, r6
 801f494:	4602      	mov	r2, r0
 801f496:	460b      	mov	r3, r1
 801f498:	d137      	bne.n	801f50a <_dtoa_r+0x6f2>
 801f49a:	f7e0 ff27 	bl	80002ec <__adddf3>
 801f49e:	4642      	mov	r2, r8
 801f4a0:	464b      	mov	r3, r9
 801f4a2:	4606      	mov	r6, r0
 801f4a4:	460f      	mov	r7, r1
 801f4a6:	f7e1 fb67 	bl	8000b78 <__aeabi_dcmpgt>
 801f4aa:	b9c8      	cbnz	r0, 801f4e0 <_dtoa_r+0x6c8>
 801f4ac:	4642      	mov	r2, r8
 801f4ae:	464b      	mov	r3, r9
 801f4b0:	4630      	mov	r0, r6
 801f4b2:	4639      	mov	r1, r7
 801f4b4:	f7e1 fb38 	bl	8000b28 <__aeabi_dcmpeq>
 801f4b8:	b110      	cbz	r0, 801f4c0 <_dtoa_r+0x6a8>
 801f4ba:	9b02      	ldr	r3, [sp, #8]
 801f4bc:	07d9      	lsls	r1, r3, #31
 801f4be:	d40f      	bmi.n	801f4e0 <_dtoa_r+0x6c8>
 801f4c0:	4620      	mov	r0, r4
 801f4c2:	4659      	mov	r1, fp
 801f4c4:	f001 f8db 	bl	802067e <_Bfree>
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	702b      	strb	r3, [r5, #0]
 801f4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f4ce:	f10a 0001 	add.w	r0, sl, #1
 801f4d2:	6018      	str	r0, [r3, #0]
 801f4d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	f43f acd9 	beq.w	801ee8e <_dtoa_r+0x76>
 801f4dc:	601d      	str	r5, [r3, #0]
 801f4de:	e4d6      	b.n	801ee8e <_dtoa_r+0x76>
 801f4e0:	f8cd a01c 	str.w	sl, [sp, #28]
 801f4e4:	462b      	mov	r3, r5
 801f4e6:	461d      	mov	r5, r3
 801f4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f4ec:	2a39      	cmp	r2, #57	; 0x39
 801f4ee:	d108      	bne.n	801f502 <_dtoa_r+0x6ea>
 801f4f0:	9a00      	ldr	r2, [sp, #0]
 801f4f2:	429a      	cmp	r2, r3
 801f4f4:	d1f7      	bne.n	801f4e6 <_dtoa_r+0x6ce>
 801f4f6:	9a07      	ldr	r2, [sp, #28]
 801f4f8:	9900      	ldr	r1, [sp, #0]
 801f4fa:	3201      	adds	r2, #1
 801f4fc:	9207      	str	r2, [sp, #28]
 801f4fe:	2230      	movs	r2, #48	; 0x30
 801f500:	700a      	strb	r2, [r1, #0]
 801f502:	781a      	ldrb	r2, [r3, #0]
 801f504:	3201      	adds	r2, #1
 801f506:	701a      	strb	r2, [r3, #0]
 801f508:	e78d      	b.n	801f426 <_dtoa_r+0x60e>
 801f50a:	4b7f      	ldr	r3, [pc, #508]	; (801f708 <_dtoa_r+0x8f0>)
 801f50c:	2200      	movs	r2, #0
 801f50e:	f7e1 f8a3 	bl	8000658 <__aeabi_dmul>
 801f512:	2200      	movs	r2, #0
 801f514:	2300      	movs	r3, #0
 801f516:	4606      	mov	r6, r0
 801f518:	460f      	mov	r7, r1
 801f51a:	f7e1 fb05 	bl	8000b28 <__aeabi_dcmpeq>
 801f51e:	2800      	cmp	r0, #0
 801f520:	d09b      	beq.n	801f45a <_dtoa_r+0x642>
 801f522:	e7cd      	b.n	801f4c0 <_dtoa_r+0x6a8>
 801f524:	9a08      	ldr	r2, [sp, #32]
 801f526:	2a00      	cmp	r2, #0
 801f528:	f000 80c4 	beq.w	801f6b4 <_dtoa_r+0x89c>
 801f52c:	9a05      	ldr	r2, [sp, #20]
 801f52e:	2a01      	cmp	r2, #1
 801f530:	f300 80a8 	bgt.w	801f684 <_dtoa_r+0x86c>
 801f534:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f536:	2a00      	cmp	r2, #0
 801f538:	f000 80a0 	beq.w	801f67c <_dtoa_r+0x864>
 801f53c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f540:	9e06      	ldr	r6, [sp, #24]
 801f542:	4645      	mov	r5, r8
 801f544:	9a04      	ldr	r2, [sp, #16]
 801f546:	2101      	movs	r1, #1
 801f548:	441a      	add	r2, r3
 801f54a:	4620      	mov	r0, r4
 801f54c:	4498      	add	r8, r3
 801f54e:	9204      	str	r2, [sp, #16]
 801f550:	f001 f938 	bl	80207c4 <__i2b>
 801f554:	4607      	mov	r7, r0
 801f556:	2d00      	cmp	r5, #0
 801f558:	dd0b      	ble.n	801f572 <_dtoa_r+0x75a>
 801f55a:	9b04      	ldr	r3, [sp, #16]
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	dd08      	ble.n	801f572 <_dtoa_r+0x75a>
 801f560:	42ab      	cmp	r3, r5
 801f562:	9a04      	ldr	r2, [sp, #16]
 801f564:	bfa8      	it	ge
 801f566:	462b      	movge	r3, r5
 801f568:	eba8 0803 	sub.w	r8, r8, r3
 801f56c:	1aed      	subs	r5, r5, r3
 801f56e:	1ad3      	subs	r3, r2, r3
 801f570:	9304      	str	r3, [sp, #16]
 801f572:	9b06      	ldr	r3, [sp, #24]
 801f574:	b1fb      	cbz	r3, 801f5b6 <_dtoa_r+0x79e>
 801f576:	9b08      	ldr	r3, [sp, #32]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	f000 809f 	beq.w	801f6bc <_dtoa_r+0x8a4>
 801f57e:	2e00      	cmp	r6, #0
 801f580:	dd11      	ble.n	801f5a6 <_dtoa_r+0x78e>
 801f582:	4639      	mov	r1, r7
 801f584:	4632      	mov	r2, r6
 801f586:	4620      	mov	r0, r4
 801f588:	f001 f9d8 	bl	802093c <__pow5mult>
 801f58c:	465a      	mov	r2, fp
 801f58e:	4601      	mov	r1, r0
 801f590:	4607      	mov	r7, r0
 801f592:	4620      	mov	r0, r4
 801f594:	f001 f92c 	bl	80207f0 <__multiply>
 801f598:	4659      	mov	r1, fp
 801f59a:	9007      	str	r0, [sp, #28]
 801f59c:	4620      	mov	r0, r4
 801f59e:	f001 f86e 	bl	802067e <_Bfree>
 801f5a2:	9b07      	ldr	r3, [sp, #28]
 801f5a4:	469b      	mov	fp, r3
 801f5a6:	9b06      	ldr	r3, [sp, #24]
 801f5a8:	1b9a      	subs	r2, r3, r6
 801f5aa:	d004      	beq.n	801f5b6 <_dtoa_r+0x79e>
 801f5ac:	4659      	mov	r1, fp
 801f5ae:	4620      	mov	r0, r4
 801f5b0:	f001 f9c4 	bl	802093c <__pow5mult>
 801f5b4:	4683      	mov	fp, r0
 801f5b6:	2101      	movs	r1, #1
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f001 f903 	bl	80207c4 <__i2b>
 801f5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	4606      	mov	r6, r0
 801f5c4:	dd7c      	ble.n	801f6c0 <_dtoa_r+0x8a8>
 801f5c6:	461a      	mov	r2, r3
 801f5c8:	4601      	mov	r1, r0
 801f5ca:	4620      	mov	r0, r4
 801f5cc:	f001 f9b6 	bl	802093c <__pow5mult>
 801f5d0:	9b05      	ldr	r3, [sp, #20]
 801f5d2:	2b01      	cmp	r3, #1
 801f5d4:	4606      	mov	r6, r0
 801f5d6:	dd76      	ble.n	801f6c6 <_dtoa_r+0x8ae>
 801f5d8:	2300      	movs	r3, #0
 801f5da:	9306      	str	r3, [sp, #24]
 801f5dc:	6933      	ldr	r3, [r6, #16]
 801f5de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f5e2:	6918      	ldr	r0, [r3, #16]
 801f5e4:	f001 f89e 	bl	8020724 <__hi0bits>
 801f5e8:	f1c0 0020 	rsb	r0, r0, #32
 801f5ec:	9b04      	ldr	r3, [sp, #16]
 801f5ee:	4418      	add	r0, r3
 801f5f0:	f010 001f 	ands.w	r0, r0, #31
 801f5f4:	f000 8086 	beq.w	801f704 <_dtoa_r+0x8ec>
 801f5f8:	f1c0 0320 	rsb	r3, r0, #32
 801f5fc:	2b04      	cmp	r3, #4
 801f5fe:	dd7f      	ble.n	801f700 <_dtoa_r+0x8e8>
 801f600:	f1c0 001c 	rsb	r0, r0, #28
 801f604:	9b04      	ldr	r3, [sp, #16]
 801f606:	4403      	add	r3, r0
 801f608:	4480      	add	r8, r0
 801f60a:	4405      	add	r5, r0
 801f60c:	9304      	str	r3, [sp, #16]
 801f60e:	f1b8 0f00 	cmp.w	r8, #0
 801f612:	dd05      	ble.n	801f620 <_dtoa_r+0x808>
 801f614:	4659      	mov	r1, fp
 801f616:	4642      	mov	r2, r8
 801f618:	4620      	mov	r0, r4
 801f61a:	f001 f9cf 	bl	80209bc <__lshift>
 801f61e:	4683      	mov	fp, r0
 801f620:	9b04      	ldr	r3, [sp, #16]
 801f622:	2b00      	cmp	r3, #0
 801f624:	dd05      	ble.n	801f632 <_dtoa_r+0x81a>
 801f626:	4631      	mov	r1, r6
 801f628:	461a      	mov	r2, r3
 801f62a:	4620      	mov	r0, r4
 801f62c:	f001 f9c6 	bl	80209bc <__lshift>
 801f630:	4606      	mov	r6, r0
 801f632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f634:	2b00      	cmp	r3, #0
 801f636:	d069      	beq.n	801f70c <_dtoa_r+0x8f4>
 801f638:	4631      	mov	r1, r6
 801f63a:	4658      	mov	r0, fp
 801f63c:	f001 fa2a 	bl	8020a94 <__mcmp>
 801f640:	2800      	cmp	r0, #0
 801f642:	da63      	bge.n	801f70c <_dtoa_r+0x8f4>
 801f644:	2300      	movs	r3, #0
 801f646:	4659      	mov	r1, fp
 801f648:	220a      	movs	r2, #10
 801f64a:	4620      	mov	r0, r4
 801f64c:	f001 f820 	bl	8020690 <__multadd>
 801f650:	9b08      	ldr	r3, [sp, #32]
 801f652:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f656:	4683      	mov	fp, r0
 801f658:	2b00      	cmp	r3, #0
 801f65a:	f000 818e 	beq.w	801f97a <_dtoa_r+0xb62>
 801f65e:	4639      	mov	r1, r7
 801f660:	2300      	movs	r3, #0
 801f662:	220a      	movs	r2, #10
 801f664:	4620      	mov	r0, r4
 801f666:	f001 f813 	bl	8020690 <__multadd>
 801f66a:	f1b9 0f00 	cmp.w	r9, #0
 801f66e:	4607      	mov	r7, r0
 801f670:	f300 808e 	bgt.w	801f790 <_dtoa_r+0x978>
 801f674:	9b05      	ldr	r3, [sp, #20]
 801f676:	2b02      	cmp	r3, #2
 801f678:	dc50      	bgt.n	801f71c <_dtoa_r+0x904>
 801f67a:	e089      	b.n	801f790 <_dtoa_r+0x978>
 801f67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f67e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f682:	e75d      	b.n	801f540 <_dtoa_r+0x728>
 801f684:	9b01      	ldr	r3, [sp, #4]
 801f686:	1e5e      	subs	r6, r3, #1
 801f688:	9b06      	ldr	r3, [sp, #24]
 801f68a:	42b3      	cmp	r3, r6
 801f68c:	bfbf      	itttt	lt
 801f68e:	9b06      	ldrlt	r3, [sp, #24]
 801f690:	9606      	strlt	r6, [sp, #24]
 801f692:	1af2      	sublt	r2, r6, r3
 801f694:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f696:	bfb6      	itet	lt
 801f698:	189b      	addlt	r3, r3, r2
 801f69a:	1b9e      	subge	r6, r3, r6
 801f69c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f69e:	9b01      	ldr	r3, [sp, #4]
 801f6a0:	bfb8      	it	lt
 801f6a2:	2600      	movlt	r6, #0
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	bfb5      	itete	lt
 801f6a8:	eba8 0503 	sublt.w	r5, r8, r3
 801f6ac:	9b01      	ldrge	r3, [sp, #4]
 801f6ae:	2300      	movlt	r3, #0
 801f6b0:	4645      	movge	r5, r8
 801f6b2:	e747      	b.n	801f544 <_dtoa_r+0x72c>
 801f6b4:	9e06      	ldr	r6, [sp, #24]
 801f6b6:	9f08      	ldr	r7, [sp, #32]
 801f6b8:	4645      	mov	r5, r8
 801f6ba:	e74c      	b.n	801f556 <_dtoa_r+0x73e>
 801f6bc:	9a06      	ldr	r2, [sp, #24]
 801f6be:	e775      	b.n	801f5ac <_dtoa_r+0x794>
 801f6c0:	9b05      	ldr	r3, [sp, #20]
 801f6c2:	2b01      	cmp	r3, #1
 801f6c4:	dc18      	bgt.n	801f6f8 <_dtoa_r+0x8e0>
 801f6c6:	9b02      	ldr	r3, [sp, #8]
 801f6c8:	b9b3      	cbnz	r3, 801f6f8 <_dtoa_r+0x8e0>
 801f6ca:	9b03      	ldr	r3, [sp, #12]
 801f6cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f6d0:	b9a3      	cbnz	r3, 801f6fc <_dtoa_r+0x8e4>
 801f6d2:	9b03      	ldr	r3, [sp, #12]
 801f6d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f6d8:	0d1b      	lsrs	r3, r3, #20
 801f6da:	051b      	lsls	r3, r3, #20
 801f6dc:	b12b      	cbz	r3, 801f6ea <_dtoa_r+0x8d2>
 801f6de:	9b04      	ldr	r3, [sp, #16]
 801f6e0:	3301      	adds	r3, #1
 801f6e2:	9304      	str	r3, [sp, #16]
 801f6e4:	f108 0801 	add.w	r8, r8, #1
 801f6e8:	2301      	movs	r3, #1
 801f6ea:	9306      	str	r3, [sp, #24]
 801f6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	f47f af74 	bne.w	801f5dc <_dtoa_r+0x7c4>
 801f6f4:	2001      	movs	r0, #1
 801f6f6:	e779      	b.n	801f5ec <_dtoa_r+0x7d4>
 801f6f8:	2300      	movs	r3, #0
 801f6fa:	e7f6      	b.n	801f6ea <_dtoa_r+0x8d2>
 801f6fc:	9b02      	ldr	r3, [sp, #8]
 801f6fe:	e7f4      	b.n	801f6ea <_dtoa_r+0x8d2>
 801f700:	d085      	beq.n	801f60e <_dtoa_r+0x7f6>
 801f702:	4618      	mov	r0, r3
 801f704:	301c      	adds	r0, #28
 801f706:	e77d      	b.n	801f604 <_dtoa_r+0x7ec>
 801f708:	40240000 	.word	0x40240000
 801f70c:	9b01      	ldr	r3, [sp, #4]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	dc38      	bgt.n	801f784 <_dtoa_r+0x96c>
 801f712:	9b05      	ldr	r3, [sp, #20]
 801f714:	2b02      	cmp	r3, #2
 801f716:	dd35      	ble.n	801f784 <_dtoa_r+0x96c>
 801f718:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f71c:	f1b9 0f00 	cmp.w	r9, #0
 801f720:	d10d      	bne.n	801f73e <_dtoa_r+0x926>
 801f722:	4631      	mov	r1, r6
 801f724:	464b      	mov	r3, r9
 801f726:	2205      	movs	r2, #5
 801f728:	4620      	mov	r0, r4
 801f72a:	f000 ffb1 	bl	8020690 <__multadd>
 801f72e:	4601      	mov	r1, r0
 801f730:	4606      	mov	r6, r0
 801f732:	4658      	mov	r0, fp
 801f734:	f001 f9ae 	bl	8020a94 <__mcmp>
 801f738:	2800      	cmp	r0, #0
 801f73a:	f73f adbe 	bgt.w	801f2ba <_dtoa_r+0x4a2>
 801f73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f740:	9d00      	ldr	r5, [sp, #0]
 801f742:	ea6f 0a03 	mvn.w	sl, r3
 801f746:	f04f 0800 	mov.w	r8, #0
 801f74a:	4631      	mov	r1, r6
 801f74c:	4620      	mov	r0, r4
 801f74e:	f000 ff96 	bl	802067e <_Bfree>
 801f752:	2f00      	cmp	r7, #0
 801f754:	f43f aeb4 	beq.w	801f4c0 <_dtoa_r+0x6a8>
 801f758:	f1b8 0f00 	cmp.w	r8, #0
 801f75c:	d005      	beq.n	801f76a <_dtoa_r+0x952>
 801f75e:	45b8      	cmp	r8, r7
 801f760:	d003      	beq.n	801f76a <_dtoa_r+0x952>
 801f762:	4641      	mov	r1, r8
 801f764:	4620      	mov	r0, r4
 801f766:	f000 ff8a 	bl	802067e <_Bfree>
 801f76a:	4639      	mov	r1, r7
 801f76c:	4620      	mov	r0, r4
 801f76e:	f000 ff86 	bl	802067e <_Bfree>
 801f772:	e6a5      	b.n	801f4c0 <_dtoa_r+0x6a8>
 801f774:	2600      	movs	r6, #0
 801f776:	4637      	mov	r7, r6
 801f778:	e7e1      	b.n	801f73e <_dtoa_r+0x926>
 801f77a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f77c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f780:	4637      	mov	r7, r6
 801f782:	e59a      	b.n	801f2ba <_dtoa_r+0x4a2>
 801f784:	9b08      	ldr	r3, [sp, #32]
 801f786:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	f000 80fc 	beq.w	801f988 <_dtoa_r+0xb70>
 801f790:	2d00      	cmp	r5, #0
 801f792:	dd05      	ble.n	801f7a0 <_dtoa_r+0x988>
 801f794:	4639      	mov	r1, r7
 801f796:	462a      	mov	r2, r5
 801f798:	4620      	mov	r0, r4
 801f79a:	f001 f90f 	bl	80209bc <__lshift>
 801f79e:	4607      	mov	r7, r0
 801f7a0:	9b06      	ldr	r3, [sp, #24]
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d05b      	beq.n	801f85e <_dtoa_r+0xa46>
 801f7a6:	6879      	ldr	r1, [r7, #4]
 801f7a8:	4620      	mov	r0, r4
 801f7aa:	f000 ff43 	bl	8020634 <_Balloc>
 801f7ae:	4605      	mov	r5, r0
 801f7b0:	b920      	cbnz	r0, 801f7bc <_dtoa_r+0x9a4>
 801f7b2:	4b80      	ldr	r3, [pc, #512]	; (801f9b4 <_dtoa_r+0xb9c>)
 801f7b4:	4602      	mov	r2, r0
 801f7b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f7ba:	e45b      	b.n	801f074 <_dtoa_r+0x25c>
 801f7bc:	693a      	ldr	r2, [r7, #16]
 801f7be:	3202      	adds	r2, #2
 801f7c0:	0092      	lsls	r2, r2, #2
 801f7c2:	f107 010c 	add.w	r1, r7, #12
 801f7c6:	300c      	adds	r0, #12
 801f7c8:	f7fb ff9a 	bl	801b700 <memcpy>
 801f7cc:	2201      	movs	r2, #1
 801f7ce:	4629      	mov	r1, r5
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	f001 f8f3 	bl	80209bc <__lshift>
 801f7d6:	9b00      	ldr	r3, [sp, #0]
 801f7d8:	3301      	adds	r3, #1
 801f7da:	9301      	str	r3, [sp, #4]
 801f7dc:	9b00      	ldr	r3, [sp, #0]
 801f7de:	444b      	add	r3, r9
 801f7e0:	9307      	str	r3, [sp, #28]
 801f7e2:	9b02      	ldr	r3, [sp, #8]
 801f7e4:	f003 0301 	and.w	r3, r3, #1
 801f7e8:	46b8      	mov	r8, r7
 801f7ea:	9306      	str	r3, [sp, #24]
 801f7ec:	4607      	mov	r7, r0
 801f7ee:	9b01      	ldr	r3, [sp, #4]
 801f7f0:	4631      	mov	r1, r6
 801f7f2:	3b01      	subs	r3, #1
 801f7f4:	4658      	mov	r0, fp
 801f7f6:	9302      	str	r3, [sp, #8]
 801f7f8:	f7ff fa80 	bl	801ecfc <quorem>
 801f7fc:	4603      	mov	r3, r0
 801f7fe:	3330      	adds	r3, #48	; 0x30
 801f800:	9004      	str	r0, [sp, #16]
 801f802:	4641      	mov	r1, r8
 801f804:	4658      	mov	r0, fp
 801f806:	9308      	str	r3, [sp, #32]
 801f808:	f001 f944 	bl	8020a94 <__mcmp>
 801f80c:	463a      	mov	r2, r7
 801f80e:	4681      	mov	r9, r0
 801f810:	4631      	mov	r1, r6
 801f812:	4620      	mov	r0, r4
 801f814:	f001 f95a 	bl	8020acc <__mdiff>
 801f818:	68c2      	ldr	r2, [r0, #12]
 801f81a:	9b08      	ldr	r3, [sp, #32]
 801f81c:	4605      	mov	r5, r0
 801f81e:	bb02      	cbnz	r2, 801f862 <_dtoa_r+0xa4a>
 801f820:	4601      	mov	r1, r0
 801f822:	4658      	mov	r0, fp
 801f824:	f001 f936 	bl	8020a94 <__mcmp>
 801f828:	9b08      	ldr	r3, [sp, #32]
 801f82a:	4602      	mov	r2, r0
 801f82c:	4629      	mov	r1, r5
 801f82e:	4620      	mov	r0, r4
 801f830:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f834:	f000 ff23 	bl	802067e <_Bfree>
 801f838:	9b05      	ldr	r3, [sp, #20]
 801f83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f83c:	9d01      	ldr	r5, [sp, #4]
 801f83e:	ea43 0102 	orr.w	r1, r3, r2
 801f842:	9b06      	ldr	r3, [sp, #24]
 801f844:	430b      	orrs	r3, r1
 801f846:	9b08      	ldr	r3, [sp, #32]
 801f848:	d10d      	bne.n	801f866 <_dtoa_r+0xa4e>
 801f84a:	2b39      	cmp	r3, #57	; 0x39
 801f84c:	d029      	beq.n	801f8a2 <_dtoa_r+0xa8a>
 801f84e:	f1b9 0f00 	cmp.w	r9, #0
 801f852:	dd01      	ble.n	801f858 <_dtoa_r+0xa40>
 801f854:	9b04      	ldr	r3, [sp, #16]
 801f856:	3331      	adds	r3, #49	; 0x31
 801f858:	9a02      	ldr	r2, [sp, #8]
 801f85a:	7013      	strb	r3, [r2, #0]
 801f85c:	e775      	b.n	801f74a <_dtoa_r+0x932>
 801f85e:	4638      	mov	r0, r7
 801f860:	e7b9      	b.n	801f7d6 <_dtoa_r+0x9be>
 801f862:	2201      	movs	r2, #1
 801f864:	e7e2      	b.n	801f82c <_dtoa_r+0xa14>
 801f866:	f1b9 0f00 	cmp.w	r9, #0
 801f86a:	db06      	blt.n	801f87a <_dtoa_r+0xa62>
 801f86c:	9905      	ldr	r1, [sp, #20]
 801f86e:	ea41 0909 	orr.w	r9, r1, r9
 801f872:	9906      	ldr	r1, [sp, #24]
 801f874:	ea59 0101 	orrs.w	r1, r9, r1
 801f878:	d120      	bne.n	801f8bc <_dtoa_r+0xaa4>
 801f87a:	2a00      	cmp	r2, #0
 801f87c:	ddec      	ble.n	801f858 <_dtoa_r+0xa40>
 801f87e:	4659      	mov	r1, fp
 801f880:	2201      	movs	r2, #1
 801f882:	4620      	mov	r0, r4
 801f884:	9301      	str	r3, [sp, #4]
 801f886:	f001 f899 	bl	80209bc <__lshift>
 801f88a:	4631      	mov	r1, r6
 801f88c:	4683      	mov	fp, r0
 801f88e:	f001 f901 	bl	8020a94 <__mcmp>
 801f892:	2800      	cmp	r0, #0
 801f894:	9b01      	ldr	r3, [sp, #4]
 801f896:	dc02      	bgt.n	801f89e <_dtoa_r+0xa86>
 801f898:	d1de      	bne.n	801f858 <_dtoa_r+0xa40>
 801f89a:	07da      	lsls	r2, r3, #31
 801f89c:	d5dc      	bpl.n	801f858 <_dtoa_r+0xa40>
 801f89e:	2b39      	cmp	r3, #57	; 0x39
 801f8a0:	d1d8      	bne.n	801f854 <_dtoa_r+0xa3c>
 801f8a2:	9a02      	ldr	r2, [sp, #8]
 801f8a4:	2339      	movs	r3, #57	; 0x39
 801f8a6:	7013      	strb	r3, [r2, #0]
 801f8a8:	462b      	mov	r3, r5
 801f8aa:	461d      	mov	r5, r3
 801f8ac:	3b01      	subs	r3, #1
 801f8ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f8b2:	2a39      	cmp	r2, #57	; 0x39
 801f8b4:	d050      	beq.n	801f958 <_dtoa_r+0xb40>
 801f8b6:	3201      	adds	r2, #1
 801f8b8:	701a      	strb	r2, [r3, #0]
 801f8ba:	e746      	b.n	801f74a <_dtoa_r+0x932>
 801f8bc:	2a00      	cmp	r2, #0
 801f8be:	dd03      	ble.n	801f8c8 <_dtoa_r+0xab0>
 801f8c0:	2b39      	cmp	r3, #57	; 0x39
 801f8c2:	d0ee      	beq.n	801f8a2 <_dtoa_r+0xa8a>
 801f8c4:	3301      	adds	r3, #1
 801f8c6:	e7c7      	b.n	801f858 <_dtoa_r+0xa40>
 801f8c8:	9a01      	ldr	r2, [sp, #4]
 801f8ca:	9907      	ldr	r1, [sp, #28]
 801f8cc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f8d0:	428a      	cmp	r2, r1
 801f8d2:	d02a      	beq.n	801f92a <_dtoa_r+0xb12>
 801f8d4:	4659      	mov	r1, fp
 801f8d6:	2300      	movs	r3, #0
 801f8d8:	220a      	movs	r2, #10
 801f8da:	4620      	mov	r0, r4
 801f8dc:	f000 fed8 	bl	8020690 <__multadd>
 801f8e0:	45b8      	cmp	r8, r7
 801f8e2:	4683      	mov	fp, r0
 801f8e4:	f04f 0300 	mov.w	r3, #0
 801f8e8:	f04f 020a 	mov.w	r2, #10
 801f8ec:	4641      	mov	r1, r8
 801f8ee:	4620      	mov	r0, r4
 801f8f0:	d107      	bne.n	801f902 <_dtoa_r+0xaea>
 801f8f2:	f000 fecd 	bl	8020690 <__multadd>
 801f8f6:	4680      	mov	r8, r0
 801f8f8:	4607      	mov	r7, r0
 801f8fa:	9b01      	ldr	r3, [sp, #4]
 801f8fc:	3301      	adds	r3, #1
 801f8fe:	9301      	str	r3, [sp, #4]
 801f900:	e775      	b.n	801f7ee <_dtoa_r+0x9d6>
 801f902:	f000 fec5 	bl	8020690 <__multadd>
 801f906:	4639      	mov	r1, r7
 801f908:	4680      	mov	r8, r0
 801f90a:	2300      	movs	r3, #0
 801f90c:	220a      	movs	r2, #10
 801f90e:	4620      	mov	r0, r4
 801f910:	f000 febe 	bl	8020690 <__multadd>
 801f914:	4607      	mov	r7, r0
 801f916:	e7f0      	b.n	801f8fa <_dtoa_r+0xae2>
 801f918:	f1b9 0f00 	cmp.w	r9, #0
 801f91c:	9a00      	ldr	r2, [sp, #0]
 801f91e:	bfcc      	ite	gt
 801f920:	464d      	movgt	r5, r9
 801f922:	2501      	movle	r5, #1
 801f924:	4415      	add	r5, r2
 801f926:	f04f 0800 	mov.w	r8, #0
 801f92a:	4659      	mov	r1, fp
 801f92c:	2201      	movs	r2, #1
 801f92e:	4620      	mov	r0, r4
 801f930:	9301      	str	r3, [sp, #4]
 801f932:	f001 f843 	bl	80209bc <__lshift>
 801f936:	4631      	mov	r1, r6
 801f938:	4683      	mov	fp, r0
 801f93a:	f001 f8ab 	bl	8020a94 <__mcmp>
 801f93e:	2800      	cmp	r0, #0
 801f940:	dcb2      	bgt.n	801f8a8 <_dtoa_r+0xa90>
 801f942:	d102      	bne.n	801f94a <_dtoa_r+0xb32>
 801f944:	9b01      	ldr	r3, [sp, #4]
 801f946:	07db      	lsls	r3, r3, #31
 801f948:	d4ae      	bmi.n	801f8a8 <_dtoa_r+0xa90>
 801f94a:	462b      	mov	r3, r5
 801f94c:	461d      	mov	r5, r3
 801f94e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f952:	2a30      	cmp	r2, #48	; 0x30
 801f954:	d0fa      	beq.n	801f94c <_dtoa_r+0xb34>
 801f956:	e6f8      	b.n	801f74a <_dtoa_r+0x932>
 801f958:	9a00      	ldr	r2, [sp, #0]
 801f95a:	429a      	cmp	r2, r3
 801f95c:	d1a5      	bne.n	801f8aa <_dtoa_r+0xa92>
 801f95e:	f10a 0a01 	add.w	sl, sl, #1
 801f962:	2331      	movs	r3, #49	; 0x31
 801f964:	e779      	b.n	801f85a <_dtoa_r+0xa42>
 801f966:	4b14      	ldr	r3, [pc, #80]	; (801f9b8 <_dtoa_r+0xba0>)
 801f968:	f7ff bab1 	b.w	801eece <_dtoa_r+0xb6>
 801f96c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f96e:	2b00      	cmp	r3, #0
 801f970:	f47f aa93 	bne.w	801ee9a <_dtoa_r+0x82>
 801f974:	4b11      	ldr	r3, [pc, #68]	; (801f9bc <_dtoa_r+0xba4>)
 801f976:	f7ff baaa 	b.w	801eece <_dtoa_r+0xb6>
 801f97a:	f1b9 0f00 	cmp.w	r9, #0
 801f97e:	dc03      	bgt.n	801f988 <_dtoa_r+0xb70>
 801f980:	9b05      	ldr	r3, [sp, #20]
 801f982:	2b02      	cmp	r3, #2
 801f984:	f73f aeca 	bgt.w	801f71c <_dtoa_r+0x904>
 801f988:	9d00      	ldr	r5, [sp, #0]
 801f98a:	4631      	mov	r1, r6
 801f98c:	4658      	mov	r0, fp
 801f98e:	f7ff f9b5 	bl	801ecfc <quorem>
 801f992:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f996:	f805 3b01 	strb.w	r3, [r5], #1
 801f99a:	9a00      	ldr	r2, [sp, #0]
 801f99c:	1aaa      	subs	r2, r5, r2
 801f99e:	4591      	cmp	r9, r2
 801f9a0:	ddba      	ble.n	801f918 <_dtoa_r+0xb00>
 801f9a2:	4659      	mov	r1, fp
 801f9a4:	2300      	movs	r3, #0
 801f9a6:	220a      	movs	r2, #10
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	f000 fe71 	bl	8020690 <__multadd>
 801f9ae:	4683      	mov	fp, r0
 801f9b0:	e7eb      	b.n	801f98a <_dtoa_r+0xb72>
 801f9b2:	bf00      	nop
 801f9b4:	08029429 	.word	0x08029429
 801f9b8:	0802939e 	.word	0x0802939e
 801f9bc:	08029420 	.word	0x08029420

0801f9c0 <__errno>:
 801f9c0:	4b01      	ldr	r3, [pc, #4]	; (801f9c8 <__errno+0x8>)
 801f9c2:	6818      	ldr	r0, [r3, #0]
 801f9c4:	4770      	bx	lr
 801f9c6:	bf00      	nop
 801f9c8:	20000038 	.word	0x20000038

0801f9cc <__sflush_r>:
 801f9cc:	898b      	ldrh	r3, [r1, #12]
 801f9ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9d6:	4605      	mov	r5, r0
 801f9d8:	0718      	lsls	r0, r3, #28
 801f9da:	460c      	mov	r4, r1
 801f9dc:	d45f      	bmi.n	801fa9e <__sflush_r+0xd2>
 801f9de:	684b      	ldr	r3, [r1, #4]
 801f9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	818a      	strh	r2, [r1, #12]
 801f9e8:	dc05      	bgt.n	801f9f6 <__sflush_r+0x2a>
 801f9ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	dc02      	bgt.n	801f9f6 <__sflush_r+0x2a>
 801f9f0:	2000      	movs	r0, #0
 801f9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f9f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f9f8:	2e00      	cmp	r6, #0
 801f9fa:	d0f9      	beq.n	801f9f0 <__sflush_r+0x24>
 801f9fc:	2300      	movs	r3, #0
 801f9fe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fa02:	682f      	ldr	r7, [r5, #0]
 801fa04:	602b      	str	r3, [r5, #0]
 801fa06:	d036      	beq.n	801fa76 <__sflush_r+0xaa>
 801fa08:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801fa0a:	89a3      	ldrh	r3, [r4, #12]
 801fa0c:	075a      	lsls	r2, r3, #29
 801fa0e:	d505      	bpl.n	801fa1c <__sflush_r+0x50>
 801fa10:	6863      	ldr	r3, [r4, #4]
 801fa12:	1ac0      	subs	r0, r0, r3
 801fa14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fa16:	b10b      	cbz	r3, 801fa1c <__sflush_r+0x50>
 801fa18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fa1a:	1ac0      	subs	r0, r0, r3
 801fa1c:	2300      	movs	r3, #0
 801fa1e:	4602      	mov	r2, r0
 801fa20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fa22:	69e1      	ldr	r1, [r4, #28]
 801fa24:	4628      	mov	r0, r5
 801fa26:	47b0      	blx	r6
 801fa28:	1c43      	adds	r3, r0, #1
 801fa2a:	89a3      	ldrh	r3, [r4, #12]
 801fa2c:	d106      	bne.n	801fa3c <__sflush_r+0x70>
 801fa2e:	6829      	ldr	r1, [r5, #0]
 801fa30:	291d      	cmp	r1, #29
 801fa32:	d830      	bhi.n	801fa96 <__sflush_r+0xca>
 801fa34:	4a2b      	ldr	r2, [pc, #172]	; (801fae4 <__sflush_r+0x118>)
 801fa36:	40ca      	lsrs	r2, r1
 801fa38:	07d6      	lsls	r6, r2, #31
 801fa3a:	d52c      	bpl.n	801fa96 <__sflush_r+0xca>
 801fa3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fa40:	b21b      	sxth	r3, r3
 801fa42:	2200      	movs	r2, #0
 801fa44:	6062      	str	r2, [r4, #4]
 801fa46:	04d9      	lsls	r1, r3, #19
 801fa48:	6922      	ldr	r2, [r4, #16]
 801fa4a:	81a3      	strh	r3, [r4, #12]
 801fa4c:	6022      	str	r2, [r4, #0]
 801fa4e:	d504      	bpl.n	801fa5a <__sflush_r+0x8e>
 801fa50:	1c42      	adds	r2, r0, #1
 801fa52:	d101      	bne.n	801fa58 <__sflush_r+0x8c>
 801fa54:	682b      	ldr	r3, [r5, #0]
 801fa56:	b903      	cbnz	r3, 801fa5a <__sflush_r+0x8e>
 801fa58:	6520      	str	r0, [r4, #80]	; 0x50
 801fa5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fa5c:	602f      	str	r7, [r5, #0]
 801fa5e:	2900      	cmp	r1, #0
 801fa60:	d0c6      	beq.n	801f9f0 <__sflush_r+0x24>
 801fa62:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801fa66:	4299      	cmp	r1, r3
 801fa68:	d002      	beq.n	801fa70 <__sflush_r+0xa4>
 801fa6a:	4628      	mov	r0, r5
 801fa6c:	f000 f938 	bl	801fce0 <_free_r>
 801fa70:	2000      	movs	r0, #0
 801fa72:	6320      	str	r0, [r4, #48]	; 0x30
 801fa74:	e7bd      	b.n	801f9f2 <__sflush_r+0x26>
 801fa76:	69e1      	ldr	r1, [r4, #28]
 801fa78:	2301      	movs	r3, #1
 801fa7a:	4628      	mov	r0, r5
 801fa7c:	47b0      	blx	r6
 801fa7e:	1c41      	adds	r1, r0, #1
 801fa80:	d1c3      	bne.n	801fa0a <__sflush_r+0x3e>
 801fa82:	682b      	ldr	r3, [r5, #0]
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d0c0      	beq.n	801fa0a <__sflush_r+0x3e>
 801fa88:	2b1d      	cmp	r3, #29
 801fa8a:	d001      	beq.n	801fa90 <__sflush_r+0xc4>
 801fa8c:	2b16      	cmp	r3, #22
 801fa8e:	d101      	bne.n	801fa94 <__sflush_r+0xc8>
 801fa90:	602f      	str	r7, [r5, #0]
 801fa92:	e7ad      	b.n	801f9f0 <__sflush_r+0x24>
 801fa94:	89a3      	ldrh	r3, [r4, #12]
 801fa96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa9a:	81a3      	strh	r3, [r4, #12]
 801fa9c:	e7a9      	b.n	801f9f2 <__sflush_r+0x26>
 801fa9e:	690f      	ldr	r7, [r1, #16]
 801faa0:	2f00      	cmp	r7, #0
 801faa2:	d0a5      	beq.n	801f9f0 <__sflush_r+0x24>
 801faa4:	079b      	lsls	r3, r3, #30
 801faa6:	680e      	ldr	r6, [r1, #0]
 801faa8:	bf08      	it	eq
 801faaa:	694b      	ldreq	r3, [r1, #20]
 801faac:	600f      	str	r7, [r1, #0]
 801faae:	bf18      	it	ne
 801fab0:	2300      	movne	r3, #0
 801fab2:	eba6 0807 	sub.w	r8, r6, r7
 801fab6:	608b      	str	r3, [r1, #8]
 801fab8:	f1b8 0f00 	cmp.w	r8, #0
 801fabc:	dd98      	ble.n	801f9f0 <__sflush_r+0x24>
 801fabe:	69e1      	ldr	r1, [r4, #28]
 801fac0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801fac2:	4643      	mov	r3, r8
 801fac4:	463a      	mov	r2, r7
 801fac6:	4628      	mov	r0, r5
 801fac8:	47b0      	blx	r6
 801faca:	2800      	cmp	r0, #0
 801facc:	dc06      	bgt.n	801fadc <__sflush_r+0x110>
 801face:	89a3      	ldrh	r3, [r4, #12]
 801fad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fad4:	81a3      	strh	r3, [r4, #12]
 801fad6:	f04f 30ff 	mov.w	r0, #4294967295
 801fada:	e78a      	b.n	801f9f2 <__sflush_r+0x26>
 801fadc:	4407      	add	r7, r0
 801fade:	eba8 0800 	sub.w	r8, r8, r0
 801fae2:	e7e9      	b.n	801fab8 <__sflush_r+0xec>
 801fae4:	20400001 	.word	0x20400001

0801fae8 <_fflush_r>:
 801fae8:	b538      	push	{r3, r4, r5, lr}
 801faea:	460c      	mov	r4, r1
 801faec:	4605      	mov	r5, r0
 801faee:	b118      	cbz	r0, 801faf8 <_fflush_r+0x10>
 801faf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801faf2:	b90b      	cbnz	r3, 801faf8 <_fflush_r+0x10>
 801faf4:	f000 f864 	bl	801fbc0 <__sinit>
 801faf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fafc:	b1bb      	cbz	r3, 801fb2e <_fflush_r+0x46>
 801fafe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fb00:	07d0      	lsls	r0, r2, #31
 801fb02:	d404      	bmi.n	801fb0e <_fflush_r+0x26>
 801fb04:	0599      	lsls	r1, r3, #22
 801fb06:	d402      	bmi.n	801fb0e <_fflush_r+0x26>
 801fb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb0a:	f000 fac6 	bl	802009a <__retarget_lock_acquire_recursive>
 801fb0e:	4628      	mov	r0, r5
 801fb10:	4621      	mov	r1, r4
 801fb12:	f7ff ff5b 	bl	801f9cc <__sflush_r>
 801fb16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb18:	07da      	lsls	r2, r3, #31
 801fb1a:	4605      	mov	r5, r0
 801fb1c:	d405      	bmi.n	801fb2a <_fflush_r+0x42>
 801fb1e:	89a3      	ldrh	r3, [r4, #12]
 801fb20:	059b      	lsls	r3, r3, #22
 801fb22:	d402      	bmi.n	801fb2a <_fflush_r+0x42>
 801fb24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fb26:	f000 faba 	bl	802009e <__retarget_lock_release_recursive>
 801fb2a:	4628      	mov	r0, r5
 801fb2c:	bd38      	pop	{r3, r4, r5, pc}
 801fb2e:	461d      	mov	r5, r3
 801fb30:	e7fb      	b.n	801fb2a <_fflush_r+0x42>
	...

0801fb34 <std>:
 801fb34:	2300      	movs	r3, #0
 801fb36:	b510      	push	{r4, lr}
 801fb38:	4604      	mov	r4, r0
 801fb3a:	e9c0 3300 	strd	r3, r3, [r0]
 801fb3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fb42:	6083      	str	r3, [r0, #8]
 801fb44:	8181      	strh	r1, [r0, #12]
 801fb46:	6643      	str	r3, [r0, #100]	; 0x64
 801fb48:	81c2      	strh	r2, [r0, #14]
 801fb4a:	6183      	str	r3, [r0, #24]
 801fb4c:	4619      	mov	r1, r3
 801fb4e:	2208      	movs	r2, #8
 801fb50:	305c      	adds	r0, #92	; 0x5c
 801fb52:	f7fb fdfd 	bl	801b750 <memset>
 801fb56:	4b07      	ldr	r3, [pc, #28]	; (801fb74 <std+0x40>)
 801fb58:	6223      	str	r3, [r4, #32]
 801fb5a:	4b07      	ldr	r3, [pc, #28]	; (801fb78 <std+0x44>)
 801fb5c:	6263      	str	r3, [r4, #36]	; 0x24
 801fb5e:	4b07      	ldr	r3, [pc, #28]	; (801fb7c <std+0x48>)
 801fb60:	62a3      	str	r3, [r4, #40]	; 0x28
 801fb62:	4b07      	ldr	r3, [pc, #28]	; (801fb80 <std+0x4c>)
 801fb64:	61e4      	str	r4, [r4, #28]
 801fb66:	62e3      	str	r3, [r4, #44]	; 0x2c
 801fb68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801fb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb70:	f000 ba90 	b.w	8020094 <__retarget_lock_init_recursive>
 801fb74:	08020d7d 	.word	0x08020d7d
 801fb78:	08020da3 	.word	0x08020da3
 801fb7c:	08020ddb 	.word	0x08020ddb
 801fb80:	08020dff 	.word	0x08020dff

0801fb84 <_cleanup_r>:
 801fb84:	4901      	ldr	r1, [pc, #4]	; (801fb8c <_cleanup_r+0x8>)
 801fb86:	f000 b96b 	b.w	801fe60 <_fwalk_reent>
 801fb8a:	bf00      	nop
 801fb8c:	08022c85 	.word	0x08022c85

0801fb90 <__sfp_lock_acquire>:
 801fb90:	4801      	ldr	r0, [pc, #4]	; (801fb98 <__sfp_lock_acquire+0x8>)
 801fb92:	f000 ba82 	b.w	802009a <__retarget_lock_acquire_recursive>
 801fb96:	bf00      	nop
 801fb98:	2000be80 	.word	0x2000be80

0801fb9c <__sfp_lock_release>:
 801fb9c:	4801      	ldr	r0, [pc, #4]	; (801fba4 <__sfp_lock_release+0x8>)
 801fb9e:	f000 ba7e 	b.w	802009e <__retarget_lock_release_recursive>
 801fba2:	bf00      	nop
 801fba4:	2000be80 	.word	0x2000be80

0801fba8 <__sinit_lock_acquire>:
 801fba8:	4801      	ldr	r0, [pc, #4]	; (801fbb0 <__sinit_lock_acquire+0x8>)
 801fbaa:	f000 ba76 	b.w	802009a <__retarget_lock_acquire_recursive>
 801fbae:	bf00      	nop
 801fbb0:	2000be7b 	.word	0x2000be7b

0801fbb4 <__sinit_lock_release>:
 801fbb4:	4801      	ldr	r0, [pc, #4]	; (801fbbc <__sinit_lock_release+0x8>)
 801fbb6:	f000 ba72 	b.w	802009e <__retarget_lock_release_recursive>
 801fbba:	bf00      	nop
 801fbbc:	2000be7b 	.word	0x2000be7b

0801fbc0 <__sinit>:
 801fbc0:	b510      	push	{r4, lr}
 801fbc2:	4604      	mov	r4, r0
 801fbc4:	f7ff fff0 	bl	801fba8 <__sinit_lock_acquire>
 801fbc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801fbca:	b11a      	cbz	r2, 801fbd4 <__sinit+0x14>
 801fbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbd0:	f7ff bff0 	b.w	801fbb4 <__sinit_lock_release>
 801fbd4:	4b0d      	ldr	r3, [pc, #52]	; (801fc0c <__sinit+0x4c>)
 801fbd6:	63e3      	str	r3, [r4, #60]	; 0x3c
 801fbd8:	2303      	movs	r3, #3
 801fbda:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801fbde:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801fbe2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801fbe6:	6860      	ldr	r0, [r4, #4]
 801fbe8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801fbec:	2104      	movs	r1, #4
 801fbee:	f7ff ffa1 	bl	801fb34 <std>
 801fbf2:	68a0      	ldr	r0, [r4, #8]
 801fbf4:	2201      	movs	r2, #1
 801fbf6:	2109      	movs	r1, #9
 801fbf8:	f7ff ff9c 	bl	801fb34 <std>
 801fbfc:	68e0      	ldr	r0, [r4, #12]
 801fbfe:	2202      	movs	r2, #2
 801fc00:	2112      	movs	r1, #18
 801fc02:	f7ff ff97 	bl	801fb34 <std>
 801fc06:	2301      	movs	r3, #1
 801fc08:	63a3      	str	r3, [r4, #56]	; 0x38
 801fc0a:	e7df      	b.n	801fbcc <__sinit+0xc>
 801fc0c:	0801fb85 	.word	0x0801fb85

0801fc10 <__libc_fini_array>:
 801fc10:	b538      	push	{r3, r4, r5, lr}
 801fc12:	4d07      	ldr	r5, [pc, #28]	; (801fc30 <__libc_fini_array+0x20>)
 801fc14:	4c07      	ldr	r4, [pc, #28]	; (801fc34 <__libc_fini_array+0x24>)
 801fc16:	1b64      	subs	r4, r4, r5
 801fc18:	10a4      	asrs	r4, r4, #2
 801fc1a:	b91c      	cbnz	r4, 801fc24 <__libc_fini_array+0x14>
 801fc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fc20:	f004 be66 	b.w	80248f0 <_fini>
 801fc24:	3c01      	subs	r4, #1
 801fc26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801fc2a:	4798      	blx	r3
 801fc2c:	e7f5      	b.n	801fc1a <__libc_fini_array+0xa>
 801fc2e:	bf00      	nop
 801fc30:	080296d8 	.word	0x080296d8
 801fc34:	080296dc 	.word	0x080296dc

0801fc38 <_malloc_trim_r>:
 801fc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc3c:	4606      	mov	r6, r0
 801fc3e:	2008      	movs	r0, #8
 801fc40:	460c      	mov	r4, r1
 801fc42:	f002 fa23 	bl	802208c <sysconf>
 801fc46:	4f23      	ldr	r7, [pc, #140]	; (801fcd4 <_malloc_trim_r+0x9c>)
 801fc48:	4680      	mov	r8, r0
 801fc4a:	4630      	mov	r0, r6
 801fc4c:	f000 fce6 	bl	802061c <__malloc_lock>
 801fc50:	68bb      	ldr	r3, [r7, #8]
 801fc52:	685d      	ldr	r5, [r3, #4]
 801fc54:	f025 0503 	bic.w	r5, r5, #3
 801fc58:	1b2c      	subs	r4, r5, r4
 801fc5a:	3c11      	subs	r4, #17
 801fc5c:	4444      	add	r4, r8
 801fc5e:	fbb4 f4f8 	udiv	r4, r4, r8
 801fc62:	3c01      	subs	r4, #1
 801fc64:	fb08 f404 	mul.w	r4, r8, r4
 801fc68:	45a0      	cmp	r8, r4
 801fc6a:	dd05      	ble.n	801fc78 <_malloc_trim_r+0x40>
 801fc6c:	4630      	mov	r0, r6
 801fc6e:	f000 fcdb 	bl	8020628 <__malloc_unlock>
 801fc72:	2000      	movs	r0, #0
 801fc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc78:	2100      	movs	r1, #0
 801fc7a:	4630      	mov	r0, r6
 801fc7c:	f001 f842 	bl	8020d04 <_sbrk_r>
 801fc80:	68bb      	ldr	r3, [r7, #8]
 801fc82:	442b      	add	r3, r5
 801fc84:	4298      	cmp	r0, r3
 801fc86:	d1f1      	bne.n	801fc6c <_malloc_trim_r+0x34>
 801fc88:	4261      	negs	r1, r4
 801fc8a:	4630      	mov	r0, r6
 801fc8c:	f001 f83a 	bl	8020d04 <_sbrk_r>
 801fc90:	3001      	adds	r0, #1
 801fc92:	d110      	bne.n	801fcb6 <_malloc_trim_r+0x7e>
 801fc94:	2100      	movs	r1, #0
 801fc96:	4630      	mov	r0, r6
 801fc98:	f001 f834 	bl	8020d04 <_sbrk_r>
 801fc9c:	68ba      	ldr	r2, [r7, #8]
 801fc9e:	1a83      	subs	r3, r0, r2
 801fca0:	2b0f      	cmp	r3, #15
 801fca2:	dde3      	ble.n	801fc6c <_malloc_trim_r+0x34>
 801fca4:	490c      	ldr	r1, [pc, #48]	; (801fcd8 <_malloc_trim_r+0xa0>)
 801fca6:	6809      	ldr	r1, [r1, #0]
 801fca8:	1a40      	subs	r0, r0, r1
 801fcaa:	490c      	ldr	r1, [pc, #48]	; (801fcdc <_malloc_trim_r+0xa4>)
 801fcac:	f043 0301 	orr.w	r3, r3, #1
 801fcb0:	6008      	str	r0, [r1, #0]
 801fcb2:	6053      	str	r3, [r2, #4]
 801fcb4:	e7da      	b.n	801fc6c <_malloc_trim_r+0x34>
 801fcb6:	68bb      	ldr	r3, [r7, #8]
 801fcb8:	4a08      	ldr	r2, [pc, #32]	; (801fcdc <_malloc_trim_r+0xa4>)
 801fcba:	1b2d      	subs	r5, r5, r4
 801fcbc:	f045 0501 	orr.w	r5, r5, #1
 801fcc0:	605d      	str	r5, [r3, #4]
 801fcc2:	6813      	ldr	r3, [r2, #0]
 801fcc4:	4630      	mov	r0, r6
 801fcc6:	1b1c      	subs	r4, r3, r4
 801fcc8:	6014      	str	r4, [r2, #0]
 801fcca:	f000 fcad 	bl	8020628 <__malloc_unlock>
 801fcce:	2001      	movs	r0, #1
 801fcd0:	e7d0      	b.n	801fc74 <_malloc_trim_r+0x3c>
 801fcd2:	bf00      	nop
 801fcd4:	200004d0 	.word	0x200004d0
 801fcd8:	200008d8 	.word	0x200008d8
 801fcdc:	20005068 	.word	0x20005068

0801fce0 <_free_r>:
 801fce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fce2:	4605      	mov	r5, r0
 801fce4:	460f      	mov	r7, r1
 801fce6:	2900      	cmp	r1, #0
 801fce8:	f000 80b1 	beq.w	801fe4e <_free_r+0x16e>
 801fcec:	f000 fc96 	bl	802061c <__malloc_lock>
 801fcf0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801fcf4:	4856      	ldr	r0, [pc, #344]	; (801fe50 <_free_r+0x170>)
 801fcf6:	f022 0401 	bic.w	r4, r2, #1
 801fcfa:	f1a7 0308 	sub.w	r3, r7, #8
 801fcfe:	eb03 0c04 	add.w	ip, r3, r4
 801fd02:	6881      	ldr	r1, [r0, #8]
 801fd04:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801fd08:	4561      	cmp	r1, ip
 801fd0a:	f026 0603 	bic.w	r6, r6, #3
 801fd0e:	f002 0201 	and.w	r2, r2, #1
 801fd12:	d11b      	bne.n	801fd4c <_free_r+0x6c>
 801fd14:	4434      	add	r4, r6
 801fd16:	b93a      	cbnz	r2, 801fd28 <_free_r+0x48>
 801fd18:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801fd1c:	1a9b      	subs	r3, r3, r2
 801fd1e:	4414      	add	r4, r2
 801fd20:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801fd24:	60ca      	str	r2, [r1, #12]
 801fd26:	6091      	str	r1, [r2, #8]
 801fd28:	f044 0201 	orr.w	r2, r4, #1
 801fd2c:	605a      	str	r2, [r3, #4]
 801fd2e:	6083      	str	r3, [r0, #8]
 801fd30:	4b48      	ldr	r3, [pc, #288]	; (801fe54 <_free_r+0x174>)
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	42a3      	cmp	r3, r4
 801fd36:	d804      	bhi.n	801fd42 <_free_r+0x62>
 801fd38:	4b47      	ldr	r3, [pc, #284]	; (801fe58 <_free_r+0x178>)
 801fd3a:	4628      	mov	r0, r5
 801fd3c:	6819      	ldr	r1, [r3, #0]
 801fd3e:	f7ff ff7b 	bl	801fc38 <_malloc_trim_r>
 801fd42:	4628      	mov	r0, r5
 801fd44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fd48:	f000 bc6e 	b.w	8020628 <__malloc_unlock>
 801fd4c:	f8cc 6004 	str.w	r6, [ip, #4]
 801fd50:	2a00      	cmp	r2, #0
 801fd52:	d138      	bne.n	801fdc6 <_free_r+0xe6>
 801fd54:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801fd58:	1a5b      	subs	r3, r3, r1
 801fd5a:	440c      	add	r4, r1
 801fd5c:	6899      	ldr	r1, [r3, #8]
 801fd5e:	f100 0708 	add.w	r7, r0, #8
 801fd62:	42b9      	cmp	r1, r7
 801fd64:	d031      	beq.n	801fdca <_free_r+0xea>
 801fd66:	68df      	ldr	r7, [r3, #12]
 801fd68:	60cf      	str	r7, [r1, #12]
 801fd6a:	60b9      	str	r1, [r7, #8]
 801fd6c:	eb0c 0106 	add.w	r1, ip, r6
 801fd70:	6849      	ldr	r1, [r1, #4]
 801fd72:	07c9      	lsls	r1, r1, #31
 801fd74:	d40b      	bmi.n	801fd8e <_free_r+0xae>
 801fd76:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801fd7a:	4434      	add	r4, r6
 801fd7c:	bb3a      	cbnz	r2, 801fdce <_free_r+0xee>
 801fd7e:	4e37      	ldr	r6, [pc, #220]	; (801fe5c <_free_r+0x17c>)
 801fd80:	42b1      	cmp	r1, r6
 801fd82:	d124      	bne.n	801fdce <_free_r+0xee>
 801fd84:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fd88:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801fd8c:	2201      	movs	r2, #1
 801fd8e:	f044 0101 	orr.w	r1, r4, #1
 801fd92:	6059      	str	r1, [r3, #4]
 801fd94:	511c      	str	r4, [r3, r4]
 801fd96:	2a00      	cmp	r2, #0
 801fd98:	d1d3      	bne.n	801fd42 <_free_r+0x62>
 801fd9a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801fd9e:	d21b      	bcs.n	801fdd8 <_free_r+0xf8>
 801fda0:	0961      	lsrs	r1, r4, #5
 801fda2:	08e2      	lsrs	r2, r4, #3
 801fda4:	2401      	movs	r4, #1
 801fda6:	408c      	lsls	r4, r1
 801fda8:	6841      	ldr	r1, [r0, #4]
 801fdaa:	3201      	adds	r2, #1
 801fdac:	430c      	orrs	r4, r1
 801fdae:	6044      	str	r4, [r0, #4]
 801fdb0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801fdb4:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801fdb8:	3908      	subs	r1, #8
 801fdba:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801fdbe:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801fdc2:	60e3      	str	r3, [r4, #12]
 801fdc4:	e7bd      	b.n	801fd42 <_free_r+0x62>
 801fdc6:	2200      	movs	r2, #0
 801fdc8:	e7d0      	b.n	801fd6c <_free_r+0x8c>
 801fdca:	2201      	movs	r2, #1
 801fdcc:	e7ce      	b.n	801fd6c <_free_r+0x8c>
 801fdce:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801fdd2:	60ce      	str	r6, [r1, #12]
 801fdd4:	60b1      	str	r1, [r6, #8]
 801fdd6:	e7da      	b.n	801fd8e <_free_r+0xae>
 801fdd8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801fddc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801fde0:	d214      	bcs.n	801fe0c <_free_r+0x12c>
 801fde2:	09a2      	lsrs	r2, r4, #6
 801fde4:	3238      	adds	r2, #56	; 0x38
 801fde6:	1c51      	adds	r1, r2, #1
 801fde8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801fdec:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801fdf0:	428e      	cmp	r6, r1
 801fdf2:	d125      	bne.n	801fe40 <_free_r+0x160>
 801fdf4:	2401      	movs	r4, #1
 801fdf6:	1092      	asrs	r2, r2, #2
 801fdf8:	fa04 f202 	lsl.w	r2, r4, r2
 801fdfc:	6844      	ldr	r4, [r0, #4]
 801fdfe:	4322      	orrs	r2, r4
 801fe00:	6042      	str	r2, [r0, #4]
 801fe02:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801fe06:	60b3      	str	r3, [r6, #8]
 801fe08:	60cb      	str	r3, [r1, #12]
 801fe0a:	e79a      	b.n	801fd42 <_free_r+0x62>
 801fe0c:	2a14      	cmp	r2, #20
 801fe0e:	d801      	bhi.n	801fe14 <_free_r+0x134>
 801fe10:	325b      	adds	r2, #91	; 0x5b
 801fe12:	e7e8      	b.n	801fde6 <_free_r+0x106>
 801fe14:	2a54      	cmp	r2, #84	; 0x54
 801fe16:	d802      	bhi.n	801fe1e <_free_r+0x13e>
 801fe18:	0b22      	lsrs	r2, r4, #12
 801fe1a:	326e      	adds	r2, #110	; 0x6e
 801fe1c:	e7e3      	b.n	801fde6 <_free_r+0x106>
 801fe1e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801fe22:	d802      	bhi.n	801fe2a <_free_r+0x14a>
 801fe24:	0be2      	lsrs	r2, r4, #15
 801fe26:	3277      	adds	r2, #119	; 0x77
 801fe28:	e7dd      	b.n	801fde6 <_free_r+0x106>
 801fe2a:	f240 5154 	movw	r1, #1364	; 0x554
 801fe2e:	428a      	cmp	r2, r1
 801fe30:	bf9a      	itte	ls
 801fe32:	0ca2      	lsrls	r2, r4, #18
 801fe34:	327c      	addls	r2, #124	; 0x7c
 801fe36:	227e      	movhi	r2, #126	; 0x7e
 801fe38:	e7d5      	b.n	801fde6 <_free_r+0x106>
 801fe3a:	6889      	ldr	r1, [r1, #8]
 801fe3c:	428e      	cmp	r6, r1
 801fe3e:	d004      	beq.n	801fe4a <_free_r+0x16a>
 801fe40:	684a      	ldr	r2, [r1, #4]
 801fe42:	f022 0203 	bic.w	r2, r2, #3
 801fe46:	42a2      	cmp	r2, r4
 801fe48:	d8f7      	bhi.n	801fe3a <_free_r+0x15a>
 801fe4a:	68ce      	ldr	r6, [r1, #12]
 801fe4c:	e7d9      	b.n	801fe02 <_free_r+0x122>
 801fe4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fe50:	200004d0 	.word	0x200004d0
 801fe54:	200008dc 	.word	0x200008dc
 801fe58:	20005098 	.word	0x20005098
 801fe5c:	200004d8 	.word	0x200004d8

0801fe60 <_fwalk_reent>:
 801fe60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe64:	4606      	mov	r6, r0
 801fe66:	4688      	mov	r8, r1
 801fe68:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801fe6c:	2700      	movs	r7, #0
 801fe6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fe72:	f1b9 0901 	subs.w	r9, r9, #1
 801fe76:	d505      	bpl.n	801fe84 <_fwalk_reent+0x24>
 801fe78:	6824      	ldr	r4, [r4, #0]
 801fe7a:	2c00      	cmp	r4, #0
 801fe7c:	d1f7      	bne.n	801fe6e <_fwalk_reent+0xe>
 801fe7e:	4638      	mov	r0, r7
 801fe80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe84:	89ab      	ldrh	r3, [r5, #12]
 801fe86:	2b01      	cmp	r3, #1
 801fe88:	d907      	bls.n	801fe9a <_fwalk_reent+0x3a>
 801fe8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fe8e:	3301      	adds	r3, #1
 801fe90:	d003      	beq.n	801fe9a <_fwalk_reent+0x3a>
 801fe92:	4629      	mov	r1, r5
 801fe94:	4630      	mov	r0, r6
 801fe96:	47c0      	blx	r8
 801fe98:	4307      	orrs	r7, r0
 801fe9a:	3568      	adds	r5, #104	; 0x68
 801fe9c:	e7e9      	b.n	801fe72 <_fwalk_reent+0x12>
	...

0801fea0 <_findenv_r>:
 801fea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fea4:	4607      	mov	r7, r0
 801fea6:	4689      	mov	r9, r1
 801fea8:	4616      	mov	r6, r2
 801feaa:	f002 fedf 	bl	8022c6c <__env_lock>
 801feae:	4b18      	ldr	r3, [pc, #96]	; (801ff10 <_findenv_r+0x70>)
 801feb0:	681c      	ldr	r4, [r3, #0]
 801feb2:	469a      	mov	sl, r3
 801feb4:	b134      	cbz	r4, 801fec4 <_findenv_r+0x24>
 801feb6:	464b      	mov	r3, r9
 801feb8:	4698      	mov	r8, r3
 801feba:	f813 1b01 	ldrb.w	r1, [r3], #1
 801febe:	b139      	cbz	r1, 801fed0 <_findenv_r+0x30>
 801fec0:	293d      	cmp	r1, #61	; 0x3d
 801fec2:	d1f9      	bne.n	801feb8 <_findenv_r+0x18>
 801fec4:	4638      	mov	r0, r7
 801fec6:	f002 fed7 	bl	8022c78 <__env_unlock>
 801feca:	2000      	movs	r0, #0
 801fecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fed0:	eba8 0809 	sub.w	r8, r8, r9
 801fed4:	46a3      	mov	fp, r4
 801fed6:	f854 0b04 	ldr.w	r0, [r4], #4
 801feda:	2800      	cmp	r0, #0
 801fedc:	d0f2      	beq.n	801fec4 <_findenv_r+0x24>
 801fede:	4642      	mov	r2, r8
 801fee0:	4649      	mov	r1, r9
 801fee2:	f7fb ff4c 	bl	801bd7e <strncmp>
 801fee6:	2800      	cmp	r0, #0
 801fee8:	d1f4      	bne.n	801fed4 <_findenv_r+0x34>
 801feea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801feee:	eb03 0508 	add.w	r5, r3, r8
 801fef2:	f813 3008 	ldrb.w	r3, [r3, r8]
 801fef6:	2b3d      	cmp	r3, #61	; 0x3d
 801fef8:	d1ec      	bne.n	801fed4 <_findenv_r+0x34>
 801fefa:	f8da 3000 	ldr.w	r3, [sl]
 801fefe:	ebab 0303 	sub.w	r3, fp, r3
 801ff02:	109b      	asrs	r3, r3, #2
 801ff04:	4638      	mov	r0, r7
 801ff06:	6033      	str	r3, [r6, #0]
 801ff08:	f002 feb6 	bl	8022c78 <__env_unlock>
 801ff0c:	1c68      	adds	r0, r5, #1
 801ff0e:	e7dd      	b.n	801fecc <_findenv_r+0x2c>
 801ff10:	20000018 	.word	0x20000018

0801ff14 <_getenv_r>:
 801ff14:	b507      	push	{r0, r1, r2, lr}
 801ff16:	aa01      	add	r2, sp, #4
 801ff18:	f7ff ffc2 	bl	801fea0 <_findenv_r>
 801ff1c:	b003      	add	sp, #12
 801ff1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801ff24 <__gettzinfo>:
 801ff24:	4800      	ldr	r0, [pc, #0]	; (801ff28 <__gettzinfo+0x4>)
 801ff26:	4770      	bx	lr
 801ff28:	20000478 	.word	0x20000478

0801ff2c <gmtime_r>:
 801ff2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff30:	e9d0 6700 	ldrd	r6, r7, [r0]
 801ff34:	460c      	mov	r4, r1
 801ff36:	4a51      	ldr	r2, [pc, #324]	; (802007c <gmtime_r+0x150>)
 801ff38:	2300      	movs	r3, #0
 801ff3a:	4630      	mov	r0, r6
 801ff3c:	4639      	mov	r1, r7
 801ff3e:	f7e0 fe63 	bl	8000c08 <__aeabi_ldivmod>
 801ff42:	4639      	mov	r1, r7
 801ff44:	4605      	mov	r5, r0
 801ff46:	4a4d      	ldr	r2, [pc, #308]	; (802007c <gmtime_r+0x150>)
 801ff48:	4630      	mov	r0, r6
 801ff4a:	2300      	movs	r3, #0
 801ff4c:	f7e0 fe5c 	bl	8000c08 <__aeabi_ldivmod>
 801ff50:	2a00      	cmp	r2, #0
 801ff52:	bfbc      	itt	lt
 801ff54:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801ff58:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801ff5c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ff60:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801ff64:	fbb2 f3f1 	udiv	r3, r2, r1
 801ff68:	fb01 2213 	mls	r2, r1, r3, r2
 801ff6c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801ff70:	bfac      	ite	ge
 801ff72:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801ff76:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801ff7a:	60a3      	str	r3, [r4, #8]
 801ff7c:	fbb2 f3f1 	udiv	r3, r2, r1
 801ff80:	fb01 2213 	mls	r2, r1, r3, r2
 801ff84:	6063      	str	r3, [r4, #4]
 801ff86:	6022      	str	r2, [r4, #0]
 801ff88:	1cc3      	adds	r3, r0, #3
 801ff8a:	2207      	movs	r2, #7
 801ff8c:	fb93 f2f2 	sdiv	r2, r3, r2
 801ff90:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801ff94:	1a9b      	subs	r3, r3, r2
 801ff96:	bf48      	it	mi
 801ff98:	3307      	addmi	r3, #7
 801ff9a:	2800      	cmp	r0, #0
 801ff9c:	61a3      	str	r3, [r4, #24]
 801ff9e:	bfb8      	it	lt
 801ffa0:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801ffa4:	4936      	ldr	r1, [pc, #216]	; (8020080 <gmtime_r+0x154>)
 801ffa6:	bfae      	itee	ge
 801ffa8:	fb90 f1f1 	sdivge	r1, r0, r1
 801ffac:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801ffb0:	fb93 f1f1 	sdivlt	r1, r3, r1
 801ffb4:	4b33      	ldr	r3, [pc, #204]	; (8020084 <gmtime_r+0x158>)
 801ffb6:	fb03 0001 	mla	r0, r3, r1, r0
 801ffba:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801ffbe:	fbb0 f2f2 	udiv	r2, r0, r2
 801ffc2:	4402      	add	r2, r0
 801ffc4:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801ffc8:	fbb0 f3fc 	udiv	r3, r0, ip
 801ffcc:	1ad2      	subs	r2, r2, r3
 801ffce:	f240 176d 	movw	r7, #365	; 0x16d
 801ffd2:	4b2d      	ldr	r3, [pc, #180]	; (8020088 <gmtime_r+0x15c>)
 801ffd4:	fbb0 f3f3 	udiv	r3, r0, r3
 801ffd8:	2664      	movs	r6, #100	; 0x64
 801ffda:	1ad3      	subs	r3, r2, r3
 801ffdc:	fbb3 f5f7 	udiv	r5, r3, r7
 801ffe0:	fbb3 f3fc 	udiv	r3, r3, ip
 801ffe4:	fbb5 f2f6 	udiv	r2, r5, r6
 801ffe8:	1ad3      	subs	r3, r2, r3
 801ffea:	4403      	add	r3, r0
 801ffec:	fb07 3315 	mls	r3, r7, r5, r3
 801fff0:	2099      	movs	r0, #153	; 0x99
 801fff2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801fff6:	f10c 0c02 	add.w	ip, ip, #2
 801fffa:	f103 0e01 	add.w	lr, r3, #1
 801fffe:	fbbc f7f0 	udiv	r7, ip, r0
 8020002:	4378      	muls	r0, r7
 8020004:	3002      	adds	r0, #2
 8020006:	f04f 0805 	mov.w	r8, #5
 802000a:	fbb0 f0f8 	udiv	r0, r0, r8
 802000e:	ebae 0000 	sub.w	r0, lr, r0
 8020012:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8020016:	45f4      	cmp	ip, lr
 8020018:	bf94      	ite	ls
 802001a:	f04f 0c02 	movls.w	ip, #2
 802001e:	f06f 0c09 	mvnhi.w	ip, #9
 8020022:	4467      	add	r7, ip
 8020024:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8020028:	fb0c 5101 	mla	r1, ip, r1, r5
 802002c:	2f01      	cmp	r7, #1
 802002e:	bf98      	it	ls
 8020030:	3101      	addls	r1, #1
 8020032:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8020036:	d30c      	bcc.n	8020052 <gmtime_r+0x126>
 8020038:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802003c:	61e3      	str	r3, [r4, #28]
 802003e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8020042:	2300      	movs	r3, #0
 8020044:	60e0      	str	r0, [r4, #12]
 8020046:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802004a:	6223      	str	r3, [r4, #32]
 802004c:	4620      	mov	r0, r4
 802004e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020052:	f015 0f03 	tst.w	r5, #3
 8020056:	d102      	bne.n	802005e <gmtime_r+0x132>
 8020058:	fb06 5212 	mls	r2, r6, r2, r5
 802005c:	b95a      	cbnz	r2, 8020076 <gmtime_r+0x14a>
 802005e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8020062:	fbb5 f2f6 	udiv	r2, r5, r6
 8020066:	fb06 5212 	mls	r2, r6, r2, r5
 802006a:	fab2 f282 	clz	r2, r2
 802006e:	0952      	lsrs	r2, r2, #5
 8020070:	333b      	adds	r3, #59	; 0x3b
 8020072:	4413      	add	r3, r2
 8020074:	e7e2      	b.n	802003c <gmtime_r+0x110>
 8020076:	2201      	movs	r2, #1
 8020078:	e7fa      	b.n	8020070 <gmtime_r+0x144>
 802007a:	bf00      	nop
 802007c:	00015180 	.word	0x00015180
 8020080:	00023ab1 	.word	0x00023ab1
 8020084:	fffdc54f 	.word	0xfffdc54f
 8020088:	00023ab0 	.word	0x00023ab0

0802008c <_localeconv_r>:
 802008c:	4800      	ldr	r0, [pc, #0]	; (8020090 <_localeconv_r+0x4>)
 802008e:	4770      	bx	lr
 8020090:	200009d0 	.word	0x200009d0

08020094 <__retarget_lock_init_recursive>:
 8020094:	4770      	bx	lr

08020096 <__retarget_lock_close_recursive>:
 8020096:	4770      	bx	lr

08020098 <__retarget_lock_acquire>:
 8020098:	4770      	bx	lr

0802009a <__retarget_lock_acquire_recursive>:
 802009a:	4770      	bx	lr

0802009c <__retarget_lock_release>:
 802009c:	4770      	bx	lr

0802009e <__retarget_lock_release_recursive>:
 802009e:	4770      	bx	lr

080200a0 <__swhatbuf_r>:
 80200a0:	b570      	push	{r4, r5, r6, lr}
 80200a2:	460e      	mov	r6, r1
 80200a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80200a8:	2900      	cmp	r1, #0
 80200aa:	b096      	sub	sp, #88	; 0x58
 80200ac:	4614      	mov	r4, r2
 80200ae:	461d      	mov	r5, r3
 80200b0:	da09      	bge.n	80200c6 <__swhatbuf_r+0x26>
 80200b2:	89b3      	ldrh	r3, [r6, #12]
 80200b4:	2200      	movs	r2, #0
 80200b6:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80200ba:	602a      	str	r2, [r5, #0]
 80200bc:	d116      	bne.n	80200ec <__swhatbuf_r+0x4c>
 80200be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80200c2:	6023      	str	r3, [r4, #0]
 80200c4:	e015      	b.n	80200f2 <__swhatbuf_r+0x52>
 80200c6:	466a      	mov	r2, sp
 80200c8:	f002 feb2 	bl	8022e30 <_fstat_r>
 80200cc:	2800      	cmp	r0, #0
 80200ce:	dbf0      	blt.n	80200b2 <__swhatbuf_r+0x12>
 80200d0:	9a01      	ldr	r2, [sp, #4]
 80200d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80200d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80200da:	425a      	negs	r2, r3
 80200dc:	415a      	adcs	r2, r3
 80200de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80200e2:	602a      	str	r2, [r5, #0]
 80200e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80200e8:	6023      	str	r3, [r4, #0]
 80200ea:	e002      	b.n	80200f2 <__swhatbuf_r+0x52>
 80200ec:	2340      	movs	r3, #64	; 0x40
 80200ee:	6023      	str	r3, [r4, #0]
 80200f0:	4610      	mov	r0, r2
 80200f2:	b016      	add	sp, #88	; 0x58
 80200f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080200f8 <__smakebuf_r>:
 80200f8:	898b      	ldrh	r3, [r1, #12]
 80200fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80200fc:	079d      	lsls	r5, r3, #30
 80200fe:	4606      	mov	r6, r0
 8020100:	460c      	mov	r4, r1
 8020102:	d507      	bpl.n	8020114 <__smakebuf_r+0x1c>
 8020104:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8020108:	6023      	str	r3, [r4, #0]
 802010a:	6123      	str	r3, [r4, #16]
 802010c:	2301      	movs	r3, #1
 802010e:	6163      	str	r3, [r4, #20]
 8020110:	b002      	add	sp, #8
 8020112:	bd70      	pop	{r4, r5, r6, pc}
 8020114:	ab01      	add	r3, sp, #4
 8020116:	466a      	mov	r2, sp
 8020118:	f7ff ffc2 	bl	80200a0 <__swhatbuf_r>
 802011c:	9900      	ldr	r1, [sp, #0]
 802011e:	4605      	mov	r5, r0
 8020120:	4630      	mov	r0, r6
 8020122:	f000 f839 	bl	8020198 <_malloc_r>
 8020126:	b948      	cbnz	r0, 802013c <__smakebuf_r+0x44>
 8020128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802012c:	059a      	lsls	r2, r3, #22
 802012e:	d4ef      	bmi.n	8020110 <__smakebuf_r+0x18>
 8020130:	f023 0303 	bic.w	r3, r3, #3
 8020134:	f043 0302 	orr.w	r3, r3, #2
 8020138:	81a3      	strh	r3, [r4, #12]
 802013a:	e7e3      	b.n	8020104 <__smakebuf_r+0xc>
 802013c:	4b0d      	ldr	r3, [pc, #52]	; (8020174 <__smakebuf_r+0x7c>)
 802013e:	63f3      	str	r3, [r6, #60]	; 0x3c
 8020140:	89a3      	ldrh	r3, [r4, #12]
 8020142:	6020      	str	r0, [r4, #0]
 8020144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020148:	81a3      	strh	r3, [r4, #12]
 802014a:	9b00      	ldr	r3, [sp, #0]
 802014c:	6163      	str	r3, [r4, #20]
 802014e:	9b01      	ldr	r3, [sp, #4]
 8020150:	6120      	str	r0, [r4, #16]
 8020152:	b15b      	cbz	r3, 802016c <__smakebuf_r+0x74>
 8020154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020158:	4630      	mov	r0, r6
 802015a:	f002 ffc5 	bl	80230e8 <_isatty_r>
 802015e:	b128      	cbz	r0, 802016c <__smakebuf_r+0x74>
 8020160:	89a3      	ldrh	r3, [r4, #12]
 8020162:	f023 0303 	bic.w	r3, r3, #3
 8020166:	f043 0301 	orr.w	r3, r3, #1
 802016a:	81a3      	strh	r3, [r4, #12]
 802016c:	89a0      	ldrh	r0, [r4, #12]
 802016e:	4305      	orrs	r5, r0
 8020170:	81a5      	strh	r5, [r4, #12]
 8020172:	e7cd      	b.n	8020110 <__smakebuf_r+0x18>
 8020174:	0801fb85 	.word	0x0801fb85

08020178 <malloc>:
 8020178:	4b02      	ldr	r3, [pc, #8]	; (8020184 <malloc+0xc>)
 802017a:	4601      	mov	r1, r0
 802017c:	6818      	ldr	r0, [r3, #0]
 802017e:	f000 b80b 	b.w	8020198 <_malloc_r>
 8020182:	bf00      	nop
 8020184:	20000038 	.word	0x20000038

08020188 <free>:
 8020188:	4b02      	ldr	r3, [pc, #8]	; (8020194 <free+0xc>)
 802018a:	4601      	mov	r1, r0
 802018c:	6818      	ldr	r0, [r3, #0]
 802018e:	f7ff bda7 	b.w	801fce0 <_free_r>
 8020192:	bf00      	nop
 8020194:	20000038 	.word	0x20000038

08020198 <_malloc_r>:
 8020198:	f101 030b 	add.w	r3, r1, #11
 802019c:	2b16      	cmp	r3, #22
 802019e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a2:	4605      	mov	r5, r0
 80201a4:	d906      	bls.n	80201b4 <_malloc_r+0x1c>
 80201a6:	f033 0707 	bics.w	r7, r3, #7
 80201aa:	d504      	bpl.n	80201b6 <_malloc_r+0x1e>
 80201ac:	230c      	movs	r3, #12
 80201ae:	602b      	str	r3, [r5, #0]
 80201b0:	2400      	movs	r4, #0
 80201b2:	e1ae      	b.n	8020512 <_malloc_r+0x37a>
 80201b4:	2710      	movs	r7, #16
 80201b6:	42b9      	cmp	r1, r7
 80201b8:	d8f8      	bhi.n	80201ac <_malloc_r+0x14>
 80201ba:	4628      	mov	r0, r5
 80201bc:	f000 fa2e 	bl	802061c <__malloc_lock>
 80201c0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80201c4:	4ec3      	ldr	r6, [pc, #780]	; (80204d4 <_malloc_r+0x33c>)
 80201c6:	d238      	bcs.n	802023a <_malloc_r+0xa2>
 80201c8:	f107 0208 	add.w	r2, r7, #8
 80201cc:	4432      	add	r2, r6
 80201ce:	f1a2 0108 	sub.w	r1, r2, #8
 80201d2:	6854      	ldr	r4, [r2, #4]
 80201d4:	428c      	cmp	r4, r1
 80201d6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80201da:	d102      	bne.n	80201e2 <_malloc_r+0x4a>
 80201dc:	68d4      	ldr	r4, [r2, #12]
 80201de:	42a2      	cmp	r2, r4
 80201e0:	d010      	beq.n	8020204 <_malloc_r+0x6c>
 80201e2:	6863      	ldr	r3, [r4, #4]
 80201e4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80201e8:	f023 0303 	bic.w	r3, r3, #3
 80201ec:	60ca      	str	r2, [r1, #12]
 80201ee:	4423      	add	r3, r4
 80201f0:	6091      	str	r1, [r2, #8]
 80201f2:	685a      	ldr	r2, [r3, #4]
 80201f4:	f042 0201 	orr.w	r2, r2, #1
 80201f8:	605a      	str	r2, [r3, #4]
 80201fa:	4628      	mov	r0, r5
 80201fc:	f000 fa14 	bl	8020628 <__malloc_unlock>
 8020200:	3408      	adds	r4, #8
 8020202:	e186      	b.n	8020512 <_malloc_r+0x37a>
 8020204:	3302      	adds	r3, #2
 8020206:	4ab4      	ldr	r2, [pc, #720]	; (80204d8 <_malloc_r+0x340>)
 8020208:	6934      	ldr	r4, [r6, #16]
 802020a:	4294      	cmp	r4, r2
 802020c:	4611      	mov	r1, r2
 802020e:	d077      	beq.n	8020300 <_malloc_r+0x168>
 8020210:	6860      	ldr	r0, [r4, #4]
 8020212:	f020 0c03 	bic.w	ip, r0, #3
 8020216:	ebac 0007 	sub.w	r0, ip, r7
 802021a:	280f      	cmp	r0, #15
 802021c:	dd48      	ble.n	80202b0 <_malloc_r+0x118>
 802021e:	19e1      	adds	r1, r4, r7
 8020220:	f040 0301 	orr.w	r3, r0, #1
 8020224:	f047 0701 	orr.w	r7, r7, #1
 8020228:	6067      	str	r7, [r4, #4]
 802022a:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802022e:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8020232:	604b      	str	r3, [r1, #4]
 8020234:	f844 000c 	str.w	r0, [r4, ip]
 8020238:	e7df      	b.n	80201fa <_malloc_r+0x62>
 802023a:	0a7b      	lsrs	r3, r7, #9
 802023c:	d02a      	beq.n	8020294 <_malloc_r+0xfc>
 802023e:	2b04      	cmp	r3, #4
 8020240:	d812      	bhi.n	8020268 <_malloc_r+0xd0>
 8020242:	09bb      	lsrs	r3, r7, #6
 8020244:	3338      	adds	r3, #56	; 0x38
 8020246:	1c5a      	adds	r2, r3, #1
 8020248:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802024c:	f1a2 0c08 	sub.w	ip, r2, #8
 8020250:	6854      	ldr	r4, [r2, #4]
 8020252:	4564      	cmp	r4, ip
 8020254:	d006      	beq.n	8020264 <_malloc_r+0xcc>
 8020256:	6862      	ldr	r2, [r4, #4]
 8020258:	f022 0203 	bic.w	r2, r2, #3
 802025c:	1bd0      	subs	r0, r2, r7
 802025e:	280f      	cmp	r0, #15
 8020260:	dd1c      	ble.n	802029c <_malloc_r+0x104>
 8020262:	3b01      	subs	r3, #1
 8020264:	3301      	adds	r3, #1
 8020266:	e7ce      	b.n	8020206 <_malloc_r+0x6e>
 8020268:	2b14      	cmp	r3, #20
 802026a:	d801      	bhi.n	8020270 <_malloc_r+0xd8>
 802026c:	335b      	adds	r3, #91	; 0x5b
 802026e:	e7ea      	b.n	8020246 <_malloc_r+0xae>
 8020270:	2b54      	cmp	r3, #84	; 0x54
 8020272:	d802      	bhi.n	802027a <_malloc_r+0xe2>
 8020274:	0b3b      	lsrs	r3, r7, #12
 8020276:	336e      	adds	r3, #110	; 0x6e
 8020278:	e7e5      	b.n	8020246 <_malloc_r+0xae>
 802027a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 802027e:	d802      	bhi.n	8020286 <_malloc_r+0xee>
 8020280:	0bfb      	lsrs	r3, r7, #15
 8020282:	3377      	adds	r3, #119	; 0x77
 8020284:	e7df      	b.n	8020246 <_malloc_r+0xae>
 8020286:	f240 5254 	movw	r2, #1364	; 0x554
 802028a:	4293      	cmp	r3, r2
 802028c:	d804      	bhi.n	8020298 <_malloc_r+0x100>
 802028e:	0cbb      	lsrs	r3, r7, #18
 8020290:	337c      	adds	r3, #124	; 0x7c
 8020292:	e7d8      	b.n	8020246 <_malloc_r+0xae>
 8020294:	233f      	movs	r3, #63	; 0x3f
 8020296:	e7d6      	b.n	8020246 <_malloc_r+0xae>
 8020298:	237e      	movs	r3, #126	; 0x7e
 802029a:	e7d4      	b.n	8020246 <_malloc_r+0xae>
 802029c:	2800      	cmp	r0, #0
 802029e:	68e1      	ldr	r1, [r4, #12]
 80202a0:	db04      	blt.n	80202ac <_malloc_r+0x114>
 80202a2:	68a3      	ldr	r3, [r4, #8]
 80202a4:	60d9      	str	r1, [r3, #12]
 80202a6:	608b      	str	r3, [r1, #8]
 80202a8:	18a3      	adds	r3, r4, r2
 80202aa:	e7a2      	b.n	80201f2 <_malloc_r+0x5a>
 80202ac:	460c      	mov	r4, r1
 80202ae:	e7d0      	b.n	8020252 <_malloc_r+0xba>
 80202b0:	2800      	cmp	r0, #0
 80202b2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80202b6:	db07      	blt.n	80202c8 <_malloc_r+0x130>
 80202b8:	44a4      	add	ip, r4
 80202ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80202be:	f043 0301 	orr.w	r3, r3, #1
 80202c2:	f8cc 3004 	str.w	r3, [ip, #4]
 80202c6:	e798      	b.n	80201fa <_malloc_r+0x62>
 80202c8:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80202cc:	6870      	ldr	r0, [r6, #4]
 80202ce:	f080 809e 	bcs.w	802040e <_malloc_r+0x276>
 80202d2:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80202d6:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80202da:	f04f 0c01 	mov.w	ip, #1
 80202de:	3201      	adds	r2, #1
 80202e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80202e4:	ea4c 0000 	orr.w	r0, ip, r0
 80202e8:	6070      	str	r0, [r6, #4]
 80202ea:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80202ee:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80202f2:	3808      	subs	r0, #8
 80202f4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80202f8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80202fc:	f8cc 400c 	str.w	r4, [ip, #12]
 8020300:	2001      	movs	r0, #1
 8020302:	109a      	asrs	r2, r3, #2
 8020304:	fa00 f202 	lsl.w	r2, r0, r2
 8020308:	6870      	ldr	r0, [r6, #4]
 802030a:	4290      	cmp	r0, r2
 802030c:	d326      	bcc.n	802035c <_malloc_r+0x1c4>
 802030e:	4210      	tst	r0, r2
 8020310:	d106      	bne.n	8020320 <_malloc_r+0x188>
 8020312:	f023 0303 	bic.w	r3, r3, #3
 8020316:	0052      	lsls	r2, r2, #1
 8020318:	4210      	tst	r0, r2
 802031a:	f103 0304 	add.w	r3, r3, #4
 802031e:	d0fa      	beq.n	8020316 <_malloc_r+0x17e>
 8020320:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8020324:	46c1      	mov	r9, r8
 8020326:	469e      	mov	lr, r3
 8020328:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802032c:	454c      	cmp	r4, r9
 802032e:	f040 80b3 	bne.w	8020498 <_malloc_r+0x300>
 8020332:	f10e 0e01 	add.w	lr, lr, #1
 8020336:	f01e 0f03 	tst.w	lr, #3
 802033a:	f109 0908 	add.w	r9, r9, #8
 802033e:	d1f3      	bne.n	8020328 <_malloc_r+0x190>
 8020340:	0798      	lsls	r0, r3, #30
 8020342:	f040 80ec 	bne.w	802051e <_malloc_r+0x386>
 8020346:	6873      	ldr	r3, [r6, #4]
 8020348:	ea23 0302 	bic.w	r3, r3, r2
 802034c:	6073      	str	r3, [r6, #4]
 802034e:	6870      	ldr	r0, [r6, #4]
 8020350:	0052      	lsls	r2, r2, #1
 8020352:	4290      	cmp	r0, r2
 8020354:	d302      	bcc.n	802035c <_malloc_r+0x1c4>
 8020356:	2a00      	cmp	r2, #0
 8020358:	f040 80ee 	bne.w	8020538 <_malloc_r+0x3a0>
 802035c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8020360:	f8db 1004 	ldr.w	r1, [fp, #4]
 8020364:	f021 0903 	bic.w	r9, r1, #3
 8020368:	45b9      	cmp	r9, r7
 802036a:	d304      	bcc.n	8020376 <_malloc_r+0x1de>
 802036c:	eba9 0207 	sub.w	r2, r9, r7
 8020370:	2a0f      	cmp	r2, #15
 8020372:	f300 8149 	bgt.w	8020608 <_malloc_r+0x470>
 8020376:	4a59      	ldr	r2, [pc, #356]	; (80204dc <_malloc_r+0x344>)
 8020378:	6811      	ldr	r1, [r2, #0]
 802037a:	3110      	adds	r1, #16
 802037c:	eb0b 0309 	add.w	r3, fp, r9
 8020380:	4439      	add	r1, r7
 8020382:	2008      	movs	r0, #8
 8020384:	9301      	str	r3, [sp, #4]
 8020386:	9100      	str	r1, [sp, #0]
 8020388:	f001 fe80 	bl	802208c <sysconf>
 802038c:	4a54      	ldr	r2, [pc, #336]	; (80204e0 <_malloc_r+0x348>)
 802038e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8020392:	4680      	mov	r8, r0
 8020394:	6810      	ldr	r0, [r2, #0]
 8020396:	3001      	adds	r0, #1
 8020398:	bf1f      	itttt	ne
 802039a:	f101 31ff 	addne.w	r1, r1, #4294967295
 802039e:	4441      	addne	r1, r8
 80203a0:	f1c8 0000 	rsbne	r0, r8, #0
 80203a4:	4001      	andne	r1, r0
 80203a6:	4628      	mov	r0, r5
 80203a8:	e9cd 1300 	strd	r1, r3, [sp]
 80203ac:	f000 fcaa 	bl	8020d04 <_sbrk_r>
 80203b0:	1c42      	adds	r2, r0, #1
 80203b2:	4604      	mov	r4, r0
 80203b4:	f000 80fc 	beq.w	80205b0 <_malloc_r+0x418>
 80203b8:	9b01      	ldr	r3, [sp, #4]
 80203ba:	9900      	ldr	r1, [sp, #0]
 80203bc:	4a48      	ldr	r2, [pc, #288]	; (80204e0 <_malloc_r+0x348>)
 80203be:	4283      	cmp	r3, r0
 80203c0:	d902      	bls.n	80203c8 <_malloc_r+0x230>
 80203c2:	45b3      	cmp	fp, r6
 80203c4:	f040 80f4 	bne.w	80205b0 <_malloc_r+0x418>
 80203c8:	f8df a120 	ldr.w	sl, [pc, #288]	; 80204ec <_malloc_r+0x354>
 80203cc:	f8da 0000 	ldr.w	r0, [sl]
 80203d0:	42a3      	cmp	r3, r4
 80203d2:	eb00 0e01 	add.w	lr, r0, r1
 80203d6:	f8ca e000 	str.w	lr, [sl]
 80203da:	f108 3cff 	add.w	ip, r8, #4294967295
 80203de:	f040 80ad 	bne.w	802053c <_malloc_r+0x3a4>
 80203e2:	ea13 0f0c 	tst.w	r3, ip
 80203e6:	f040 80a9 	bne.w	802053c <_malloc_r+0x3a4>
 80203ea:	68b3      	ldr	r3, [r6, #8]
 80203ec:	4449      	add	r1, r9
 80203ee:	f041 0101 	orr.w	r1, r1, #1
 80203f2:	6059      	str	r1, [r3, #4]
 80203f4:	4a3b      	ldr	r2, [pc, #236]	; (80204e4 <_malloc_r+0x34c>)
 80203f6:	f8da 3000 	ldr.w	r3, [sl]
 80203fa:	6811      	ldr	r1, [r2, #0]
 80203fc:	428b      	cmp	r3, r1
 80203fe:	bf88      	it	hi
 8020400:	6013      	strhi	r3, [r2, #0]
 8020402:	4a39      	ldr	r2, [pc, #228]	; (80204e8 <_malloc_r+0x350>)
 8020404:	6811      	ldr	r1, [r2, #0]
 8020406:	428b      	cmp	r3, r1
 8020408:	bf88      	it	hi
 802040a:	6013      	strhi	r3, [r2, #0]
 802040c:	e0d0      	b.n	80205b0 <_malloc_r+0x418>
 802040e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8020412:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8020416:	d218      	bcs.n	802044a <_malloc_r+0x2b2>
 8020418:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802041c:	3238      	adds	r2, #56	; 0x38
 802041e:	f102 0e01 	add.w	lr, r2, #1
 8020422:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8020426:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802042a:	45f0      	cmp	r8, lr
 802042c:	d12b      	bne.n	8020486 <_malloc_r+0x2ee>
 802042e:	1092      	asrs	r2, r2, #2
 8020430:	f04f 0c01 	mov.w	ip, #1
 8020434:	fa0c f202 	lsl.w	r2, ip, r2
 8020438:	4310      	orrs	r0, r2
 802043a:	6070      	str	r0, [r6, #4]
 802043c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8020440:	f8c8 4008 	str.w	r4, [r8, #8]
 8020444:	f8ce 400c 	str.w	r4, [lr, #12]
 8020448:	e75a      	b.n	8020300 <_malloc_r+0x168>
 802044a:	2a14      	cmp	r2, #20
 802044c:	d801      	bhi.n	8020452 <_malloc_r+0x2ba>
 802044e:	325b      	adds	r2, #91	; 0x5b
 8020450:	e7e5      	b.n	802041e <_malloc_r+0x286>
 8020452:	2a54      	cmp	r2, #84	; 0x54
 8020454:	d803      	bhi.n	802045e <_malloc_r+0x2c6>
 8020456:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802045a:	326e      	adds	r2, #110	; 0x6e
 802045c:	e7df      	b.n	802041e <_malloc_r+0x286>
 802045e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8020462:	d803      	bhi.n	802046c <_malloc_r+0x2d4>
 8020464:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8020468:	3277      	adds	r2, #119	; 0x77
 802046a:	e7d8      	b.n	802041e <_malloc_r+0x286>
 802046c:	f240 5e54 	movw	lr, #1364	; 0x554
 8020470:	4572      	cmp	r2, lr
 8020472:	bf9a      	itte	ls
 8020474:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8020478:	327c      	addls	r2, #124	; 0x7c
 802047a:	227e      	movhi	r2, #126	; 0x7e
 802047c:	e7cf      	b.n	802041e <_malloc_r+0x286>
 802047e:	f8de e008 	ldr.w	lr, [lr, #8]
 8020482:	45f0      	cmp	r8, lr
 8020484:	d005      	beq.n	8020492 <_malloc_r+0x2fa>
 8020486:	f8de 2004 	ldr.w	r2, [lr, #4]
 802048a:	f022 0203 	bic.w	r2, r2, #3
 802048e:	4562      	cmp	r2, ip
 8020490:	d8f5      	bhi.n	802047e <_malloc_r+0x2e6>
 8020492:	f8de 800c 	ldr.w	r8, [lr, #12]
 8020496:	e7d1      	b.n	802043c <_malloc_r+0x2a4>
 8020498:	6860      	ldr	r0, [r4, #4]
 802049a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802049e:	f020 0003 	bic.w	r0, r0, #3
 80204a2:	eba0 0a07 	sub.w	sl, r0, r7
 80204a6:	f1ba 0f0f 	cmp.w	sl, #15
 80204aa:	dd21      	ble.n	80204f0 <_malloc_r+0x358>
 80204ac:	68a3      	ldr	r3, [r4, #8]
 80204ae:	19e2      	adds	r2, r4, r7
 80204b0:	f047 0701 	orr.w	r7, r7, #1
 80204b4:	6067      	str	r7, [r4, #4]
 80204b6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80204ba:	f8cc 3008 	str.w	r3, [ip, #8]
 80204be:	f04a 0301 	orr.w	r3, sl, #1
 80204c2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80204c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80204ca:	6053      	str	r3, [r2, #4]
 80204cc:	f844 a000 	str.w	sl, [r4, r0]
 80204d0:	e693      	b.n	80201fa <_malloc_r+0x62>
 80204d2:	bf00      	nop
 80204d4:	200004d0 	.word	0x200004d0
 80204d8:	200004d8 	.word	0x200004d8
 80204dc:	20005098 	.word	0x20005098
 80204e0:	200008d8 	.word	0x200008d8
 80204e4:	20005090 	.word	0x20005090
 80204e8:	20005094 	.word	0x20005094
 80204ec:	20005068 	.word	0x20005068
 80204f0:	f1ba 0f00 	cmp.w	sl, #0
 80204f4:	db11      	blt.n	802051a <_malloc_r+0x382>
 80204f6:	4420      	add	r0, r4
 80204f8:	6843      	ldr	r3, [r0, #4]
 80204fa:	f043 0301 	orr.w	r3, r3, #1
 80204fe:	6043      	str	r3, [r0, #4]
 8020500:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8020504:	4628      	mov	r0, r5
 8020506:	f8c3 c00c 	str.w	ip, [r3, #12]
 802050a:	f8cc 3008 	str.w	r3, [ip, #8]
 802050e:	f000 f88b 	bl	8020628 <__malloc_unlock>
 8020512:	4620      	mov	r0, r4
 8020514:	b003      	add	sp, #12
 8020516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802051a:	4664      	mov	r4, ip
 802051c:	e706      	b.n	802032c <_malloc_r+0x194>
 802051e:	f858 0908 	ldr.w	r0, [r8], #-8
 8020522:	4540      	cmp	r0, r8
 8020524:	f103 33ff 	add.w	r3, r3, #4294967295
 8020528:	f43f af0a 	beq.w	8020340 <_malloc_r+0x1a8>
 802052c:	e70f      	b.n	802034e <_malloc_r+0x1b6>
 802052e:	3304      	adds	r3, #4
 8020530:	0052      	lsls	r2, r2, #1
 8020532:	4210      	tst	r0, r2
 8020534:	d0fb      	beq.n	802052e <_malloc_r+0x396>
 8020536:	e6f3      	b.n	8020320 <_malloc_r+0x188>
 8020538:	4673      	mov	r3, lr
 802053a:	e7fa      	b.n	8020532 <_malloc_r+0x39a>
 802053c:	6810      	ldr	r0, [r2, #0]
 802053e:	3001      	adds	r0, #1
 8020540:	bf1b      	ittet	ne
 8020542:	1ae3      	subne	r3, r4, r3
 8020544:	4473      	addne	r3, lr
 8020546:	6014      	streq	r4, [r2, #0]
 8020548:	f8ca 3000 	strne.w	r3, [sl]
 802054c:	f014 0307 	ands.w	r3, r4, #7
 8020550:	bf1a      	itte	ne
 8020552:	f1c3 0008 	rsbne	r0, r3, #8
 8020556:	1824      	addne	r4, r4, r0
 8020558:	4618      	moveq	r0, r3
 802055a:	1862      	adds	r2, r4, r1
 802055c:	ea02 010c 	and.w	r1, r2, ip
 8020560:	4480      	add	r8, r0
 8020562:	eba8 0801 	sub.w	r8, r8, r1
 8020566:	ea08 080c 	and.w	r8, r8, ip
 802056a:	4641      	mov	r1, r8
 802056c:	4628      	mov	r0, r5
 802056e:	9301      	str	r3, [sp, #4]
 8020570:	9200      	str	r2, [sp, #0]
 8020572:	f000 fbc7 	bl	8020d04 <_sbrk_r>
 8020576:	1c43      	adds	r3, r0, #1
 8020578:	e9dd 2300 	ldrd	r2, r3, [sp]
 802057c:	d105      	bne.n	802058a <_malloc_r+0x3f2>
 802057e:	b32b      	cbz	r3, 80205cc <_malloc_r+0x434>
 8020580:	f1a3 0008 	sub.w	r0, r3, #8
 8020584:	4410      	add	r0, r2
 8020586:	f04f 0800 	mov.w	r8, #0
 802058a:	f8da 2000 	ldr.w	r2, [sl]
 802058e:	60b4      	str	r4, [r6, #8]
 8020590:	1b00      	subs	r0, r0, r4
 8020592:	4440      	add	r0, r8
 8020594:	4442      	add	r2, r8
 8020596:	f040 0001 	orr.w	r0, r0, #1
 802059a:	45b3      	cmp	fp, r6
 802059c:	f8ca 2000 	str.w	r2, [sl]
 80205a0:	6060      	str	r0, [r4, #4]
 80205a2:	f43f af27 	beq.w	80203f4 <_malloc_r+0x25c>
 80205a6:	f1b9 0f0f 	cmp.w	r9, #15
 80205aa:	d812      	bhi.n	80205d2 <_malloc_r+0x43a>
 80205ac:	2301      	movs	r3, #1
 80205ae:	6063      	str	r3, [r4, #4]
 80205b0:	68b3      	ldr	r3, [r6, #8]
 80205b2:	685b      	ldr	r3, [r3, #4]
 80205b4:	f023 0303 	bic.w	r3, r3, #3
 80205b8:	42bb      	cmp	r3, r7
 80205ba:	eba3 0207 	sub.w	r2, r3, r7
 80205be:	d301      	bcc.n	80205c4 <_malloc_r+0x42c>
 80205c0:	2a0f      	cmp	r2, #15
 80205c2:	dc21      	bgt.n	8020608 <_malloc_r+0x470>
 80205c4:	4628      	mov	r0, r5
 80205c6:	f000 f82f 	bl	8020628 <__malloc_unlock>
 80205ca:	e5f1      	b.n	80201b0 <_malloc_r+0x18>
 80205cc:	4610      	mov	r0, r2
 80205ce:	4698      	mov	r8, r3
 80205d0:	e7db      	b.n	802058a <_malloc_r+0x3f2>
 80205d2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80205d6:	f1a9 090c 	sub.w	r9, r9, #12
 80205da:	f029 0907 	bic.w	r9, r9, #7
 80205de:	f003 0301 	and.w	r3, r3, #1
 80205e2:	ea43 0309 	orr.w	r3, r3, r9
 80205e6:	f8cb 3004 	str.w	r3, [fp, #4]
 80205ea:	2205      	movs	r2, #5
 80205ec:	eb0b 0309 	add.w	r3, fp, r9
 80205f0:	f1b9 0f0f 	cmp.w	r9, #15
 80205f4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80205f8:	f67f aefc 	bls.w	80203f4 <_malloc_r+0x25c>
 80205fc:	f10b 0108 	add.w	r1, fp, #8
 8020600:	4628      	mov	r0, r5
 8020602:	f7ff fb6d 	bl	801fce0 <_free_r>
 8020606:	e6f5      	b.n	80203f4 <_malloc_r+0x25c>
 8020608:	68b4      	ldr	r4, [r6, #8]
 802060a:	f047 0301 	orr.w	r3, r7, #1
 802060e:	4427      	add	r7, r4
 8020610:	f042 0201 	orr.w	r2, r2, #1
 8020614:	6063      	str	r3, [r4, #4]
 8020616:	60b7      	str	r7, [r6, #8]
 8020618:	607a      	str	r2, [r7, #4]
 802061a:	e5ee      	b.n	80201fa <_malloc_r+0x62>

0802061c <__malloc_lock>:
 802061c:	4801      	ldr	r0, [pc, #4]	; (8020624 <__malloc_lock+0x8>)
 802061e:	f7ff bd3c 	b.w	802009a <__retarget_lock_acquire_recursive>
 8020622:	bf00      	nop
 8020624:	2000be7c 	.word	0x2000be7c

08020628 <__malloc_unlock>:
 8020628:	4801      	ldr	r0, [pc, #4]	; (8020630 <__malloc_unlock+0x8>)
 802062a:	f7ff bd38 	b.w	802009e <__retarget_lock_release_recursive>
 802062e:	bf00      	nop
 8020630:	2000be7c 	.word	0x2000be7c

08020634 <_Balloc>:
 8020634:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8020636:	b570      	push	{r4, r5, r6, lr}
 8020638:	4605      	mov	r5, r0
 802063a:	460c      	mov	r4, r1
 802063c:	b17b      	cbz	r3, 802065e <_Balloc+0x2a>
 802063e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8020640:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8020644:	b9a0      	cbnz	r0, 8020670 <_Balloc+0x3c>
 8020646:	2101      	movs	r1, #1
 8020648:	fa01 f604 	lsl.w	r6, r1, r4
 802064c:	1d72      	adds	r2, r6, #5
 802064e:	0092      	lsls	r2, r2, #2
 8020650:	4628      	mov	r0, r5
 8020652:	f002 facd 	bl	8022bf0 <_calloc_r>
 8020656:	b148      	cbz	r0, 802066c <_Balloc+0x38>
 8020658:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802065c:	e00b      	b.n	8020676 <_Balloc+0x42>
 802065e:	2221      	movs	r2, #33	; 0x21
 8020660:	2104      	movs	r1, #4
 8020662:	f002 fac5 	bl	8022bf0 <_calloc_r>
 8020666:	64e8      	str	r0, [r5, #76]	; 0x4c
 8020668:	2800      	cmp	r0, #0
 802066a:	d1e8      	bne.n	802063e <_Balloc+0xa>
 802066c:	2000      	movs	r0, #0
 802066e:	bd70      	pop	{r4, r5, r6, pc}
 8020670:	6802      	ldr	r2, [r0, #0]
 8020672:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8020676:	2300      	movs	r3, #0
 8020678:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802067c:	e7f7      	b.n	802066e <_Balloc+0x3a>

0802067e <_Bfree>:
 802067e:	b131      	cbz	r1, 802068e <_Bfree+0x10>
 8020680:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8020682:	684a      	ldr	r2, [r1, #4]
 8020684:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020688:	6008      	str	r0, [r1, #0]
 802068a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802068e:	4770      	bx	lr

08020690 <__multadd>:
 8020690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020694:	690e      	ldr	r6, [r1, #16]
 8020696:	4607      	mov	r7, r0
 8020698:	4698      	mov	r8, r3
 802069a:	460c      	mov	r4, r1
 802069c:	f101 0014 	add.w	r0, r1, #20
 80206a0:	2300      	movs	r3, #0
 80206a2:	6805      	ldr	r5, [r0, #0]
 80206a4:	b2a9      	uxth	r1, r5
 80206a6:	fb02 8101 	mla	r1, r2, r1, r8
 80206aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80206ae:	0c2d      	lsrs	r5, r5, #16
 80206b0:	fb02 c505 	mla	r5, r2, r5, ip
 80206b4:	b289      	uxth	r1, r1
 80206b6:	3301      	adds	r3, #1
 80206b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80206bc:	429e      	cmp	r6, r3
 80206be:	f840 1b04 	str.w	r1, [r0], #4
 80206c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80206c6:	dcec      	bgt.n	80206a2 <__multadd+0x12>
 80206c8:	f1b8 0f00 	cmp.w	r8, #0
 80206cc:	d022      	beq.n	8020714 <__multadd+0x84>
 80206ce:	68a3      	ldr	r3, [r4, #8]
 80206d0:	42b3      	cmp	r3, r6
 80206d2:	dc19      	bgt.n	8020708 <__multadd+0x78>
 80206d4:	6861      	ldr	r1, [r4, #4]
 80206d6:	4638      	mov	r0, r7
 80206d8:	3101      	adds	r1, #1
 80206da:	f7ff ffab 	bl	8020634 <_Balloc>
 80206de:	4605      	mov	r5, r0
 80206e0:	b928      	cbnz	r0, 80206ee <__multadd+0x5e>
 80206e2:	4602      	mov	r2, r0
 80206e4:	4b0d      	ldr	r3, [pc, #52]	; (802071c <__multadd+0x8c>)
 80206e6:	480e      	ldr	r0, [pc, #56]	; (8020720 <__multadd+0x90>)
 80206e8:	21b5      	movs	r1, #181	; 0xb5
 80206ea:	f002 fa63 	bl	8022bb4 <__assert_func>
 80206ee:	6922      	ldr	r2, [r4, #16]
 80206f0:	3202      	adds	r2, #2
 80206f2:	f104 010c 	add.w	r1, r4, #12
 80206f6:	0092      	lsls	r2, r2, #2
 80206f8:	300c      	adds	r0, #12
 80206fa:	f7fb f801 	bl	801b700 <memcpy>
 80206fe:	4621      	mov	r1, r4
 8020700:	4638      	mov	r0, r7
 8020702:	f7ff ffbc 	bl	802067e <_Bfree>
 8020706:	462c      	mov	r4, r5
 8020708:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802070c:	3601      	adds	r6, #1
 802070e:	f8c3 8014 	str.w	r8, [r3, #20]
 8020712:	6126      	str	r6, [r4, #16]
 8020714:	4620      	mov	r0, r4
 8020716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802071a:	bf00      	nop
 802071c:	08029429 	.word	0x08029429
 8020720:	08029499 	.word	0x08029499

08020724 <__hi0bits>:
 8020724:	0c03      	lsrs	r3, r0, #16
 8020726:	041b      	lsls	r3, r3, #16
 8020728:	b9d3      	cbnz	r3, 8020760 <__hi0bits+0x3c>
 802072a:	0400      	lsls	r0, r0, #16
 802072c:	2310      	movs	r3, #16
 802072e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020732:	bf04      	itt	eq
 8020734:	0200      	lsleq	r0, r0, #8
 8020736:	3308      	addeq	r3, #8
 8020738:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802073c:	bf04      	itt	eq
 802073e:	0100      	lsleq	r0, r0, #4
 8020740:	3304      	addeq	r3, #4
 8020742:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020746:	bf04      	itt	eq
 8020748:	0080      	lsleq	r0, r0, #2
 802074a:	3302      	addeq	r3, #2
 802074c:	2800      	cmp	r0, #0
 802074e:	db05      	blt.n	802075c <__hi0bits+0x38>
 8020750:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020754:	f103 0301 	add.w	r3, r3, #1
 8020758:	bf08      	it	eq
 802075a:	2320      	moveq	r3, #32
 802075c:	4618      	mov	r0, r3
 802075e:	4770      	bx	lr
 8020760:	2300      	movs	r3, #0
 8020762:	e7e4      	b.n	802072e <__hi0bits+0xa>

08020764 <__lo0bits>:
 8020764:	6803      	ldr	r3, [r0, #0]
 8020766:	f013 0207 	ands.w	r2, r3, #7
 802076a:	4601      	mov	r1, r0
 802076c:	d00b      	beq.n	8020786 <__lo0bits+0x22>
 802076e:	07da      	lsls	r2, r3, #31
 8020770:	d424      	bmi.n	80207bc <__lo0bits+0x58>
 8020772:	0798      	lsls	r0, r3, #30
 8020774:	bf49      	itett	mi
 8020776:	085b      	lsrmi	r3, r3, #1
 8020778:	089b      	lsrpl	r3, r3, #2
 802077a:	2001      	movmi	r0, #1
 802077c:	600b      	strmi	r3, [r1, #0]
 802077e:	bf5c      	itt	pl
 8020780:	600b      	strpl	r3, [r1, #0]
 8020782:	2002      	movpl	r0, #2
 8020784:	4770      	bx	lr
 8020786:	b298      	uxth	r0, r3
 8020788:	b9b0      	cbnz	r0, 80207b8 <__lo0bits+0x54>
 802078a:	0c1b      	lsrs	r3, r3, #16
 802078c:	2010      	movs	r0, #16
 802078e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020792:	bf04      	itt	eq
 8020794:	0a1b      	lsreq	r3, r3, #8
 8020796:	3008      	addeq	r0, #8
 8020798:	071a      	lsls	r2, r3, #28
 802079a:	bf04      	itt	eq
 802079c:	091b      	lsreq	r3, r3, #4
 802079e:	3004      	addeq	r0, #4
 80207a0:	079a      	lsls	r2, r3, #30
 80207a2:	bf04      	itt	eq
 80207a4:	089b      	lsreq	r3, r3, #2
 80207a6:	3002      	addeq	r0, #2
 80207a8:	07da      	lsls	r2, r3, #31
 80207aa:	d403      	bmi.n	80207b4 <__lo0bits+0x50>
 80207ac:	085b      	lsrs	r3, r3, #1
 80207ae:	f100 0001 	add.w	r0, r0, #1
 80207b2:	d005      	beq.n	80207c0 <__lo0bits+0x5c>
 80207b4:	600b      	str	r3, [r1, #0]
 80207b6:	4770      	bx	lr
 80207b8:	4610      	mov	r0, r2
 80207ba:	e7e8      	b.n	802078e <__lo0bits+0x2a>
 80207bc:	2000      	movs	r0, #0
 80207be:	4770      	bx	lr
 80207c0:	2020      	movs	r0, #32
 80207c2:	4770      	bx	lr

080207c4 <__i2b>:
 80207c4:	b510      	push	{r4, lr}
 80207c6:	460c      	mov	r4, r1
 80207c8:	2101      	movs	r1, #1
 80207ca:	f7ff ff33 	bl	8020634 <_Balloc>
 80207ce:	4602      	mov	r2, r0
 80207d0:	b928      	cbnz	r0, 80207de <__i2b+0x1a>
 80207d2:	4b05      	ldr	r3, [pc, #20]	; (80207e8 <__i2b+0x24>)
 80207d4:	4805      	ldr	r0, [pc, #20]	; (80207ec <__i2b+0x28>)
 80207d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80207da:	f002 f9eb 	bl	8022bb4 <__assert_func>
 80207de:	2301      	movs	r3, #1
 80207e0:	6144      	str	r4, [r0, #20]
 80207e2:	6103      	str	r3, [r0, #16]
 80207e4:	bd10      	pop	{r4, pc}
 80207e6:	bf00      	nop
 80207e8:	08029429 	.word	0x08029429
 80207ec:	08029499 	.word	0x08029499

080207f0 <__multiply>:
 80207f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207f4:	4614      	mov	r4, r2
 80207f6:	690a      	ldr	r2, [r1, #16]
 80207f8:	6923      	ldr	r3, [r4, #16]
 80207fa:	429a      	cmp	r2, r3
 80207fc:	bfb8      	it	lt
 80207fe:	460b      	movlt	r3, r1
 8020800:	460d      	mov	r5, r1
 8020802:	bfbc      	itt	lt
 8020804:	4625      	movlt	r5, r4
 8020806:	461c      	movlt	r4, r3
 8020808:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802080c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020810:	68ab      	ldr	r3, [r5, #8]
 8020812:	6869      	ldr	r1, [r5, #4]
 8020814:	eb0a 0709 	add.w	r7, sl, r9
 8020818:	42bb      	cmp	r3, r7
 802081a:	b085      	sub	sp, #20
 802081c:	bfb8      	it	lt
 802081e:	3101      	addlt	r1, #1
 8020820:	f7ff ff08 	bl	8020634 <_Balloc>
 8020824:	b930      	cbnz	r0, 8020834 <__multiply+0x44>
 8020826:	4602      	mov	r2, r0
 8020828:	4b42      	ldr	r3, [pc, #264]	; (8020934 <__multiply+0x144>)
 802082a:	4843      	ldr	r0, [pc, #268]	; (8020938 <__multiply+0x148>)
 802082c:	f240 115d 	movw	r1, #349	; 0x15d
 8020830:	f002 f9c0 	bl	8022bb4 <__assert_func>
 8020834:	f100 0614 	add.w	r6, r0, #20
 8020838:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 802083c:	4633      	mov	r3, r6
 802083e:	2200      	movs	r2, #0
 8020840:	4543      	cmp	r3, r8
 8020842:	d31e      	bcc.n	8020882 <__multiply+0x92>
 8020844:	f105 0c14 	add.w	ip, r5, #20
 8020848:	f104 0314 	add.w	r3, r4, #20
 802084c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020850:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020854:	9202      	str	r2, [sp, #8]
 8020856:	ebac 0205 	sub.w	r2, ip, r5
 802085a:	3a15      	subs	r2, #21
 802085c:	f022 0203 	bic.w	r2, r2, #3
 8020860:	3204      	adds	r2, #4
 8020862:	f105 0115 	add.w	r1, r5, #21
 8020866:	458c      	cmp	ip, r1
 8020868:	bf38      	it	cc
 802086a:	2204      	movcc	r2, #4
 802086c:	9201      	str	r2, [sp, #4]
 802086e:	9a02      	ldr	r2, [sp, #8]
 8020870:	9303      	str	r3, [sp, #12]
 8020872:	429a      	cmp	r2, r3
 8020874:	d808      	bhi.n	8020888 <__multiply+0x98>
 8020876:	2f00      	cmp	r7, #0
 8020878:	dc55      	bgt.n	8020926 <__multiply+0x136>
 802087a:	6107      	str	r7, [r0, #16]
 802087c:	b005      	add	sp, #20
 802087e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020882:	f843 2b04 	str.w	r2, [r3], #4
 8020886:	e7db      	b.n	8020840 <__multiply+0x50>
 8020888:	f8b3 a000 	ldrh.w	sl, [r3]
 802088c:	f1ba 0f00 	cmp.w	sl, #0
 8020890:	d020      	beq.n	80208d4 <__multiply+0xe4>
 8020892:	f105 0e14 	add.w	lr, r5, #20
 8020896:	46b1      	mov	r9, r6
 8020898:	2200      	movs	r2, #0
 802089a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802089e:	f8d9 b000 	ldr.w	fp, [r9]
 80208a2:	b2a1      	uxth	r1, r4
 80208a4:	fa1f fb8b 	uxth.w	fp, fp
 80208a8:	fb0a b101 	mla	r1, sl, r1, fp
 80208ac:	4411      	add	r1, r2
 80208ae:	f8d9 2000 	ldr.w	r2, [r9]
 80208b2:	0c24      	lsrs	r4, r4, #16
 80208b4:	0c12      	lsrs	r2, r2, #16
 80208b6:	fb0a 2404 	mla	r4, sl, r4, r2
 80208ba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80208be:	b289      	uxth	r1, r1
 80208c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80208c4:	45f4      	cmp	ip, lr
 80208c6:	f849 1b04 	str.w	r1, [r9], #4
 80208ca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80208ce:	d8e4      	bhi.n	802089a <__multiply+0xaa>
 80208d0:	9901      	ldr	r1, [sp, #4]
 80208d2:	5072      	str	r2, [r6, r1]
 80208d4:	9a03      	ldr	r2, [sp, #12]
 80208d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80208da:	3304      	adds	r3, #4
 80208dc:	f1b9 0f00 	cmp.w	r9, #0
 80208e0:	d01f      	beq.n	8020922 <__multiply+0x132>
 80208e2:	6834      	ldr	r4, [r6, #0]
 80208e4:	f105 0114 	add.w	r1, r5, #20
 80208e8:	46b6      	mov	lr, r6
 80208ea:	f04f 0a00 	mov.w	sl, #0
 80208ee:	880a      	ldrh	r2, [r1, #0]
 80208f0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80208f4:	fb09 b202 	mla	r2, r9, r2, fp
 80208f8:	4492      	add	sl, r2
 80208fa:	b2a4      	uxth	r4, r4
 80208fc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020900:	f84e 4b04 	str.w	r4, [lr], #4
 8020904:	f851 4b04 	ldr.w	r4, [r1], #4
 8020908:	f8be 2000 	ldrh.w	r2, [lr]
 802090c:	0c24      	lsrs	r4, r4, #16
 802090e:	fb09 2404 	mla	r4, r9, r4, r2
 8020912:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8020916:	458c      	cmp	ip, r1
 8020918:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802091c:	d8e7      	bhi.n	80208ee <__multiply+0xfe>
 802091e:	9a01      	ldr	r2, [sp, #4]
 8020920:	50b4      	str	r4, [r6, r2]
 8020922:	3604      	adds	r6, #4
 8020924:	e7a3      	b.n	802086e <__multiply+0x7e>
 8020926:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802092a:	2b00      	cmp	r3, #0
 802092c:	d1a5      	bne.n	802087a <__multiply+0x8a>
 802092e:	3f01      	subs	r7, #1
 8020930:	e7a1      	b.n	8020876 <__multiply+0x86>
 8020932:	bf00      	nop
 8020934:	08029429 	.word	0x08029429
 8020938:	08029499 	.word	0x08029499

0802093c <__pow5mult>:
 802093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020940:	4615      	mov	r5, r2
 8020942:	f012 0203 	ands.w	r2, r2, #3
 8020946:	4606      	mov	r6, r0
 8020948:	460f      	mov	r7, r1
 802094a:	d007      	beq.n	802095c <__pow5mult+0x20>
 802094c:	4c1a      	ldr	r4, [pc, #104]	; (80209b8 <__pow5mult+0x7c>)
 802094e:	3a01      	subs	r2, #1
 8020950:	2300      	movs	r3, #0
 8020952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020956:	f7ff fe9b 	bl	8020690 <__multadd>
 802095a:	4607      	mov	r7, r0
 802095c:	10ad      	asrs	r5, r5, #2
 802095e:	d027      	beq.n	80209b0 <__pow5mult+0x74>
 8020960:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8020962:	b944      	cbnz	r4, 8020976 <__pow5mult+0x3a>
 8020964:	f240 2171 	movw	r1, #625	; 0x271
 8020968:	4630      	mov	r0, r6
 802096a:	f7ff ff2b 	bl	80207c4 <__i2b>
 802096e:	2300      	movs	r3, #0
 8020970:	64b0      	str	r0, [r6, #72]	; 0x48
 8020972:	4604      	mov	r4, r0
 8020974:	6003      	str	r3, [r0, #0]
 8020976:	f04f 0900 	mov.w	r9, #0
 802097a:	07eb      	lsls	r3, r5, #31
 802097c:	d50a      	bpl.n	8020994 <__pow5mult+0x58>
 802097e:	4639      	mov	r1, r7
 8020980:	4622      	mov	r2, r4
 8020982:	4630      	mov	r0, r6
 8020984:	f7ff ff34 	bl	80207f0 <__multiply>
 8020988:	4639      	mov	r1, r7
 802098a:	4680      	mov	r8, r0
 802098c:	4630      	mov	r0, r6
 802098e:	f7ff fe76 	bl	802067e <_Bfree>
 8020992:	4647      	mov	r7, r8
 8020994:	106d      	asrs	r5, r5, #1
 8020996:	d00b      	beq.n	80209b0 <__pow5mult+0x74>
 8020998:	6820      	ldr	r0, [r4, #0]
 802099a:	b938      	cbnz	r0, 80209ac <__pow5mult+0x70>
 802099c:	4622      	mov	r2, r4
 802099e:	4621      	mov	r1, r4
 80209a0:	4630      	mov	r0, r6
 80209a2:	f7ff ff25 	bl	80207f0 <__multiply>
 80209a6:	6020      	str	r0, [r4, #0]
 80209a8:	f8c0 9000 	str.w	r9, [r0]
 80209ac:	4604      	mov	r4, r0
 80209ae:	e7e4      	b.n	802097a <__pow5mult+0x3e>
 80209b0:	4638      	mov	r0, r7
 80209b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80209b6:	bf00      	nop
 80209b8:	080295f0 	.word	0x080295f0

080209bc <__lshift>:
 80209bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209c0:	460c      	mov	r4, r1
 80209c2:	6849      	ldr	r1, [r1, #4]
 80209c4:	6923      	ldr	r3, [r4, #16]
 80209c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80209ca:	68a3      	ldr	r3, [r4, #8]
 80209cc:	4607      	mov	r7, r0
 80209ce:	4691      	mov	r9, r2
 80209d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80209d4:	f108 0601 	add.w	r6, r8, #1
 80209d8:	42b3      	cmp	r3, r6
 80209da:	db0b      	blt.n	80209f4 <__lshift+0x38>
 80209dc:	4638      	mov	r0, r7
 80209de:	f7ff fe29 	bl	8020634 <_Balloc>
 80209e2:	4605      	mov	r5, r0
 80209e4:	b948      	cbnz	r0, 80209fa <__lshift+0x3e>
 80209e6:	4602      	mov	r2, r0
 80209e8:	4b28      	ldr	r3, [pc, #160]	; (8020a8c <__lshift+0xd0>)
 80209ea:	4829      	ldr	r0, [pc, #164]	; (8020a90 <__lshift+0xd4>)
 80209ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80209f0:	f002 f8e0 	bl	8022bb4 <__assert_func>
 80209f4:	3101      	adds	r1, #1
 80209f6:	005b      	lsls	r3, r3, #1
 80209f8:	e7ee      	b.n	80209d8 <__lshift+0x1c>
 80209fa:	2300      	movs	r3, #0
 80209fc:	f100 0114 	add.w	r1, r0, #20
 8020a00:	f100 0210 	add.w	r2, r0, #16
 8020a04:	4618      	mov	r0, r3
 8020a06:	4553      	cmp	r3, sl
 8020a08:	db33      	blt.n	8020a72 <__lshift+0xb6>
 8020a0a:	6920      	ldr	r0, [r4, #16]
 8020a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020a10:	f104 0314 	add.w	r3, r4, #20
 8020a14:	f019 091f 	ands.w	r9, r9, #31
 8020a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020a1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020a20:	d02b      	beq.n	8020a7a <__lshift+0xbe>
 8020a22:	f1c9 0e20 	rsb	lr, r9, #32
 8020a26:	468a      	mov	sl, r1
 8020a28:	2200      	movs	r2, #0
 8020a2a:	6818      	ldr	r0, [r3, #0]
 8020a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8020a30:	4302      	orrs	r2, r0
 8020a32:	f84a 2b04 	str.w	r2, [sl], #4
 8020a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a3a:	459c      	cmp	ip, r3
 8020a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8020a40:	d8f3      	bhi.n	8020a2a <__lshift+0x6e>
 8020a42:	ebac 0304 	sub.w	r3, ip, r4
 8020a46:	3b15      	subs	r3, #21
 8020a48:	f023 0303 	bic.w	r3, r3, #3
 8020a4c:	3304      	adds	r3, #4
 8020a4e:	f104 0015 	add.w	r0, r4, #21
 8020a52:	4584      	cmp	ip, r0
 8020a54:	bf38      	it	cc
 8020a56:	2304      	movcc	r3, #4
 8020a58:	50ca      	str	r2, [r1, r3]
 8020a5a:	b10a      	cbz	r2, 8020a60 <__lshift+0xa4>
 8020a5c:	f108 0602 	add.w	r6, r8, #2
 8020a60:	3e01      	subs	r6, #1
 8020a62:	4638      	mov	r0, r7
 8020a64:	612e      	str	r6, [r5, #16]
 8020a66:	4621      	mov	r1, r4
 8020a68:	f7ff fe09 	bl	802067e <_Bfree>
 8020a6c:	4628      	mov	r0, r5
 8020a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8020a76:	3301      	adds	r3, #1
 8020a78:	e7c5      	b.n	8020a06 <__lshift+0x4a>
 8020a7a:	3904      	subs	r1, #4
 8020a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8020a84:	459c      	cmp	ip, r3
 8020a86:	d8f9      	bhi.n	8020a7c <__lshift+0xc0>
 8020a88:	e7ea      	b.n	8020a60 <__lshift+0xa4>
 8020a8a:	bf00      	nop
 8020a8c:	08029429 	.word	0x08029429
 8020a90:	08029499 	.word	0x08029499

08020a94 <__mcmp>:
 8020a94:	b530      	push	{r4, r5, lr}
 8020a96:	6902      	ldr	r2, [r0, #16]
 8020a98:	690c      	ldr	r4, [r1, #16]
 8020a9a:	1b12      	subs	r2, r2, r4
 8020a9c:	d10e      	bne.n	8020abc <__mcmp+0x28>
 8020a9e:	f100 0314 	add.w	r3, r0, #20
 8020aa2:	3114      	adds	r1, #20
 8020aa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020aa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020aac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020ab0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020ab4:	42a5      	cmp	r5, r4
 8020ab6:	d003      	beq.n	8020ac0 <__mcmp+0x2c>
 8020ab8:	d305      	bcc.n	8020ac6 <__mcmp+0x32>
 8020aba:	2201      	movs	r2, #1
 8020abc:	4610      	mov	r0, r2
 8020abe:	bd30      	pop	{r4, r5, pc}
 8020ac0:	4283      	cmp	r3, r0
 8020ac2:	d3f3      	bcc.n	8020aac <__mcmp+0x18>
 8020ac4:	e7fa      	b.n	8020abc <__mcmp+0x28>
 8020ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8020aca:	e7f7      	b.n	8020abc <__mcmp+0x28>

08020acc <__mdiff>:
 8020acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ad0:	460c      	mov	r4, r1
 8020ad2:	4606      	mov	r6, r0
 8020ad4:	4611      	mov	r1, r2
 8020ad6:	4620      	mov	r0, r4
 8020ad8:	4617      	mov	r7, r2
 8020ada:	f7ff ffdb 	bl	8020a94 <__mcmp>
 8020ade:	1e05      	subs	r5, r0, #0
 8020ae0:	d110      	bne.n	8020b04 <__mdiff+0x38>
 8020ae2:	4629      	mov	r1, r5
 8020ae4:	4630      	mov	r0, r6
 8020ae6:	f7ff fda5 	bl	8020634 <_Balloc>
 8020aea:	b930      	cbnz	r0, 8020afa <__mdiff+0x2e>
 8020aec:	4b39      	ldr	r3, [pc, #228]	; (8020bd4 <__mdiff+0x108>)
 8020aee:	4602      	mov	r2, r0
 8020af0:	f240 2132 	movw	r1, #562	; 0x232
 8020af4:	4838      	ldr	r0, [pc, #224]	; (8020bd8 <__mdiff+0x10c>)
 8020af6:	f002 f85d 	bl	8022bb4 <__assert_func>
 8020afa:	2301      	movs	r3, #1
 8020afc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b04:	bfa4      	itt	ge
 8020b06:	463b      	movge	r3, r7
 8020b08:	4627      	movge	r7, r4
 8020b0a:	4630      	mov	r0, r6
 8020b0c:	6879      	ldr	r1, [r7, #4]
 8020b0e:	bfa6      	itte	ge
 8020b10:	461c      	movge	r4, r3
 8020b12:	2500      	movge	r5, #0
 8020b14:	2501      	movlt	r5, #1
 8020b16:	f7ff fd8d 	bl	8020634 <_Balloc>
 8020b1a:	b920      	cbnz	r0, 8020b26 <__mdiff+0x5a>
 8020b1c:	4b2d      	ldr	r3, [pc, #180]	; (8020bd4 <__mdiff+0x108>)
 8020b1e:	4602      	mov	r2, r0
 8020b20:	f44f 7110 	mov.w	r1, #576	; 0x240
 8020b24:	e7e6      	b.n	8020af4 <__mdiff+0x28>
 8020b26:	693e      	ldr	r6, [r7, #16]
 8020b28:	60c5      	str	r5, [r0, #12]
 8020b2a:	6925      	ldr	r5, [r4, #16]
 8020b2c:	f107 0114 	add.w	r1, r7, #20
 8020b30:	f104 0914 	add.w	r9, r4, #20
 8020b34:	f100 0e14 	add.w	lr, r0, #20
 8020b38:	f107 0210 	add.w	r2, r7, #16
 8020b3c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020b40:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020b44:	46f2      	mov	sl, lr
 8020b46:	2700      	movs	r7, #0
 8020b48:	f859 3b04 	ldr.w	r3, [r9], #4
 8020b4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020b50:	fa1f f883 	uxth.w	r8, r3
 8020b54:	fa17 f78b 	uxtah	r7, r7, fp
 8020b58:	0c1b      	lsrs	r3, r3, #16
 8020b5a:	eba7 0808 	sub.w	r8, r7, r8
 8020b5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020b62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8020b66:	fa1f f888 	uxth.w	r8, r8
 8020b6a:	141f      	asrs	r7, r3, #16
 8020b6c:	454d      	cmp	r5, r9
 8020b6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020b72:	f84a 3b04 	str.w	r3, [sl], #4
 8020b76:	d8e7      	bhi.n	8020b48 <__mdiff+0x7c>
 8020b78:	1b2b      	subs	r3, r5, r4
 8020b7a:	3b15      	subs	r3, #21
 8020b7c:	f023 0303 	bic.w	r3, r3, #3
 8020b80:	3304      	adds	r3, #4
 8020b82:	3415      	adds	r4, #21
 8020b84:	42a5      	cmp	r5, r4
 8020b86:	bf38      	it	cc
 8020b88:	2304      	movcc	r3, #4
 8020b8a:	4419      	add	r1, r3
 8020b8c:	4473      	add	r3, lr
 8020b8e:	469e      	mov	lr, r3
 8020b90:	460d      	mov	r5, r1
 8020b92:	4565      	cmp	r5, ip
 8020b94:	d30e      	bcc.n	8020bb4 <__mdiff+0xe8>
 8020b96:	f10c 0203 	add.w	r2, ip, #3
 8020b9a:	1a52      	subs	r2, r2, r1
 8020b9c:	f022 0203 	bic.w	r2, r2, #3
 8020ba0:	3903      	subs	r1, #3
 8020ba2:	458c      	cmp	ip, r1
 8020ba4:	bf38      	it	cc
 8020ba6:	2200      	movcc	r2, #0
 8020ba8:	441a      	add	r2, r3
 8020baa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020bae:	b17b      	cbz	r3, 8020bd0 <__mdiff+0x104>
 8020bb0:	6106      	str	r6, [r0, #16]
 8020bb2:	e7a5      	b.n	8020b00 <__mdiff+0x34>
 8020bb4:	f855 8b04 	ldr.w	r8, [r5], #4
 8020bb8:	fa17 f488 	uxtah	r4, r7, r8
 8020bbc:	1422      	asrs	r2, r4, #16
 8020bbe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020bc2:	b2a4      	uxth	r4, r4
 8020bc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020bc8:	f84e 4b04 	str.w	r4, [lr], #4
 8020bcc:	1417      	asrs	r7, r2, #16
 8020bce:	e7e0      	b.n	8020b92 <__mdiff+0xc6>
 8020bd0:	3e01      	subs	r6, #1
 8020bd2:	e7ea      	b.n	8020baa <__mdiff+0xde>
 8020bd4:	08029429 	.word	0x08029429
 8020bd8:	08029499 	.word	0x08029499

08020bdc <__d2b>:
 8020bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020be0:	4689      	mov	r9, r1
 8020be2:	2101      	movs	r1, #1
 8020be4:	ec57 6b10 	vmov	r6, r7, d0
 8020be8:	4690      	mov	r8, r2
 8020bea:	f7ff fd23 	bl	8020634 <_Balloc>
 8020bee:	4604      	mov	r4, r0
 8020bf0:	b930      	cbnz	r0, 8020c00 <__d2b+0x24>
 8020bf2:	4602      	mov	r2, r0
 8020bf4:	4b25      	ldr	r3, [pc, #148]	; (8020c8c <__d2b+0xb0>)
 8020bf6:	4826      	ldr	r0, [pc, #152]	; (8020c90 <__d2b+0xb4>)
 8020bf8:	f240 310a 	movw	r1, #778	; 0x30a
 8020bfc:	f001 ffda 	bl	8022bb4 <__assert_func>
 8020c00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020c04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020c08:	bb35      	cbnz	r5, 8020c58 <__d2b+0x7c>
 8020c0a:	2e00      	cmp	r6, #0
 8020c0c:	9301      	str	r3, [sp, #4]
 8020c0e:	d028      	beq.n	8020c62 <__d2b+0x86>
 8020c10:	4668      	mov	r0, sp
 8020c12:	9600      	str	r6, [sp, #0]
 8020c14:	f7ff fda6 	bl	8020764 <__lo0bits>
 8020c18:	9900      	ldr	r1, [sp, #0]
 8020c1a:	b300      	cbz	r0, 8020c5e <__d2b+0x82>
 8020c1c:	9a01      	ldr	r2, [sp, #4]
 8020c1e:	f1c0 0320 	rsb	r3, r0, #32
 8020c22:	fa02 f303 	lsl.w	r3, r2, r3
 8020c26:	430b      	orrs	r3, r1
 8020c28:	40c2      	lsrs	r2, r0
 8020c2a:	6163      	str	r3, [r4, #20]
 8020c2c:	9201      	str	r2, [sp, #4]
 8020c2e:	9b01      	ldr	r3, [sp, #4]
 8020c30:	61a3      	str	r3, [r4, #24]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	bf14      	ite	ne
 8020c36:	2202      	movne	r2, #2
 8020c38:	2201      	moveq	r2, #1
 8020c3a:	6122      	str	r2, [r4, #16]
 8020c3c:	b1d5      	cbz	r5, 8020c74 <__d2b+0x98>
 8020c3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020c42:	4405      	add	r5, r0
 8020c44:	f8c9 5000 	str.w	r5, [r9]
 8020c48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020c4c:	f8c8 0000 	str.w	r0, [r8]
 8020c50:	4620      	mov	r0, r4
 8020c52:	b003      	add	sp, #12
 8020c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020c5c:	e7d5      	b.n	8020c0a <__d2b+0x2e>
 8020c5e:	6161      	str	r1, [r4, #20]
 8020c60:	e7e5      	b.n	8020c2e <__d2b+0x52>
 8020c62:	a801      	add	r0, sp, #4
 8020c64:	f7ff fd7e 	bl	8020764 <__lo0bits>
 8020c68:	9b01      	ldr	r3, [sp, #4]
 8020c6a:	6163      	str	r3, [r4, #20]
 8020c6c:	2201      	movs	r2, #1
 8020c6e:	6122      	str	r2, [r4, #16]
 8020c70:	3020      	adds	r0, #32
 8020c72:	e7e3      	b.n	8020c3c <__d2b+0x60>
 8020c74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020c78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020c7c:	f8c9 0000 	str.w	r0, [r9]
 8020c80:	6918      	ldr	r0, [r3, #16]
 8020c82:	f7ff fd4f 	bl	8020724 <__hi0bits>
 8020c86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020c8a:	e7df      	b.n	8020c4c <__d2b+0x70>
 8020c8c:	08029429 	.word	0x08029429
 8020c90:	08029499 	.word	0x08029499

08020c94 <frexp>:
 8020c94:	b570      	push	{r4, r5, r6, lr}
 8020c96:	2100      	movs	r1, #0
 8020c98:	ec55 4b10 	vmov	r4, r5, d0
 8020c9c:	6001      	str	r1, [r0, #0]
 8020c9e:	4916      	ldr	r1, [pc, #88]	; (8020cf8 <frexp+0x64>)
 8020ca0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020ca4:	428a      	cmp	r2, r1
 8020ca6:	4606      	mov	r6, r0
 8020ca8:	462b      	mov	r3, r5
 8020caa:	dc22      	bgt.n	8020cf2 <frexp+0x5e>
 8020cac:	ee10 1a10 	vmov	r1, s0
 8020cb0:	4311      	orrs	r1, r2
 8020cb2:	d01e      	beq.n	8020cf2 <frexp+0x5e>
 8020cb4:	4911      	ldr	r1, [pc, #68]	; (8020cfc <frexp+0x68>)
 8020cb6:	4029      	ands	r1, r5
 8020cb8:	b969      	cbnz	r1, 8020cd6 <frexp+0x42>
 8020cba:	4b11      	ldr	r3, [pc, #68]	; (8020d00 <frexp+0x6c>)
 8020cbc:	2200      	movs	r2, #0
 8020cbe:	ee10 0a10 	vmov	r0, s0
 8020cc2:	4629      	mov	r1, r5
 8020cc4:	f7df fcc8 	bl	8000658 <__aeabi_dmul>
 8020cc8:	460b      	mov	r3, r1
 8020cca:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8020cce:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8020cd2:	4604      	mov	r4, r0
 8020cd4:	6031      	str	r1, [r6, #0]
 8020cd6:	6831      	ldr	r1, [r6, #0]
 8020cd8:	1512      	asrs	r2, r2, #20
 8020cda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020cde:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8020ce2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020ce6:	440a      	add	r2, r1
 8020ce8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8020cec:	6032      	str	r2, [r6, #0]
 8020cee:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8020cf2:	ec45 4b10 	vmov	d0, r4, r5
 8020cf6:	bd70      	pop	{r4, r5, r6, pc}
 8020cf8:	7fefffff 	.word	0x7fefffff
 8020cfc:	7ff00000 	.word	0x7ff00000
 8020d00:	43500000 	.word	0x43500000

08020d04 <_sbrk_r>:
 8020d04:	b538      	push	{r3, r4, r5, lr}
 8020d06:	4d06      	ldr	r5, [pc, #24]	; (8020d20 <_sbrk_r+0x1c>)
 8020d08:	2300      	movs	r3, #0
 8020d0a:	4604      	mov	r4, r0
 8020d0c:	4608      	mov	r0, r1
 8020d0e:	602b      	str	r3, [r5, #0]
 8020d10:	f7e3 f9e4 	bl	80040dc <_sbrk>
 8020d14:	1c43      	adds	r3, r0, #1
 8020d16:	d102      	bne.n	8020d1e <_sbrk_r+0x1a>
 8020d18:	682b      	ldr	r3, [r5, #0]
 8020d1a:	b103      	cbz	r3, 8020d1e <_sbrk_r+0x1a>
 8020d1c:	6023      	str	r3, [r4, #0]
 8020d1e:	bd38      	pop	{r3, r4, r5, pc}
 8020d20:	2000be70 	.word	0x2000be70

08020d24 <siscanf>:
 8020d24:	b40e      	push	{r1, r2, r3}
 8020d26:	b510      	push	{r4, lr}
 8020d28:	b09f      	sub	sp, #124	; 0x7c
 8020d2a:	ac21      	add	r4, sp, #132	; 0x84
 8020d2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020d30:	f854 2b04 	ldr.w	r2, [r4], #4
 8020d34:	9201      	str	r2, [sp, #4]
 8020d36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020d3a:	9004      	str	r0, [sp, #16]
 8020d3c:	9008      	str	r0, [sp, #32]
 8020d3e:	f7df fa71 	bl	8000224 <strlen>
 8020d42:	4b0c      	ldr	r3, [pc, #48]	; (8020d74 <siscanf+0x50>)
 8020d44:	9005      	str	r0, [sp, #20]
 8020d46:	9009      	str	r0, [sp, #36]	; 0x24
 8020d48:	930c      	str	r3, [sp, #48]	; 0x30
 8020d4a:	480b      	ldr	r0, [pc, #44]	; (8020d78 <siscanf+0x54>)
 8020d4c:	9a01      	ldr	r2, [sp, #4]
 8020d4e:	6800      	ldr	r0, [r0, #0]
 8020d50:	9403      	str	r4, [sp, #12]
 8020d52:	2300      	movs	r3, #0
 8020d54:	9310      	str	r3, [sp, #64]	; 0x40
 8020d56:	9315      	str	r3, [sp, #84]	; 0x54
 8020d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020d5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020d60:	a904      	add	r1, sp, #16
 8020d62:	4623      	mov	r3, r4
 8020d64:	f000 f9ee 	bl	8021144 <__ssvfiscanf_r>
 8020d68:	b01f      	add	sp, #124	; 0x7c
 8020d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d6e:	b003      	add	sp, #12
 8020d70:	4770      	bx	lr
 8020d72:	bf00      	nop
 8020d74:	08020d9f 	.word	0x08020d9f
 8020d78:	20000038 	.word	0x20000038

08020d7c <__sread>:
 8020d7c:	b510      	push	{r4, lr}
 8020d7e:	460c      	mov	r4, r1
 8020d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d84:	f002 fa12 	bl	80231ac <_read_r>
 8020d88:	2800      	cmp	r0, #0
 8020d8a:	bfab      	itete	ge
 8020d8c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8020d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8020d90:	181b      	addge	r3, r3, r0
 8020d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d96:	bfac      	ite	ge
 8020d98:	6523      	strge	r3, [r4, #80]	; 0x50
 8020d9a:	81a3      	strhlt	r3, [r4, #12]
 8020d9c:	bd10      	pop	{r4, pc}

08020d9e <__seofread>:
 8020d9e:	2000      	movs	r0, #0
 8020da0:	4770      	bx	lr

08020da2 <__swrite>:
 8020da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020da6:	461f      	mov	r7, r3
 8020da8:	898b      	ldrh	r3, [r1, #12]
 8020daa:	05db      	lsls	r3, r3, #23
 8020dac:	4605      	mov	r5, r0
 8020dae:	460c      	mov	r4, r1
 8020db0:	4616      	mov	r6, r2
 8020db2:	d505      	bpl.n	8020dc0 <__swrite+0x1e>
 8020db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020db8:	2302      	movs	r3, #2
 8020dba:	2200      	movs	r2, #0
 8020dbc:	f002 f9b8 	bl	8023130 <_lseek_r>
 8020dc0:	89a3      	ldrh	r3, [r4, #12]
 8020dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020dca:	81a3      	strh	r3, [r4, #12]
 8020dcc:	4632      	mov	r2, r6
 8020dce:	463b      	mov	r3, r7
 8020dd0:	4628      	mov	r0, r5
 8020dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020dd6:	f001 be9b 	b.w	8022b10 <_write_r>

08020dda <__sseek>:
 8020dda:	b510      	push	{r4, lr}
 8020ddc:	460c      	mov	r4, r1
 8020dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020de2:	f002 f9a5 	bl	8023130 <_lseek_r>
 8020de6:	1c43      	adds	r3, r0, #1
 8020de8:	89a3      	ldrh	r3, [r4, #12]
 8020dea:	bf15      	itete	ne
 8020dec:	6520      	strne	r0, [r4, #80]	; 0x50
 8020dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020df6:	81a3      	strheq	r3, [r4, #12]
 8020df8:	bf18      	it	ne
 8020dfa:	81a3      	strhne	r3, [r4, #12]
 8020dfc:	bd10      	pop	{r4, pc}

08020dfe <__sclose>:
 8020dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e02:	f001 bf23 	b.w	8022c4c <_close_r>

08020e06 <strcpy>:
 8020e06:	4603      	mov	r3, r0
 8020e08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e0c:	f803 2b01 	strb.w	r2, [r3], #1
 8020e10:	2a00      	cmp	r2, #0
 8020e12:	d1f9      	bne.n	8020e08 <strcpy+0x2>
 8020e14:	4770      	bx	lr
	...

08020e18 <_strtoul_l.isra.0>:
 8020e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020e1c:	4e3b      	ldr	r6, [pc, #236]	; (8020f0c <_strtoul_l.isra.0+0xf4>)
 8020e1e:	4686      	mov	lr, r0
 8020e20:	468c      	mov	ip, r1
 8020e22:	4660      	mov	r0, ip
 8020e24:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020e28:	5da5      	ldrb	r5, [r4, r6]
 8020e2a:	f015 0508 	ands.w	r5, r5, #8
 8020e2e:	d1f8      	bne.n	8020e22 <_strtoul_l.isra.0+0xa>
 8020e30:	2c2d      	cmp	r4, #45	; 0x2d
 8020e32:	d134      	bne.n	8020e9e <_strtoul_l.isra.0+0x86>
 8020e34:	f89c 4000 	ldrb.w	r4, [ip]
 8020e38:	f04f 0801 	mov.w	r8, #1
 8020e3c:	f100 0c02 	add.w	ip, r0, #2
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d05e      	beq.n	8020f02 <_strtoul_l.isra.0+0xea>
 8020e44:	2b10      	cmp	r3, #16
 8020e46:	d10c      	bne.n	8020e62 <_strtoul_l.isra.0+0x4a>
 8020e48:	2c30      	cmp	r4, #48	; 0x30
 8020e4a:	d10a      	bne.n	8020e62 <_strtoul_l.isra.0+0x4a>
 8020e4c:	f89c 0000 	ldrb.w	r0, [ip]
 8020e50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020e54:	2858      	cmp	r0, #88	; 0x58
 8020e56:	d14f      	bne.n	8020ef8 <_strtoul_l.isra.0+0xe0>
 8020e58:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020e5c:	2310      	movs	r3, #16
 8020e5e:	f10c 0c02 	add.w	ip, ip, #2
 8020e62:	f04f 37ff 	mov.w	r7, #4294967295
 8020e66:	2500      	movs	r5, #0
 8020e68:	fbb7 f7f3 	udiv	r7, r7, r3
 8020e6c:	fb03 f907 	mul.w	r9, r3, r7
 8020e70:	ea6f 0909 	mvn.w	r9, r9
 8020e74:	4628      	mov	r0, r5
 8020e76:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020e7a:	2e09      	cmp	r6, #9
 8020e7c:	d818      	bhi.n	8020eb0 <_strtoul_l.isra.0+0x98>
 8020e7e:	4634      	mov	r4, r6
 8020e80:	42a3      	cmp	r3, r4
 8020e82:	dd24      	ble.n	8020ece <_strtoul_l.isra.0+0xb6>
 8020e84:	2d00      	cmp	r5, #0
 8020e86:	db1f      	blt.n	8020ec8 <_strtoul_l.isra.0+0xb0>
 8020e88:	4287      	cmp	r7, r0
 8020e8a:	d31d      	bcc.n	8020ec8 <_strtoul_l.isra.0+0xb0>
 8020e8c:	d101      	bne.n	8020e92 <_strtoul_l.isra.0+0x7a>
 8020e8e:	45a1      	cmp	r9, r4
 8020e90:	db1a      	blt.n	8020ec8 <_strtoul_l.isra.0+0xb0>
 8020e92:	fb00 4003 	mla	r0, r0, r3, r4
 8020e96:	2501      	movs	r5, #1
 8020e98:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020e9c:	e7eb      	b.n	8020e76 <_strtoul_l.isra.0+0x5e>
 8020e9e:	2c2b      	cmp	r4, #43	; 0x2b
 8020ea0:	bf08      	it	eq
 8020ea2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020ea6:	46a8      	mov	r8, r5
 8020ea8:	bf08      	it	eq
 8020eaa:	f100 0c02 	addeq.w	ip, r0, #2
 8020eae:	e7c7      	b.n	8020e40 <_strtoul_l.isra.0+0x28>
 8020eb0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020eb4:	2e19      	cmp	r6, #25
 8020eb6:	d801      	bhi.n	8020ebc <_strtoul_l.isra.0+0xa4>
 8020eb8:	3c37      	subs	r4, #55	; 0x37
 8020eba:	e7e1      	b.n	8020e80 <_strtoul_l.isra.0+0x68>
 8020ebc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020ec0:	2e19      	cmp	r6, #25
 8020ec2:	d804      	bhi.n	8020ece <_strtoul_l.isra.0+0xb6>
 8020ec4:	3c57      	subs	r4, #87	; 0x57
 8020ec6:	e7db      	b.n	8020e80 <_strtoul_l.isra.0+0x68>
 8020ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8020ecc:	e7e4      	b.n	8020e98 <_strtoul_l.isra.0+0x80>
 8020ece:	2d00      	cmp	r5, #0
 8020ed0:	da07      	bge.n	8020ee2 <_strtoul_l.isra.0+0xca>
 8020ed2:	2322      	movs	r3, #34	; 0x22
 8020ed4:	f8ce 3000 	str.w	r3, [lr]
 8020ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8020edc:	b942      	cbnz	r2, 8020ef0 <_strtoul_l.isra.0+0xd8>
 8020ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020ee2:	f1b8 0f00 	cmp.w	r8, #0
 8020ee6:	d000      	beq.n	8020eea <_strtoul_l.isra.0+0xd2>
 8020ee8:	4240      	negs	r0, r0
 8020eea:	2a00      	cmp	r2, #0
 8020eec:	d0f7      	beq.n	8020ede <_strtoul_l.isra.0+0xc6>
 8020eee:	b10d      	cbz	r5, 8020ef4 <_strtoul_l.isra.0+0xdc>
 8020ef0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020ef4:	6011      	str	r1, [r2, #0]
 8020ef6:	e7f2      	b.n	8020ede <_strtoul_l.isra.0+0xc6>
 8020ef8:	2430      	movs	r4, #48	; 0x30
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d1b1      	bne.n	8020e62 <_strtoul_l.isra.0+0x4a>
 8020efe:	2308      	movs	r3, #8
 8020f00:	e7af      	b.n	8020e62 <_strtoul_l.isra.0+0x4a>
 8020f02:	2c30      	cmp	r4, #48	; 0x30
 8020f04:	d0a2      	beq.n	8020e4c <_strtoul_l.isra.0+0x34>
 8020f06:	230a      	movs	r3, #10
 8020f08:	e7ab      	b.n	8020e62 <_strtoul_l.isra.0+0x4a>
 8020f0a:	bf00      	nop
 8020f0c:	080291a5 	.word	0x080291a5

08020f10 <_strtoul_r>:
 8020f10:	f7ff bf82 	b.w	8020e18 <_strtoul_l.isra.0>

08020f14 <strtoul>:
 8020f14:	4613      	mov	r3, r2
 8020f16:	460a      	mov	r2, r1
 8020f18:	4601      	mov	r1, r0
 8020f1a:	4802      	ldr	r0, [pc, #8]	; (8020f24 <strtoul+0x10>)
 8020f1c:	6800      	ldr	r0, [r0, #0]
 8020f1e:	f7ff bf7b 	b.w	8020e18 <_strtoul_l.isra.0>
 8020f22:	bf00      	nop
 8020f24:	20000038 	.word	0x20000038

08020f28 <__ssprint_r>:
 8020f28:	6893      	ldr	r3, [r2, #8]
 8020f2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f2e:	4680      	mov	r8, r0
 8020f30:	460c      	mov	r4, r1
 8020f32:	4617      	mov	r7, r2
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d061      	beq.n	8020ffc <__ssprint_r+0xd4>
 8020f38:	2300      	movs	r3, #0
 8020f3a:	f8d2 a000 	ldr.w	sl, [r2]
 8020f3e:	9301      	str	r3, [sp, #4]
 8020f40:	469b      	mov	fp, r3
 8020f42:	f1bb 0f00 	cmp.w	fp, #0
 8020f46:	d02b      	beq.n	8020fa0 <__ssprint_r+0x78>
 8020f48:	68a6      	ldr	r6, [r4, #8]
 8020f4a:	45b3      	cmp	fp, r6
 8020f4c:	d342      	bcc.n	8020fd4 <__ssprint_r+0xac>
 8020f4e:	89a2      	ldrh	r2, [r4, #12]
 8020f50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020f54:	d03e      	beq.n	8020fd4 <__ssprint_r+0xac>
 8020f56:	6825      	ldr	r5, [r4, #0]
 8020f58:	6921      	ldr	r1, [r4, #16]
 8020f5a:	eba5 0901 	sub.w	r9, r5, r1
 8020f5e:	6965      	ldr	r5, [r4, #20]
 8020f60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020f68:	f109 0001 	add.w	r0, r9, #1
 8020f6c:	106d      	asrs	r5, r5, #1
 8020f6e:	4458      	add	r0, fp
 8020f70:	4285      	cmp	r5, r0
 8020f72:	bf38      	it	cc
 8020f74:	4605      	movcc	r5, r0
 8020f76:	0553      	lsls	r3, r2, #21
 8020f78:	d545      	bpl.n	8021006 <__ssprint_r+0xde>
 8020f7a:	4629      	mov	r1, r5
 8020f7c:	4640      	mov	r0, r8
 8020f7e:	f7ff f90b 	bl	8020198 <_malloc_r>
 8020f82:	4606      	mov	r6, r0
 8020f84:	b9a0      	cbnz	r0, 8020fb0 <__ssprint_r+0x88>
 8020f86:	230c      	movs	r3, #12
 8020f88:	f8c8 3000 	str.w	r3, [r8]
 8020f8c:	89a3      	ldrh	r3, [r4, #12]
 8020f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f92:	81a3      	strh	r3, [r4, #12]
 8020f94:	2300      	movs	r3, #0
 8020f96:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8020f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8020f9e:	e02f      	b.n	8021000 <__ssprint_r+0xd8>
 8020fa0:	f8da 3000 	ldr.w	r3, [sl]
 8020fa4:	f8da b004 	ldr.w	fp, [sl, #4]
 8020fa8:	9301      	str	r3, [sp, #4]
 8020faa:	f10a 0a08 	add.w	sl, sl, #8
 8020fae:	e7c8      	b.n	8020f42 <__ssprint_r+0x1a>
 8020fb0:	464a      	mov	r2, r9
 8020fb2:	6921      	ldr	r1, [r4, #16]
 8020fb4:	f7fa fba4 	bl	801b700 <memcpy>
 8020fb8:	89a2      	ldrh	r2, [r4, #12]
 8020fba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8020fbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020fc2:	81a2      	strh	r2, [r4, #12]
 8020fc4:	6126      	str	r6, [r4, #16]
 8020fc6:	6165      	str	r5, [r4, #20]
 8020fc8:	444e      	add	r6, r9
 8020fca:	eba5 0509 	sub.w	r5, r5, r9
 8020fce:	6026      	str	r6, [r4, #0]
 8020fd0:	60a5      	str	r5, [r4, #8]
 8020fd2:	465e      	mov	r6, fp
 8020fd4:	455e      	cmp	r6, fp
 8020fd6:	bf28      	it	cs
 8020fd8:	465e      	movcs	r6, fp
 8020fda:	4632      	mov	r2, r6
 8020fdc:	9901      	ldr	r1, [sp, #4]
 8020fde:	6820      	ldr	r0, [r4, #0]
 8020fe0:	f7fa fb9c 	bl	801b71c <memmove>
 8020fe4:	68a2      	ldr	r2, [r4, #8]
 8020fe6:	1b92      	subs	r2, r2, r6
 8020fe8:	60a2      	str	r2, [r4, #8]
 8020fea:	6822      	ldr	r2, [r4, #0]
 8020fec:	4432      	add	r2, r6
 8020fee:	6022      	str	r2, [r4, #0]
 8020ff0:	68ba      	ldr	r2, [r7, #8]
 8020ff2:	eba2 030b 	sub.w	r3, r2, fp
 8020ff6:	60bb      	str	r3, [r7, #8]
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d1d1      	bne.n	8020fa0 <__ssprint_r+0x78>
 8020ffc:	2000      	movs	r0, #0
 8020ffe:	6078      	str	r0, [r7, #4]
 8021000:	b003      	add	sp, #12
 8021002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021006:	462a      	mov	r2, r5
 8021008:	4640      	mov	r0, r8
 802100a:	f002 f8e9 	bl	80231e0 <_realloc_r>
 802100e:	4606      	mov	r6, r0
 8021010:	2800      	cmp	r0, #0
 8021012:	d1d7      	bne.n	8020fc4 <__ssprint_r+0x9c>
 8021014:	6921      	ldr	r1, [r4, #16]
 8021016:	4640      	mov	r0, r8
 8021018:	f7fe fe62 	bl	801fce0 <_free_r>
 802101c:	e7b3      	b.n	8020f86 <__ssprint_r+0x5e>

0802101e <_sungetc_r>:
 802101e:	b538      	push	{r3, r4, r5, lr}
 8021020:	1c4b      	adds	r3, r1, #1
 8021022:	4614      	mov	r4, r2
 8021024:	d103      	bne.n	802102e <_sungetc_r+0x10>
 8021026:	f04f 35ff 	mov.w	r5, #4294967295
 802102a:	4628      	mov	r0, r5
 802102c:	bd38      	pop	{r3, r4, r5, pc}
 802102e:	8993      	ldrh	r3, [r2, #12]
 8021030:	f023 0320 	bic.w	r3, r3, #32
 8021034:	8193      	strh	r3, [r2, #12]
 8021036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021038:	6852      	ldr	r2, [r2, #4]
 802103a:	b2cd      	uxtb	r5, r1
 802103c:	b18b      	cbz	r3, 8021062 <_sungetc_r+0x44>
 802103e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021040:	4293      	cmp	r3, r2
 8021042:	dd08      	ble.n	8021056 <_sungetc_r+0x38>
 8021044:	6823      	ldr	r3, [r4, #0]
 8021046:	1e5a      	subs	r2, r3, #1
 8021048:	6022      	str	r2, [r4, #0]
 802104a:	f803 5c01 	strb.w	r5, [r3, #-1]
 802104e:	6863      	ldr	r3, [r4, #4]
 8021050:	3301      	adds	r3, #1
 8021052:	6063      	str	r3, [r4, #4]
 8021054:	e7e9      	b.n	802102a <_sungetc_r+0xc>
 8021056:	4621      	mov	r1, r4
 8021058:	f001 f825 	bl	80220a6 <__submore>
 802105c:	2800      	cmp	r0, #0
 802105e:	d0f1      	beq.n	8021044 <_sungetc_r+0x26>
 8021060:	e7e1      	b.n	8021026 <_sungetc_r+0x8>
 8021062:	6921      	ldr	r1, [r4, #16]
 8021064:	6823      	ldr	r3, [r4, #0]
 8021066:	b151      	cbz	r1, 802107e <_sungetc_r+0x60>
 8021068:	4299      	cmp	r1, r3
 802106a:	d208      	bcs.n	802107e <_sungetc_r+0x60>
 802106c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8021070:	42a9      	cmp	r1, r5
 8021072:	d104      	bne.n	802107e <_sungetc_r+0x60>
 8021074:	3b01      	subs	r3, #1
 8021076:	3201      	adds	r2, #1
 8021078:	6023      	str	r3, [r4, #0]
 802107a:	6062      	str	r2, [r4, #4]
 802107c:	e7d5      	b.n	802102a <_sungetc_r+0xc>
 802107e:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8021082:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021086:	6323      	str	r3, [r4, #48]	; 0x30
 8021088:	2303      	movs	r3, #3
 802108a:	6363      	str	r3, [r4, #52]	; 0x34
 802108c:	4623      	mov	r3, r4
 802108e:	f803 5f42 	strb.w	r5, [r3, #66]!
 8021092:	6023      	str	r3, [r4, #0]
 8021094:	2301      	movs	r3, #1
 8021096:	e7dc      	b.n	8021052 <_sungetc_r+0x34>

08021098 <__ssrefill_r>:
 8021098:	b510      	push	{r4, lr}
 802109a:	460c      	mov	r4, r1
 802109c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 802109e:	b169      	cbz	r1, 80210bc <__ssrefill_r+0x24>
 80210a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80210a4:	4299      	cmp	r1, r3
 80210a6:	d001      	beq.n	80210ac <__ssrefill_r+0x14>
 80210a8:	f7fe fe1a 	bl	801fce0 <_free_r>
 80210ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80210ae:	6063      	str	r3, [r4, #4]
 80210b0:	2000      	movs	r0, #0
 80210b2:	6320      	str	r0, [r4, #48]	; 0x30
 80210b4:	b113      	cbz	r3, 80210bc <__ssrefill_r+0x24>
 80210b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80210b8:	6023      	str	r3, [r4, #0]
 80210ba:	bd10      	pop	{r4, pc}
 80210bc:	6923      	ldr	r3, [r4, #16]
 80210be:	6023      	str	r3, [r4, #0]
 80210c0:	2300      	movs	r3, #0
 80210c2:	6063      	str	r3, [r4, #4]
 80210c4:	89a3      	ldrh	r3, [r4, #12]
 80210c6:	f043 0320 	orr.w	r3, r3, #32
 80210ca:	81a3      	strh	r3, [r4, #12]
 80210cc:	f04f 30ff 	mov.w	r0, #4294967295
 80210d0:	e7f3      	b.n	80210ba <__ssrefill_r+0x22>

080210d2 <_sfread_r>:
 80210d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d6:	461f      	mov	r7, r3
 80210d8:	4613      	mov	r3, r2
 80210da:	437b      	muls	r3, r7
 80210dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80210de:	4682      	mov	sl, r0
 80210e0:	4688      	mov	r8, r1
 80210e2:	4691      	mov	r9, r2
 80210e4:	d027      	beq.n	8021136 <_sfread_r+0x64>
 80210e6:	461e      	mov	r6, r3
 80210e8:	e9d4 1500 	ldrd	r1, r5, [r4]
 80210ec:	42b5      	cmp	r5, r6
 80210ee:	d30b      	bcc.n	8021108 <_sfread_r+0x36>
 80210f0:	4632      	mov	r2, r6
 80210f2:	4640      	mov	r0, r8
 80210f4:	f7fa fb04 	bl	801b700 <memcpy>
 80210f8:	6862      	ldr	r2, [r4, #4]
 80210fa:	1b92      	subs	r2, r2, r6
 80210fc:	6062      	str	r2, [r4, #4]
 80210fe:	6822      	ldr	r2, [r4, #0]
 8021100:	4432      	add	r2, r6
 8021102:	6022      	str	r2, [r4, #0]
 8021104:	463b      	mov	r3, r7
 8021106:	e016      	b.n	8021136 <_sfread_r+0x64>
 8021108:	462a      	mov	r2, r5
 802110a:	4640      	mov	r0, r8
 802110c:	9301      	str	r3, [sp, #4]
 802110e:	f7fa faf7 	bl	801b700 <memcpy>
 8021112:	6822      	ldr	r2, [r4, #0]
 8021114:	2300      	movs	r3, #0
 8021116:	442a      	add	r2, r5
 8021118:	6063      	str	r3, [r4, #4]
 802111a:	6022      	str	r2, [r4, #0]
 802111c:	4621      	mov	r1, r4
 802111e:	4650      	mov	r0, sl
 8021120:	f7ff ffba 	bl	8021098 <__ssrefill_r>
 8021124:	44a8      	add	r8, r5
 8021126:	9b01      	ldr	r3, [sp, #4]
 8021128:	eba6 0b05 	sub.w	fp, r6, r5
 802112c:	b138      	cbz	r0, 802113e <_sfread_r+0x6c>
 802112e:	441d      	add	r5, r3
 8021130:	1bad      	subs	r5, r5, r6
 8021132:	fbb5 f3f9 	udiv	r3, r5, r9
 8021136:	4618      	mov	r0, r3
 8021138:	b003      	add	sp, #12
 802113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802113e:	465e      	mov	r6, fp
 8021140:	e7d2      	b.n	80210e8 <_sfread_r+0x16>
	...

08021144 <__ssvfiscanf_r>:
 8021144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021148:	ed2d 8b02 	vpush	{d8}
 802114c:	b0df      	sub	sp, #380	; 0x17c
 802114e:	461e      	mov	r6, r3
 8021150:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8021154:	af02      	add	r7, sp, #8
 8021156:	049d      	lsls	r5, r3, #18
 8021158:	ee08 0a10 	vmov	s16, r0
 802115c:	460c      	mov	r4, r1
 802115e:	613a      	str	r2, [r7, #16]
 8021160:	d406      	bmi.n	8021170 <__ssvfiscanf_r+0x2c>
 8021162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021166:	818b      	strh	r3, [r1, #12]
 8021168:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 802116a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802116e:	664b      	str	r3, [r1, #100]	; 0x64
 8021170:	2300      	movs	r3, #0
 8021172:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8021176:	617b      	str	r3, [r7, #20]
 8021178:	469b      	mov	fp, r3
 802117a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802117c:	627b      	str	r3, [r7, #36]	; 0x24
 802117e:	693a      	ldr	r2, [r7, #16]
 8021180:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021184:	613a      	str	r2, [r7, #16]
 8021186:	637b      	str	r3, [r7, #52]	; 0x34
 8021188:	2b00      	cmp	r3, #0
 802118a:	d035      	beq.n	80211f8 <__ssvfiscanf_r+0xb4>
 802118c:	4a9f      	ldr	r2, [pc, #636]	; (802140c <__ssvfiscanf_r+0x2c8>)
 802118e:	f813 9002 	ldrb.w	r9, [r3, r2]
 8021192:	f019 0908 	ands.w	r9, r9, #8
 8021196:	d019      	beq.n	80211cc <__ssvfiscanf_r+0x88>
 8021198:	6863      	ldr	r3, [r4, #4]
 802119a:	2b00      	cmp	r3, #0
 802119c:	dd0e      	ble.n	80211bc <__ssvfiscanf_r+0x78>
 802119e:	6823      	ldr	r3, [r4, #0]
 80211a0:	499a      	ldr	r1, [pc, #616]	; (802140c <__ssvfiscanf_r+0x2c8>)
 80211a2:	781a      	ldrb	r2, [r3, #0]
 80211a4:	5c8a      	ldrb	r2, [r1, r2]
 80211a6:	0710      	lsls	r0, r2, #28
 80211a8:	d5e9      	bpl.n	802117e <__ssvfiscanf_r+0x3a>
 80211aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80211ac:	3201      	adds	r2, #1
 80211ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80211b0:	6862      	ldr	r2, [r4, #4]
 80211b2:	3301      	adds	r3, #1
 80211b4:	3a01      	subs	r2, #1
 80211b6:	6062      	str	r2, [r4, #4]
 80211b8:	6023      	str	r3, [r4, #0]
 80211ba:	e7ed      	b.n	8021198 <__ssvfiscanf_r+0x54>
 80211bc:	ee18 0a10 	vmov	r0, s16
 80211c0:	4621      	mov	r1, r4
 80211c2:	f7ff ff69 	bl	8021098 <__ssrefill_r>
 80211c6:	2800      	cmp	r0, #0
 80211c8:	d0e9      	beq.n	802119e <__ssvfiscanf_r+0x5a>
 80211ca:	e7d8      	b.n	802117e <__ssvfiscanf_r+0x3a>
 80211cc:	2b25      	cmp	r3, #37	; 0x25
 80211ce:	f040 809f 	bne.w	8021310 <__ssvfiscanf_r+0x1cc>
 80211d2:	693b      	ldr	r3, [r7, #16]
 80211d4:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 80211d8:	220a      	movs	r2, #10
 80211da:	6939      	ldr	r1, [r7, #16]
 80211dc:	781d      	ldrb	r5, [r3, #0]
 80211de:	3101      	adds	r1, #1
 80211e0:	2d7a      	cmp	r5, #122	; 0x7a
 80211e2:	6139      	str	r1, [r7, #16]
 80211e4:	d808      	bhi.n	80211f8 <__ssvfiscanf_r+0xb4>
 80211e6:	2d42      	cmp	r5, #66	; 0x42
 80211e8:	d80b      	bhi.n	8021202 <__ssvfiscanf_r+0xbe>
 80211ea:	2d2a      	cmp	r5, #42	; 0x2a
 80211ec:	f000 80b9 	beq.w	8021362 <__ssvfiscanf_r+0x21e>
 80211f0:	d87e      	bhi.n	80212f0 <__ssvfiscanf_r+0x1ac>
 80211f2:	2d25      	cmp	r5, #37	; 0x25
 80211f4:	f000 808c 	beq.w	8021310 <__ssvfiscanf_r+0x1cc>
 80211f8:	f1bb 0f00 	cmp.w	fp, #0
 80211fc:	f000 815f 	beq.w	80214be <__ssvfiscanf_r+0x37a>
 8021200:	e158      	b.n	80214b4 <__ssvfiscanf_r+0x370>
 8021202:	3d43      	subs	r5, #67	; 0x43
 8021204:	2d37      	cmp	r5, #55	; 0x37
 8021206:	d8f7      	bhi.n	80211f8 <__ssvfiscanf_r+0xb4>
 8021208:	a101      	add	r1, pc, #4	; (adr r1, 8021210 <__ssvfiscanf_r+0xcc>)
 802120a:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 802120e:	bf00      	nop
 8021210:	080214e3 	.word	0x080214e3
 8021214:	080213df 	.word	0x080213df
 8021218:	080211f9 	.word	0x080211f9
 802121c:	080211f9 	.word	0x080211f9
 8021220:	080211f9 	.word	0x080211f9
 8021224:	080211f9 	.word	0x080211f9
 8021228:	080211f9 	.word	0x080211f9
 802122c:	080211f9 	.word	0x080211f9
 8021230:	080211f9 	.word	0x080211f9
 8021234:	080213b1 	.word	0x080213b1
 8021238:	080211f9 	.word	0x080211f9
 802123c:	080211f9 	.word	0x080211f9
 8021240:	080213e7 	.word	0x080213e7
 8021244:	080211f9 	.word	0x080211f9
 8021248:	080211f9 	.word	0x080211f9
 802124c:	080211f9 	.word	0x080211f9
 8021250:	08021419 	.word	0x08021419
 8021254:	080211f9 	.word	0x080211f9
 8021258:	080211f9 	.word	0x080211f9
 802125c:	080211f9 	.word	0x080211f9
 8021260:	080211f9 	.word	0x080211f9
 8021264:	080213ff 	.word	0x080213ff
 8021268:	080211f9 	.word	0x080211f9
 802126c:	080211f9 	.word	0x080211f9
 8021270:	080214cf 	.word	0x080214cf
 8021274:	080211f9 	.word	0x080211f9
 8021278:	080211f9 	.word	0x080211f9
 802127c:	080211f9 	.word	0x080211f9
 8021280:	080211f9 	.word	0x080211f9
 8021284:	080211f9 	.word	0x080211f9
 8021288:	080211f9 	.word	0x080211f9
 802128c:	080211f9 	.word	0x080211f9
 8021290:	080214e7 	.word	0x080214e7
 8021294:	080213e3 	.word	0x080213e3
 8021298:	080211f9 	.word	0x080211f9
 802129c:	080211f9 	.word	0x080211f9
 80212a0:	080211f9 	.word	0x080211f9
 80212a4:	08021395 	.word	0x08021395
 80212a8:	0802153b 	.word	0x0802153b
 80212ac:	080213b1 	.word	0x080213b1
 80212b0:	080211f9 	.word	0x080211f9
 80212b4:	08021377 	.word	0x08021377
 80212b8:	080213c1 	.word	0x080213c1
 80212bc:	080214f5 	.word	0x080214f5
 80212c0:	080213eb 	.word	0x080213eb
 80212c4:	080214ef 	.word	0x080214ef
 80212c8:	080211f9 	.word	0x080211f9
 80212cc:	080211f9 	.word	0x080211f9
 80212d0:	0802141d 	.word	0x0802141d
 80212d4:	080213b9 	.word	0x080213b9
 80212d8:	080213f7 	.word	0x080213f7
 80212dc:	080211f9 	.word	0x080211f9
 80212e0:	080211f9 	.word	0x080211f9
 80212e4:	080213ff 	.word	0x080213ff
 80212e8:	080211f9 	.word	0x080211f9
 80212ec:	080213b9 	.word	0x080213b9
 80212f0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80212f4:	2b09      	cmp	r3, #9
 80212f6:	f63f af7f 	bhi.w	80211f8 <__ssvfiscanf_r+0xb4>
 80212fa:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80212fe:	f47f af7b 	bne.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021304:	fb02 5503 	mla	r5, r2, r3, r5
 8021308:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 802130c:	62bb      	str	r3, [r7, #40]	; 0x28
 802130e:	e030      	b.n	8021372 <__ssvfiscanf_r+0x22e>
 8021310:	6863      	ldr	r3, [r4, #4]
 8021312:	2b00      	cmp	r3, #0
 8021314:	dd10      	ble.n	8021338 <__ssvfiscanf_r+0x1f4>
 8021316:	6823      	ldr	r3, [r4, #0]
 8021318:	693a      	ldr	r2, [r7, #16]
 802131a:	7819      	ldrb	r1, [r3, #0]
 802131c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8021320:	4291      	cmp	r1, r2
 8021322:	f47f af69 	bne.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021326:	6862      	ldr	r2, [r4, #4]
 8021328:	3301      	adds	r3, #1
 802132a:	6023      	str	r3, [r4, #0]
 802132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802132e:	3a01      	subs	r2, #1
 8021330:	6062      	str	r2, [r4, #4]
 8021332:	3301      	adds	r3, #1
 8021334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021336:	e722      	b.n	802117e <__ssvfiscanf_r+0x3a>
 8021338:	ee18 0a10 	vmov	r0, s16
 802133c:	4621      	mov	r1, r4
 802133e:	f7ff feab 	bl	8021098 <__ssrefill_r>
 8021342:	2800      	cmp	r0, #0
 8021344:	d0e7      	beq.n	8021316 <__ssvfiscanf_r+0x1d2>
 8021346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021348:	b11b      	cbz	r3, 8021352 <__ssvfiscanf_r+0x20e>
 802134a:	89a3      	ldrh	r3, [r4, #12]
 802134c:	065b      	lsls	r3, r3, #25
 802134e:	f57f af53 	bpl.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021352:	f1bb 0f00 	cmp.w	fp, #0
 8021356:	f040 80a1 	bne.w	802149c <__ssvfiscanf_r+0x358>
 802135a:	f04f 33ff 	mov.w	r3, #4294967295
 802135e:	627b      	str	r3, [r7, #36]	; 0x24
 8021360:	e0ad      	b.n	80214be <__ssvfiscanf_r+0x37a>
 8021362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021364:	ea53 0309 	orrs.w	r3, r3, r9
 8021368:	62bb      	str	r3, [r7, #40]	; 0x28
 802136a:	f47f af45 	bne.w	80211f8 <__ssvfiscanf_r+0xb4>
 802136e:	f04f 0910 	mov.w	r9, #16
 8021372:	693b      	ldr	r3, [r7, #16]
 8021374:	e731      	b.n	80211da <__ssvfiscanf_r+0x96>
 8021376:	f019 0f0f 	tst.w	r9, #15
 802137a:	f47f af3d 	bne.w	80211f8 <__ssvfiscanf_r+0xb4>
 802137e:	7859      	ldrb	r1, [r3, #1]
 8021380:	296c      	cmp	r1, #108	; 0x6c
 8021382:	d104      	bne.n	802138e <__ssvfiscanf_r+0x24a>
 8021384:	3302      	adds	r3, #2
 8021386:	613b      	str	r3, [r7, #16]
 8021388:	f049 0902 	orr.w	r9, r9, #2
 802138c:	e7f1      	b.n	8021372 <__ssvfiscanf_r+0x22e>
 802138e:	f049 0901 	orr.w	r9, r9, #1
 8021392:	e7ee      	b.n	8021372 <__ssvfiscanf_r+0x22e>
 8021394:	f019 0f0f 	tst.w	r9, #15
 8021398:	f47f af2e 	bne.w	80211f8 <__ssvfiscanf_r+0xb4>
 802139c:	7859      	ldrb	r1, [r3, #1]
 802139e:	2968      	cmp	r1, #104	; 0x68
 80213a0:	bf03      	ittte	eq
 80213a2:	3302      	addeq	r3, #2
 80213a4:	613b      	streq	r3, [r7, #16]
 80213a6:	f049 0908 	orreq.w	r9, r9, #8
 80213aa:	f049 0904 	orrne.w	r9, r9, #4
 80213ae:	e7e0      	b.n	8021372 <__ssvfiscanf_r+0x22e>
 80213b0:	f019 0f0f 	tst.w	r9, #15
 80213b4:	d0e8      	beq.n	8021388 <__ssvfiscanf_r+0x244>
 80213b6:	e71f      	b.n	80211f8 <__ssvfiscanf_r+0xb4>
 80213b8:	f019 0f0f 	tst.w	r9, #15
 80213bc:	d0d9      	beq.n	8021372 <__ssvfiscanf_r+0x22e>
 80213be:	e71b      	b.n	80211f8 <__ssvfiscanf_r+0xb4>
 80213c0:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80213c4:	f47f af18 	bne.w	80211f8 <__ssvfiscanf_r+0xb4>
 80213c8:	f1bb 0f00 	cmp.w	fp, #0
 80213cc:	d104      	bne.n	80213d8 <__ssvfiscanf_r+0x294>
 80213ce:	b082      	sub	sp, #8
 80213d0:	f10d 0b08 	add.w	fp, sp, #8
 80213d4:	e9cb 3300 	strd	r3, r3, [fp]
 80213d8:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80213dc:	e7c9      	b.n	8021372 <__ssvfiscanf_r+0x22e>
 80213de:	f049 0901 	orr.w	r9, r9, #1
 80213e2:	4b0b      	ldr	r3, [pc, #44]	; (8021410 <__ssvfiscanf_r+0x2cc>)
 80213e4:	e008      	b.n	80213f8 <__ssvfiscanf_r+0x2b4>
 80213e6:	f049 0901 	orr.w	r9, r9, #1
 80213ea:	4b0a      	ldr	r3, [pc, #40]	; (8021414 <__ssvfiscanf_r+0x2d0>)
 80213ec:	617b      	str	r3, [r7, #20]
 80213ee:	2308      	movs	r3, #8
 80213f0:	61fb      	str	r3, [r7, #28]
 80213f2:	2503      	movs	r5, #3
 80213f4:	e013      	b.n	802141e <__ssvfiscanf_r+0x2da>
 80213f6:	4b07      	ldr	r3, [pc, #28]	; (8021414 <__ssvfiscanf_r+0x2d0>)
 80213f8:	617b      	str	r3, [r7, #20]
 80213fa:	230a      	movs	r3, #10
 80213fc:	e7f8      	b.n	80213f0 <__ssvfiscanf_r+0x2ac>
 80213fe:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021402:	4b04      	ldr	r3, [pc, #16]	; (8021414 <__ssvfiscanf_r+0x2d0>)
 8021404:	617b      	str	r3, [r7, #20]
 8021406:	2310      	movs	r3, #16
 8021408:	e7f2      	b.n	80213f0 <__ssvfiscanf_r+0x2ac>
 802140a:	bf00      	nop
 802140c:	080291a5 	.word	0x080291a5
 8021410:	0801bed1 	.word	0x0801bed1
 8021414:	08020f11 	.word	0x08020f11
 8021418:	f049 0901 	orr.w	r9, r9, #1
 802141c:	2502      	movs	r5, #2
 802141e:	6863      	ldr	r3, [r4, #4]
 8021420:	2b00      	cmp	r3, #0
 8021422:	f340 808e 	ble.w	8021542 <__ssvfiscanf_r+0x3fe>
 8021426:	f019 0f40 	tst.w	r9, #64	; 0x40
 802142a:	d106      	bne.n	802143a <__ssvfiscanf_r+0x2f6>
 802142c:	6823      	ldr	r3, [r4, #0]
 802142e:	49b3      	ldr	r1, [pc, #716]	; (80216fc <__ssvfiscanf_r+0x5b8>)
 8021430:	781a      	ldrb	r2, [r3, #0]
 8021432:	5c52      	ldrb	r2, [r2, r1]
 8021434:	0711      	lsls	r1, r2, #28
 8021436:	f100 808d 	bmi.w	8021554 <__ssvfiscanf_r+0x410>
 802143a:	2d02      	cmp	r5, #2
 802143c:	f000 8394 	beq.w	8021b68 <__ssvfiscanf_r+0xa24>
 8021440:	2d03      	cmp	r5, #3
 8021442:	f000 8535 	beq.w	8021eb0 <__ssvfiscanf_r+0xd6c>
 8021446:	f009 0310 	and.w	r3, r9, #16
 802144a:	2d01      	cmp	r5, #1
 802144c:	61bb      	str	r3, [r7, #24]
 802144e:	f009 0301 	and.w	r3, r9, #1
 8021452:	f000 81cc 	beq.w	80217ee <__ssvfiscanf_r+0x6aa>
 8021456:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8021458:	2d01      	cmp	r5, #1
 802145a:	bf38      	it	cc
 802145c:	2501      	movcc	r5, #1
 802145e:	2b00      	cmp	r3, #0
 8021460:	f000 8150 	beq.w	8021704 <__ssvfiscanf_r+0x5c0>
 8021464:	69bb      	ldr	r3, [r7, #24]
 8021466:	2b00      	cmp	r3, #0
 8021468:	f040 810d 	bne.w	8021686 <__ssvfiscanf_r+0x542>
 802146c:	4633      	mov	r3, r6
 802146e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021472:	f853 6b04 	ldr.w	r6, [r3], #4
 8021476:	62bb      	str	r3, [r7, #40]	; 0x28
 8021478:	f000 810c 	beq.w	8021694 <__ssvfiscanf_r+0x550>
 802147c:	b146      	cbz	r6, 8021490 <__ssvfiscanf_r+0x34c>
 802147e:	2080      	movs	r0, #128	; 0x80
 8021480:	f7fe fe7a 	bl	8020178 <malloc>
 8021484:	4680      	mov	r8, r0
 8021486:	2800      	cmp	r0, #0
 8021488:	d178      	bne.n	802157c <__ssvfiscanf_r+0x438>
 802148a:	f04f 33ff 	mov.w	r3, #4294967295
 802148e:	627b      	str	r3, [r7, #36]	; 0x24
 8021490:	f1bb 0f00 	cmp.w	fp, #0
 8021494:	d013      	beq.n	80214be <__ssvfiscanf_r+0x37a>
 8021496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021498:	3301      	adds	r3, #1
 802149a:	d10b      	bne.n	80214b4 <__ssvfiscanf_r+0x370>
 802149c:	2400      	movs	r4, #0
 802149e:	4626      	mov	r6, r4
 80214a0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80214a4:	f8db 5000 	ldr.w	r5, [fp]
 80214a8:	42a3      	cmp	r3, r4
 80214aa:	f300 85df 	bgt.w	802206c <__ssvfiscanf_r+0xf28>
 80214ae:	f04f 33ff 	mov.w	r3, #4294967295
 80214b2:	627b      	str	r3, [r7, #36]	; 0x24
 80214b4:	f8db 0000 	ldr.w	r0, [fp]
 80214b8:	b108      	cbz	r0, 80214be <__ssvfiscanf_r+0x37a>
 80214ba:	f7fe fe65 	bl	8020188 <free>
 80214be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80214c0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80214c4:	46bd      	mov	sp, r7
 80214c6:	ecbd 8b02 	vpop	{d8}
 80214ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214ce:	6939      	ldr	r1, [r7, #16]
 80214d0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80214d4:	f002 f82a 	bl	802352c <__sccl>
 80214d8:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80214dc:	6138      	str	r0, [r7, #16]
 80214de:	2501      	movs	r5, #1
 80214e0:	e79d      	b.n	802141e <__ssvfiscanf_r+0x2da>
 80214e2:	f049 0901 	orr.w	r9, r9, #1
 80214e6:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 80214ea:	2500      	movs	r5, #0
 80214ec:	e797      	b.n	802141e <__ssvfiscanf_r+0x2da>
 80214ee:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 80214f2:	e786      	b.n	8021402 <__ssvfiscanf_r+0x2be>
 80214f4:	f019 0f10 	tst.w	r9, #16
 80214f8:	f47f ae41 	bne.w	802117e <__ssvfiscanf_r+0x3a>
 80214fc:	f019 0f08 	tst.w	r9, #8
 8021500:	f856 1b04 	ldr.w	r1, [r6], #4
 8021504:	d002      	beq.n	802150c <__ssvfiscanf_r+0x3c8>
 8021506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021508:	700b      	strb	r3, [r1, #0]
 802150a:	e638      	b.n	802117e <__ssvfiscanf_r+0x3a>
 802150c:	f019 0f04 	tst.w	r9, #4
 8021510:	d002      	beq.n	8021518 <__ssvfiscanf_r+0x3d4>
 8021512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021514:	800b      	strh	r3, [r1, #0]
 8021516:	e632      	b.n	802117e <__ssvfiscanf_r+0x3a>
 8021518:	f019 0f01 	tst.w	r9, #1
 802151c:	d002      	beq.n	8021524 <__ssvfiscanf_r+0x3e0>
 802151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021520:	600b      	str	r3, [r1, #0]
 8021522:	e62c      	b.n	802117e <__ssvfiscanf_r+0x3a>
 8021524:	f019 0f02 	tst.w	r9, #2
 8021528:	d0f9      	beq.n	802151e <__ssvfiscanf_r+0x3da>
 802152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802152c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8021530:	461a      	mov	r2, r3
 8021532:	464b      	mov	r3, r9
 8021534:	e9c1 2300 	strd	r2, r3, [r1]
 8021538:	e621      	b.n	802117e <__ssvfiscanf_r+0x3a>
 802153a:	4b71      	ldr	r3, [pc, #452]	; (8021700 <__ssvfiscanf_r+0x5bc>)
 802153c:	617b      	str	r3, [r7, #20]
 802153e:	2300      	movs	r3, #0
 8021540:	e756      	b.n	80213f0 <__ssvfiscanf_r+0x2ac>
 8021542:	ee18 0a10 	vmov	r0, s16
 8021546:	4621      	mov	r1, r4
 8021548:	f7ff fda6 	bl	8021098 <__ssrefill_r>
 802154c:	2800      	cmp	r0, #0
 802154e:	f43f af6a 	beq.w	8021426 <__ssvfiscanf_r+0x2e2>
 8021552:	e6f8      	b.n	8021346 <__ssvfiscanf_r+0x202>
 8021554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021556:	3201      	adds	r2, #1
 8021558:	62fa      	str	r2, [r7, #44]	; 0x2c
 802155a:	6862      	ldr	r2, [r4, #4]
 802155c:	3a01      	subs	r2, #1
 802155e:	2a00      	cmp	r2, #0
 8021560:	6062      	str	r2, [r4, #4]
 8021562:	dd02      	ble.n	802156a <__ssvfiscanf_r+0x426>
 8021564:	3301      	adds	r3, #1
 8021566:	6023      	str	r3, [r4, #0]
 8021568:	e760      	b.n	802142c <__ssvfiscanf_r+0x2e8>
 802156a:	ee18 0a10 	vmov	r0, s16
 802156e:	4621      	mov	r1, r4
 8021570:	f7ff fd92 	bl	8021098 <__ssrefill_r>
 8021574:	2800      	cmp	r0, #0
 8021576:	f43f af59 	beq.w	802142c <__ssvfiscanf_r+0x2e8>
 802157a:	e6e4      	b.n	8021346 <__ssvfiscanf_r+0x202>
 802157c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021580:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8021584:	6030      	str	r0, [r6, #0]
 8021586:	45ca      	cmp	sl, r9
 8021588:	d313      	bcc.n	80215b2 <__ssvfiscanf_r+0x46e>
 802158a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 802158e:	4599      	cmp	r9, r3
 8021590:	f63f af7b 	bhi.w	802148a <__ssvfiscanf_r+0x346>
 8021594:	f109 0908 	add.w	r9, r9, #8
 8021598:	f8db 0000 	ldr.w	r0, [fp]
 802159c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80215a0:	f001 fe16 	bl	80231d0 <realloc>
 80215a4:	2800      	cmp	r0, #0
 80215a6:	f43f af70 	beq.w	802148a <__ssvfiscanf_r+0x346>
 80215aa:	f8cb 0000 	str.w	r0, [fp]
 80215ae:	f8ab 9004 	strh.w	r9, [fp, #4]
 80215b2:	f8db 3000 	ldr.w	r3, [fp]
 80215b6:	f10a 0201 	add.w	r2, sl, #1
 80215ba:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80215be:	f8ab 2006 	strh.w	r2, [fp, #6]
 80215c2:	46b2      	mov	sl, r6
 80215c4:	f04f 0920 	mov.w	r9, #32
 80215c8:	4646      	mov	r6, r8
 80215ca:	2200      	movs	r2, #0
 80215cc:	60fa      	str	r2, [r7, #12]
 80215ce:	f001 fda9 	bl	8023124 <__locale_mb_cur_max>
 80215d2:	68fa      	ldr	r2, [r7, #12]
 80215d4:	4290      	cmp	r0, r2
 80215d6:	f43f aeb6 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 80215da:	6821      	ldr	r1, [r4, #0]
 80215dc:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80215e0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80215e4:	f80c 0002 	strb.w	r0, [ip, r2]
 80215e8:	1c53      	adds	r3, r2, #1
 80215ea:	6862      	ldr	r2, [r4, #4]
 80215ec:	3a01      	subs	r2, #1
 80215ee:	e9c4 1200 	strd	r1, r2, [r4]
 80215f2:	6a3a      	ldr	r2, [r7, #32]
 80215f4:	2a03      	cmp	r2, #3
 80215f6:	d102      	bne.n	80215fe <__ssvfiscanf_r+0x4ba>
 80215f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80215fa:	2a04      	cmp	r2, #4
 80215fc:	d007      	beq.n	802160e <__ssvfiscanf_r+0x4ca>
 80215fe:	2208      	movs	r2, #8
 8021600:	2100      	movs	r1, #0
 8021602:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021606:	623b      	str	r3, [r7, #32]
 8021608:	f7fa f8a2 	bl	801b750 <memset>
 802160c:	6a3b      	ldr	r3, [r7, #32]
 802160e:	60fb      	str	r3, [r7, #12]
 8021610:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021614:	9200      	str	r2, [sp, #0]
 8021616:	ee18 0a10 	vmov	r0, s16
 802161a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802161e:	4631      	mov	r1, r6
 8021620:	f001 fd98 	bl	8023154 <_mbrtowc_r>
 8021624:	1c42      	adds	r2, r0, #1
 8021626:	6238      	str	r0, [r7, #32]
 8021628:	f43f ae8d 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 802162c:	68fb      	ldr	r3, [r7, #12]
 802162e:	2800      	cmp	r0, #0
 8021630:	d135      	bne.n	802169e <__ssvfiscanf_r+0x55a>
 8021632:	69ba      	ldr	r2, [r7, #24]
 8021634:	b902      	cbnz	r2, 8021638 <__ssvfiscanf_r+0x4f4>
 8021636:	6032      	str	r2, [r6, #0]
 8021638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802163a:	441a      	add	r2, r3
 802163c:	6a3b      	ldr	r3, [r7, #32]
 802163e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021640:	2b03      	cmp	r3, #3
 8021642:	d102      	bne.n	802164a <__ssvfiscanf_r+0x506>
 8021644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021646:	2b04      	cmp	r3, #4
 8021648:	d000      	beq.n	802164c <__ssvfiscanf_r+0x508>
 802164a:	3d01      	subs	r5, #1
 802164c:	69bb      	ldr	r3, [r7, #24]
 802164e:	b9c3      	cbnz	r3, 8021682 <__ssvfiscanf_r+0x53e>
 8021650:	f1ba 0f00 	cmp.w	sl, #0
 8021654:	d014      	beq.n	8021680 <__ssvfiscanf_r+0x53c>
 8021656:	eba6 0308 	sub.w	r3, r6, r8
 802165a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802165e:	d80f      	bhi.n	8021680 <__ssvfiscanf_r+0x53c>
 8021660:	4640      	mov	r0, r8
 8021662:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021666:	60fb      	str	r3, [r7, #12]
 8021668:	f001 fdb2 	bl	80231d0 <realloc>
 802166c:	4680      	mov	r8, r0
 802166e:	2800      	cmp	r0, #0
 8021670:	f43f af0b 	beq.w	802148a <__ssvfiscanf_r+0x346>
 8021674:	68fb      	ldr	r3, [r7, #12]
 8021676:	f8ca 0000 	str.w	r0, [sl]
 802167a:	18c6      	adds	r6, r0, r3
 802167c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021680:	3604      	adds	r6, #4
 8021682:	2200      	movs	r2, #0
 8021684:	e00f      	b.n	80216a6 <__ssvfiscanf_r+0x562>
 8021686:	f04f 0900 	mov.w	r9, #0
 802168a:	62be      	str	r6, [r7, #40]	; 0x28
 802168c:	46c8      	mov	r8, r9
 802168e:	46ca      	mov	sl, r9
 8021690:	464e      	mov	r6, r9
 8021692:	e79a      	b.n	80215ca <__ssvfiscanf_r+0x486>
 8021694:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8021698:	46c8      	mov	r8, r9
 802169a:	46ca      	mov	sl, r9
 802169c:	e795      	b.n	80215ca <__ssvfiscanf_r+0x486>
 802169e:	6a3a      	ldr	r2, [r7, #32]
 80216a0:	3202      	adds	r2, #2
 80216a2:	d1c9      	bne.n	8021638 <__ssvfiscanf_r+0x4f4>
 80216a4:	461a      	mov	r2, r3
 80216a6:	6863      	ldr	r3, [r4, #4]
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	dc14      	bgt.n	80216d6 <__ssvfiscanf_r+0x592>
 80216ac:	ee18 0a10 	vmov	r0, s16
 80216b0:	4621      	mov	r1, r4
 80216b2:	60fa      	str	r2, [r7, #12]
 80216b4:	f7ff fcf0 	bl	8021098 <__ssrefill_r>
 80216b8:	68fa      	ldr	r2, [r7, #12]
 80216ba:	b160      	cbz	r0, 80216d6 <__ssvfiscanf_r+0x592>
 80216bc:	2a00      	cmp	r2, #0
 80216be:	f47f ae42 	bne.w	8021346 <__ssvfiscanf_r+0x202>
 80216c2:	f1ba 0f00 	cmp.w	sl, #0
 80216c6:	d10a      	bne.n	80216de <__ssvfiscanf_r+0x59a>
 80216c8:	69bb      	ldr	r3, [r7, #24]
 80216ca:	b913      	cbnz	r3, 80216d2 <__ssvfiscanf_r+0x58e>
 80216cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216ce:	3301      	adds	r3, #1
 80216d0:	627b      	str	r3, [r7, #36]	; 0x24
 80216d2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80216d4:	e553      	b.n	802117e <__ssvfiscanf_r+0x3a>
 80216d6:	2d00      	cmp	r5, #0
 80216d8:	f47f af78 	bne.w	80215cc <__ssvfiscanf_r+0x488>
 80216dc:	e7f1      	b.n	80216c2 <__ssvfiscanf_r+0x57e>
 80216de:	eba6 0108 	sub.w	r1, r6, r8
 80216e2:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80216e6:	d9ef      	bls.n	80216c8 <__ssvfiscanf_r+0x584>
 80216e8:	f8da 0000 	ldr.w	r0, [sl]
 80216ec:	f001 fd70 	bl	80231d0 <realloc>
 80216f0:	2800      	cmp	r0, #0
 80216f2:	d0e9      	beq.n	80216c8 <__ssvfiscanf_r+0x584>
 80216f4:	f8ca 0000 	str.w	r0, [sl]
 80216f8:	e7e6      	b.n	80216c8 <__ssvfiscanf_r+0x584>
 80216fa:	bf00      	nop
 80216fc:	080291a5 	.word	0x080291a5
 8021700:	0801bed1 	.word	0x0801bed1
 8021704:	69ba      	ldr	r2, [r7, #24]
 8021706:	b1e2      	cbz	r2, 8021742 <__ssvfiscanf_r+0x5fe>
 8021708:	4698      	mov	r8, r3
 802170a:	e9d4 2300 	ldrd	r2, r3, [r4]
 802170e:	429d      	cmp	r5, r3
 8021710:	dd11      	ble.n	8021736 <__ssvfiscanf_r+0x5f2>
 8021712:	4498      	add	r8, r3
 8021714:	1aed      	subs	r5, r5, r3
 8021716:	4413      	add	r3, r2
 8021718:	ee18 0a10 	vmov	r0, s16
 802171c:	6023      	str	r3, [r4, #0]
 802171e:	4621      	mov	r1, r4
 8021720:	f7ff fcba 	bl	8021098 <__ssrefill_r>
 8021724:	2800      	cmp	r0, #0
 8021726:	d0f0      	beq.n	802170a <__ssvfiscanf_r+0x5c6>
 8021728:	f1b8 0f00 	cmp.w	r8, #0
 802172c:	f43f ae0b 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 8021730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021732:	4443      	add	r3, r8
 8021734:	e5fe      	b.n	8021334 <__ssvfiscanf_r+0x1f0>
 8021736:	1b5b      	subs	r3, r3, r5
 8021738:	44a8      	add	r8, r5
 802173a:	4415      	add	r5, r2
 802173c:	6063      	str	r3, [r4, #4]
 802173e:	6025      	str	r5, [r4, #0]
 8021740:	e7f6      	b.n	8021730 <__ssvfiscanf_r+0x5ec>
 8021742:	46b0      	mov	r8, r6
 8021744:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8021748:	f858 6b04 	ldr.w	r6, [r8], #4
 802174c:	d02e      	beq.n	80217ac <__ssvfiscanf_r+0x668>
 802174e:	2e00      	cmp	r6, #0
 8021750:	f43f ad52 	beq.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021754:	4628      	mov	r0, r5
 8021756:	f7fe fd0f 	bl	8020178 <malloc>
 802175a:	62b8      	str	r0, [r7, #40]	; 0x28
 802175c:	2800      	cmp	r0, #0
 802175e:	f43f adf8 	beq.w	8021352 <__ssvfiscanf_r+0x20e>
 8021762:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021766:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 802176a:	6030      	str	r0, [r6, #0]
 802176c:	45ca      	cmp	sl, r9
 802176e:	d313      	bcc.n	8021798 <__ssvfiscanf_r+0x654>
 8021770:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021774:	4599      	cmp	r9, r3
 8021776:	f63f ae91 	bhi.w	802149c <__ssvfiscanf_r+0x358>
 802177a:	f109 0908 	add.w	r9, r9, #8
 802177e:	f8db 0000 	ldr.w	r0, [fp]
 8021782:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021786:	f001 fd23 	bl	80231d0 <realloc>
 802178a:	2800      	cmp	r0, #0
 802178c:	f43f ae86 	beq.w	802149c <__ssvfiscanf_r+0x358>
 8021790:	f8cb 0000 	str.w	r0, [fp]
 8021794:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021798:	f8db 3000 	ldr.w	r3, [fp]
 802179c:	f10a 0201 	add.w	r2, sl, #1
 80217a0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80217a4:	46b1      	mov	r9, r6
 80217a6:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80217a8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80217ac:	4631      	mov	r1, r6
 80217ae:	ee18 0a10 	vmov	r0, s16
 80217b2:	9400      	str	r4, [sp, #0]
 80217b4:	462b      	mov	r3, r5
 80217b6:	2201      	movs	r2, #1
 80217b8:	f7ff fc8b 	bl	80210d2 <_sfread_r>
 80217bc:	4606      	mov	r6, r0
 80217be:	2800      	cmp	r0, #0
 80217c0:	f43f adc1 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 80217c4:	f1b9 0f00 	cmp.w	r9, #0
 80217c8:	d009      	beq.n	80217de <__ssvfiscanf_r+0x69a>
 80217ca:	4285      	cmp	r5, r0
 80217cc:	d907      	bls.n	80217de <__ssvfiscanf_r+0x69a>
 80217ce:	4601      	mov	r1, r0
 80217d0:	f8d9 0000 	ldr.w	r0, [r9]
 80217d4:	f001 fcfc 	bl	80231d0 <realloc>
 80217d8:	b108      	cbz	r0, 80217de <__ssvfiscanf_r+0x69a>
 80217da:	f8c9 0000 	str.w	r0, [r9]
 80217de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217e0:	4433      	add	r3, r6
 80217e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80217e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217e6:	3301      	adds	r3, #1
 80217e8:	627b      	str	r3, [r7, #36]	; 0x24
 80217ea:	4646      	mov	r6, r8
 80217ec:	e4c7      	b.n	802117e <__ssvfiscanf_r+0x3a>
 80217ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80217f0:	2a00      	cmp	r2, #0
 80217f2:	bf08      	it	eq
 80217f4:	f04f 32ff 	moveq.w	r2, #4294967295
 80217f8:	461d      	mov	r5, r3
 80217fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80217fc:	69bb      	ldr	r3, [r7, #24]
 80217fe:	2d00      	cmp	r5, #0
 8021800:	f000 8105 	beq.w	8021a0e <__ssvfiscanf_r+0x8ca>
 8021804:	2b00      	cmp	r3, #0
 8021806:	f040 80a5 	bne.w	8021954 <__ssvfiscanf_r+0x810>
 802180a:	4633      	mov	r3, r6
 802180c:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021810:	f853 5b04 	ldr.w	r5, [r3], #4
 8021814:	607b      	str	r3, [r7, #4]
 8021816:	f000 80a6 	beq.w	8021966 <__ssvfiscanf_r+0x822>
 802181a:	2d00      	cmp	r5, #0
 802181c:	f43f ae38 	beq.w	8021490 <__ssvfiscanf_r+0x34c>
 8021820:	2080      	movs	r0, #128	; 0x80
 8021822:	f7fe fca9 	bl	8020178 <malloc>
 8021826:	4680      	mov	r8, r0
 8021828:	2800      	cmp	r0, #0
 802182a:	f43f ae2e 	beq.w	802148a <__ssvfiscanf_r+0x346>
 802182e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021832:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8021836:	6028      	str	r0, [r5, #0]
 8021838:	45b1      	cmp	r9, r6
 802183a:	d311      	bcc.n	8021860 <__ssvfiscanf_r+0x71c>
 802183c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021840:	429e      	cmp	r6, r3
 8021842:	f63f ae22 	bhi.w	802148a <__ssvfiscanf_r+0x346>
 8021846:	3608      	adds	r6, #8
 8021848:	f8db 0000 	ldr.w	r0, [fp]
 802184c:	00b1      	lsls	r1, r6, #2
 802184e:	f001 fcbf 	bl	80231d0 <realloc>
 8021852:	2800      	cmp	r0, #0
 8021854:	f43f ae19 	beq.w	802148a <__ssvfiscanf_r+0x346>
 8021858:	f8cb 0000 	str.w	r0, [fp]
 802185c:	f8ab 6004 	strh.w	r6, [fp, #4]
 8021860:	f8db 3000 	ldr.w	r3, [fp]
 8021864:	60fd      	str	r5, [r7, #12]
 8021866:	f109 0201 	add.w	r2, r9, #1
 802186a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802186e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021872:	4645      	mov	r5, r8
 8021874:	f04f 0920 	mov.w	r9, #32
 8021878:	2600      	movs	r6, #0
 802187a:	f001 fc53 	bl	8023124 <__locale_mb_cur_max>
 802187e:	42b0      	cmp	r0, r6
 8021880:	f43f ad61 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 8021884:	1c73      	adds	r3, r6, #1
 8021886:	60bb      	str	r3, [r7, #8]
 8021888:	6823      	ldr	r3, [r4, #0]
 802188a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802188e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021892:	558a      	strb	r2, [r1, r6]
 8021894:	6862      	ldr	r2, [r4, #4]
 8021896:	3a01      	subs	r2, #1
 8021898:	e9c4 3200 	strd	r3, r2, [r4]
 802189c:	6a3b      	ldr	r3, [r7, #32]
 802189e:	2b03      	cmp	r3, #3
 80218a0:	d102      	bne.n	80218a8 <__ssvfiscanf_r+0x764>
 80218a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80218a4:	2b04      	cmp	r3, #4
 80218a6:	d005      	beq.n	80218b4 <__ssvfiscanf_r+0x770>
 80218a8:	2208      	movs	r2, #8
 80218aa:	2100      	movs	r1, #0
 80218ac:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80218b0:	f7f9 ff4e 	bl	801b750 <memset>
 80218b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80218b8:	9300      	str	r3, [sp, #0]
 80218ba:	ee18 0a10 	vmov	r0, s16
 80218be:	68bb      	ldr	r3, [r7, #8]
 80218c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80218c4:	4629      	mov	r1, r5
 80218c6:	f001 fc45 	bl	8023154 <_mbrtowc_r>
 80218ca:	4603      	mov	r3, r0
 80218cc:	6238      	str	r0, [r7, #32]
 80218ce:	1c58      	adds	r0, r3, #1
 80218d0:	f43f ad39 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d14c      	bne.n	8021972 <__ssvfiscanf_r+0x82e>
 80218d8:	602b      	str	r3, [r5, #0]
 80218da:	682e      	ldr	r6, [r5, #0]
 80218dc:	1c71      	adds	r1, r6, #1
 80218de:	d059      	beq.n	8021994 <__ssvfiscanf_r+0x850>
 80218e0:	2208      	movs	r2, #8
 80218e2:	2100      	movs	r1, #0
 80218e4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80218e8:	f7f9 ff32 	bl	801b750 <memset>
 80218ec:	4b9d      	ldr	r3, [pc, #628]	; (8021b64 <__ssvfiscanf_r+0xa20>)
 80218ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80218f2:	603b      	str	r3, [r7, #0]
 80218f4:	4632      	mov	r2, r6
 80218f6:	ee18 0a10 	vmov	r0, s16
 80218fa:	683e      	ldr	r6, [r7, #0]
 80218fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021900:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8021904:	47b0      	blx	r6
 8021906:	2801      	cmp	r0, #1
 8021908:	d146      	bne.n	8021998 <__ssvfiscanf_r+0x854>
 802190a:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 802190e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021912:	f813 300a 	ldrb.w	r3, [r3, sl]
 8021916:	2b00      	cmp	r3, #0
 8021918:	d14b      	bne.n	80219b2 <__ssvfiscanf_r+0x86e>
 802191a:	f107 0648 	add.w	r6, r7, #72	; 0x48
 802191e:	68bb      	ldr	r3, [r7, #8]
 8021920:	2b00      	cmp	r3, #0
 8021922:	d13c      	bne.n	802199e <__ssvfiscanf_r+0x85a>
 8021924:	69bb      	ldr	r3, [r7, #24]
 8021926:	b99b      	cbnz	r3, 8021950 <__ssvfiscanf_r+0x80c>
 8021928:	602b      	str	r3, [r5, #0]
 802192a:	68fb      	ldr	r3, [r7, #12]
 802192c:	b16b      	cbz	r3, 802194a <__ssvfiscanf_r+0x806>
 802192e:	eba5 0108 	sub.w	r1, r5, r8
 8021932:	108b      	asrs	r3, r1, #2
 8021934:	3301      	adds	r3, #1
 8021936:	4599      	cmp	r9, r3
 8021938:	d907      	bls.n	802194a <__ssvfiscanf_r+0x806>
 802193a:	68fb      	ldr	r3, [r7, #12]
 802193c:	3104      	adds	r1, #4
 802193e:	6818      	ldr	r0, [r3, #0]
 8021940:	f001 fc46 	bl	80231d0 <realloc>
 8021944:	b108      	cbz	r0, 802194a <__ssvfiscanf_r+0x806>
 8021946:	68fb      	ldr	r3, [r7, #12]
 8021948:	6018      	str	r0, [r3, #0]
 802194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802194c:	3301      	adds	r3, #1
 802194e:	627b      	str	r3, [r7, #36]	; 0x24
 8021950:	687e      	ldr	r6, [r7, #4]
 8021952:	e414      	b.n	802117e <__ssvfiscanf_r+0x3a>
 8021954:	f04f 0900 	mov.w	r9, #0
 8021958:	607e      	str	r6, [r7, #4]
 802195a:	46c8      	mov	r8, r9
 802195c:	f8c7 900c 	str.w	r9, [r7, #12]
 8021960:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8021964:	e788      	b.n	8021878 <__ssvfiscanf_r+0x734>
 8021966:	f8d7 9018 	ldr.w	r9, [r7, #24]
 802196a:	f8c7 900c 	str.w	r9, [r7, #12]
 802196e:	46c8      	mov	r8, r9
 8021970:	e782      	b.n	8021878 <__ssvfiscanf_r+0x734>
 8021972:	6a3b      	ldr	r3, [r7, #32]
 8021974:	3302      	adds	r3, #2
 8021976:	d1b0      	bne.n	80218da <__ssvfiscanf_r+0x796>
 8021978:	68be      	ldr	r6, [r7, #8]
 802197a:	6863      	ldr	r3, [r4, #4]
 802197c:	2b00      	cmp	r3, #0
 802197e:	dc41      	bgt.n	8021a04 <__ssvfiscanf_r+0x8c0>
 8021980:	ee18 0a10 	vmov	r0, s16
 8021984:	4621      	mov	r1, r4
 8021986:	f7ff fb87 	bl	8021098 <__ssrefill_r>
 802198a:	2800      	cmp	r0, #0
 802198c:	d03a      	beq.n	8021a04 <__ssvfiscanf_r+0x8c0>
 802198e:	2e00      	cmp	r6, #0
 8021990:	d0c8      	beq.n	8021924 <__ssvfiscanf_r+0x7e0>
 8021992:	e4d8      	b.n	8021346 <__ssvfiscanf_r+0x202>
 8021994:	46b2      	mov	sl, r6
 8021996:	e7ba      	b.n	802190e <__ssvfiscanf_r+0x7ca>
 8021998:	f04f 0a00 	mov.w	sl, #0
 802199c:	e7b7      	b.n	802190e <__ssvfiscanf_r+0x7ca>
 802199e:	68bb      	ldr	r3, [r7, #8]
 80219a0:	3b01      	subs	r3, #1
 80219a2:	ee18 0a10 	vmov	r0, s16
 80219a6:	5cf1      	ldrb	r1, [r6, r3]
 80219a8:	60bb      	str	r3, [r7, #8]
 80219aa:	4622      	mov	r2, r4
 80219ac:	f7ff fb37 	bl	802101e <_sungetc_r>
 80219b0:	e7b5      	b.n	802191e <__ssvfiscanf_r+0x7da>
 80219b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219b4:	68ba      	ldr	r2, [r7, #8]
 80219b6:	4413      	add	r3, r2
 80219b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80219ba:	6a3b      	ldr	r3, [r7, #32]
 80219bc:	2b03      	cmp	r3, #3
 80219be:	d102      	bne.n	80219c6 <__ssvfiscanf_r+0x882>
 80219c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80219c2:	2b04      	cmp	r3, #4
 80219c4:	d002      	beq.n	80219cc <__ssvfiscanf_r+0x888>
 80219c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219c8:	3b01      	subs	r3, #1
 80219ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80219cc:	69bb      	ldr	r3, [r7, #24]
 80219ce:	b9bb      	cbnz	r3, 8021a00 <__ssvfiscanf_r+0x8bc>
 80219d0:	68fb      	ldr	r3, [r7, #12]
 80219d2:	3504      	adds	r5, #4
 80219d4:	b1a3      	cbz	r3, 8021a00 <__ssvfiscanf_r+0x8bc>
 80219d6:	eba5 0608 	sub.w	r6, r5, r8
 80219da:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80219de:	d80d      	bhi.n	80219fc <__ssvfiscanf_r+0x8b8>
 80219e0:	4640      	mov	r0, r8
 80219e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80219e6:	f001 fbf3 	bl	80231d0 <realloc>
 80219ea:	4680      	mov	r8, r0
 80219ec:	2800      	cmp	r0, #0
 80219ee:	f43f ad4c 	beq.w	802148a <__ssvfiscanf_r+0x346>
 80219f2:	68fb      	ldr	r3, [r7, #12]
 80219f4:	1985      	adds	r5, r0, r6
 80219f6:	6018      	str	r0, [r3, #0]
 80219f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80219fc:	69be      	ldr	r6, [r7, #24]
 80219fe:	e7bc      	b.n	802197a <__ssvfiscanf_r+0x836>
 8021a00:	2600      	movs	r6, #0
 8021a02:	e7ba      	b.n	802197a <__ssvfiscanf_r+0x836>
 8021a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	f47f af37 	bne.w	802187a <__ssvfiscanf_r+0x736>
 8021a0c:	e78a      	b.n	8021924 <__ssvfiscanf_r+0x7e0>
 8021a0e:	b1f3      	cbz	r3, 8021a4e <__ssvfiscanf_r+0x90a>
 8021a10:	f107 0870 	add.w	r8, r7, #112	; 0x70
 8021a14:	6823      	ldr	r3, [r4, #0]
 8021a16:	781a      	ldrb	r2, [r3, #0]
 8021a18:	f818 2002 	ldrb.w	r2, [r8, r2]
 8021a1c:	b912      	cbnz	r2, 8021a24 <__ssvfiscanf_r+0x8e0>
 8021a1e:	b99d      	cbnz	r5, 8021a48 <__ssvfiscanf_r+0x904>
 8021a20:	f7ff bbea 	b.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021a24:	3301      	adds	r3, #1
 8021a26:	6862      	ldr	r2, [r4, #4]
 8021a28:	6023      	str	r3, [r4, #0]
 8021a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a2c:	3501      	adds	r5, #1
 8021a2e:	3a01      	subs	r2, #1
 8021a30:	42ab      	cmp	r3, r5
 8021a32:	6062      	str	r2, [r4, #4]
 8021a34:	d008      	beq.n	8021a48 <__ssvfiscanf_r+0x904>
 8021a36:	2a00      	cmp	r2, #0
 8021a38:	dcec      	bgt.n	8021a14 <__ssvfiscanf_r+0x8d0>
 8021a3a:	ee18 0a10 	vmov	r0, s16
 8021a3e:	4621      	mov	r1, r4
 8021a40:	f7ff fb2a 	bl	8021098 <__ssrefill_r>
 8021a44:	2800      	cmp	r0, #0
 8021a46:	d0e5      	beq.n	8021a14 <__ssvfiscanf_r+0x8d0>
 8021a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a4a:	442b      	add	r3, r5
 8021a4c:	e472      	b.n	8021334 <__ssvfiscanf_r+0x1f0>
 8021a4e:	4633      	mov	r3, r6
 8021a50:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8021a54:	f853 6b04 	ldr.w	r6, [r3], #4
 8021a58:	61bb      	str	r3, [r7, #24]
 8021a5a:	f000 8081 	beq.w	8021b60 <__ssvfiscanf_r+0xa1c>
 8021a5e:	2e00      	cmp	r6, #0
 8021a60:	f43f abca 	beq.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021a64:	2020      	movs	r0, #32
 8021a66:	f7fe fb87 	bl	8020178 <malloc>
 8021a6a:	4680      	mov	r8, r0
 8021a6c:	2800      	cmp	r0, #0
 8021a6e:	f43f ac70 	beq.w	8021352 <__ssvfiscanf_r+0x20e>
 8021a72:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021a76:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 8021a7a:	6030      	str	r0, [r6, #0]
 8021a7c:	45a9      	cmp	r9, r5
 8021a7e:	d311      	bcc.n	8021aa4 <__ssvfiscanf_r+0x960>
 8021a80:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021a84:	429d      	cmp	r5, r3
 8021a86:	f63f ad09 	bhi.w	802149c <__ssvfiscanf_r+0x358>
 8021a8a:	3508      	adds	r5, #8
 8021a8c:	f8db 0000 	ldr.w	r0, [fp]
 8021a90:	00a9      	lsls	r1, r5, #2
 8021a92:	f001 fb9d 	bl	80231d0 <realloc>
 8021a96:	2800      	cmp	r0, #0
 8021a98:	f43f ad00 	beq.w	802149c <__ssvfiscanf_r+0x358>
 8021a9c:	f8cb 0000 	str.w	r0, [fp]
 8021aa0:	f8ab 5004 	strh.w	r5, [fp, #4]
 8021aa4:	f8db 3000 	ldr.w	r3, [fp]
 8021aa8:	f109 0201 	add.w	r2, r9, #1
 8021aac:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8021ab0:	46b2      	mov	sl, r6
 8021ab2:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021ab6:	4646      	mov	r6, r8
 8021ab8:	2520      	movs	r5, #32
 8021aba:	46b0      	mov	r8, r6
 8021abc:	f107 0970 	add.w	r9, r7, #112	; 0x70
 8021ac0:	6823      	ldr	r3, [r4, #0]
 8021ac2:	781a      	ldrb	r2, [r3, #0]
 8021ac4:	f819 2002 	ldrb.w	r2, [r9, r2]
 8021ac8:	b36a      	cbz	r2, 8021b26 <__ssvfiscanf_r+0x9e2>
 8021aca:	6862      	ldr	r2, [r4, #4]
 8021acc:	3a01      	subs	r2, #1
 8021ace:	6062      	str	r2, [r4, #4]
 8021ad0:	1c5a      	adds	r2, r3, #1
 8021ad2:	6022      	str	r2, [r4, #0]
 8021ad4:	781b      	ldrb	r3, [r3, #0]
 8021ad6:	f806 3b01 	strb.w	r3, [r6], #1
 8021ada:	f1ba 0f00 	cmp.w	sl, #0
 8021ade:	d011      	beq.n	8021b04 <__ssvfiscanf_r+0x9c0>
 8021ae0:	eba6 0308 	sub.w	r3, r6, r8
 8021ae4:	42ab      	cmp	r3, r5
 8021ae6:	d30d      	bcc.n	8021b04 <__ssvfiscanf_r+0x9c0>
 8021ae8:	006d      	lsls	r5, r5, #1
 8021aea:	4640      	mov	r0, r8
 8021aec:	4629      	mov	r1, r5
 8021aee:	60fb      	str	r3, [r7, #12]
 8021af0:	f001 fb6e 	bl	80231d0 <realloc>
 8021af4:	4680      	mov	r8, r0
 8021af6:	2800      	cmp	r0, #0
 8021af8:	f43f ac2b 	beq.w	8021352 <__ssvfiscanf_r+0x20e>
 8021afc:	68fb      	ldr	r3, [r7, #12]
 8021afe:	f8ca 0000 	str.w	r0, [sl]
 8021b02:	18c6      	adds	r6, r0, r3
 8021b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b06:	3b01      	subs	r3, #1
 8021b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8021b0a:	d00c      	beq.n	8021b26 <__ssvfiscanf_r+0x9e2>
 8021b0c:	6863      	ldr	r3, [r4, #4]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	dcd6      	bgt.n	8021ac0 <__ssvfiscanf_r+0x97c>
 8021b12:	ee18 0a10 	vmov	r0, s16
 8021b16:	4621      	mov	r1, r4
 8021b18:	f7ff fabe 	bl	8021098 <__ssrefill_r>
 8021b1c:	2800      	cmp	r0, #0
 8021b1e:	d0cf      	beq.n	8021ac0 <__ssvfiscanf_r+0x97c>
 8021b20:	4546      	cmp	r6, r8
 8021b22:	f43f ac10 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 8021b26:	ebb6 0808 	subs.w	r8, r6, r8
 8021b2a:	f43f ab65 	beq.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021b2e:	2300      	movs	r3, #0
 8021b30:	7033      	strb	r3, [r6, #0]
 8021b32:	f1ba 0f00 	cmp.w	sl, #0
 8021b36:	d00a      	beq.n	8021b4e <__ssvfiscanf_r+0xa0a>
 8021b38:	f108 0101 	add.w	r1, r8, #1
 8021b3c:	428d      	cmp	r5, r1
 8021b3e:	d906      	bls.n	8021b4e <__ssvfiscanf_r+0xa0a>
 8021b40:	f8da 0000 	ldr.w	r0, [sl]
 8021b44:	f001 fb44 	bl	80231d0 <realloc>
 8021b48:	b108      	cbz	r0, 8021b4e <__ssvfiscanf_r+0xa0a>
 8021b4a:	f8ca 0000 	str.w	r0, [sl]
 8021b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b50:	3301      	adds	r3, #1
 8021b52:	627b      	str	r3, [r7, #36]	; 0x24
 8021b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b56:	4443      	add	r3, r8
 8021b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021b5a:	69be      	ldr	r6, [r7, #24]
 8021b5c:	f7ff bb0f 	b.w	802117e <__ssvfiscanf_r+0x3a>
 8021b60:	46aa      	mov	sl, r5
 8021b62:	e7aa      	b.n	8021aba <__ssvfiscanf_r+0x976>
 8021b64:	200008e0 	.word	0x200008e0
 8021b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	bf08      	it	eq
 8021b6e:	f04f 33ff 	moveq.w	r3, #4294967295
 8021b72:	f019 0501 	ands.w	r5, r9, #1
 8021b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8021b78:	f009 0810 	and.w	r8, r9, #16
 8021b7c:	f000 80f5 	beq.w	8021d6a <__ssvfiscanf_r+0xc26>
 8021b80:	f1b8 0f00 	cmp.w	r8, #0
 8021b84:	f040 809a 	bne.w	8021cbc <__ssvfiscanf_r+0xb78>
 8021b88:	4633      	mov	r3, r6
 8021b8a:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021b8e:	f853 5b04 	ldr.w	r5, [r3], #4
 8021b92:	61bb      	str	r3, [r7, #24]
 8021b94:	f000 809a 	beq.w	8021ccc <__ssvfiscanf_r+0xb88>
 8021b98:	2d00      	cmp	r5, #0
 8021b9a:	f43f ac79 	beq.w	8021490 <__ssvfiscanf_r+0x34c>
 8021b9e:	2080      	movs	r0, #128	; 0x80
 8021ba0:	f7fe faea 	bl	8020178 <malloc>
 8021ba4:	4606      	mov	r6, r0
 8021ba6:	2800      	cmp	r0, #0
 8021ba8:	f43f ac6f 	beq.w	802148a <__ssvfiscanf_r+0x346>
 8021bac:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021bb0:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8021bb4:	6028      	str	r0, [r5, #0]
 8021bb6:	45ca      	cmp	sl, r9
 8021bb8:	d313      	bcc.n	8021be2 <__ssvfiscanf_r+0xa9e>
 8021bba:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021bbe:	4599      	cmp	r9, r3
 8021bc0:	f63f ac63 	bhi.w	802148a <__ssvfiscanf_r+0x346>
 8021bc4:	f109 0908 	add.w	r9, r9, #8
 8021bc8:	f8db 0000 	ldr.w	r0, [fp]
 8021bcc:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021bd0:	f001 fafe 	bl	80231d0 <realloc>
 8021bd4:	2800      	cmp	r0, #0
 8021bd6:	f43f ac58 	beq.w	802148a <__ssvfiscanf_r+0x346>
 8021bda:	f8cb 0000 	str.w	r0, [fp]
 8021bde:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021be2:	f8db 3000 	ldr.w	r3, [fp]
 8021be6:	f10a 0201 	add.w	r2, sl, #1
 8021bea:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8021bee:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021bf2:	46aa      	mov	sl, r5
 8021bf4:	f04f 0920 	mov.w	r9, #32
 8021bf8:	4635      	mov	r5, r6
 8021bfa:	2200      	movs	r2, #0
 8021bfc:	6823      	ldr	r3, [r4, #0]
 8021bfe:	49ab      	ldr	r1, [pc, #684]	; (8021eac <__ssvfiscanf_r+0xd68>)
 8021c00:	781b      	ldrb	r3, [r3, #0]
 8021c02:	5c5b      	ldrb	r3, [r3, r1]
 8021c04:	0718      	lsls	r0, r3, #28
 8021c06:	d43f      	bmi.n	8021c88 <__ssvfiscanf_r+0xb44>
 8021c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d03c      	beq.n	8021c88 <__ssvfiscanf_r+0xb44>
 8021c0e:	60fa      	str	r2, [r7, #12]
 8021c10:	f001 fa88 	bl	8023124 <__locale_mb_cur_max>
 8021c14:	68fa      	ldr	r2, [r7, #12]
 8021c16:	4290      	cmp	r0, r2
 8021c18:	f43f ab95 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 8021c1c:	6821      	ldr	r1, [r4, #0]
 8021c1e:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8021c22:	f811 0b01 	ldrb.w	r0, [r1], #1
 8021c26:	f80c 0002 	strb.w	r0, [ip, r2]
 8021c2a:	1c53      	adds	r3, r2, #1
 8021c2c:	6862      	ldr	r2, [r4, #4]
 8021c2e:	3a01      	subs	r2, #1
 8021c30:	e9c4 1200 	strd	r1, r2, [r4]
 8021c34:	6a3a      	ldr	r2, [r7, #32]
 8021c36:	2a03      	cmp	r2, #3
 8021c38:	d102      	bne.n	8021c40 <__ssvfiscanf_r+0xafc>
 8021c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021c3c:	2a04      	cmp	r2, #4
 8021c3e:	d007      	beq.n	8021c50 <__ssvfiscanf_r+0xb0c>
 8021c40:	2208      	movs	r2, #8
 8021c42:	2100      	movs	r1, #0
 8021c44:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021c48:	623b      	str	r3, [r7, #32]
 8021c4a:	f7f9 fd81 	bl	801b750 <memset>
 8021c4e:	6a3b      	ldr	r3, [r7, #32]
 8021c50:	60fb      	str	r3, [r7, #12]
 8021c52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8021c56:	9200      	str	r2, [sp, #0]
 8021c58:	ee18 0a10 	vmov	r0, s16
 8021c5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8021c60:	4629      	mov	r1, r5
 8021c62:	f001 fa77 	bl	8023154 <_mbrtowc_r>
 8021c66:	1c42      	adds	r2, r0, #1
 8021c68:	6238      	str	r0, [r7, #32]
 8021c6a:	f43f ab6c 	beq.w	8021346 <__ssvfiscanf_r+0x202>
 8021c6e:	68fb      	ldr	r3, [r7, #12]
 8021c70:	bb80      	cbnz	r0, 8021cd4 <__ssvfiscanf_r+0xb90>
 8021c72:	6028      	str	r0, [r5, #0]
 8021c74:	6828      	ldr	r0, [r5, #0]
 8021c76:	60fb      	str	r3, [r7, #12]
 8021c78:	f001 fa46 	bl	8023108 <iswspace>
 8021c7c:	68fb      	ldr	r3, [r7, #12]
 8021c7e:	4602      	mov	r2, r0
 8021c80:	2800      	cmp	r0, #0
 8021c82:	d047      	beq.n	8021d14 <__ssvfiscanf_r+0xbd0>
 8021c84:	2b00      	cmp	r3, #0
 8021c86:	d139      	bne.n	8021cfc <__ssvfiscanf_r+0xbb8>
 8021c88:	f1b8 0f00 	cmp.w	r8, #0
 8021c8c:	f47f af65 	bne.w	8021b5a <__ssvfiscanf_r+0xa16>
 8021c90:	f8c5 8000 	str.w	r8, [r5]
 8021c94:	f1ba 0f00 	cmp.w	sl, #0
 8021c98:	d00c      	beq.n	8021cb4 <__ssvfiscanf_r+0xb70>
 8021c9a:	1ba9      	subs	r1, r5, r6
 8021c9c:	108b      	asrs	r3, r1, #2
 8021c9e:	3301      	adds	r3, #1
 8021ca0:	4599      	cmp	r9, r3
 8021ca2:	d907      	bls.n	8021cb4 <__ssvfiscanf_r+0xb70>
 8021ca4:	f8da 0000 	ldr.w	r0, [sl]
 8021ca8:	3104      	adds	r1, #4
 8021caa:	f001 fa91 	bl	80231d0 <realloc>
 8021cae:	b108      	cbz	r0, 8021cb4 <__ssvfiscanf_r+0xb70>
 8021cb0:	f8ca 0000 	str.w	r0, [sl]
 8021cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8021cba:	e74e      	b.n	8021b5a <__ssvfiscanf_r+0xa16>
 8021cbc:	f04f 0900 	mov.w	r9, #0
 8021cc0:	61be      	str	r6, [r7, #24]
 8021cc2:	46ca      	mov	sl, r9
 8021cc4:	464e      	mov	r6, r9
 8021cc6:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8021cca:	e796      	b.n	8021bfa <__ssvfiscanf_r+0xab6>
 8021ccc:	46c1      	mov	r9, r8
 8021cce:	4646      	mov	r6, r8
 8021cd0:	46c2      	mov	sl, r8
 8021cd2:	e792      	b.n	8021bfa <__ssvfiscanf_r+0xab6>
 8021cd4:	6a3a      	ldr	r2, [r7, #32]
 8021cd6:	3202      	adds	r2, #2
 8021cd8:	d1cc      	bne.n	8021c74 <__ssvfiscanf_r+0xb30>
 8021cda:	461a      	mov	r2, r3
 8021cdc:	6863      	ldr	r3, [r4, #4]
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	dc8c      	bgt.n	8021bfc <__ssvfiscanf_r+0xab8>
 8021ce2:	ee18 0a10 	vmov	r0, s16
 8021ce6:	4621      	mov	r1, r4
 8021ce8:	60fa      	str	r2, [r7, #12]
 8021cea:	f7ff f9d5 	bl	8021098 <__ssrefill_r>
 8021cee:	68fa      	ldr	r2, [r7, #12]
 8021cf0:	2800      	cmp	r0, #0
 8021cf2:	d083      	beq.n	8021bfc <__ssvfiscanf_r+0xab8>
 8021cf4:	2a00      	cmp	r2, #0
 8021cf6:	f47f ab26 	bne.w	8021346 <__ssvfiscanf_r+0x202>
 8021cfa:	e7c5      	b.n	8021c88 <__ssvfiscanf_r+0xb44>
 8021cfc:	3b01      	subs	r3, #1
 8021cfe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021d02:	ee18 0a10 	vmov	r0, s16
 8021d06:	5cc9      	ldrb	r1, [r1, r3]
 8021d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8021d0a:	4622      	mov	r2, r4
 8021d0c:	f7ff f987 	bl	802101e <_sungetc_r>
 8021d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d12:	e7b7      	b.n	8021c84 <__ssvfiscanf_r+0xb40>
 8021d14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021d16:	4419      	add	r1, r3
 8021d18:	6a3b      	ldr	r3, [r7, #32]
 8021d1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8021d1c:	2b03      	cmp	r3, #3
 8021d1e:	d102      	bne.n	8021d26 <__ssvfiscanf_r+0xbe2>
 8021d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021d22:	2b04      	cmp	r3, #4
 8021d24:	d002      	beq.n	8021d2c <__ssvfiscanf_r+0xbe8>
 8021d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d28:	3b01      	subs	r3, #1
 8021d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8021d2c:	f1b8 0f00 	cmp.w	r8, #0
 8021d30:	d1d4      	bne.n	8021cdc <__ssvfiscanf_r+0xb98>
 8021d32:	3504      	adds	r5, #4
 8021d34:	f1ba 0f00 	cmp.w	sl, #0
 8021d38:	d015      	beq.n	8021d66 <__ssvfiscanf_r+0xc22>
 8021d3a:	1bab      	subs	r3, r5, r6
 8021d3c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8021d40:	d80f      	bhi.n	8021d62 <__ssvfiscanf_r+0xc1e>
 8021d42:	4630      	mov	r0, r6
 8021d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021d48:	60fb      	str	r3, [r7, #12]
 8021d4a:	f001 fa41 	bl	80231d0 <realloc>
 8021d4e:	4606      	mov	r6, r0
 8021d50:	2800      	cmp	r0, #0
 8021d52:	f43f ab9a 	beq.w	802148a <__ssvfiscanf_r+0x346>
 8021d56:	68fb      	ldr	r3, [r7, #12]
 8021d58:	f8ca 0000 	str.w	r0, [sl]
 8021d5c:	18c5      	adds	r5, r0, r3
 8021d5e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021d62:	4642      	mov	r2, r8
 8021d64:	e7ba      	b.n	8021cdc <__ssvfiscanf_r+0xb98>
 8021d66:	4652      	mov	r2, sl
 8021d68:	e7b8      	b.n	8021cdc <__ssvfiscanf_r+0xb98>
 8021d6a:	f1b8 0f00 	cmp.w	r8, #0
 8021d6e:	d01a      	beq.n	8021da6 <__ssvfiscanf_r+0xc62>
 8021d70:	6823      	ldr	r3, [r4, #0]
 8021d72:	494e      	ldr	r1, [pc, #312]	; (8021eac <__ssvfiscanf_r+0xd68>)
 8021d74:	781a      	ldrb	r2, [r3, #0]
 8021d76:	5c52      	ldrb	r2, [r2, r1]
 8021d78:	0711      	lsls	r1, r2, #28
 8021d7a:	f53f ae65 	bmi.w	8021a48 <__ssvfiscanf_r+0x904>
 8021d7e:	3301      	adds	r3, #1
 8021d80:	6862      	ldr	r2, [r4, #4]
 8021d82:	6023      	str	r3, [r4, #0]
 8021d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d86:	3501      	adds	r5, #1
 8021d88:	3a01      	subs	r2, #1
 8021d8a:	42ab      	cmp	r3, r5
 8021d8c:	6062      	str	r2, [r4, #4]
 8021d8e:	f43f ae5b 	beq.w	8021a48 <__ssvfiscanf_r+0x904>
 8021d92:	2a00      	cmp	r2, #0
 8021d94:	dcec      	bgt.n	8021d70 <__ssvfiscanf_r+0xc2c>
 8021d96:	ee18 0a10 	vmov	r0, s16
 8021d9a:	4621      	mov	r1, r4
 8021d9c:	f7ff f97c 	bl	8021098 <__ssrefill_r>
 8021da0:	2800      	cmp	r0, #0
 8021da2:	d0e5      	beq.n	8021d70 <__ssvfiscanf_r+0xc2c>
 8021da4:	e650      	b.n	8021a48 <__ssvfiscanf_r+0x904>
 8021da6:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8021daa:	f856 5b04 	ldr.w	r5, [r6], #4
 8021dae:	d07b      	beq.n	8021ea8 <__ssvfiscanf_r+0xd64>
 8021db0:	2d00      	cmp	r5, #0
 8021db2:	f43f aa21 	beq.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021db6:	2020      	movs	r0, #32
 8021db8:	f7fe f9de 	bl	8020178 <malloc>
 8021dbc:	4681      	mov	r9, r0
 8021dbe:	2800      	cmp	r0, #0
 8021dc0:	f43f aac7 	beq.w	8021352 <__ssvfiscanf_r+0x20e>
 8021dc4:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021dc8:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8021dcc:	6028      	str	r0, [r5, #0]
 8021dce:	45c2      	cmp	sl, r8
 8021dd0:	d313      	bcc.n	8021dfa <__ssvfiscanf_r+0xcb6>
 8021dd2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021dd6:	4598      	cmp	r8, r3
 8021dd8:	f63f ab60 	bhi.w	802149c <__ssvfiscanf_r+0x358>
 8021ddc:	f108 0808 	add.w	r8, r8, #8
 8021de0:	f8db 0000 	ldr.w	r0, [fp]
 8021de4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021de8:	f001 f9f2 	bl	80231d0 <realloc>
 8021dec:	2800      	cmp	r0, #0
 8021dee:	f43f ab55 	beq.w	802149c <__ssvfiscanf_r+0x358>
 8021df2:	f8cb 0000 	str.w	r0, [fp]
 8021df6:	f8ab 8004 	strh.w	r8, [fp, #4]
 8021dfa:	f8db 3000 	ldr.w	r3, [fp]
 8021dfe:	f10a 0201 	add.w	r2, sl, #1
 8021e02:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8021e06:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021e0a:	46aa      	mov	sl, r5
 8021e0c:	464d      	mov	r5, r9
 8021e0e:	f04f 0920 	mov.w	r9, #32
 8021e12:	46a8      	mov	r8, r5
 8021e14:	6823      	ldr	r3, [r4, #0]
 8021e16:	4925      	ldr	r1, [pc, #148]	; (8021eac <__ssvfiscanf_r+0xd68>)
 8021e18:	781a      	ldrb	r2, [r3, #0]
 8021e1a:	5c52      	ldrb	r2, [r2, r1]
 8021e1c:	0712      	lsls	r2, r2, #28
 8021e1e:	d42b      	bmi.n	8021e78 <__ssvfiscanf_r+0xd34>
 8021e20:	6862      	ldr	r2, [r4, #4]
 8021e22:	3a01      	subs	r2, #1
 8021e24:	6062      	str	r2, [r4, #4]
 8021e26:	1c5a      	adds	r2, r3, #1
 8021e28:	6022      	str	r2, [r4, #0]
 8021e2a:	781b      	ldrb	r3, [r3, #0]
 8021e2c:	f805 3b01 	strb.w	r3, [r5], #1
 8021e30:	f1ba 0f00 	cmp.w	sl, #0
 8021e34:	d012      	beq.n	8021e5c <__ssvfiscanf_r+0xd18>
 8021e36:	eba5 0308 	sub.w	r3, r5, r8
 8021e3a:	454b      	cmp	r3, r9
 8021e3c:	d30e      	bcc.n	8021e5c <__ssvfiscanf_r+0xd18>
 8021e3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021e42:	4640      	mov	r0, r8
 8021e44:	4649      	mov	r1, r9
 8021e46:	61bb      	str	r3, [r7, #24]
 8021e48:	f001 f9c2 	bl	80231d0 <realloc>
 8021e4c:	4680      	mov	r8, r0
 8021e4e:	2800      	cmp	r0, #0
 8021e50:	f43f aa7f 	beq.w	8021352 <__ssvfiscanf_r+0x20e>
 8021e54:	69bb      	ldr	r3, [r7, #24]
 8021e56:	f8ca 0000 	str.w	r0, [sl]
 8021e5a:	18c5      	adds	r5, r0, r3
 8021e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e5e:	3b01      	subs	r3, #1
 8021e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8021e62:	d009      	beq.n	8021e78 <__ssvfiscanf_r+0xd34>
 8021e64:	6863      	ldr	r3, [r4, #4]
 8021e66:	2b00      	cmp	r3, #0
 8021e68:	dcd4      	bgt.n	8021e14 <__ssvfiscanf_r+0xcd0>
 8021e6a:	ee18 0a10 	vmov	r0, s16
 8021e6e:	4621      	mov	r1, r4
 8021e70:	f7ff f912 	bl	8021098 <__ssrefill_r>
 8021e74:	2800      	cmp	r0, #0
 8021e76:	d0cd      	beq.n	8021e14 <__ssvfiscanf_r+0xcd0>
 8021e78:	2300      	movs	r3, #0
 8021e7a:	702b      	strb	r3, [r5, #0]
 8021e7c:	eba5 0508 	sub.w	r5, r5, r8
 8021e80:	f1ba 0f00 	cmp.w	sl, #0
 8021e84:	d009      	beq.n	8021e9a <__ssvfiscanf_r+0xd56>
 8021e86:	1c69      	adds	r1, r5, #1
 8021e88:	4589      	cmp	r9, r1
 8021e8a:	d906      	bls.n	8021e9a <__ssvfiscanf_r+0xd56>
 8021e8c:	f8da 0000 	ldr.w	r0, [sl]
 8021e90:	f001 f99e 	bl	80231d0 <realloc>
 8021e94:	b108      	cbz	r0, 8021e9a <__ssvfiscanf_r+0xd56>
 8021e96:	f8ca 0000 	str.w	r0, [sl]
 8021e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e9c:	442b      	add	r3, r5
 8021e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ea2:	3301      	adds	r3, #1
 8021ea4:	f7ff b96a 	b.w	802117c <__ssvfiscanf_r+0x38>
 8021ea8:	46ca      	mov	sl, r9
 8021eaa:	e7b2      	b.n	8021e12 <__ssvfiscanf_r+0xcce>
 8021eac:	080291a5 	.word	0x080291a5
 8021eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eb2:	3b01      	subs	r3, #1
 8021eb4:	2b26      	cmp	r3, #38	; 0x26
 8021eb6:	bf81      	itttt	hi
 8021eb8:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 8021eba:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 8021ebe:	2327      	movhi	r3, #39	; 0x27
 8021ec0:	62bb      	strhi	r3, [r7, #40]	; 0x28
 8021ec2:	bf98      	it	ls
 8021ec4:	2500      	movls	r5, #0
 8021ec6:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 8021eca:	f04f 0a00 	mov.w	sl, #0
 8021ece:	f107 0848 	add.w	r8, r7, #72	; 0x48
 8021ed2:	6822      	ldr	r2, [r4, #0]
 8021ed4:	7813      	ldrb	r3, [r2, #0]
 8021ed6:	2b39      	cmp	r3, #57	; 0x39
 8021ed8:	d80f      	bhi.n	8021efa <__ssvfiscanf_r+0xdb6>
 8021eda:	2b2a      	cmp	r3, #42	; 0x2a
 8021edc:	d91a      	bls.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021ede:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8021ee2:	290e      	cmp	r1, #14
 8021ee4:	d816      	bhi.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021ee6:	e8df f001 	tbb	[pc, r1]
 8021eea:	1577      	.short	0x1577
 8021eec:	41151577 	.word	0x41151577
 8021ef0:	67676767 	.word	0x67676767
 8021ef4:	6f676767 	.word	0x6f676767
 8021ef8:	6f          	.byte	0x6f
 8021ef9:	00          	.byte	0x00
 8021efa:	2b66      	cmp	r3, #102	; 0x66
 8021efc:	d834      	bhi.n	8021f68 <__ssvfiscanf_r+0xe24>
 8021efe:	2b60      	cmp	r3, #96	; 0x60
 8021f00:	d803      	bhi.n	8021f0a <__ssvfiscanf_r+0xdc6>
 8021f02:	2b46      	cmp	r3, #70	; 0x46
 8021f04:	d804      	bhi.n	8021f10 <__ssvfiscanf_r+0xdcc>
 8021f06:	2b40      	cmp	r3, #64	; 0x40
 8021f08:	d904      	bls.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021f0a:	69f9      	ldr	r1, [r7, #28]
 8021f0c:	290a      	cmp	r1, #10
 8021f0e:	e061      	b.n	8021fd4 <__ssvfiscanf_r+0xe90>
 8021f10:	2b58      	cmp	r3, #88	; 0x58
 8021f12:	d067      	beq.n	8021fe4 <__ssvfiscanf_r+0xea0>
 8021f14:	f419 7f80 	tst.w	r9, #256	; 0x100
 8021f18:	d012      	beq.n	8021f40 <__ssvfiscanf_r+0xdfc>
 8021f1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021f1e:	4598      	cmp	r8, r3
 8021f20:	d909      	bls.n	8021f36 <__ssvfiscanf_r+0xdf2>
 8021f22:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8021f26:	ee18 0a10 	vmov	r0, s16
 8021f2a:	4622      	mov	r2, r4
 8021f2c:	f7ff f877 	bl	802101e <_sungetc_r>
 8021f30:	f108 35ff 	add.w	r5, r8, #4294967295
 8021f34:	46a8      	mov	r8, r5
 8021f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021f3a:	4598      	cmp	r8, r3
 8021f3c:	f43f a95c 	beq.w	80211f8 <__ssvfiscanf_r+0xb4>
 8021f40:	f019 0210 	ands.w	r2, r9, #16
 8021f44:	d16b      	bne.n	802201e <__ssvfiscanf_r+0xeda>
 8021f46:	697d      	ldr	r5, [r7, #20]
 8021f48:	69fb      	ldr	r3, [r7, #28]
 8021f4a:	f888 2000 	strb.w	r2, [r8]
 8021f4e:	ee18 0a10 	vmov	r0, s16
 8021f52:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021f56:	47a8      	blx	r5
 8021f58:	f019 0f20 	tst.w	r9, #32
 8021f5c:	f106 0504 	add.w	r5, r6, #4
 8021f60:	d054      	beq.n	802200c <__ssvfiscanf_r+0xec8>
 8021f62:	6833      	ldr	r3, [r6, #0]
 8021f64:	6018      	str	r0, [r3, #0]
 8021f66:	e056      	b.n	8022016 <__ssvfiscanf_r+0xed2>
 8021f68:	2b78      	cmp	r3, #120	; 0x78
 8021f6a:	e7d2      	b.n	8021f12 <__ssvfiscanf_r+0xdce>
 8021f6c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8021f70:	d00a      	beq.n	8021f88 <__ssvfiscanf_r+0xe44>
 8021f72:	69f9      	ldr	r1, [r7, #28]
 8021f74:	b919      	cbnz	r1, 8021f7e <__ssvfiscanf_r+0xe3a>
 8021f76:	2108      	movs	r1, #8
 8021f78:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021f7c:	61f9      	str	r1, [r7, #28]
 8021f7e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8021f82:	d004      	beq.n	8021f8e <__ssvfiscanf_r+0xe4a>
 8021f84:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8021f88:	f808 3b01 	strb.w	r3, [r8], #1
 8021f8c:	e008      	b.n	8021fa0 <__ssvfiscanf_r+0xe5c>
 8021f8e:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 8021f92:	b11d      	cbz	r5, 8021f9c <__ssvfiscanf_r+0xe58>
 8021f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f96:	3301      	adds	r3, #1
 8021f98:	3d01      	subs	r5, #1
 8021f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8021f9c:	f10a 0a01 	add.w	sl, sl, #1
 8021fa0:	6863      	ldr	r3, [r4, #4]
 8021fa2:	3b01      	subs	r3, #1
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	6063      	str	r3, [r4, #4]
 8021fa8:	dd28      	ble.n	8021ffc <__ssvfiscanf_r+0xeb8>
 8021faa:	3201      	adds	r2, #1
 8021fac:	6022      	str	r2, [r4, #0]
 8021fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fb0:	3b01      	subs	r3, #1
 8021fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8021fb4:	d18d      	bne.n	8021ed2 <__ssvfiscanf_r+0xd8e>
 8021fb6:	e7ad      	b.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021fb8:	69f8      	ldr	r0, [r7, #28]
 8021fba:	4932      	ldr	r1, [pc, #200]	; (8022084 <__ssvfiscanf_r+0xf40>)
 8021fbc:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021fc0:	61f9      	str	r1, [r7, #28]
 8021fc2:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 8021fc6:	e7df      	b.n	8021f88 <__ssvfiscanf_r+0xe44>
 8021fc8:	69f8      	ldr	r0, [r7, #28]
 8021fca:	492e      	ldr	r1, [pc, #184]	; (8022084 <__ssvfiscanf_r+0xf40>)
 8021fcc:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021fd0:	61f9      	str	r1, [r7, #28]
 8021fd2:	2908      	cmp	r1, #8
 8021fd4:	dcf5      	bgt.n	8021fc2 <__ssvfiscanf_r+0xe7e>
 8021fd6:	e79d      	b.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021fd8:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021fdc:	d09a      	beq.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021fde:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 8021fe2:	e7d1      	b.n	8021f88 <__ssvfiscanf_r+0xe44>
 8021fe4:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 8021fe8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021fec:	d192      	bne.n	8021f14 <__ssvfiscanf_r+0xdd0>
 8021fee:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 8021ff2:	2110      	movs	r1, #16
 8021ff4:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 8021ff8:	61f9      	str	r1, [r7, #28]
 8021ffa:	e7c5      	b.n	8021f88 <__ssvfiscanf_r+0xe44>
 8021ffc:	ee18 0a10 	vmov	r0, s16
 8022000:	4621      	mov	r1, r4
 8022002:	f7ff f849 	bl	8021098 <__ssrefill_r>
 8022006:	2800      	cmp	r0, #0
 8022008:	d0d1      	beq.n	8021fae <__ssvfiscanf_r+0xe6a>
 802200a:	e783      	b.n	8021f14 <__ssvfiscanf_r+0xdd0>
 802200c:	f019 0f08 	tst.w	r9, #8
 8022010:	d00e      	beq.n	8022030 <__ssvfiscanf_r+0xeec>
 8022012:	6833      	ldr	r3, [r6, #0]
 8022014:	7018      	strb	r0, [r3, #0]
 8022016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022018:	3301      	adds	r3, #1
 802201a:	627b      	str	r3, [r7, #36]	; 0x24
 802201c:	462e      	mov	r6, r5
 802201e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8022022:	eba8 0803 	sub.w	r8, r8, r3
 8022026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022028:	44c2      	add	sl, r8
 802202a:	4453      	add	r3, sl
 802202c:	f7ff b982 	b.w	8021334 <__ssvfiscanf_r+0x1f0>
 8022030:	f019 0f04 	tst.w	r9, #4
 8022034:	d002      	beq.n	802203c <__ssvfiscanf_r+0xef8>
 8022036:	6833      	ldr	r3, [r6, #0]
 8022038:	8018      	strh	r0, [r3, #0]
 802203a:	e7ec      	b.n	8022016 <__ssvfiscanf_r+0xed2>
 802203c:	f019 0201 	ands.w	r2, r9, #1
 8022040:	d18f      	bne.n	8021f62 <__ssvfiscanf_r+0xe1e>
 8022042:	f019 0f02 	tst.w	r9, #2
 8022046:	d08c      	beq.n	8021f62 <__ssvfiscanf_r+0xe1e>
 8022048:	4b0f      	ldr	r3, [pc, #60]	; (8022088 <__ssvfiscanf_r+0xf44>)
 802204a:	6979      	ldr	r1, [r7, #20]
 802204c:	4299      	cmp	r1, r3
 802204e:	ee18 0a10 	vmov	r0, s16
 8022052:	69fb      	ldr	r3, [r7, #28]
 8022054:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8022058:	d105      	bne.n	8022066 <__ssvfiscanf_r+0xf22>
 802205a:	f001 fbd3 	bl	8023804 <_strtoull_r>
 802205e:	6833      	ldr	r3, [r6, #0]
 8022060:	e9c3 0100 	strd	r0, r1, [r3]
 8022064:	e7d7      	b.n	8022016 <__ssvfiscanf_r+0xed2>
 8022066:	f001 fb31 	bl	80236cc <_strtoll_r>
 802206a:	e7f8      	b.n	802205e <__ssvfiscanf_r+0xf1a>
 802206c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8022070:	6818      	ldr	r0, [r3, #0]
 8022072:	f7fe f889 	bl	8020188 <free>
 8022076:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802207a:	3401      	adds	r4, #1
 802207c:	601e      	str	r6, [r3, #0]
 802207e:	f7ff ba0f 	b.w	80214a0 <__ssvfiscanf_r+0x35c>
 8022082:	bf00      	nop
 8022084:	080295fc 	.word	0x080295fc
 8022088:	08020f11 	.word	0x08020f11

0802208c <sysconf>:
 802208c:	2808      	cmp	r0, #8
 802208e:	b508      	push	{r3, lr}
 8022090:	d006      	beq.n	80220a0 <sysconf+0x14>
 8022092:	f7fd fc95 	bl	801f9c0 <__errno>
 8022096:	2316      	movs	r3, #22
 8022098:	6003      	str	r3, [r0, #0]
 802209a:	f04f 30ff 	mov.w	r0, #4294967295
 802209e:	bd08      	pop	{r3, pc}
 80220a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80220a4:	e7fb      	b.n	802209e <sysconf+0x12>

080220a6 <__submore>:
 80220a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220aa:	460c      	mov	r4, r1
 80220ac:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80220ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80220b2:	4299      	cmp	r1, r3
 80220b4:	d11d      	bne.n	80220f2 <__submore+0x4c>
 80220b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80220ba:	f7fe f86d 	bl	8020198 <_malloc_r>
 80220be:	b918      	cbnz	r0, 80220c8 <__submore+0x22>
 80220c0:	f04f 30ff 	mov.w	r0, #4294967295
 80220c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80220cc:	6363      	str	r3, [r4, #52]	; 0x34
 80220ce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80220d2:	6320      	str	r0, [r4, #48]	; 0x30
 80220d4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80220d8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80220dc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80220e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80220e4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80220e8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80220ec:	6020      	str	r0, [r4, #0]
 80220ee:	2000      	movs	r0, #0
 80220f0:	e7e8      	b.n	80220c4 <__submore+0x1e>
 80220f2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80220f4:	0077      	lsls	r7, r6, #1
 80220f6:	463a      	mov	r2, r7
 80220f8:	f001 f872 	bl	80231e0 <_realloc_r>
 80220fc:	4605      	mov	r5, r0
 80220fe:	2800      	cmp	r0, #0
 8022100:	d0de      	beq.n	80220c0 <__submore+0x1a>
 8022102:	eb00 0806 	add.w	r8, r0, r6
 8022106:	4601      	mov	r1, r0
 8022108:	4632      	mov	r2, r6
 802210a:	4640      	mov	r0, r8
 802210c:	f7f9 faf8 	bl	801b700 <memcpy>
 8022110:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 8022114:	f8c4 8000 	str.w	r8, [r4]
 8022118:	e7e9      	b.n	80220ee <__submore+0x48>

0802211a <__sprint_r>:
 802211a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802211e:	6893      	ldr	r3, [r2, #8]
 8022120:	4680      	mov	r8, r0
 8022122:	460f      	mov	r7, r1
 8022124:	4614      	mov	r4, r2
 8022126:	b91b      	cbnz	r3, 8022130 <__sprint_r+0x16>
 8022128:	6053      	str	r3, [r2, #4]
 802212a:	4618      	mov	r0, r3
 802212c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022130:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8022132:	049d      	lsls	r5, r3, #18
 8022134:	d520      	bpl.n	8022178 <__sprint_r+0x5e>
 8022136:	6815      	ldr	r5, [r2, #0]
 8022138:	3508      	adds	r5, #8
 802213a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 802213e:	f04f 0900 	mov.w	r9, #0
 8022142:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8022146:	45ca      	cmp	sl, r9
 8022148:	dc0b      	bgt.n	8022162 <__sprint_r+0x48>
 802214a:	68a3      	ldr	r3, [r4, #8]
 802214c:	f026 0003 	bic.w	r0, r6, #3
 8022150:	1a18      	subs	r0, r3, r0
 8022152:	60a0      	str	r0, [r4, #8]
 8022154:	3508      	adds	r5, #8
 8022156:	2800      	cmp	r0, #0
 8022158:	d1ef      	bne.n	802213a <__sprint_r+0x20>
 802215a:	2300      	movs	r3, #0
 802215c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8022160:	e7e4      	b.n	802212c <__sprint_r+0x12>
 8022162:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8022166:	463a      	mov	r2, r7
 8022168:	4640      	mov	r0, r8
 802216a:	f000 fe36 	bl	8022dda <_fputwc_r>
 802216e:	1c43      	adds	r3, r0, #1
 8022170:	d0f3      	beq.n	802215a <__sprint_r+0x40>
 8022172:	f109 0901 	add.w	r9, r9, #1
 8022176:	e7e6      	b.n	8022146 <__sprint_r+0x2c>
 8022178:	f000 fe6c 	bl	8022e54 <__sfvwrite_r>
 802217c:	e7ed      	b.n	802215a <__sprint_r+0x40>
	...

08022180 <_vfiprintf_r>:
 8022180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022184:	ed2d 8b02 	vpush	{d8}
 8022188:	b0b9      	sub	sp, #228	; 0xe4
 802218a:	460f      	mov	r7, r1
 802218c:	9201      	str	r2, [sp, #4]
 802218e:	461d      	mov	r5, r3
 8022190:	461c      	mov	r4, r3
 8022192:	4681      	mov	r9, r0
 8022194:	b118      	cbz	r0, 802219e <_vfiprintf_r+0x1e>
 8022196:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8022198:	b90b      	cbnz	r3, 802219e <_vfiprintf_r+0x1e>
 802219a:	f7fd fd11 	bl	801fbc0 <__sinit>
 802219e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80221a0:	07d8      	lsls	r0, r3, #31
 80221a2:	d405      	bmi.n	80221b0 <_vfiprintf_r+0x30>
 80221a4:	89bb      	ldrh	r3, [r7, #12]
 80221a6:	0599      	lsls	r1, r3, #22
 80221a8:	d402      	bmi.n	80221b0 <_vfiprintf_r+0x30>
 80221aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80221ac:	f7fd ff75 	bl	802009a <__retarget_lock_acquire_recursive>
 80221b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80221b4:	049a      	lsls	r2, r3, #18
 80221b6:	d406      	bmi.n	80221c6 <_vfiprintf_r+0x46>
 80221b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80221bc:	81bb      	strh	r3, [r7, #12]
 80221be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80221c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80221c4:	667b      	str	r3, [r7, #100]	; 0x64
 80221c6:	89bb      	ldrh	r3, [r7, #12]
 80221c8:	071e      	lsls	r6, r3, #28
 80221ca:	d501      	bpl.n	80221d0 <_vfiprintf_r+0x50>
 80221cc:	693b      	ldr	r3, [r7, #16]
 80221ce:	b9bb      	cbnz	r3, 8022200 <_vfiprintf_r+0x80>
 80221d0:	4639      	mov	r1, r7
 80221d2:	4648      	mov	r0, r9
 80221d4:	f7fc fd16 	bl	801ec04 <__swsetup_r>
 80221d8:	b190      	cbz	r0, 8022200 <_vfiprintf_r+0x80>
 80221da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80221dc:	07d8      	lsls	r0, r3, #31
 80221de:	d508      	bpl.n	80221f2 <_vfiprintf_r+0x72>
 80221e0:	f04f 33ff 	mov.w	r3, #4294967295
 80221e4:	9302      	str	r3, [sp, #8]
 80221e6:	9802      	ldr	r0, [sp, #8]
 80221e8:	b039      	add	sp, #228	; 0xe4
 80221ea:	ecbd 8b02 	vpop	{d8}
 80221ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221f2:	89bb      	ldrh	r3, [r7, #12]
 80221f4:	0599      	lsls	r1, r3, #22
 80221f6:	d4f3      	bmi.n	80221e0 <_vfiprintf_r+0x60>
 80221f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80221fa:	f7fd ff50 	bl	802009e <__retarget_lock_release_recursive>
 80221fe:	e7ef      	b.n	80221e0 <_vfiprintf_r+0x60>
 8022200:	89bb      	ldrh	r3, [r7, #12]
 8022202:	f003 021a 	and.w	r2, r3, #26
 8022206:	2a0a      	cmp	r2, #10
 8022208:	d113      	bne.n	8022232 <_vfiprintf_r+0xb2>
 802220a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802220e:	2a00      	cmp	r2, #0
 8022210:	db0f      	blt.n	8022232 <_vfiprintf_r+0xb2>
 8022212:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022214:	07d2      	lsls	r2, r2, #31
 8022216:	d404      	bmi.n	8022222 <_vfiprintf_r+0xa2>
 8022218:	059e      	lsls	r6, r3, #22
 802221a:	d402      	bmi.n	8022222 <_vfiprintf_r+0xa2>
 802221c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802221e:	f7fd ff3e 	bl	802009e <__retarget_lock_release_recursive>
 8022222:	9a01      	ldr	r2, [sp, #4]
 8022224:	462b      	mov	r3, r5
 8022226:	4639      	mov	r1, r7
 8022228:	4648      	mov	r0, r9
 802222a:	f000 fc31 	bl	8022a90 <__sbprintf>
 802222e:	9002      	str	r0, [sp, #8]
 8022230:	e7d9      	b.n	80221e6 <_vfiprintf_r+0x66>
 8022232:	2300      	movs	r3, #0
 8022234:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8022238:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802223c:	ae0f      	add	r6, sp, #60	; 0x3c
 802223e:	ee08 3a10 	vmov	s16, r3
 8022242:	960c      	str	r6, [sp, #48]	; 0x30
 8022244:	9307      	str	r3, [sp, #28]
 8022246:	9302      	str	r3, [sp, #8]
 8022248:	9b01      	ldr	r3, [sp, #4]
 802224a:	461d      	mov	r5, r3
 802224c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022250:	b10a      	cbz	r2, 8022256 <_vfiprintf_r+0xd6>
 8022252:	2a25      	cmp	r2, #37	; 0x25
 8022254:	d1f9      	bne.n	802224a <_vfiprintf_r+0xca>
 8022256:	9b01      	ldr	r3, [sp, #4]
 8022258:	ebb5 0803 	subs.w	r8, r5, r3
 802225c:	d00d      	beq.n	802227a <_vfiprintf_r+0xfa>
 802225e:	e9c6 3800 	strd	r3, r8, [r6]
 8022262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022264:	4443      	add	r3, r8
 8022266:	930e      	str	r3, [sp, #56]	; 0x38
 8022268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802226a:	3301      	adds	r3, #1
 802226c:	2b07      	cmp	r3, #7
 802226e:	930d      	str	r3, [sp, #52]	; 0x34
 8022270:	dc75      	bgt.n	802235e <_vfiprintf_r+0x1de>
 8022272:	3608      	adds	r6, #8
 8022274:	9b02      	ldr	r3, [sp, #8]
 8022276:	4443      	add	r3, r8
 8022278:	9302      	str	r3, [sp, #8]
 802227a:	782b      	ldrb	r3, [r5, #0]
 802227c:	2b00      	cmp	r3, #0
 802227e:	f000 83c8 	beq.w	8022a12 <_vfiprintf_r+0x892>
 8022282:	2300      	movs	r3, #0
 8022284:	f04f 31ff 	mov.w	r1, #4294967295
 8022288:	1c6a      	adds	r2, r5, #1
 802228a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802228e:	9100      	str	r1, [sp, #0]
 8022290:	9303      	str	r3, [sp, #12]
 8022292:	469a      	mov	sl, r3
 8022294:	f812 3b01 	ldrb.w	r3, [r2], #1
 8022298:	9201      	str	r2, [sp, #4]
 802229a:	f1a3 0220 	sub.w	r2, r3, #32
 802229e:	2a5a      	cmp	r2, #90	; 0x5a
 80222a0:	f200 8310 	bhi.w	80228c4 <_vfiprintf_r+0x744>
 80222a4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80222a8:	030e0099 	.word	0x030e0099
 80222ac:	00a1030e 	.word	0x00a1030e
 80222b0:	030e030e 	.word	0x030e030e
 80222b4:	0080030e 	.word	0x0080030e
 80222b8:	030e030e 	.word	0x030e030e
 80222bc:	00ae00a4 	.word	0x00ae00a4
 80222c0:	00ab030e 	.word	0x00ab030e
 80222c4:	030e00b0 	.word	0x030e00b0
 80222c8:	00ce00cb 	.word	0x00ce00cb
 80222cc:	00ce00ce 	.word	0x00ce00ce
 80222d0:	00ce00ce 	.word	0x00ce00ce
 80222d4:	00ce00ce 	.word	0x00ce00ce
 80222d8:	00ce00ce 	.word	0x00ce00ce
 80222dc:	030e030e 	.word	0x030e030e
 80222e0:	030e030e 	.word	0x030e030e
 80222e4:	030e030e 	.word	0x030e030e
 80222e8:	030e030e 	.word	0x030e030e
 80222ec:	00f8030e 	.word	0x00f8030e
 80222f0:	030e0106 	.word	0x030e0106
 80222f4:	030e030e 	.word	0x030e030e
 80222f8:	030e030e 	.word	0x030e030e
 80222fc:	030e030e 	.word	0x030e030e
 8022300:	030e030e 	.word	0x030e030e
 8022304:	014d030e 	.word	0x014d030e
 8022308:	030e030e 	.word	0x030e030e
 802230c:	0192030e 	.word	0x0192030e
 8022310:	0270030e 	.word	0x0270030e
 8022314:	030e030e 	.word	0x030e030e
 8022318:	030e028e 	.word	0x030e028e
 802231c:	030e030e 	.word	0x030e030e
 8022320:	030e030e 	.word	0x030e030e
 8022324:	030e030e 	.word	0x030e030e
 8022328:	030e030e 	.word	0x030e030e
 802232c:	00f8030e 	.word	0x00f8030e
 8022330:	030e0108 	.word	0x030e0108
 8022334:	030e030e 	.word	0x030e030e
 8022338:	010800de 	.word	0x010800de
 802233c:	030e00f2 	.word	0x030e00f2
 8022340:	030e00eb 	.word	0x030e00eb
 8022344:	014f0130 	.word	0x014f0130
 8022348:	00f20182 	.word	0x00f20182
 802234c:	0192030e 	.word	0x0192030e
 8022350:	02720097 	.word	0x02720097
 8022354:	030e030e 	.word	0x030e030e
 8022358:	030e0065 	.word	0x030e0065
 802235c:	0097      	.short	0x0097
 802235e:	aa0c      	add	r2, sp, #48	; 0x30
 8022360:	4639      	mov	r1, r7
 8022362:	4648      	mov	r0, r9
 8022364:	f7ff fed9 	bl	802211a <__sprint_r>
 8022368:	2800      	cmp	r0, #0
 802236a:	f040 8331 	bne.w	80229d0 <_vfiprintf_r+0x850>
 802236e:	ae0f      	add	r6, sp, #60	; 0x3c
 8022370:	e780      	b.n	8022274 <_vfiprintf_r+0xf4>
 8022372:	4a95      	ldr	r2, [pc, #596]	; (80225c8 <_vfiprintf_r+0x448>)
 8022374:	9205      	str	r2, [sp, #20]
 8022376:	f01a 0f20 	tst.w	sl, #32
 802237a:	f000 8225 	beq.w	80227c8 <_vfiprintf_r+0x648>
 802237e:	3407      	adds	r4, #7
 8022380:	f024 0b07 	bic.w	fp, r4, #7
 8022384:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022388:	f01a 0f01 	tst.w	sl, #1
 802238c:	d009      	beq.n	80223a2 <_vfiprintf_r+0x222>
 802238e:	ea54 0205 	orrs.w	r2, r4, r5
 8022392:	bf1f      	itttt	ne
 8022394:	2230      	movne	r2, #48	; 0x30
 8022396:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 802239a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 802239e:	f04a 0a02 	orrne.w	sl, sl, #2
 80223a2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80223a6:	e10d      	b.n	80225c4 <_vfiprintf_r+0x444>
 80223a8:	4648      	mov	r0, r9
 80223aa:	f7fd fe6f 	bl	802008c <_localeconv_r>
 80223ae:	6843      	ldr	r3, [r0, #4]
 80223b0:	4618      	mov	r0, r3
 80223b2:	ee08 3a10 	vmov	s16, r3
 80223b6:	f7dd ff35 	bl	8000224 <strlen>
 80223ba:	9007      	str	r0, [sp, #28]
 80223bc:	4648      	mov	r0, r9
 80223be:	f7fd fe65 	bl	802008c <_localeconv_r>
 80223c2:	6883      	ldr	r3, [r0, #8]
 80223c4:	9306      	str	r3, [sp, #24]
 80223c6:	9b07      	ldr	r3, [sp, #28]
 80223c8:	b12b      	cbz	r3, 80223d6 <_vfiprintf_r+0x256>
 80223ca:	9b06      	ldr	r3, [sp, #24]
 80223cc:	b11b      	cbz	r3, 80223d6 <_vfiprintf_r+0x256>
 80223ce:	781b      	ldrb	r3, [r3, #0]
 80223d0:	b10b      	cbz	r3, 80223d6 <_vfiprintf_r+0x256>
 80223d2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80223d6:	9a01      	ldr	r2, [sp, #4]
 80223d8:	e75c      	b.n	8022294 <_vfiprintf_r+0x114>
 80223da:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d1f9      	bne.n	80223d6 <_vfiprintf_r+0x256>
 80223e2:	2320      	movs	r3, #32
 80223e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80223e8:	e7f5      	b.n	80223d6 <_vfiprintf_r+0x256>
 80223ea:	f04a 0a01 	orr.w	sl, sl, #1
 80223ee:	e7f2      	b.n	80223d6 <_vfiprintf_r+0x256>
 80223f0:	f854 3b04 	ldr.w	r3, [r4], #4
 80223f4:	9303      	str	r3, [sp, #12]
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	daed      	bge.n	80223d6 <_vfiprintf_r+0x256>
 80223fa:	425b      	negs	r3, r3
 80223fc:	9303      	str	r3, [sp, #12]
 80223fe:	f04a 0a04 	orr.w	sl, sl, #4
 8022402:	e7e8      	b.n	80223d6 <_vfiprintf_r+0x256>
 8022404:	232b      	movs	r3, #43	; 0x2b
 8022406:	e7ed      	b.n	80223e4 <_vfiprintf_r+0x264>
 8022408:	9a01      	ldr	r2, [sp, #4]
 802240a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802240e:	2b2a      	cmp	r3, #42	; 0x2a
 8022410:	d112      	bne.n	8022438 <_vfiprintf_r+0x2b8>
 8022412:	f854 0b04 	ldr.w	r0, [r4], #4
 8022416:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 802241a:	e9cd 3200 	strd	r3, r2, [sp]
 802241e:	e7da      	b.n	80223d6 <_vfiprintf_r+0x256>
 8022420:	9b00      	ldr	r3, [sp, #0]
 8022422:	200a      	movs	r0, #10
 8022424:	fb00 1303 	mla	r3, r0, r3, r1
 8022428:	9300      	str	r3, [sp, #0]
 802242a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802242e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8022432:	2909      	cmp	r1, #9
 8022434:	d9f4      	bls.n	8022420 <_vfiprintf_r+0x2a0>
 8022436:	e72f      	b.n	8022298 <_vfiprintf_r+0x118>
 8022438:	2100      	movs	r1, #0
 802243a:	9100      	str	r1, [sp, #0]
 802243c:	e7f7      	b.n	802242e <_vfiprintf_r+0x2ae>
 802243e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8022442:	e7c8      	b.n	80223d6 <_vfiprintf_r+0x256>
 8022444:	2100      	movs	r1, #0
 8022446:	9a01      	ldr	r2, [sp, #4]
 8022448:	9103      	str	r1, [sp, #12]
 802244a:	9903      	ldr	r1, [sp, #12]
 802244c:	3b30      	subs	r3, #48	; 0x30
 802244e:	200a      	movs	r0, #10
 8022450:	fb00 3301 	mla	r3, r0, r1, r3
 8022454:	9303      	str	r3, [sp, #12]
 8022456:	f812 3b01 	ldrb.w	r3, [r2], #1
 802245a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 802245e:	2909      	cmp	r1, #9
 8022460:	d9f3      	bls.n	802244a <_vfiprintf_r+0x2ca>
 8022462:	e719      	b.n	8022298 <_vfiprintf_r+0x118>
 8022464:	9b01      	ldr	r3, [sp, #4]
 8022466:	781b      	ldrb	r3, [r3, #0]
 8022468:	2b68      	cmp	r3, #104	; 0x68
 802246a:	bf01      	itttt	eq
 802246c:	9b01      	ldreq	r3, [sp, #4]
 802246e:	3301      	addeq	r3, #1
 8022470:	9301      	streq	r3, [sp, #4]
 8022472:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8022476:	bf18      	it	ne
 8022478:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 802247c:	e7ab      	b.n	80223d6 <_vfiprintf_r+0x256>
 802247e:	9b01      	ldr	r3, [sp, #4]
 8022480:	781b      	ldrb	r3, [r3, #0]
 8022482:	2b6c      	cmp	r3, #108	; 0x6c
 8022484:	d105      	bne.n	8022492 <_vfiprintf_r+0x312>
 8022486:	9b01      	ldr	r3, [sp, #4]
 8022488:	3301      	adds	r3, #1
 802248a:	9301      	str	r3, [sp, #4]
 802248c:	f04a 0a20 	orr.w	sl, sl, #32
 8022490:	e7a1      	b.n	80223d6 <_vfiprintf_r+0x256>
 8022492:	f04a 0a10 	orr.w	sl, sl, #16
 8022496:	e79e      	b.n	80223d6 <_vfiprintf_r+0x256>
 8022498:	46a3      	mov	fp, r4
 802249a:	2100      	movs	r1, #0
 802249c:	f85b 3b04 	ldr.w	r3, [fp], #4
 80224a0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80224a4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80224a8:	2301      	movs	r3, #1
 80224aa:	9300      	str	r3, [sp, #0]
 80224ac:	460d      	mov	r5, r1
 80224ae:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 80224b2:	e0a0      	b.n	80225f6 <_vfiprintf_r+0x476>
 80224b4:	f04a 0a10 	orr.w	sl, sl, #16
 80224b8:	f01a 0f20 	tst.w	sl, #32
 80224bc:	d011      	beq.n	80224e2 <_vfiprintf_r+0x362>
 80224be:	3407      	adds	r4, #7
 80224c0:	f024 0b07 	bic.w	fp, r4, #7
 80224c4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80224c8:	2c00      	cmp	r4, #0
 80224ca:	f175 0300 	sbcs.w	r3, r5, #0
 80224ce:	da06      	bge.n	80224de <_vfiprintf_r+0x35e>
 80224d0:	4264      	negs	r4, r4
 80224d2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80224d6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80224da:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80224de:	2301      	movs	r3, #1
 80224e0:	e03f      	b.n	8022562 <_vfiprintf_r+0x3e2>
 80224e2:	f01a 0f10 	tst.w	sl, #16
 80224e6:	f104 0b04 	add.w	fp, r4, #4
 80224ea:	d002      	beq.n	80224f2 <_vfiprintf_r+0x372>
 80224ec:	6824      	ldr	r4, [r4, #0]
 80224ee:	17e5      	asrs	r5, r4, #31
 80224f0:	e7ea      	b.n	80224c8 <_vfiprintf_r+0x348>
 80224f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80224f6:	6824      	ldr	r4, [r4, #0]
 80224f8:	d001      	beq.n	80224fe <_vfiprintf_r+0x37e>
 80224fa:	b224      	sxth	r4, r4
 80224fc:	e7f7      	b.n	80224ee <_vfiprintf_r+0x36e>
 80224fe:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022502:	bf18      	it	ne
 8022504:	b264      	sxtbne	r4, r4
 8022506:	e7f2      	b.n	80224ee <_vfiprintf_r+0x36e>
 8022508:	f01a 0f20 	tst.w	sl, #32
 802250c:	f854 3b04 	ldr.w	r3, [r4], #4
 8022510:	d005      	beq.n	802251e <_vfiprintf_r+0x39e>
 8022512:	9a02      	ldr	r2, [sp, #8]
 8022514:	4610      	mov	r0, r2
 8022516:	17d1      	asrs	r1, r2, #31
 8022518:	e9c3 0100 	strd	r0, r1, [r3]
 802251c:	e694      	b.n	8022248 <_vfiprintf_r+0xc8>
 802251e:	f01a 0f10 	tst.w	sl, #16
 8022522:	d002      	beq.n	802252a <_vfiprintf_r+0x3aa>
 8022524:	9a02      	ldr	r2, [sp, #8]
 8022526:	601a      	str	r2, [r3, #0]
 8022528:	e68e      	b.n	8022248 <_vfiprintf_r+0xc8>
 802252a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802252e:	d002      	beq.n	8022536 <_vfiprintf_r+0x3b6>
 8022530:	9a02      	ldr	r2, [sp, #8]
 8022532:	801a      	strh	r2, [r3, #0]
 8022534:	e688      	b.n	8022248 <_vfiprintf_r+0xc8>
 8022536:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802253a:	d0f3      	beq.n	8022524 <_vfiprintf_r+0x3a4>
 802253c:	9a02      	ldr	r2, [sp, #8]
 802253e:	701a      	strb	r2, [r3, #0]
 8022540:	e682      	b.n	8022248 <_vfiprintf_r+0xc8>
 8022542:	f04a 0a10 	orr.w	sl, sl, #16
 8022546:	f01a 0f20 	tst.w	sl, #32
 802254a:	d01d      	beq.n	8022588 <_vfiprintf_r+0x408>
 802254c:	3407      	adds	r4, #7
 802254e:	f024 0b07 	bic.w	fp, r4, #7
 8022552:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022556:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 802255a:	2300      	movs	r3, #0
 802255c:	2200      	movs	r2, #0
 802255e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8022562:	9a00      	ldr	r2, [sp, #0]
 8022564:	3201      	adds	r2, #1
 8022566:	f000 8261 	beq.w	8022a2c <_vfiprintf_r+0x8ac>
 802256a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 802256e:	9204      	str	r2, [sp, #16]
 8022570:	ea54 0205 	orrs.w	r2, r4, r5
 8022574:	f040 8260 	bne.w	8022a38 <_vfiprintf_r+0x8b8>
 8022578:	9a00      	ldr	r2, [sp, #0]
 802257a:	2a00      	cmp	r2, #0
 802257c:	f000 8197 	beq.w	80228ae <_vfiprintf_r+0x72e>
 8022580:	2b01      	cmp	r3, #1
 8022582:	f040 825c 	bne.w	8022a3e <_vfiprintf_r+0x8be>
 8022586:	e135      	b.n	80227f4 <_vfiprintf_r+0x674>
 8022588:	f01a 0f10 	tst.w	sl, #16
 802258c:	f104 0b04 	add.w	fp, r4, #4
 8022590:	d001      	beq.n	8022596 <_vfiprintf_r+0x416>
 8022592:	6824      	ldr	r4, [r4, #0]
 8022594:	e003      	b.n	802259e <_vfiprintf_r+0x41e>
 8022596:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802259a:	d002      	beq.n	80225a2 <_vfiprintf_r+0x422>
 802259c:	8824      	ldrh	r4, [r4, #0]
 802259e:	2500      	movs	r5, #0
 80225a0:	e7d9      	b.n	8022556 <_vfiprintf_r+0x3d6>
 80225a2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80225a6:	d0f4      	beq.n	8022592 <_vfiprintf_r+0x412>
 80225a8:	7824      	ldrb	r4, [r4, #0]
 80225aa:	e7f8      	b.n	802259e <_vfiprintf_r+0x41e>
 80225ac:	46a3      	mov	fp, r4
 80225ae:	f647 0330 	movw	r3, #30768	; 0x7830
 80225b2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80225b6:	f85b 4b04 	ldr.w	r4, [fp], #4
 80225ba:	4b03      	ldr	r3, [pc, #12]	; (80225c8 <_vfiprintf_r+0x448>)
 80225bc:	9305      	str	r3, [sp, #20]
 80225be:	2500      	movs	r5, #0
 80225c0:	f04a 0a02 	orr.w	sl, sl, #2
 80225c4:	2302      	movs	r3, #2
 80225c6:	e7c9      	b.n	802255c <_vfiprintf_r+0x3dc>
 80225c8:	0802937c 	.word	0x0802937c
 80225cc:	9b00      	ldr	r3, [sp, #0]
 80225ce:	46a3      	mov	fp, r4
 80225d0:	2500      	movs	r5, #0
 80225d2:	1c5c      	adds	r4, r3, #1
 80225d4:	f85b 8b04 	ldr.w	r8, [fp], #4
 80225d8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80225dc:	f000 80cf 	beq.w	802277e <_vfiprintf_r+0x5fe>
 80225e0:	461a      	mov	r2, r3
 80225e2:	4629      	mov	r1, r5
 80225e4:	4640      	mov	r0, r8
 80225e6:	f7dd fe2b 	bl	8000240 <memchr>
 80225ea:	2800      	cmp	r0, #0
 80225ec:	f000 8174 	beq.w	80228d8 <_vfiprintf_r+0x758>
 80225f0:	eba0 0308 	sub.w	r3, r0, r8
 80225f4:	9300      	str	r3, [sp, #0]
 80225f6:	9b00      	ldr	r3, [sp, #0]
 80225f8:	42ab      	cmp	r3, r5
 80225fa:	bfb8      	it	lt
 80225fc:	462b      	movlt	r3, r5
 80225fe:	9304      	str	r3, [sp, #16]
 8022600:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022604:	b113      	cbz	r3, 802260c <_vfiprintf_r+0x48c>
 8022606:	9b04      	ldr	r3, [sp, #16]
 8022608:	3301      	adds	r3, #1
 802260a:	9304      	str	r3, [sp, #16]
 802260c:	f01a 0302 	ands.w	r3, sl, #2
 8022610:	9308      	str	r3, [sp, #32]
 8022612:	bf1e      	ittt	ne
 8022614:	9b04      	ldrne	r3, [sp, #16]
 8022616:	3302      	addne	r3, #2
 8022618:	9304      	strne	r3, [sp, #16]
 802261a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 802261e:	9309      	str	r3, [sp, #36]	; 0x24
 8022620:	d11f      	bne.n	8022662 <_vfiprintf_r+0x4e2>
 8022622:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022626:	1a9c      	subs	r4, r3, r2
 8022628:	2c00      	cmp	r4, #0
 802262a:	dd1a      	ble.n	8022662 <_vfiprintf_r+0x4e2>
 802262c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8022630:	48b9      	ldr	r0, [pc, #740]	; (8022918 <_vfiprintf_r+0x798>)
 8022632:	6030      	str	r0, [r6, #0]
 8022634:	2c10      	cmp	r4, #16
 8022636:	f103 0301 	add.w	r3, r3, #1
 802263a:	f106 0108 	add.w	r1, r6, #8
 802263e:	f300 814d 	bgt.w	80228dc <_vfiprintf_r+0x75c>
 8022642:	6074      	str	r4, [r6, #4]
 8022644:	2b07      	cmp	r3, #7
 8022646:	4414      	add	r4, r2
 8022648:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 802264c:	f340 8158 	ble.w	8022900 <_vfiprintf_r+0x780>
 8022650:	aa0c      	add	r2, sp, #48	; 0x30
 8022652:	4639      	mov	r1, r7
 8022654:	4648      	mov	r0, r9
 8022656:	f7ff fd60 	bl	802211a <__sprint_r>
 802265a:	2800      	cmp	r0, #0
 802265c:	f040 81b8 	bne.w	80229d0 <_vfiprintf_r+0x850>
 8022660:	ae0f      	add	r6, sp, #60	; 0x3c
 8022662:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022666:	b173      	cbz	r3, 8022686 <_vfiprintf_r+0x506>
 8022668:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 802266c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802266e:	6032      	str	r2, [r6, #0]
 8022670:	2201      	movs	r2, #1
 8022672:	6072      	str	r2, [r6, #4]
 8022674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022676:	3301      	adds	r3, #1
 8022678:	3201      	adds	r2, #1
 802267a:	2b07      	cmp	r3, #7
 802267c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022680:	f300 8140 	bgt.w	8022904 <_vfiprintf_r+0x784>
 8022684:	3608      	adds	r6, #8
 8022686:	9b08      	ldr	r3, [sp, #32]
 8022688:	b16b      	cbz	r3, 80226a6 <_vfiprintf_r+0x526>
 802268a:	aa0b      	add	r2, sp, #44	; 0x2c
 802268c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802268e:	6032      	str	r2, [r6, #0]
 8022690:	2202      	movs	r2, #2
 8022692:	6072      	str	r2, [r6, #4]
 8022694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022696:	3301      	adds	r3, #1
 8022698:	3202      	adds	r2, #2
 802269a:	2b07      	cmp	r3, #7
 802269c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80226a0:	f300 8140 	bgt.w	8022924 <_vfiprintf_r+0x7a4>
 80226a4:	3608      	adds	r6, #8
 80226a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226a8:	2b80      	cmp	r3, #128	; 0x80
 80226aa:	d11f      	bne.n	80226ec <_vfiprintf_r+0x56c>
 80226ac:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80226b0:	1a9c      	subs	r4, r3, r2
 80226b2:	2c00      	cmp	r4, #0
 80226b4:	dd1a      	ble.n	80226ec <_vfiprintf_r+0x56c>
 80226b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80226ba:	4898      	ldr	r0, [pc, #608]	; (802291c <_vfiprintf_r+0x79c>)
 80226bc:	6030      	str	r0, [r6, #0]
 80226be:	2c10      	cmp	r4, #16
 80226c0:	f103 0301 	add.w	r3, r3, #1
 80226c4:	f106 0108 	add.w	r1, r6, #8
 80226c8:	f300 8135 	bgt.w	8022936 <_vfiprintf_r+0x7b6>
 80226cc:	6074      	str	r4, [r6, #4]
 80226ce:	2b07      	cmp	r3, #7
 80226d0:	4414      	add	r4, r2
 80226d2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80226d6:	f340 8140 	ble.w	802295a <_vfiprintf_r+0x7da>
 80226da:	aa0c      	add	r2, sp, #48	; 0x30
 80226dc:	4639      	mov	r1, r7
 80226de:	4648      	mov	r0, r9
 80226e0:	f7ff fd1b 	bl	802211a <__sprint_r>
 80226e4:	2800      	cmp	r0, #0
 80226e6:	f040 8173 	bne.w	80229d0 <_vfiprintf_r+0x850>
 80226ea:	ae0f      	add	r6, sp, #60	; 0x3c
 80226ec:	9b00      	ldr	r3, [sp, #0]
 80226ee:	1aec      	subs	r4, r5, r3
 80226f0:	2c00      	cmp	r4, #0
 80226f2:	dd1a      	ble.n	802272a <_vfiprintf_r+0x5aa>
 80226f4:	4d89      	ldr	r5, [pc, #548]	; (802291c <_vfiprintf_r+0x79c>)
 80226f6:	6035      	str	r5, [r6, #0]
 80226f8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80226fc:	2c10      	cmp	r4, #16
 80226fe:	f103 0301 	add.w	r3, r3, #1
 8022702:	f106 0208 	add.w	r2, r6, #8
 8022706:	f300 812a 	bgt.w	802295e <_vfiprintf_r+0x7de>
 802270a:	6074      	str	r4, [r6, #4]
 802270c:	2b07      	cmp	r3, #7
 802270e:	440c      	add	r4, r1
 8022710:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022714:	f340 8134 	ble.w	8022980 <_vfiprintf_r+0x800>
 8022718:	aa0c      	add	r2, sp, #48	; 0x30
 802271a:	4639      	mov	r1, r7
 802271c:	4648      	mov	r0, r9
 802271e:	f7ff fcfc 	bl	802211a <__sprint_r>
 8022722:	2800      	cmp	r0, #0
 8022724:	f040 8154 	bne.w	80229d0 <_vfiprintf_r+0x850>
 8022728:	ae0f      	add	r6, sp, #60	; 0x3c
 802272a:	9b00      	ldr	r3, [sp, #0]
 802272c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802272e:	6073      	str	r3, [r6, #4]
 8022730:	4418      	add	r0, r3
 8022732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022734:	f8c6 8000 	str.w	r8, [r6]
 8022738:	3301      	adds	r3, #1
 802273a:	2b07      	cmp	r3, #7
 802273c:	900e      	str	r0, [sp, #56]	; 0x38
 802273e:	930d      	str	r3, [sp, #52]	; 0x34
 8022740:	f300 8120 	bgt.w	8022984 <_vfiprintf_r+0x804>
 8022744:	f106 0308 	add.w	r3, r6, #8
 8022748:	f01a 0f04 	tst.w	sl, #4
 802274c:	f040 8122 	bne.w	8022994 <_vfiprintf_r+0x814>
 8022750:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8022754:	9904      	ldr	r1, [sp, #16]
 8022756:	428a      	cmp	r2, r1
 8022758:	bfac      	ite	ge
 802275a:	189b      	addge	r3, r3, r2
 802275c:	185b      	addlt	r3, r3, r1
 802275e:	9302      	str	r3, [sp, #8]
 8022760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022762:	b13b      	cbz	r3, 8022774 <_vfiprintf_r+0x5f4>
 8022764:	aa0c      	add	r2, sp, #48	; 0x30
 8022766:	4639      	mov	r1, r7
 8022768:	4648      	mov	r0, r9
 802276a:	f7ff fcd6 	bl	802211a <__sprint_r>
 802276e:	2800      	cmp	r0, #0
 8022770:	f040 812e 	bne.w	80229d0 <_vfiprintf_r+0x850>
 8022774:	2300      	movs	r3, #0
 8022776:	930d      	str	r3, [sp, #52]	; 0x34
 8022778:	465c      	mov	r4, fp
 802277a:	ae0f      	add	r6, sp, #60	; 0x3c
 802277c:	e564      	b.n	8022248 <_vfiprintf_r+0xc8>
 802277e:	4640      	mov	r0, r8
 8022780:	f7dd fd50 	bl	8000224 <strlen>
 8022784:	9000      	str	r0, [sp, #0]
 8022786:	e736      	b.n	80225f6 <_vfiprintf_r+0x476>
 8022788:	f04a 0a10 	orr.w	sl, sl, #16
 802278c:	f01a 0f20 	tst.w	sl, #32
 8022790:	d006      	beq.n	80227a0 <_vfiprintf_r+0x620>
 8022792:	3407      	adds	r4, #7
 8022794:	f024 0b07 	bic.w	fp, r4, #7
 8022798:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 802279c:	2301      	movs	r3, #1
 802279e:	e6dd      	b.n	802255c <_vfiprintf_r+0x3dc>
 80227a0:	f01a 0f10 	tst.w	sl, #16
 80227a4:	f104 0b04 	add.w	fp, r4, #4
 80227a8:	d001      	beq.n	80227ae <_vfiprintf_r+0x62e>
 80227aa:	6824      	ldr	r4, [r4, #0]
 80227ac:	e003      	b.n	80227b6 <_vfiprintf_r+0x636>
 80227ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80227b2:	d002      	beq.n	80227ba <_vfiprintf_r+0x63a>
 80227b4:	8824      	ldrh	r4, [r4, #0]
 80227b6:	2500      	movs	r5, #0
 80227b8:	e7f0      	b.n	802279c <_vfiprintf_r+0x61c>
 80227ba:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80227be:	d0f4      	beq.n	80227aa <_vfiprintf_r+0x62a>
 80227c0:	7824      	ldrb	r4, [r4, #0]
 80227c2:	e7f8      	b.n	80227b6 <_vfiprintf_r+0x636>
 80227c4:	4a56      	ldr	r2, [pc, #344]	; (8022920 <_vfiprintf_r+0x7a0>)
 80227c6:	e5d5      	b.n	8022374 <_vfiprintf_r+0x1f4>
 80227c8:	f01a 0f10 	tst.w	sl, #16
 80227cc:	f104 0b04 	add.w	fp, r4, #4
 80227d0:	d001      	beq.n	80227d6 <_vfiprintf_r+0x656>
 80227d2:	6824      	ldr	r4, [r4, #0]
 80227d4:	e003      	b.n	80227de <_vfiprintf_r+0x65e>
 80227d6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80227da:	d002      	beq.n	80227e2 <_vfiprintf_r+0x662>
 80227dc:	8824      	ldrh	r4, [r4, #0]
 80227de:	2500      	movs	r5, #0
 80227e0:	e5d2      	b.n	8022388 <_vfiprintf_r+0x208>
 80227e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80227e6:	d0f4      	beq.n	80227d2 <_vfiprintf_r+0x652>
 80227e8:	7824      	ldrb	r4, [r4, #0]
 80227ea:	e7f8      	b.n	80227de <_vfiprintf_r+0x65e>
 80227ec:	2d00      	cmp	r5, #0
 80227ee:	bf08      	it	eq
 80227f0:	2c0a      	cmpeq	r4, #10
 80227f2:	d205      	bcs.n	8022800 <_vfiprintf_r+0x680>
 80227f4:	3430      	adds	r4, #48	; 0x30
 80227f6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 80227fa:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 80227fe:	e13c      	b.n	8022a7a <_vfiprintf_r+0x8fa>
 8022800:	ab38      	add	r3, sp, #224	; 0xe0
 8022802:	9308      	str	r3, [sp, #32]
 8022804:	9b04      	ldr	r3, [sp, #16]
 8022806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802280a:	f04f 0a00 	mov.w	sl, #0
 802280e:	9309      	str	r3, [sp, #36]	; 0x24
 8022810:	9b08      	ldr	r3, [sp, #32]
 8022812:	220a      	movs	r2, #10
 8022814:	f103 38ff 	add.w	r8, r3, #4294967295
 8022818:	4620      	mov	r0, r4
 802281a:	2300      	movs	r3, #0
 802281c:	4629      	mov	r1, r5
 802281e:	f7de fa43 	bl	8000ca8 <__aeabi_uldivmod>
 8022822:	9b08      	ldr	r3, [sp, #32]
 8022824:	3230      	adds	r2, #48	; 0x30
 8022826:	f803 2c01 	strb.w	r2, [r3, #-1]
 802282a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802282c:	f10a 0a01 	add.w	sl, sl, #1
 8022830:	b1db      	cbz	r3, 802286a <_vfiprintf_r+0x6ea>
 8022832:	9b06      	ldr	r3, [sp, #24]
 8022834:	781b      	ldrb	r3, [r3, #0]
 8022836:	4553      	cmp	r3, sl
 8022838:	d117      	bne.n	802286a <_vfiprintf_r+0x6ea>
 802283a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802283e:	d014      	beq.n	802286a <_vfiprintf_r+0x6ea>
 8022840:	2d00      	cmp	r5, #0
 8022842:	bf08      	it	eq
 8022844:	2c0a      	cmpeq	r4, #10
 8022846:	d310      	bcc.n	802286a <_vfiprintf_r+0x6ea>
 8022848:	9b07      	ldr	r3, [sp, #28]
 802284a:	eba8 0803 	sub.w	r8, r8, r3
 802284e:	461a      	mov	r2, r3
 8022850:	ee18 1a10 	vmov	r1, s16
 8022854:	4640      	mov	r0, r8
 8022856:	f7f9 faa4 	bl	801bda2 <strncpy>
 802285a:	9b06      	ldr	r3, [sp, #24]
 802285c:	785b      	ldrb	r3, [r3, #1]
 802285e:	b1a3      	cbz	r3, 802288a <_vfiprintf_r+0x70a>
 8022860:	9b06      	ldr	r3, [sp, #24]
 8022862:	3301      	adds	r3, #1
 8022864:	9306      	str	r3, [sp, #24]
 8022866:	f04f 0a00 	mov.w	sl, #0
 802286a:	220a      	movs	r2, #10
 802286c:	2300      	movs	r3, #0
 802286e:	4620      	mov	r0, r4
 8022870:	4629      	mov	r1, r5
 8022872:	f7de fa19 	bl	8000ca8 <__aeabi_uldivmod>
 8022876:	2d00      	cmp	r5, #0
 8022878:	bf08      	it	eq
 802287a:	2c0a      	cmpeq	r4, #10
 802287c:	f0c0 80fd 	bcc.w	8022a7a <_vfiprintf_r+0x8fa>
 8022880:	4604      	mov	r4, r0
 8022882:	460d      	mov	r5, r1
 8022884:	f8cd 8020 	str.w	r8, [sp, #32]
 8022888:	e7c2      	b.n	8022810 <_vfiprintf_r+0x690>
 802288a:	469a      	mov	sl, r3
 802288c:	e7ed      	b.n	802286a <_vfiprintf_r+0x6ea>
 802288e:	9a05      	ldr	r2, [sp, #20]
 8022890:	f004 030f 	and.w	r3, r4, #15
 8022894:	5cd3      	ldrb	r3, [r2, r3]
 8022896:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802289a:	0923      	lsrs	r3, r4, #4
 802289c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80228a0:	092a      	lsrs	r2, r5, #4
 80228a2:	461c      	mov	r4, r3
 80228a4:	4615      	mov	r5, r2
 80228a6:	ea54 0305 	orrs.w	r3, r4, r5
 80228aa:	d1f0      	bne.n	802288e <_vfiprintf_r+0x70e>
 80228ac:	e0e5      	b.n	8022a7a <_vfiprintf_r+0x8fa>
 80228ae:	b933      	cbnz	r3, 80228be <_vfiprintf_r+0x73e>
 80228b0:	f01a 0f01 	tst.w	sl, #1
 80228b4:	d003      	beq.n	80228be <_vfiprintf_r+0x73e>
 80228b6:	2330      	movs	r3, #48	; 0x30
 80228b8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 80228bc:	e79d      	b.n	80227fa <_vfiprintf_r+0x67a>
 80228be:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80228c2:	e0da      	b.n	8022a7a <_vfiprintf_r+0x8fa>
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	f000 80a4 	beq.w	8022a12 <_vfiprintf_r+0x892>
 80228ca:	2100      	movs	r1, #0
 80228cc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80228d0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80228d4:	46a3      	mov	fp, r4
 80228d6:	e5e7      	b.n	80224a8 <_vfiprintf_r+0x328>
 80228d8:	4605      	mov	r5, r0
 80228da:	e68c      	b.n	80225f6 <_vfiprintf_r+0x476>
 80228dc:	2010      	movs	r0, #16
 80228de:	4402      	add	r2, r0
 80228e0:	2b07      	cmp	r3, #7
 80228e2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80228e6:	6070      	str	r0, [r6, #4]
 80228e8:	dd07      	ble.n	80228fa <_vfiprintf_r+0x77a>
 80228ea:	aa0c      	add	r2, sp, #48	; 0x30
 80228ec:	4639      	mov	r1, r7
 80228ee:	4648      	mov	r0, r9
 80228f0:	f7ff fc13 	bl	802211a <__sprint_r>
 80228f4:	2800      	cmp	r0, #0
 80228f6:	d16b      	bne.n	80229d0 <_vfiprintf_r+0x850>
 80228f8:	a90f      	add	r1, sp, #60	; 0x3c
 80228fa:	3c10      	subs	r4, #16
 80228fc:	460e      	mov	r6, r1
 80228fe:	e695      	b.n	802262c <_vfiprintf_r+0x4ac>
 8022900:	460e      	mov	r6, r1
 8022902:	e6ae      	b.n	8022662 <_vfiprintf_r+0x4e2>
 8022904:	aa0c      	add	r2, sp, #48	; 0x30
 8022906:	4639      	mov	r1, r7
 8022908:	4648      	mov	r0, r9
 802290a:	f7ff fc06 	bl	802211a <__sprint_r>
 802290e:	2800      	cmp	r0, #0
 8022910:	d15e      	bne.n	80229d0 <_vfiprintf_r+0x850>
 8022912:	ae0f      	add	r6, sp, #60	; 0x3c
 8022914:	e6b7      	b.n	8022686 <_vfiprintf_r+0x506>
 8022916:	bf00      	nop
 8022918:	0802961e 	.word	0x0802961e
 802291c:	0802962e 	.word	0x0802962e
 8022920:	0802938d 	.word	0x0802938d
 8022924:	aa0c      	add	r2, sp, #48	; 0x30
 8022926:	4639      	mov	r1, r7
 8022928:	4648      	mov	r0, r9
 802292a:	f7ff fbf6 	bl	802211a <__sprint_r>
 802292e:	2800      	cmp	r0, #0
 8022930:	d14e      	bne.n	80229d0 <_vfiprintf_r+0x850>
 8022932:	ae0f      	add	r6, sp, #60	; 0x3c
 8022934:	e6b7      	b.n	80226a6 <_vfiprintf_r+0x526>
 8022936:	2010      	movs	r0, #16
 8022938:	4402      	add	r2, r0
 802293a:	2b07      	cmp	r3, #7
 802293c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022940:	6070      	str	r0, [r6, #4]
 8022942:	dd07      	ble.n	8022954 <_vfiprintf_r+0x7d4>
 8022944:	aa0c      	add	r2, sp, #48	; 0x30
 8022946:	4639      	mov	r1, r7
 8022948:	4648      	mov	r0, r9
 802294a:	f7ff fbe6 	bl	802211a <__sprint_r>
 802294e:	2800      	cmp	r0, #0
 8022950:	d13e      	bne.n	80229d0 <_vfiprintf_r+0x850>
 8022952:	a90f      	add	r1, sp, #60	; 0x3c
 8022954:	3c10      	subs	r4, #16
 8022956:	460e      	mov	r6, r1
 8022958:	e6ad      	b.n	80226b6 <_vfiprintf_r+0x536>
 802295a:	460e      	mov	r6, r1
 802295c:	e6c6      	b.n	80226ec <_vfiprintf_r+0x56c>
 802295e:	2010      	movs	r0, #16
 8022960:	4401      	add	r1, r0
 8022962:	2b07      	cmp	r3, #7
 8022964:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8022968:	6070      	str	r0, [r6, #4]
 802296a:	dd06      	ble.n	802297a <_vfiprintf_r+0x7fa>
 802296c:	aa0c      	add	r2, sp, #48	; 0x30
 802296e:	4639      	mov	r1, r7
 8022970:	4648      	mov	r0, r9
 8022972:	f7ff fbd2 	bl	802211a <__sprint_r>
 8022976:	bb58      	cbnz	r0, 80229d0 <_vfiprintf_r+0x850>
 8022978:	aa0f      	add	r2, sp, #60	; 0x3c
 802297a:	3c10      	subs	r4, #16
 802297c:	4616      	mov	r6, r2
 802297e:	e6ba      	b.n	80226f6 <_vfiprintf_r+0x576>
 8022980:	4616      	mov	r6, r2
 8022982:	e6d2      	b.n	802272a <_vfiprintf_r+0x5aa>
 8022984:	aa0c      	add	r2, sp, #48	; 0x30
 8022986:	4639      	mov	r1, r7
 8022988:	4648      	mov	r0, r9
 802298a:	f7ff fbc6 	bl	802211a <__sprint_r>
 802298e:	b9f8      	cbnz	r0, 80229d0 <_vfiprintf_r+0x850>
 8022990:	ab0f      	add	r3, sp, #60	; 0x3c
 8022992:	e6d9      	b.n	8022748 <_vfiprintf_r+0x5c8>
 8022994:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8022998:	1a54      	subs	r4, r2, r1
 802299a:	2c00      	cmp	r4, #0
 802299c:	f77f aed8 	ble.w	8022750 <_vfiprintf_r+0x5d0>
 80229a0:	4d3a      	ldr	r5, [pc, #232]	; (8022a8c <_vfiprintf_r+0x90c>)
 80229a2:	2610      	movs	r6, #16
 80229a4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80229a8:	2c10      	cmp	r4, #16
 80229aa:	f102 0201 	add.w	r2, r2, #1
 80229ae:	601d      	str	r5, [r3, #0]
 80229b0:	dc1d      	bgt.n	80229ee <_vfiprintf_r+0x86e>
 80229b2:	605c      	str	r4, [r3, #4]
 80229b4:	2a07      	cmp	r2, #7
 80229b6:	440c      	add	r4, r1
 80229b8:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 80229bc:	f77f aec8 	ble.w	8022750 <_vfiprintf_r+0x5d0>
 80229c0:	aa0c      	add	r2, sp, #48	; 0x30
 80229c2:	4639      	mov	r1, r7
 80229c4:	4648      	mov	r0, r9
 80229c6:	f7ff fba8 	bl	802211a <__sprint_r>
 80229ca:	2800      	cmp	r0, #0
 80229cc:	f43f aec0 	beq.w	8022750 <_vfiprintf_r+0x5d0>
 80229d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80229d2:	07d9      	lsls	r1, r3, #31
 80229d4:	d405      	bmi.n	80229e2 <_vfiprintf_r+0x862>
 80229d6:	89bb      	ldrh	r3, [r7, #12]
 80229d8:	059a      	lsls	r2, r3, #22
 80229da:	d402      	bmi.n	80229e2 <_vfiprintf_r+0x862>
 80229dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80229de:	f7fd fb5e 	bl	802009e <__retarget_lock_release_recursive>
 80229e2:	89bb      	ldrh	r3, [r7, #12]
 80229e4:	065b      	lsls	r3, r3, #25
 80229e6:	f57f abfe 	bpl.w	80221e6 <_vfiprintf_r+0x66>
 80229ea:	f7ff bbf9 	b.w	80221e0 <_vfiprintf_r+0x60>
 80229ee:	3110      	adds	r1, #16
 80229f0:	2a07      	cmp	r2, #7
 80229f2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 80229f6:	605e      	str	r6, [r3, #4]
 80229f8:	dc02      	bgt.n	8022a00 <_vfiprintf_r+0x880>
 80229fa:	3308      	adds	r3, #8
 80229fc:	3c10      	subs	r4, #16
 80229fe:	e7d1      	b.n	80229a4 <_vfiprintf_r+0x824>
 8022a00:	aa0c      	add	r2, sp, #48	; 0x30
 8022a02:	4639      	mov	r1, r7
 8022a04:	4648      	mov	r0, r9
 8022a06:	f7ff fb88 	bl	802211a <__sprint_r>
 8022a0a:	2800      	cmp	r0, #0
 8022a0c:	d1e0      	bne.n	80229d0 <_vfiprintf_r+0x850>
 8022a0e:	ab0f      	add	r3, sp, #60	; 0x3c
 8022a10:	e7f4      	b.n	80229fc <_vfiprintf_r+0x87c>
 8022a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022a14:	b913      	cbnz	r3, 8022a1c <_vfiprintf_r+0x89c>
 8022a16:	2300      	movs	r3, #0
 8022a18:	930d      	str	r3, [sp, #52]	; 0x34
 8022a1a:	e7d9      	b.n	80229d0 <_vfiprintf_r+0x850>
 8022a1c:	aa0c      	add	r2, sp, #48	; 0x30
 8022a1e:	4639      	mov	r1, r7
 8022a20:	4648      	mov	r0, r9
 8022a22:	f7ff fb7a 	bl	802211a <__sprint_r>
 8022a26:	2800      	cmp	r0, #0
 8022a28:	d0f5      	beq.n	8022a16 <_vfiprintf_r+0x896>
 8022a2a:	e7d1      	b.n	80229d0 <_vfiprintf_r+0x850>
 8022a2c:	ea54 0205 	orrs.w	r2, r4, r5
 8022a30:	f8cd a010 	str.w	sl, [sp, #16]
 8022a34:	f43f ada4 	beq.w	8022580 <_vfiprintf_r+0x400>
 8022a38:	2b01      	cmp	r3, #1
 8022a3a:	f43f aed7 	beq.w	80227ec <_vfiprintf_r+0x66c>
 8022a3e:	2b02      	cmp	r3, #2
 8022a40:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022a44:	f43f af23 	beq.w	802288e <_vfiprintf_r+0x70e>
 8022a48:	08e2      	lsrs	r2, r4, #3
 8022a4a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8022a4e:	08e8      	lsrs	r0, r5, #3
 8022a50:	f004 0307 	and.w	r3, r4, #7
 8022a54:	4605      	mov	r5, r0
 8022a56:	4614      	mov	r4, r2
 8022a58:	3330      	adds	r3, #48	; 0x30
 8022a5a:	ea54 0205 	orrs.w	r2, r4, r5
 8022a5e:	4641      	mov	r1, r8
 8022a60:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8022a64:	d1f0      	bne.n	8022a48 <_vfiprintf_r+0x8c8>
 8022a66:	9a04      	ldr	r2, [sp, #16]
 8022a68:	07d0      	lsls	r0, r2, #31
 8022a6a:	d506      	bpl.n	8022a7a <_vfiprintf_r+0x8fa>
 8022a6c:	2b30      	cmp	r3, #48	; 0x30
 8022a6e:	d004      	beq.n	8022a7a <_vfiprintf_r+0x8fa>
 8022a70:	2330      	movs	r3, #48	; 0x30
 8022a72:	f808 3c01 	strb.w	r3, [r8, #-1]
 8022a76:	f1a1 0802 	sub.w	r8, r1, #2
 8022a7a:	ab38      	add	r3, sp, #224	; 0xe0
 8022a7c:	eba3 0308 	sub.w	r3, r3, r8
 8022a80:	9d00      	ldr	r5, [sp, #0]
 8022a82:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022a86:	9300      	str	r3, [sp, #0]
 8022a88:	e5b5      	b.n	80225f6 <_vfiprintf_r+0x476>
 8022a8a:	bf00      	nop
 8022a8c:	0802961e 	.word	0x0802961e

08022a90 <__sbprintf>:
 8022a90:	b570      	push	{r4, r5, r6, lr}
 8022a92:	460c      	mov	r4, r1
 8022a94:	8989      	ldrh	r1, [r1, #12]
 8022a96:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8022a9a:	f021 0102 	bic.w	r1, r1, #2
 8022a9e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8022aa2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8022aa4:	911b      	str	r1, [sp, #108]	; 0x6c
 8022aa6:	89e1      	ldrh	r1, [r4, #14]
 8022aa8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8022aac:	69e1      	ldr	r1, [r4, #28]
 8022aae:	9109      	str	r1, [sp, #36]	; 0x24
 8022ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8022ab2:	910b      	str	r1, [sp, #44]	; 0x2c
 8022ab4:	a91c      	add	r1, sp, #112	; 0x70
 8022ab6:	9102      	str	r1, [sp, #8]
 8022ab8:	9106      	str	r1, [sp, #24]
 8022aba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022abe:	4606      	mov	r6, r0
 8022ac0:	9104      	str	r1, [sp, #16]
 8022ac2:	9107      	str	r1, [sp, #28]
 8022ac4:	a818      	add	r0, sp, #96	; 0x60
 8022ac6:	2100      	movs	r1, #0
 8022ac8:	e9cd 3200 	strd	r3, r2, [sp]
 8022acc:	9108      	str	r1, [sp, #32]
 8022ace:	f7fd fae1 	bl	8020094 <__retarget_lock_init_recursive>
 8022ad2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022ad6:	a902      	add	r1, sp, #8
 8022ad8:	4630      	mov	r0, r6
 8022ada:	f7ff fb51 	bl	8022180 <_vfiprintf_r>
 8022ade:	1e05      	subs	r5, r0, #0
 8022ae0:	db07      	blt.n	8022af2 <__sbprintf+0x62>
 8022ae2:	a902      	add	r1, sp, #8
 8022ae4:	4630      	mov	r0, r6
 8022ae6:	f7fc ffff 	bl	801fae8 <_fflush_r>
 8022aea:	2800      	cmp	r0, #0
 8022aec:	bf18      	it	ne
 8022aee:	f04f 35ff 	movne.w	r5, #4294967295
 8022af2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8022af6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022af8:	065b      	lsls	r3, r3, #25
 8022afa:	bf42      	ittt	mi
 8022afc:	89a3      	ldrhmi	r3, [r4, #12]
 8022afe:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8022b02:	81a3      	strhmi	r3, [r4, #12]
 8022b04:	f7fd fac7 	bl	8020096 <__retarget_lock_close_recursive>
 8022b08:	4628      	mov	r0, r5
 8022b0a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8022b0e:	bd70      	pop	{r4, r5, r6, pc}

08022b10 <_write_r>:
 8022b10:	b538      	push	{r3, r4, r5, lr}
 8022b12:	4d07      	ldr	r5, [pc, #28]	; (8022b30 <_write_r+0x20>)
 8022b14:	4604      	mov	r4, r0
 8022b16:	4608      	mov	r0, r1
 8022b18:	4611      	mov	r1, r2
 8022b1a:	2200      	movs	r2, #0
 8022b1c:	602a      	str	r2, [r5, #0]
 8022b1e:	461a      	mov	r2, r3
 8022b20:	f7de fafb 	bl	800111a <_write>
 8022b24:	1c43      	adds	r3, r0, #1
 8022b26:	d102      	bne.n	8022b2e <_write_r+0x1e>
 8022b28:	682b      	ldr	r3, [r5, #0]
 8022b2a:	b103      	cbz	r3, 8022b2e <_write_r+0x1e>
 8022b2c:	6023      	str	r3, [r4, #0]
 8022b2e:	bd38      	pop	{r3, r4, r5, pc}
 8022b30:	2000be70 	.word	0x2000be70

08022b34 <__register_exitproc>:
 8022b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b38:	4d1c      	ldr	r5, [pc, #112]	; (8022bac <__register_exitproc+0x78>)
 8022b3a:	4606      	mov	r6, r0
 8022b3c:	6828      	ldr	r0, [r5, #0]
 8022b3e:	4698      	mov	r8, r3
 8022b40:	460f      	mov	r7, r1
 8022b42:	4691      	mov	r9, r2
 8022b44:	f7fd faa9 	bl	802009a <__retarget_lock_acquire_recursive>
 8022b48:	4b19      	ldr	r3, [pc, #100]	; (8022bb0 <__register_exitproc+0x7c>)
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8022b50:	4628      	mov	r0, r5
 8022b52:	b91c      	cbnz	r4, 8022b5c <__register_exitproc+0x28>
 8022b54:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8022b58:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8022b5c:	6865      	ldr	r5, [r4, #4]
 8022b5e:	6800      	ldr	r0, [r0, #0]
 8022b60:	2d1f      	cmp	r5, #31
 8022b62:	dd05      	ble.n	8022b70 <__register_exitproc+0x3c>
 8022b64:	f7fd fa9b 	bl	802009e <__retarget_lock_release_recursive>
 8022b68:	f04f 30ff 	mov.w	r0, #4294967295
 8022b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b70:	b19e      	cbz	r6, 8022b9a <__register_exitproc+0x66>
 8022b72:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8022b76:	2201      	movs	r2, #1
 8022b78:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8022b7c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8022b80:	40aa      	lsls	r2, r5
 8022b82:	4313      	orrs	r3, r2
 8022b84:	2e02      	cmp	r6, #2
 8022b86:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8022b8a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8022b8e:	bf02      	ittt	eq
 8022b90:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8022b94:	431a      	orreq	r2, r3
 8022b96:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8022b9a:	1c6b      	adds	r3, r5, #1
 8022b9c:	3502      	adds	r5, #2
 8022b9e:	6063      	str	r3, [r4, #4]
 8022ba0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8022ba4:	f7fd fa7b 	bl	802009e <__retarget_lock_release_recursive>
 8022ba8:	2000      	movs	r0, #0
 8022baa:	e7df      	b.n	8022b6c <__register_exitproc+0x38>
 8022bac:	20000470 	.word	0x20000470
 8022bb0:	080292a8 	.word	0x080292a8

08022bb4 <__assert_func>:
 8022bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022bb6:	4614      	mov	r4, r2
 8022bb8:	461a      	mov	r2, r3
 8022bba:	4b09      	ldr	r3, [pc, #36]	; (8022be0 <__assert_func+0x2c>)
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	4605      	mov	r5, r0
 8022bc0:	68d8      	ldr	r0, [r3, #12]
 8022bc2:	b14c      	cbz	r4, 8022bd8 <__assert_func+0x24>
 8022bc4:	4b07      	ldr	r3, [pc, #28]	; (8022be4 <__assert_func+0x30>)
 8022bc6:	9100      	str	r1, [sp, #0]
 8022bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022bcc:	4906      	ldr	r1, [pc, #24]	; (8022be8 <__assert_func+0x34>)
 8022bce:	462b      	mov	r3, r5
 8022bd0:	f000 f8b0 	bl	8022d34 <fiprintf>
 8022bd4:	f000 fe85 	bl	80238e2 <abort>
 8022bd8:	4b04      	ldr	r3, [pc, #16]	; (8022bec <__assert_func+0x38>)
 8022bda:	461c      	mov	r4, r3
 8022bdc:	e7f3      	b.n	8022bc6 <__assert_func+0x12>
 8022bde:	bf00      	nop
 8022be0:	20000038 	.word	0x20000038
 8022be4:	0802963e 	.word	0x0802963e
 8022be8:	0802964b 	.word	0x0802964b
 8022bec:	08029679 	.word	0x08029679

08022bf0 <_calloc_r>:
 8022bf0:	b510      	push	{r4, lr}
 8022bf2:	4351      	muls	r1, r2
 8022bf4:	f7fd fad0 	bl	8020198 <_malloc_r>
 8022bf8:	4604      	mov	r4, r0
 8022bfa:	b198      	cbz	r0, 8022c24 <_calloc_r+0x34>
 8022bfc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022c00:	f022 0203 	bic.w	r2, r2, #3
 8022c04:	3a04      	subs	r2, #4
 8022c06:	2a24      	cmp	r2, #36	; 0x24
 8022c08:	d81b      	bhi.n	8022c42 <_calloc_r+0x52>
 8022c0a:	2a13      	cmp	r2, #19
 8022c0c:	d917      	bls.n	8022c3e <_calloc_r+0x4e>
 8022c0e:	2100      	movs	r1, #0
 8022c10:	2a1b      	cmp	r2, #27
 8022c12:	e9c0 1100 	strd	r1, r1, [r0]
 8022c16:	d807      	bhi.n	8022c28 <_calloc_r+0x38>
 8022c18:	f100 0308 	add.w	r3, r0, #8
 8022c1c:	2200      	movs	r2, #0
 8022c1e:	e9c3 2200 	strd	r2, r2, [r3]
 8022c22:	609a      	str	r2, [r3, #8]
 8022c24:	4620      	mov	r0, r4
 8022c26:	bd10      	pop	{r4, pc}
 8022c28:	2a24      	cmp	r2, #36	; 0x24
 8022c2a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8022c2e:	bf11      	iteee	ne
 8022c30:	f100 0310 	addne.w	r3, r0, #16
 8022c34:	6101      	streq	r1, [r0, #16]
 8022c36:	f100 0318 	addeq.w	r3, r0, #24
 8022c3a:	6141      	streq	r1, [r0, #20]
 8022c3c:	e7ee      	b.n	8022c1c <_calloc_r+0x2c>
 8022c3e:	4603      	mov	r3, r0
 8022c40:	e7ec      	b.n	8022c1c <_calloc_r+0x2c>
 8022c42:	2100      	movs	r1, #0
 8022c44:	f7f8 fd84 	bl	801b750 <memset>
 8022c48:	e7ec      	b.n	8022c24 <_calloc_r+0x34>
	...

08022c4c <_close_r>:
 8022c4c:	b538      	push	{r3, r4, r5, lr}
 8022c4e:	4d06      	ldr	r5, [pc, #24]	; (8022c68 <_close_r+0x1c>)
 8022c50:	2300      	movs	r3, #0
 8022c52:	4604      	mov	r4, r0
 8022c54:	4608      	mov	r0, r1
 8022c56:	602b      	str	r3, [r5, #0]
 8022c58:	f7e1 fa0b 	bl	8004072 <_close>
 8022c5c:	1c43      	adds	r3, r0, #1
 8022c5e:	d102      	bne.n	8022c66 <_close_r+0x1a>
 8022c60:	682b      	ldr	r3, [r5, #0]
 8022c62:	b103      	cbz	r3, 8022c66 <_close_r+0x1a>
 8022c64:	6023      	str	r3, [r4, #0]
 8022c66:	bd38      	pop	{r3, r4, r5, pc}
 8022c68:	2000be70 	.word	0x2000be70

08022c6c <__env_lock>:
 8022c6c:	4801      	ldr	r0, [pc, #4]	; (8022c74 <__env_lock+0x8>)
 8022c6e:	f7fd ba14 	b.w	802009a <__retarget_lock_acquire_recursive>
 8022c72:	bf00      	nop
 8022c74:	2000be7a 	.word	0x2000be7a

08022c78 <__env_unlock>:
 8022c78:	4801      	ldr	r0, [pc, #4]	; (8022c80 <__env_unlock+0x8>)
 8022c7a:	f7fd ba10 	b.w	802009e <__retarget_lock_release_recursive>
 8022c7e:	bf00      	nop
 8022c80:	2000be7a 	.word	0x2000be7a

08022c84 <_fclose_r>:
 8022c84:	b570      	push	{r4, r5, r6, lr}
 8022c86:	4606      	mov	r6, r0
 8022c88:	460c      	mov	r4, r1
 8022c8a:	b911      	cbnz	r1, 8022c92 <_fclose_r+0xe>
 8022c8c:	2500      	movs	r5, #0
 8022c8e:	4628      	mov	r0, r5
 8022c90:	bd70      	pop	{r4, r5, r6, pc}
 8022c92:	b118      	cbz	r0, 8022c9c <_fclose_r+0x18>
 8022c94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8022c96:	b90b      	cbnz	r3, 8022c9c <_fclose_r+0x18>
 8022c98:	f7fc ff92 	bl	801fbc0 <__sinit>
 8022c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c9e:	07d8      	lsls	r0, r3, #31
 8022ca0:	d405      	bmi.n	8022cae <_fclose_r+0x2a>
 8022ca2:	89a3      	ldrh	r3, [r4, #12]
 8022ca4:	0599      	lsls	r1, r3, #22
 8022ca6:	d402      	bmi.n	8022cae <_fclose_r+0x2a>
 8022ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022caa:	f7fd f9f6 	bl	802009a <__retarget_lock_acquire_recursive>
 8022cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cb2:	b93b      	cbnz	r3, 8022cc4 <_fclose_r+0x40>
 8022cb4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8022cb6:	f015 0501 	ands.w	r5, r5, #1
 8022cba:	d1e7      	bne.n	8022c8c <_fclose_r+0x8>
 8022cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022cbe:	f7fd f9ee 	bl	802009e <__retarget_lock_release_recursive>
 8022cc2:	e7e4      	b.n	8022c8e <_fclose_r+0xa>
 8022cc4:	4621      	mov	r1, r4
 8022cc6:	4630      	mov	r0, r6
 8022cc8:	f7fc fe80 	bl	801f9cc <__sflush_r>
 8022ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022cce:	4605      	mov	r5, r0
 8022cd0:	b133      	cbz	r3, 8022ce0 <_fclose_r+0x5c>
 8022cd2:	69e1      	ldr	r1, [r4, #28]
 8022cd4:	4630      	mov	r0, r6
 8022cd6:	4798      	blx	r3
 8022cd8:	2800      	cmp	r0, #0
 8022cda:	bfb8      	it	lt
 8022cdc:	f04f 35ff 	movlt.w	r5, #4294967295
 8022ce0:	89a3      	ldrh	r3, [r4, #12]
 8022ce2:	061a      	lsls	r2, r3, #24
 8022ce4:	d503      	bpl.n	8022cee <_fclose_r+0x6a>
 8022ce6:	6921      	ldr	r1, [r4, #16]
 8022ce8:	4630      	mov	r0, r6
 8022cea:	f7fc fff9 	bl	801fce0 <_free_r>
 8022cee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022cf0:	b141      	cbz	r1, 8022d04 <_fclose_r+0x80>
 8022cf2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8022cf6:	4299      	cmp	r1, r3
 8022cf8:	d002      	beq.n	8022d00 <_fclose_r+0x7c>
 8022cfa:	4630      	mov	r0, r6
 8022cfc:	f7fc fff0 	bl	801fce0 <_free_r>
 8022d00:	2300      	movs	r3, #0
 8022d02:	6323      	str	r3, [r4, #48]	; 0x30
 8022d04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022d06:	b121      	cbz	r1, 8022d12 <_fclose_r+0x8e>
 8022d08:	4630      	mov	r0, r6
 8022d0a:	f7fc ffe9 	bl	801fce0 <_free_r>
 8022d0e:	2300      	movs	r3, #0
 8022d10:	6463      	str	r3, [r4, #68]	; 0x44
 8022d12:	f7fc ff3d 	bl	801fb90 <__sfp_lock_acquire>
 8022d16:	2300      	movs	r3, #0
 8022d18:	81a3      	strh	r3, [r4, #12]
 8022d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022d1c:	07db      	lsls	r3, r3, #31
 8022d1e:	d402      	bmi.n	8022d26 <_fclose_r+0xa2>
 8022d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d22:	f7fd f9bc 	bl	802009e <__retarget_lock_release_recursive>
 8022d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d28:	f7fd f9b5 	bl	8020096 <__retarget_lock_close_recursive>
 8022d2c:	f7fc ff36 	bl	801fb9c <__sfp_lock_release>
 8022d30:	e7ad      	b.n	8022c8e <_fclose_r+0xa>
	...

08022d34 <fiprintf>:
 8022d34:	b40e      	push	{r1, r2, r3}
 8022d36:	b503      	push	{r0, r1, lr}
 8022d38:	4601      	mov	r1, r0
 8022d3a:	ab03      	add	r3, sp, #12
 8022d3c:	4805      	ldr	r0, [pc, #20]	; (8022d54 <fiprintf+0x20>)
 8022d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d42:	6800      	ldr	r0, [r0, #0]
 8022d44:	9301      	str	r3, [sp, #4]
 8022d46:	f7ff fa1b 	bl	8022180 <_vfiprintf_r>
 8022d4a:	b002      	add	sp, #8
 8022d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d50:	b003      	add	sp, #12
 8022d52:	4770      	bx	lr
 8022d54:	20000038 	.word	0x20000038

08022d58 <__fputwc>:
 8022d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022d5c:	4680      	mov	r8, r0
 8022d5e:	460e      	mov	r6, r1
 8022d60:	4615      	mov	r5, r2
 8022d62:	f000 f9df 	bl	8023124 <__locale_mb_cur_max>
 8022d66:	2801      	cmp	r0, #1
 8022d68:	d11c      	bne.n	8022da4 <__fputwc+0x4c>
 8022d6a:	1e73      	subs	r3, r6, #1
 8022d6c:	2bfe      	cmp	r3, #254	; 0xfe
 8022d6e:	d819      	bhi.n	8022da4 <__fputwc+0x4c>
 8022d70:	f88d 6004 	strb.w	r6, [sp, #4]
 8022d74:	4604      	mov	r4, r0
 8022d76:	2700      	movs	r7, #0
 8022d78:	f10d 0904 	add.w	r9, sp, #4
 8022d7c:	42a7      	cmp	r7, r4
 8022d7e:	d020      	beq.n	8022dc2 <__fputwc+0x6a>
 8022d80:	68ab      	ldr	r3, [r5, #8]
 8022d82:	f817 1009 	ldrb.w	r1, [r7, r9]
 8022d86:	3b01      	subs	r3, #1
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	60ab      	str	r3, [r5, #8]
 8022d8c:	da04      	bge.n	8022d98 <__fputwc+0x40>
 8022d8e:	69aa      	ldr	r2, [r5, #24]
 8022d90:	4293      	cmp	r3, r2
 8022d92:	db1a      	blt.n	8022dca <__fputwc+0x72>
 8022d94:	290a      	cmp	r1, #10
 8022d96:	d018      	beq.n	8022dca <__fputwc+0x72>
 8022d98:	682b      	ldr	r3, [r5, #0]
 8022d9a:	1c5a      	adds	r2, r3, #1
 8022d9c:	602a      	str	r2, [r5, #0]
 8022d9e:	7019      	strb	r1, [r3, #0]
 8022da0:	3701      	adds	r7, #1
 8022da2:	e7eb      	b.n	8022d7c <__fputwc+0x24>
 8022da4:	4632      	mov	r2, r6
 8022da6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8022daa:	a901      	add	r1, sp, #4
 8022dac:	4640      	mov	r0, r8
 8022dae:	f000 fd75 	bl	802389c <_wcrtomb_r>
 8022db2:	1c42      	adds	r2, r0, #1
 8022db4:	4604      	mov	r4, r0
 8022db6:	d1de      	bne.n	8022d76 <__fputwc+0x1e>
 8022db8:	89ab      	ldrh	r3, [r5, #12]
 8022dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022dbe:	81ab      	strh	r3, [r5, #12]
 8022dc0:	4606      	mov	r6, r0
 8022dc2:	4630      	mov	r0, r6
 8022dc4:	b003      	add	sp, #12
 8022dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022dca:	462a      	mov	r2, r5
 8022dcc:	4640      	mov	r0, r8
 8022dce:	f000 fd1b 	bl	8023808 <__swbuf_r>
 8022dd2:	1c43      	adds	r3, r0, #1
 8022dd4:	d1e4      	bne.n	8022da0 <__fputwc+0x48>
 8022dd6:	4606      	mov	r6, r0
 8022dd8:	e7f3      	b.n	8022dc2 <__fputwc+0x6a>

08022dda <_fputwc_r>:
 8022dda:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8022ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022dde:	4614      	mov	r4, r2
 8022de0:	07da      	lsls	r2, r3, #31
 8022de2:	4605      	mov	r5, r0
 8022de4:	d407      	bmi.n	8022df6 <_fputwc_r+0x1c>
 8022de6:	89a3      	ldrh	r3, [r4, #12]
 8022de8:	059b      	lsls	r3, r3, #22
 8022dea:	d404      	bmi.n	8022df6 <_fputwc_r+0x1c>
 8022dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022dee:	9101      	str	r1, [sp, #4]
 8022df0:	f7fd f953 	bl	802009a <__retarget_lock_acquire_recursive>
 8022df4:	9901      	ldr	r1, [sp, #4]
 8022df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022dfa:	0498      	lsls	r0, r3, #18
 8022dfc:	d406      	bmi.n	8022e0c <_fputwc_r+0x32>
 8022dfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022e02:	81a3      	strh	r3, [r4, #12]
 8022e04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022e0a:	6663      	str	r3, [r4, #100]	; 0x64
 8022e0c:	4622      	mov	r2, r4
 8022e0e:	4628      	mov	r0, r5
 8022e10:	f7ff ffa2 	bl	8022d58 <__fputwc>
 8022e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e16:	07da      	lsls	r2, r3, #31
 8022e18:	4605      	mov	r5, r0
 8022e1a:	d405      	bmi.n	8022e28 <_fputwc_r+0x4e>
 8022e1c:	89a3      	ldrh	r3, [r4, #12]
 8022e1e:	059b      	lsls	r3, r3, #22
 8022e20:	d402      	bmi.n	8022e28 <_fputwc_r+0x4e>
 8022e22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e24:	f7fd f93b 	bl	802009e <__retarget_lock_release_recursive>
 8022e28:	4628      	mov	r0, r5
 8022e2a:	b003      	add	sp, #12
 8022e2c:	bd30      	pop	{r4, r5, pc}
	...

08022e30 <_fstat_r>:
 8022e30:	b538      	push	{r3, r4, r5, lr}
 8022e32:	4d07      	ldr	r5, [pc, #28]	; (8022e50 <_fstat_r+0x20>)
 8022e34:	2300      	movs	r3, #0
 8022e36:	4604      	mov	r4, r0
 8022e38:	4608      	mov	r0, r1
 8022e3a:	4611      	mov	r1, r2
 8022e3c:	602b      	str	r3, [r5, #0]
 8022e3e:	f7e1 f924 	bl	800408a <_fstat>
 8022e42:	1c43      	adds	r3, r0, #1
 8022e44:	d102      	bne.n	8022e4c <_fstat_r+0x1c>
 8022e46:	682b      	ldr	r3, [r5, #0]
 8022e48:	b103      	cbz	r3, 8022e4c <_fstat_r+0x1c>
 8022e4a:	6023      	str	r3, [r4, #0]
 8022e4c:	bd38      	pop	{r3, r4, r5, pc}
 8022e4e:	bf00      	nop
 8022e50:	2000be70 	.word	0x2000be70

08022e54 <__sfvwrite_r>:
 8022e54:	6893      	ldr	r3, [r2, #8]
 8022e56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e5a:	4606      	mov	r6, r0
 8022e5c:	460c      	mov	r4, r1
 8022e5e:	4690      	mov	r8, r2
 8022e60:	b91b      	cbnz	r3, 8022e6a <__sfvwrite_r+0x16>
 8022e62:	2000      	movs	r0, #0
 8022e64:	b003      	add	sp, #12
 8022e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e6a:	898b      	ldrh	r3, [r1, #12]
 8022e6c:	0718      	lsls	r0, r3, #28
 8022e6e:	d550      	bpl.n	8022f12 <__sfvwrite_r+0xbe>
 8022e70:	690b      	ldr	r3, [r1, #16]
 8022e72:	2b00      	cmp	r3, #0
 8022e74:	d04d      	beq.n	8022f12 <__sfvwrite_r+0xbe>
 8022e76:	89a3      	ldrh	r3, [r4, #12]
 8022e78:	f8d8 7000 	ldr.w	r7, [r8]
 8022e7c:	f013 0902 	ands.w	r9, r3, #2
 8022e80:	d16c      	bne.n	8022f5c <__sfvwrite_r+0x108>
 8022e82:	f013 0301 	ands.w	r3, r3, #1
 8022e86:	f000 809c 	beq.w	8022fc2 <__sfvwrite_r+0x16e>
 8022e8a:	4648      	mov	r0, r9
 8022e8c:	46ca      	mov	sl, r9
 8022e8e:	46cb      	mov	fp, r9
 8022e90:	f1bb 0f00 	cmp.w	fp, #0
 8022e94:	f000 8103 	beq.w	802309e <__sfvwrite_r+0x24a>
 8022e98:	b950      	cbnz	r0, 8022eb0 <__sfvwrite_r+0x5c>
 8022e9a:	465a      	mov	r2, fp
 8022e9c:	210a      	movs	r1, #10
 8022e9e:	4650      	mov	r0, sl
 8022ea0:	f7dd f9ce 	bl	8000240 <memchr>
 8022ea4:	2800      	cmp	r0, #0
 8022ea6:	f000 80ff 	beq.w	80230a8 <__sfvwrite_r+0x254>
 8022eaa:	3001      	adds	r0, #1
 8022eac:	eba0 090a 	sub.w	r9, r0, sl
 8022eb0:	6820      	ldr	r0, [r4, #0]
 8022eb2:	6921      	ldr	r1, [r4, #16]
 8022eb4:	6963      	ldr	r3, [r4, #20]
 8022eb6:	45d9      	cmp	r9, fp
 8022eb8:	464a      	mov	r2, r9
 8022eba:	bf28      	it	cs
 8022ebc:	465a      	movcs	r2, fp
 8022ebe:	4288      	cmp	r0, r1
 8022ec0:	f240 80f5 	bls.w	80230ae <__sfvwrite_r+0x25a>
 8022ec4:	68a5      	ldr	r5, [r4, #8]
 8022ec6:	441d      	add	r5, r3
 8022ec8:	42aa      	cmp	r2, r5
 8022eca:	f340 80f0 	ble.w	80230ae <__sfvwrite_r+0x25a>
 8022ece:	4651      	mov	r1, sl
 8022ed0:	462a      	mov	r2, r5
 8022ed2:	f7f8 fc23 	bl	801b71c <memmove>
 8022ed6:	6823      	ldr	r3, [r4, #0]
 8022ed8:	442b      	add	r3, r5
 8022eda:	6023      	str	r3, [r4, #0]
 8022edc:	4621      	mov	r1, r4
 8022ede:	4630      	mov	r0, r6
 8022ee0:	f7fc fe02 	bl	801fae8 <_fflush_r>
 8022ee4:	2800      	cmp	r0, #0
 8022ee6:	d167      	bne.n	8022fb8 <__sfvwrite_r+0x164>
 8022ee8:	ebb9 0905 	subs.w	r9, r9, r5
 8022eec:	f040 80f7 	bne.w	80230de <__sfvwrite_r+0x28a>
 8022ef0:	4621      	mov	r1, r4
 8022ef2:	4630      	mov	r0, r6
 8022ef4:	f7fc fdf8 	bl	801fae8 <_fflush_r>
 8022ef8:	2800      	cmp	r0, #0
 8022efa:	d15d      	bne.n	8022fb8 <__sfvwrite_r+0x164>
 8022efc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8022f00:	44aa      	add	sl, r5
 8022f02:	ebab 0b05 	sub.w	fp, fp, r5
 8022f06:	1b55      	subs	r5, r2, r5
 8022f08:	f8c8 5008 	str.w	r5, [r8, #8]
 8022f0c:	2d00      	cmp	r5, #0
 8022f0e:	d1bf      	bne.n	8022e90 <__sfvwrite_r+0x3c>
 8022f10:	e7a7      	b.n	8022e62 <__sfvwrite_r+0xe>
 8022f12:	4621      	mov	r1, r4
 8022f14:	4630      	mov	r0, r6
 8022f16:	f7fb fe75 	bl	801ec04 <__swsetup_r>
 8022f1a:	2800      	cmp	r0, #0
 8022f1c:	d0ab      	beq.n	8022e76 <__sfvwrite_r+0x22>
 8022f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8022f22:	e79f      	b.n	8022e64 <__sfvwrite_r+0x10>
 8022f24:	e9d7 b900 	ldrd	fp, r9, [r7]
 8022f28:	3708      	adds	r7, #8
 8022f2a:	f1b9 0f00 	cmp.w	r9, #0
 8022f2e:	d0f9      	beq.n	8022f24 <__sfvwrite_r+0xd0>
 8022f30:	45d1      	cmp	r9, sl
 8022f32:	464b      	mov	r3, r9
 8022f34:	69e1      	ldr	r1, [r4, #28]
 8022f36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022f38:	bf28      	it	cs
 8022f3a:	4653      	movcs	r3, sl
 8022f3c:	465a      	mov	r2, fp
 8022f3e:	4630      	mov	r0, r6
 8022f40:	47a8      	blx	r5
 8022f42:	2800      	cmp	r0, #0
 8022f44:	dd38      	ble.n	8022fb8 <__sfvwrite_r+0x164>
 8022f46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022f4a:	4483      	add	fp, r0
 8022f4c:	eba9 0900 	sub.w	r9, r9, r0
 8022f50:	1a18      	subs	r0, r3, r0
 8022f52:	f8c8 0008 	str.w	r0, [r8, #8]
 8022f56:	2800      	cmp	r0, #0
 8022f58:	d1e7      	bne.n	8022f2a <__sfvwrite_r+0xd6>
 8022f5a:	e782      	b.n	8022e62 <__sfvwrite_r+0xe>
 8022f5c:	f04f 0b00 	mov.w	fp, #0
 8022f60:	f8df a180 	ldr.w	sl, [pc, #384]	; 80230e4 <__sfvwrite_r+0x290>
 8022f64:	46d9      	mov	r9, fp
 8022f66:	e7e0      	b.n	8022f2a <__sfvwrite_r+0xd6>
 8022f68:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8022f6c:	3708      	adds	r7, #8
 8022f6e:	f1ba 0f00 	cmp.w	sl, #0
 8022f72:	d0f9      	beq.n	8022f68 <__sfvwrite_r+0x114>
 8022f74:	89a3      	ldrh	r3, [r4, #12]
 8022f76:	68a2      	ldr	r2, [r4, #8]
 8022f78:	6820      	ldr	r0, [r4, #0]
 8022f7a:	0599      	lsls	r1, r3, #22
 8022f7c:	d563      	bpl.n	8023046 <__sfvwrite_r+0x1f2>
 8022f7e:	4552      	cmp	r2, sl
 8022f80:	d836      	bhi.n	8022ff0 <__sfvwrite_r+0x19c>
 8022f82:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8022f86:	d033      	beq.n	8022ff0 <__sfvwrite_r+0x19c>
 8022f88:	6921      	ldr	r1, [r4, #16]
 8022f8a:	6965      	ldr	r5, [r4, #20]
 8022f8c:	eba0 0b01 	sub.w	fp, r0, r1
 8022f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022f98:	f10b 0201 	add.w	r2, fp, #1
 8022f9c:	106d      	asrs	r5, r5, #1
 8022f9e:	4452      	add	r2, sl
 8022fa0:	4295      	cmp	r5, r2
 8022fa2:	bf38      	it	cc
 8022fa4:	4615      	movcc	r5, r2
 8022fa6:	055b      	lsls	r3, r3, #21
 8022fa8:	d53d      	bpl.n	8023026 <__sfvwrite_r+0x1d2>
 8022faa:	4629      	mov	r1, r5
 8022fac:	4630      	mov	r0, r6
 8022fae:	f7fd f8f3 	bl	8020198 <_malloc_r>
 8022fb2:	b948      	cbnz	r0, 8022fc8 <__sfvwrite_r+0x174>
 8022fb4:	230c      	movs	r3, #12
 8022fb6:	6033      	str	r3, [r6, #0]
 8022fb8:	89a3      	ldrh	r3, [r4, #12]
 8022fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fbe:	81a3      	strh	r3, [r4, #12]
 8022fc0:	e7ad      	b.n	8022f1e <__sfvwrite_r+0xca>
 8022fc2:	4699      	mov	r9, r3
 8022fc4:	469a      	mov	sl, r3
 8022fc6:	e7d2      	b.n	8022f6e <__sfvwrite_r+0x11a>
 8022fc8:	465a      	mov	r2, fp
 8022fca:	6921      	ldr	r1, [r4, #16]
 8022fcc:	9001      	str	r0, [sp, #4]
 8022fce:	f7f8 fb97 	bl	801b700 <memcpy>
 8022fd2:	89a2      	ldrh	r2, [r4, #12]
 8022fd4:	9b01      	ldr	r3, [sp, #4]
 8022fd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022fde:	81a2      	strh	r2, [r4, #12]
 8022fe0:	6123      	str	r3, [r4, #16]
 8022fe2:	6165      	str	r5, [r4, #20]
 8022fe4:	445b      	add	r3, fp
 8022fe6:	eba5 050b 	sub.w	r5, r5, fp
 8022fea:	6023      	str	r3, [r4, #0]
 8022fec:	4652      	mov	r2, sl
 8022fee:	60a5      	str	r5, [r4, #8]
 8022ff0:	4552      	cmp	r2, sl
 8022ff2:	bf28      	it	cs
 8022ff4:	4652      	movcs	r2, sl
 8022ff6:	6820      	ldr	r0, [r4, #0]
 8022ff8:	9201      	str	r2, [sp, #4]
 8022ffa:	4649      	mov	r1, r9
 8022ffc:	f7f8 fb8e 	bl	801b71c <memmove>
 8023000:	68a3      	ldr	r3, [r4, #8]
 8023002:	9a01      	ldr	r2, [sp, #4]
 8023004:	1a9b      	subs	r3, r3, r2
 8023006:	60a3      	str	r3, [r4, #8]
 8023008:	6823      	ldr	r3, [r4, #0]
 802300a:	441a      	add	r2, r3
 802300c:	4655      	mov	r5, sl
 802300e:	6022      	str	r2, [r4, #0]
 8023010:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8023014:	44a9      	add	r9, r5
 8023016:	ebaa 0a05 	sub.w	sl, sl, r5
 802301a:	1b45      	subs	r5, r0, r5
 802301c:	f8c8 5008 	str.w	r5, [r8, #8]
 8023020:	2d00      	cmp	r5, #0
 8023022:	d1a4      	bne.n	8022f6e <__sfvwrite_r+0x11a>
 8023024:	e71d      	b.n	8022e62 <__sfvwrite_r+0xe>
 8023026:	462a      	mov	r2, r5
 8023028:	4630      	mov	r0, r6
 802302a:	f000 f8d9 	bl	80231e0 <_realloc_r>
 802302e:	4603      	mov	r3, r0
 8023030:	2800      	cmp	r0, #0
 8023032:	d1d5      	bne.n	8022fe0 <__sfvwrite_r+0x18c>
 8023034:	6921      	ldr	r1, [r4, #16]
 8023036:	4630      	mov	r0, r6
 8023038:	f7fc fe52 	bl	801fce0 <_free_r>
 802303c:	89a3      	ldrh	r3, [r4, #12]
 802303e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023042:	81a3      	strh	r3, [r4, #12]
 8023044:	e7b6      	b.n	8022fb4 <__sfvwrite_r+0x160>
 8023046:	6923      	ldr	r3, [r4, #16]
 8023048:	4283      	cmp	r3, r0
 802304a:	d302      	bcc.n	8023052 <__sfvwrite_r+0x1fe>
 802304c:	6961      	ldr	r1, [r4, #20]
 802304e:	4551      	cmp	r1, sl
 8023050:	d915      	bls.n	802307e <__sfvwrite_r+0x22a>
 8023052:	4552      	cmp	r2, sl
 8023054:	bf28      	it	cs
 8023056:	4652      	movcs	r2, sl
 8023058:	4649      	mov	r1, r9
 802305a:	4615      	mov	r5, r2
 802305c:	f7f8 fb5e 	bl	801b71c <memmove>
 8023060:	68a3      	ldr	r3, [r4, #8]
 8023062:	6822      	ldr	r2, [r4, #0]
 8023064:	1b5b      	subs	r3, r3, r5
 8023066:	442a      	add	r2, r5
 8023068:	60a3      	str	r3, [r4, #8]
 802306a:	6022      	str	r2, [r4, #0]
 802306c:	2b00      	cmp	r3, #0
 802306e:	d1cf      	bne.n	8023010 <__sfvwrite_r+0x1bc>
 8023070:	4621      	mov	r1, r4
 8023072:	4630      	mov	r0, r6
 8023074:	f7fc fd38 	bl	801fae8 <_fflush_r>
 8023078:	2800      	cmp	r0, #0
 802307a:	d0c9      	beq.n	8023010 <__sfvwrite_r+0x1bc>
 802307c:	e79c      	b.n	8022fb8 <__sfvwrite_r+0x164>
 802307e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023082:	459a      	cmp	sl, r3
 8023084:	bf38      	it	cc
 8023086:	4653      	movcc	r3, sl
 8023088:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802308a:	fb93 f3f1 	sdiv	r3, r3, r1
 802308e:	464a      	mov	r2, r9
 8023090:	434b      	muls	r3, r1
 8023092:	4630      	mov	r0, r6
 8023094:	69e1      	ldr	r1, [r4, #28]
 8023096:	47a8      	blx	r5
 8023098:	1e05      	subs	r5, r0, #0
 802309a:	dcb9      	bgt.n	8023010 <__sfvwrite_r+0x1bc>
 802309c:	e78c      	b.n	8022fb8 <__sfvwrite_r+0x164>
 802309e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80230a2:	2000      	movs	r0, #0
 80230a4:	3708      	adds	r7, #8
 80230a6:	e6f3      	b.n	8022e90 <__sfvwrite_r+0x3c>
 80230a8:	f10b 0901 	add.w	r9, fp, #1
 80230ac:	e700      	b.n	8022eb0 <__sfvwrite_r+0x5c>
 80230ae:	4293      	cmp	r3, r2
 80230b0:	dc08      	bgt.n	80230c4 <__sfvwrite_r+0x270>
 80230b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80230b4:	69e1      	ldr	r1, [r4, #28]
 80230b6:	4652      	mov	r2, sl
 80230b8:	4630      	mov	r0, r6
 80230ba:	47a8      	blx	r5
 80230bc:	1e05      	subs	r5, r0, #0
 80230be:	f73f af13 	bgt.w	8022ee8 <__sfvwrite_r+0x94>
 80230c2:	e779      	b.n	8022fb8 <__sfvwrite_r+0x164>
 80230c4:	4651      	mov	r1, sl
 80230c6:	9201      	str	r2, [sp, #4]
 80230c8:	f7f8 fb28 	bl	801b71c <memmove>
 80230cc:	9a01      	ldr	r2, [sp, #4]
 80230ce:	68a3      	ldr	r3, [r4, #8]
 80230d0:	1a9b      	subs	r3, r3, r2
 80230d2:	60a3      	str	r3, [r4, #8]
 80230d4:	6823      	ldr	r3, [r4, #0]
 80230d6:	4413      	add	r3, r2
 80230d8:	6023      	str	r3, [r4, #0]
 80230da:	4615      	mov	r5, r2
 80230dc:	e704      	b.n	8022ee8 <__sfvwrite_r+0x94>
 80230de:	2001      	movs	r0, #1
 80230e0:	e70c      	b.n	8022efc <__sfvwrite_r+0xa8>
 80230e2:	bf00      	nop
 80230e4:	7ffffc00 	.word	0x7ffffc00

080230e8 <_isatty_r>:
 80230e8:	b538      	push	{r3, r4, r5, lr}
 80230ea:	4d06      	ldr	r5, [pc, #24]	; (8023104 <_isatty_r+0x1c>)
 80230ec:	2300      	movs	r3, #0
 80230ee:	4604      	mov	r4, r0
 80230f0:	4608      	mov	r0, r1
 80230f2:	602b      	str	r3, [r5, #0]
 80230f4:	f7e0 ffd9 	bl	80040aa <_isatty>
 80230f8:	1c43      	adds	r3, r0, #1
 80230fa:	d102      	bne.n	8023102 <_isatty_r+0x1a>
 80230fc:	682b      	ldr	r3, [r5, #0]
 80230fe:	b103      	cbz	r3, 8023102 <_isatty_r+0x1a>
 8023100:	6023      	str	r3, [r4, #0]
 8023102:	bd38      	pop	{r3, r4, r5, pc}
 8023104:	2000be70 	.word	0x2000be70

08023108 <iswspace>:
 8023108:	2100      	movs	r1, #0
 802310a:	f000 b801 	b.w	8023110 <iswspace_l>
	...

08023110 <iswspace_l>:
 8023110:	28ff      	cmp	r0, #255	; 0xff
 8023112:	bf9d      	ittte	ls
 8023114:	4b02      	ldrls	r3, [pc, #8]	; (8023120 <iswspace_l+0x10>)
 8023116:	5cc0      	ldrbls	r0, [r0, r3]
 8023118:	f000 0008 	andls.w	r0, r0, #8
 802311c:	2000      	movhi	r0, #0
 802311e:	4770      	bx	lr
 8023120:	080291a5 	.word	0x080291a5

08023124 <__locale_mb_cur_max>:
 8023124:	4b01      	ldr	r3, [pc, #4]	; (802312c <__locale_mb_cur_max+0x8>)
 8023126:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 802312a:	4770      	bx	lr
 802312c:	200008e0 	.word	0x200008e0

08023130 <_lseek_r>:
 8023130:	b538      	push	{r3, r4, r5, lr}
 8023132:	4d07      	ldr	r5, [pc, #28]	; (8023150 <_lseek_r+0x20>)
 8023134:	4604      	mov	r4, r0
 8023136:	4608      	mov	r0, r1
 8023138:	4611      	mov	r1, r2
 802313a:	2200      	movs	r2, #0
 802313c:	602a      	str	r2, [r5, #0]
 802313e:	461a      	mov	r2, r3
 8023140:	f7e0 ffbe 	bl	80040c0 <_lseek>
 8023144:	1c43      	adds	r3, r0, #1
 8023146:	d102      	bne.n	802314e <_lseek_r+0x1e>
 8023148:	682b      	ldr	r3, [r5, #0]
 802314a:	b103      	cbz	r3, 802314e <_lseek_r+0x1e>
 802314c:	6023      	str	r3, [r4, #0]
 802314e:	bd38      	pop	{r3, r4, r5, pc}
 8023150:	2000be70 	.word	0x2000be70

08023154 <_mbrtowc_r>:
 8023154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023156:	4c0a      	ldr	r4, [pc, #40]	; (8023180 <_mbrtowc_r+0x2c>)
 8023158:	9e08      	ldr	r6, [sp, #32]
 802315a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 802315e:	9600      	str	r6, [sp, #0]
 8023160:	4605      	mov	r5, r0
 8023162:	4614      	mov	r4, r2
 8023164:	b912      	cbnz	r2, 802316c <_mbrtowc_r+0x18>
 8023166:	4a07      	ldr	r2, [pc, #28]	; (8023184 <_mbrtowc_r+0x30>)
 8023168:	2301      	movs	r3, #1
 802316a:	4621      	mov	r1, r4
 802316c:	47b8      	blx	r7
 802316e:	1c43      	adds	r3, r0, #1
 8023170:	bf01      	itttt	eq
 8023172:	2300      	moveq	r3, #0
 8023174:	6033      	streq	r3, [r6, #0]
 8023176:	238a      	moveq	r3, #138	; 0x8a
 8023178:	602b      	streq	r3, [r5, #0]
 802317a:	b003      	add	sp, #12
 802317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802317e:	bf00      	nop
 8023180:	200008e0 	.word	0x200008e0
 8023184:	08029679 	.word	0x08029679

08023188 <__ascii_mbtowc>:
 8023188:	b082      	sub	sp, #8
 802318a:	b901      	cbnz	r1, 802318e <__ascii_mbtowc+0x6>
 802318c:	a901      	add	r1, sp, #4
 802318e:	b142      	cbz	r2, 80231a2 <__ascii_mbtowc+0x1a>
 8023190:	b14b      	cbz	r3, 80231a6 <__ascii_mbtowc+0x1e>
 8023192:	7813      	ldrb	r3, [r2, #0]
 8023194:	600b      	str	r3, [r1, #0]
 8023196:	7812      	ldrb	r2, [r2, #0]
 8023198:	1e10      	subs	r0, r2, #0
 802319a:	bf18      	it	ne
 802319c:	2001      	movne	r0, #1
 802319e:	b002      	add	sp, #8
 80231a0:	4770      	bx	lr
 80231a2:	4610      	mov	r0, r2
 80231a4:	e7fb      	b.n	802319e <__ascii_mbtowc+0x16>
 80231a6:	f06f 0001 	mvn.w	r0, #1
 80231aa:	e7f8      	b.n	802319e <__ascii_mbtowc+0x16>

080231ac <_read_r>:
 80231ac:	b538      	push	{r3, r4, r5, lr}
 80231ae:	4d07      	ldr	r5, [pc, #28]	; (80231cc <_read_r+0x20>)
 80231b0:	4604      	mov	r4, r0
 80231b2:	4608      	mov	r0, r1
 80231b4:	4611      	mov	r1, r2
 80231b6:	2200      	movs	r2, #0
 80231b8:	602a      	str	r2, [r5, #0]
 80231ba:	461a      	mov	r2, r3
 80231bc:	f7e0 ff3c 	bl	8004038 <_read>
 80231c0:	1c43      	adds	r3, r0, #1
 80231c2:	d102      	bne.n	80231ca <_read_r+0x1e>
 80231c4:	682b      	ldr	r3, [r5, #0]
 80231c6:	b103      	cbz	r3, 80231ca <_read_r+0x1e>
 80231c8:	6023      	str	r3, [r4, #0]
 80231ca:	bd38      	pop	{r3, r4, r5, pc}
 80231cc:	2000be70 	.word	0x2000be70

080231d0 <realloc>:
 80231d0:	4b02      	ldr	r3, [pc, #8]	; (80231dc <realloc+0xc>)
 80231d2:	460a      	mov	r2, r1
 80231d4:	4601      	mov	r1, r0
 80231d6:	6818      	ldr	r0, [r3, #0]
 80231d8:	f000 b802 	b.w	80231e0 <_realloc_r>
 80231dc:	20000038 	.word	0x20000038

080231e0 <_realloc_r>:
 80231e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231e4:	4681      	mov	r9, r0
 80231e6:	460c      	mov	r4, r1
 80231e8:	b929      	cbnz	r1, 80231f6 <_realloc_r+0x16>
 80231ea:	4611      	mov	r1, r2
 80231ec:	b003      	add	sp, #12
 80231ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231f2:	f7fc bfd1 	b.w	8020198 <_malloc_r>
 80231f6:	9201      	str	r2, [sp, #4]
 80231f8:	f7fd fa10 	bl	802061c <__malloc_lock>
 80231fc:	9a01      	ldr	r2, [sp, #4]
 80231fe:	f102 080b 	add.w	r8, r2, #11
 8023202:	f1b8 0f16 	cmp.w	r8, #22
 8023206:	d90b      	bls.n	8023220 <_realloc_r+0x40>
 8023208:	f038 0807 	bics.w	r8, r8, #7
 802320c:	d50a      	bpl.n	8023224 <_realloc_r+0x44>
 802320e:	230c      	movs	r3, #12
 8023210:	f8c9 3000 	str.w	r3, [r9]
 8023214:	f04f 0b00 	mov.w	fp, #0
 8023218:	4658      	mov	r0, fp
 802321a:	b003      	add	sp, #12
 802321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023220:	f04f 0810 	mov.w	r8, #16
 8023224:	4590      	cmp	r8, r2
 8023226:	d3f2      	bcc.n	802320e <_realloc_r+0x2e>
 8023228:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802322c:	f025 0603 	bic.w	r6, r5, #3
 8023230:	45b0      	cmp	r8, r6
 8023232:	f1a4 0a08 	sub.w	sl, r4, #8
 8023236:	f340 8170 	ble.w	802351a <_realloc_r+0x33a>
 802323a:	48a9      	ldr	r0, [pc, #676]	; (80234e0 <_realloc_r+0x300>)
 802323c:	9001      	str	r0, [sp, #4]
 802323e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8023242:	eb0a 0306 	add.w	r3, sl, r6
 8023246:	459c      	cmp	ip, r3
 8023248:	6859      	ldr	r1, [r3, #4]
 802324a:	d005      	beq.n	8023258 <_realloc_r+0x78>
 802324c:	f021 0001 	bic.w	r0, r1, #1
 8023250:	4418      	add	r0, r3
 8023252:	6840      	ldr	r0, [r0, #4]
 8023254:	07c7      	lsls	r7, r0, #31
 8023256:	d427      	bmi.n	80232a8 <_realloc_r+0xc8>
 8023258:	f021 0103 	bic.w	r1, r1, #3
 802325c:	459c      	cmp	ip, r3
 802325e:	eb06 0701 	add.w	r7, r6, r1
 8023262:	d119      	bne.n	8023298 <_realloc_r+0xb8>
 8023264:	f108 0010 	add.w	r0, r8, #16
 8023268:	42b8      	cmp	r0, r7
 802326a:	dc1f      	bgt.n	80232ac <_realloc_r+0xcc>
 802326c:	eb0a 0308 	add.w	r3, sl, r8
 8023270:	9a01      	ldr	r2, [sp, #4]
 8023272:	eba7 0708 	sub.w	r7, r7, r8
 8023276:	f047 0701 	orr.w	r7, r7, #1
 802327a:	6093      	str	r3, [r2, #8]
 802327c:	605f      	str	r7, [r3, #4]
 802327e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023282:	f003 0301 	and.w	r3, r3, #1
 8023286:	ea43 0308 	orr.w	r3, r3, r8
 802328a:	f844 3c04 	str.w	r3, [r4, #-4]
 802328e:	4648      	mov	r0, r9
 8023290:	f7fd f9ca 	bl	8020628 <__malloc_unlock>
 8023294:	46a3      	mov	fp, r4
 8023296:	e7bf      	b.n	8023218 <_realloc_r+0x38>
 8023298:	45b8      	cmp	r8, r7
 802329a:	dc07      	bgt.n	80232ac <_realloc_r+0xcc>
 802329c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80232a0:	60da      	str	r2, [r3, #12]
 80232a2:	6093      	str	r3, [r2, #8]
 80232a4:	4655      	mov	r5, sl
 80232a6:	e07f      	b.n	80233a8 <_realloc_r+0x1c8>
 80232a8:	2100      	movs	r1, #0
 80232aa:	460b      	mov	r3, r1
 80232ac:	07e8      	lsls	r0, r5, #31
 80232ae:	f100 80e5 	bmi.w	802347c <_realloc_r+0x29c>
 80232b2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80232b6:	ebaa 0505 	sub.w	r5, sl, r5
 80232ba:	6868      	ldr	r0, [r5, #4]
 80232bc:	f020 0003 	bic.w	r0, r0, #3
 80232c0:	eb00 0b06 	add.w	fp, r0, r6
 80232c4:	2b00      	cmp	r3, #0
 80232c6:	f000 80a5 	beq.w	8023414 <_realloc_r+0x234>
 80232ca:	459c      	cmp	ip, r3
 80232cc:	eb01 070b 	add.w	r7, r1, fp
 80232d0:	d14a      	bne.n	8023368 <_realloc_r+0x188>
 80232d2:	f108 0310 	add.w	r3, r8, #16
 80232d6:	42bb      	cmp	r3, r7
 80232d8:	f300 809c 	bgt.w	8023414 <_realloc_r+0x234>
 80232dc:	46ab      	mov	fp, r5
 80232de:	68eb      	ldr	r3, [r5, #12]
 80232e0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80232e4:	60d3      	str	r3, [r2, #12]
 80232e6:	609a      	str	r2, [r3, #8]
 80232e8:	1f32      	subs	r2, r6, #4
 80232ea:	2a24      	cmp	r2, #36	; 0x24
 80232ec:	d837      	bhi.n	802335e <_realloc_r+0x17e>
 80232ee:	2a13      	cmp	r2, #19
 80232f0:	d933      	bls.n	802335a <_realloc_r+0x17a>
 80232f2:	6823      	ldr	r3, [r4, #0]
 80232f4:	60ab      	str	r3, [r5, #8]
 80232f6:	6863      	ldr	r3, [r4, #4]
 80232f8:	60eb      	str	r3, [r5, #12]
 80232fa:	2a1b      	cmp	r2, #27
 80232fc:	d81b      	bhi.n	8023336 <_realloc_r+0x156>
 80232fe:	3408      	adds	r4, #8
 8023300:	f105 0310 	add.w	r3, r5, #16
 8023304:	6822      	ldr	r2, [r4, #0]
 8023306:	601a      	str	r2, [r3, #0]
 8023308:	6862      	ldr	r2, [r4, #4]
 802330a:	605a      	str	r2, [r3, #4]
 802330c:	68a2      	ldr	r2, [r4, #8]
 802330e:	609a      	str	r2, [r3, #8]
 8023310:	eb05 0308 	add.w	r3, r5, r8
 8023314:	9a01      	ldr	r2, [sp, #4]
 8023316:	eba7 0708 	sub.w	r7, r7, r8
 802331a:	f047 0701 	orr.w	r7, r7, #1
 802331e:	6093      	str	r3, [r2, #8]
 8023320:	605f      	str	r7, [r3, #4]
 8023322:	686b      	ldr	r3, [r5, #4]
 8023324:	f003 0301 	and.w	r3, r3, #1
 8023328:	ea43 0308 	orr.w	r3, r3, r8
 802332c:	606b      	str	r3, [r5, #4]
 802332e:	4648      	mov	r0, r9
 8023330:	f7fd f97a 	bl	8020628 <__malloc_unlock>
 8023334:	e770      	b.n	8023218 <_realloc_r+0x38>
 8023336:	68a3      	ldr	r3, [r4, #8]
 8023338:	612b      	str	r3, [r5, #16]
 802333a:	68e3      	ldr	r3, [r4, #12]
 802333c:	616b      	str	r3, [r5, #20]
 802333e:	2a24      	cmp	r2, #36	; 0x24
 8023340:	bf01      	itttt	eq
 8023342:	6923      	ldreq	r3, [r4, #16]
 8023344:	61ab      	streq	r3, [r5, #24]
 8023346:	6962      	ldreq	r2, [r4, #20]
 8023348:	61ea      	streq	r2, [r5, #28]
 802334a:	bf19      	ittee	ne
 802334c:	3410      	addne	r4, #16
 802334e:	f105 0318 	addne.w	r3, r5, #24
 8023352:	f105 0320 	addeq.w	r3, r5, #32
 8023356:	3418      	addeq	r4, #24
 8023358:	e7d4      	b.n	8023304 <_realloc_r+0x124>
 802335a:	465b      	mov	r3, fp
 802335c:	e7d2      	b.n	8023304 <_realloc_r+0x124>
 802335e:	4621      	mov	r1, r4
 8023360:	4658      	mov	r0, fp
 8023362:	f7f8 f9db 	bl	801b71c <memmove>
 8023366:	e7d3      	b.n	8023310 <_realloc_r+0x130>
 8023368:	45b8      	cmp	r8, r7
 802336a:	dc53      	bgt.n	8023414 <_realloc_r+0x234>
 802336c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8023370:	4628      	mov	r0, r5
 8023372:	60da      	str	r2, [r3, #12]
 8023374:	6093      	str	r3, [r2, #8]
 8023376:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802337a:	68eb      	ldr	r3, [r5, #12]
 802337c:	60d3      	str	r3, [r2, #12]
 802337e:	609a      	str	r2, [r3, #8]
 8023380:	1f32      	subs	r2, r6, #4
 8023382:	2a24      	cmp	r2, #36	; 0x24
 8023384:	d842      	bhi.n	802340c <_realloc_r+0x22c>
 8023386:	2a13      	cmp	r2, #19
 8023388:	d908      	bls.n	802339c <_realloc_r+0x1bc>
 802338a:	6823      	ldr	r3, [r4, #0]
 802338c:	60ab      	str	r3, [r5, #8]
 802338e:	6863      	ldr	r3, [r4, #4]
 8023390:	60eb      	str	r3, [r5, #12]
 8023392:	2a1b      	cmp	r2, #27
 8023394:	d828      	bhi.n	80233e8 <_realloc_r+0x208>
 8023396:	3408      	adds	r4, #8
 8023398:	f105 0010 	add.w	r0, r5, #16
 802339c:	6823      	ldr	r3, [r4, #0]
 802339e:	6003      	str	r3, [r0, #0]
 80233a0:	6863      	ldr	r3, [r4, #4]
 80233a2:	6043      	str	r3, [r0, #4]
 80233a4:	68a3      	ldr	r3, [r4, #8]
 80233a6:	6083      	str	r3, [r0, #8]
 80233a8:	686a      	ldr	r2, [r5, #4]
 80233aa:	eba7 0008 	sub.w	r0, r7, r8
 80233ae:	280f      	cmp	r0, #15
 80233b0:	f002 0201 	and.w	r2, r2, #1
 80233b4:	eb05 0307 	add.w	r3, r5, r7
 80233b8:	f240 80b1 	bls.w	802351e <_realloc_r+0x33e>
 80233bc:	eb05 0108 	add.w	r1, r5, r8
 80233c0:	ea48 0202 	orr.w	r2, r8, r2
 80233c4:	f040 0001 	orr.w	r0, r0, #1
 80233c8:	606a      	str	r2, [r5, #4]
 80233ca:	6048      	str	r0, [r1, #4]
 80233cc:	685a      	ldr	r2, [r3, #4]
 80233ce:	f042 0201 	orr.w	r2, r2, #1
 80233d2:	605a      	str	r2, [r3, #4]
 80233d4:	3108      	adds	r1, #8
 80233d6:	4648      	mov	r0, r9
 80233d8:	f7fc fc82 	bl	801fce0 <_free_r>
 80233dc:	4648      	mov	r0, r9
 80233de:	f7fd f923 	bl	8020628 <__malloc_unlock>
 80233e2:	f105 0b08 	add.w	fp, r5, #8
 80233e6:	e717      	b.n	8023218 <_realloc_r+0x38>
 80233e8:	68a3      	ldr	r3, [r4, #8]
 80233ea:	612b      	str	r3, [r5, #16]
 80233ec:	68e3      	ldr	r3, [r4, #12]
 80233ee:	616b      	str	r3, [r5, #20]
 80233f0:	2a24      	cmp	r2, #36	; 0x24
 80233f2:	bf01      	itttt	eq
 80233f4:	6923      	ldreq	r3, [r4, #16]
 80233f6:	61ab      	streq	r3, [r5, #24]
 80233f8:	6963      	ldreq	r3, [r4, #20]
 80233fa:	61eb      	streq	r3, [r5, #28]
 80233fc:	bf19      	ittee	ne
 80233fe:	3410      	addne	r4, #16
 8023400:	f105 0018 	addne.w	r0, r5, #24
 8023404:	f105 0020 	addeq.w	r0, r5, #32
 8023408:	3418      	addeq	r4, #24
 802340a:	e7c7      	b.n	802339c <_realloc_r+0x1bc>
 802340c:	4621      	mov	r1, r4
 802340e:	f7f8 f985 	bl	801b71c <memmove>
 8023412:	e7c9      	b.n	80233a8 <_realloc_r+0x1c8>
 8023414:	45d8      	cmp	r8, fp
 8023416:	dc31      	bgt.n	802347c <_realloc_r+0x29c>
 8023418:	4628      	mov	r0, r5
 802341a:	68eb      	ldr	r3, [r5, #12]
 802341c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8023420:	60d3      	str	r3, [r2, #12]
 8023422:	609a      	str	r2, [r3, #8]
 8023424:	1f32      	subs	r2, r6, #4
 8023426:	2a24      	cmp	r2, #36	; 0x24
 8023428:	d824      	bhi.n	8023474 <_realloc_r+0x294>
 802342a:	2a13      	cmp	r2, #19
 802342c:	d908      	bls.n	8023440 <_realloc_r+0x260>
 802342e:	6823      	ldr	r3, [r4, #0]
 8023430:	60ab      	str	r3, [r5, #8]
 8023432:	6863      	ldr	r3, [r4, #4]
 8023434:	60eb      	str	r3, [r5, #12]
 8023436:	2a1b      	cmp	r2, #27
 8023438:	d80a      	bhi.n	8023450 <_realloc_r+0x270>
 802343a:	3408      	adds	r4, #8
 802343c:	f105 0010 	add.w	r0, r5, #16
 8023440:	6823      	ldr	r3, [r4, #0]
 8023442:	6003      	str	r3, [r0, #0]
 8023444:	6863      	ldr	r3, [r4, #4]
 8023446:	6043      	str	r3, [r0, #4]
 8023448:	68a3      	ldr	r3, [r4, #8]
 802344a:	6083      	str	r3, [r0, #8]
 802344c:	465f      	mov	r7, fp
 802344e:	e7ab      	b.n	80233a8 <_realloc_r+0x1c8>
 8023450:	68a3      	ldr	r3, [r4, #8]
 8023452:	612b      	str	r3, [r5, #16]
 8023454:	68e3      	ldr	r3, [r4, #12]
 8023456:	616b      	str	r3, [r5, #20]
 8023458:	2a24      	cmp	r2, #36	; 0x24
 802345a:	bf01      	itttt	eq
 802345c:	6923      	ldreq	r3, [r4, #16]
 802345e:	61ab      	streq	r3, [r5, #24]
 8023460:	6963      	ldreq	r3, [r4, #20]
 8023462:	61eb      	streq	r3, [r5, #28]
 8023464:	bf19      	ittee	ne
 8023466:	3410      	addne	r4, #16
 8023468:	f105 0018 	addne.w	r0, r5, #24
 802346c:	f105 0020 	addeq.w	r0, r5, #32
 8023470:	3418      	addeq	r4, #24
 8023472:	e7e5      	b.n	8023440 <_realloc_r+0x260>
 8023474:	4621      	mov	r1, r4
 8023476:	f7f8 f951 	bl	801b71c <memmove>
 802347a:	e7e7      	b.n	802344c <_realloc_r+0x26c>
 802347c:	4611      	mov	r1, r2
 802347e:	4648      	mov	r0, r9
 8023480:	f7fc fe8a 	bl	8020198 <_malloc_r>
 8023484:	4683      	mov	fp, r0
 8023486:	2800      	cmp	r0, #0
 8023488:	f43f af51 	beq.w	802332e <_realloc_r+0x14e>
 802348c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023490:	f023 0301 	bic.w	r3, r3, #1
 8023494:	4453      	add	r3, sl
 8023496:	f1a0 0208 	sub.w	r2, r0, #8
 802349a:	4293      	cmp	r3, r2
 802349c:	d105      	bne.n	80234aa <_realloc_r+0x2ca>
 802349e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80234a2:	f027 0703 	bic.w	r7, r7, #3
 80234a6:	4437      	add	r7, r6
 80234a8:	e6fc      	b.n	80232a4 <_realloc_r+0xc4>
 80234aa:	1f32      	subs	r2, r6, #4
 80234ac:	2a24      	cmp	r2, #36	; 0x24
 80234ae:	d830      	bhi.n	8023512 <_realloc_r+0x332>
 80234b0:	2a13      	cmp	r2, #19
 80234b2:	d92b      	bls.n	802350c <_realloc_r+0x32c>
 80234b4:	6823      	ldr	r3, [r4, #0]
 80234b6:	6003      	str	r3, [r0, #0]
 80234b8:	6863      	ldr	r3, [r4, #4]
 80234ba:	6043      	str	r3, [r0, #4]
 80234bc:	2a1b      	cmp	r2, #27
 80234be:	d811      	bhi.n	80234e4 <_realloc_r+0x304>
 80234c0:	f104 0208 	add.w	r2, r4, #8
 80234c4:	f100 0308 	add.w	r3, r0, #8
 80234c8:	6811      	ldr	r1, [r2, #0]
 80234ca:	6019      	str	r1, [r3, #0]
 80234cc:	6851      	ldr	r1, [r2, #4]
 80234ce:	6059      	str	r1, [r3, #4]
 80234d0:	6892      	ldr	r2, [r2, #8]
 80234d2:	609a      	str	r2, [r3, #8]
 80234d4:	4621      	mov	r1, r4
 80234d6:	4648      	mov	r0, r9
 80234d8:	f7fc fc02 	bl	801fce0 <_free_r>
 80234dc:	e727      	b.n	802332e <_realloc_r+0x14e>
 80234de:	bf00      	nop
 80234e0:	200004d0 	.word	0x200004d0
 80234e4:	68a3      	ldr	r3, [r4, #8]
 80234e6:	6083      	str	r3, [r0, #8]
 80234e8:	68e3      	ldr	r3, [r4, #12]
 80234ea:	60c3      	str	r3, [r0, #12]
 80234ec:	2a24      	cmp	r2, #36	; 0x24
 80234ee:	bf01      	itttt	eq
 80234f0:	6923      	ldreq	r3, [r4, #16]
 80234f2:	6103      	streq	r3, [r0, #16]
 80234f4:	6961      	ldreq	r1, [r4, #20]
 80234f6:	6141      	streq	r1, [r0, #20]
 80234f8:	bf19      	ittee	ne
 80234fa:	f104 0210 	addne.w	r2, r4, #16
 80234fe:	f100 0310 	addne.w	r3, r0, #16
 8023502:	f104 0218 	addeq.w	r2, r4, #24
 8023506:	f100 0318 	addeq.w	r3, r0, #24
 802350a:	e7dd      	b.n	80234c8 <_realloc_r+0x2e8>
 802350c:	4603      	mov	r3, r0
 802350e:	4622      	mov	r2, r4
 8023510:	e7da      	b.n	80234c8 <_realloc_r+0x2e8>
 8023512:	4621      	mov	r1, r4
 8023514:	f7f8 f902 	bl	801b71c <memmove>
 8023518:	e7dc      	b.n	80234d4 <_realloc_r+0x2f4>
 802351a:	4637      	mov	r7, r6
 802351c:	e6c2      	b.n	80232a4 <_realloc_r+0xc4>
 802351e:	4317      	orrs	r7, r2
 8023520:	606f      	str	r7, [r5, #4]
 8023522:	685a      	ldr	r2, [r3, #4]
 8023524:	f042 0201 	orr.w	r2, r2, #1
 8023528:	605a      	str	r2, [r3, #4]
 802352a:	e757      	b.n	80233dc <_realloc_r+0x1fc>

0802352c <__sccl>:
 802352c:	b570      	push	{r4, r5, r6, lr}
 802352e:	780b      	ldrb	r3, [r1, #0]
 8023530:	4604      	mov	r4, r0
 8023532:	2b5e      	cmp	r3, #94	; 0x5e
 8023534:	bf0b      	itete	eq
 8023536:	784b      	ldrbeq	r3, [r1, #1]
 8023538:	1c48      	addne	r0, r1, #1
 802353a:	1c88      	addeq	r0, r1, #2
 802353c:	2200      	movne	r2, #0
 802353e:	bf08      	it	eq
 8023540:	2201      	moveq	r2, #1
 8023542:	1e61      	subs	r1, r4, #1
 8023544:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8023548:	f801 2f01 	strb.w	r2, [r1, #1]!
 802354c:	42a9      	cmp	r1, r5
 802354e:	d1fb      	bne.n	8023548 <__sccl+0x1c>
 8023550:	b90b      	cbnz	r3, 8023556 <__sccl+0x2a>
 8023552:	3801      	subs	r0, #1
 8023554:	bd70      	pop	{r4, r5, r6, pc}
 8023556:	f082 0101 	eor.w	r1, r2, #1
 802355a:	54e1      	strb	r1, [r4, r3]
 802355c:	1c42      	adds	r2, r0, #1
 802355e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8023562:	2d2d      	cmp	r5, #45	; 0x2d
 8023564:	f102 36ff 	add.w	r6, r2, #4294967295
 8023568:	4610      	mov	r0, r2
 802356a:	d006      	beq.n	802357a <__sccl+0x4e>
 802356c:	2d5d      	cmp	r5, #93	; 0x5d
 802356e:	d0f1      	beq.n	8023554 <__sccl+0x28>
 8023570:	b90d      	cbnz	r5, 8023576 <__sccl+0x4a>
 8023572:	4630      	mov	r0, r6
 8023574:	e7ee      	b.n	8023554 <__sccl+0x28>
 8023576:	462b      	mov	r3, r5
 8023578:	e7ef      	b.n	802355a <__sccl+0x2e>
 802357a:	7816      	ldrb	r6, [r2, #0]
 802357c:	2e5d      	cmp	r6, #93	; 0x5d
 802357e:	d0fa      	beq.n	8023576 <__sccl+0x4a>
 8023580:	42b3      	cmp	r3, r6
 8023582:	dcf8      	bgt.n	8023576 <__sccl+0x4a>
 8023584:	4618      	mov	r0, r3
 8023586:	3001      	adds	r0, #1
 8023588:	4286      	cmp	r6, r0
 802358a:	5421      	strb	r1, [r4, r0]
 802358c:	dcfb      	bgt.n	8023586 <__sccl+0x5a>
 802358e:	43d8      	mvns	r0, r3
 8023590:	4430      	add	r0, r6
 8023592:	1c5d      	adds	r5, r3, #1
 8023594:	42b3      	cmp	r3, r6
 8023596:	bfa8      	it	ge
 8023598:	2000      	movge	r0, #0
 802359a:	182b      	adds	r3, r5, r0
 802359c:	3202      	adds	r2, #2
 802359e:	e7de      	b.n	802355e <__sccl+0x32>

080235a0 <_strtoll_l.isra.0>:
 80235a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a4:	b087      	sub	sp, #28
 80235a6:	4691      	mov	r9, r2
 80235a8:	4a47      	ldr	r2, [pc, #284]	; (80236c8 <_strtoll_l.isra.0+0x128>)
 80235aa:	9005      	str	r0, [sp, #20]
 80235ac:	4688      	mov	r8, r1
 80235ae:	461f      	mov	r7, r3
 80235b0:	460d      	mov	r5, r1
 80235b2:	462b      	mov	r3, r5
 80235b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80235b8:	5ca6      	ldrb	r6, [r4, r2]
 80235ba:	f016 0608 	ands.w	r6, r6, #8
 80235be:	d1f8      	bne.n	80235b2 <_strtoll_l.isra.0+0x12>
 80235c0:	2c2d      	cmp	r4, #45	; 0x2d
 80235c2:	d147      	bne.n	8023654 <_strtoll_l.isra.0+0xb4>
 80235c4:	782c      	ldrb	r4, [r5, #0]
 80235c6:	2601      	movs	r6, #1
 80235c8:	1c9d      	adds	r5, r3, #2
 80235ca:	2f00      	cmp	r7, #0
 80235cc:	d077      	beq.n	80236be <_strtoll_l.isra.0+0x11e>
 80235ce:	2f10      	cmp	r7, #16
 80235d0:	d109      	bne.n	80235e6 <_strtoll_l.isra.0+0x46>
 80235d2:	2c30      	cmp	r4, #48	; 0x30
 80235d4:	d107      	bne.n	80235e6 <_strtoll_l.isra.0+0x46>
 80235d6:	782b      	ldrb	r3, [r5, #0]
 80235d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80235dc:	2b58      	cmp	r3, #88	; 0x58
 80235de:	d169      	bne.n	80236b4 <_strtoll_l.isra.0+0x114>
 80235e0:	786c      	ldrb	r4, [r5, #1]
 80235e2:	2710      	movs	r7, #16
 80235e4:	3502      	adds	r5, #2
 80235e6:	f04f 32ff 	mov.w	r2, #4294967295
 80235ea:	1990      	adds	r0, r2, r6
 80235ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80235f0:	ea4f 7be7 	mov.w	fp, r7, asr #31
 80235f4:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 80235f8:	463a      	mov	r2, r7
 80235fa:	465b      	mov	r3, fp
 80235fc:	e9cd 0100 	strd	r0, r1, [sp]
 8023600:	f7dd fb52 	bl	8000ca8 <__aeabi_uldivmod>
 8023604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023608:	46ba      	mov	sl, r7
 802360a:	4696      	mov	lr, r2
 802360c:	2300      	movs	r3, #0
 802360e:	2000      	movs	r0, #0
 8023610:	2100      	movs	r1, #0
 8023612:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8023616:	f1bc 0f09 	cmp.w	ip, #9
 802361a:	d820      	bhi.n	802365e <_strtoll_l.isra.0+0xbe>
 802361c:	4664      	mov	r4, ip
 802361e:	42a7      	cmp	r7, r4
 8023620:	dd2e      	ble.n	8023680 <_strtoll_l.isra.0+0xe0>
 8023622:	1c5a      	adds	r2, r3, #1
 8023624:	d013      	beq.n	802364e <_strtoll_l.isra.0+0xae>
 8023626:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802362a:	428b      	cmp	r3, r1
 802362c:	bf08      	it	eq
 802362e:	4282      	cmpeq	r2, r0
 8023630:	d323      	bcc.n	802367a <_strtoll_l.isra.0+0xda>
 8023632:	d101      	bne.n	8023638 <_strtoll_l.isra.0+0x98>
 8023634:	45a6      	cmp	lr, r4
 8023636:	db20      	blt.n	802367a <_strtoll_l.isra.0+0xda>
 8023638:	fb0a f301 	mul.w	r3, sl, r1
 802363c:	fb00 330b 	mla	r3, r0, fp, r3
 8023640:	fbaa 0100 	umull	r0, r1, sl, r0
 8023644:	4419      	add	r1, r3
 8023646:	1900      	adds	r0, r0, r4
 8023648:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802364c:	2301      	movs	r3, #1
 802364e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023652:	e7de      	b.n	8023612 <_strtoll_l.isra.0+0x72>
 8023654:	2c2b      	cmp	r4, #43	; 0x2b
 8023656:	bf04      	itt	eq
 8023658:	782c      	ldrbeq	r4, [r5, #0]
 802365a:	1c9d      	addeq	r5, r3, #2
 802365c:	e7b5      	b.n	80235ca <_strtoll_l.isra.0+0x2a>
 802365e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023662:	f1bc 0f19 	cmp.w	ip, #25
 8023666:	d801      	bhi.n	802366c <_strtoll_l.isra.0+0xcc>
 8023668:	3c37      	subs	r4, #55	; 0x37
 802366a:	e7d8      	b.n	802361e <_strtoll_l.isra.0+0x7e>
 802366c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023670:	f1bc 0f19 	cmp.w	ip, #25
 8023674:	d804      	bhi.n	8023680 <_strtoll_l.isra.0+0xe0>
 8023676:	3c57      	subs	r4, #87	; 0x57
 8023678:	e7d1      	b.n	802361e <_strtoll_l.isra.0+0x7e>
 802367a:	f04f 33ff 	mov.w	r3, #4294967295
 802367e:	e7e6      	b.n	802364e <_strtoll_l.isra.0+0xae>
 8023680:	1c5a      	adds	r2, r3, #1
 8023682:	d10a      	bne.n	802369a <_strtoll_l.isra.0+0xfa>
 8023684:	9a05      	ldr	r2, [sp, #20]
 8023686:	2322      	movs	r3, #34	; 0x22
 8023688:	e9dd 0100 	ldrd	r0, r1, [sp]
 802368c:	6013      	str	r3, [r2, #0]
 802368e:	f1b9 0f00 	cmp.w	r9, #0
 8023692:	d10a      	bne.n	80236aa <_strtoll_l.isra.0+0x10a>
 8023694:	b007      	add	sp, #28
 8023696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802369a:	b116      	cbz	r6, 80236a2 <_strtoll_l.isra.0+0x102>
 802369c:	4240      	negs	r0, r0
 802369e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80236a2:	f1b9 0f00 	cmp.w	r9, #0
 80236a6:	d0f5      	beq.n	8023694 <_strtoll_l.isra.0+0xf4>
 80236a8:	b10b      	cbz	r3, 80236ae <_strtoll_l.isra.0+0x10e>
 80236aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80236ae:	f8c9 8000 	str.w	r8, [r9]
 80236b2:	e7ef      	b.n	8023694 <_strtoll_l.isra.0+0xf4>
 80236b4:	2430      	movs	r4, #48	; 0x30
 80236b6:	2f00      	cmp	r7, #0
 80236b8:	d195      	bne.n	80235e6 <_strtoll_l.isra.0+0x46>
 80236ba:	2708      	movs	r7, #8
 80236bc:	e793      	b.n	80235e6 <_strtoll_l.isra.0+0x46>
 80236be:	2c30      	cmp	r4, #48	; 0x30
 80236c0:	d089      	beq.n	80235d6 <_strtoll_l.isra.0+0x36>
 80236c2:	270a      	movs	r7, #10
 80236c4:	e78f      	b.n	80235e6 <_strtoll_l.isra.0+0x46>
 80236c6:	bf00      	nop
 80236c8:	080291a5 	.word	0x080291a5

080236cc <_strtoll_r>:
 80236cc:	f7ff bf68 	b.w	80235a0 <_strtoll_l.isra.0>

080236d0 <_strtoull_l.isra.0>:
 80236d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236d4:	b085      	sub	sp, #20
 80236d6:	4691      	mov	r9, r2
 80236d8:	4a49      	ldr	r2, [pc, #292]	; (8023800 <_strtoull_l.isra.0+0x130>)
 80236da:	9003      	str	r0, [sp, #12]
 80236dc:	4688      	mov	r8, r1
 80236de:	461e      	mov	r6, r3
 80236e0:	460d      	mov	r5, r1
 80236e2:	462b      	mov	r3, r5
 80236e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80236e8:	5ca7      	ldrb	r7, [r4, r2]
 80236ea:	f017 0708 	ands.w	r7, r7, #8
 80236ee:	d1f8      	bne.n	80236e2 <_strtoull_l.isra.0+0x12>
 80236f0:	2c2d      	cmp	r4, #45	; 0x2d
 80236f2:	d14a      	bne.n	802378a <_strtoull_l.isra.0+0xba>
 80236f4:	782c      	ldrb	r4, [r5, #0]
 80236f6:	2701      	movs	r7, #1
 80236f8:	1c9d      	adds	r5, r3, #2
 80236fa:	2e00      	cmp	r6, #0
 80236fc:	d07c      	beq.n	80237f8 <_strtoull_l.isra.0+0x128>
 80236fe:	2e10      	cmp	r6, #16
 8023700:	d109      	bne.n	8023716 <_strtoull_l.isra.0+0x46>
 8023702:	2c30      	cmp	r4, #48	; 0x30
 8023704:	d107      	bne.n	8023716 <_strtoull_l.isra.0+0x46>
 8023706:	782b      	ldrb	r3, [r5, #0]
 8023708:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802370c:	2b58      	cmp	r3, #88	; 0x58
 802370e:	d16e      	bne.n	80237ee <_strtoull_l.isra.0+0x11e>
 8023710:	786c      	ldrb	r4, [r5, #1]
 8023712:	2610      	movs	r6, #16
 8023714:	3502      	adds	r5, #2
 8023716:	ea4f 7be6 	mov.w	fp, r6, asr #31
 802371a:	4632      	mov	r2, r6
 802371c:	465b      	mov	r3, fp
 802371e:	f04f 30ff 	mov.w	r0, #4294967295
 8023722:	f04f 31ff 	mov.w	r1, #4294967295
 8023726:	f7dd fabf 	bl	8000ca8 <__aeabi_uldivmod>
 802372a:	e9cd 0100 	strd	r0, r1, [sp]
 802372e:	4632      	mov	r2, r6
 8023730:	465b      	mov	r3, fp
 8023732:	f04f 30ff 	mov.w	r0, #4294967295
 8023736:	f04f 31ff 	mov.w	r1, #4294967295
 802373a:	f7dd fab5 	bl	8000ca8 <__aeabi_uldivmod>
 802373e:	46b2      	mov	sl, r6
 8023740:	4696      	mov	lr, r2
 8023742:	2300      	movs	r3, #0
 8023744:	2000      	movs	r0, #0
 8023746:	2100      	movs	r1, #0
 8023748:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802374c:	f1bc 0f09 	cmp.w	ip, #9
 8023750:	d820      	bhi.n	8023794 <_strtoull_l.isra.0+0xc4>
 8023752:	4664      	mov	r4, ip
 8023754:	42a6      	cmp	r6, r4
 8023756:	dd2e      	ble.n	80237b6 <_strtoull_l.isra.0+0xe6>
 8023758:	2b00      	cmp	r3, #0
 802375a:	db29      	blt.n	80237b0 <_strtoull_l.isra.0+0xe0>
 802375c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023760:	428b      	cmp	r3, r1
 8023762:	bf08      	it	eq
 8023764:	4282      	cmpeq	r2, r0
 8023766:	d323      	bcc.n	80237b0 <_strtoull_l.isra.0+0xe0>
 8023768:	d101      	bne.n	802376e <_strtoull_l.isra.0+0x9e>
 802376a:	45a6      	cmp	lr, r4
 802376c:	db20      	blt.n	80237b0 <_strtoull_l.isra.0+0xe0>
 802376e:	fb0a f301 	mul.w	r3, sl, r1
 8023772:	fb00 330b 	mla	r3, r0, fp, r3
 8023776:	fbaa 0100 	umull	r0, r1, sl, r0
 802377a:	4419      	add	r1, r3
 802377c:	1900      	adds	r0, r0, r4
 802377e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8023782:	2301      	movs	r3, #1
 8023784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023788:	e7de      	b.n	8023748 <_strtoull_l.isra.0+0x78>
 802378a:	2c2b      	cmp	r4, #43	; 0x2b
 802378c:	bf04      	itt	eq
 802378e:	782c      	ldrbeq	r4, [r5, #0]
 8023790:	1c9d      	addeq	r5, r3, #2
 8023792:	e7b2      	b.n	80236fa <_strtoull_l.isra.0+0x2a>
 8023794:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023798:	f1bc 0f19 	cmp.w	ip, #25
 802379c:	d801      	bhi.n	80237a2 <_strtoull_l.isra.0+0xd2>
 802379e:	3c37      	subs	r4, #55	; 0x37
 80237a0:	e7d8      	b.n	8023754 <_strtoull_l.isra.0+0x84>
 80237a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80237a6:	f1bc 0f19 	cmp.w	ip, #25
 80237aa:	d804      	bhi.n	80237b6 <_strtoull_l.isra.0+0xe6>
 80237ac:	3c57      	subs	r4, #87	; 0x57
 80237ae:	e7d1      	b.n	8023754 <_strtoull_l.isra.0+0x84>
 80237b0:	f04f 33ff 	mov.w	r3, #4294967295
 80237b4:	e7e6      	b.n	8023784 <_strtoull_l.isra.0+0xb4>
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	da0c      	bge.n	80237d4 <_strtoull_l.isra.0+0x104>
 80237ba:	9a03      	ldr	r2, [sp, #12]
 80237bc:	2322      	movs	r3, #34	; 0x22
 80237be:	6013      	str	r3, [r2, #0]
 80237c0:	f04f 30ff 	mov.w	r0, #4294967295
 80237c4:	f04f 31ff 	mov.w	r1, #4294967295
 80237c8:	f1b9 0f00 	cmp.w	r9, #0
 80237cc:	d10a      	bne.n	80237e4 <_strtoull_l.isra.0+0x114>
 80237ce:	b005      	add	sp, #20
 80237d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237d4:	b117      	cbz	r7, 80237dc <_strtoull_l.isra.0+0x10c>
 80237d6:	4240      	negs	r0, r0
 80237d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80237dc:	f1b9 0f00 	cmp.w	r9, #0
 80237e0:	d0f5      	beq.n	80237ce <_strtoull_l.isra.0+0xfe>
 80237e2:	b10b      	cbz	r3, 80237e8 <_strtoull_l.isra.0+0x118>
 80237e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80237e8:	f8c9 8000 	str.w	r8, [r9]
 80237ec:	e7ef      	b.n	80237ce <_strtoull_l.isra.0+0xfe>
 80237ee:	2430      	movs	r4, #48	; 0x30
 80237f0:	2e00      	cmp	r6, #0
 80237f2:	d190      	bne.n	8023716 <_strtoull_l.isra.0+0x46>
 80237f4:	2608      	movs	r6, #8
 80237f6:	e78e      	b.n	8023716 <_strtoull_l.isra.0+0x46>
 80237f8:	2c30      	cmp	r4, #48	; 0x30
 80237fa:	d084      	beq.n	8023706 <_strtoull_l.isra.0+0x36>
 80237fc:	260a      	movs	r6, #10
 80237fe:	e78a      	b.n	8023716 <_strtoull_l.isra.0+0x46>
 8023800:	080291a5 	.word	0x080291a5

08023804 <_strtoull_r>:
 8023804:	f7ff bf64 	b.w	80236d0 <_strtoull_l.isra.0>

08023808 <__swbuf_r>:
 8023808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802380a:	460e      	mov	r6, r1
 802380c:	4614      	mov	r4, r2
 802380e:	4605      	mov	r5, r0
 8023810:	b118      	cbz	r0, 802381a <__swbuf_r+0x12>
 8023812:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8023814:	b90b      	cbnz	r3, 802381a <__swbuf_r+0x12>
 8023816:	f7fc f9d3 	bl	801fbc0 <__sinit>
 802381a:	69a3      	ldr	r3, [r4, #24]
 802381c:	60a3      	str	r3, [r4, #8]
 802381e:	89a3      	ldrh	r3, [r4, #12]
 8023820:	0719      	lsls	r1, r3, #28
 8023822:	d529      	bpl.n	8023878 <__swbuf_r+0x70>
 8023824:	6923      	ldr	r3, [r4, #16]
 8023826:	b33b      	cbz	r3, 8023878 <__swbuf_r+0x70>
 8023828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802382c:	b2f6      	uxtb	r6, r6
 802382e:	049a      	lsls	r2, r3, #18
 8023830:	4637      	mov	r7, r6
 8023832:	d52a      	bpl.n	802388a <__swbuf_r+0x82>
 8023834:	6823      	ldr	r3, [r4, #0]
 8023836:	6920      	ldr	r0, [r4, #16]
 8023838:	1a18      	subs	r0, r3, r0
 802383a:	6963      	ldr	r3, [r4, #20]
 802383c:	4283      	cmp	r3, r0
 802383e:	dc04      	bgt.n	802384a <__swbuf_r+0x42>
 8023840:	4621      	mov	r1, r4
 8023842:	4628      	mov	r0, r5
 8023844:	f7fc f950 	bl	801fae8 <_fflush_r>
 8023848:	b9e0      	cbnz	r0, 8023884 <__swbuf_r+0x7c>
 802384a:	68a3      	ldr	r3, [r4, #8]
 802384c:	3b01      	subs	r3, #1
 802384e:	60a3      	str	r3, [r4, #8]
 8023850:	6823      	ldr	r3, [r4, #0]
 8023852:	1c5a      	adds	r2, r3, #1
 8023854:	6022      	str	r2, [r4, #0]
 8023856:	701e      	strb	r6, [r3, #0]
 8023858:	6962      	ldr	r2, [r4, #20]
 802385a:	1c43      	adds	r3, r0, #1
 802385c:	429a      	cmp	r2, r3
 802385e:	d004      	beq.n	802386a <__swbuf_r+0x62>
 8023860:	89a3      	ldrh	r3, [r4, #12]
 8023862:	07db      	lsls	r3, r3, #31
 8023864:	d506      	bpl.n	8023874 <__swbuf_r+0x6c>
 8023866:	2e0a      	cmp	r6, #10
 8023868:	d104      	bne.n	8023874 <__swbuf_r+0x6c>
 802386a:	4621      	mov	r1, r4
 802386c:	4628      	mov	r0, r5
 802386e:	f7fc f93b 	bl	801fae8 <_fflush_r>
 8023872:	b938      	cbnz	r0, 8023884 <__swbuf_r+0x7c>
 8023874:	4638      	mov	r0, r7
 8023876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023878:	4621      	mov	r1, r4
 802387a:	4628      	mov	r0, r5
 802387c:	f7fb f9c2 	bl	801ec04 <__swsetup_r>
 8023880:	2800      	cmp	r0, #0
 8023882:	d0d1      	beq.n	8023828 <__swbuf_r+0x20>
 8023884:	f04f 37ff 	mov.w	r7, #4294967295
 8023888:	e7f4      	b.n	8023874 <__swbuf_r+0x6c>
 802388a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802388e:	81a3      	strh	r3, [r4, #12]
 8023890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023896:	6663      	str	r3, [r4, #100]	; 0x64
 8023898:	e7cc      	b.n	8023834 <__swbuf_r+0x2c>
	...

0802389c <_wcrtomb_r>:
 802389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802389e:	4c09      	ldr	r4, [pc, #36]	; (80238c4 <_wcrtomb_r+0x28>)
 80238a0:	b085      	sub	sp, #20
 80238a2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 80238a6:	4605      	mov	r5, r0
 80238a8:	461e      	mov	r6, r3
 80238aa:	b909      	cbnz	r1, 80238b0 <_wcrtomb_r+0x14>
 80238ac:	460a      	mov	r2, r1
 80238ae:	a901      	add	r1, sp, #4
 80238b0:	47b8      	blx	r7
 80238b2:	1c43      	adds	r3, r0, #1
 80238b4:	bf01      	itttt	eq
 80238b6:	2300      	moveq	r3, #0
 80238b8:	6033      	streq	r3, [r6, #0]
 80238ba:	238a      	moveq	r3, #138	; 0x8a
 80238bc:	602b      	streq	r3, [r5, #0]
 80238be:	b005      	add	sp, #20
 80238c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80238c2:	bf00      	nop
 80238c4:	200008e0 	.word	0x200008e0

080238c8 <__ascii_wctomb>:
 80238c8:	b149      	cbz	r1, 80238de <__ascii_wctomb+0x16>
 80238ca:	2aff      	cmp	r2, #255	; 0xff
 80238cc:	bf85      	ittet	hi
 80238ce:	238a      	movhi	r3, #138	; 0x8a
 80238d0:	6003      	strhi	r3, [r0, #0]
 80238d2:	700a      	strbls	r2, [r1, #0]
 80238d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80238d8:	bf98      	it	ls
 80238da:	2001      	movls	r0, #1
 80238dc:	4770      	bx	lr
 80238de:	4608      	mov	r0, r1
 80238e0:	4770      	bx	lr

080238e2 <abort>:
 80238e2:	b508      	push	{r3, lr}
 80238e4:	2006      	movs	r0, #6
 80238e6:	f000 f82d 	bl	8023944 <raise>
 80238ea:	2001      	movs	r0, #1
 80238ec:	f7e0 fb9a 	bl	8004024 <_exit>

080238f0 <_raise_r>:
 80238f0:	291f      	cmp	r1, #31
 80238f2:	b538      	push	{r3, r4, r5, lr}
 80238f4:	4604      	mov	r4, r0
 80238f6:	460d      	mov	r5, r1
 80238f8:	d904      	bls.n	8023904 <_raise_r+0x14>
 80238fa:	2316      	movs	r3, #22
 80238fc:	6003      	str	r3, [r0, #0]
 80238fe:	f04f 30ff 	mov.w	r0, #4294967295
 8023902:	bd38      	pop	{r3, r4, r5, pc}
 8023904:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8023908:	b112      	cbz	r2, 8023910 <_raise_r+0x20>
 802390a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802390e:	b94b      	cbnz	r3, 8023924 <_raise_r+0x34>
 8023910:	4620      	mov	r0, r4
 8023912:	f000 f831 	bl	8023978 <_getpid_r>
 8023916:	462a      	mov	r2, r5
 8023918:	4601      	mov	r1, r0
 802391a:	4620      	mov	r0, r4
 802391c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023920:	f000 b818 	b.w	8023954 <_kill_r>
 8023924:	2b01      	cmp	r3, #1
 8023926:	d00a      	beq.n	802393e <_raise_r+0x4e>
 8023928:	1c59      	adds	r1, r3, #1
 802392a:	d103      	bne.n	8023934 <_raise_r+0x44>
 802392c:	2316      	movs	r3, #22
 802392e:	6003      	str	r3, [r0, #0]
 8023930:	2001      	movs	r0, #1
 8023932:	e7e6      	b.n	8023902 <_raise_r+0x12>
 8023934:	2400      	movs	r4, #0
 8023936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802393a:	4628      	mov	r0, r5
 802393c:	4798      	blx	r3
 802393e:	2000      	movs	r0, #0
 8023940:	e7df      	b.n	8023902 <_raise_r+0x12>
	...

08023944 <raise>:
 8023944:	4b02      	ldr	r3, [pc, #8]	; (8023950 <raise+0xc>)
 8023946:	4601      	mov	r1, r0
 8023948:	6818      	ldr	r0, [r3, #0]
 802394a:	f7ff bfd1 	b.w	80238f0 <_raise_r>
 802394e:	bf00      	nop
 8023950:	20000038 	.word	0x20000038

08023954 <_kill_r>:
 8023954:	b538      	push	{r3, r4, r5, lr}
 8023956:	4d07      	ldr	r5, [pc, #28]	; (8023974 <_kill_r+0x20>)
 8023958:	2300      	movs	r3, #0
 802395a:	4604      	mov	r4, r0
 802395c:	4608      	mov	r0, r1
 802395e:	4611      	mov	r1, r2
 8023960:	602b      	str	r3, [r5, #0]
 8023962:	f7e0 fb4d 	bl	8004000 <_kill>
 8023966:	1c43      	adds	r3, r0, #1
 8023968:	d102      	bne.n	8023970 <_kill_r+0x1c>
 802396a:	682b      	ldr	r3, [r5, #0]
 802396c:	b103      	cbz	r3, 8023970 <_kill_r+0x1c>
 802396e:	6023      	str	r3, [r4, #0]
 8023970:	bd38      	pop	{r3, r4, r5, pc}
 8023972:	bf00      	nop
 8023974:	2000be70 	.word	0x2000be70

08023978 <_getpid_r>:
 8023978:	f7e0 bb3a 	b.w	8003ff0 <_getpid>

0802397c <pow>:
 802397c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023980:	ec59 8b10 	vmov	r8, r9, d0
 8023984:	ec57 6b11 	vmov	r6, r7, d1
 8023988:	f000 f8a6 	bl	8023ad8 <__ieee754_pow>
 802398c:	4b4e      	ldr	r3, [pc, #312]	; (8023ac8 <pow+0x14c>)
 802398e:	f993 3000 	ldrsb.w	r3, [r3]
 8023992:	3301      	adds	r3, #1
 8023994:	ec55 4b10 	vmov	r4, r5, d0
 8023998:	d015      	beq.n	80239c6 <pow+0x4a>
 802399a:	4632      	mov	r2, r6
 802399c:	463b      	mov	r3, r7
 802399e:	4630      	mov	r0, r6
 80239a0:	4639      	mov	r1, r7
 80239a2:	f7dd f8f3 	bl	8000b8c <__aeabi_dcmpun>
 80239a6:	b970      	cbnz	r0, 80239c6 <pow+0x4a>
 80239a8:	4642      	mov	r2, r8
 80239aa:	464b      	mov	r3, r9
 80239ac:	4640      	mov	r0, r8
 80239ae:	4649      	mov	r1, r9
 80239b0:	f7dd f8ec 	bl	8000b8c <__aeabi_dcmpun>
 80239b4:	2200      	movs	r2, #0
 80239b6:	2300      	movs	r3, #0
 80239b8:	b148      	cbz	r0, 80239ce <pow+0x52>
 80239ba:	4630      	mov	r0, r6
 80239bc:	4639      	mov	r1, r7
 80239be:	f7dd f8b3 	bl	8000b28 <__aeabi_dcmpeq>
 80239c2:	2800      	cmp	r0, #0
 80239c4:	d17d      	bne.n	8023ac2 <pow+0x146>
 80239c6:	ec45 4b10 	vmov	d0, r4, r5
 80239ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239ce:	4640      	mov	r0, r8
 80239d0:	4649      	mov	r1, r9
 80239d2:	f7dd f8a9 	bl	8000b28 <__aeabi_dcmpeq>
 80239d6:	b1e0      	cbz	r0, 8023a12 <pow+0x96>
 80239d8:	2200      	movs	r2, #0
 80239da:	2300      	movs	r3, #0
 80239dc:	4630      	mov	r0, r6
 80239de:	4639      	mov	r1, r7
 80239e0:	f7dd f8a2 	bl	8000b28 <__aeabi_dcmpeq>
 80239e4:	2800      	cmp	r0, #0
 80239e6:	d16c      	bne.n	8023ac2 <pow+0x146>
 80239e8:	ec47 6b10 	vmov	d0, r6, r7
 80239ec:	f000 fe53 	bl	8024696 <finite>
 80239f0:	2800      	cmp	r0, #0
 80239f2:	d0e8      	beq.n	80239c6 <pow+0x4a>
 80239f4:	2200      	movs	r2, #0
 80239f6:	2300      	movs	r3, #0
 80239f8:	4630      	mov	r0, r6
 80239fa:	4639      	mov	r1, r7
 80239fc:	f7dd f89e 	bl	8000b3c <__aeabi_dcmplt>
 8023a00:	2800      	cmp	r0, #0
 8023a02:	d0e0      	beq.n	80239c6 <pow+0x4a>
 8023a04:	f7fb ffdc 	bl	801f9c0 <__errno>
 8023a08:	2321      	movs	r3, #33	; 0x21
 8023a0a:	6003      	str	r3, [r0, #0]
 8023a0c:	2400      	movs	r4, #0
 8023a0e:	4d2f      	ldr	r5, [pc, #188]	; (8023acc <pow+0x150>)
 8023a10:	e7d9      	b.n	80239c6 <pow+0x4a>
 8023a12:	ec45 4b10 	vmov	d0, r4, r5
 8023a16:	f000 fe3e 	bl	8024696 <finite>
 8023a1a:	bbb8      	cbnz	r0, 8023a8c <pow+0x110>
 8023a1c:	ec49 8b10 	vmov	d0, r8, r9
 8023a20:	f000 fe39 	bl	8024696 <finite>
 8023a24:	b390      	cbz	r0, 8023a8c <pow+0x110>
 8023a26:	ec47 6b10 	vmov	d0, r6, r7
 8023a2a:	f000 fe34 	bl	8024696 <finite>
 8023a2e:	b368      	cbz	r0, 8023a8c <pow+0x110>
 8023a30:	4622      	mov	r2, r4
 8023a32:	462b      	mov	r3, r5
 8023a34:	4620      	mov	r0, r4
 8023a36:	4629      	mov	r1, r5
 8023a38:	f7dd f8a8 	bl	8000b8c <__aeabi_dcmpun>
 8023a3c:	b160      	cbz	r0, 8023a58 <pow+0xdc>
 8023a3e:	f7fb ffbf 	bl	801f9c0 <__errno>
 8023a42:	2321      	movs	r3, #33	; 0x21
 8023a44:	6003      	str	r3, [r0, #0]
 8023a46:	2200      	movs	r2, #0
 8023a48:	2300      	movs	r3, #0
 8023a4a:	4610      	mov	r0, r2
 8023a4c:	4619      	mov	r1, r3
 8023a4e:	f7dc ff2d 	bl	80008ac <__aeabi_ddiv>
 8023a52:	4604      	mov	r4, r0
 8023a54:	460d      	mov	r5, r1
 8023a56:	e7b6      	b.n	80239c6 <pow+0x4a>
 8023a58:	f7fb ffb2 	bl	801f9c0 <__errno>
 8023a5c:	2322      	movs	r3, #34	; 0x22
 8023a5e:	6003      	str	r3, [r0, #0]
 8023a60:	2200      	movs	r2, #0
 8023a62:	2300      	movs	r3, #0
 8023a64:	4640      	mov	r0, r8
 8023a66:	4649      	mov	r1, r9
 8023a68:	f7dd f868 	bl	8000b3c <__aeabi_dcmplt>
 8023a6c:	2400      	movs	r4, #0
 8023a6e:	b158      	cbz	r0, 8023a88 <pow+0x10c>
 8023a70:	ec47 6b10 	vmov	d0, r6, r7
 8023a74:	f000 fe24 	bl	80246c0 <rint>
 8023a78:	4632      	mov	r2, r6
 8023a7a:	ec51 0b10 	vmov	r0, r1, d0
 8023a7e:	463b      	mov	r3, r7
 8023a80:	f7dd f852 	bl	8000b28 <__aeabi_dcmpeq>
 8023a84:	2800      	cmp	r0, #0
 8023a86:	d0c2      	beq.n	8023a0e <pow+0x92>
 8023a88:	4d11      	ldr	r5, [pc, #68]	; (8023ad0 <pow+0x154>)
 8023a8a:	e79c      	b.n	80239c6 <pow+0x4a>
 8023a8c:	2200      	movs	r2, #0
 8023a8e:	2300      	movs	r3, #0
 8023a90:	4620      	mov	r0, r4
 8023a92:	4629      	mov	r1, r5
 8023a94:	f7dd f848 	bl	8000b28 <__aeabi_dcmpeq>
 8023a98:	2800      	cmp	r0, #0
 8023a9a:	d094      	beq.n	80239c6 <pow+0x4a>
 8023a9c:	ec49 8b10 	vmov	d0, r8, r9
 8023aa0:	f000 fdf9 	bl	8024696 <finite>
 8023aa4:	2800      	cmp	r0, #0
 8023aa6:	d08e      	beq.n	80239c6 <pow+0x4a>
 8023aa8:	ec47 6b10 	vmov	d0, r6, r7
 8023aac:	f000 fdf3 	bl	8024696 <finite>
 8023ab0:	2800      	cmp	r0, #0
 8023ab2:	d088      	beq.n	80239c6 <pow+0x4a>
 8023ab4:	f7fb ff84 	bl	801f9c0 <__errno>
 8023ab8:	2322      	movs	r3, #34	; 0x22
 8023aba:	6003      	str	r3, [r0, #0]
 8023abc:	2400      	movs	r4, #0
 8023abe:	2500      	movs	r5, #0
 8023ac0:	e781      	b.n	80239c6 <pow+0x4a>
 8023ac2:	4d04      	ldr	r5, [pc, #16]	; (8023ad4 <pow+0x158>)
 8023ac4:	2400      	movs	r4, #0
 8023ac6:	e77e      	b.n	80239c6 <pow+0x4a>
 8023ac8:	20000a4c 	.word	0x20000a4c
 8023acc:	fff00000 	.word	0xfff00000
 8023ad0:	7ff00000 	.word	0x7ff00000
 8023ad4:	3ff00000 	.word	0x3ff00000

08023ad8 <__ieee754_pow>:
 8023ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023adc:	ed2d 8b06 	vpush	{d8-d10}
 8023ae0:	b08d      	sub	sp, #52	; 0x34
 8023ae2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8023ae6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8023aea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8023aee:	ea56 0100 	orrs.w	r1, r6, r0
 8023af2:	ec53 2b10 	vmov	r2, r3, d0
 8023af6:	f000 84d1 	beq.w	802449c <__ieee754_pow+0x9c4>
 8023afa:	497f      	ldr	r1, [pc, #508]	; (8023cf8 <__ieee754_pow+0x220>)
 8023afc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8023b00:	428c      	cmp	r4, r1
 8023b02:	ee10 8a10 	vmov	r8, s0
 8023b06:	4699      	mov	r9, r3
 8023b08:	dc09      	bgt.n	8023b1e <__ieee754_pow+0x46>
 8023b0a:	d103      	bne.n	8023b14 <__ieee754_pow+0x3c>
 8023b0c:	b97a      	cbnz	r2, 8023b2e <__ieee754_pow+0x56>
 8023b0e:	42a6      	cmp	r6, r4
 8023b10:	dd02      	ble.n	8023b18 <__ieee754_pow+0x40>
 8023b12:	e00c      	b.n	8023b2e <__ieee754_pow+0x56>
 8023b14:	428e      	cmp	r6, r1
 8023b16:	dc02      	bgt.n	8023b1e <__ieee754_pow+0x46>
 8023b18:	428e      	cmp	r6, r1
 8023b1a:	d110      	bne.n	8023b3e <__ieee754_pow+0x66>
 8023b1c:	b178      	cbz	r0, 8023b3e <__ieee754_pow+0x66>
 8023b1e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023b22:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023b26:	ea54 0308 	orrs.w	r3, r4, r8
 8023b2a:	f000 84b7 	beq.w	802449c <__ieee754_pow+0x9c4>
 8023b2e:	4873      	ldr	r0, [pc, #460]	; (8023cfc <__ieee754_pow+0x224>)
 8023b30:	b00d      	add	sp, #52	; 0x34
 8023b32:	ecbd 8b06 	vpop	{d8-d10}
 8023b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b3a:	f000 bdb9 	b.w	80246b0 <nan>
 8023b3e:	f1b9 0f00 	cmp.w	r9, #0
 8023b42:	da36      	bge.n	8023bb2 <__ieee754_pow+0xda>
 8023b44:	496e      	ldr	r1, [pc, #440]	; (8023d00 <__ieee754_pow+0x228>)
 8023b46:	428e      	cmp	r6, r1
 8023b48:	dc51      	bgt.n	8023bee <__ieee754_pow+0x116>
 8023b4a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8023b4e:	428e      	cmp	r6, r1
 8023b50:	f340 84af 	ble.w	80244b2 <__ieee754_pow+0x9da>
 8023b54:	1531      	asrs	r1, r6, #20
 8023b56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8023b5a:	2914      	cmp	r1, #20
 8023b5c:	dd0f      	ble.n	8023b7e <__ieee754_pow+0xa6>
 8023b5e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8023b62:	fa20 fc01 	lsr.w	ip, r0, r1
 8023b66:	fa0c f101 	lsl.w	r1, ip, r1
 8023b6a:	4281      	cmp	r1, r0
 8023b6c:	f040 84a1 	bne.w	80244b2 <__ieee754_pow+0x9da>
 8023b70:	f00c 0c01 	and.w	ip, ip, #1
 8023b74:	f1cc 0102 	rsb	r1, ip, #2
 8023b78:	9100      	str	r1, [sp, #0]
 8023b7a:	b180      	cbz	r0, 8023b9e <__ieee754_pow+0xc6>
 8023b7c:	e059      	b.n	8023c32 <__ieee754_pow+0x15a>
 8023b7e:	2800      	cmp	r0, #0
 8023b80:	d155      	bne.n	8023c2e <__ieee754_pow+0x156>
 8023b82:	f1c1 0114 	rsb	r1, r1, #20
 8023b86:	fa46 fc01 	asr.w	ip, r6, r1
 8023b8a:	fa0c f101 	lsl.w	r1, ip, r1
 8023b8e:	42b1      	cmp	r1, r6
 8023b90:	f040 848c 	bne.w	80244ac <__ieee754_pow+0x9d4>
 8023b94:	f00c 0c01 	and.w	ip, ip, #1
 8023b98:	f1cc 0102 	rsb	r1, ip, #2
 8023b9c:	9100      	str	r1, [sp, #0]
 8023b9e:	4959      	ldr	r1, [pc, #356]	; (8023d04 <__ieee754_pow+0x22c>)
 8023ba0:	428e      	cmp	r6, r1
 8023ba2:	d12d      	bne.n	8023c00 <__ieee754_pow+0x128>
 8023ba4:	2f00      	cmp	r7, #0
 8023ba6:	da79      	bge.n	8023c9c <__ieee754_pow+0x1c4>
 8023ba8:	4956      	ldr	r1, [pc, #344]	; (8023d04 <__ieee754_pow+0x22c>)
 8023baa:	2000      	movs	r0, #0
 8023bac:	f7dc fe7e 	bl	80008ac <__aeabi_ddiv>
 8023bb0:	e016      	b.n	8023be0 <__ieee754_pow+0x108>
 8023bb2:	2100      	movs	r1, #0
 8023bb4:	9100      	str	r1, [sp, #0]
 8023bb6:	2800      	cmp	r0, #0
 8023bb8:	d13b      	bne.n	8023c32 <__ieee754_pow+0x15a>
 8023bba:	494f      	ldr	r1, [pc, #316]	; (8023cf8 <__ieee754_pow+0x220>)
 8023bbc:	428e      	cmp	r6, r1
 8023bbe:	d1ee      	bne.n	8023b9e <__ieee754_pow+0xc6>
 8023bc0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8023bc4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8023bc8:	ea53 0308 	orrs.w	r3, r3, r8
 8023bcc:	f000 8466 	beq.w	802449c <__ieee754_pow+0x9c4>
 8023bd0:	4b4d      	ldr	r3, [pc, #308]	; (8023d08 <__ieee754_pow+0x230>)
 8023bd2:	429c      	cmp	r4, r3
 8023bd4:	dd0d      	ble.n	8023bf2 <__ieee754_pow+0x11a>
 8023bd6:	2f00      	cmp	r7, #0
 8023bd8:	f280 8464 	bge.w	80244a4 <__ieee754_pow+0x9cc>
 8023bdc:	2000      	movs	r0, #0
 8023bde:	2100      	movs	r1, #0
 8023be0:	ec41 0b10 	vmov	d0, r0, r1
 8023be4:	b00d      	add	sp, #52	; 0x34
 8023be6:	ecbd 8b06 	vpop	{d8-d10}
 8023bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bee:	2102      	movs	r1, #2
 8023bf0:	e7e0      	b.n	8023bb4 <__ieee754_pow+0xdc>
 8023bf2:	2f00      	cmp	r7, #0
 8023bf4:	daf2      	bge.n	8023bdc <__ieee754_pow+0x104>
 8023bf6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8023bfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023bfe:	e7ef      	b.n	8023be0 <__ieee754_pow+0x108>
 8023c00:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8023c04:	d104      	bne.n	8023c10 <__ieee754_pow+0x138>
 8023c06:	4610      	mov	r0, r2
 8023c08:	4619      	mov	r1, r3
 8023c0a:	f7dc fd25 	bl	8000658 <__aeabi_dmul>
 8023c0e:	e7e7      	b.n	8023be0 <__ieee754_pow+0x108>
 8023c10:	493e      	ldr	r1, [pc, #248]	; (8023d0c <__ieee754_pow+0x234>)
 8023c12:	428f      	cmp	r7, r1
 8023c14:	d10d      	bne.n	8023c32 <__ieee754_pow+0x15a>
 8023c16:	f1b9 0f00 	cmp.w	r9, #0
 8023c1a:	db0a      	blt.n	8023c32 <__ieee754_pow+0x15a>
 8023c1c:	ec43 2b10 	vmov	d0, r2, r3
 8023c20:	b00d      	add	sp, #52	; 0x34
 8023c22:	ecbd 8b06 	vpop	{d8-d10}
 8023c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c2a:	f000 bc77 	b.w	802451c <__ieee754_sqrt>
 8023c2e:	2100      	movs	r1, #0
 8023c30:	9100      	str	r1, [sp, #0]
 8023c32:	ec43 2b10 	vmov	d0, r2, r3
 8023c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023c3a:	f000 fd23 	bl	8024684 <fabs>
 8023c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023c42:	ec51 0b10 	vmov	r0, r1, d0
 8023c46:	f1b8 0f00 	cmp.w	r8, #0
 8023c4a:	d12a      	bne.n	8023ca2 <__ieee754_pow+0x1ca>
 8023c4c:	b12c      	cbz	r4, 8023c5a <__ieee754_pow+0x182>
 8023c4e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8023d04 <__ieee754_pow+0x22c>
 8023c52:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8023c56:	45e6      	cmp	lr, ip
 8023c58:	d123      	bne.n	8023ca2 <__ieee754_pow+0x1ca>
 8023c5a:	2f00      	cmp	r7, #0
 8023c5c:	da05      	bge.n	8023c6a <__ieee754_pow+0x192>
 8023c5e:	4602      	mov	r2, r0
 8023c60:	460b      	mov	r3, r1
 8023c62:	2000      	movs	r0, #0
 8023c64:	4927      	ldr	r1, [pc, #156]	; (8023d04 <__ieee754_pow+0x22c>)
 8023c66:	f7dc fe21 	bl	80008ac <__aeabi_ddiv>
 8023c6a:	f1b9 0f00 	cmp.w	r9, #0
 8023c6e:	dab7      	bge.n	8023be0 <__ieee754_pow+0x108>
 8023c70:	9b00      	ldr	r3, [sp, #0]
 8023c72:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023c76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023c7a:	4323      	orrs	r3, r4
 8023c7c:	d108      	bne.n	8023c90 <__ieee754_pow+0x1b8>
 8023c7e:	4602      	mov	r2, r0
 8023c80:	460b      	mov	r3, r1
 8023c82:	4610      	mov	r0, r2
 8023c84:	4619      	mov	r1, r3
 8023c86:	f7dc fb2f 	bl	80002e8 <__aeabi_dsub>
 8023c8a:	4602      	mov	r2, r0
 8023c8c:	460b      	mov	r3, r1
 8023c8e:	e78d      	b.n	8023bac <__ieee754_pow+0xd4>
 8023c90:	9b00      	ldr	r3, [sp, #0]
 8023c92:	2b01      	cmp	r3, #1
 8023c94:	d1a4      	bne.n	8023be0 <__ieee754_pow+0x108>
 8023c96:	4602      	mov	r2, r0
 8023c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023c9c:	4610      	mov	r0, r2
 8023c9e:	4619      	mov	r1, r3
 8023ca0:	e79e      	b.n	8023be0 <__ieee754_pow+0x108>
 8023ca2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8023ca6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8023caa:	950a      	str	r5, [sp, #40]	; 0x28
 8023cac:	9d00      	ldr	r5, [sp, #0]
 8023cae:	46ac      	mov	ip, r5
 8023cb0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023cb2:	ea5c 0505 	orrs.w	r5, ip, r5
 8023cb6:	d0e4      	beq.n	8023c82 <__ieee754_pow+0x1aa>
 8023cb8:	4b15      	ldr	r3, [pc, #84]	; (8023d10 <__ieee754_pow+0x238>)
 8023cba:	429e      	cmp	r6, r3
 8023cbc:	f340 80fc 	ble.w	8023eb8 <__ieee754_pow+0x3e0>
 8023cc0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023cc4:	429e      	cmp	r6, r3
 8023cc6:	4b10      	ldr	r3, [pc, #64]	; (8023d08 <__ieee754_pow+0x230>)
 8023cc8:	dd07      	ble.n	8023cda <__ieee754_pow+0x202>
 8023cca:	429c      	cmp	r4, r3
 8023ccc:	dc0a      	bgt.n	8023ce4 <__ieee754_pow+0x20c>
 8023cce:	2f00      	cmp	r7, #0
 8023cd0:	da84      	bge.n	8023bdc <__ieee754_pow+0x104>
 8023cd2:	a307      	add	r3, pc, #28	; (adr r3, 8023cf0 <__ieee754_pow+0x218>)
 8023cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cd8:	e795      	b.n	8023c06 <__ieee754_pow+0x12e>
 8023cda:	429c      	cmp	r4, r3
 8023cdc:	dbf7      	blt.n	8023cce <__ieee754_pow+0x1f6>
 8023cde:	4b09      	ldr	r3, [pc, #36]	; (8023d04 <__ieee754_pow+0x22c>)
 8023ce0:	429c      	cmp	r4, r3
 8023ce2:	dd17      	ble.n	8023d14 <__ieee754_pow+0x23c>
 8023ce4:	2f00      	cmp	r7, #0
 8023ce6:	dcf4      	bgt.n	8023cd2 <__ieee754_pow+0x1fa>
 8023ce8:	e778      	b.n	8023bdc <__ieee754_pow+0x104>
 8023cea:	bf00      	nop
 8023cec:	f3af 8000 	nop.w
 8023cf0:	8800759c 	.word	0x8800759c
 8023cf4:	7e37e43c 	.word	0x7e37e43c
 8023cf8:	7ff00000 	.word	0x7ff00000
 8023cfc:	08029679 	.word	0x08029679
 8023d00:	433fffff 	.word	0x433fffff
 8023d04:	3ff00000 	.word	0x3ff00000
 8023d08:	3fefffff 	.word	0x3fefffff
 8023d0c:	3fe00000 	.word	0x3fe00000
 8023d10:	41e00000 	.word	0x41e00000
 8023d14:	4b64      	ldr	r3, [pc, #400]	; (8023ea8 <__ieee754_pow+0x3d0>)
 8023d16:	2200      	movs	r2, #0
 8023d18:	f7dc fae6 	bl	80002e8 <__aeabi_dsub>
 8023d1c:	a356      	add	r3, pc, #344	; (adr r3, 8023e78 <__ieee754_pow+0x3a0>)
 8023d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d22:	4604      	mov	r4, r0
 8023d24:	460d      	mov	r5, r1
 8023d26:	f7dc fc97 	bl	8000658 <__aeabi_dmul>
 8023d2a:	a355      	add	r3, pc, #340	; (adr r3, 8023e80 <__ieee754_pow+0x3a8>)
 8023d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d30:	4606      	mov	r6, r0
 8023d32:	460f      	mov	r7, r1
 8023d34:	4620      	mov	r0, r4
 8023d36:	4629      	mov	r1, r5
 8023d38:	f7dc fc8e 	bl	8000658 <__aeabi_dmul>
 8023d3c:	4b5b      	ldr	r3, [pc, #364]	; (8023eac <__ieee754_pow+0x3d4>)
 8023d3e:	4682      	mov	sl, r0
 8023d40:	468b      	mov	fp, r1
 8023d42:	2200      	movs	r2, #0
 8023d44:	4620      	mov	r0, r4
 8023d46:	4629      	mov	r1, r5
 8023d48:	f7dc fc86 	bl	8000658 <__aeabi_dmul>
 8023d4c:	4602      	mov	r2, r0
 8023d4e:	460b      	mov	r3, r1
 8023d50:	a14d      	add	r1, pc, #308	; (adr r1, 8023e88 <__ieee754_pow+0x3b0>)
 8023d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d56:	f7dc fac7 	bl	80002e8 <__aeabi_dsub>
 8023d5a:	4622      	mov	r2, r4
 8023d5c:	462b      	mov	r3, r5
 8023d5e:	f7dc fc7b 	bl	8000658 <__aeabi_dmul>
 8023d62:	4602      	mov	r2, r0
 8023d64:	460b      	mov	r3, r1
 8023d66:	2000      	movs	r0, #0
 8023d68:	4951      	ldr	r1, [pc, #324]	; (8023eb0 <__ieee754_pow+0x3d8>)
 8023d6a:	f7dc fabd 	bl	80002e8 <__aeabi_dsub>
 8023d6e:	4622      	mov	r2, r4
 8023d70:	4680      	mov	r8, r0
 8023d72:	4689      	mov	r9, r1
 8023d74:	462b      	mov	r3, r5
 8023d76:	4620      	mov	r0, r4
 8023d78:	4629      	mov	r1, r5
 8023d7a:	f7dc fc6d 	bl	8000658 <__aeabi_dmul>
 8023d7e:	4602      	mov	r2, r0
 8023d80:	460b      	mov	r3, r1
 8023d82:	4640      	mov	r0, r8
 8023d84:	4649      	mov	r1, r9
 8023d86:	f7dc fc67 	bl	8000658 <__aeabi_dmul>
 8023d8a:	a341      	add	r3, pc, #260	; (adr r3, 8023e90 <__ieee754_pow+0x3b8>)
 8023d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d90:	f7dc fc62 	bl	8000658 <__aeabi_dmul>
 8023d94:	4602      	mov	r2, r0
 8023d96:	460b      	mov	r3, r1
 8023d98:	4650      	mov	r0, sl
 8023d9a:	4659      	mov	r1, fp
 8023d9c:	f7dc faa4 	bl	80002e8 <__aeabi_dsub>
 8023da0:	4602      	mov	r2, r0
 8023da2:	460b      	mov	r3, r1
 8023da4:	4680      	mov	r8, r0
 8023da6:	4689      	mov	r9, r1
 8023da8:	4630      	mov	r0, r6
 8023daa:	4639      	mov	r1, r7
 8023dac:	f7dc fa9e 	bl	80002ec <__adddf3>
 8023db0:	2400      	movs	r4, #0
 8023db2:	4632      	mov	r2, r6
 8023db4:	463b      	mov	r3, r7
 8023db6:	4620      	mov	r0, r4
 8023db8:	460d      	mov	r5, r1
 8023dba:	f7dc fa95 	bl	80002e8 <__aeabi_dsub>
 8023dbe:	4602      	mov	r2, r0
 8023dc0:	460b      	mov	r3, r1
 8023dc2:	4640      	mov	r0, r8
 8023dc4:	4649      	mov	r1, r9
 8023dc6:	f7dc fa8f 	bl	80002e8 <__aeabi_dsub>
 8023dca:	9b00      	ldr	r3, [sp, #0]
 8023dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023dce:	3b01      	subs	r3, #1
 8023dd0:	4313      	orrs	r3, r2
 8023dd2:	4682      	mov	sl, r0
 8023dd4:	468b      	mov	fp, r1
 8023dd6:	f040 81f1 	bne.w	80241bc <__ieee754_pow+0x6e4>
 8023dda:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8023e98 <__ieee754_pow+0x3c0>
 8023dde:	eeb0 8a47 	vmov.f32	s16, s14
 8023de2:	eef0 8a67 	vmov.f32	s17, s15
 8023de6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023dea:	2600      	movs	r6, #0
 8023dec:	4632      	mov	r2, r6
 8023dee:	463b      	mov	r3, r7
 8023df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023df4:	f7dc fa78 	bl	80002e8 <__aeabi_dsub>
 8023df8:	4622      	mov	r2, r4
 8023dfa:	462b      	mov	r3, r5
 8023dfc:	f7dc fc2c 	bl	8000658 <__aeabi_dmul>
 8023e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023e04:	4680      	mov	r8, r0
 8023e06:	4689      	mov	r9, r1
 8023e08:	4650      	mov	r0, sl
 8023e0a:	4659      	mov	r1, fp
 8023e0c:	f7dc fc24 	bl	8000658 <__aeabi_dmul>
 8023e10:	4602      	mov	r2, r0
 8023e12:	460b      	mov	r3, r1
 8023e14:	4640      	mov	r0, r8
 8023e16:	4649      	mov	r1, r9
 8023e18:	f7dc fa68 	bl	80002ec <__adddf3>
 8023e1c:	4632      	mov	r2, r6
 8023e1e:	463b      	mov	r3, r7
 8023e20:	4680      	mov	r8, r0
 8023e22:	4689      	mov	r9, r1
 8023e24:	4620      	mov	r0, r4
 8023e26:	4629      	mov	r1, r5
 8023e28:	f7dc fc16 	bl	8000658 <__aeabi_dmul>
 8023e2c:	460b      	mov	r3, r1
 8023e2e:	4604      	mov	r4, r0
 8023e30:	460d      	mov	r5, r1
 8023e32:	4602      	mov	r2, r0
 8023e34:	4649      	mov	r1, r9
 8023e36:	4640      	mov	r0, r8
 8023e38:	f7dc fa58 	bl	80002ec <__adddf3>
 8023e3c:	4b1d      	ldr	r3, [pc, #116]	; (8023eb4 <__ieee754_pow+0x3dc>)
 8023e3e:	4299      	cmp	r1, r3
 8023e40:	ec45 4b19 	vmov	d9, r4, r5
 8023e44:	4606      	mov	r6, r0
 8023e46:	460f      	mov	r7, r1
 8023e48:	468b      	mov	fp, r1
 8023e4a:	f340 82fe 	ble.w	802444a <__ieee754_pow+0x972>
 8023e4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023e52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023e56:	4303      	orrs	r3, r0
 8023e58:	f000 81f0 	beq.w	802423c <__ieee754_pow+0x764>
 8023e5c:	a310      	add	r3, pc, #64	; (adr r3, 8023ea0 <__ieee754_pow+0x3c8>)
 8023e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e62:	ec51 0b18 	vmov	r0, r1, d8
 8023e66:	f7dc fbf7 	bl	8000658 <__aeabi_dmul>
 8023e6a:	a30d      	add	r3, pc, #52	; (adr r3, 8023ea0 <__ieee754_pow+0x3c8>)
 8023e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e70:	e6cb      	b.n	8023c0a <__ieee754_pow+0x132>
 8023e72:	bf00      	nop
 8023e74:	f3af 8000 	nop.w
 8023e78:	60000000 	.word	0x60000000
 8023e7c:	3ff71547 	.word	0x3ff71547
 8023e80:	f85ddf44 	.word	0xf85ddf44
 8023e84:	3e54ae0b 	.word	0x3e54ae0b
 8023e88:	55555555 	.word	0x55555555
 8023e8c:	3fd55555 	.word	0x3fd55555
 8023e90:	652b82fe 	.word	0x652b82fe
 8023e94:	3ff71547 	.word	0x3ff71547
 8023e98:	00000000 	.word	0x00000000
 8023e9c:	bff00000 	.word	0xbff00000
 8023ea0:	8800759c 	.word	0x8800759c
 8023ea4:	7e37e43c 	.word	0x7e37e43c
 8023ea8:	3ff00000 	.word	0x3ff00000
 8023eac:	3fd00000 	.word	0x3fd00000
 8023eb0:	3fe00000 	.word	0x3fe00000
 8023eb4:	408fffff 	.word	0x408fffff
 8023eb8:	4bd7      	ldr	r3, [pc, #860]	; (8024218 <__ieee754_pow+0x740>)
 8023eba:	ea03 0309 	and.w	r3, r3, r9
 8023ebe:	2200      	movs	r2, #0
 8023ec0:	b92b      	cbnz	r3, 8023ece <__ieee754_pow+0x3f6>
 8023ec2:	4bd6      	ldr	r3, [pc, #856]	; (802421c <__ieee754_pow+0x744>)
 8023ec4:	f7dc fbc8 	bl	8000658 <__aeabi_dmul>
 8023ec8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023ecc:	460c      	mov	r4, r1
 8023ece:	1523      	asrs	r3, r4, #20
 8023ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023ed4:	4413      	add	r3, r2
 8023ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8023ed8:	4bd1      	ldr	r3, [pc, #836]	; (8024220 <__ieee754_pow+0x748>)
 8023eda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023ede:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023ee2:	429c      	cmp	r4, r3
 8023ee4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023ee8:	dd08      	ble.n	8023efc <__ieee754_pow+0x424>
 8023eea:	4bce      	ldr	r3, [pc, #824]	; (8024224 <__ieee754_pow+0x74c>)
 8023eec:	429c      	cmp	r4, r3
 8023eee:	f340 8163 	ble.w	80241b8 <__ieee754_pow+0x6e0>
 8023ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ef4:	3301      	adds	r3, #1
 8023ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8023ef8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023efc:	2400      	movs	r4, #0
 8023efe:	00e3      	lsls	r3, r4, #3
 8023f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f02:	4bc9      	ldr	r3, [pc, #804]	; (8024228 <__ieee754_pow+0x750>)
 8023f04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023f08:	ed93 7b00 	vldr	d7, [r3]
 8023f0c:	4629      	mov	r1, r5
 8023f0e:	ec53 2b17 	vmov	r2, r3, d7
 8023f12:	eeb0 8a47 	vmov.f32	s16, s14
 8023f16:	eef0 8a67 	vmov.f32	s17, s15
 8023f1a:	4682      	mov	sl, r0
 8023f1c:	f7dc f9e4 	bl	80002e8 <__aeabi_dsub>
 8023f20:	4652      	mov	r2, sl
 8023f22:	4606      	mov	r6, r0
 8023f24:	460f      	mov	r7, r1
 8023f26:	462b      	mov	r3, r5
 8023f28:	ec51 0b18 	vmov	r0, r1, d8
 8023f2c:	f7dc f9de 	bl	80002ec <__adddf3>
 8023f30:	4602      	mov	r2, r0
 8023f32:	460b      	mov	r3, r1
 8023f34:	2000      	movs	r0, #0
 8023f36:	49bd      	ldr	r1, [pc, #756]	; (802422c <__ieee754_pow+0x754>)
 8023f38:	f7dc fcb8 	bl	80008ac <__aeabi_ddiv>
 8023f3c:	ec41 0b19 	vmov	d9, r0, r1
 8023f40:	4602      	mov	r2, r0
 8023f42:	460b      	mov	r3, r1
 8023f44:	4630      	mov	r0, r6
 8023f46:	4639      	mov	r1, r7
 8023f48:	f7dc fb86 	bl	8000658 <__aeabi_dmul>
 8023f4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023f50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023f54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023f58:	2300      	movs	r3, #0
 8023f5a:	9304      	str	r3, [sp, #16]
 8023f5c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8023f60:	46ab      	mov	fp, r5
 8023f62:	106d      	asrs	r5, r5, #1
 8023f64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023f68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023f6c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8023f70:	2200      	movs	r2, #0
 8023f72:	4640      	mov	r0, r8
 8023f74:	4649      	mov	r1, r9
 8023f76:	4614      	mov	r4, r2
 8023f78:	461d      	mov	r5, r3
 8023f7a:	f7dc fb6d 	bl	8000658 <__aeabi_dmul>
 8023f7e:	4602      	mov	r2, r0
 8023f80:	460b      	mov	r3, r1
 8023f82:	4630      	mov	r0, r6
 8023f84:	4639      	mov	r1, r7
 8023f86:	f7dc f9af 	bl	80002e8 <__aeabi_dsub>
 8023f8a:	ec53 2b18 	vmov	r2, r3, d8
 8023f8e:	4606      	mov	r6, r0
 8023f90:	460f      	mov	r7, r1
 8023f92:	4620      	mov	r0, r4
 8023f94:	4629      	mov	r1, r5
 8023f96:	f7dc f9a7 	bl	80002e8 <__aeabi_dsub>
 8023f9a:	4602      	mov	r2, r0
 8023f9c:	460b      	mov	r3, r1
 8023f9e:	4650      	mov	r0, sl
 8023fa0:	4659      	mov	r1, fp
 8023fa2:	f7dc f9a1 	bl	80002e8 <__aeabi_dsub>
 8023fa6:	4642      	mov	r2, r8
 8023fa8:	464b      	mov	r3, r9
 8023faa:	f7dc fb55 	bl	8000658 <__aeabi_dmul>
 8023fae:	4602      	mov	r2, r0
 8023fb0:	460b      	mov	r3, r1
 8023fb2:	4630      	mov	r0, r6
 8023fb4:	4639      	mov	r1, r7
 8023fb6:	f7dc f997 	bl	80002e8 <__aeabi_dsub>
 8023fba:	ec53 2b19 	vmov	r2, r3, d9
 8023fbe:	f7dc fb4b 	bl	8000658 <__aeabi_dmul>
 8023fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023fc6:	ec41 0b18 	vmov	d8, r0, r1
 8023fca:	4610      	mov	r0, r2
 8023fcc:	4619      	mov	r1, r3
 8023fce:	f7dc fb43 	bl	8000658 <__aeabi_dmul>
 8023fd2:	a37d      	add	r3, pc, #500	; (adr r3, 80241c8 <__ieee754_pow+0x6f0>)
 8023fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fd8:	4604      	mov	r4, r0
 8023fda:	460d      	mov	r5, r1
 8023fdc:	f7dc fb3c 	bl	8000658 <__aeabi_dmul>
 8023fe0:	a37b      	add	r3, pc, #492	; (adr r3, 80241d0 <__ieee754_pow+0x6f8>)
 8023fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fe6:	f7dc f981 	bl	80002ec <__adddf3>
 8023fea:	4622      	mov	r2, r4
 8023fec:	462b      	mov	r3, r5
 8023fee:	f7dc fb33 	bl	8000658 <__aeabi_dmul>
 8023ff2:	a379      	add	r3, pc, #484	; (adr r3, 80241d8 <__ieee754_pow+0x700>)
 8023ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ff8:	f7dc f978 	bl	80002ec <__adddf3>
 8023ffc:	4622      	mov	r2, r4
 8023ffe:	462b      	mov	r3, r5
 8024000:	f7dc fb2a 	bl	8000658 <__aeabi_dmul>
 8024004:	a376      	add	r3, pc, #472	; (adr r3, 80241e0 <__ieee754_pow+0x708>)
 8024006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802400a:	f7dc f96f 	bl	80002ec <__adddf3>
 802400e:	4622      	mov	r2, r4
 8024010:	462b      	mov	r3, r5
 8024012:	f7dc fb21 	bl	8000658 <__aeabi_dmul>
 8024016:	a374      	add	r3, pc, #464	; (adr r3, 80241e8 <__ieee754_pow+0x710>)
 8024018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802401c:	f7dc f966 	bl	80002ec <__adddf3>
 8024020:	4622      	mov	r2, r4
 8024022:	462b      	mov	r3, r5
 8024024:	f7dc fb18 	bl	8000658 <__aeabi_dmul>
 8024028:	a371      	add	r3, pc, #452	; (adr r3, 80241f0 <__ieee754_pow+0x718>)
 802402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802402e:	f7dc f95d 	bl	80002ec <__adddf3>
 8024032:	4622      	mov	r2, r4
 8024034:	4606      	mov	r6, r0
 8024036:	460f      	mov	r7, r1
 8024038:	462b      	mov	r3, r5
 802403a:	4620      	mov	r0, r4
 802403c:	4629      	mov	r1, r5
 802403e:	f7dc fb0b 	bl	8000658 <__aeabi_dmul>
 8024042:	4602      	mov	r2, r0
 8024044:	460b      	mov	r3, r1
 8024046:	4630      	mov	r0, r6
 8024048:	4639      	mov	r1, r7
 802404a:	f7dc fb05 	bl	8000658 <__aeabi_dmul>
 802404e:	4642      	mov	r2, r8
 8024050:	4604      	mov	r4, r0
 8024052:	460d      	mov	r5, r1
 8024054:	464b      	mov	r3, r9
 8024056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802405a:	f7dc f947 	bl	80002ec <__adddf3>
 802405e:	ec53 2b18 	vmov	r2, r3, d8
 8024062:	f7dc faf9 	bl	8000658 <__aeabi_dmul>
 8024066:	4622      	mov	r2, r4
 8024068:	462b      	mov	r3, r5
 802406a:	f7dc f93f 	bl	80002ec <__adddf3>
 802406e:	4642      	mov	r2, r8
 8024070:	4682      	mov	sl, r0
 8024072:	468b      	mov	fp, r1
 8024074:	464b      	mov	r3, r9
 8024076:	4640      	mov	r0, r8
 8024078:	4649      	mov	r1, r9
 802407a:	f7dc faed 	bl	8000658 <__aeabi_dmul>
 802407e:	4b6c      	ldr	r3, [pc, #432]	; (8024230 <__ieee754_pow+0x758>)
 8024080:	2200      	movs	r2, #0
 8024082:	4606      	mov	r6, r0
 8024084:	460f      	mov	r7, r1
 8024086:	f7dc f931 	bl	80002ec <__adddf3>
 802408a:	4652      	mov	r2, sl
 802408c:	465b      	mov	r3, fp
 802408e:	f7dc f92d 	bl	80002ec <__adddf3>
 8024092:	9c04      	ldr	r4, [sp, #16]
 8024094:	460d      	mov	r5, r1
 8024096:	4622      	mov	r2, r4
 8024098:	460b      	mov	r3, r1
 802409a:	4640      	mov	r0, r8
 802409c:	4649      	mov	r1, r9
 802409e:	f7dc fadb 	bl	8000658 <__aeabi_dmul>
 80240a2:	4b63      	ldr	r3, [pc, #396]	; (8024230 <__ieee754_pow+0x758>)
 80240a4:	4680      	mov	r8, r0
 80240a6:	4689      	mov	r9, r1
 80240a8:	2200      	movs	r2, #0
 80240aa:	4620      	mov	r0, r4
 80240ac:	4629      	mov	r1, r5
 80240ae:	f7dc f91b 	bl	80002e8 <__aeabi_dsub>
 80240b2:	4632      	mov	r2, r6
 80240b4:	463b      	mov	r3, r7
 80240b6:	f7dc f917 	bl	80002e8 <__aeabi_dsub>
 80240ba:	4602      	mov	r2, r0
 80240bc:	460b      	mov	r3, r1
 80240be:	4650      	mov	r0, sl
 80240c0:	4659      	mov	r1, fp
 80240c2:	f7dc f911 	bl	80002e8 <__aeabi_dsub>
 80240c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80240ca:	f7dc fac5 	bl	8000658 <__aeabi_dmul>
 80240ce:	4622      	mov	r2, r4
 80240d0:	4606      	mov	r6, r0
 80240d2:	460f      	mov	r7, r1
 80240d4:	462b      	mov	r3, r5
 80240d6:	ec51 0b18 	vmov	r0, r1, d8
 80240da:	f7dc fabd 	bl	8000658 <__aeabi_dmul>
 80240de:	4602      	mov	r2, r0
 80240e0:	460b      	mov	r3, r1
 80240e2:	4630      	mov	r0, r6
 80240e4:	4639      	mov	r1, r7
 80240e6:	f7dc f901 	bl	80002ec <__adddf3>
 80240ea:	4606      	mov	r6, r0
 80240ec:	460f      	mov	r7, r1
 80240ee:	4602      	mov	r2, r0
 80240f0:	460b      	mov	r3, r1
 80240f2:	4640      	mov	r0, r8
 80240f4:	4649      	mov	r1, r9
 80240f6:	f7dc f8f9 	bl	80002ec <__adddf3>
 80240fa:	9c04      	ldr	r4, [sp, #16]
 80240fc:	a33e      	add	r3, pc, #248	; (adr r3, 80241f8 <__ieee754_pow+0x720>)
 80240fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024102:	4620      	mov	r0, r4
 8024104:	460d      	mov	r5, r1
 8024106:	f7dc faa7 	bl	8000658 <__aeabi_dmul>
 802410a:	4642      	mov	r2, r8
 802410c:	ec41 0b18 	vmov	d8, r0, r1
 8024110:	464b      	mov	r3, r9
 8024112:	4620      	mov	r0, r4
 8024114:	4629      	mov	r1, r5
 8024116:	f7dc f8e7 	bl	80002e8 <__aeabi_dsub>
 802411a:	4602      	mov	r2, r0
 802411c:	460b      	mov	r3, r1
 802411e:	4630      	mov	r0, r6
 8024120:	4639      	mov	r1, r7
 8024122:	f7dc f8e1 	bl	80002e8 <__aeabi_dsub>
 8024126:	a336      	add	r3, pc, #216	; (adr r3, 8024200 <__ieee754_pow+0x728>)
 8024128:	e9d3 2300 	ldrd	r2, r3, [r3]
 802412c:	f7dc fa94 	bl	8000658 <__aeabi_dmul>
 8024130:	a335      	add	r3, pc, #212	; (adr r3, 8024208 <__ieee754_pow+0x730>)
 8024132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024136:	4606      	mov	r6, r0
 8024138:	460f      	mov	r7, r1
 802413a:	4620      	mov	r0, r4
 802413c:	4629      	mov	r1, r5
 802413e:	f7dc fa8b 	bl	8000658 <__aeabi_dmul>
 8024142:	4602      	mov	r2, r0
 8024144:	460b      	mov	r3, r1
 8024146:	4630      	mov	r0, r6
 8024148:	4639      	mov	r1, r7
 802414a:	f7dc f8cf 	bl	80002ec <__adddf3>
 802414e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024150:	4b38      	ldr	r3, [pc, #224]	; (8024234 <__ieee754_pow+0x75c>)
 8024152:	4413      	add	r3, r2
 8024154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024158:	f7dc f8c8 	bl	80002ec <__adddf3>
 802415c:	4682      	mov	sl, r0
 802415e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024160:	468b      	mov	fp, r1
 8024162:	f7dc fa0f 	bl	8000584 <__aeabi_i2d>
 8024166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024168:	4b33      	ldr	r3, [pc, #204]	; (8024238 <__ieee754_pow+0x760>)
 802416a:	4413      	add	r3, r2
 802416c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024170:	4606      	mov	r6, r0
 8024172:	460f      	mov	r7, r1
 8024174:	4652      	mov	r2, sl
 8024176:	465b      	mov	r3, fp
 8024178:	ec51 0b18 	vmov	r0, r1, d8
 802417c:	f7dc f8b6 	bl	80002ec <__adddf3>
 8024180:	4642      	mov	r2, r8
 8024182:	464b      	mov	r3, r9
 8024184:	f7dc f8b2 	bl	80002ec <__adddf3>
 8024188:	4632      	mov	r2, r6
 802418a:	463b      	mov	r3, r7
 802418c:	f7dc f8ae 	bl	80002ec <__adddf3>
 8024190:	9c04      	ldr	r4, [sp, #16]
 8024192:	4632      	mov	r2, r6
 8024194:	463b      	mov	r3, r7
 8024196:	4620      	mov	r0, r4
 8024198:	460d      	mov	r5, r1
 802419a:	f7dc f8a5 	bl	80002e8 <__aeabi_dsub>
 802419e:	4642      	mov	r2, r8
 80241a0:	464b      	mov	r3, r9
 80241a2:	f7dc f8a1 	bl	80002e8 <__aeabi_dsub>
 80241a6:	ec53 2b18 	vmov	r2, r3, d8
 80241aa:	f7dc f89d 	bl	80002e8 <__aeabi_dsub>
 80241ae:	4602      	mov	r2, r0
 80241b0:	460b      	mov	r3, r1
 80241b2:	4650      	mov	r0, sl
 80241b4:	4659      	mov	r1, fp
 80241b6:	e606      	b.n	8023dc6 <__ieee754_pow+0x2ee>
 80241b8:	2401      	movs	r4, #1
 80241ba:	e6a0      	b.n	8023efe <__ieee754_pow+0x426>
 80241bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8024210 <__ieee754_pow+0x738>
 80241c0:	e60d      	b.n	8023dde <__ieee754_pow+0x306>
 80241c2:	bf00      	nop
 80241c4:	f3af 8000 	nop.w
 80241c8:	4a454eef 	.word	0x4a454eef
 80241cc:	3fca7e28 	.word	0x3fca7e28
 80241d0:	93c9db65 	.word	0x93c9db65
 80241d4:	3fcd864a 	.word	0x3fcd864a
 80241d8:	a91d4101 	.word	0xa91d4101
 80241dc:	3fd17460 	.word	0x3fd17460
 80241e0:	518f264d 	.word	0x518f264d
 80241e4:	3fd55555 	.word	0x3fd55555
 80241e8:	db6fabff 	.word	0xdb6fabff
 80241ec:	3fdb6db6 	.word	0x3fdb6db6
 80241f0:	33333303 	.word	0x33333303
 80241f4:	3fe33333 	.word	0x3fe33333
 80241f8:	e0000000 	.word	0xe0000000
 80241fc:	3feec709 	.word	0x3feec709
 8024200:	dc3a03fd 	.word	0xdc3a03fd
 8024204:	3feec709 	.word	0x3feec709
 8024208:	145b01f5 	.word	0x145b01f5
 802420c:	be3e2fe0 	.word	0xbe3e2fe0
 8024210:	00000000 	.word	0x00000000
 8024214:	3ff00000 	.word	0x3ff00000
 8024218:	7ff00000 	.word	0x7ff00000
 802421c:	43400000 	.word	0x43400000
 8024220:	0003988e 	.word	0x0003988e
 8024224:	000bb679 	.word	0x000bb679
 8024228:	08029688 	.word	0x08029688
 802422c:	3ff00000 	.word	0x3ff00000
 8024230:	40080000 	.word	0x40080000
 8024234:	080296a8 	.word	0x080296a8
 8024238:	08029698 	.word	0x08029698
 802423c:	a3b5      	add	r3, pc, #724	; (adr r3, 8024514 <__ieee754_pow+0xa3c>)
 802423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024242:	4640      	mov	r0, r8
 8024244:	4649      	mov	r1, r9
 8024246:	f7dc f851 	bl	80002ec <__adddf3>
 802424a:	4622      	mov	r2, r4
 802424c:	ec41 0b1a 	vmov	d10, r0, r1
 8024250:	462b      	mov	r3, r5
 8024252:	4630      	mov	r0, r6
 8024254:	4639      	mov	r1, r7
 8024256:	f7dc f847 	bl	80002e8 <__aeabi_dsub>
 802425a:	4602      	mov	r2, r0
 802425c:	460b      	mov	r3, r1
 802425e:	ec51 0b1a 	vmov	r0, r1, d10
 8024262:	f7dc fc89 	bl	8000b78 <__aeabi_dcmpgt>
 8024266:	2800      	cmp	r0, #0
 8024268:	f47f adf8 	bne.w	8023e5c <__ieee754_pow+0x384>
 802426c:	4aa4      	ldr	r2, [pc, #656]	; (8024500 <__ieee754_pow+0xa28>)
 802426e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024272:	4293      	cmp	r3, r2
 8024274:	f340 810b 	ble.w	802448e <__ieee754_pow+0x9b6>
 8024278:	151b      	asrs	r3, r3, #20
 802427a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802427e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8024282:	fa4a f303 	asr.w	r3, sl, r3
 8024286:	445b      	add	r3, fp
 8024288:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802428c:	4e9d      	ldr	r6, [pc, #628]	; (8024504 <__ieee754_pow+0xa2c>)
 802428e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8024292:	4116      	asrs	r6, r2
 8024294:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8024298:	2000      	movs	r0, #0
 802429a:	ea23 0106 	bic.w	r1, r3, r6
 802429e:	f1c2 0214 	rsb	r2, r2, #20
 80242a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80242a6:	fa4a fa02 	asr.w	sl, sl, r2
 80242aa:	f1bb 0f00 	cmp.w	fp, #0
 80242ae:	4602      	mov	r2, r0
 80242b0:	460b      	mov	r3, r1
 80242b2:	4620      	mov	r0, r4
 80242b4:	4629      	mov	r1, r5
 80242b6:	bfb8      	it	lt
 80242b8:	f1ca 0a00 	rsblt	sl, sl, #0
 80242bc:	f7dc f814 	bl	80002e8 <__aeabi_dsub>
 80242c0:	ec41 0b19 	vmov	d9, r0, r1
 80242c4:	4642      	mov	r2, r8
 80242c6:	464b      	mov	r3, r9
 80242c8:	ec51 0b19 	vmov	r0, r1, d9
 80242cc:	f7dc f80e 	bl	80002ec <__adddf3>
 80242d0:	2400      	movs	r4, #0
 80242d2:	a379      	add	r3, pc, #484	; (adr r3, 80244b8 <__ieee754_pow+0x9e0>)
 80242d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242d8:	4620      	mov	r0, r4
 80242da:	460d      	mov	r5, r1
 80242dc:	f7dc f9bc 	bl	8000658 <__aeabi_dmul>
 80242e0:	ec53 2b19 	vmov	r2, r3, d9
 80242e4:	4606      	mov	r6, r0
 80242e6:	460f      	mov	r7, r1
 80242e8:	4620      	mov	r0, r4
 80242ea:	4629      	mov	r1, r5
 80242ec:	f7db fffc 	bl	80002e8 <__aeabi_dsub>
 80242f0:	4602      	mov	r2, r0
 80242f2:	460b      	mov	r3, r1
 80242f4:	4640      	mov	r0, r8
 80242f6:	4649      	mov	r1, r9
 80242f8:	f7db fff6 	bl	80002e8 <__aeabi_dsub>
 80242fc:	a370      	add	r3, pc, #448	; (adr r3, 80244c0 <__ieee754_pow+0x9e8>)
 80242fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024302:	f7dc f9a9 	bl	8000658 <__aeabi_dmul>
 8024306:	a370      	add	r3, pc, #448	; (adr r3, 80244c8 <__ieee754_pow+0x9f0>)
 8024308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802430c:	4680      	mov	r8, r0
 802430e:	4689      	mov	r9, r1
 8024310:	4620      	mov	r0, r4
 8024312:	4629      	mov	r1, r5
 8024314:	f7dc f9a0 	bl	8000658 <__aeabi_dmul>
 8024318:	4602      	mov	r2, r0
 802431a:	460b      	mov	r3, r1
 802431c:	4640      	mov	r0, r8
 802431e:	4649      	mov	r1, r9
 8024320:	f7db ffe4 	bl	80002ec <__adddf3>
 8024324:	4604      	mov	r4, r0
 8024326:	460d      	mov	r5, r1
 8024328:	4602      	mov	r2, r0
 802432a:	460b      	mov	r3, r1
 802432c:	4630      	mov	r0, r6
 802432e:	4639      	mov	r1, r7
 8024330:	f7db ffdc 	bl	80002ec <__adddf3>
 8024334:	4632      	mov	r2, r6
 8024336:	463b      	mov	r3, r7
 8024338:	4680      	mov	r8, r0
 802433a:	4689      	mov	r9, r1
 802433c:	f7db ffd4 	bl	80002e8 <__aeabi_dsub>
 8024340:	4602      	mov	r2, r0
 8024342:	460b      	mov	r3, r1
 8024344:	4620      	mov	r0, r4
 8024346:	4629      	mov	r1, r5
 8024348:	f7db ffce 	bl	80002e8 <__aeabi_dsub>
 802434c:	4642      	mov	r2, r8
 802434e:	4606      	mov	r6, r0
 8024350:	460f      	mov	r7, r1
 8024352:	464b      	mov	r3, r9
 8024354:	4640      	mov	r0, r8
 8024356:	4649      	mov	r1, r9
 8024358:	f7dc f97e 	bl	8000658 <__aeabi_dmul>
 802435c:	a35c      	add	r3, pc, #368	; (adr r3, 80244d0 <__ieee754_pow+0x9f8>)
 802435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024362:	4604      	mov	r4, r0
 8024364:	460d      	mov	r5, r1
 8024366:	f7dc f977 	bl	8000658 <__aeabi_dmul>
 802436a:	a35b      	add	r3, pc, #364	; (adr r3, 80244d8 <__ieee754_pow+0xa00>)
 802436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024370:	f7db ffba 	bl	80002e8 <__aeabi_dsub>
 8024374:	4622      	mov	r2, r4
 8024376:	462b      	mov	r3, r5
 8024378:	f7dc f96e 	bl	8000658 <__aeabi_dmul>
 802437c:	a358      	add	r3, pc, #352	; (adr r3, 80244e0 <__ieee754_pow+0xa08>)
 802437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024382:	f7db ffb3 	bl	80002ec <__adddf3>
 8024386:	4622      	mov	r2, r4
 8024388:	462b      	mov	r3, r5
 802438a:	f7dc f965 	bl	8000658 <__aeabi_dmul>
 802438e:	a356      	add	r3, pc, #344	; (adr r3, 80244e8 <__ieee754_pow+0xa10>)
 8024390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024394:	f7db ffa8 	bl	80002e8 <__aeabi_dsub>
 8024398:	4622      	mov	r2, r4
 802439a:	462b      	mov	r3, r5
 802439c:	f7dc f95c 	bl	8000658 <__aeabi_dmul>
 80243a0:	a353      	add	r3, pc, #332	; (adr r3, 80244f0 <__ieee754_pow+0xa18>)
 80243a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243a6:	f7db ffa1 	bl	80002ec <__adddf3>
 80243aa:	4622      	mov	r2, r4
 80243ac:	462b      	mov	r3, r5
 80243ae:	f7dc f953 	bl	8000658 <__aeabi_dmul>
 80243b2:	4602      	mov	r2, r0
 80243b4:	460b      	mov	r3, r1
 80243b6:	4640      	mov	r0, r8
 80243b8:	4649      	mov	r1, r9
 80243ba:	f7db ff95 	bl	80002e8 <__aeabi_dsub>
 80243be:	4604      	mov	r4, r0
 80243c0:	460d      	mov	r5, r1
 80243c2:	4602      	mov	r2, r0
 80243c4:	460b      	mov	r3, r1
 80243c6:	4640      	mov	r0, r8
 80243c8:	4649      	mov	r1, r9
 80243ca:	f7dc f945 	bl	8000658 <__aeabi_dmul>
 80243ce:	2200      	movs	r2, #0
 80243d0:	ec41 0b19 	vmov	d9, r0, r1
 80243d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80243d8:	4620      	mov	r0, r4
 80243da:	4629      	mov	r1, r5
 80243dc:	f7db ff84 	bl	80002e8 <__aeabi_dsub>
 80243e0:	4602      	mov	r2, r0
 80243e2:	460b      	mov	r3, r1
 80243e4:	ec51 0b19 	vmov	r0, r1, d9
 80243e8:	f7dc fa60 	bl	80008ac <__aeabi_ddiv>
 80243ec:	4632      	mov	r2, r6
 80243ee:	4604      	mov	r4, r0
 80243f0:	460d      	mov	r5, r1
 80243f2:	463b      	mov	r3, r7
 80243f4:	4640      	mov	r0, r8
 80243f6:	4649      	mov	r1, r9
 80243f8:	f7dc f92e 	bl	8000658 <__aeabi_dmul>
 80243fc:	4632      	mov	r2, r6
 80243fe:	463b      	mov	r3, r7
 8024400:	f7db ff74 	bl	80002ec <__adddf3>
 8024404:	4602      	mov	r2, r0
 8024406:	460b      	mov	r3, r1
 8024408:	4620      	mov	r0, r4
 802440a:	4629      	mov	r1, r5
 802440c:	f7db ff6c 	bl	80002e8 <__aeabi_dsub>
 8024410:	4642      	mov	r2, r8
 8024412:	464b      	mov	r3, r9
 8024414:	f7db ff68 	bl	80002e8 <__aeabi_dsub>
 8024418:	460b      	mov	r3, r1
 802441a:	4602      	mov	r2, r0
 802441c:	493a      	ldr	r1, [pc, #232]	; (8024508 <__ieee754_pow+0xa30>)
 802441e:	2000      	movs	r0, #0
 8024420:	f7db ff62 	bl	80002e8 <__aeabi_dsub>
 8024424:	e9cd 0100 	strd	r0, r1, [sp]
 8024428:	9b01      	ldr	r3, [sp, #4]
 802442a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802442e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024432:	da2f      	bge.n	8024494 <__ieee754_pow+0x9bc>
 8024434:	4650      	mov	r0, sl
 8024436:	ed9d 0b00 	vldr	d0, [sp]
 802443a:	f000 f9cd 	bl	80247d8 <scalbn>
 802443e:	ec51 0b10 	vmov	r0, r1, d0
 8024442:	ec53 2b18 	vmov	r2, r3, d8
 8024446:	f7ff bbe0 	b.w	8023c0a <__ieee754_pow+0x132>
 802444a:	4b30      	ldr	r3, [pc, #192]	; (802450c <__ieee754_pow+0xa34>)
 802444c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8024450:	429e      	cmp	r6, r3
 8024452:	f77f af0b 	ble.w	802426c <__ieee754_pow+0x794>
 8024456:	4b2e      	ldr	r3, [pc, #184]	; (8024510 <__ieee754_pow+0xa38>)
 8024458:	440b      	add	r3, r1
 802445a:	4303      	orrs	r3, r0
 802445c:	d00b      	beq.n	8024476 <__ieee754_pow+0x99e>
 802445e:	a326      	add	r3, pc, #152	; (adr r3, 80244f8 <__ieee754_pow+0xa20>)
 8024460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024464:	ec51 0b18 	vmov	r0, r1, d8
 8024468:	f7dc f8f6 	bl	8000658 <__aeabi_dmul>
 802446c:	a322      	add	r3, pc, #136	; (adr r3, 80244f8 <__ieee754_pow+0xa20>)
 802446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024472:	f7ff bbca 	b.w	8023c0a <__ieee754_pow+0x132>
 8024476:	4622      	mov	r2, r4
 8024478:	462b      	mov	r3, r5
 802447a:	f7db ff35 	bl	80002e8 <__aeabi_dsub>
 802447e:	4642      	mov	r2, r8
 8024480:	464b      	mov	r3, r9
 8024482:	f7dc fb6f 	bl	8000b64 <__aeabi_dcmpge>
 8024486:	2800      	cmp	r0, #0
 8024488:	f43f aef0 	beq.w	802426c <__ieee754_pow+0x794>
 802448c:	e7e7      	b.n	802445e <__ieee754_pow+0x986>
 802448e:	f04f 0a00 	mov.w	sl, #0
 8024492:	e717      	b.n	80242c4 <__ieee754_pow+0x7ec>
 8024494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024498:	4619      	mov	r1, r3
 802449a:	e7d2      	b.n	8024442 <__ieee754_pow+0x96a>
 802449c:	491a      	ldr	r1, [pc, #104]	; (8024508 <__ieee754_pow+0xa30>)
 802449e:	2000      	movs	r0, #0
 80244a0:	f7ff bb9e 	b.w	8023be0 <__ieee754_pow+0x108>
 80244a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80244a8:	f7ff bb9a 	b.w	8023be0 <__ieee754_pow+0x108>
 80244ac:	9000      	str	r0, [sp, #0]
 80244ae:	f7ff bb76 	b.w	8023b9e <__ieee754_pow+0xc6>
 80244b2:	2100      	movs	r1, #0
 80244b4:	f7ff bb60 	b.w	8023b78 <__ieee754_pow+0xa0>
 80244b8:	00000000 	.word	0x00000000
 80244bc:	3fe62e43 	.word	0x3fe62e43
 80244c0:	fefa39ef 	.word	0xfefa39ef
 80244c4:	3fe62e42 	.word	0x3fe62e42
 80244c8:	0ca86c39 	.word	0x0ca86c39
 80244cc:	be205c61 	.word	0xbe205c61
 80244d0:	72bea4d0 	.word	0x72bea4d0
 80244d4:	3e663769 	.word	0x3e663769
 80244d8:	c5d26bf1 	.word	0xc5d26bf1
 80244dc:	3ebbbd41 	.word	0x3ebbbd41
 80244e0:	af25de2c 	.word	0xaf25de2c
 80244e4:	3f11566a 	.word	0x3f11566a
 80244e8:	16bebd93 	.word	0x16bebd93
 80244ec:	3f66c16c 	.word	0x3f66c16c
 80244f0:	5555553e 	.word	0x5555553e
 80244f4:	3fc55555 	.word	0x3fc55555
 80244f8:	c2f8f359 	.word	0xc2f8f359
 80244fc:	01a56e1f 	.word	0x01a56e1f
 8024500:	3fe00000 	.word	0x3fe00000
 8024504:	000fffff 	.word	0x000fffff
 8024508:	3ff00000 	.word	0x3ff00000
 802450c:	4090cbff 	.word	0x4090cbff
 8024510:	3f6f3400 	.word	0x3f6f3400
 8024514:	652b82fe 	.word	0x652b82fe
 8024518:	3c971547 	.word	0x3c971547

0802451c <__ieee754_sqrt>:
 802451c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024520:	ec55 4b10 	vmov	r4, r5, d0
 8024524:	4e56      	ldr	r6, [pc, #344]	; (8024680 <__ieee754_sqrt+0x164>)
 8024526:	43ae      	bics	r6, r5
 8024528:	ee10 0a10 	vmov	r0, s0
 802452c:	ee10 3a10 	vmov	r3, s0
 8024530:	4629      	mov	r1, r5
 8024532:	462a      	mov	r2, r5
 8024534:	d110      	bne.n	8024558 <__ieee754_sqrt+0x3c>
 8024536:	ee10 2a10 	vmov	r2, s0
 802453a:	462b      	mov	r3, r5
 802453c:	f7dc f88c 	bl	8000658 <__aeabi_dmul>
 8024540:	4602      	mov	r2, r0
 8024542:	460b      	mov	r3, r1
 8024544:	4620      	mov	r0, r4
 8024546:	4629      	mov	r1, r5
 8024548:	f7db fed0 	bl	80002ec <__adddf3>
 802454c:	4604      	mov	r4, r0
 802454e:	460d      	mov	r5, r1
 8024550:	ec45 4b10 	vmov	d0, r4, r5
 8024554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024558:	2d00      	cmp	r5, #0
 802455a:	dc10      	bgt.n	802457e <__ieee754_sqrt+0x62>
 802455c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024560:	4330      	orrs	r0, r6
 8024562:	d0f5      	beq.n	8024550 <__ieee754_sqrt+0x34>
 8024564:	b15d      	cbz	r5, 802457e <__ieee754_sqrt+0x62>
 8024566:	ee10 2a10 	vmov	r2, s0
 802456a:	462b      	mov	r3, r5
 802456c:	ee10 0a10 	vmov	r0, s0
 8024570:	f7db feba 	bl	80002e8 <__aeabi_dsub>
 8024574:	4602      	mov	r2, r0
 8024576:	460b      	mov	r3, r1
 8024578:	f7dc f998 	bl	80008ac <__aeabi_ddiv>
 802457c:	e7e6      	b.n	802454c <__ieee754_sqrt+0x30>
 802457e:	1509      	asrs	r1, r1, #20
 8024580:	d076      	beq.n	8024670 <__ieee754_sqrt+0x154>
 8024582:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024586:	07ce      	lsls	r6, r1, #31
 8024588:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802458c:	bf5e      	ittt	pl
 802458e:	0fda      	lsrpl	r2, r3, #31
 8024590:	005b      	lslpl	r3, r3, #1
 8024592:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8024596:	0fda      	lsrs	r2, r3, #31
 8024598:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802459c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80245a0:	2000      	movs	r0, #0
 80245a2:	106d      	asrs	r5, r5, #1
 80245a4:	005b      	lsls	r3, r3, #1
 80245a6:	f04f 0e16 	mov.w	lr, #22
 80245aa:	4684      	mov	ip, r0
 80245ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80245b0:	eb0c 0401 	add.w	r4, ip, r1
 80245b4:	4294      	cmp	r4, r2
 80245b6:	bfde      	ittt	le
 80245b8:	1b12      	suble	r2, r2, r4
 80245ba:	eb04 0c01 	addle.w	ip, r4, r1
 80245be:	1840      	addle	r0, r0, r1
 80245c0:	0052      	lsls	r2, r2, #1
 80245c2:	f1be 0e01 	subs.w	lr, lr, #1
 80245c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80245ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80245ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80245d2:	d1ed      	bne.n	80245b0 <__ieee754_sqrt+0x94>
 80245d4:	4671      	mov	r1, lr
 80245d6:	2720      	movs	r7, #32
 80245d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80245dc:	4562      	cmp	r2, ip
 80245de:	eb04 060e 	add.w	r6, r4, lr
 80245e2:	dc02      	bgt.n	80245ea <__ieee754_sqrt+0xce>
 80245e4:	d113      	bne.n	802460e <__ieee754_sqrt+0xf2>
 80245e6:	429e      	cmp	r6, r3
 80245e8:	d811      	bhi.n	802460e <__ieee754_sqrt+0xf2>
 80245ea:	2e00      	cmp	r6, #0
 80245ec:	eb06 0e04 	add.w	lr, r6, r4
 80245f0:	da43      	bge.n	802467a <__ieee754_sqrt+0x15e>
 80245f2:	f1be 0f00 	cmp.w	lr, #0
 80245f6:	db40      	blt.n	802467a <__ieee754_sqrt+0x15e>
 80245f8:	f10c 0801 	add.w	r8, ip, #1
 80245fc:	eba2 020c 	sub.w	r2, r2, ip
 8024600:	429e      	cmp	r6, r3
 8024602:	bf88      	it	hi
 8024604:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024608:	1b9b      	subs	r3, r3, r6
 802460a:	4421      	add	r1, r4
 802460c:	46c4      	mov	ip, r8
 802460e:	0052      	lsls	r2, r2, #1
 8024610:	3f01      	subs	r7, #1
 8024612:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8024616:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802461a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802461e:	d1dd      	bne.n	80245dc <__ieee754_sqrt+0xc0>
 8024620:	4313      	orrs	r3, r2
 8024622:	d006      	beq.n	8024632 <__ieee754_sqrt+0x116>
 8024624:	1c4c      	adds	r4, r1, #1
 8024626:	bf13      	iteet	ne
 8024628:	3101      	addne	r1, #1
 802462a:	3001      	addeq	r0, #1
 802462c:	4639      	moveq	r1, r7
 802462e:	f021 0101 	bicne.w	r1, r1, #1
 8024632:	1043      	asrs	r3, r0, #1
 8024634:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8024638:	0849      	lsrs	r1, r1, #1
 802463a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802463e:	07c2      	lsls	r2, r0, #31
 8024640:	bf48      	it	mi
 8024642:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8024646:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802464a:	460c      	mov	r4, r1
 802464c:	463d      	mov	r5, r7
 802464e:	e77f      	b.n	8024550 <__ieee754_sqrt+0x34>
 8024650:	0ada      	lsrs	r2, r3, #11
 8024652:	3815      	subs	r0, #21
 8024654:	055b      	lsls	r3, r3, #21
 8024656:	2a00      	cmp	r2, #0
 8024658:	d0fa      	beq.n	8024650 <__ieee754_sqrt+0x134>
 802465a:	02d7      	lsls	r7, r2, #11
 802465c:	d50a      	bpl.n	8024674 <__ieee754_sqrt+0x158>
 802465e:	f1c1 0420 	rsb	r4, r1, #32
 8024662:	fa23 f404 	lsr.w	r4, r3, r4
 8024666:	1e4d      	subs	r5, r1, #1
 8024668:	408b      	lsls	r3, r1
 802466a:	4322      	orrs	r2, r4
 802466c:	1b41      	subs	r1, r0, r5
 802466e:	e788      	b.n	8024582 <__ieee754_sqrt+0x66>
 8024670:	4608      	mov	r0, r1
 8024672:	e7f0      	b.n	8024656 <__ieee754_sqrt+0x13a>
 8024674:	0052      	lsls	r2, r2, #1
 8024676:	3101      	adds	r1, #1
 8024678:	e7ef      	b.n	802465a <__ieee754_sqrt+0x13e>
 802467a:	46e0      	mov	r8, ip
 802467c:	e7be      	b.n	80245fc <__ieee754_sqrt+0xe0>
 802467e:	bf00      	nop
 8024680:	7ff00000 	.word	0x7ff00000

08024684 <fabs>:
 8024684:	ec51 0b10 	vmov	r0, r1, d0
 8024688:	ee10 2a10 	vmov	r2, s0
 802468c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024690:	ec43 2b10 	vmov	d0, r2, r3
 8024694:	4770      	bx	lr

08024696 <finite>:
 8024696:	b082      	sub	sp, #8
 8024698:	ed8d 0b00 	vstr	d0, [sp]
 802469c:	9801      	ldr	r0, [sp, #4]
 802469e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80246a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80246a6:	0fc0      	lsrs	r0, r0, #31
 80246a8:	b002      	add	sp, #8
 80246aa:	4770      	bx	lr
 80246ac:	0000      	movs	r0, r0
	...

080246b0 <nan>:
 80246b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80246b8 <nan+0x8>
 80246b4:	4770      	bx	lr
 80246b6:	bf00      	nop
 80246b8:	00000000 	.word	0x00000000
 80246bc:	7ff80000 	.word	0x7ff80000

080246c0 <rint>:
 80246c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80246c2:	ec51 0b10 	vmov	r0, r1, d0
 80246c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80246ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80246ce:	2e13      	cmp	r6, #19
 80246d0:	ee10 4a10 	vmov	r4, s0
 80246d4:	460b      	mov	r3, r1
 80246d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80246da:	dc58      	bgt.n	802478e <rint+0xce>
 80246dc:	2e00      	cmp	r6, #0
 80246de:	da2b      	bge.n	8024738 <rint+0x78>
 80246e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80246e4:	4302      	orrs	r2, r0
 80246e6:	d023      	beq.n	8024730 <rint+0x70>
 80246e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80246ec:	4302      	orrs	r2, r0
 80246ee:	4254      	negs	r4, r2
 80246f0:	4314      	orrs	r4, r2
 80246f2:	0c4b      	lsrs	r3, r1, #17
 80246f4:	0b24      	lsrs	r4, r4, #12
 80246f6:	045b      	lsls	r3, r3, #17
 80246f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80246fc:	ea44 0103 	orr.w	r1, r4, r3
 8024700:	4b32      	ldr	r3, [pc, #200]	; (80247cc <rint+0x10c>)
 8024702:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024706:	e9d3 6700 	ldrd	r6, r7, [r3]
 802470a:	4602      	mov	r2, r0
 802470c:	460b      	mov	r3, r1
 802470e:	4630      	mov	r0, r6
 8024710:	4639      	mov	r1, r7
 8024712:	f7db fdeb 	bl	80002ec <__adddf3>
 8024716:	e9cd 0100 	strd	r0, r1, [sp]
 802471a:	463b      	mov	r3, r7
 802471c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024720:	4632      	mov	r2, r6
 8024722:	f7db fde1 	bl	80002e8 <__aeabi_dsub>
 8024726:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802472a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 802472e:	4639      	mov	r1, r7
 8024730:	ec41 0b10 	vmov	d0, r0, r1
 8024734:	b003      	add	sp, #12
 8024736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024738:	4a25      	ldr	r2, [pc, #148]	; (80247d0 <rint+0x110>)
 802473a:	4132      	asrs	r2, r6
 802473c:	ea01 0702 	and.w	r7, r1, r2
 8024740:	4307      	orrs	r7, r0
 8024742:	d0f5      	beq.n	8024730 <rint+0x70>
 8024744:	0851      	lsrs	r1, r2, #1
 8024746:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 802474a:	4314      	orrs	r4, r2
 802474c:	d00c      	beq.n	8024768 <rint+0xa8>
 802474e:	ea23 0201 	bic.w	r2, r3, r1
 8024752:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024756:	2e13      	cmp	r6, #19
 8024758:	fa43 f606 	asr.w	r6, r3, r6
 802475c:	bf0c      	ite	eq
 802475e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8024762:	2400      	movne	r4, #0
 8024764:	ea42 0306 	orr.w	r3, r2, r6
 8024768:	4918      	ldr	r1, [pc, #96]	; (80247cc <rint+0x10c>)
 802476a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802476e:	4622      	mov	r2, r4
 8024770:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024774:	4620      	mov	r0, r4
 8024776:	4629      	mov	r1, r5
 8024778:	f7db fdb8 	bl	80002ec <__adddf3>
 802477c:	e9cd 0100 	strd	r0, r1, [sp]
 8024780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024784:	4622      	mov	r2, r4
 8024786:	462b      	mov	r3, r5
 8024788:	f7db fdae 	bl	80002e8 <__aeabi_dsub>
 802478c:	e7d0      	b.n	8024730 <rint+0x70>
 802478e:	2e33      	cmp	r6, #51	; 0x33
 8024790:	dd07      	ble.n	80247a2 <rint+0xe2>
 8024792:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024796:	d1cb      	bne.n	8024730 <rint+0x70>
 8024798:	ee10 2a10 	vmov	r2, s0
 802479c:	f7db fda6 	bl	80002ec <__adddf3>
 80247a0:	e7c6      	b.n	8024730 <rint+0x70>
 80247a2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80247a6:	f04f 36ff 	mov.w	r6, #4294967295
 80247aa:	40d6      	lsrs	r6, r2
 80247ac:	4230      	tst	r0, r6
 80247ae:	d0bf      	beq.n	8024730 <rint+0x70>
 80247b0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80247b4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80247b8:	bf1f      	itttt	ne
 80247ba:	ea24 0101 	bicne.w	r1, r4, r1
 80247be:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80247c2:	fa44 f202 	asrne.w	r2, r4, r2
 80247c6:	ea41 0402 	orrne.w	r4, r1, r2
 80247ca:	e7cd      	b.n	8024768 <rint+0xa8>
 80247cc:	080296b8 	.word	0x080296b8
 80247d0:	000fffff 	.word	0x000fffff
 80247d4:	00000000 	.word	0x00000000

080247d8 <scalbn>:
 80247d8:	b570      	push	{r4, r5, r6, lr}
 80247da:	ec55 4b10 	vmov	r4, r5, d0
 80247de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80247e2:	4606      	mov	r6, r0
 80247e4:	462b      	mov	r3, r5
 80247e6:	b99a      	cbnz	r2, 8024810 <scalbn+0x38>
 80247e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80247ec:	4323      	orrs	r3, r4
 80247ee:	d036      	beq.n	802485e <scalbn+0x86>
 80247f0:	4b39      	ldr	r3, [pc, #228]	; (80248d8 <scalbn+0x100>)
 80247f2:	4629      	mov	r1, r5
 80247f4:	ee10 0a10 	vmov	r0, s0
 80247f8:	2200      	movs	r2, #0
 80247fa:	f7db ff2d 	bl	8000658 <__aeabi_dmul>
 80247fe:	4b37      	ldr	r3, [pc, #220]	; (80248dc <scalbn+0x104>)
 8024800:	429e      	cmp	r6, r3
 8024802:	4604      	mov	r4, r0
 8024804:	460d      	mov	r5, r1
 8024806:	da10      	bge.n	802482a <scalbn+0x52>
 8024808:	a32b      	add	r3, pc, #172	; (adr r3, 80248b8 <scalbn+0xe0>)
 802480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802480e:	e03a      	b.n	8024886 <scalbn+0xae>
 8024810:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024814:	428a      	cmp	r2, r1
 8024816:	d10c      	bne.n	8024832 <scalbn+0x5a>
 8024818:	ee10 2a10 	vmov	r2, s0
 802481c:	4620      	mov	r0, r4
 802481e:	4629      	mov	r1, r5
 8024820:	f7db fd64 	bl	80002ec <__adddf3>
 8024824:	4604      	mov	r4, r0
 8024826:	460d      	mov	r5, r1
 8024828:	e019      	b.n	802485e <scalbn+0x86>
 802482a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802482e:	460b      	mov	r3, r1
 8024830:	3a36      	subs	r2, #54	; 0x36
 8024832:	4432      	add	r2, r6
 8024834:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024838:	428a      	cmp	r2, r1
 802483a:	dd08      	ble.n	802484e <scalbn+0x76>
 802483c:	2d00      	cmp	r5, #0
 802483e:	a120      	add	r1, pc, #128	; (adr r1, 80248c0 <scalbn+0xe8>)
 8024840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024844:	da1c      	bge.n	8024880 <scalbn+0xa8>
 8024846:	a120      	add	r1, pc, #128	; (adr r1, 80248c8 <scalbn+0xf0>)
 8024848:	e9d1 0100 	ldrd	r0, r1, [r1]
 802484c:	e018      	b.n	8024880 <scalbn+0xa8>
 802484e:	2a00      	cmp	r2, #0
 8024850:	dd08      	ble.n	8024864 <scalbn+0x8c>
 8024852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802485a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802485e:	ec45 4b10 	vmov	d0, r4, r5
 8024862:	bd70      	pop	{r4, r5, r6, pc}
 8024864:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024868:	da19      	bge.n	802489e <scalbn+0xc6>
 802486a:	f24c 3350 	movw	r3, #50000	; 0xc350
 802486e:	429e      	cmp	r6, r3
 8024870:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024874:	dd0a      	ble.n	802488c <scalbn+0xb4>
 8024876:	a112      	add	r1, pc, #72	; (adr r1, 80248c0 <scalbn+0xe8>)
 8024878:	e9d1 0100 	ldrd	r0, r1, [r1]
 802487c:	2b00      	cmp	r3, #0
 802487e:	d1e2      	bne.n	8024846 <scalbn+0x6e>
 8024880:	a30f      	add	r3, pc, #60	; (adr r3, 80248c0 <scalbn+0xe8>)
 8024882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024886:	f7db fee7 	bl	8000658 <__aeabi_dmul>
 802488a:	e7cb      	b.n	8024824 <scalbn+0x4c>
 802488c:	a10a      	add	r1, pc, #40	; (adr r1, 80248b8 <scalbn+0xe0>)
 802488e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024892:	2b00      	cmp	r3, #0
 8024894:	d0b8      	beq.n	8024808 <scalbn+0x30>
 8024896:	a10e      	add	r1, pc, #56	; (adr r1, 80248d0 <scalbn+0xf8>)
 8024898:	e9d1 0100 	ldrd	r0, r1, [r1]
 802489c:	e7b4      	b.n	8024808 <scalbn+0x30>
 802489e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80248a2:	3236      	adds	r2, #54	; 0x36
 80248a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80248a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80248ac:	4620      	mov	r0, r4
 80248ae:	4b0c      	ldr	r3, [pc, #48]	; (80248e0 <scalbn+0x108>)
 80248b0:	2200      	movs	r2, #0
 80248b2:	e7e8      	b.n	8024886 <scalbn+0xae>
 80248b4:	f3af 8000 	nop.w
 80248b8:	c2f8f359 	.word	0xc2f8f359
 80248bc:	01a56e1f 	.word	0x01a56e1f
 80248c0:	8800759c 	.word	0x8800759c
 80248c4:	7e37e43c 	.word	0x7e37e43c
 80248c8:	8800759c 	.word	0x8800759c
 80248cc:	fe37e43c 	.word	0xfe37e43c
 80248d0:	c2f8f359 	.word	0xc2f8f359
 80248d4:	81a56e1f 	.word	0x81a56e1f
 80248d8:	43500000 	.word	0x43500000
 80248dc:	ffff3cb0 	.word	0xffff3cb0
 80248e0:	3c900000 	.word	0x3c900000

080248e4 <_init>:
 80248e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248e6:	bf00      	nop
 80248e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248ea:	bc08      	pop	{r3}
 80248ec:	469e      	mov	lr, r3
 80248ee:	4770      	bx	lr

080248f0 <_fini>:
 80248f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248f2:	bf00      	nop
 80248f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248f6:	bc08      	pop	{r3}
 80248f8:	469e      	mov	lr, r3
 80248fa:	4770      	bx	lr
