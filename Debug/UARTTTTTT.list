
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800e248  0800e248  0001e248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e830  0800e830  00020a30  2**0
                  CONTENTS
  4 .ARM          00000008  0800e830  0800e830  0001e830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e838  0800e838  00020a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e838  0800e838  0001e838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a30  20000000  0800e844  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000a30  0800f274  00020a30  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000cb4  0800f274  00020cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a30  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015954  00000000  00000000  00020a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a05  00000000  00000000  000363b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00038dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00039da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a2d  00000000  00000000  0003ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139f6  00000000  00000000  000636b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa0d2  00000000  00000000  000770ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017117d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  001711d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a30 	.word	0x20000a30
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e22c 	.word	0x0800e22c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a34 	.word	0x20000a34
 800020c:	0800e22c 	.word	0x0800e22c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000efc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00b      	beq.n	8000f34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f1c:	e000      	b.n	8000f20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f9      	beq.n	8000f1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
	int i=0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffc7 	bl	8000ef4 <ITM_SendChar>
	for(i=0;i<len;i++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x16>
	return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b0b3      	sub	sp, #204	; 0xcc
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// ZDA-38;RMC-68
	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8000f86:	4b81      	ldr	r3, [pc, #516]	; (800118c <main+0x20c>)
 8000f88:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000f8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8000f92:	4a7f      	ldr	r2, [pc, #508]	; (8001190 <main+0x210>)
 8000f94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f9a:	c303      	stmia	r3!, {r0, r1}
 8000f9c:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8000f9e:	4b7d      	ldr	r3, [pc, #500]	; (8001194 <main+0x214>)
 8000fa0:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8000fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 8000faa:	4a7b      	ldr	r2, [pc, #492]	; (8001198 <main+0x218>)
 8000fac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb2:	c303      	stmia	r3!, {r0, r1}
 8000fb4:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8000fb6:	4b79      	ldr	r3, [pc, #484]	; (800119c <main+0x21c>)
 8000fb8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 8000fc2:	4a77      	ldr	r2, [pc, #476]	; (80011a0 <main+0x220>)
 8000fc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fca:	c303      	stmia	r3!, {r0, r1}
 8000fcc:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 8000fce:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <main+0x224>)
 8000fd0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 8000fda:	4a73      	ldr	r2, [pc, #460]	; (80011a8 <main+0x228>)
 8000fdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe2:	c303      	stmia	r3!, {r0, r1}
 8000fe4:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 8000fe6:	4b71      	ldr	r3, [pc, #452]	; (80011ac <main+0x22c>)
 8000fe8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 8000ff2:	4a6f      	ldr	r2, [pc, #444]	; (80011b0 <main+0x230>)
 8000ff4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ff8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ffa:	c303      	stmia	r3!, {r0, r1}
 8000ffc:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 8000ffe:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <main+0x234>)
 8001000:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 800100a:	4a6b      	ldr	r2, [pc, #428]	; (80011b8 <main+0x238>)
 800100c:	f107 0320 	add.w	r3, r7, #32
 8001010:	ca07      	ldmia	r2, {r0, r1, r2}
 8001012:	c303      	stmia	r3!, {r0, r1}
 8001014:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 8001016:	4b69      	ldr	r3, [pc, #420]	; (80011bc <main+0x23c>)
 8001018:	f107 0410 	add.w	r4, r7, #16
 800101c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800101e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001022:	4a67      	ldr	r2, [pc, #412]	; (80011c0 <main+0x240>)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	ca07      	ldmia	r2, {r0, r1, r2}
 8001028:	c303      	stmia	r3!, {r0, r1}
 800102a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f001 fcd5 	bl	80029da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f8cc 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 fa32 	bl	800149c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001038:	f000 f9ee 	bl	8001418 <MX_USART6_UART_Init>
  MX_UART7_Init();
 800103c:	f000 f9bc 	bl	80013b8 <MX_UART7_Init>
  MX_RTC_Init();
 8001040:	f000 f95e 	bl	8001300 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 8001044:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	2210      	movs	r2, #16
 800104e:	485d      	ldr	r0, [pc, #372]	; (80011c4 <main+0x244>)
 8001050:	f003 ffae 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f001 fced 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 800105a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	220a      	movs	r2, #10
 8001064:	4857      	ldr	r0, [pc, #348]	; (80011c4 <main+0x244>)
 8001066:	f003 ffa3 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f001 fce2 	bl	8002a34 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 8001070:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	2210      	movs	r2, #16
 800107a:	4852      	ldr	r0, [pc, #328]	; (80011c4 <main+0x244>)
 800107c:	f003 ff98 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f001 fcd7 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 8001086:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	220a      	movs	r2, #10
 8001090:	484c      	ldr	r0, [pc, #304]	; (80011c4 <main+0x244>)
 8001092:	f003 ff8d 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001096:	2064      	movs	r0, #100	; 0x64
 8001098:	f001 fccc 	bl	8002a34 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 800109c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80010a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a4:	2210      	movs	r2, #16
 80010a6:	4847      	ldr	r0, [pc, #284]	; (80011c4 <main+0x244>)
 80010a8:	f003 ff82 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f001 fcc1 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 80010b2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	220a      	movs	r2, #10
 80010bc:	4841      	ldr	r0, [pc, #260]	; (80011c4 <main+0x244>)
 80010be:	f003 ff77 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f001 fcb6 	bl	8002a34 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 80010c8:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	2210      	movs	r2, #16
 80010d2:	483c      	ldr	r0, [pc, #240]	; (80011c4 <main+0x244>)
 80010d4:	f003 ff6c 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010d8:	2064      	movs	r0, #100	; 0x64
 80010da:	f001 fcab 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 80010de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	220a      	movs	r2, #10
 80010e8:	4836      	ldr	r0, [pc, #216]	; (80011c4 <main+0x244>)
 80010ea:	f003 ff61 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f001 fca0 	bl	8002a34 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80010f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80010f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fc:	2210      	movs	r2, #16
 80010fe:	4831      	ldr	r0, [pc, #196]	; (80011c4 <main+0x244>)
 8001100:	f003 ff56 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f001 fc95 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 800110a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	220a      	movs	r2, #10
 8001114:	482b      	ldr	r0, [pc, #172]	; (80011c4 <main+0x244>)
 8001116:	f003 ff4b 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f001 fc8a 	bl	8002a34 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 8001120:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	2210      	movs	r2, #16
 800112a:	4826      	ldr	r0, [pc, #152]	; (80011c4 <main+0x244>)
 800112c:	f003 ff40 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001130:	2064      	movs	r0, #100	; 0x64
 8001132:	f001 fc7f 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 8001136:	f107 0120 	add.w	r1, r7, #32
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	220a      	movs	r2, #10
 8001140:	4820      	ldr	r0, [pc, #128]	; (80011c4 <main+0x244>)
 8001142:	f003 ff35 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f001 fc74 	bl	8002a34 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 800114c:	f107 0110 	add.w	r1, r7, #16
 8001150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001154:	2210      	movs	r2, #16
 8001156:	481b      	ldr	r0, [pc, #108]	; (80011c4 <main+0x244>)
 8001158:	f003 ff2a 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	; 0x64
 800115e:	f001 fc69 	bl	8002a34 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 8001162:	1d39      	adds	r1, r7, #4
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	220a      	movs	r2, #10
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <main+0x244>)
 800116c:	f003 ff20 	bl	8004fb0 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f001 fc5f 	bl	8002a34 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	4913      	ldr	r1, [pc, #76]	; (80011c8 <main+0x248>)
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <main+0x244>)
 800117c:	f004 f81a 	bl	80051b4 <HAL_UART_Receive_IT>

	  //HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
	  //HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
	  HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f001 fc56 	bl	8002a34 <HAL_Delay>
	  HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8001188:	e7f5      	b.n	8001176 <main+0x1f6>
 800118a:	bf00      	nop
 800118c:	0800e248 	.word	0x0800e248
 8001190:	0800e258 	.word	0x0800e258
 8001194:	0800e264 	.word	0x0800e264
 8001198:	0800e274 	.word	0x0800e274
 800119c:	0800e280 	.word	0x0800e280
 80011a0:	0800e290 	.word	0x0800e290
 80011a4:	0800e29c 	.word	0x0800e29c
 80011a8:	0800e2ac 	.word	0x0800e2ac
 80011ac:	0800e2b8 	.word	0x0800e2b8
 80011b0:	0800e2c8 	.word	0x0800e2c8
 80011b4:	0800e2d4 	.word	0x0800e2d4
 80011b8:	0800e2e4 	.word	0x0800e2e4
 80011bc:	0800e2f0 	.word	0x0800e2f0
 80011c0:	0800e300 	.word	0x0800e300
 80011c4:	20000b04 	.word	0x20000b04
 80011c8:	20000a8c 	.word	0x20000a8c

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0b4      	sub	sp, #208	; 0xd0
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f005 fac6 	bl	800676c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	2284      	movs	r2, #132	; 0x84
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fab7 	bl	800676c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011fe:	f001 ff77 	bl	80030f0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <SystemClock_Config+0x12c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a3c      	ldr	r2, [pc, #240]	; (80012f8 <SystemClock_Config+0x12c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <SystemClock_Config+0x12c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <SystemClock_Config+0x130>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a37      	ldr	r2, [pc, #220]	; (80012fc <SystemClock_Config+0x130>)
 8001220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001224:	6013      	str	r3, [r2, #0]
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <SystemClock_Config+0x130>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001232:	2309      	movs	r3, #9
 8001234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001254:	2319      	movs	r3, #25
 8001256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800125a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800125e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001268:	2309      	movs	r3, #9
 800126a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001272:	4618      	mov	r0, r3
 8001274:	f001 ff9c 	bl	80031b0 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800127e:	f001 f95b 	bl	8002538 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001282:	f001 ff45 	bl	8003110 <HAL_PWREx_EnableOverDrive>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800128c:	f001 f954 	bl	8002538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b6:	2106      	movs	r1, #6
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fa1d 	bl	80036f8 <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80012c4:	f001 f938 	bl	8002538 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART6
 80012c8:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80012cc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART7;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80012d4:	2300      	movs	r3, #0
 80012d6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80012d8:	2300      	movs	r3, #0
 80012da:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fc11 	bl	8003b08 <HAL_RCCEx_PeriphCLKConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80012ec:	f001 f924 	bl	8002538 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	37d0      	adds	r7, #208	; 0xd0
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_RTC_Init+0xb0>)
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <MX_RTC_Init+0xb4>)
 8001320:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_RTC_Init+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_RTC_Init+0xb0>)
 800132a:	227f      	movs	r2, #127	; 0x7f
 800132c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_RTC_Init+0xb0>)
 8001330:	22ff      	movs	r2, #255	; 0xff
 8001332:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_RTC_Init+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_RTC_Init+0xb0>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_RTC_Init+0xb0>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001346:	481a      	ldr	r0, [pc, #104]	; (80013b0 <MX_RTC_Init+0xb0>)
 8001348:	f002 ffce 	bl	80042e8 <HAL_RTC_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001352:	f001 f8f1 	bl	8002538 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8001356:	2323      	movs	r3, #35	; 0x23
 8001358:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x59;
 800135a:	2359      	movs	r3, #89	; 0x59
 800135c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2201      	movs	r2, #1
 8001370:	4619      	mov	r1, r3
 8001372:	480f      	ldr	r0, [pc, #60]	; (80013b0 <MX_RTC_Init+0xb0>)
 8001374:	f003 f84a 	bl	800440c <HAL_RTC_SetTime>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800137e:	f001 f8db 	bl	8002538 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001382:	2301      	movs	r3, #1
 8001384:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001386:	2312      	movs	r3, #18
 8001388:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x31;
 800138a:	2331      	movs	r3, #49	; 0x31
 800138c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800138e:	2300      	movs	r3, #0
 8001390:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2201      	movs	r2, #1
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_RTC_Init+0xb0>)
 800139a:	f003 f953 	bl	8004644 <HAL_RTC_SetDate>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80013a4:	f001 f8c8 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000b8c 	.word	0x20000b8c
 80013b4:	40002800 	.word	0x40002800

080013b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_UART7_Init+0x58>)
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <MX_UART7_Init+0x5c>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_UART7_Init+0x58>)
 80013c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_UART7_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_UART7_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_UART7_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_UART7_Init+0x58>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_UART7_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_UART7_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_UART7_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_UART7_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_UART7_Init+0x58>)
 80013fc:	f003 fd8a 	bl	8004f14 <HAL_UART_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001406:	f001 f897 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000b04 	.word	0x20000b04
 8001414:	40007800 	.word	0x40007800

08001418 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_USART6_UART_Init+0x78>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_USART6_UART_Init+0x78>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart7, UART_IT_IDLE);
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_USART6_UART_Init+0x78>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_USART6_UART_Init+0x78>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0210 	orr.w	r2, r2, #16
 800143a:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <MX_USART6_UART_Init+0x80>)
 8001440:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 8001444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001448:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_USART6_UART_Init+0x7c>)
 800147c:	f003 fd4a 	bl	8004f14 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_USART6_UART_Init+0x72>
  {
    Error_Handler();
 8001486:	f001 f857 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000b04 	.word	0x20000b04
 8001494:	20000bac 	.word	0x20000bac
 8001498:	40011400 	.word	0x40011400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b090      	sub	sp, #64	; 0x40
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4bae      	ldr	r3, [pc, #696]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4aad      	ldr	r2, [pc, #692]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4bab      	ldr	r3, [pc, #684]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ca:	4ba8      	ldr	r3, [pc, #672]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4aa7      	ldr	r2, [pc, #668]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4ba5      	ldr	r3, [pc, #660]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4ba2      	ldr	r3, [pc, #648]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4aa1      	ldr	r2, [pc, #644]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b9f      	ldr	r3, [pc, #636]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	4b9c      	ldr	r3, [pc, #624]	; (800176c <MX_GPIO_Init+0x2d0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a9b      	ldr	r2, [pc, #620]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b99      	ldr	r3, [pc, #612]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b96      	ldr	r3, [pc, #600]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a95      	ldr	r2, [pc, #596]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b93      	ldr	r3, [pc, #588]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b90      	ldr	r3, [pc, #576]	; (800176c <MX_GPIO_Init+0x2d0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a8f      	ldr	r2, [pc, #572]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b8d      	ldr	r3, [pc, #564]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001542:	4b8a      	ldr	r3, [pc, #552]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a89      	ldr	r2, [pc, #548]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b87      	ldr	r3, [pc, #540]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800155a:	4b84      	ldr	r3, [pc, #528]	; (800176c <MX_GPIO_Init+0x2d0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a83      	ldr	r2, [pc, #524]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001572:	4b7e      	ldr	r3, [pc, #504]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a7d      	ldr	r2, [pc, #500]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b7b      	ldr	r3, [pc, #492]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158a:	4b78      	ldr	r3, [pc, #480]	; (800176c <MX_GPIO_Init+0x2d0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a77      	ldr	r2, [pc, #476]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b75      	ldr	r3, [pc, #468]	; (800176c <MX_GPIO_Init+0x2d0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	4b72      	ldr	r3, [pc, #456]	; (800176c <MX_GPIO_Init+0x2d0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a71      	ldr	r2, [pc, #452]	; (800176c <MX_GPIO_Init+0x2d0>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <MX_GPIO_Init+0x2d0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2120      	movs	r1, #32
 80015be:	486c      	ldr	r0, [pc, #432]	; (8001770 <MX_GPIO_Init+0x2d4>)
 80015c0:	f001 fd7c 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	210c      	movs	r1, #12
 80015c8:	486a      	ldr	r0, [pc, #424]	; (8001774 <MX_GPIO_Init+0x2d8>)
 80015ca:	f001 fd77 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2108      	movs	r1, #8
 80015d2:	4869      	ldr	r0, [pc, #420]	; (8001778 <MX_GPIO_Init+0x2dc>)
 80015d4:	f001 fd72 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	4865      	ldr	r0, [pc, #404]	; (8001774 <MX_GPIO_Init+0x2d8>)
 80015e0:	f001 fd6c 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ea:	4864      	ldr	r0, [pc, #400]	; (800177c <MX_GPIO_Init+0x2e0>)
 80015ec:	f001 fd66 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	21c8      	movs	r1, #200	; 0xc8
 80015f4:	4862      	ldr	r0, [pc, #392]	; (8001780 <MX_GPIO_Init+0x2e4>)
 80015f6:	f001 fd61 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80015fa:	2310      	movs	r3, #16
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800160a:	230e      	movs	r3, #14
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001612:	4619      	mov	r1, r3
 8001614:	485b      	ldr	r0, [pc, #364]	; (8001784 <MX_GPIO_Init+0x2e8>)
 8001616:	f001 fba5 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800161a:	2308      	movs	r3, #8
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	4855      	ldr	r0, [pc, #340]	; (8001784 <MX_GPIO_Init+0x2e8>)
 800162e:	f001 fb99 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001632:	2304      	movs	r3, #4
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001642:	2309      	movs	r3, #9
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164a:	4619      	mov	r1, r3
 800164c:	484d      	ldr	r0, [pc, #308]	; (8001784 <MX_GPIO_Init+0x2e8>)
 800164e:	f001 fb89 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001652:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001664:	230b      	movs	r3, #11
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800166c:	4619      	mov	r1, r3
 800166e:	4844      	ldr	r0, [pc, #272]	; (8001780 <MX_GPIO_Init+0x2e4>)
 8001670:	f001 fb78 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001674:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001686:	230c      	movs	r3, #12
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168e:	4619      	mov	r1, r3
 8001690:	483c      	ldr	r0, [pc, #240]	; (8001784 <MX_GPIO_Init+0x2e8>)
 8001692:	f001 fb67 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a8:	2304      	movs	r3, #4
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b0:	4619      	mov	r1, r3
 80016b2:	4835      	ldr	r0, [pc, #212]	; (8001788 <MX_GPIO_Init+0x2ec>)
 80016b4:	f001 fb56 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80016b8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016ca:	230a      	movs	r3, #10
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d2:	4619      	mov	r1, r3
 80016d4:	482c      	ldr	r0, [pc, #176]	; (8001788 <MX_GPIO_Init+0x2ec>)
 80016d6:	f001 fb45 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80016da:	2310      	movs	r3, #16
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ea:	2302      	movs	r3, #2
 80016ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	4619      	mov	r1, r3
 80016f4:	4824      	ldr	r0, [pc, #144]	; (8001788 <MX_GPIO_Init+0x2ec>)
 80016f6:	f001 fb35 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800170a:	2308      	movs	r3, #8
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001712:	4619      	mov	r1, r3
 8001714:	4816      	ldr	r0, [pc, #88]	; (8001770 <MX_GPIO_Init+0x2d4>)
 8001716:	f001 fb25 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800171a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800172c:	230c      	movs	r3, #12
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001734:	4619      	mov	r1, r3
 8001736:	4815      	ldr	r0, [pc, #84]	; (800178c <MX_GPIO_Init+0x2f0>)
 8001738:	f001 fb14 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800173c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800174e:	2301      	movs	r3, #1
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	4619      	mov	r1, r3
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_GPIO_Init+0x2f4>)
 800175a:	f001 fb03 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800175e:	2360      	movs	r3, #96	; 0x60
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	e014      	b.n	8001794 <MX_GPIO_Init+0x2f8>
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40022000 	.word	0x40022000
 8001778:	40022800 	.word	0x40022800
 800177c:	40021c00 	.word	0x40021c00
 8001780:	40021800 	.word	0x40021800
 8001784:	40021000 	.word	0x40021000
 8001788:	40020400 	.word	0x40020400
 800178c:	40020800 	.word	0x40020800
 8001790:	40020000 	.word	0x40020000
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800179a:	230d      	movs	r3, #13
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a2:	4619      	mov	r1, r3
 80017a4:	48bb      	ldr	r0, [pc, #748]	; (8001a94 <MX_GPIO_Init+0x5f8>)
 80017a6:	f001 fadd 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ba:	2307      	movs	r3, #7
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c2:	4619      	mov	r1, r3
 80017c4:	48b4      	ldr	r0, [pc, #720]	; (8001a98 <MX_GPIO_Init+0x5fc>)
 80017c6:	f001 facd 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017da:	230a      	movs	r3, #10
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	48ac      	ldr	r0, [pc, #688]	; (8001a98 <MX_GPIO_Init+0x5fc>)
 80017e6:	f001 fabd 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80017ea:	f248 1333 	movw	r3, #33075	; 0x8133
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fc:	230c      	movs	r3, #12
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001804:	4619      	mov	r1, r3
 8001806:	48a5      	ldr	r0, [pc, #660]	; (8001a9c <MX_GPIO_Init+0x600>)
 8001808:	f001 faac 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800180c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800181e:	230e      	movs	r3, #14
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	489d      	ldr	r0, [pc, #628]	; (8001aa0 <MX_GPIO_Init+0x604>)
 800182a:	f001 fa9b 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001840:	4619      	mov	r1, r3
 8001842:	4897      	ldr	r0, [pc, #604]	; (8001aa0 <MX_GPIO_Init+0x604>)
 8001844:	f001 fa8e 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800184c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	4891      	ldr	r0, [pc, #580]	; (8001aa4 <MX_GPIO_Init+0x608>)
 800185e:	f001 fa81 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001862:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001874:	230c      	movs	r3, #12
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	4619      	mov	r1, r3
 800187e:	4889      	ldr	r0, [pc, #548]	; (8001aa4 <MX_GPIO_Init+0x608>)
 8001880:	f001 fa70 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001884:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001896:	230a      	movs	r3, #10
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	4619      	mov	r1, r3
 80018a0:	4881      	ldr	r0, [pc, #516]	; (8001aa8 <MX_GPIO_Init+0x60c>)
 80018a2:	f001 fa5f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80018a6:	23f0      	movs	r3, #240	; 0xf0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80018b6:	230a      	movs	r3, #10
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	487a      	ldr	r0, [pc, #488]	; (8001aac <MX_GPIO_Init+0x610>)
 80018c2:	f001 fa4f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80018c6:	23f7      	movs	r3, #247	; 0xf7
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018d6:	230e      	movs	r3, #14
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	4873      	ldr	r0, [pc, #460]	; (8001ab0 <MX_GPIO_Init+0x614>)
 80018e2:	f001 fa3f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018f8:	2309      	movs	r3, #9
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	4866      	ldr	r0, [pc, #408]	; (8001a9c <MX_GPIO_Init+0x600>)
 8001904:	f001 fa2e 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800191a:	230a      	movs	r3, #10
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001922:	4619      	mov	r1, r3
 8001924:	485d      	ldr	r0, [pc, #372]	; (8001a9c <MX_GPIO_Init+0x600>)
 8001926:	f001 fa1d 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800192a:	2320      	movs	r3, #32
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193e:	4619      	mov	r1, r3
 8001940:	4858      	ldr	r0, [pc, #352]	; (8001aa4 <MX_GPIO_Init+0x608>)
 8001942:	f001 fa0f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001946:	2308      	movs	r3, #8
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001956:	230d      	movs	r3, #13
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	4850      	ldr	r0, [pc, #320]	; (8001aa4 <MX_GPIO_Init+0x608>)
 8001962:	f001 f9ff 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001966:	f241 030c 	movw	r3, #4108	; 0x100c
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	484b      	ldr	r0, [pc, #300]	; (8001aac <MX_GPIO_Init+0x610>)
 8001980:	f001 f9f0 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198a:	2300      	movs	r3, #0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	4846      	ldr	r0, [pc, #280]	; (8001ab4 <MX_GPIO_Init+0x618>)
 800199a:	f001 f9e3 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800199e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b0:	230c      	movs	r3, #12
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	4619      	mov	r1, r3
 80019ba:	483f      	ldr	r0, [pc, #252]	; (8001ab8 <MX_GPIO_Init+0x61c>)
 80019bc:	f001 f9d2 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019c0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019d2:	230e      	movs	r3, #14
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	4833      	ldr	r0, [pc, #204]	; (8001aac <MX_GPIO_Init+0x610>)
 80019de:	f001 f9c1 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019e2:	2308      	movs	r3, #8
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f6:	4619      	mov	r1, r3
 80019f8:	482d      	ldr	r0, [pc, #180]	; (8001ab0 <MX_GPIO_Init+0x614>)
 80019fa:	f001 f9b3 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80019fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a10:	230d      	movs	r3, #13
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <MX_GPIO_Init+0x600>)
 8001a1c:	f001 f9a2 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a20:	2310      	movs	r3, #16
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <MX_GPIO_Init+0x608>)
 8001a34:	f001 f996 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_GPIO_Init+0x608>)
 8001a54:	f001 f986 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a58:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4813      	ldr	r0, [pc, #76]	; (8001abc <MX_GPIO_Init+0x620>)
 8001a6e:	f001 f979 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a82:	2305      	movs	r3, #5
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_GPIO_Init+0x610>)
 8001a8e:	f001 f969 	bl	8002d64 <HAL_GPIO_Init>
 8001a92:	e015      	b.n	8001ac0 <MX_GPIO_Init+0x624>
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40022400 	.word	0x40022400
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022800 	.word	0x40022800
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40021400 	.word	0x40021400
 8001abc:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	48ae      	ldr	r0, [pc, #696]	; (8001d94 <MX_GPIO_Init+0x8f8>)
 8001ada:	f001 f943 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ade:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001af0:	230d      	movs	r3, #13
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	48a6      	ldr	r0, [pc, #664]	; (8001d94 <MX_GPIO_Init+0x8f8>)
 8001afc:	f001 f932 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b00:	2301      	movs	r3, #1
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b10:	2302      	movs	r3, #2
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b18:	4619      	mov	r1, r3
 8001b1a:	489f      	ldr	r0, [pc, #636]	; (8001d98 <MX_GPIO_Init+0x8fc>)
 8001b1c:	f001 f922 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b32:	2307      	movs	r3, #7
 8001b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4897      	ldr	r0, [pc, #604]	; (8001d9c <MX_GPIO_Init+0x900>)
 8001b3e:	f001 f911 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b54:	2301      	movs	r3, #1
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	488f      	ldr	r0, [pc, #572]	; (8001d9c <MX_GPIO_Init+0x900>)
 8001b60:	f001 f900 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b6a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4887      	ldr	r0, [pc, #540]	; (8001d98 <MX_GPIO_Init+0x8fc>)
 8001b7c:	f001 f8f2 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b80:	2310      	movs	r3, #16
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b90:	230a      	movs	r3, #10
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	487e      	ldr	r0, [pc, #504]	; (8001d94 <MX_GPIO_Init+0x8f8>)
 8001b9c:	f001 f8e2 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001ba0:	2328      	movs	r3, #40	; 0x28
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4876      	ldr	r0, [pc, #472]	; (8001d94 <MX_GPIO_Init+0x8f8>)
 8001bbc:	f001 f8d2 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001bc0:	23c8      	movs	r3, #200	; 0xc8
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4872      	ldr	r0, [pc, #456]	; (8001da0 <MX_GPIO_Init+0x904>)
 8001bd8:	f001 f8c4 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001bdc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	486c      	ldr	r0, [pc, #432]	; (8001da4 <MX_GPIO_Init+0x908>)
 8001bf2:	f001 f8b7 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c02:	2303      	movs	r3, #3
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c06:	230c      	movs	r3, #12
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4865      	ldr	r0, [pc, #404]	; (8001da8 <MX_GPIO_Init+0x90c>)
 8001c12:	f001 f8a7 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c16:	2305      	movs	r3, #5
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c26:	230a      	movs	r3, #10
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	485d      	ldr	r0, [pc, #372]	; (8001da8 <MX_GPIO_Init+0x90c>)
 8001c32:	f001 f897 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c36:	2332      	movs	r3, #50	; 0x32
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c46:	230b      	movs	r3, #11
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4855      	ldr	r0, [pc, #340]	; (8001da8 <MX_GPIO_Init+0x90c>)
 8001c52:	f001 f887 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c56:	2304      	movs	r3, #4
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c66:	2309      	movs	r3, #9
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c6e:	4619      	mov	r1, r3
 8001c70:	484e      	ldr	r0, [pc, #312]	; (8001dac <MX_GPIO_Init+0x910>)
 8001c72:	f001 f877 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001c76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c88:	2309      	movs	r3, #9
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4847      	ldr	r0, [pc, #284]	; (8001db0 <MX_GPIO_Init+0x914>)
 8001c94:	f001 f866 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca8:	4619      	mov	r1, r3
 8001caa:	483d      	ldr	r0, [pc, #244]	; (8001da0 <MX_GPIO_Init+0x904>)
 8001cac:	f001 f85a 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cb0:	2386      	movs	r3, #134	; 0x86
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cc0:	230b      	movs	r3, #11
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4834      	ldr	r0, [pc, #208]	; (8001d9c <MX_GPIO_Init+0x900>)
 8001ccc:	f001 f84a 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	482e      	ldr	r0, [pc, #184]	; (8001d9c <MX_GPIO_Init+0x900>)
 8001ce4:	f001 f83e 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ce8:	2350      	movs	r3, #80	; 0x50
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cf8:	230d      	movs	r3, #13
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d00:	4619      	mov	r1, r3
 8001d02:	4826      	ldr	r0, [pc, #152]	; (8001d9c <MX_GPIO_Init+0x900>)
 8001d04:	f001 f82e 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001d08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0e:	2312      	movs	r3, #18
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	481b      	ldr	r0, [pc, #108]	; (8001d94 <MX_GPIO_Init+0x8f8>)
 8001d26:	f001 f81d 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d2a:	2328      	movs	r3, #40	; 0x28
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4815      	ldr	r0, [pc, #84]	; (8001d9c <MX_GPIO_Init+0x900>)
 8001d46:	f001 f80d 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d62:	4619      	mov	r1, r3
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <MX_GPIO_Init+0x8f8>)
 8001d66:	f000 fffd 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001d6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_GPIO_Init+0x910>)
 8001d88:	f000 ffec 	bl	8002d64 <HAL_GPIO_Init>

}
 8001d8c:	bf00      	nop
 8001d8e:	3740      	adds	r7, #64	; 0x40
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40021800 	.word	0x40021800
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020c00 	.word	0x40020c00

08001db4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	if(huart == &huart7) {
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a35      	ldr	r2, [pc, #212]	; (8001e94 <HAL_UART_RxCpltCallback+0xe0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 8246 	bne.w	8002252 <HAL_UART_RxCpltCallback+0x49e>
		//$ message start
		if(buff[0]=='$'){
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_UART_RxCpltCallback+0xe4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b24      	cmp	r3, #36	; 0x24
 8001dcc:	d106      	bne.n	8001ddc <HAL_UART_RxCpltCallback+0x28>
			count=0;
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_UART_RxCpltCallback+0xe8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001dd4:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_UART_RxCpltCallback+0xec>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	e00f      	b.n	8001dfc <HAL_UART_RxCpltCallback+0x48>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_UART_RxCpltCallback+0xe8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10b      	bne.n	8001dfc <HAL_UART_RxCpltCallback+0x48>
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_UART_RxCpltCallback+0xe4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b47      	cmp	r3, #71	; 0x47
 8001dea:	d007      	beq.n	8001dfc <HAL_UART_RxCpltCallback+0x48>
			count=0;
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_UART_RxCpltCallback+0xe8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_UART_RxCpltCallback+0xf0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <HAL_UART_RxCpltCallback+0xf0>)
 8001dfa:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_UART_RxCpltCallback+0xe4>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <HAL_UART_RxCpltCallback+0xe8>)
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 faec 	bl	80023e4 <calc_crc>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]
		if(res){
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
		}

		//RTC READ
		rtc_read();
 8001e10:	f000 fb44 	bl	800249c <rtc_read>
		//printf("rtc_read=%llu\t",rtc_read());
		//comparison RTC&CRC
		//Time_calc.tm_wday = atoi(gps.);
		Time_calc.tm_mon = atoi(gps.month);//-1 do January==0 month
 8001e14:	4824      	ldr	r0, [pc, #144]	; (8001ea8 <HAL_UART_RxCpltCallback+0xf4>)
 8001e16:	f004 fc7b 	bl	8006710 <atoi>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e1e:	6113      	str	r3, [r2, #16]
		Time_calc.tm_mday = atoi(gps.day);
 8001e20:	4823      	ldr	r0, [pc, #140]	; (8001eb0 <HAL_UART_RxCpltCallback+0xfc>)
 8001e22:	f004 fc75 	bl	8006710 <atoi>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e2a:	60d3      	str	r3, [r2, #12]
		Time_calc.tm_year = atoi(gps.year) + 100;
 8001e2c:	4821      	ldr	r0, [pc, #132]	; (8001eb4 <HAL_UART_RxCpltCallback+0x100>)
 8001e2e:	f004 fc6f 	bl	8006710 <atoi>
 8001e32:	4603      	mov	r3, r0
 8001e34:	3364      	adds	r3, #100	; 0x64
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e38:	6153      	str	r3, [r2, #20]
		Time_calc.tm_hour = atoi(gps.hours);
 8001e3a:	481f      	ldr	r0, [pc, #124]	; (8001eb8 <HAL_UART_RxCpltCallback+0x104>)
 8001e3c:	f004 fc68 	bl	8006710 <atoi>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e44:	6093      	str	r3, [r2, #8]
		Time_calc.tm_min = atoi(gps.minuttes);
 8001e46:	481d      	ldr	r0, [pc, #116]	; (8001ebc <HAL_UART_RxCpltCallback+0x108>)
 8001e48:	f004 fc62 	bl	8006710 <atoi>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e50:	6053      	str	r3, [r2, #4]
		Time_calc.tm_sec = atoi(gps.seconds);
 8001e52:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <HAL_UART_RxCpltCallback+0x10c>)
 8001e54:	f004 fc5c 	bl	8006710 <atoi>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e5c:	6013      	str	r3, [r2, #0]
		G = mktime(&Time_calc);
 8001e5e:	4813      	ldr	r0, [pc, #76]	; (8001eac <HAL_UART_RxCpltCallback+0xf8>)
 8001e60:	f004 fd64 	bl	800692c <mktime>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_UART_RxCpltCallback+0x110>)
 8001e6a:	e9c1 2300 	strd	r2, r3, [r1]
		printf("Time_calc=%llu\n",G);
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_RxCpltCallback+0x110>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	4814      	ldr	r0, [pc, #80]	; (8001ec8 <HAL_UART_RxCpltCallback+0x114>)
 8001e76:	f004 feff 	bl	8006c78 <printf>


		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_UART_RxCpltCallback+0xe8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d126      	bne.n	8001ed0 <HAL_UART_RxCpltCallback+0x11c>
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_UART_RxCpltCallback+0xe4>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b5a      	cmp	r3, #90	; 0x5a
 8001e88:	d122      	bne.n	8001ed0 <HAL_UART_RxCpltCallback+0x11c>
			Tipe_Mes=1;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_UART_RxCpltCallback+0x118>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e029      	b.n	8001ee6 <HAL_UART_RxCpltCallback+0x132>
 8001e92:	bf00      	nop
 8001e94:	20000b04 	.word	0x20000b04
 8001e98:	20000a8c 	.word	0x20000a8c
 8001e9c:	20000a74 	.word	0x20000a74
 8001ea0:	20000a60 	.word	0x20000a60
 8001ea4:	20000a4c 	.word	0x20000a4c
 8001ea8:	20000af2 	.word	0x20000af2
 8001eac:	20000c30 	.word	0x20000c30
 8001eb0:	20000af0 	.word	0x20000af0
 8001eb4:	20000af4 	.word	0x20000af4
 8001eb8:	20000af8 	.word	0x20000af8
 8001ebc:	20000afa 	.word	0x20000afa
 8001ec0:	20000afc 	.word	0x20000afc
 8001ec4:	20000a58 	.word	0x20000a58
 8001ec8:	0800e30c 	.word	0x0800e30c
 8001ecc:	20000a50 	.word	0x20000a50
		}
		else if(count==3&&buff[0]=='R'){
 8001ed0:	4b91      	ldr	r3, [pc, #580]	; (8002118 <HAL_UART_RxCpltCallback+0x364>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x132>
 8001ed8:	4b90      	ldr	r3, [pc, #576]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b52      	cmp	r3, #82	; 0x52
 8001ede:	d102      	bne.n	8001ee6 <HAL_UART_RxCpltCallback+0x132>
			Tipe_Mes=2;
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <HAL_UART_RxCpltCallback+0x36c>)
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_UART_RxCpltCallback+0x36c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 80cc 	bne.w	8002088 <HAL_UART_RxCpltCallback+0x2d4>

			if(count==6&&buff[0]!=','){
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_UART_RxCpltCallback+0x364>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d10b      	bne.n	8001f10 <HAL_UART_RxCpltCallback+0x15c>
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b2c      	cmp	r3, #44	; 0x2c
 8001efe:	d007      	beq.n	8001f10 <HAL_UART_RxCpltCallback+0x15c>
				count=0;
 8001f00:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_UART_RxCpltCallback+0x364>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8001f06:	4b87      	ldr	r3, [pc, #540]	; (8002124 <HAL_UART_RxCpltCallback+0x370>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a85      	ldr	r2, [pc, #532]	; (8002124 <HAL_UART_RxCpltCallback+0x370>)
 8001f0e:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8001f10:	4b82      	ldr	r3, [pc, #520]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b2c      	cmp	r3, #44	; 0x2c
 8001f16:	d107      	bne.n	8001f28 <HAL_UART_RxCpltCallback+0x174>
				zpt++;
 8001f18:	4b83      	ldr	r3, [pc, #524]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a82      	ldr	r2, [pc, #520]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001f20:	6013      	str	r3, [r2, #0]
				ind=0;
 8001f22:	4b82      	ldr	r3, [pc, #520]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8001f28:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10e      	bne.n	8001f4e <HAL_UART_RxCpltCallback+0x19a>
 8001f30:	4b7a      	ldr	r3, [pc, #488]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b2c      	cmp	r3, #44	; 0x2c
 8001f36:	d00a      	beq.n	8001f4e <HAL_UART_RxCpltCallback+0x19a>
				time_buff[ind]=buff[0];
 8001f38:	4b7c      	ldr	r3, [pc, #496]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a77      	ldr	r2, [pc, #476]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001f3e:	7811      	ldrb	r1, [r2, #0]
 8001f40:	4a7b      	ldr	r2, [pc, #492]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f42:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001f44:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	4a78      	ldr	r2, [pc, #480]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001f4c:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8001f4e:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d127      	bne.n	8001fa6 <HAL_UART_RxCpltCallback+0x1f2>
 8001f56:	4b71      	ldr	r3, [pc, #452]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f5c:	d123      	bne.n	8001fa6 <HAL_UART_RxCpltCallback+0x1f2>
				gps.hours[0]=time_buff[0];
 8001f5e:	4b74      	ldr	r3, [pc, #464]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b74      	ldr	r3, [pc, #464]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f64:	721a      	strb	r2, [r3, #8]
				gps.hours[1]=time_buff[1];
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f68:	785a      	ldrb	r2, [r3, #1]
 8001f6a:	4b72      	ldr	r3, [pc, #456]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f6c:	725a      	strb	r2, [r3, #9]
				gps.minuttes[0]=time_buff[2];
 8001f6e:	4b70      	ldr	r3, [pc, #448]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f70:	789a      	ldrb	r2, [r3, #2]
 8001f72:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f74:	729a      	strb	r2, [r3, #10]
				gps.minuttes[1]=time_buff[3];
 8001f76:	4b6e      	ldr	r3, [pc, #440]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f78:	78da      	ldrb	r2, [r3, #3]
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f7c:	72da      	strb	r2, [r3, #11]
				gps.seconds[0]=time_buff[4];
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f80:	791a      	ldrb	r2, [r3, #4]
 8001f82:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f84:	731a      	strb	r2, [r3, #12]
				gps.seconds[1]=time_buff[5];
 8001f86:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f88:	795a      	ldrb	r2, [r3, #5]
 8001f8a:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f8c:	735a      	strb	r2, [r3, #13]
				gps.seconds[2]=time_buff[6];
 8001f8e:	4b68      	ldr	r3, [pc, #416]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f90:	799a      	ldrb	r2, [r3, #6]
 8001f92:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f94:	739a      	strb	r2, [r3, #14]
				gps.seconds[3]=time_buff[7];
 8001f96:	4b66      	ldr	r3, [pc, #408]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001f98:	79da      	ldrb	r2, [r3, #7]
 8001f9a:	4b66      	ldr	r3, [pc, #408]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001f9c:	73da      	strb	r2, [r3, #15]
				gps.seconds[4]=time_buff[8];
 8001f9e:	4b64      	ldr	r3, [pc, #400]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001fa0:	7a1a      	ldrb	r2, [r3, #8]
 8001fa2:	4b64      	ldr	r3, [pc, #400]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001fa4:	741a      	strb	r2, [r3, #16]
			}
			if(zpt==2&&buff[0]!=','){
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d10e      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0x218>
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b2c      	cmp	r3, #44	; 0x2c
 8001fb4:	d00a      	beq.n	8001fcc <HAL_UART_RxCpltCallback+0x218>

				time_buff[ind]=buff[0];
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001fbc:	7811      	ldrb	r1, [r2, #0]
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001fc0:	54d1      	strb	r1, [r2, r3]
				ind++;
 8001fc2:	4b5a      	ldr	r3, [pc, #360]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001fca:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8001fcc:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d10b      	bne.n	8001fec <HAL_UART_RxCpltCallback+0x238>
 8001fd4:	4b51      	ldr	r3, [pc, #324]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b2c      	cmp	r3, #44	; 0x2c
 8001fda:	d107      	bne.n	8001fec <HAL_UART_RxCpltCallback+0x238>
				gps.day[0]=time_buff[0];
 8001fdc:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001fde:	781a      	ldrb	r2, [r3, #0]
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001fe2:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8001fe4:	4b52      	ldr	r3, [pc, #328]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8001fe6:	785a      	ldrb	r2, [r3, #1]
 8001fe8:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8001fea:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 8001fec:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d10e      	bne.n	8002012 <HAL_UART_RxCpltCallback+0x25e>
 8001ff4:	4b49      	ldr	r3, [pc, #292]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b2c      	cmp	r3, #44	; 0x2c
 8001ffa:	d00a      	beq.n	8002012 <HAL_UART_RxCpltCallback+0x25e>

				time_buff[ind]=buff[0];
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a46      	ldr	r2, [pc, #280]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8002002:	7811      	ldrb	r1, [r2, #0]
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8002006:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002008:	4b48      	ldr	r3, [pc, #288]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a47      	ldr	r2, [pc, #284]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8002010:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d10b      	bne.n	8002032 <HAL_UART_RxCpltCallback+0x27e>
 800201a:	4b40      	ldr	r3, [pc, #256]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b2c      	cmp	r3, #44	; 0x2c
 8002020:	d107      	bne.n	8002032 <HAL_UART_RxCpltCallback+0x27e>
				gps.month[0]=time_buff[0];
 8002022:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8002028:	709a      	strb	r2, [r3, #2]
				gps.month[1]=time_buff[1];
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 800202c:	785a      	ldrb	r2, [r3, #1]
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8002030:	70da      	strb	r2, [r3, #3]
			}
			if(zpt==4&&buff[0]!=','){
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b04      	cmp	r3, #4
 8002038:	d10e      	bne.n	8002058 <HAL_UART_RxCpltCallback+0x2a4>
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b2c      	cmp	r3, #44	; 0x2c
 8002040:	d00a      	beq.n	8002058 <HAL_UART_RxCpltCallback+0x2a4>

				time_buff[ind]=buff[0];
 8002042:	4b3a      	ldr	r3, [pc, #232]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a35      	ldr	r2, [pc, #212]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8002048:	7811      	ldrb	r1, [r2, #0]
 800204a:	4a39      	ldr	r2, [pc, #228]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 800204c:	54d1      	strb	r1, [r2, r3]
				ind++;
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	4a35      	ldr	r2, [pc, #212]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 8002056:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8002058:	4b33      	ldr	r3, [pc, #204]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d113      	bne.n	8002088 <HAL_UART_RxCpltCallback+0x2d4>
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b2c      	cmp	r3, #44	; 0x2c
 8002066:	d10f      	bne.n	8002088 <HAL_UART_RxCpltCallback+0x2d4>
				gps.year[0]=time_buff[0];
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 800206e:	711a      	strb	r2, [r3, #4]
				gps.year[1]=time_buff[1];
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8002072:	785a      	ldrb	r2, [r3, #1]
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8002076:	715a      	strb	r2, [r3, #5]
				gps.year[2]=time_buff[2];
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 800207a:	789a      	ldrb	r2, [r3, #2]
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 800207e:	719a      	strb	r2, [r3, #6]
				gps.year[3]=time_buff[3];
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8002082:	78da      	ldrb	r2, [r3, #3]
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8002086:	71da      	strb	r2, [r3, #7]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_UART_RxCpltCallback+0x36c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b02      	cmp	r3, #2
 800208e:	f040 80bf 	bne.w	8002210 <HAL_UART_RxCpltCallback+0x45c>

			if(count==6&&buff[0]!=','){
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_UART_RxCpltCallback+0x364>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d10b      	bne.n	80020b2 <HAL_UART_RxCpltCallback+0x2fe>
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b2c      	cmp	r3, #44	; 0x2c
 80020a0:	d007      	beq.n	80020b2 <HAL_UART_RxCpltCallback+0x2fe>
				count=0;
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_UART_RxCpltCallback+0x364>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
				ERRORS++;
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <HAL_UART_RxCpltCallback+0x370>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_UART_RxCpltCallback+0x370>)
 80020b0:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b2c      	cmp	r3, #44	; 0x2c
 80020b8:	d107      	bne.n	80020ca <HAL_UART_RxCpltCallback+0x316>
				zpt++;
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 80020c2:	6013      	str	r3, [r2, #0]
				ind=0;
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d10e      	bne.n	80020f0 <HAL_UART_RxCpltCallback+0x33c>
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b2c      	cmp	r3, #44	; 0x2c
 80020d8:	d00a      	beq.n	80020f0 <HAL_UART_RxCpltCallback+0x33c>

				time_buff[ind]=buff[0];
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 80020e0:	7811      	ldrb	r1, [r2, #0]
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 80020e4:	54d1      	strb	r1, [r2, r3]
				ind++;
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_UART_RxCpltCallback+0x378>)
 80020ee:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_UART_RxCpltCallback+0x374>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d139      	bne.n	800216c <HAL_UART_RxCpltCallback+0x3b8>
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <HAL_UART_RxCpltCallback+0x368>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b2c      	cmp	r3, #44	; 0x2c
 80020fe:	d135      	bne.n	800216c <HAL_UART_RxCpltCallback+0x3b8>
				gps.hours[0]=time_buff[0];
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 8002106:	721a      	strb	r2, [r3, #8]
				gps.hours[1]=time_buff[1];
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 800210a:	785a      	ldrb	r2, [r3, #1]
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_UART_RxCpltCallback+0x380>)
 800210e:	725a      	strb	r2, [r3, #9]
				gps.minuttes[0]=time_buff[2];
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <HAL_UART_RxCpltCallback+0x37c>)
 8002112:	789a      	ldrb	r2, [r3, #2]
 8002114:	e010      	b.n	8002138 <HAL_UART_RxCpltCallback+0x384>
 8002116:	bf00      	nop
 8002118:	20000a74 	.word	0x20000a74
 800211c:	20000a8c 	.word	0x20000a8c
 8002120:	20000a50 	.word	0x20000a50
 8002124:	20000a4c 	.word	0x20000a4c
 8002128:	20000a60 	.word	0x20000a60
 800212c:	20000a6c 	.word	0x20000a6c
 8002130:	20000a7c 	.word	0x20000a7c
 8002134:	20000af0 	.word	0x20000af0
 8002138:	4b48      	ldr	r3, [pc, #288]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 800213a:	729a      	strb	r2, [r3, #10]
				gps.minuttes[1]=time_buff[3];
 800213c:	4b48      	ldr	r3, [pc, #288]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 800213e:	78da      	ldrb	r2, [r3, #3]
 8002140:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 8002142:	72da      	strb	r2, [r3, #11]
				gps.seconds[0]=time_buff[4];
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 8002146:	791a      	ldrb	r2, [r3, #4]
 8002148:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 800214a:	731a      	strb	r2, [r3, #12]
				gps.seconds[1]=time_buff[5];
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 800214e:	795a      	ldrb	r2, [r3, #5]
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 8002152:	735a      	strb	r2, [r3, #13]
				gps.seconds[2]=time_buff[6];
 8002154:	4b42      	ldr	r3, [pc, #264]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 8002156:	799a      	ldrb	r2, [r3, #6]
 8002158:	4b40      	ldr	r3, [pc, #256]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 800215a:	739a      	strb	r2, [r3, #14]
				gps.seconds[3]=time_buff[7];
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 800215e:	79da      	ldrb	r2, [r3, #7]
 8002160:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 8002162:	73da      	strb	r2, [r3, #15]
				gps.seconds[4]=time_buff[8];
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 8002166:	7a1a      	ldrb	r2, [r3, #8]
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 800216a:	741a      	strb	r2, [r3, #16]
			}
			if(zpt==2&&buff[0]!=','){
 800216c:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_UART_RxCpltCallback+0x4b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d10e      	bne.n	8002192 <HAL_UART_RxCpltCallback+0x3de>
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b2c      	cmp	r3, #44	; 0x2c
 800217a:	d00a      	beq.n	8002192 <HAL_UART_RxCpltCallback+0x3de>

				time_buff[ind]=buff[0];
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_UART_RxCpltCallback+0x4b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a39      	ldr	r2, [pc, #228]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 8002182:	7811      	ldrb	r1, [r2, #0]
 8002184:	4a36      	ldr	r2, [pc, #216]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 8002186:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <HAL_UART_RxCpltCallback+0x4b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a37      	ldr	r2, [pc, #220]	; (800226c <HAL_UART_RxCpltCallback+0x4b8>)
 8002190:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_UART_RxCpltCallback+0x4b0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d107      	bne.n	80021aa <HAL_UART_RxCpltCallback+0x3f6>
 800219a:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b2c      	cmp	r3, #44	; 0x2c
 80021a0:	d103      	bne.n	80021aa <HAL_UART_RxCpltCallback+0x3f6>
				gps.sinc=time_buff[0];
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 80021a8:	749a      	strb	r2, [r3, #18]
			}

			if(zpt==9&&buff[0]!=','){
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_UART_RxCpltCallback+0x4b0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	d10e      	bne.n	80021d0 <HAL_UART_RxCpltCallback+0x41c>
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b2c      	cmp	r3, #44	; 0x2c
 80021b8:	d00a      	beq.n	80021d0 <HAL_UART_RxCpltCallback+0x41c>

				time_buff[ind]=buff[0];
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_UART_RxCpltCallback+0x4b8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 80021c0:	7811      	ldrb	r1, [r2, #0]
 80021c2:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 80021c4:	54d1      	strb	r1, [r2, r3]
				ind++;
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_UART_RxCpltCallback+0x4b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <HAL_UART_RxCpltCallback+0x4b8>)
 80021ce:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_UART_RxCpltCallback+0x4b0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b0a      	cmp	r3, #10
 80021d6:	d11b      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x45c>
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b2c      	cmp	r3, #44	; 0x2c
 80021de:	d117      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x45c>
				gps.day[0]=time_buff[0];
 80021e0:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 80021e6:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 80021ea:	785a      	ldrb	r2, [r3, #1]
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 80021ee:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 80021f2:	789a      	ldrb	r2, [r3, #2]
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 80021f6:	709a      	strb	r2, [r3, #2]
				gps.month[1]=time_buff[3];
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 80021fa:	78da      	ldrb	r2, [r3, #3]
 80021fc:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 80021fe:	70da      	strb	r2, [r3, #3]
				gps.year[0]=time_buff[4];
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 8002202:	791a      	ldrb	r2, [r3, #4]
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 8002206:	711a      	strb	r2, [r3, #4]
				gps.year[1]=time_buff[5];
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_UART_RxCpltCallback+0x4ac>)
 800220a:	795a      	ldrb	r2, [r3, #5]
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 800220e:	715a      	strb	r2, [r3, #5]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_UART_RxCpltCallback+0x4bc>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_UART_RxCpltCallback+0x4c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_UART_RxCpltCallback+0x480>

			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 800221e:	2201      	movs	r2, #1
 8002220:	4911      	ldr	r1, [pc, #68]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <HAL_UART_RxCpltCallback+0x4c4>)
 8002224:	f002 ff58 	bl	80050d8 <HAL_UART_Transmit_IT>

			dataReceived=0;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_UART_RxCpltCallback+0x4bc>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_UART_RxCpltCallback+0x4c0>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 8002234:	2201      	movs	r2, #1
 8002236:	490c      	ldr	r1, [pc, #48]	; (8002268 <HAL_UART_RxCpltCallback+0x4b4>)
 8002238:	4810      	ldr	r0, [pc, #64]	; (800227c <HAL_UART_RxCpltCallback+0x4c8>)
 800223a:	f002 ffbb 	bl	80051b4 <HAL_UART_Receive_IT>
		gps.errors=ERRORS;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_UART_RxCpltCallback+0x4cc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_UART_RxCpltCallback+0x4a8>)
 8002246:	745a      	strb	r2, [r3, #17]
		count++;
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_UART_RxCpltCallback+0x4d0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_UART_RxCpltCallback+0x4d0>)
 8002250:	6013      	str	r3, [r2, #0]
	}
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000af0 	.word	0x20000af0
 8002260:	20000a7c 	.word	0x20000a7c
 8002264:	20000a60 	.word	0x20000a60
 8002268:	20000a8c 	.word	0x20000a8c
 800226c:	20000a6c 	.word	0x20000a6c
 8002270:	20000000 	.word	0x20000000
 8002274:	20000004 	.word	0x20000004
 8002278:	20000bac 	.word	0x20000bac
 800227c:	20000b04 	.word	0x20000b04
 8002280:	20000a4c 	.word	0x20000a4c
 8002284:	20000a74 	.word	0x20000a74

08002288 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

	if(huart == &huart6) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_UART_TxCpltCallback+0x3c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d111      	bne.n	80022bc <HAL_UART_TxCpltCallback+0x34>

		dataTransmitted=1;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_UART_TxCpltCallback+0x40>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_UART_TxCpltCallback+0x44>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_UART_TxCpltCallback+0x34>
			HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
 80022a6:	2201      	movs	r2, #1
 80022a8:	4909      	ldr	r1, [pc, #36]	; (80022d0 <HAL_UART_TxCpltCallback+0x48>)
 80022aa:	4806      	ldr	r0, [pc, #24]	; (80022c4 <HAL_UART_TxCpltCallback+0x3c>)
 80022ac:	f002 ff14 	bl	80050d8 <HAL_UART_Transmit_IT>
			dataReceived=0;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_UART_TxCpltCallback+0x44>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_UART_TxCpltCallback+0x40>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000bac 	.word	0x20000bac
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000a8c 	.word	0x20000a8c
 80022d4:	00000000 	.word	0x00000000

080022d8 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 80022d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
    dec = 0;
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <Hex_to_dec+0x108>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7fd ff8f 	bl	8000210 <strlen>
 80022f2:	4603      	mov	r3, r0
 80022f4:	3b01      	subs	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e060      	b.n	80023bc <Hex_to_dec+0xe4>
        switch (hex[i]) {
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3b41      	subs	r3, #65	; 0x41
 8002304:	2b05      	cmp	r3, #5
 8002306:	d821      	bhi.n	800234c <Hex_to_dec+0x74>
 8002308:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <Hex_to_dec+0x38>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	08002329 	.word	0x08002329
 8002314:	0800232f 	.word	0x0800232f
 8002318:	08002335 	.word	0x08002335
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002341 	.word	0x08002341
 8002324:	08002347 	.word	0x08002347
        case 'A':
            dig = 10;
 8002328:	230a      	movs	r3, #10
 800232a:	613b      	str	r3, [r7, #16]
            break;
 800232c:	e014      	b.n	8002358 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 800232e:	230b      	movs	r3, #11
 8002330:	613b      	str	r3, [r7, #16]
            break;
 8002332:	e011      	b.n	8002358 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 8002334:	230c      	movs	r3, #12
 8002336:	613b      	str	r3, [r7, #16]
            break;
 8002338:	e00e      	b.n	8002358 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 800233a:	230d      	movs	r3, #13
 800233c:	613b      	str	r3, [r7, #16]
            break;
 800233e:	e00b      	b.n	8002358 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002340:	230e      	movs	r3, #14
 8002342:	613b      	str	r3, [r7, #16]
            break;
 8002344:	e008      	b.n	8002358 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 8002346:	230f      	movs	r3, #15
 8002348:	613b      	str	r3, [r7, #16]
            break;
 800234a:	e005      	b.n	8002358 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3b30      	subs	r3, #48	; 0x30
 8002356:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <Hex_to_dec+0x108>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f90b 	bl	8000578 <__aeabi_i2d>
 8002362:	4604      	mov	r4, r0
 8002364:	460d      	mov	r5, r1
 8002366:	6938      	ldr	r0, [r7, #16]
 8002368:	f7fe f906 	bl	8000578 <__aeabi_i2d>
 800236c:	4680      	mov	r8, r0
 800236e:	4689      	mov	r9, r1
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f7fe f901 	bl	8000578 <__aeabi_i2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	ec43 2b11 	vmov	d1, r2, r3
 800237e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80023d8 <Hex_to_dec+0x100>
 8002382:	f00a ff9d 	bl	800d2c0 <pow>
 8002386:	ec53 2b10 	vmov	r2, r3, d0
 800238a:	4640      	mov	r0, r8
 800238c:	4649      	mov	r1, r9
 800238e:	f7fe f95d 	bl	800064c <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7fd ffa1 	bl	80002e0 <__adddf3>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fc01 	bl	8000bac <__aeabi_d2iz>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <Hex_to_dec+0x108>)
 80023ae:	6013      	str	r3, [r2, #0]
        cont++;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da9b      	bge.n	80022fa <Hex_to_dec+0x22>
    }
    return dec;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <Hex_to_dec+0x108>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b2db      	uxtb	r3, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023d2:	bf00      	nop
 80023d4:	f3af 8000 	nop.w
 80023d8:	00000000 	.word	0x00000000
 80023dc:	40300000 	.word	0x40300000
 80023e0:	20000b88 	.word	0x20000b88

080023e4 <calc_crc>:


char calc_crc(char c,int cnt){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	2b2a      	cmp	r3, #42	; 0x2a
 80023f4:	d108      	bne.n	8002408 <calc_crc+0x24>
		start_crc=0;
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <calc_crc+0xa0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <calc_crc+0xa4>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
		z=0;
 8002402:	4b22      	ldr	r3, [pc, #136]	; (800248c <calc_crc+0xa8>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 8002408:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <calc_crc+0xa0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <calc_crc+0x38>
		crc^=c;
 8002410:	79fa      	ldrb	r2, [r7, #7]
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <calc_crc+0xac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4053      	eors	r3, r2
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <calc_crc+0xac>)
 800241a:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <calc_crc+0xa4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d110      	bne.n	8002446 <calc_crc+0x62>
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b2a      	cmp	r3, #42	; 0x2a
 8002428:	d00d      	beq.n	8002446 <calc_crc+0x62>
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <calc_crc+0xa8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	dc09      	bgt.n	8002446 <calc_crc+0x62>
		crc_buff[z]=c;
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <calc_crc+0xa8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4917      	ldr	r1, [pc, #92]	; (8002494 <calc_crc+0xb0>)
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	54ca      	strb	r2, [r1, r3]
		z++;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <calc_crc+0xa8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <calc_crc+0xa8>)
 8002444:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b0a      	cmp	r3, #10
 800244a:	d10a      	bne.n	8002462 <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 800244c:	4811      	ldr	r0, [pc, #68]	; (8002494 <calc_crc+0xb0>)
 800244e:	f7ff ff43 	bl	80022d8 <Hex_to_dec>
		if(crc==dec){
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <calc_crc+0xac>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <calc_crc+0xb4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d101      	bne.n	8002462 <calc_crc+0x7e>
			//Test++;
			return 1;
 800245e:	2301      	movs	r3, #1
 8002460:	e00c      	b.n	800247c <calc_crc+0x98>
		}
	}
	if(cnt==0){
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d108      	bne.n	800247a <calc_crc+0x96>
		start_crc=1;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <calc_crc+0xa0>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <calc_crc+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
		crc=0;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <calc_crc+0xac>)
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000a64 	.word	0x20000a64
 8002488:	20000a78 	.word	0x20000a78
 800248c:	20000a68 	.word	0x20000a68
 8002490:	20000a70 	.word	0x20000a70
 8002494:	20000a88 	.word	0x20000a88
 8002498:	20000b88 	.word	0x20000b88

0800249c <rtc_read>:

time_t rtc_read(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b092      	sub	sp, #72	; 0x48
 80024a0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <rtc_read+0x70>)
 80024a4:	4a1a      	ldr	r2, [pc, #104]	; (8002510 <rtc_read+0x74>)
 80024a6:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	2200      	movs	r2, #0
 80024ae:	4619      	mov	r1, r3
 80024b0:	4816      	ldr	r0, [pc, #88]	; (800250c <rtc_read+0x70>)
 80024b2:	f002 f869 	bl	8004588 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80024b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	4813      	ldr	r0, [pc, #76]	; (800250c <rtc_read+0x70>)
 80024c0:	f002 f968 	bl	8004794 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	timeinfo.tm_wday = dateStruct.WeekDay;
 80024c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024c8:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 80024ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80024ce:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 80024d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80024d4:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 80024d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024da:	3364      	adds	r3, #100	; 0x64
 80024dc:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 80024de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024e2:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 80024e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024e8:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 80024ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024ee:	603b      	str	r3, [r7, #0]
	//printf("tm_year=%d\t gps_year=%c\n",timeinfo.tm_year,gps.year[0]);
	// Convert to timestamp
	time_t t = mktime(&timeinfo);
 80024f0:	463b      	mov	r3, r7
 80024f2:	4618      	mov	r0, r3
 80024f4:	f004 fa1a 	bl	800692c <mktime>
 80024f8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

	return t;
 80024fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	3748      	adds	r7, #72	; 0x48
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000b8c 	.word	0x20000b8c
 8002510:	40002800 	.word	0x40002800

08002514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002526:	f000 fa65 	bl	80029f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40001000 	.word	0x40001000

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002540:	e7fe      	b.n	8002540 <Error_Handler+0x8>
	...

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_MspInit+0x44>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <HAL_MspInit+0x44>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_MspInit+0x44>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_MspInit+0x44>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_MspInit+0x44>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_MspInit+0x44>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_RTC_MspInit+0x2c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d105      	bne.n	80025aa <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_RTC_MspInit+0x30>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_RTC_MspInit+0x30>)
 80025a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40002800 	.word	0x40002800
 80025bc:	40023800 	.word	0x40023800

080025c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a36      	ldr	r2, [pc, #216]	; (80026b8 <HAL_UART_MspInit+0xf8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d130      	bne.n	8002644 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80025e2:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_UART_MspInit+0xfc>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a35      	ldr	r2, [pc, #212]	; (80026bc <HAL_UART_MspInit+0xfc>)
 80025e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_UART_MspInit+0xfc>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_UART_MspInit+0xfc>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_UART_MspInit+0xfc>)
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_UART_MspInit+0xfc>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002612:	23c0      	movs	r3, #192	; 0xc0
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002622:	2308      	movs	r3, #8
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	4824      	ldr	r0, [pc, #144]	; (80026c0 <HAL_UART_MspInit+0x100>)
 800262e:	f000 fb99 	bl	8002d64 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2052      	movs	r0, #82	; 0x52
 8002638:	f000 fad8 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800263c:	2052      	movs	r0, #82	; 0x52
 800263e:	f000 faf1 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002642:	e034      	b.n	80026ae <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <HAL_UART_MspInit+0x104>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12f      	bne.n	80026ae <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_UART_MspInit+0xfc>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_UART_MspInit+0xfc>)
 8002654:	f043 0320 	orr.w	r3, r3, #32
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_UART_MspInit+0xfc>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_UART_MspInit+0xfc>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_UART_MspInit+0xfc>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_UART_MspInit+0xfc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800268e:	2308      	movs	r3, #8
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	480b      	ldr	r0, [pc, #44]	; (80026c8 <HAL_UART_MspInit+0x108>)
 800269a:	f000 fb63 	bl	8002d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2047      	movs	r0, #71	; 0x47
 80026a4:	f000 faa2 	bl	8002bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80026a8:	2047      	movs	r0, #71	; 0x47
 80026aa:	f000 fabb 	bl	8002c24 <HAL_NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40007800 	.word	0x40007800
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40011400 	.word	0x40011400
 80026c8:	40020800 	.word	0x40020800

080026cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	2036      	movs	r0, #54	; 0x36
 80026e2:	f000 fa83 	bl	8002bec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026e6:	2036      	movs	r0, #54	; 0x36
 80026e8:	f000 fa9c 	bl	8002c24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_InitTick+0xa0>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_InitTick+0xa0>)
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_InitTick+0xa0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002704:	f107 0210 	add.w	r2, r7, #16
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f001 f9c8 	bl	8003aa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002714:	f001 f99e 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8002718:	4603      	mov	r3, r0
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_InitTick+0xa4>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9b      	lsrs	r3, r3, #18
 8002728:	3b01      	subs	r3, #1
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_InitTick+0xa8>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_InitTick+0xac>)
 8002730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_InitTick+0xa8>)
 8002734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002738:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_InitTick+0xa8>)
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_InitTick+0xa8>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_InitTick+0xa8>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800274c:	4809      	ldr	r0, [pc, #36]	; (8002774 <HAL_InitTick+0xa8>)
 800274e:	f002 f901 	bl	8004954 <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002758:	4806      	ldr	r0, [pc, #24]	; (8002774 <HAL_InitTick+0xa8>)
 800275a:	f002 f95d 	bl	8004a18 <HAL_TIM_Base_Start_IT>
 800275e:	4603      	mov	r3, r0
 8002760:	e000      	b.n	8002764 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	3730      	adds	r7, #48	; 0x30
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	431bde83 	.word	0x431bde83
 8002774:	20000c54 	.word	0x20000c54
 8002778:	40001000 	.word	0x40001000

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <NMI_Handler+0x4>

08002782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <HardFault_Handler+0x4>

08002788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <MemManage_Handler+0x4>

0800278e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002792:	e7fe      	b.n	8002792 <BusFault_Handler+0x4>

08002794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <UsageFault_Handler+0x4>

0800279a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <TIM6_DAC_IRQHandler+0x10>)
 80027da:	f002 f995 	bl	8004b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000c54 	.word	0x20000c54

080027e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <USART6_IRQHandler+0x10>)
 80027ee:	f002 fd2f 	bl	8005250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000bac 	.word	0x20000bac

080027fc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <UART7_IRQHandler+0x10>)
 8002802:	f002 fd25 	bl	8005250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000b04 	.word	0x20000b04

08002810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
	return 1;
 8002814:	2301      	movs	r3, #1
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_kill>:

int _kill(int pid, int sig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800282a:	f003 ff75 	bl	8006718 <__errno>
 800282e:	4603      	mov	r3, r0
 8002830:	2216      	movs	r2, #22
 8002832:	601a      	str	r2, [r3, #0]
	return -1;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_exit>:

void _exit (int status)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ffe7 	bl	8002820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002852:	e7fe      	b.n	8002852 <_exit+0x12>

08002854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	e00a      	b.n	800287c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002866:	f3af 8000 	nop.w
 800286a:	4601      	mov	r1, r0
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	b2ca      	uxtb	r2, r1
 8002874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3301      	adds	r3, #1
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	dbf0      	blt.n	8002866 <_read+0x12>
	}

return len;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <_close>:
	}
	return len;
}

int _close(int file)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
	return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b6:	605a      	str	r2, [r3, #4]
	return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_isatty>:

int _isatty(int file)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return 1;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	return 0;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f003 fef6 	bl	8006718 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20050000 	.word	0x20050000
 8002958:	00000400 	.word	0x00000400
 800295c:	20000a94 	.word	0x20000a94
 8002960:	20000cb8 	.word	0x20000cb8

08002964 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029b2:	f7ff ffd7 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b6:	f003 feb5 	bl	8006724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7fe fae1 	bl	8000f80 <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000a30 	.word	0x20000a30
  ldr r2, =_sidata
 80029cc:	0800e844 	.word	0x0800e844
  ldr r2, =_sbss
 80029d0:	20000a30 	.word	0x20000a30
  ldr r4, =_ebss
 80029d4:	20000cb4 	.word	0x20000cb4

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>

080029da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029de:	2003      	movs	r0, #3
 80029e0:	f000 f8f9 	bl	8002bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff fe71 	bl	80026cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ea:	f7ff fdab 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x20>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x24>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_IncTick+0x24>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000014 	.word	0x20000014
 8002a18:	20000ca0 	.word	0x20000ca0

08002a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_GetTick+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000ca0 	.word	0x20000ca0

08002a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff ffee 	bl	8002a1c <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d005      	beq.n	8002a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_Delay+0x44>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5a:	bf00      	nop
 8002a5c:	f7ff ffde 	bl	8002a1c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d8f7      	bhi.n	8002a5c <HAL_Delay+0x28>
  {
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000014 	.word	0x20000014

08002a7c <__NVIC_SetPriorityGrouping>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <__NVIC_SetPriorityGrouping+0x40>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x40>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00
 8002ac0:	05fa0000 	.word	0x05fa0000

08002ac4 <__NVIC_GetPriorityGrouping>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff4c 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfe:	f7ff ff61 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	6978      	ldr	r0, [r7, #20]
 8002c0a:	f7ff ffb1 	bl	8002b70 <NVIC_EncodePriority>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff80 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c1c:	bf00      	nop
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff54 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c4e:	f7ff fee5 	bl	8002a1c <HAL_GetTick>
 8002c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e052      	b.n	8002d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0216 	bic.w	r2, r2, #22
 8002c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <HAL_DMA_Abort+0x62>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0208 	bic.w	r2, r2, #8
 8002cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc2:	e013      	b.n	8002cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cc4:	f7ff feaa 	bl	8002a1c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d90c      	bls.n	8002cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e015      	b.n	8002d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e4      	bne.n	8002cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	223f      	movs	r2, #63	; 0x3f
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d004      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e00c      	b.n	8002d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e175      	b.n	8003070 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8164 	bne.w	800306a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x56>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80be 	beq.w	800306a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	4b66      	ldr	r3, [pc, #408]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f06:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_GPIO_Init+0x328>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_GPIO_Init+0x32c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d037      	beq.n	8002fa2 <HAL_GPIO_Init+0x23e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_GPIO_Init+0x330>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_GPIO_Init+0x23a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a56      	ldr	r2, [pc, #344]	; (8003098 <HAL_GPIO_Init+0x334>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x236>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a55      	ldr	r2, [pc, #340]	; (800309c <HAL_GPIO_Init+0x338>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x232>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a54      	ldr	r2, [pc, #336]	; (80030a0 <HAL_GPIO_Init+0x33c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x22e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a53      	ldr	r2, [pc, #332]	; (80030a4 <HAL_GPIO_Init+0x340>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x22a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x344>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x226>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_GPIO_Init+0x348>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x222>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_GPIO_Init+0x34c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x21e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x21a>
 8002f7a:	2309      	movs	r3, #9
 8002f7c:	e012      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f7e:	230a      	movs	r3, #10
 8002f80:	e010      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f82:	2308      	movs	r3, #8
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x328>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_GPIO_Init+0x354>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f ae86 	bls.w	8002d84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40021400 	.word	0x40021400
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40021c00 	.word	0x40021c00
 80030b0:	40022000 	.word	0x40022000
 80030b4:	40022400 	.word	0x40022400
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800313e:	f7ff fc6d 	bl	8002a1c <HAL_GetTick>
 8003142:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003144:	e009      	b.n	800315a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003146:	f7ff fc69 	bl	8002a1c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003154:	d901      	bls.n	800315a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e022      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d1ee      	bne.n	8003146 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800316e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7ff fc52 	bl	8002a1c <HAL_GetTick>
 8003178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800317a:	e009      	b.n	8003190 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800317c:	f7ff fc4e 	bl	8002a1c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318a:	d901      	bls.n	8003190 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e007      	b.n	80031a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319c:	d1ee      	bne.n	800317c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000

080031b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e291      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8087 	beq.w	80032e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d4:	4b96      	ldr	r3, [pc, #600]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d00c      	beq.n	80031fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e0:	4b93      	ldr	r3, [pc, #588]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d112      	bne.n	8003212 <HAL_RCC_OscConfig+0x62>
 80031ec:	4b90      	ldr	r3, [pc, #576]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d10b      	bne.n	8003212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fa:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d06c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x130>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d168      	bne.n	80032e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e26b      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x7a>
 800321c:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a83      	ldr	r2, [pc, #524]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	e02e      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x9c>
 8003232:	4b7f      	ldr	r3, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a7e      	ldr	r2, [pc, #504]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b7c      	ldr	r3, [pc, #496]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7b      	ldr	r2, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e01d      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0xc0>
 8003256:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a75      	ldr	r2, [pc, #468]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a72      	ldr	r2, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0xd8>
 8003270:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b6c      	ldr	r3, [pc, #432]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7ff fbc4 	bl	8002a1c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7ff fbc0 	bl	8002a1c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e21f      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0xe8>
 80032b6:	e014      	b.n	80032e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7ff fbb0 	bl	8002a1c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7ff fbac 	bl	8002a1c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e20b      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	4b57      	ldr	r3, [pc, #348]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x110>
 80032de:	e000      	b.n	80032e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d069      	beq.n	80033c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	4b50      	ldr	r3, [pc, #320]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b4d      	ldr	r3, [pc, #308]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b08      	cmp	r3, #8
 8003304:	d11c      	bne.n	8003340 <HAL_RCC_OscConfig+0x190>
 8003306:	4b4a      	ldr	r3, [pc, #296]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x17a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d001      	beq.n	800332a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e1df      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	493d      	ldr	r1, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	e040      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d023      	beq.n	8003390 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003348:	4b39      	ldr	r3, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a38      	ldr	r2, [pc, #224]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7ff fb62 	bl	8002a1c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7ff fb5e 	bl	8002a1c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1bd      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4929      	ldr	r1, [pc, #164]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
 800338e:	e018      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a26      	ldr	r2, [pc, #152]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7ff fb3e 	bl	8002a1c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a4:	f7ff fb3a 	bl	8002a1c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e199      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4b1e      	ldr	r3, [pc, #120]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d038      	beq.n	8003440 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d019      	beq.n	800340a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d6:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7ff fb1b 	bl	8002a1c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7ff fb17 	bl	8002a1c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e176      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x23a>
 8003408:	e01a      	b.n	8003440 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 800340c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCC_OscConfig+0x280>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7ff fb01 	bl	8002a1c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341e:	f7ff fafd 	bl	8002a1c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d903      	bls.n	8003434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e15c      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
 8003430:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b91      	ldr	r3, [pc, #580]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ee      	bne.n	800341e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a4 	beq.w	8003596 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10d      	bne.n	8003476 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b88      	ldr	r3, [pc, #544]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	4a87      	ldr	r2, [pc, #540]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	; 0x40
 8003466:	4b85      	ldr	r3, [pc, #532]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	4b82      	ldr	r3, [pc, #520]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003482:	4b7f      	ldr	r3, [pc, #508]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a7e      	ldr	r2, [pc, #504]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7ff fac5 	bl	8002a1c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7ff fac1 	bl	8002a1c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	; 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e120      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	4b75      	ldr	r3, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x31a>
 80034bc:	4b6f      	ldr	r3, [pc, #444]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a6e      	ldr	r2, [pc, #440]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
 80034c8:	e02d      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x33c>
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a69      	ldr	r2, [pc, #420]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a66      	ldr	r2, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	e01c      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d10c      	bne.n	800350e <HAL_RCC_OscConfig+0x35e>
 80034f4:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	f043 0304 	orr.w	r3, r3, #4
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003500:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003504:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6713      	str	r3, [r2, #112]	; 0x70
 800350c:	e00b      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
 800350e:	4b5b      	ldr	r3, [pc, #364]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	4a5a      	ldr	r2, [pc, #360]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	; 0x70
 800351a:	4b58      	ldr	r3, [pc, #352]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a57      	ldr	r2, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7ff fa75 	bl	8002a1c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7ff fa71 	bl	8002a1c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0ce      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <HAL_RCC_OscConfig+0x386>
 8003558:	e014      	b.n	8003584 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355a:	f7ff fa5f 	bl	8002a1c <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7ff fa5b 	bl	8002a1c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0b8      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358a:	4b3c      	ldr	r3, [pc, #240]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a3b      	ldr	r2, [pc, #236]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80a4 	beq.w	80036e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d06b      	beq.n	8003684 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d149      	bne.n	8003648 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a30      	ldr	r2, [pc, #192]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7ff fa2c 	bl	8002a1c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7ff fa28 	bl	8002a1c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e087      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	4313      	orrs	r3, r2
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800360e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003612:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800361a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7ff f9fc 	bl	8002a1c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003628:	f7ff f9f8 	bl	8002a1c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e057      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x478>
 8003646:	e04f      	b.n	80036e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800364e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7ff f9e2 	bl	8002a1c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7ff f9de 	bl	8002a1c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e03d      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x4ac>
 800367a:	e035      	b.n	80036e8 <HAL_RCC_OscConfig+0x538>
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x544>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d028      	beq.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d121      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 020f 	bic.w	r2, r3, #15
 8003726:	4965      	ldr	r1, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800375e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7ff f916 	bl	8002a1c <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7ff f912 	bl	8002a1c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 020f 	bic.w	r2, r3, #15
 8003832:	4922      	ldr	r1, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1cc>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1d0>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1d4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ff0e 	bl	80026cc <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023c00 	.word	0x40023c00
 80038c0:	40023800 	.word	0x40023800
 80038c4:	0800e31c 	.word	0x0800e31c
 80038c8:	2000000c 	.word	0x2000000c
 80038cc:	20000010 	.word	0x20000010

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038d6:	2100      	movs	r1, #0
 80038d8:	6079      	str	r1, [r7, #4]
 80038da:	2100      	movs	r1, #0
 80038dc:	60f9      	str	r1, [r7, #12]
 80038de:	2100      	movs	r1, #0
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80038e2:	2100      	movs	r1, #0
 80038e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e6:	4952      	ldr	r1, [pc, #328]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x160>)
 80038e8:	6889      	ldr	r1, [r1, #8]
 80038ea:	f001 010c 	and.w	r1, r1, #12
 80038ee:	2908      	cmp	r1, #8
 80038f0:	d00d      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x3e>
 80038f2:	2908      	cmp	r1, #8
 80038f4:	f200 8094 	bhi.w	8003a20 <HAL_RCC_GetSysClockFreq+0x150>
 80038f8:	2900      	cmp	r1, #0
 80038fa:	d002      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x32>
 80038fc:	2904      	cmp	r1, #4
 80038fe:	d003      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x38>
 8003900:	e08e      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003902:	4b4c      	ldr	r3, [pc, #304]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x164>)
 8003904:	60bb      	str	r3, [r7, #8]
      break;
 8003906:	e08e      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003908:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x168>)
 800390a:	60bb      	str	r3, [r7, #8]
      break;
 800390c:	e08b      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800390e:	4948      	ldr	r1, [pc, #288]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8003910:	6849      	ldr	r1, [r1, #4]
 8003912:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003916:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003918:	4945      	ldr	r1, [pc, #276]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x160>)
 800391a:	6849      	ldr	r1, [r1, #4]
 800391c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003920:	2900      	cmp	r1, #0
 8003922:	d024      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003924:	4942      	ldr	r1, [pc, #264]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8003926:	6849      	ldr	r1, [r1, #4]
 8003928:	0989      	lsrs	r1, r1, #6
 800392a:	4608      	mov	r0, r1
 800392c:	f04f 0100 	mov.w	r1, #0
 8003930:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003934:	f04f 0500 	mov.w	r5, #0
 8003938:	ea00 0204 	and.w	r2, r0, r4
 800393c:	ea01 0305 	and.w	r3, r1, r5
 8003940:	493d      	ldr	r1, [pc, #244]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x168>)
 8003942:	fb01 f003 	mul.w	r0, r1, r3
 8003946:	2100      	movs	r1, #0
 8003948:	fb01 f102 	mul.w	r1, r1, r2
 800394c:	1844      	adds	r4, r0, r1
 800394e:	493a      	ldr	r1, [pc, #232]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x168>)
 8003950:	fba2 0101 	umull	r0, r1, r2, r1
 8003954:	1863      	adds	r3, r4, r1
 8003956:	4619      	mov	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	461a      	mov	r2, r3
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	f7fd f94c 	bl	8000bfc <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	e04a      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	ea02 0400 	and.w	r4, r2, r0
 8003986:	ea03 0501 	and.w	r5, r3, r1
 800398a:	4620      	mov	r0, r4
 800398c:	4629      	mov	r1, r5
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	014b      	lsls	r3, r1, #5
 8003998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800399c:	0142      	lsls	r2, r0, #5
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	1b00      	subs	r0, r0, r4
 80039a4:	eb61 0105 	sbc.w	r1, r1, r5
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	018b      	lsls	r3, r1, #6
 80039b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039b6:	0182      	lsls	r2, r0, #6
 80039b8:	1a12      	subs	r2, r2, r0
 80039ba:	eb63 0301 	sbc.w	r3, r3, r1
 80039be:	f04f 0000 	mov.w	r0, #0
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	00d9      	lsls	r1, r3, #3
 80039c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039cc:	00d0      	lsls	r0, r2, #3
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	1912      	adds	r2, r2, r4
 80039d4:	eb45 0303 	adc.w	r3, r5, r3
 80039d8:	f04f 0000 	mov.w	r0, #0
 80039dc:	f04f 0100 	mov.w	r1, #0
 80039e0:	0299      	lsls	r1, r3, #10
 80039e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039e6:	0290      	lsls	r0, r2, #10
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	f7fd f900 	bl	8000bfc <__aeabi_uldivmod>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4613      	mov	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	60bb      	str	r3, [r7, #8]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a22:	60bb      	str	r3, [r7, #8]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	68bb      	ldr	r3, [r7, #8]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	017d7840 	.word	0x017d7840

08003a3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	2000000c 	.word	0x2000000c

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a58:	f7ff fff0 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	0a9b      	lsrs	r3, r3, #10
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	4903      	ldr	r1, [pc, #12]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6a:	5ccb      	ldrb	r3, [r1, r3]
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	0800e32c 	.word	0x0800e32c

08003a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a80:	f7ff ffdc 	bl	8003a3c <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0b5b      	lsrs	r3, r3, #13
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	0800e32c 	.word	0x0800e32c

08003aa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0203 	and.w	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_GetClockConfig+0x5c>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_RCC_GetClockConfig+0x60>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 020f 	and.w	r2, r3, #15
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40023c00 	.word	0x40023c00

08003b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b30:	4b69      	ldr	r3, [pc, #420]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a68      	ldr	r2, [pc, #416]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b3a:	6093      	str	r3, [r2, #8]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	4964      	ldr	r1, [pc, #400]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d017      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b62:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	4959      	ldr	r1, [pc, #356]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b80:	d101      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d017      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	494a      	ldr	r1, [pc, #296]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808b 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bec:	4b3a      	ldr	r3, [pc, #232]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	4a39      	ldr	r2, [pc, #228]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf8:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c04:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a34      	ldr	r2, [pc, #208]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fe ff04 	bl	8002a1c <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c18:	f7fe ff00 	bl	8002a1c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e357      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c2a:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c36:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d035      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d02e      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c54:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c7c:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d114      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe fec8 	bl	8002a1c <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fe fec4 	bl	8002a1c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e319      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cbe:	d111      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cce:	400b      	ands	r3, r1
 8003cd0:	4901      	ldr	r1, [pc, #4]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	0ffffcff 	.word	0x0ffffcff
 8003ce4:	4bb1      	ldr	r3, [pc, #708]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4ab0      	ldr	r2, [pc, #704]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cee:	6093      	str	r3, [r2, #8]
 8003cf0:	4bae      	ldr	r3, [pc, #696]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfc:	49ab      	ldr	r1, [pc, #684]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d0e:	4ba7      	ldr	r3, [pc, #668]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d14:	4aa5      	ldr	r2, [pc, #660]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d1e:	4ba3      	ldr	r3, [pc, #652]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	49a0      	ldr	r1, [pc, #640]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3c:	4b9b      	ldr	r3, [pc, #620]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	4998      	ldr	r1, [pc, #608]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d5e:	4b93      	ldr	r3, [pc, #588]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6c:	498f      	ldr	r1, [pc, #572]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d80:	4b8a      	ldr	r3, [pc, #552]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8e:	4987      	ldr	r1, [pc, #540]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003da2:	4b82      	ldr	r3, [pc, #520]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	497e      	ldr	r1, [pc, #504]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dc4:	4b79      	ldr	r3, [pc, #484]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f023 0203 	bic.w	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	4976      	ldr	r1, [pc, #472]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f023 020c 	bic.w	r2, r3, #12
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df4:	496d      	ldr	r1, [pc, #436]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e08:	4b68      	ldr	r3, [pc, #416]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	4965      	ldr	r1, [pc, #404]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	495c      	ldr	r1, [pc, #368]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e4c:	4b57      	ldr	r3, [pc, #348]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	4954      	ldr	r1, [pc, #336]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e6e:	4b4f      	ldr	r3, [pc, #316]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	494b      	ldr	r1, [pc, #300]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e90:	4b46      	ldr	r3, [pc, #280]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	4943      	ldr	r1, [pc, #268]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec0:	493a      	ldr	r1, [pc, #232]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee2:	4932      	ldr	r1, [pc, #200]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d011      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f04:	4929      	ldr	r1, [pc, #164]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f14:	d101      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f44:	4919      	ldr	r1, [pc, #100]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f68:	4910      	ldr	r1, [pc, #64]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d006      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80d9 	beq.w	8004136 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a08      	ldr	r2, [pc, #32]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fe fd44 	bl	8002a1c <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f98:	f7fe fd40 	bl	8002a1c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d904      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e197      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fb0:	4b6c      	ldr	r3, [pc, #432]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ed      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d021      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11d      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fd0:	4b64      	ldr	r3, [pc, #400]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd6:	0c1b      	lsrs	r3, r3, #16
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fde:	4b61      	ldr	r3, [pc, #388]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	019a      	lsls	r2, r3, #6
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	071b      	lsls	r3, r3, #28
 8004004:	4957      	ldr	r1, [pc, #348]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02e      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004036:	d129      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004038:	4b4a      	ldr	r3, [pc, #296]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800403a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404c:	0f1b      	lsrs	r3, r3, #28
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	019a      	lsls	r2, r3, #6
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	061b      	lsls	r3, r3, #24
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	071b      	lsls	r3, r3, #28
 800406c:	493d      	ldr	r1, [pc, #244]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800407a:	f023 021f 	bic.w	r2, r3, #31
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	3b01      	subs	r3, #1
 8004084:	4937      	ldr	r1, [pc, #220]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01d      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004098:	4b32      	ldr	r3, [pc, #200]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409e:	0e1b      	lsrs	r3, r3, #24
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ac:	0f1b      	lsrs	r3, r3, #28
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	019a      	lsls	r2, r3, #6
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	071b      	lsls	r3, r3, #28
 80040cc:	4925      	ldr	r1, [pc, #148]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d011      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	019a      	lsls	r2, r3, #6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	071b      	lsls	r3, r3, #28
 80040fc:	4919      	ldr	r1, [pc, #100]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800410e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004110:	f7fe fc84 	bl	8002a1c <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004118:	f7fe fc80 	bl	8002a1c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b64      	cmp	r3, #100	; 0x64
 8004124:	d901      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0d7      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800412a:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 80cd 	bne.w	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414a:	f7fe fc67 	bl	8002a1c <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004150:	e00a      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004152:	f7fe fc63 	bl	8002a1c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	; 0x64
 800415e:	d903      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0ba      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004164:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004168:	4b5e      	ldr	r3, [pc, #376]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004174:	d0ed      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02e      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d12a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800419e:	4b51      	ldr	r3, [pc, #324]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041ac:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	0f1b      	lsrs	r3, r3, #28
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	019a      	lsls	r2, r3, #6
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	4944      	ldr	r1, [pc, #272]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041da:	4b42      	ldr	r3, [pc, #264]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	493d      	ldr	r1, [pc, #244]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d022      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004208:	d11d      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800420a:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	0e1b      	lsrs	r3, r3, #24
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004218:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	0f1b      	lsrs	r3, r3, #28
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	019a      	lsls	r2, r3, #6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	431a      	orrs	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	071b      	lsls	r3, r3, #28
 800423e:	4929      	ldr	r1, [pc, #164]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d028      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 0303 	and.w	r3, r3, #3
 800426c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	019a      	lsls	r2, r3, #6
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	4917      	ldr	r1, [pc, #92]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800428e:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4911      	ldr	r1, [pc, #68]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f7fe fbb4 	bl	8002a1c <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042b8:	f7fe fbb0 	bl	8002a1c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e007      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d6:	d1ef      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800

080042e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e081      	b.n	80043fe <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	7f5b      	ldrb	r3, [r3, #29]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe f93e 	bl	800258c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	22ca      	movs	r2, #202	; 0xca
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2253      	movs	r2, #83	; 0x53
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 faac 	bl	8004884 <RTC_EnterInitMode>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	22ff      	movs	r2, #255	; 0xff
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2204      	movs	r2, #4
 800433e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e05c      	b.n	80043fe <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6899      	ldr	r1, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <HAL_RTC_Init+0x120>)
 8004350:	400b      	ands	r3, r1
 8004352:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68d2      	ldr	r2, [r2, #12]
 800437a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	041a      	lsls	r2, r3, #16
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439e:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10e      	bne.n	80043cc <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa40 	bl	8004834 <HAL_RTC_WaitForSynchro>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e018      	b.n	80043fe <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0208 	bic.w	r2, r2, #8
 80043da:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	ff8fffbf 	.word	0xff8fffbf

0800440c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	7f1b      	ldrb	r3, [r3, #28]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_RTC_SetTime+0x1c>
 8004424:	2302      	movs	r3, #2
 8004426:	e0a8      	b.n	800457a <HAL_RTC_SetTime+0x16e>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2202      	movs	r2, #2
 8004432:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d126      	bne.n	8004488 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2200      	movs	r2, #0
 800444c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fa42 	bl	80048dc <RTC_ByteToBcd2>
 8004458:	4603      	mov	r3, r0
 800445a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fa3b 	bl	80048dc <RTC_ByteToBcd2>
 8004466:	4603      	mov	r3, r0
 8004468:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800446a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	789b      	ldrb	r3, [r3, #2]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fa33 	bl	80048dc <RTC_ByteToBcd2>
 8004476:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004478:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	7b1b      	ldrb	r3, [r3, #12]
 8004480:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e018      	b.n	80044ba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2200      	movs	r2, #0
 800449a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	785b      	ldrb	r3, [r3, #1]
 80044a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80044a8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80044ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	7b1b      	ldrb	r3, [r3, #12]
 80044b4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	22ca      	movs	r2, #202	; 0xca
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2253      	movs	r2, #83	; 0x53
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f9da 	bl	8004884 <RTC_EnterInitMode>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	22ff      	movs	r2, #255	; 0xff
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2204      	movs	r2, #4
 80044e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e045      	b.n	800457a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RTC_SetTime+0x178>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004508:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004530:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d111      	bne.n	8004564 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f977 	bl	8004834 <HAL_RTC_WaitForSynchro>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00b      	beq.n	8004564 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	22ff      	movs	r2, #255	; 0xff
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2204      	movs	r2, #4
 8004558:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e00a      	b.n	800457a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004578:	2300      	movs	r3, #0
  }
}
 800457a:	4618      	mov	r0, r3
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	bf00      	nop
 8004584:	007f7f7f 	.word	0x007f7f7f

08004588 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b22      	ldr	r3, [pc, #136]	; (8004640 <HAL_RTC_GetTime+0xb8>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	0c1b      	lsrs	r3, r3, #16
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	0a1b      	lsrs	r3, r3, #8
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11a      	bne.n	8004636 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f987 	bl	8004918 <RTC_Bcd2ToByte>
 800460a:	4603      	mov	r3, r0
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	785b      	ldrb	r3, [r3, #1]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f97e 	bl	8004918 <RTC_Bcd2ToByte>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f975 	bl	8004918 <RTC_Bcd2ToByte>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	007f7f7f 	.word	0x007f7f7f

08004644 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	7f1b      	ldrb	r3, [r3, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_RTC_SetDate+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e092      	b.n	8004786 <HAL_RTC_SetDate+0x142>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2202      	movs	r2, #2
 800466a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10e      	bne.n	8004690 <HAL_RTC_SetDate+0x4c>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	f023 0310 	bic.w	r3, r3, #16
 8004686:	b2db      	uxtb	r3, r3
 8004688:	330a      	adds	r3, #10
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d11c      	bne.n	80046d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	78db      	ldrb	r3, [r3, #3]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f91e 	bl	80048dc <RTC_ByteToBcd2>
 80046a0:	4603      	mov	r3, r0
 80046a2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f917 	bl	80048dc <RTC_ByteToBcd2>
 80046ae:	4603      	mov	r3, r0
 80046b0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80046b2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	789b      	ldrb	r3, [r3, #2]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 f90f 	bl	80048dc <RTC_ByteToBcd2>
 80046be:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80046c0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e00e      	b.n	80046ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	78db      	ldrb	r3, [r3, #3]
 80046d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80046dc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80046e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	22ca      	movs	r2, #202	; 0xca
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2253      	movs	r2, #83	; 0x53
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f8c0 	bl	8004884 <RTC_EnterInitMode>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	22ff      	movs	r2, #255	; 0xff
 8004710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2204      	movs	r2, #4
 8004716:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e031      	b.n	8004786 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	6979      	ldr	r1, [r7, #20]
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RTC_SetDate+0x14c>)
 800472a:	400b      	ands	r3, r1
 800472c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d111      	bne.n	8004770 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f871 	bl	8004834 <HAL_RTC_WaitForSynchro>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	22ff      	movs	r2, #255	; 0xff
 800475e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2204      	movs	r2, #4
 8004764:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e00a      	b.n	8004786 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	22ff      	movs	r2, #255	; 0xff
 8004776:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004784:	2300      	movs	r3, #0
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd90      	pop	{r4, r7, pc}
 800478e:	bf00      	nop
 8004790:	00ffff3f 	.word	0x00ffff3f

08004794 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RTC_GetDate+0x9c>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	0b5b      	lsrs	r3, r3, #13
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11a      	bne.n	8004824 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	78db      	ldrb	r3, [r3, #3]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f890 	bl	8004918 <RTC_Bcd2ToByte>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f887 	bl	8004918 <RTC_Bcd2ToByte>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	789b      	ldrb	r3, [r3, #2]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f87e 	bl	8004918 <RTC_Bcd2ToByte>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	00ffff3f 	.word	0x00ffff3f

08004834 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800484e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004850:	f7fe f8e4 	bl	8002a1c <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004856:	e009      	b.n	800486c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004858:	f7fe f8e0 	bl	8002a1c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004866:	d901      	bls.n	800486c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e007      	b.n	800487c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ee      	beq.n	8004858 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d119      	bne.n	80048d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295
 80048a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048a8:	f7fe f8b8 	bl	8002a1c <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80048ae:	e009      	b.n	80048c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80048b0:	f7fe f8b4 	bl	8002a1c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048be:	d901      	bls.n	80048c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e007      	b.n	80048d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80048ea:	e005      	b.n	80048f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	3b0a      	subs	r3, #10
 80048f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d8f6      	bhi.n	80048ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	b2da      	uxtb	r2, r3
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	4313      	orrs	r3, r2
 800490a:	b2db      	uxtb	r3, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	b2da      	uxtb	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4413      	add	r3, r2
 8004946:	b2db      	uxtb	r3, r3
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e049      	b.n	80049fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f841 	bl	8004a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fa00 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d001      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e054      	b.n	8004ada <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d022      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5a:	d01d      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <HAL_TIM_Base_Start_IT+0xd4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <HAL_TIM_Base_Start_IT+0xe4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x80>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d115      	bne.n	8004ac4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <HAL_TIM_Base_Start_IT+0xec>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d015      	beq.n	8004ad6 <HAL_TIM_Base_Start_IT+0xbe>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab0:	d011      	beq.n	8004ad6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e008      	b.n	8004ad6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e000      	b.n	8004ad8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40010400 	.word	0x40010400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40001800 	.word	0x40001800
 8004b04:	00010007 	.word	0x00010007

08004b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0202 	mvn.w	r2, #2
 8004b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f905 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8f7 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f908 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0204 	mvn.w	r2, #4
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8db 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8cd 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8de 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0208 	mvn.w	r2, #8
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2204      	movs	r2, #4
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8b1 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8a3 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8b4 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d122      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d11b      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0210 	mvn.w	r2, #16
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2208      	movs	r2, #8
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f887 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f879 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f88a 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d10e      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0201 	mvn.w	r2, #1
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fd fc44 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b80      	cmp	r3, #128	; 0x80
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f91a 	bl	8004eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc6:	d10e      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b80      	cmp	r3, #128	; 0x80
 8004cd4:	d107      	bne.n	8004ce6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f90d 	bl	8004f00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f838 	bl	8004d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d10e      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0220 	mvn.w	r2, #32
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8cd 	bl	8004ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a40      	ldr	r2, [pc, #256]	; (8004eac <TIM_Base_SetConfig+0x114>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db6:	d00f      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3d      	ldr	r2, [pc, #244]	; (8004eb0 <TIM_Base_SetConfig+0x118>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <TIM_Base_SetConfig+0x11c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3b      	ldr	r2, [pc, #236]	; (8004eb8 <TIM_Base_SetConfig+0x120>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3a      	ldr	r2, [pc, #232]	; (8004ebc <TIM_Base_SetConfig+0x124>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <TIM_Base_SetConfig+0x114>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d027      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <TIM_Base_SetConfig+0x118>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d023      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <TIM_Base_SetConfig+0x11c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <TIM_Base_SetConfig+0x120>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <TIM_Base_SetConfig+0x124>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <TIM_Base_SetConfig+0x128>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a26      	ldr	r2, [pc, #152]	; (8004ec8 <TIM_Base_SetConfig+0x130>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <TIM_Base_SetConfig+0x134>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <TIM_Base_SetConfig+0x138>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a23      	ldr	r2, [pc, #140]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <TIM_Base_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d103      	bne.n	8004e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800
 8004ecc:	40001800 	.word	0x40001800
 8004ed0:	40001c00 	.word	0x40001c00
 8004ed4:	40002000 	.word	0x40002000

08004ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e040      	b.n	8004fa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fd fb42 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	; 0x24
 8004f40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc5c 	bl	8005810 <UART_SetConfig>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e022      	b.n	8004fa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 feb2 	bl	8005cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 ff39 	bl	8005e18 <UART_CheckIdleState>
 8004fa6:	4603      	mov	r3, r0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	f040 8081 	bne.w	80050cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_UART_Transmit+0x26>
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e079      	b.n	80050ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_UART_Transmit+0x38>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e072      	b.n	80050ce <HAL_UART_Transmit+0x11e>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2221      	movs	r2, #33	; 0x21
 8004ffc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ffe:	f7fd fd0d 	bl	8002a1c <HAL_GetTick>
 8005002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501c:	d108      	bne.n	8005030 <HAL_UART_Transmit+0x80>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e003      	b.n	8005038 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005040:	e02c      	b.n	800509c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 ff16 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e038      	b.n	80050ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	3302      	adds	r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	e007      	b.n	800508a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1cc      	bne.n	8005042 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2200      	movs	r2, #0
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fee3 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e005      	b.n	80050ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050d8:	b480      	push	{r7}
 80050da:	b08b      	sub	sp, #44	; 0x2c
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d156      	bne.n	800519c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_UART_Transmit_IT+0x22>
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e04f      	b.n	800519e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_UART_Transmit_IT+0x34>
 8005108:	2302      	movs	r3, #2
 800510a:	e048      	b.n	800519e <HAL_UART_Transmit_IT+0xc6>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2221      	movs	r2, #33	; 0x21
 800513c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	d107      	bne.n	8005158 <HAL_UART_Transmit_IT+0x80>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a16      	ldr	r2, [pc, #88]	; (80051ac <HAL_UART_Transmit_IT+0xd4>)
 8005154:	669a      	str	r2, [r3, #104]	; 0x68
 8005156:	e002      	b.n	800515e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <HAL_UART_Transmit_IT+0xd8>)
 800515c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	61bb      	str	r3, [r7, #24]
   return(result);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	372c      	adds	r7, #44	; 0x2c
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	08006345 	.word	0x08006345
 80051b0:	0800628f 	.word	0x0800628f

080051b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08a      	sub	sp, #40	; 0x28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d13d      	bne.n	8005246 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_UART_Receive_IT+0x22>
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e036      	b.n	8005248 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Receive_IT+0x34>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e02f      	b.n	8005248 <HAL_UART_Receive_IT+0x94>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d018      	beq.n	8005236 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	613b      	str	r3, [r7, #16]
   return(result);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	461a      	mov	r2, r3
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fee3 	bl	8006008 <UART_Start_Receive_IT>
 8005242:	4603      	mov	r3, r0
 8005244:	e000      	b.n	8005248 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	3728      	adds	r7, #40	; 0x28
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b0ba      	sub	sp, #232	; 0xe8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800527a:	f640 030f 	movw	r3, #2063	; 0x80f
 800527e:	4013      	ands	r3, r2
 8005280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d115      	bne.n	80052b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800528c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00f      	beq.n	80052b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 828f 	beq.w	80057cc <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
      }
      return;
 80052b6:	e289      	b.n	80057cc <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8117 	beq.w	80054f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80052d2:	4b85      	ldr	r3, [pc, #532]	; (80054e8 <HAL_UART_IRQHandler+0x298>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 810a 	beq.w	80054f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d011      	beq.n	800530c <HAL_UART_IRQHandler+0xbc>
 80052e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2201      	movs	r2, #1
 80052fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d011      	beq.n	800533c <HAL_UART_IRQHandler+0xec>
 8005318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2202      	movs	r2, #2
 800532a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d011      	beq.n	800536c <HAL_UART_IRQHandler+0x11c>
 8005348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00b      	beq.n	800536c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2204      	movs	r2, #4
 800535a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d017      	beq.n	80053a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d105      	bne.n	8005390 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005388:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00b      	beq.n	80053a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2208      	movs	r2, #8
 8005396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539e:	f043 0208 	orr.w	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d012      	beq.n	80053da <HAL_UART_IRQHandler+0x18a>
 80053b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00c      	beq.n	80053da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 81f5 	beq.w	80057d0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d005      	beq.n	8005432 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04f      	beq.n	80054d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 feb2 	bl	800619c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d141      	bne.n	80054ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800545c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800547e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800548a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1d9      	bne.n	8005446 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	2b00      	cmp	r3, #0
 8005498:	d013      	beq.n	80054c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <HAL_UART_IRQHandler+0x29c>)
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd fc3a 	bl	8002d20 <HAL_DMA_Abort_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d017      	beq.n	80054e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80054bc:	4610      	mov	r0, r2
 80054be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	e00f      	b.n	80054e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f98e 	bl	80057e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	e00b      	b.n	80054e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f98a 	bl	80057e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	e007      	b.n	80054e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f986 	bl	80057e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80054e0:	e176      	b.n	80057d0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e2:	bf00      	nop
    return;
 80054e4:	e174      	b.n	80057d0 <HAL_UART_IRQHandler+0x580>
 80054e6:	bf00      	nop
 80054e8:	04000120 	.word	0x04000120
 80054ec:	08006263 	.word	0x08006263

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	f040 8144 	bne.w	8005782 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 813d 	beq.w	8005782 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8136 	beq.w	8005782 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2210      	movs	r2, #16
 800551c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	f040 80b2 	bne.w	8005692 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800553a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 8148 	beq.w	80057d4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800554a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800554e:	429a      	cmp	r2, r3
 8005550:	f080 8140 	bcs.w	80057d4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800555a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005568:	f000 8085 	beq.w	8005676 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800559a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1da      	bne.n	800556c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e1      	bne.n	80055b6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800561c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e3      	bne.n	80055f2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005658:	65bb      	str	r3, [r7, #88]	; 0x58
 800565a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800565e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e4      	bne.n	8005636 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4618      	mov	r0, r3
 8005672:	f7fd fae5 	bl	8002c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005682:	b29b      	uxth	r3, r3
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	b29b      	uxth	r3, r3
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8b4 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005690:	e0a0      	b.n	80057d4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800569e:	b29b      	uxth	r3, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8092 	beq.w	80057d8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80056b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 808d 	beq.w	80057d8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056e0:	647b      	str	r3, [r7, #68]	; 0x44
 80056e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e4      	bne.n	80056be <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3308      	adds	r3, #8
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	623b      	str	r3, [r7, #32]
   return(result);
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005718:	633a      	str	r2, [r7, #48]	; 0x30
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e3      	bne.n	80056f4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60fb      	str	r3, [r7, #12]
   return(result);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	617b      	str	r3, [r7, #20]
   return(result);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e4      	bne.n	800573e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f83c 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005780:	e02a      	b.n	80057d8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00e      	beq.n	80057ac <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800578e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01c      	beq.n	80057dc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
    }
    return;
 80057aa:	e017      	b.n	80057dc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d012      	beq.n	80057de <HAL_UART_IRQHandler+0x58e>
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fe1d 	bl	8006404 <UART_EndTransmit_IT>
    return;
 80057ca:	e008      	b.n	80057de <HAL_UART_IRQHandler+0x58e>
      return;
 80057cc:	bf00      	nop
 80057ce:	e006      	b.n	80057de <HAL_UART_IRQHandler+0x58e>
    return;
 80057d0:	bf00      	nop
 80057d2:	e004      	b.n	80057de <HAL_UART_IRQHandler+0x58e>
      return;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <HAL_UART_IRQHandler+0x58e>
      return;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_UART_IRQHandler+0x58e>
    return;
 80057dc:	bf00      	nop
  }

}
 80057de:	37e8      	adds	r7, #232	; 0xe8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4ba7      	ldr	r3, [pc, #668]	; (8005ad8 <UART_SetConfig+0x2c8>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	6979      	ldr	r1, [r7, #20]
 8005844:	430b      	orrs	r3, r1
 8005846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a95      	ldr	r2, [pc, #596]	; (8005adc <UART_SetConfig+0x2cc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d120      	bne.n	80058ce <UART_SetConfig+0xbe>
 800588c:	4b94      	ldr	r3, [pc, #592]	; (8005ae0 <UART_SetConfig+0x2d0>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d816      	bhi.n	80058c8 <UART_SetConfig+0xb8>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <UART_SetConfig+0x90>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058bd 	.word	0x080058bd
 80058a8:	080058b7 	.word	0x080058b7
 80058ac:	080058c3 	.word	0x080058c3
 80058b0:	2301      	movs	r3, #1
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e14f      	b.n	8005b56 <UART_SetConfig+0x346>
 80058b6:	2302      	movs	r3, #2
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e14c      	b.n	8005b56 <UART_SetConfig+0x346>
 80058bc:	2304      	movs	r3, #4
 80058be:	77fb      	strb	r3, [r7, #31]
 80058c0:	e149      	b.n	8005b56 <UART_SetConfig+0x346>
 80058c2:	2308      	movs	r3, #8
 80058c4:	77fb      	strb	r3, [r7, #31]
 80058c6:	e146      	b.n	8005b56 <UART_SetConfig+0x346>
 80058c8:	2310      	movs	r3, #16
 80058ca:	77fb      	strb	r3, [r7, #31]
 80058cc:	e143      	b.n	8005b56 <UART_SetConfig+0x346>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a84      	ldr	r2, [pc, #528]	; (8005ae4 <UART_SetConfig+0x2d4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d132      	bne.n	800593e <UART_SetConfig+0x12e>
 80058d8:	4b81      	ldr	r3, [pc, #516]	; (8005ae0 <UART_SetConfig+0x2d0>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d828      	bhi.n	8005938 <UART_SetConfig+0x128>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0xdc>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005921 	.word	0x08005921
 80058f0:	08005939 	.word	0x08005939
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	0800592d 	.word	0x0800592d
 8005900:	08005939 	.word	0x08005939
 8005904:	08005939 	.word	0x08005939
 8005908:	08005939 	.word	0x08005939
 800590c:	08005927 	.word	0x08005927
 8005910:	08005939 	.word	0x08005939
 8005914:	08005939 	.word	0x08005939
 8005918:	08005939 	.word	0x08005939
 800591c:	08005933 	.word	0x08005933
 8005920:	2300      	movs	r3, #0
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e117      	b.n	8005b56 <UART_SetConfig+0x346>
 8005926:	2302      	movs	r3, #2
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e114      	b.n	8005b56 <UART_SetConfig+0x346>
 800592c:	2304      	movs	r3, #4
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e111      	b.n	8005b56 <UART_SetConfig+0x346>
 8005932:	2308      	movs	r3, #8
 8005934:	77fb      	strb	r3, [r7, #31]
 8005936:	e10e      	b.n	8005b56 <UART_SetConfig+0x346>
 8005938:	2310      	movs	r3, #16
 800593a:	77fb      	strb	r3, [r7, #31]
 800593c:	e10b      	b.n	8005b56 <UART_SetConfig+0x346>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a69      	ldr	r2, [pc, #420]	; (8005ae8 <UART_SetConfig+0x2d8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d120      	bne.n	800598a <UART_SetConfig+0x17a>
 8005948:	4b65      	ldr	r3, [pc, #404]	; (8005ae0 <UART_SetConfig+0x2d0>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d013      	beq.n	800597e <UART_SetConfig+0x16e>
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d814      	bhi.n	8005984 <UART_SetConfig+0x174>
 800595a:	2b20      	cmp	r3, #32
 800595c:	d009      	beq.n	8005972 <UART_SetConfig+0x162>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d810      	bhi.n	8005984 <UART_SetConfig+0x174>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <UART_SetConfig+0x15c>
 8005966:	2b10      	cmp	r3, #16
 8005968:	d006      	beq.n	8005978 <UART_SetConfig+0x168>
 800596a:	e00b      	b.n	8005984 <UART_SetConfig+0x174>
 800596c:	2300      	movs	r3, #0
 800596e:	77fb      	strb	r3, [r7, #31]
 8005970:	e0f1      	b.n	8005b56 <UART_SetConfig+0x346>
 8005972:	2302      	movs	r3, #2
 8005974:	77fb      	strb	r3, [r7, #31]
 8005976:	e0ee      	b.n	8005b56 <UART_SetConfig+0x346>
 8005978:	2304      	movs	r3, #4
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e0eb      	b.n	8005b56 <UART_SetConfig+0x346>
 800597e:	2308      	movs	r3, #8
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e0e8      	b.n	8005b56 <UART_SetConfig+0x346>
 8005984:	2310      	movs	r3, #16
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e0e5      	b.n	8005b56 <UART_SetConfig+0x346>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a57      	ldr	r2, [pc, #348]	; (8005aec <UART_SetConfig+0x2dc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d120      	bne.n	80059d6 <UART_SetConfig+0x1c6>
 8005994:	4b52      	ldr	r3, [pc, #328]	; (8005ae0 <UART_SetConfig+0x2d0>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800599e:	2bc0      	cmp	r3, #192	; 0xc0
 80059a0:	d013      	beq.n	80059ca <UART_SetConfig+0x1ba>
 80059a2:	2bc0      	cmp	r3, #192	; 0xc0
 80059a4:	d814      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d009      	beq.n	80059be <UART_SetConfig+0x1ae>
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d810      	bhi.n	80059d0 <UART_SetConfig+0x1c0>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <UART_SetConfig+0x1a8>
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d006      	beq.n	80059c4 <UART_SetConfig+0x1b4>
 80059b6:	e00b      	b.n	80059d0 <UART_SetConfig+0x1c0>
 80059b8:	2300      	movs	r3, #0
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e0cb      	b.n	8005b56 <UART_SetConfig+0x346>
 80059be:	2302      	movs	r3, #2
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e0c8      	b.n	8005b56 <UART_SetConfig+0x346>
 80059c4:	2304      	movs	r3, #4
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e0c5      	b.n	8005b56 <UART_SetConfig+0x346>
 80059ca:	2308      	movs	r3, #8
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e0c2      	b.n	8005b56 <UART_SetConfig+0x346>
 80059d0:	2310      	movs	r3, #16
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e0bf      	b.n	8005b56 <UART_SetConfig+0x346>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a45      	ldr	r2, [pc, #276]	; (8005af0 <UART_SetConfig+0x2e0>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0x21c>
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <UART_SetConfig+0x2d0>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d017      	beq.n	8005a20 <UART_SetConfig+0x210>
 80059f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f4:	d817      	bhi.n	8005a26 <UART_SetConfig+0x216>
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fa:	d00b      	beq.n	8005a14 <UART_SetConfig+0x204>
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a00:	d811      	bhi.n	8005a26 <UART_SetConfig+0x216>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <UART_SetConfig+0x1fe>
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d006      	beq.n	8005a1a <UART_SetConfig+0x20a>
 8005a0c:	e00b      	b.n	8005a26 <UART_SetConfig+0x216>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0a0      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a14:	2302      	movs	r3, #2
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e09d      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a1a:	2304      	movs	r3, #4
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e09a      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a20:	2308      	movs	r3, #8
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e097      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a26:	2310      	movs	r3, #16
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e094      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <UART_SetConfig+0x2e4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d125      	bne.n	8005a82 <UART_SetConfig+0x272>
 8005a36:	4b2a      	ldr	r3, [pc, #168]	; (8005ae0 <UART_SetConfig+0x2d0>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a44:	d017      	beq.n	8005a76 <UART_SetConfig+0x266>
 8005a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4a:	d817      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a50:	d00b      	beq.n	8005a6a <UART_SetConfig+0x25a>
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d811      	bhi.n	8005a7c <UART_SetConfig+0x26c>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <UART_SetConfig+0x254>
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d006      	beq.n	8005a70 <UART_SetConfig+0x260>
 8005a62:	e00b      	b.n	8005a7c <UART_SetConfig+0x26c>
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e075      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e072      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e06f      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e06c      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e069      	b.n	8005b56 <UART_SetConfig+0x346>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <UART_SetConfig+0x2e8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d137      	bne.n	8005afc <UART_SetConfig+0x2ec>
 8005a8c:	4b14      	ldr	r3, [pc, #80]	; (8005ae0 <UART_SetConfig+0x2d0>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a9a:	d017      	beq.n	8005acc <UART_SetConfig+0x2bc>
 8005a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aa0:	d817      	bhi.n	8005ad2 <UART_SetConfig+0x2c2>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	d00b      	beq.n	8005ac0 <UART_SetConfig+0x2b0>
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d811      	bhi.n	8005ad2 <UART_SetConfig+0x2c2>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <UART_SetConfig+0x2aa>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d006      	beq.n	8005ac6 <UART_SetConfig+0x2b6>
 8005ab8:	e00b      	b.n	8005ad2 <UART_SetConfig+0x2c2>
 8005aba:	2300      	movs	r3, #0
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e04a      	b.n	8005b56 <UART_SetConfig+0x346>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e047      	b.n	8005b56 <UART_SetConfig+0x346>
 8005ac6:	2304      	movs	r3, #4
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e044      	b.n	8005b56 <UART_SetConfig+0x346>
 8005acc:	2308      	movs	r3, #8
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e041      	b.n	8005b56 <UART_SetConfig+0x346>
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	77fb      	strb	r3, [r7, #31]
 8005ad6:	e03e      	b.n	8005b56 <UART_SetConfig+0x346>
 8005ad8:	efff69f3 	.word	0xefff69f3
 8005adc:	40011000 	.word	0x40011000
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40004400 	.word	0x40004400
 8005ae8:	40004800 	.word	0x40004800
 8005aec:	40004c00 	.word	0x40004c00
 8005af0:	40005000 	.word	0x40005000
 8005af4:	40011400 	.word	0x40011400
 8005af8:	40007800 	.word	0x40007800
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a71      	ldr	r2, [pc, #452]	; (8005cc8 <UART_SetConfig+0x4b8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d125      	bne.n	8005b52 <UART_SetConfig+0x342>
 8005b06:	4b71      	ldr	r3, [pc, #452]	; (8005ccc <UART_SetConfig+0x4bc>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b14:	d017      	beq.n	8005b46 <UART_SetConfig+0x336>
 8005b16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b1a:	d817      	bhi.n	8005b4c <UART_SetConfig+0x33c>
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b20:	d00b      	beq.n	8005b3a <UART_SetConfig+0x32a>
 8005b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b26:	d811      	bhi.n	8005b4c <UART_SetConfig+0x33c>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <UART_SetConfig+0x324>
 8005b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b30:	d006      	beq.n	8005b40 <UART_SetConfig+0x330>
 8005b32:	e00b      	b.n	8005b4c <UART_SetConfig+0x33c>
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e00d      	b.n	8005b56 <UART_SetConfig+0x346>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e00a      	b.n	8005b56 <UART_SetConfig+0x346>
 8005b40:	2304      	movs	r3, #4
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e007      	b.n	8005b56 <UART_SetConfig+0x346>
 8005b46:	2308      	movs	r3, #8
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e004      	b.n	8005b56 <UART_SetConfig+0x346>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e001      	b.n	8005b56 <UART_SetConfig+0x346>
 8005b52:	2310      	movs	r3, #16
 8005b54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5e:	d15a      	bne.n	8005c16 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d827      	bhi.n	8005bb6 <UART_SetConfig+0x3a6>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0x35c>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005bb7 	.word	0x08005bb7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005bb7 	.word	0x08005bb7
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bb7 	.word	0x08005bb7
 8005b8c:	08005baf 	.word	0x08005baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fd ff60 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8005b94:	61b8      	str	r0, [r7, #24]
        break;
 8005b96:	e013      	b.n	8005bc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fd ff70 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005b9c:	61b8      	str	r0, [r7, #24]
        break;
 8005b9e:	e00f      	b.n	8005bc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba0:	4b4b      	ldr	r3, [pc, #300]	; (8005cd0 <UART_SetConfig+0x4c0>)
 8005ba2:	61bb      	str	r3, [r7, #24]
        break;
 8005ba4:	e00c      	b.n	8005bc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba6:	f7fd fe93 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8005baa:	61b8      	str	r0, [r7, #24]
        break;
 8005bac:	e008      	b.n	8005bc0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	61bb      	str	r3, [r7, #24]
        break;
 8005bb4:	e004      	b.n	8005bc0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	77bb      	strb	r3, [r7, #30]
        break;
 8005bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d074      	beq.n	8005cb0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	005a      	lsls	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d916      	bls.n	8005c10 <UART_SetConfig+0x400>
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d212      	bcs.n	8005c10 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f023 030f 	bic.w	r3, r3, #15
 8005bf2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	89fb      	ldrh	r3, [r7, #14]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	89fa      	ldrh	r2, [r7, #14]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	e04f      	b.n	8005cb0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	77bb      	strb	r3, [r7, #30]
 8005c14:	e04c      	b.n	8005cb0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d828      	bhi.n	8005c6e <UART_SetConfig+0x45e>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <UART_SetConfig+0x414>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	08005c6f 	.word	0x08005c6f
 8005c34:	08005c5f 	.word	0x08005c5f
 8005c38:	08005c6f 	.word	0x08005c6f
 8005c3c:	08005c6f 	.word	0x08005c6f
 8005c40:	08005c6f 	.word	0x08005c6f
 8005c44:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c48:	f7fd ff04 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	61b8      	str	r0, [r7, #24]
        break;
 8005c4e:	e013      	b.n	8005c78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fd ff14 	bl	8003a7c <HAL_RCC_GetPCLK2Freq>
 8005c54:	61b8      	str	r0, [r7, #24]
        break;
 8005c56:	e00f      	b.n	8005c78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <UART_SetConfig+0x4c0>)
 8005c5a:	61bb      	str	r3, [r7, #24]
        break;
 8005c5c:	e00c      	b.n	8005c78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fd fe37 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8005c62:	61b8      	str	r0, [r7, #24]
        break;
 8005c64:	e008      	b.n	8005c78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	61bb      	str	r3, [r7, #24]
        break;
 8005c6c:	e004      	b.n	8005c78 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	77bb      	strb	r3, [r7, #30]
        break;
 8005c76:	bf00      	nop
    }

    if (pclk != 0U)
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d018      	beq.n	8005cb0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	085a      	lsrs	r2, r3, #1
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	441a      	add	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b0f      	cmp	r3, #15
 8005c96:	d909      	bls.n	8005cac <UART_SetConfig+0x49c>
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9e:	d205      	bcs.n	8005cac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	e001      	b.n	8005cb0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005cbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40007c00 	.word	0x40007c00
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	00f42400 	.word	0x00f42400

08005cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00a      	beq.n	8005d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01a      	beq.n	8005dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd2:	d10a      	bne.n	8005dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e28:	f7fc fdf8 	bl	8002a1c <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d10e      	bne.n	8005e5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f817 	bl	8005e7e <UART_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e00d      	b.n	8005e76 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b09c      	sub	sp, #112	; 0x70
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8e:	e0a5      	b.n	8005fdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	f000 80a1 	beq.w	8005fdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fc fdbf 	bl	8002a1c <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d13e      	bne.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e6      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e5      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e067      	b.n	8005ffe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d04f      	beq.n	8005fdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d147      	bne.n	8005fdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e6      	bne.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	613b      	str	r3, [r7, #16]
   return(result);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f023 0301 	bic.w	r3, r3, #1
 8005f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fa8:	623a      	str	r2, [r7, #32]
 8005faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	69f9      	ldr	r1, [r7, #28]
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e5      	bne.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e010      	b.n	8005ffe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69da      	ldr	r2, [r3, #28]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	bf0c      	ite	eq
 8005fec:	2301      	moveq	r3, #1
 8005fee:	2300      	movne	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	f43f af4a 	beq.w	8005e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3770      	adds	r7, #112	; 0x70
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006008:	b480      	push	{r7}
 800600a:	b097      	sub	sp, #92	; 0x5c
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	88fa      	ldrh	r2, [r7, #6]
 8006020:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603a:	d10e      	bne.n	800605a <UART_Start_Receive_IT+0x52>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <UART_Start_Receive_IT+0x48>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f240 12ff 	movw	r2, #511	; 0x1ff
 800604a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800604e:	e02d      	b.n	80060ac <UART_Start_Receive_IT+0xa4>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006058:	e028      	b.n	80060ac <UART_Start_Receive_IT+0xa4>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10d      	bne.n	800607e <UART_Start_Receive_IT+0x76>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d104      	bne.n	8006074 <UART_Start_Receive_IT+0x6c>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	22ff      	movs	r2, #255	; 0xff
 800606e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006072:	e01b      	b.n	80060ac <UART_Start_Receive_IT+0xa4>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	227f      	movs	r2, #127	; 0x7f
 8006078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800607c:	e016      	b.n	80060ac <UART_Start_Receive_IT+0xa4>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006086:	d10d      	bne.n	80060a4 <UART_Start_Receive_IT+0x9c>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <UART_Start_Receive_IT+0x92>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	227f      	movs	r2, #127	; 0x7f
 8006094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006098:	e008      	b.n	80060ac <UART_Start_Receive_IT+0xa4>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	223f      	movs	r2, #63	; 0x3f
 800609e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060a2:	e003      	b.n	80060ac <UART_Start_Receive_IT+0xa4>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2222      	movs	r2, #34	; 0x22
 80060b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	657b      	str	r3, [r7, #84]	; 0x54
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060da:	64ba      	str	r2, [r7, #72]	; 0x48
 80060dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d107      	bne.n	8006108 <UART_Start_Receive_IT+0x100>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a24      	ldr	r2, [pc, #144]	; (8006194 <UART_Start_Receive_IT+0x18c>)
 8006104:	665a      	str	r2, [r3, #100]	; 0x64
 8006106:	e002      	b.n	800610e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4a23      	ldr	r2, [pc, #140]	; (8006198 <UART_Start_Receive_IT+0x190>)
 800610c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d019      	beq.n	8006152 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e6      	bne.n	800611e <UART_Start_Receive_IT+0x116>
 8006150:	e018      	b.n	8006184 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f043 0320 	orr.w	r3, r3, #32
 8006166:	653b      	str	r3, [r7, #80]	; 0x50
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	61bb      	str	r3, [r7, #24]
   return(result);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	375c      	adds	r7, #92	; 0x5c
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	080065b5 	.word	0x080065b5
 8006198:	08006459 	.word	0x08006459

0800619c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b095      	sub	sp, #84	; 0x54
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c2:	643b      	str	r3, [r7, #64]	; 0x40
 80061c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e6      	bne.n	80061a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3308      	adds	r3, #8
 80061dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e5      	bne.n	80061d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620e:	2b01      	cmp	r3, #1
 8006210:	d118      	bne.n	8006244 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f023 0310 	bic.w	r3, r3, #16
 8006226:	647b      	str	r3, [r7, #68]	; 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e6      	bne.n	8006212 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006256:	bf00      	nop
 8006258:	3754      	adds	r7, #84	; 0x54
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff faaf 	bl	80057e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800628e:	b480      	push	{r7}
 8006290:	b08f      	sub	sp, #60	; 0x3c
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629a:	2b21      	cmp	r3, #33	; 0x21
 800629c:	d14c      	bne.n	8006338 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d132      	bne.n	8006310 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e6      	bne.n	80062aa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f0:	633b      	str	r3, [r7, #48]	; 0x30
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	613b      	str	r3, [r7, #16]
   return(result);
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e6      	bne.n	80062dc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800630e:	e013      	b.n	8006338 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006338:	bf00      	nop
 800633a:	373c      	adds	r7, #60	; 0x3c
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b091      	sub	sp, #68	; 0x44
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006350:	2b21      	cmp	r3, #33	; 0x21
 8006352:	d151      	bne.n	80063f8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d132      	bne.n	80063c6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	623b      	str	r3, [r7, #32]
   return(result);
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	633b      	str	r3, [r7, #48]	; 0x30
 8006380:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a6:	637b      	str	r3, [r7, #52]	; 0x34
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	69b9      	ldr	r1, [r7, #24]
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	617b      	str	r3, [r7, #20]
   return(result);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80063c4:	e018      	b.n	80063f8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80063f8:	bf00      	nop
 80063fa:	3744      	adds	r7, #68	; 0x44
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	60bb      	str	r3, [r7, #8]
   return(result);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	613b      	str	r3, [r7, #16]
   return(result);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e6      	bne.n	800640c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fb ff1c 	bl	8002288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006450:	bf00      	nop
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b096      	sub	sp, #88	; 0x58
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006466:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646e:	2b22      	cmp	r3, #34	; 0x22
 8006470:	f040 8094 	bne.w	800659c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800647e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006482:	b2d9      	uxtb	r1, r3
 8006484:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006488:	b2da      	uxtb	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	400a      	ands	r2, r1
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d177      	bne.n	80065ac <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d0:	653b      	str	r3, [r7, #80]	; 0x50
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064da:	647b      	str	r3, [r7, #68]	; 0x44
 80064dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e6      	bne.n	80064bc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3308      	adds	r3, #8
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	623b      	str	r3, [r7, #32]
   return(result);
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800650e:	633a      	str	r2, [r7, #48]	; 0x30
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e5      	bne.n	80064ee <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006532:	2b01      	cmp	r3, #1
 8006534:	d12e      	bne.n	8006594 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	60fb      	str	r3, [r7, #12]
   return(result);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f023 0310 	bic.w	r3, r3, #16
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	69b9      	ldr	r1, [r7, #24]
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	617b      	str	r3, [r7, #20]
   return(result);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e6      	bne.n	800653c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b10      	cmp	r3, #16
 800657a:	d103      	bne.n	8006584 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2210      	movs	r2, #16
 8006582:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff f933 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006592:	e00b      	b.n	80065ac <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fb fc0d 	bl	8001db4 <HAL_UART_RxCpltCallback>
}
 800659a:	e007      	b.n	80065ac <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0208 	orr.w	r2, r2, #8
 80065aa:	619a      	str	r2, [r3, #24]
}
 80065ac:	bf00      	nop
 80065ae:	3758      	adds	r7, #88	; 0x58
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b096      	sub	sp, #88	; 0x58
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ca:	2b22      	cmp	r3, #34	; 0x22
 80065cc:	f040 8094 	bne.w	80066f8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80065e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80065e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065e8:	4013      	ands	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	1c9a      	adds	r2, r3, #2
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d177      	bne.n	8006708 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006620:	e853 3f00 	ldrex	r3, [r3]
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	643b      	str	r3, [r7, #64]	; 0x40
 8006638:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800663c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e6      	bne.n	8006618 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	61fb      	str	r3, [r7, #28]
   return(result);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	64bb      	str	r3, [r7, #72]	; 0x48
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3308      	adds	r3, #8
 8006668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800666a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e5      	bne.n	800664a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2220      	movs	r2, #32
 8006682:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668e:	2b01      	cmp	r3, #1
 8006690:	d12e      	bne.n	80066f0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0310 	bic.w	r3, r3, #16
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	6979      	ldr	r1, [r7, #20]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e6      	bne.n	8006698 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f003 0310 	and.w	r3, r3, #16
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d103      	bne.n	80066e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2210      	movs	r2, #16
 80066de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff f885 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066ee:	e00b      	b.n	8006708 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fb fb5f 	bl	8001db4 <HAL_UART_RxCpltCallback>
}
 80066f6:	e007      	b.n	8006708 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0208 	orr.w	r2, r2, #8
 8006706:	619a      	str	r2, [r3, #24]
}
 8006708:	bf00      	nop
 800670a:	3758      	adds	r7, #88	; 0x58
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <atoi>:
 8006710:	220a      	movs	r2, #10
 8006712:	2100      	movs	r1, #0
 8006714:	f000 bb48 	b.w	8006da8 <strtol>

08006718 <__errno>:
 8006718:	4b01      	ldr	r3, [pc, #4]	; (8006720 <__errno+0x8>)
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000018 	.word	0x20000018

08006724 <__libc_init_array>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	4d0d      	ldr	r5, [pc, #52]	; (800675c <__libc_init_array+0x38>)
 8006728:	4c0d      	ldr	r4, [pc, #52]	; (8006760 <__libc_init_array+0x3c>)
 800672a:	1b64      	subs	r4, r4, r5
 800672c:	10a4      	asrs	r4, r4, #2
 800672e:	2600      	movs	r6, #0
 8006730:	42a6      	cmp	r6, r4
 8006732:	d109      	bne.n	8006748 <__libc_init_array+0x24>
 8006734:	4d0b      	ldr	r5, [pc, #44]	; (8006764 <__libc_init_array+0x40>)
 8006736:	4c0c      	ldr	r4, [pc, #48]	; (8006768 <__libc_init_array+0x44>)
 8006738:	f007 fd78 	bl	800e22c <_init>
 800673c:	1b64      	subs	r4, r4, r5
 800673e:	10a4      	asrs	r4, r4, #2
 8006740:	2600      	movs	r6, #0
 8006742:	42a6      	cmp	r6, r4
 8006744:	d105      	bne.n	8006752 <__libc_init_array+0x2e>
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	f855 3b04 	ldr.w	r3, [r5], #4
 800674c:	4798      	blx	r3
 800674e:	3601      	adds	r6, #1
 8006750:	e7ee      	b.n	8006730 <__libc_init_array+0xc>
 8006752:	f855 3b04 	ldr.w	r3, [r5], #4
 8006756:	4798      	blx	r3
 8006758:	3601      	adds	r6, #1
 800675a:	e7f2      	b.n	8006742 <__libc_init_array+0x1e>
 800675c:	0800e838 	.word	0x0800e838
 8006760:	0800e838 	.word	0x0800e838
 8006764:	0800e838 	.word	0x0800e838
 8006768:	0800e840 	.word	0x0800e840

0800676c <memset>:
 800676c:	4402      	add	r2, r0
 800676e:	4603      	mov	r3, r0
 8006770:	4293      	cmp	r3, r2
 8006772:	d100      	bne.n	8006776 <memset+0xa>
 8006774:	4770      	bx	lr
 8006776:	f803 1b01 	strb.w	r1, [r3], #1
 800677a:	e7f9      	b.n	8006770 <memset+0x4>

0800677c <validate_structure>:
 800677c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800677e:	6801      	ldr	r1, [r0, #0]
 8006780:	293b      	cmp	r1, #59	; 0x3b
 8006782:	4604      	mov	r4, r0
 8006784:	d911      	bls.n	80067aa <validate_structure+0x2e>
 8006786:	223c      	movs	r2, #60	; 0x3c
 8006788:	4668      	mov	r0, sp
 800678a:	f002 f82b 	bl	80087e4 <div>
 800678e:	9a01      	ldr	r2, [sp, #4]
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	9900      	ldr	r1, [sp, #0]
 8006794:	2a00      	cmp	r2, #0
 8006796:	440b      	add	r3, r1
 8006798:	6063      	str	r3, [r4, #4]
 800679a:	bfbb      	ittet	lt
 800679c:	323c      	addlt	r2, #60	; 0x3c
 800679e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80067a2:	6022      	strge	r2, [r4, #0]
 80067a4:	6022      	strlt	r2, [r4, #0]
 80067a6:	bfb8      	it	lt
 80067a8:	6063      	strlt	r3, [r4, #4]
 80067aa:	6861      	ldr	r1, [r4, #4]
 80067ac:	293b      	cmp	r1, #59	; 0x3b
 80067ae:	d911      	bls.n	80067d4 <validate_structure+0x58>
 80067b0:	223c      	movs	r2, #60	; 0x3c
 80067b2:	4668      	mov	r0, sp
 80067b4:	f002 f816 	bl	80087e4 <div>
 80067b8:	9a01      	ldr	r2, [sp, #4]
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	9900      	ldr	r1, [sp, #0]
 80067be:	2a00      	cmp	r2, #0
 80067c0:	440b      	add	r3, r1
 80067c2:	60a3      	str	r3, [r4, #8]
 80067c4:	bfbb      	ittet	lt
 80067c6:	323c      	addlt	r2, #60	; 0x3c
 80067c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80067cc:	6062      	strge	r2, [r4, #4]
 80067ce:	6062      	strlt	r2, [r4, #4]
 80067d0:	bfb8      	it	lt
 80067d2:	60a3      	strlt	r3, [r4, #8]
 80067d4:	68a1      	ldr	r1, [r4, #8]
 80067d6:	2917      	cmp	r1, #23
 80067d8:	d911      	bls.n	80067fe <validate_structure+0x82>
 80067da:	2218      	movs	r2, #24
 80067dc:	4668      	mov	r0, sp
 80067de:	f002 f801 	bl	80087e4 <div>
 80067e2:	9a01      	ldr	r2, [sp, #4]
 80067e4:	68e3      	ldr	r3, [r4, #12]
 80067e6:	9900      	ldr	r1, [sp, #0]
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	440b      	add	r3, r1
 80067ec:	60e3      	str	r3, [r4, #12]
 80067ee:	bfbb      	ittet	lt
 80067f0:	3218      	addlt	r2, #24
 80067f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80067f6:	60a2      	strge	r2, [r4, #8]
 80067f8:	60a2      	strlt	r2, [r4, #8]
 80067fa:	bfb8      	it	lt
 80067fc:	60e3      	strlt	r3, [r4, #12]
 80067fe:	6921      	ldr	r1, [r4, #16]
 8006800:	290b      	cmp	r1, #11
 8006802:	d911      	bls.n	8006828 <validate_structure+0xac>
 8006804:	220c      	movs	r2, #12
 8006806:	4668      	mov	r0, sp
 8006808:	f001 ffec 	bl	80087e4 <div>
 800680c:	9a01      	ldr	r2, [sp, #4]
 800680e:	6963      	ldr	r3, [r4, #20]
 8006810:	9900      	ldr	r1, [sp, #0]
 8006812:	2a00      	cmp	r2, #0
 8006814:	440b      	add	r3, r1
 8006816:	6163      	str	r3, [r4, #20]
 8006818:	bfbb      	ittet	lt
 800681a:	320c      	addlt	r2, #12
 800681c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8006820:	6122      	strge	r2, [r4, #16]
 8006822:	6122      	strlt	r2, [r4, #16]
 8006824:	bfb8      	it	lt
 8006826:	6163      	strlt	r3, [r4, #20]
 8006828:	6963      	ldr	r3, [r4, #20]
 800682a:	0799      	lsls	r1, r3, #30
 800682c:	d120      	bne.n	8006870 <validate_structure+0xf4>
 800682e:	2164      	movs	r1, #100	; 0x64
 8006830:	fb93 f2f1 	sdiv	r2, r3, r1
 8006834:	fb01 3212 	mls	r2, r1, r2, r3
 8006838:	b9e2      	cbnz	r2, 8006874 <validate_structure+0xf8>
 800683a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800683e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006842:	fb93 f2f1 	sdiv	r2, r3, r1
 8006846:	fb01 3312 	mls	r3, r1, r2, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	231c      	movne	r3, #28
 8006850:	231d      	moveq	r3, #29
 8006852:	68e2      	ldr	r2, [r4, #12]
 8006854:	2a00      	cmp	r2, #0
 8006856:	dc0f      	bgt.n	8006878 <validate_structure+0xfc>
 8006858:	4f33      	ldr	r7, [pc, #204]	; (8006928 <validate_structure+0x1ac>)
 800685a:	260b      	movs	r6, #11
 800685c:	2064      	movs	r0, #100	; 0x64
 800685e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8006862:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006866:	f1bc 0f00 	cmp.w	ip, #0
 800686a:	dd31      	ble.n	80068d0 <validate_structure+0x154>
 800686c:	b003      	add	sp, #12
 800686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006870:	231c      	movs	r3, #28
 8006872:	e7ee      	b.n	8006852 <validate_structure+0xd6>
 8006874:	231d      	movs	r3, #29
 8006876:	e7ec      	b.n	8006852 <validate_structure+0xd6>
 8006878:	4f2b      	ldr	r7, [pc, #172]	; (8006928 <validate_structure+0x1ac>)
 800687a:	f04f 0c00 	mov.w	ip, #0
 800687e:	2564      	movs	r5, #100	; 0x64
 8006880:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8006884:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8006888:	2a01      	cmp	r2, #1
 800688a:	bf14      	ite	ne
 800688c:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8006890:	4618      	moveq	r0, r3
 8006892:	4281      	cmp	r1, r0
 8006894:	ddea      	ble.n	800686c <validate_structure+0xf0>
 8006896:	3201      	adds	r2, #1
 8006898:	1a09      	subs	r1, r1, r0
 800689a:	2a0c      	cmp	r2, #12
 800689c:	60e1      	str	r1, [r4, #12]
 800689e:	6122      	str	r2, [r4, #16]
 80068a0:	d1f0      	bne.n	8006884 <validate_structure+0x108>
 80068a2:	6963      	ldr	r3, [r4, #20]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	0791      	lsls	r1, r2, #30
 80068a8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80068ac:	d137      	bne.n	800691e <validate_structure+0x1a2>
 80068ae:	fb92 f1f5 	sdiv	r1, r2, r5
 80068b2:	fb05 2211 	mls	r2, r5, r1, r2
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	d133      	bne.n	8006922 <validate_structure+0x1a6>
 80068ba:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80068be:	fb93 f2f6 	sdiv	r2, r3, r6
 80068c2:	fb06 3312 	mls	r3, r6, r2, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	bf14      	ite	ne
 80068ca:	231c      	movne	r3, #28
 80068cc:	231d      	moveq	r3, #29
 80068ce:	e7d9      	b.n	8006884 <validate_structure+0x108>
 80068d0:	6921      	ldr	r1, [r4, #16]
 80068d2:	3901      	subs	r1, #1
 80068d4:	6121      	str	r1, [r4, #16]
 80068d6:	3101      	adds	r1, #1
 80068d8:	d114      	bne.n	8006904 <validate_structure+0x188>
 80068da:	6963      	ldr	r3, [r4, #20]
 80068dc:	1e59      	subs	r1, r3, #1
 80068de:	078a      	lsls	r2, r1, #30
 80068e0:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80068e4:	d117      	bne.n	8006916 <validate_structure+0x19a>
 80068e6:	fb91 f2f0 	sdiv	r2, r1, r0
 80068ea:	fb00 1112 	mls	r1, r0, r2, r1
 80068ee:	b9a1      	cbnz	r1, 800691a <validate_structure+0x19e>
 80068f0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80068f4:	fb93 f2f5 	sdiv	r2, r3, r5
 80068f8:	fb05 3312 	mls	r3, r5, r2, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	231c      	movne	r3, #28
 8006902:	231d      	moveq	r3, #29
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	2a01      	cmp	r2, #1
 8006908:	bf14      	ite	ne
 800690a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800690e:	461a      	moveq	r2, r3
 8006910:	4462      	add	r2, ip
 8006912:	60e2      	str	r2, [r4, #12]
 8006914:	e7a5      	b.n	8006862 <validate_structure+0xe6>
 8006916:	231c      	movs	r3, #28
 8006918:	e7f4      	b.n	8006904 <validate_structure+0x188>
 800691a:	231d      	movs	r3, #29
 800691c:	e7f2      	b.n	8006904 <validate_structure+0x188>
 800691e:	231c      	movs	r3, #28
 8006920:	e7b0      	b.n	8006884 <validate_structure+0x108>
 8006922:	231d      	movs	r3, #29
 8006924:	e7ae      	b.n	8006884 <validate_structure+0x108>
 8006926:	bf00      	nop
 8006928:	0800e338 	.word	0x0800e338

0800692c <mktime>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	b08b      	sub	sp, #44	; 0x2c
 8006932:	4605      	mov	r5, r0
 8006934:	f003 f878 	bl	8009a28 <__gettzinfo>
 8006938:	4607      	mov	r7, r0
 800693a:	4628      	mov	r0, r5
 800693c:	f7ff ff1e 	bl	800677c <validate_structure>
 8006940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006944:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8006948:	68a8      	ldr	r0, [r5, #8]
 800694a:	696e      	ldr	r6, [r5, #20]
 800694c:	fb0a 2303 	mla	r3, sl, r3, r2
 8006950:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8006954:	fb0a 3a00 	mla	sl, sl, r0, r3
 8006958:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 800695c:	4ac3      	ldr	r2, [pc, #780]	; (8006c6c <mktime+0x340>)
 800695e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006962:	3c01      	subs	r4, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	4414      	add	r4, r2
 8006968:	dd11      	ble.n	800698e <mktime+0x62>
 800696a:	07b1      	lsls	r1, r6, #30
 800696c:	d10f      	bne.n	800698e <mktime+0x62>
 800696e:	2264      	movs	r2, #100	; 0x64
 8006970:	fb96 f3f2 	sdiv	r3, r6, r2
 8006974:	fb02 6313 	mls	r3, r2, r3, r6
 8006978:	b943      	cbnz	r3, 800698c <mktime+0x60>
 800697a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800697e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006982:	fb91 f3f2 	sdiv	r3, r1, r2
 8006986:	fb02 1313 	mls	r3, r2, r3, r1
 800698a:	b903      	cbnz	r3, 800698e <mktime+0x62>
 800698c:	3401      	adds	r4, #1
 800698e:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8006992:	3310      	adds	r3, #16
 8006994:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006998:	4293      	cmp	r3, r2
 800699a:	61ec      	str	r4, [r5, #28]
 800699c:	f200 8161 	bhi.w	8006c62 <mktime+0x336>
 80069a0:	2e46      	cmp	r6, #70	; 0x46
 80069a2:	dd77      	ble.n	8006a94 <mktime+0x168>
 80069a4:	2346      	movs	r3, #70	; 0x46
 80069a6:	f240 1e6d 	movw	lr, #365	; 0x16d
 80069aa:	2164      	movs	r1, #100	; 0x64
 80069ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80069b0:	079a      	lsls	r2, r3, #30
 80069b2:	d169      	bne.n	8006a88 <mktime+0x15c>
 80069b4:	fb93 f2f1 	sdiv	r2, r3, r1
 80069b8:	fb01 3212 	mls	r2, r1, r2, r3
 80069bc:	2a00      	cmp	r2, #0
 80069be:	d166      	bne.n	8006a8e <mktime+0x162>
 80069c0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80069c4:	fb9c f2f0 	sdiv	r2, ip, r0
 80069c8:	fb00 c212 	mls	r2, r0, r2, ip
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	bf14      	ite	ne
 80069d0:	4672      	movne	r2, lr
 80069d2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80069d6:	3301      	adds	r3, #1
 80069d8:	429e      	cmp	r6, r3
 80069da:	4414      	add	r4, r2
 80069dc:	d1e8      	bne.n	80069b0 <mktime+0x84>
 80069de:	4ba4      	ldr	r3, [pc, #656]	; (8006c70 <mktime+0x344>)
 80069e0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80069e4:	fbc3 ab04 	smlal	sl, fp, r3, r4
 80069e8:	f000 fa90 	bl	8006f0c <__tz_lock>
 80069ec:	f000 fa9a 	bl	8006f24 <_tzset_unlocked>
 80069f0:	4ba0      	ldr	r3, [pc, #640]	; (8006c74 <mktime+0x348>)
 80069f2:	f8d3 9000 	ldr.w	r9, [r3]
 80069f6:	f1b9 0f00 	cmp.w	r9, #0
 80069fa:	d03f      	beq.n	8006a7c <mktime+0x150>
 80069fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006a00:	6968      	ldr	r0, [r5, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f1b9 0f01 	cmp.w	r9, #1
 8006a08:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006a0c:	46c8      	mov	r8, r9
 8006a0e:	bfa8      	it	ge
 8006a10:	f04f 0801 	movge.w	r8, #1
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d17f      	bne.n	8006b18 <mktime+0x1ec>
 8006a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	17da      	asrs	r2, r3, #31
 8006a1e:	e9cd 1200 	strd	r1, r2, [sp]
 8006a22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a26:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a30:	1a80      	subs	r0, r0, r2
 8006a32:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8006a36:	4582      	cmp	sl, r0
 8006a38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a3c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006a40:	da71      	bge.n	8006b26 <mktime+0x1fa>
 8006a42:	9800      	ldr	r0, [sp, #0]
 8006a44:	6a39      	ldr	r1, [r7, #32]
 8006a46:	1a09      	subs	r1, r1, r0
 8006a48:	9104      	str	r1, [sp, #16]
 8006a4a:	9801      	ldr	r0, [sp, #4]
 8006a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a4e:	eb61 0100 	sbc.w	r1, r1, r0
 8006a52:	9105      	str	r1, [sp, #20]
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	2900      	cmp	r1, #0
 8006a58:	d075      	beq.n	8006b46 <mktime+0x21a>
 8006a5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a5e:	4582      	cmp	sl, r0
 8006a60:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006a64:	db05      	blt.n	8006a72 <mktime+0x146>
 8006a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a6a:	4582      	cmp	sl, r0
 8006a6c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006a70:	db6f      	blt.n	8006b52 <mktime+0x226>
 8006a72:	f1b9 0f00 	cmp.w	r9, #0
 8006a76:	f04f 0900 	mov.w	r9, #0
 8006a7a:	da6f      	bge.n	8006b5c <mktime+0x230>
 8006a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7e:	eb1a 0a03 	adds.w	sl, sl, r3
 8006a82:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8006a86:	e0ae      	b.n	8006be6 <mktime+0x2ba>
 8006a88:	f240 126d 	movw	r2, #365	; 0x16d
 8006a8c:	e7a3      	b.n	80069d6 <mktime+0xaa>
 8006a8e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006a92:	e7a0      	b.n	80069d6 <mktime+0xaa>
 8006a94:	d0a3      	beq.n	80069de <mktime+0xb2>
 8006a96:	2345      	movs	r3, #69	; 0x45
 8006a98:	f240 1e6d 	movw	lr, #365	; 0x16d
 8006a9c:	2164      	movs	r1, #100	; 0x64
 8006a9e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006aa2:	e012      	b.n	8006aca <mktime+0x19e>
 8006aa4:	bb62      	cbnz	r2, 8006b00 <mktime+0x1d4>
 8006aa6:	fb93 f2f1 	sdiv	r2, r3, r1
 8006aaa:	fb01 3212 	mls	r2, r1, r2, r3
 8006aae:	bb52      	cbnz	r2, 8006b06 <mktime+0x1da>
 8006ab0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8006ab4:	fb9c f2f0 	sdiv	r2, ip, r0
 8006ab8:	fb00 c212 	mls	r2, r0, r2, ip
 8006abc:	2a00      	cmp	r2, #0
 8006abe:	bf14      	ite	ne
 8006ac0:	4672      	movne	r2, lr
 8006ac2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8006ac6:	1aa4      	subs	r4, r4, r2
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	429e      	cmp	r6, r3
 8006acc:	f003 0203 	and.w	r2, r3, #3
 8006ad0:	dbe8      	blt.n	8006aa4 <mktime+0x178>
 8006ad2:	b9da      	cbnz	r2, 8006b0c <mktime+0x1e0>
 8006ad4:	2264      	movs	r2, #100	; 0x64
 8006ad6:	fb96 f3f2 	sdiv	r3, r6, r2
 8006ada:	fb02 6313 	mls	r3, r2, r3, r6
 8006ade:	b9c3      	cbnz	r3, 8006b12 <mktime+0x1e6>
 8006ae0:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8006ae4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ae8:	fb91 f3f2 	sdiv	r3, r1, r2
 8006aec:	fb02 1313 	mls	r3, r2, r3, r1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f240 136d 	movw	r3, #365	; 0x16d
 8006af6:	bf08      	it	eq
 8006af8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8006afc:	1ae4      	subs	r4, r4, r3
 8006afe:	e76e      	b.n	80069de <mktime+0xb2>
 8006b00:	f240 126d 	movw	r2, #365	; 0x16d
 8006b04:	e7df      	b.n	8006ac6 <mktime+0x19a>
 8006b06:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006b0a:	e7dc      	b.n	8006ac6 <mktime+0x19a>
 8006b0c:	f240 136d 	movw	r3, #365	; 0x16d
 8006b10:	e7f4      	b.n	8006afc <mktime+0x1d0>
 8006b12:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8006b16:	e7f1      	b.n	8006afc <mktime+0x1d0>
 8006b18:	f000 f950 	bl	8006dbc <__tzcalc_limits>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f47f af7b 	bne.w	8006a18 <mktime+0xec>
 8006b22:	46c1      	mov	r9, r8
 8006b24:	e054      	b.n	8006bd0 <mktime+0x2a4>
 8006b26:	9800      	ldr	r0, [sp, #0]
 8006b28:	9902      	ldr	r1, [sp, #8]
 8006b2a:	1a09      	subs	r1, r1, r0
 8006b2c:	9108      	str	r1, [sp, #32]
 8006b2e:	9801      	ldr	r0, [sp, #4]
 8006b30:	9903      	ldr	r1, [sp, #12]
 8006b32:	eb61 0100 	sbc.w	r1, r1, r0
 8006b36:	9109      	str	r1, [sp, #36]	; 0x24
 8006b38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b3c:	4582      	cmp	sl, r0
 8006b3e:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006b42:	dbee      	blt.n	8006b22 <mktime+0x1f6>
 8006b44:	e77d      	b.n	8006a42 <mktime+0x116>
 8006b46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b4a:	4582      	cmp	sl, r0
 8006b4c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006b50:	db89      	blt.n	8006a66 <mktime+0x13a>
 8006b52:	f1b9 0f00 	cmp.w	r9, #0
 8006b56:	db3f      	blt.n	8006bd8 <mktime+0x2ac>
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	ea88 0809 	eor.w	r8, r8, r9
 8006b60:	f1b8 0f01 	cmp.w	r8, #1
 8006b64:	d134      	bne.n	8006bd0 <mktime+0x2a4>
 8006b66:	f1b9 0f00 	cmp.w	r9, #0
 8006b6a:	d04f      	beq.n	8006c0c <mktime+0x2e0>
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	682a      	ldr	r2, [r5, #0]
 8006b70:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006b74:	441a      	add	r2, r3
 8006b76:	eb1a 0a03 	adds.w	sl, sl, r3
 8006b7a:	602a      	str	r2, [r5, #0]
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8006b82:	f7ff fdfb 	bl	800677c <validate_structure>
 8006b86:	68ea      	ldr	r2, [r5, #12]
 8006b88:	ebb2 0208 	subs.w	r2, r2, r8
 8006b8c:	d020      	beq.n	8006bd0 <mktime+0x2a4>
 8006b8e:	2a01      	cmp	r2, #1
 8006b90:	dc3e      	bgt.n	8006c10 <mktime+0x2e4>
 8006b92:	1c90      	adds	r0, r2, #2
 8006b94:	bfd8      	it	le
 8006b96:	2201      	movle	r2, #1
 8006b98:	69eb      	ldr	r3, [r5, #28]
 8006b9a:	18d3      	adds	r3, r2, r3
 8006b9c:	4414      	add	r4, r2
 8006b9e:	d540      	bpl.n	8006c22 <mktime+0x2f6>
 8006ba0:	1e72      	subs	r2, r6, #1
 8006ba2:	0791      	lsls	r1, r2, #30
 8006ba4:	d137      	bne.n	8006c16 <mktime+0x2ea>
 8006ba6:	2164      	movs	r1, #100	; 0x64
 8006ba8:	fb92 f3f1 	sdiv	r3, r2, r1
 8006bac:	fb01 2313 	mls	r3, r1, r3, r2
 8006bb0:	bba3      	cbnz	r3, 8006c1c <mktime+0x2f0>
 8006bb2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8006bb6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006bba:	fb96 f3f2 	sdiv	r3, r6, r2
 8006bbe:	fb02 6613 	mls	r6, r2, r3, r6
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	f240 136d 	movw	r3, #365	; 0x16d
 8006bc8:	bf18      	it	ne
 8006bca:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8006bce:	61eb      	str	r3, [r5, #28]
 8006bd0:	f1b9 0f01 	cmp.w	r9, #1
 8006bd4:	f47f af52 	bne.w	8006a7c <mktime+0x150>
 8006bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bda:	eb1a 0a03 	adds.w	sl, sl, r3
 8006bde:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8006be2:	f04f 0901 	mov.w	r9, #1
 8006be6:	f000 f997 	bl	8006f18 <__tz_unlock>
 8006bea:	3404      	adds	r4, #4
 8006bec:	2307      	movs	r3, #7
 8006bee:	fb94 f3f3 	sdiv	r3, r4, r3
 8006bf2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006bf6:	1ae4      	subs	r4, r4, r3
 8006bf8:	bf48      	it	mi
 8006bfa:	3407      	addmi	r4, #7
 8006bfc:	f8c5 9020 	str.w	r9, [r5, #32]
 8006c00:	61ac      	str	r4, [r5, #24]
 8006c02:	4650      	mov	r0, sl
 8006c04:	4659      	mov	r1, fp
 8006c06:	b00b      	add	sp, #44	; 0x2c
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	e7ae      	b.n	8006b6e <mktime+0x242>
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	e7c0      	b.n	8006b98 <mktime+0x26c>
 8006c16:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8006c1a:	e7d8      	b.n	8006bce <mktime+0x2a2>
 8006c1c:	f240 136d 	movw	r3, #365	; 0x16d
 8006c20:	e7d5      	b.n	8006bce <mktime+0x2a2>
 8006c22:	07b2      	lsls	r2, r6, #30
 8006c24:	d117      	bne.n	8006c56 <mktime+0x32a>
 8006c26:	2164      	movs	r1, #100	; 0x64
 8006c28:	fb96 f2f1 	sdiv	r2, r6, r1
 8006c2c:	fb01 6212 	mls	r2, r1, r2, r6
 8006c30:	b9a2      	cbnz	r2, 8006c5c <mktime+0x330>
 8006c32:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8006c36:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006c3a:	fb96 f2f1 	sdiv	r2, r6, r1
 8006c3e:	fb01 6612 	mls	r6, r1, r2, r6
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	f240 126d 	movw	r2, #365	; 0x16d
 8006c48:	bf08      	it	eq
 8006c4a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	bfa8      	it	ge
 8006c52:	1a9b      	subge	r3, r3, r2
 8006c54:	e7bb      	b.n	8006bce <mktime+0x2a2>
 8006c56:	f240 126d 	movw	r2, #365	; 0x16d
 8006c5a:	e7f8      	b.n	8006c4e <mktime+0x322>
 8006c5c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006c60:	e7f5      	b.n	8006c4e <mktime+0x322>
 8006c62:	f04f 3aff 	mov.w	sl, #4294967295
 8006c66:	f04f 3bff 	mov.w	fp, #4294967295
 8006c6a:	e7ca      	b.n	8006c02 <mktime+0x2d6>
 8006c6c:	0800e368 	.word	0x0800e368
 8006c70:	00015180 	.word	0x00015180
 8006c74:	20000ab4 	.word	0x20000ab4

08006c78 <printf>:
 8006c78:	b40f      	push	{r0, r1, r2, r3}
 8006c7a:	b507      	push	{r0, r1, r2, lr}
 8006c7c:	4906      	ldr	r1, [pc, #24]	; (8006c98 <printf+0x20>)
 8006c7e:	ab04      	add	r3, sp, #16
 8006c80:	6808      	ldr	r0, [r1, #0]
 8006c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c86:	6881      	ldr	r1, [r0, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	f000 facd 	bl	8007228 <_vfprintf_r>
 8006c8e:	b003      	add	sp, #12
 8006c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c94:	b004      	add	sp, #16
 8006c96:	4770      	bx	lr
 8006c98:	20000018 	.word	0x20000018

08006c9c <_strtol_l.isra.0>:
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca2:	d001      	beq.n	8006ca8 <_strtol_l.isra.0+0xc>
 8006ca4:	2b24      	cmp	r3, #36	; 0x24
 8006ca6:	d906      	bls.n	8006cb6 <_strtol_l.isra.0+0x1a>
 8006ca8:	f7ff fd36 	bl	8006718 <__errno>
 8006cac:	2316      	movs	r3, #22
 8006cae:	6003      	str	r3, [r0, #0]
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb6:	4f3a      	ldr	r7, [pc, #232]	; (8006da0 <_strtol_l.isra.0+0x104>)
 8006cb8:	468e      	mov	lr, r1
 8006cba:	4676      	mov	r6, lr
 8006cbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006cc0:	5de5      	ldrb	r5, [r4, r7]
 8006cc2:	f015 0508 	ands.w	r5, r5, #8
 8006cc6:	d1f8      	bne.n	8006cba <_strtol_l.isra.0+0x1e>
 8006cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8006cca:	d134      	bne.n	8006d36 <_strtol_l.isra.0+0x9a>
 8006ccc:	f89e 4000 	ldrb.w	r4, [lr]
 8006cd0:	f04f 0801 	mov.w	r8, #1
 8006cd4:	f106 0e02 	add.w	lr, r6, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d05c      	beq.n	8006d96 <_strtol_l.isra.0+0xfa>
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d10c      	bne.n	8006cfa <_strtol_l.isra.0+0x5e>
 8006ce0:	2c30      	cmp	r4, #48	; 0x30
 8006ce2:	d10a      	bne.n	8006cfa <_strtol_l.isra.0+0x5e>
 8006ce4:	f89e 4000 	ldrb.w	r4, [lr]
 8006ce8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006cec:	2c58      	cmp	r4, #88	; 0x58
 8006cee:	d14d      	bne.n	8006d8c <_strtol_l.isra.0+0xf0>
 8006cf0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f10e 0e02 	add.w	lr, lr, #2
 8006cfa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006cfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006d02:	2600      	movs	r6, #0
 8006d04:	fbbc f9f3 	udiv	r9, ip, r3
 8006d08:	4635      	mov	r5, r6
 8006d0a:	fb03 ca19 	mls	sl, r3, r9, ip
 8006d0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006d12:	2f09      	cmp	r7, #9
 8006d14:	d818      	bhi.n	8006d48 <_strtol_l.isra.0+0xac>
 8006d16:	463c      	mov	r4, r7
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	dd24      	ble.n	8006d66 <_strtol_l.isra.0+0xca>
 8006d1c:	2e00      	cmp	r6, #0
 8006d1e:	db1f      	blt.n	8006d60 <_strtol_l.isra.0+0xc4>
 8006d20:	45a9      	cmp	r9, r5
 8006d22:	d31d      	bcc.n	8006d60 <_strtol_l.isra.0+0xc4>
 8006d24:	d101      	bne.n	8006d2a <_strtol_l.isra.0+0x8e>
 8006d26:	45a2      	cmp	sl, r4
 8006d28:	db1a      	blt.n	8006d60 <_strtol_l.isra.0+0xc4>
 8006d2a:	fb05 4503 	mla	r5, r5, r3, r4
 8006d2e:	2601      	movs	r6, #1
 8006d30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006d34:	e7eb      	b.n	8006d0e <_strtol_l.isra.0+0x72>
 8006d36:	2c2b      	cmp	r4, #43	; 0x2b
 8006d38:	bf08      	it	eq
 8006d3a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006d3e:	46a8      	mov	r8, r5
 8006d40:	bf08      	it	eq
 8006d42:	f106 0e02 	addeq.w	lr, r6, #2
 8006d46:	e7c7      	b.n	8006cd8 <_strtol_l.isra.0+0x3c>
 8006d48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006d4c:	2f19      	cmp	r7, #25
 8006d4e:	d801      	bhi.n	8006d54 <_strtol_l.isra.0+0xb8>
 8006d50:	3c37      	subs	r4, #55	; 0x37
 8006d52:	e7e1      	b.n	8006d18 <_strtol_l.isra.0+0x7c>
 8006d54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006d58:	2f19      	cmp	r7, #25
 8006d5a:	d804      	bhi.n	8006d66 <_strtol_l.isra.0+0xca>
 8006d5c:	3c57      	subs	r4, #87	; 0x57
 8006d5e:	e7db      	b.n	8006d18 <_strtol_l.isra.0+0x7c>
 8006d60:	f04f 36ff 	mov.w	r6, #4294967295
 8006d64:	e7e4      	b.n	8006d30 <_strtol_l.isra.0+0x94>
 8006d66:	2e00      	cmp	r6, #0
 8006d68:	da05      	bge.n	8006d76 <_strtol_l.isra.0+0xda>
 8006d6a:	2322      	movs	r3, #34	; 0x22
 8006d6c:	6003      	str	r3, [r0, #0]
 8006d6e:	4665      	mov	r5, ip
 8006d70:	b942      	cbnz	r2, 8006d84 <_strtol_l.isra.0+0xe8>
 8006d72:	4628      	mov	r0, r5
 8006d74:	e79d      	b.n	8006cb2 <_strtol_l.isra.0+0x16>
 8006d76:	f1b8 0f00 	cmp.w	r8, #0
 8006d7a:	d000      	beq.n	8006d7e <_strtol_l.isra.0+0xe2>
 8006d7c:	426d      	negs	r5, r5
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	d0f7      	beq.n	8006d72 <_strtol_l.isra.0+0xd6>
 8006d82:	b10e      	cbz	r6, 8006d88 <_strtol_l.isra.0+0xec>
 8006d84:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006d88:	6011      	str	r1, [r2, #0]
 8006d8a:	e7f2      	b.n	8006d72 <_strtol_l.isra.0+0xd6>
 8006d8c:	2430      	movs	r4, #48	; 0x30
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1b3      	bne.n	8006cfa <_strtol_l.isra.0+0x5e>
 8006d92:	2308      	movs	r3, #8
 8006d94:	e7b1      	b.n	8006cfa <_strtol_l.isra.0+0x5e>
 8006d96:	2c30      	cmp	r4, #48	; 0x30
 8006d98:	d0a4      	beq.n	8006ce4 <_strtol_l.isra.0+0x48>
 8006d9a:	230a      	movs	r3, #10
 8006d9c:	e7ad      	b.n	8006cfa <_strtol_l.isra.0+0x5e>
 8006d9e:	bf00      	nop
 8006da0:	0800e429 	.word	0x0800e429

08006da4 <_strtol_r>:
 8006da4:	f7ff bf7a 	b.w	8006c9c <_strtol_l.isra.0>

08006da8 <strtol>:
 8006da8:	4613      	mov	r3, r2
 8006daa:	460a      	mov	r2, r1
 8006dac:	4601      	mov	r1, r0
 8006dae:	4802      	ldr	r0, [pc, #8]	; (8006db8 <strtol+0x10>)
 8006db0:	6800      	ldr	r0, [r0, #0]
 8006db2:	f7ff bf73 	b.w	8006c9c <_strtol_l.isra.0>
 8006db6:	bf00      	nop
 8006db8:	20000018 	.word	0x20000018

08006dbc <__tzcalc_limits>:
 8006dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	f002 fe31 	bl	8009a28 <__gettzinfo>
 8006dc6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8006dca:	4598      	cmp	r8, r3
 8006dcc:	f340 8098 	ble.w	8006f00 <__tzcalc_limits+0x144>
 8006dd0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006dd4:	4443      	add	r3, r8
 8006dd6:	109b      	asrs	r3, r3, #2
 8006dd8:	f240 126d 	movw	r2, #365	; 0x16d
 8006ddc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8006de0:	fb02 3505 	mla	r5, r2, r5, r3
 8006de4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006de8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8006dec:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df0:	441d      	add	r5, r3
 8006df2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006df6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006dfa:	fb98 f7f3 	sdiv	r7, r8, r3
 8006dfe:	fb03 8717 	mls	r7, r3, r7, r8
 8006e02:	4442      	add	r2, r8
 8006e04:	fab7 fc87 	clz	ip, r7
 8006e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e0c:	f008 0303 	and.w	r3, r8, #3
 8006e10:	4415      	add	r5, r2
 8006e12:	2264      	movs	r2, #100	; 0x64
 8006e14:	f8c0 8004 	str.w	r8, [r0, #4]
 8006e18:	fb98 f6f2 	sdiv	r6, r8, r2
 8006e1c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8006e20:	fb02 8616 	mls	r6, r2, r6, r8
 8006e24:	4604      	mov	r4, r0
 8006e26:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	f04f 0e07 	mov.w	lr, #7
 8006e30:	7a22      	ldrb	r2, [r4, #8]
 8006e32:	6963      	ldr	r3, [r4, #20]
 8006e34:	2a4a      	cmp	r2, #74	; 0x4a
 8006e36:	d128      	bne.n	8006e8a <__tzcalc_limits+0xce>
 8006e38:	9900      	ldr	r1, [sp, #0]
 8006e3a:	18ea      	adds	r2, r5, r3
 8006e3c:	b901      	cbnz	r1, 8006e40 <__tzcalc_limits+0x84>
 8006e3e:	b906      	cbnz	r6, 8006e42 <__tzcalc_limits+0x86>
 8006e40:	bb0f      	cbnz	r7, 8006e86 <__tzcalc_limits+0xca>
 8006e42:	2b3b      	cmp	r3, #59	; 0x3b
 8006e44:	bfd4      	ite	le
 8006e46:	2300      	movle	r3, #0
 8006e48:	2301      	movgt	r3, #1
 8006e4a:	4413      	add	r3, r2
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	69a3      	ldr	r3, [r4, #24]
 8006e50:	492c      	ldr	r1, [pc, #176]	; (8006f04 <__tzcalc_limits+0x148>)
 8006e52:	fb01 3202 	mla	r2, r1, r2, r3
 8006e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e58:	4413      	add	r3, r2
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	17db      	asrs	r3, r3, #31
 8006e5e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8006e62:	3428      	adds	r4, #40	; 0x28
 8006e64:	45a3      	cmp	fp, r4
 8006e66:	d1e3      	bne.n	8006e30 <__tzcalc_limits+0x74>
 8006e68:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8006e6c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8006e70:	4294      	cmp	r4, r2
 8006e72:	eb75 0303 	sbcs.w	r3, r5, r3
 8006e76:	bfb4      	ite	lt
 8006e78:	2301      	movlt	r3, #1
 8006e7a:	2300      	movge	r3, #0
 8006e7c:	6003      	str	r3, [r0, #0]
 8006e7e:	2001      	movs	r0, #1
 8006e80:	b003      	add	sp, #12
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	2300      	movs	r3, #0
 8006e88:	e7df      	b.n	8006e4a <__tzcalc_limits+0x8e>
 8006e8a:	2a44      	cmp	r2, #68	; 0x44
 8006e8c:	d101      	bne.n	8006e92 <__tzcalc_limits+0xd6>
 8006e8e:	18ea      	adds	r2, r5, r3
 8006e90:	e7dd      	b.n	8006e4e <__tzcalc_limits+0x92>
 8006e92:	9a00      	ldr	r2, [sp, #0]
 8006e94:	bb72      	cbnz	r2, 8006ef4 <__tzcalc_limits+0x138>
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	bf0c      	ite	eq
 8006e9a:	46e0      	moveq	r8, ip
 8006e9c:	f04f 0801 	movne.w	r8, #1
 8006ea0:	4919      	ldr	r1, [pc, #100]	; (8006f08 <__tzcalc_limits+0x14c>)
 8006ea2:	68e2      	ldr	r2, [r4, #12]
 8006ea4:	9201      	str	r2, [sp, #4]
 8006ea6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8006eaa:	fb0a 1808 	mla	r8, sl, r8, r1
 8006eae:	462a      	mov	r2, r5
 8006eb0:	f04f 0900 	mov.w	r9, #0
 8006eb4:	f1a8 0804 	sub.w	r8, r8, #4
 8006eb8:	9901      	ldr	r1, [sp, #4]
 8006eba:	f109 0901 	add.w	r9, r9, #1
 8006ebe:	4549      	cmp	r1, r9
 8006ec0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8006ec4:	dc18      	bgt.n	8006ef8 <__tzcalc_limits+0x13c>
 8006ec6:	f102 0804 	add.w	r8, r2, #4
 8006eca:	fb98 f9fe 	sdiv	r9, r8, lr
 8006ece:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8006ed2:	eba8 0909 	sub.w	r9, r8, r9
 8006ed6:	ebb3 0909 	subs.w	r9, r3, r9
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ee0:	bf48      	it	mi
 8006ee2:	f109 0907 	addmi.w	r9, r9, #7
 8006ee6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006eea:	444b      	add	r3, r9
 8006eec:	4553      	cmp	r3, sl
 8006eee:	da05      	bge.n	8006efc <__tzcalc_limits+0x140>
 8006ef0:	441a      	add	r2, r3
 8006ef2:	e7ac      	b.n	8006e4e <__tzcalc_limits+0x92>
 8006ef4:	46e0      	mov	r8, ip
 8006ef6:	e7d3      	b.n	8006ea0 <__tzcalc_limits+0xe4>
 8006ef8:	4452      	add	r2, sl
 8006efa:	e7dd      	b.n	8006eb8 <__tzcalc_limits+0xfc>
 8006efc:	3b07      	subs	r3, #7
 8006efe:	e7f5      	b.n	8006eec <__tzcalc_limits+0x130>
 8006f00:	2000      	movs	r0, #0
 8006f02:	e7bd      	b.n	8006e80 <__tzcalc_limits+0xc4>
 8006f04:	00015180 	.word	0x00015180
 8006f08:	0800e5a8 	.word	0x0800e5a8

08006f0c <__tz_lock>:
 8006f0c:	4801      	ldr	r0, [pc, #4]	; (8006f14 <__tz_lock+0x8>)
 8006f0e:	f002 bd95 	b.w	8009a3c <__retarget_lock_acquire>
 8006f12:	bf00      	nop
 8006f14:	20000cab 	.word	0x20000cab

08006f18 <__tz_unlock>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__tz_unlock+0x8>)
 8006f1a:	f002 bd91 	b.w	8009a40 <__retarget_lock_release>
 8006f1e:	bf00      	nop
 8006f20:	20000cab 	.word	0x20000cab

08006f24 <_tzset_unlocked>:
 8006f24:	4b01      	ldr	r3, [pc, #4]	; (8006f2c <_tzset_unlocked+0x8>)
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	f000 b802 	b.w	8006f30 <_tzset_unlocked_r>
 8006f2c:	20000018 	.word	0x20000018

08006f30 <_tzset_unlocked_r>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	b08d      	sub	sp, #52	; 0x34
 8006f36:	4607      	mov	r7, r0
 8006f38:	f002 fd76 	bl	8009a28 <__gettzinfo>
 8006f3c:	49ae      	ldr	r1, [pc, #696]	; (80071f8 <_tzset_unlocked_r+0x2c8>)
 8006f3e:	4eaf      	ldr	r6, [pc, #700]	; (80071fc <_tzset_unlocked_r+0x2cc>)
 8006f40:	4605      	mov	r5, r0
 8006f42:	4638      	mov	r0, r7
 8006f44:	f002 fd68 	bl	8009a18 <_getenv_r>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	b970      	cbnz	r0, 8006f6a <_tzset_unlocked_r+0x3a>
 8006f4c:	4bac      	ldr	r3, [pc, #688]	; (8007200 <_tzset_unlocked_r+0x2d0>)
 8006f4e:	4aad      	ldr	r2, [pc, #692]	; (8007204 <_tzset_unlocked_r+0x2d4>)
 8006f50:	6018      	str	r0, [r3, #0]
 8006f52:	4bad      	ldr	r3, [pc, #692]	; (8007208 <_tzset_unlocked_r+0x2d8>)
 8006f54:	6018      	str	r0, [r3, #0]
 8006f56:	4bad      	ldr	r3, [pc, #692]	; (800720c <_tzset_unlocked_r+0x2dc>)
 8006f58:	6830      	ldr	r0, [r6, #0]
 8006f5a:	e9c3 2200 	strd	r2, r2, [r3]
 8006f5e:	f002 fde5 	bl	8009b2c <free>
 8006f62:	6034      	str	r4, [r6, #0]
 8006f64:	b00d      	add	sp, #52	; 0x34
 8006f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6a:	6831      	ldr	r1, [r6, #0]
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	d15f      	bne.n	8007030 <_tzset_unlocked_r+0x100>
 8006f70:	6830      	ldr	r0, [r6, #0]
 8006f72:	f002 fddb 	bl	8009b2c <free>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f7f9 f94a 	bl	8000210 <strlen>
 8006f7c:	1c41      	adds	r1, r0, #1
 8006f7e:	4638      	mov	r0, r7
 8006f80:	f002 fddc 	bl	8009b3c <_malloc_r>
 8006f84:	6030      	str	r0, [r6, #0]
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d157      	bne.n	800703a <_tzset_unlocked_r+0x10a>
 8006f8a:	7823      	ldrb	r3, [r4, #0]
 8006f8c:	4aa0      	ldr	r2, [pc, #640]	; (8007210 <_tzset_unlocked_r+0x2e0>)
 8006f8e:	49a1      	ldr	r1, [pc, #644]	; (8007214 <_tzset_unlocked_r+0x2e4>)
 8006f90:	2b3a      	cmp	r3, #58	; 0x3a
 8006f92:	bf08      	it	eq
 8006f94:	3401      	addeq	r4, #1
 8006f96:	ae0a      	add	r6, sp, #40	; 0x28
 8006f98:	4633      	mov	r3, r6
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f003 fba2 	bl	800a6e4 <siscanf>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	dddf      	ble.n	8006f64 <_tzset_unlocked_r+0x34>
 8006fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa6:	18e7      	adds	r7, r4, r3
 8006fa8:	5ce3      	ldrb	r3, [r4, r3]
 8006faa:	2b2d      	cmp	r3, #45	; 0x2d
 8006fac:	d149      	bne.n	8007042 <_tzset_unlocked_r+0x112>
 8006fae:	3701      	adds	r7, #1
 8006fb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006fb4:	f10d 0a20 	add.w	sl, sp, #32
 8006fb8:	f10d 0b1e 	add.w	fp, sp, #30
 8006fbc:	f04f 0800 	mov.w	r8, #0
 8006fc0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006fc4:	4994      	ldr	r1, [pc, #592]	; (8007218 <_tzset_unlocked_r+0x2e8>)
 8006fc6:	9603      	str	r6, [sp, #12]
 8006fc8:	f8cd b000 	str.w	fp, [sp]
 8006fcc:	4633      	mov	r3, r6
 8006fce:	aa07      	add	r2, sp, #28
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006fd6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8006fda:	f003 fb83 	bl	800a6e4 <siscanf>
 8006fde:	4540      	cmp	r0, r8
 8006fe0:	ddc0      	ble.n	8006f64 <_tzset_unlocked_r+0x34>
 8006fe2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006fe6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006fea:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8007224 <_tzset_unlocked_r+0x2f4>
 8006fee:	213c      	movs	r1, #60	; 0x3c
 8006ff0:	fb01 2203 	mla	r2, r1, r3, r2
 8006ff4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006ff8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006ffc:	fb01 2303 	mla	r3, r1, r3, r2
 8007000:	435c      	muls	r4, r3
 8007002:	62ac      	str	r4, [r5, #40]	; 0x28
 8007004:	4c81      	ldr	r4, [pc, #516]	; (800720c <_tzset_unlocked_r+0x2dc>)
 8007006:	4b82      	ldr	r3, [pc, #520]	; (8007210 <_tzset_unlocked_r+0x2e0>)
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800700c:	4981      	ldr	r1, [pc, #516]	; (8007214 <_tzset_unlocked_r+0x2e4>)
 800700e:	441f      	add	r7, r3
 8007010:	464a      	mov	r2, r9
 8007012:	4633      	mov	r3, r6
 8007014:	4638      	mov	r0, r7
 8007016:	f003 fb65 	bl	800a6e4 <siscanf>
 800701a:	4540      	cmp	r0, r8
 800701c:	dc16      	bgt.n	800704c <_tzset_unlocked_r+0x11c>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	4b77      	ldr	r3, [pc, #476]	; (8007200 <_tzset_unlocked_r+0x2d0>)
 8007024:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	4b77      	ldr	r3, [pc, #476]	; (8007208 <_tzset_unlocked_r+0x2d8>)
 800702a:	f8c3 8000 	str.w	r8, [r3]
 800702e:	e799      	b.n	8006f64 <_tzset_unlocked_r+0x34>
 8007030:	f7f9 f946 	bl	80002c0 <strcmp>
 8007034:	2800      	cmp	r0, #0
 8007036:	d19b      	bne.n	8006f70 <_tzset_unlocked_r+0x40>
 8007038:	e794      	b.n	8006f64 <_tzset_unlocked_r+0x34>
 800703a:	4621      	mov	r1, r4
 800703c:	f003 fbc3 	bl	800a7c6 <strcpy>
 8007040:	e7a3      	b.n	8006f8a <_tzset_unlocked_r+0x5a>
 8007042:	2b2b      	cmp	r3, #43	; 0x2b
 8007044:	bf08      	it	eq
 8007046:	3701      	addeq	r7, #1
 8007048:	2401      	movs	r4, #1
 800704a:	e7b3      	b.n	8006fb4 <_tzset_unlocked_r+0x84>
 800704c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704e:	f8c4 9004 	str.w	r9, [r4, #4]
 8007052:	18fc      	adds	r4, r7, r3
 8007054:	5cfb      	ldrb	r3, [r7, r3]
 8007056:	2b2d      	cmp	r3, #45	; 0x2d
 8007058:	f040 808b 	bne.w	8007172 <_tzset_unlocked_r+0x242>
 800705c:	3401      	adds	r4, #1
 800705e:	f04f 37ff 	mov.w	r7, #4294967295
 8007062:	2300      	movs	r3, #0
 8007064:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007068:	f8ad 301e 	strh.w	r3, [sp, #30]
 800706c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007070:	930a      	str	r3, [sp, #40]	; 0x28
 8007072:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007076:	e9cd b600 	strd	fp, r6, [sp]
 800707a:	4967      	ldr	r1, [pc, #412]	; (8007218 <_tzset_unlocked_r+0x2e8>)
 800707c:	4633      	mov	r3, r6
 800707e:	aa07      	add	r2, sp, #28
 8007080:	4620      	mov	r0, r4
 8007082:	f003 fb2f 	bl	800a6e4 <siscanf>
 8007086:	2800      	cmp	r0, #0
 8007088:	dc78      	bgt.n	800717c <_tzset_unlocked_r+0x24c>
 800708a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800708c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8007090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007092:	652f      	str	r7, [r5, #80]	; 0x50
 8007094:	441c      	add	r4, r3
 8007096:	462f      	mov	r7, r5
 8007098:	f04f 0900 	mov.w	r9, #0
 800709c:	7823      	ldrb	r3, [r4, #0]
 800709e:	2b2c      	cmp	r3, #44	; 0x2c
 80070a0:	bf08      	it	eq
 80070a2:	3401      	addeq	r4, #1
 80070a4:	f894 8000 	ldrb.w	r8, [r4]
 80070a8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80070ac:	d178      	bne.n	80071a0 <_tzset_unlocked_r+0x270>
 80070ae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80070b2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80070b6:	ab09      	add	r3, sp, #36	; 0x24
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4958      	ldr	r1, [pc, #352]	; (800721c <_tzset_unlocked_r+0x2ec>)
 80070bc:	9603      	str	r6, [sp, #12]
 80070be:	4633      	mov	r3, r6
 80070c0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80070c4:	4620      	mov	r0, r4
 80070c6:	f003 fb0d 	bl	800a6e4 <siscanf>
 80070ca:	2803      	cmp	r0, #3
 80070cc:	f47f af4a 	bne.w	8006f64 <_tzset_unlocked_r+0x34>
 80070d0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80070d4:	1e4b      	subs	r3, r1, #1
 80070d6:	2b0b      	cmp	r3, #11
 80070d8:	f63f af44 	bhi.w	8006f64 <_tzset_unlocked_r+0x34>
 80070dc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80070e0:	1e53      	subs	r3, r2, #1
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	f63f af3e 	bhi.w	8006f64 <_tzset_unlocked_r+0x34>
 80070e8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80070ec:	2b06      	cmp	r3, #6
 80070ee:	f63f af39 	bhi.w	8006f64 <_tzset_unlocked_r+0x34>
 80070f2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80070f6:	f887 8008 	strb.w	r8, [r7, #8]
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070fe:	eb04 0803 	add.w	r8, r4, r3
 8007102:	2302      	movs	r3, #2
 8007104:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007108:	2300      	movs	r3, #0
 800710a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800710e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007112:	930a      	str	r3, [sp, #40]	; 0x28
 8007114:	f898 3000 	ldrb.w	r3, [r8]
 8007118:	2b2f      	cmp	r3, #47	; 0x2f
 800711a:	d109      	bne.n	8007130 <_tzset_unlocked_r+0x200>
 800711c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007120:	e9cd b600 	strd	fp, r6, [sp]
 8007124:	493e      	ldr	r1, [pc, #248]	; (8007220 <_tzset_unlocked_r+0x2f0>)
 8007126:	4633      	mov	r3, r6
 8007128:	aa07      	add	r2, sp, #28
 800712a:	4640      	mov	r0, r8
 800712c:	f003 fada 	bl	800a6e4 <siscanf>
 8007130:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007134:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007138:	213c      	movs	r1, #60	; 0x3c
 800713a:	fb01 2203 	mla	r2, r1, r3, r2
 800713e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007142:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007146:	fb01 2303 	mla	r3, r1, r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
 800714c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800714e:	3728      	adds	r7, #40	; 0x28
 8007150:	4444      	add	r4, r8
 8007152:	f1b9 0f00 	cmp.w	r9, #0
 8007156:	d020      	beq.n	800719a <_tzset_unlocked_r+0x26a>
 8007158:	6868      	ldr	r0, [r5, #4]
 800715a:	f7ff fe2f 	bl	8006dbc <__tzcalc_limits>
 800715e:	4b28      	ldr	r3, [pc, #160]	; (8007200 <_tzset_unlocked_r+0x2d0>)
 8007160:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	4a27      	ldr	r2, [pc, #156]	; (8007208 <_tzset_unlocked_r+0x2d8>)
 800716a:	bf18      	it	ne
 800716c:	2301      	movne	r3, #1
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e6f8      	b.n	8006f64 <_tzset_unlocked_r+0x34>
 8007172:	2b2b      	cmp	r3, #43	; 0x2b
 8007174:	bf08      	it	eq
 8007176:	3401      	addeq	r4, #1
 8007178:	2701      	movs	r7, #1
 800717a:	e772      	b.n	8007062 <_tzset_unlocked_r+0x132>
 800717c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007180:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007184:	213c      	movs	r1, #60	; 0x3c
 8007186:	fb01 2203 	mla	r2, r1, r3, r2
 800718a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800718e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007192:	fb01 2303 	mla	r3, r1, r3, r2
 8007196:	435f      	muls	r7, r3
 8007198:	e77a      	b.n	8007090 <_tzset_unlocked_r+0x160>
 800719a:	f04f 0901 	mov.w	r9, #1
 800719e:	e77d      	b.n	800709c <_tzset_unlocked_r+0x16c>
 80071a0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80071a4:	bf06      	itte	eq
 80071a6:	3401      	addeq	r4, #1
 80071a8:	4643      	moveq	r3, r8
 80071aa:	2344      	movne	r3, #68	; 0x44
 80071ac:	220a      	movs	r2, #10
 80071ae:	a90b      	add	r1, sp, #44	; 0x2c
 80071b0:	4620      	mov	r0, r4
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	f003 fbb2 	bl	800a91c <strtoul>
 80071b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80071c2:	45a0      	cmp	r8, r4
 80071c4:	d114      	bne.n	80071f0 <_tzset_unlocked_r+0x2c0>
 80071c6:	234d      	movs	r3, #77	; 0x4d
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	d107      	bne.n	80071de <_tzset_unlocked_r+0x2ae>
 80071ce:	722b      	strb	r3, [r5, #8]
 80071d0:	2103      	movs	r1, #3
 80071d2:	2302      	movs	r3, #2
 80071d4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80071d8:	f8c5 9014 	str.w	r9, [r5, #20]
 80071dc:	e791      	b.n	8007102 <_tzset_unlocked_r+0x1d2>
 80071de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80071e2:	220b      	movs	r2, #11
 80071e4:	2301      	movs	r3, #1
 80071e6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80071ea:	2300      	movs	r3, #0
 80071ec:	63eb      	str	r3, [r5, #60]	; 0x3c
 80071ee:	e788      	b.n	8007102 <_tzset_unlocked_r+0x1d2>
 80071f0:	b280      	uxth	r0, r0
 80071f2:	723b      	strb	r3, [r7, #8]
 80071f4:	6178      	str	r0, [r7, #20]
 80071f6:	e784      	b.n	8007102 <_tzset_unlocked_r+0x1d2>
 80071f8:	0800e398 	.word	0x0800e398
 80071fc:	20000ab0 	.word	0x20000ab0
 8007200:	20000ab8 	.word	0x20000ab8
 8007204:	0800e39b 	.word	0x0800e39b
 8007208:	20000ab4 	.word	0x20000ab4
 800720c:	20000448 	.word	0x20000448
 8007210:	20000aa3 	.word	0x20000aa3
 8007214:	0800e39f 	.word	0x0800e39f
 8007218:	0800e3c2 	.word	0x0800e3c2
 800721c:	0800e3ae 	.word	0x0800e3ae
 8007220:	0800e3c1 	.word	0x0800e3c1
 8007224:	20000a98 	.word	0x20000a98

08007228 <_vfprintf_r>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	ed2d 8b04 	vpush	{d8-d9}
 8007230:	b0cf      	sub	sp, #316	; 0x13c
 8007232:	4689      	mov	r9, r1
 8007234:	9203      	str	r2, [sp, #12]
 8007236:	461c      	mov	r4, r3
 8007238:	461e      	mov	r6, r3
 800723a:	4682      	mov	sl, r0
 800723c:	f002 fbf8 	bl	8009a30 <_localeconv_r>
 8007240:	6803      	ldr	r3, [r0, #0]
 8007242:	9313      	str	r3, [sp, #76]	; 0x4c
 8007244:	4618      	mov	r0, r3
 8007246:	f7f8 ffe3 	bl	8000210 <strlen>
 800724a:	900e      	str	r0, [sp, #56]	; 0x38
 800724c:	f1ba 0f00 	cmp.w	sl, #0
 8007250:	d005      	beq.n	800725e <_vfprintf_r+0x36>
 8007252:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8007256:	b913      	cbnz	r3, 800725e <_vfprintf_r+0x36>
 8007258:	4650      	mov	r0, sl
 800725a:	f002 fa33 	bl	80096c4 <__sinit>
 800725e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8007262:	07d8      	lsls	r0, r3, #31
 8007264:	d407      	bmi.n	8007276 <_vfprintf_r+0x4e>
 8007266:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800726a:	0599      	lsls	r1, r3, #22
 800726c:	d403      	bmi.n	8007276 <_vfprintf_r+0x4e>
 800726e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8007272:	f002 fbe4 	bl	8009a3e <__retarget_lock_acquire_recursive>
 8007276:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 800727a:	049a      	lsls	r2, r3, #18
 800727c:	d409      	bmi.n	8007292 <_vfprintf_r+0x6a>
 800727e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007282:	f8a9 300c 	strh.w	r3, [r9, #12]
 8007286:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 800728a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800728e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8007292:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007296:	071f      	lsls	r7, r3, #28
 8007298:	d502      	bpl.n	80072a0 <_vfprintf_r+0x78>
 800729a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800729e:	b9d3      	cbnz	r3, 80072d6 <_vfprintf_r+0xae>
 80072a0:	4649      	mov	r1, r9
 80072a2:	4650      	mov	r0, sl
 80072a4:	f001 fa36 	bl	8008714 <__swsetup_r>
 80072a8:	b1a8      	cbz	r0, 80072d6 <_vfprintf_r+0xae>
 80072aa:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80072ae:	07dd      	lsls	r5, r3, #31
 80072b0:	d508      	bpl.n	80072c4 <_vfprintf_r+0x9c>
 80072b2:	f04f 33ff 	mov.w	r3, #4294967295
 80072b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80072ba:	b04f      	add	sp, #316	; 0x13c
 80072bc:	ecbd 8b04 	vpop	{d8-d9}
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80072c8:	059c      	lsls	r4, r3, #22
 80072ca:	d4f2      	bmi.n	80072b2 <_vfprintf_r+0x8a>
 80072cc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80072d0:	f002 fbb7 	bl	8009a42 <__retarget_lock_release_recursive>
 80072d4:	e7ed      	b.n	80072b2 <_vfprintf_r+0x8a>
 80072d6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80072da:	f003 021a 	and.w	r2, r3, #26
 80072de:	2a0a      	cmp	r2, #10
 80072e0:	d115      	bne.n	800730e <_vfprintf_r+0xe6>
 80072e2:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	db11      	blt.n	800730e <_vfprintf_r+0xe6>
 80072ea:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 80072ee:	07d0      	lsls	r0, r2, #31
 80072f0:	d405      	bmi.n	80072fe <_vfprintf_r+0xd6>
 80072f2:	0599      	lsls	r1, r3, #22
 80072f4:	d403      	bmi.n	80072fe <_vfprintf_r+0xd6>
 80072f6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80072fa:	f002 fba2 	bl	8009a42 <__retarget_lock_release_recursive>
 80072fe:	9a03      	ldr	r2, [sp, #12]
 8007300:	4623      	mov	r3, r4
 8007302:	4649      	mov	r1, r9
 8007304:	4650      	mov	r0, sl
 8007306:	f001 f9c5 	bl	8008694 <__sbprintf>
 800730a:	900f      	str	r0, [sp, #60]	; 0x3c
 800730c:	e7d4      	b.n	80072b8 <_vfprintf_r+0x90>
 800730e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 8007578 <_vfprintf_r+0x350>
 8007312:	2500      	movs	r5, #0
 8007314:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8007318:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800731c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8007320:	ac25      	add	r4, sp, #148	; 0x94
 8007322:	9422      	str	r4, [sp, #136]	; 0x88
 8007324:	9505      	str	r5, [sp, #20]
 8007326:	950a      	str	r5, [sp, #40]	; 0x28
 8007328:	9512      	str	r5, [sp, #72]	; 0x48
 800732a:	9514      	str	r5, [sp, #80]	; 0x50
 800732c:	950f      	str	r5, [sp, #60]	; 0x3c
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	461d      	mov	r5, r3
 8007332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007336:	b10a      	cbz	r2, 800733c <_vfprintf_r+0x114>
 8007338:	2a25      	cmp	r2, #37	; 0x25
 800733a:	d1f9      	bne.n	8007330 <_vfprintf_r+0x108>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1aef      	subs	r7, r5, r3
 8007340:	d00d      	beq.n	800735e <_vfprintf_r+0x136>
 8007342:	e9c4 3700 	strd	r3, r7, [r4]
 8007346:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007348:	443b      	add	r3, r7
 800734a:	9324      	str	r3, [sp, #144]	; 0x90
 800734c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800734e:	3301      	adds	r3, #1
 8007350:	2b07      	cmp	r3, #7
 8007352:	9323      	str	r3, [sp, #140]	; 0x8c
 8007354:	dc79      	bgt.n	800744a <_vfprintf_r+0x222>
 8007356:	3408      	adds	r4, #8
 8007358:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800735a:	443b      	add	r3, r7
 800735c:	930f      	str	r3, [sp, #60]	; 0x3c
 800735e:	782b      	ldrb	r3, [r5, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f001 8156 	beq.w	8008612 <_vfprintf_r+0x13ea>
 8007366:	2300      	movs	r3, #0
 8007368:	3501      	adds	r5, #1
 800736a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800736e:	f04f 38ff 	mov.w	r8, #4294967295
 8007372:	9310      	str	r3, [sp, #64]	; 0x40
 8007374:	469b      	mov	fp, r3
 8007376:	270a      	movs	r7, #10
 8007378:	212b      	movs	r1, #43	; 0x2b
 800737a:	462a      	mov	r2, r5
 800737c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	4613      	mov	r3, r2
 8007384:	930b      	str	r3, [sp, #44]	; 0x2c
 8007386:	9b07      	ldr	r3, [sp, #28]
 8007388:	3b20      	subs	r3, #32
 800738a:	2b5a      	cmp	r3, #90	; 0x5a
 800738c:	f200 85c0 	bhi.w	8007f10 <_vfprintf_r+0xce8>
 8007390:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007394:	05be007e 	.word	0x05be007e
 8007398:	008605be 	.word	0x008605be
 800739c:	05be05be 	.word	0x05be05be
 80073a0:	006505be 	.word	0x006505be
 80073a4:	05be05be 	.word	0x05be05be
 80073a8:	00930089 	.word	0x00930089
 80073ac:	009005be 	.word	0x009005be
 80073b0:	05be0096 	.word	0x05be0096
 80073b4:	00b200af 	.word	0x00b200af
 80073b8:	00b200b2 	.word	0x00b200b2
 80073bc:	00b200b2 	.word	0x00b200b2
 80073c0:	00b200b2 	.word	0x00b200b2
 80073c4:	00b200b2 	.word	0x00b200b2
 80073c8:	05be05be 	.word	0x05be05be
 80073cc:	05be05be 	.word	0x05be05be
 80073d0:	05be05be 	.word	0x05be05be
 80073d4:	012105be 	.word	0x012105be
 80073d8:	00df05be 	.word	0x00df05be
 80073dc:	012100f6 	.word	0x012100f6
 80073e0:	01210121 	.word	0x01210121
 80073e4:	05be05be 	.word	0x05be05be
 80073e8:	05be05be 	.word	0x05be05be
 80073ec:	05be00c2 	.word	0x05be00c2
 80073f0:	049005be 	.word	0x049005be
 80073f4:	05be05be 	.word	0x05be05be
 80073f8:	04d705be 	.word	0x04d705be
 80073fc:	04fb05be 	.word	0x04fb05be
 8007400:	05be05be 	.word	0x05be05be
 8007404:	05be051a 	.word	0x05be051a
 8007408:	05be05be 	.word	0x05be05be
 800740c:	05be05be 	.word	0x05be05be
 8007410:	05be05be 	.word	0x05be05be
 8007414:	012105be 	.word	0x012105be
 8007418:	00df05be 	.word	0x00df05be
 800741c:	012100f8 	.word	0x012100f8
 8007420:	01210121 	.word	0x01210121
 8007424:	00f800c5 	.word	0x00f800c5
 8007428:	05be00d9 	.word	0x05be00d9
 800742c:	05be00d2 	.word	0x05be00d2
 8007430:	0492046d 	.word	0x0492046d
 8007434:	00d904c6 	.word	0x00d904c6
 8007438:	04d705be 	.word	0x04d705be
 800743c:	04fd007c 	.word	0x04fd007c
 8007440:	05be05be 	.word	0x05be05be
 8007444:	05be0537 	.word	0x05be0537
 8007448:	007c      	.short	0x007c
 800744a:	aa22      	add	r2, sp, #136	; 0x88
 800744c:	4649      	mov	r1, r9
 800744e:	4650      	mov	r0, sl
 8007450:	f004 faeb 	bl	800ba2a <__sprint_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 8130 	bne.w	80076ba <_vfprintf_r+0x492>
 800745a:	ac25      	add	r4, sp, #148	; 0x94
 800745c:	e77c      	b.n	8007358 <_vfprintf_r+0x130>
 800745e:	4650      	mov	r0, sl
 8007460:	f002 fae6 	bl	8009a30 <_localeconv_r>
 8007464:	6843      	ldr	r3, [r0, #4]
 8007466:	9314      	str	r3, [sp, #80]	; 0x50
 8007468:	4618      	mov	r0, r3
 800746a:	f7f8 fed1 	bl	8000210 <strlen>
 800746e:	9012      	str	r0, [sp, #72]	; 0x48
 8007470:	4650      	mov	r0, sl
 8007472:	f002 fadd 	bl	8009a30 <_localeconv_r>
 8007476:	6883      	ldr	r3, [r0, #8]
 8007478:	930a      	str	r3, [sp, #40]	; 0x28
 800747a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800747c:	212b      	movs	r1, #43	; 0x2b
 800747e:	b12b      	cbz	r3, 800748c <_vfprintf_r+0x264>
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	b11b      	cbz	r3, 800748c <_vfprintf_r+0x264>
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	b10b      	cbz	r3, 800748c <_vfprintf_r+0x264>
 8007488:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800748c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800748e:	e774      	b.n	800737a <_vfprintf_r+0x152>
 8007490:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1f9      	bne.n	800748c <_vfprintf_r+0x264>
 8007498:	2320      	movs	r3, #32
 800749a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800749e:	e7f5      	b.n	800748c <_vfprintf_r+0x264>
 80074a0:	f04b 0b01 	orr.w	fp, fp, #1
 80074a4:	e7f2      	b.n	800748c <_vfprintf_r+0x264>
 80074a6:	f856 3b04 	ldr.w	r3, [r6], #4
 80074aa:	9310      	str	r3, [sp, #64]	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	daed      	bge.n	800748c <_vfprintf_r+0x264>
 80074b0:	425b      	negs	r3, r3
 80074b2:	9310      	str	r3, [sp, #64]	; 0x40
 80074b4:	f04b 0b04 	orr.w	fp, fp, #4
 80074b8:	e7e8      	b.n	800748c <_vfprintf_r+0x264>
 80074ba:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80074be:	e7e5      	b.n	800748c <_vfprintf_r+0x264>
 80074c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c6:	9207      	str	r2, [sp, #28]
 80074c8:	2a2a      	cmp	r2, #42	; 0x2a
 80074ca:	d10f      	bne.n	80074ec <_vfprintf_r+0x2c4>
 80074cc:	f856 0b04 	ldr.w	r0, [r6], #4
 80074d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d2:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 80074d6:	e7d9      	b.n	800748c <_vfprintf_r+0x264>
 80074d8:	fb07 2808 	mla	r8, r7, r8, r2
 80074dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074e0:	9207      	str	r2, [sp, #28]
 80074e2:	9a07      	ldr	r2, [sp, #28]
 80074e4:	3a30      	subs	r2, #48	; 0x30
 80074e6:	2a09      	cmp	r2, #9
 80074e8:	d9f6      	bls.n	80074d8 <_vfprintf_r+0x2b0>
 80074ea:	e74b      	b.n	8007384 <_vfprintf_r+0x15c>
 80074ec:	f04f 0800 	mov.w	r8, #0
 80074f0:	e7f7      	b.n	80074e2 <_vfprintf_r+0x2ba>
 80074f2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80074f6:	e7c9      	b.n	800748c <_vfprintf_r+0x264>
 80074f8:	2200      	movs	r2, #0
 80074fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074fc:	9210      	str	r2, [sp, #64]	; 0x40
 80074fe:	9a07      	ldr	r2, [sp, #28]
 8007500:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007502:	3a30      	subs	r2, #48	; 0x30
 8007504:	fb07 2200 	mla	r2, r7, r0, r2
 8007508:	9210      	str	r2, [sp, #64]	; 0x40
 800750a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800750e:	9207      	str	r2, [sp, #28]
 8007510:	3a30      	subs	r2, #48	; 0x30
 8007512:	2a09      	cmp	r2, #9
 8007514:	d9f3      	bls.n	80074fe <_vfprintf_r+0x2d6>
 8007516:	e735      	b.n	8007384 <_vfprintf_r+0x15c>
 8007518:	f04b 0b08 	orr.w	fp, fp, #8
 800751c:	e7b6      	b.n	800748c <_vfprintf_r+0x264>
 800751e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b68      	cmp	r3, #104	; 0x68
 8007524:	bf01      	itttt	eq
 8007526:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8007528:	3301      	addeq	r3, #1
 800752a:	930b      	streq	r3, [sp, #44]	; 0x2c
 800752c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8007530:	bf18      	it	ne
 8007532:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8007536:	e7a9      	b.n	800748c <_vfprintf_r+0x264>
 8007538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b6c      	cmp	r3, #108	; 0x6c
 800753e:	d105      	bne.n	800754c <_vfprintf_r+0x324>
 8007540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007542:	3301      	adds	r3, #1
 8007544:	930b      	str	r3, [sp, #44]	; 0x2c
 8007546:	f04b 0b20 	orr.w	fp, fp, #32
 800754a:	e79f      	b.n	800748c <_vfprintf_r+0x264>
 800754c:	f04b 0b10 	orr.w	fp, fp, #16
 8007550:	e79c      	b.n	800748c <_vfprintf_r+0x264>
 8007552:	4632      	mov	r2, r6
 8007554:	2000      	movs	r0, #0
 8007556:	f852 3b04 	ldr.w	r3, [r2], #4
 800755a:	9206      	str	r2, [sp, #24]
 800755c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8007560:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8007564:	ab35      	add	r3, sp, #212	; 0xd4
 8007566:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800756a:	9004      	str	r0, [sp, #16]
 800756c:	f04f 0801 	mov.w	r8, #1
 8007570:	4606      	mov	r6, r0
 8007572:	4605      	mov	r5, r0
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	e1c3      	b.n	8007900 <_vfprintf_r+0x6d8>
	...
 8007580:	f04b 0b10 	orr.w	fp, fp, #16
 8007584:	f01b 0f20 	tst.w	fp, #32
 8007588:	d012      	beq.n	80075b0 <_vfprintf_r+0x388>
 800758a:	3607      	adds	r6, #7
 800758c:	f026 0307 	bic.w	r3, r6, #7
 8007590:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	2e00      	cmp	r6, #0
 8007598:	f177 0300 	sbcs.w	r3, r7, #0
 800759c:	da06      	bge.n	80075ac <_vfprintf_r+0x384>
 800759e:	4276      	negs	r6, r6
 80075a0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80075a4:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80075a8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80075ac:	2301      	movs	r3, #1
 80075ae:	e392      	b.n	8007cd6 <_vfprintf_r+0xaae>
 80075b0:	1d33      	adds	r3, r6, #4
 80075b2:	f01b 0f10 	tst.w	fp, #16
 80075b6:	9306      	str	r3, [sp, #24]
 80075b8:	d002      	beq.n	80075c0 <_vfprintf_r+0x398>
 80075ba:	6836      	ldr	r6, [r6, #0]
 80075bc:	17f7      	asrs	r7, r6, #31
 80075be:	e7ea      	b.n	8007596 <_vfprintf_r+0x36e>
 80075c0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80075c4:	6836      	ldr	r6, [r6, #0]
 80075c6:	d001      	beq.n	80075cc <_vfprintf_r+0x3a4>
 80075c8:	b236      	sxth	r6, r6
 80075ca:	e7f7      	b.n	80075bc <_vfprintf_r+0x394>
 80075cc:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80075d0:	bf18      	it	ne
 80075d2:	b276      	sxtbne	r6, r6
 80075d4:	e7f2      	b.n	80075bc <_vfprintf_r+0x394>
 80075d6:	3607      	adds	r6, #7
 80075d8:	f026 0307 	bic.w	r3, r6, #7
 80075dc:	ecb3 7b02 	vldmia	r3!, {d7}
 80075e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80075e4:	9306      	str	r3, [sp, #24]
 80075e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e8:	ee09 3a10 	vmov	s18, r3
 80075ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075f2:	ee09 3a90 	vmov	s19, r3
 80075f6:	f04f 32ff 	mov.w	r2, #4294967295
 80075fa:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <_vfprintf_r+0x4b8>)
 80075fc:	ec51 0b19 	vmov	r0, r1, d9
 8007600:	f7f9 fabe 	bl	8000b80 <__aeabi_dcmpun>
 8007604:	bb20      	cbnz	r0, 8007650 <_vfprintf_r+0x428>
 8007606:	4b36      	ldr	r3, [pc, #216]	; (80076e0 <_vfprintf_r+0x4b8>)
 8007608:	ec51 0b19 	vmov	r0, r1, d9
 800760c:	f04f 32ff 	mov.w	r2, #4294967295
 8007610:	f7f9 fa98 	bl	8000b44 <__aeabi_dcmple>
 8007614:	b9e0      	cbnz	r0, 8007650 <_vfprintf_r+0x428>
 8007616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	f7f9 fa87 	bl	8000b30 <__aeabi_dcmplt>
 8007622:	b110      	cbz	r0, 800762a <_vfprintf_r+0x402>
 8007624:	232d      	movs	r3, #45	; 0x2d
 8007626:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800762a:	4a2e      	ldr	r2, [pc, #184]	; (80076e4 <_vfprintf_r+0x4bc>)
 800762c:	482e      	ldr	r0, [pc, #184]	; (80076e8 <_vfprintf_r+0x4c0>)
 800762e:	9907      	ldr	r1, [sp, #28]
 8007630:	4613      	mov	r3, r2
 8007632:	2947      	cmp	r1, #71	; 0x47
 8007634:	bfc8      	it	gt
 8007636:	4603      	movgt	r3, r0
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	2300      	movs	r3, #0
 800763c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8007640:	9304      	str	r3, [sp, #16]
 8007642:	f04f 0803 	mov.w	r8, #3
 8007646:	461e      	mov	r6, r3
 8007648:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800764c:	461d      	mov	r5, r3
 800764e:	e157      	b.n	8007900 <_vfprintf_r+0x6d8>
 8007650:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007654:	4610      	mov	r0, r2
 8007656:	4619      	mov	r1, r3
 8007658:	f7f9 fa92 	bl	8000b80 <__aeabi_dcmpun>
 800765c:	b140      	cbz	r0, 8007670 <_vfprintf_r+0x448>
 800765e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007660:	4a22      	ldr	r2, [pc, #136]	; (80076ec <_vfprintf_r+0x4c4>)
 8007662:	4823      	ldr	r0, [pc, #140]	; (80076f0 <_vfprintf_r+0x4c8>)
 8007664:	2b00      	cmp	r3, #0
 8007666:	bfbc      	itt	lt
 8007668:	232d      	movlt	r3, #45	; 0x2d
 800766a:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800766e:	e7de      	b.n	800762e <_vfprintf_r+0x406>
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	f023 0320 	bic.w	r3, r3, #32
 8007676:	2b41      	cmp	r3, #65	; 0x41
 8007678:	9308      	str	r3, [sp, #32]
 800767a:	d13b      	bne.n	80076f4 <_vfprintf_r+0x4cc>
 800767c:	2330      	movs	r3, #48	; 0x30
 800767e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8007682:	9b07      	ldr	r3, [sp, #28]
 8007684:	2b61      	cmp	r3, #97	; 0x61
 8007686:	bf0c      	ite	eq
 8007688:	2378      	moveq	r3, #120	; 0x78
 800768a:	2358      	movne	r3, #88	; 0x58
 800768c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8007690:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8007694:	f04b 0b02 	orr.w	fp, fp, #2
 8007698:	f340 8209 	ble.w	8007aae <_vfprintf_r+0x886>
 800769c:	f108 0101 	add.w	r1, r8, #1
 80076a0:	4650      	mov	r0, sl
 80076a2:	f002 fa4b 	bl	8009b3c <_malloc_r>
 80076a6:	9003      	str	r0, [sp, #12]
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f040 8204 	bne.w	8007ab6 <_vfprintf_r+0x88e>
 80076ae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b6:	f8a9 300c 	strh.w	r3, [r9, #12]
 80076ba:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 80076be:	07d9      	lsls	r1, r3, #31
 80076c0:	d407      	bmi.n	80076d2 <_vfprintf_r+0x4aa>
 80076c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076c6:	059a      	lsls	r2, r3, #22
 80076c8:	d403      	bmi.n	80076d2 <_vfprintf_r+0x4aa>
 80076ca:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 80076ce:	f002 f9b8 	bl	8009a42 <__retarget_lock_release_recursive>
 80076d2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80076d6:	065b      	lsls	r3, r3, #25
 80076d8:	f57f adee 	bpl.w	80072b8 <_vfprintf_r+0x90>
 80076dc:	e5e9      	b.n	80072b2 <_vfprintf_r+0x8a>
 80076de:	bf00      	nop
 80076e0:	7fefffff 	.word	0x7fefffff
 80076e4:	0800e3d4 	.word	0x0800e3d4
 80076e8:	0800e3d8 	.word	0x0800e3d8
 80076ec:	0800e3dc 	.word	0x0800e3dc
 80076f0:	0800e3e0 	.word	0x0800e3e0
 80076f4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80076f8:	f000 81e0 	beq.w	8007abc <_vfprintf_r+0x894>
 80076fc:	9b08      	ldr	r3, [sp, #32]
 80076fe:	2b47      	cmp	r3, #71	; 0x47
 8007700:	f040 81e0 	bne.w	8007ac4 <_vfprintf_r+0x89c>
 8007704:	f1b8 0f00 	cmp.w	r8, #0
 8007708:	f040 81dc 	bne.w	8007ac4 <_vfprintf_r+0x89c>
 800770c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007710:	f04f 0801 	mov.w	r8, #1
 8007714:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8007718:	9311      	str	r3, [sp, #68]	; 0x44
 800771a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800771c:	2b00      	cmp	r3, #0
 800771e:	f280 81d3 	bge.w	8007ac8 <_vfprintf_r+0x8a0>
 8007722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007724:	ee08 3a10 	vmov	s16, r3
 8007728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800772a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800772e:	ee08 3a90 	vmov	s17, r3
 8007732:	232d      	movs	r3, #45	; 0x2d
 8007734:	9318      	str	r3, [sp, #96]	; 0x60
 8007736:	9b08      	ldr	r3, [sp, #32]
 8007738:	2b41      	cmp	r3, #65	; 0x41
 800773a:	f040 81e3 	bne.w	8007b04 <_vfprintf_r+0x8dc>
 800773e:	eeb0 0a48 	vmov.f32	s0, s16
 8007742:	eef0 0a68 	vmov.f32	s1, s17
 8007746:	a81c      	add	r0, sp, #112	; 0x70
 8007748:	f002 ff84 	bl	800a654 <frexp>
 800774c:	2200      	movs	r2, #0
 800774e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007752:	ec51 0b10 	vmov	r0, r1, d0
 8007756:	f7f8 ff79 	bl	800064c <__aeabi_dmul>
 800775a:	2200      	movs	r2, #0
 800775c:	2300      	movs	r3, #0
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	f7f9 f9db 	bl	8000b1c <__aeabi_dcmpeq>
 8007766:	b108      	cbz	r0, 800776c <_vfprintf_r+0x544>
 8007768:	2301      	movs	r3, #1
 800776a:	931c      	str	r3, [sp, #112]	; 0x70
 800776c:	4bb7      	ldr	r3, [pc, #732]	; (8007a4c <_vfprintf_r+0x824>)
 800776e:	4ab8      	ldr	r2, [pc, #736]	; (8007a50 <_vfprintf_r+0x828>)
 8007770:	9907      	ldr	r1, [sp, #28]
 8007772:	9d03      	ldr	r5, [sp, #12]
 8007774:	2961      	cmp	r1, #97	; 0x61
 8007776:	bf18      	it	ne
 8007778:	461a      	movne	r2, r3
 800777a:	f108 33ff 	add.w	r3, r8, #4294967295
 800777e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	4bb4      	ldr	r3, [pc, #720]	; (8007a54 <_vfprintf_r+0x82c>)
 8007784:	2200      	movs	r2, #0
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f8 ff5f 	bl	800064c <__aeabi_dmul>
 800778e:	460f      	mov	r7, r1
 8007790:	4606      	mov	r6, r0
 8007792:	f7f9 fa0b 	bl	8000bac <__aeabi_d2iz>
 8007796:	9019      	str	r0, [sp, #100]	; 0x64
 8007798:	f7f8 feee 	bl	8000578 <__aeabi_i2d>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fd9a 	bl	80002dc <__aeabi_dsub>
 80077a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ac:	5c9b      	ldrb	r3, [r3, r2]
 80077ae:	f805 3b01 	strb.w	r3, [r5], #1
 80077b2:	9b05      	ldr	r3, [sp, #20]
 80077b4:	9309      	str	r3, [sp, #36]	; 0x24
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	4606      	mov	r6, r0
 80077ba:	460f      	mov	r7, r1
 80077bc:	d007      	beq.n	80077ce <_vfprintf_r+0x5a6>
 80077be:	3b01      	subs	r3, #1
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	f7f9 f9a9 	bl	8000b1c <__aeabi_dcmpeq>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0d9      	beq.n	8007782 <_vfprintf_r+0x55a>
 80077ce:	4ba2      	ldr	r3, [pc, #648]	; (8007a58 <_vfprintf_r+0x830>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f9 f9c9 	bl	8000b6c <__aeabi_dcmpgt>
 80077da:	b960      	cbnz	r0, 80077f6 <_vfprintf_r+0x5ce>
 80077dc:	4b9e      	ldr	r3, [pc, #632]	; (8007a58 <_vfprintf_r+0x830>)
 80077de:	2200      	movs	r2, #0
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	f7f9 f99a 	bl	8000b1c <__aeabi_dcmpeq>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f000 8186 	beq.w	8007afa <_vfprintf_r+0x8d2>
 80077ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077f0:	07df      	lsls	r7, r3, #31
 80077f2:	f140 8182 	bpl.w	8007afa <_vfprintf_r+0x8d2>
 80077f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077f8:	9520      	str	r5, [sp, #128]	; 0x80
 80077fa:	7bd9      	ldrb	r1, [r3, #15]
 80077fc:	2030      	movs	r0, #48	; 0x30
 80077fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007800:	1e53      	subs	r3, r2, #1
 8007802:	9320      	str	r3, [sp, #128]	; 0x80
 8007804:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8007808:	428b      	cmp	r3, r1
 800780a:	f000 8165 	beq.w	8007ad8 <_vfprintf_r+0x8b0>
 800780e:	2b39      	cmp	r3, #57	; 0x39
 8007810:	bf0b      	itete	eq
 8007812:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8007814:	3301      	addne	r3, #1
 8007816:	7a9b      	ldrbeq	r3, [r3, #10]
 8007818:	b2db      	uxtbne	r3, r3
 800781a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	1aeb      	subs	r3, r5, r3
 8007822:	9305      	str	r3, [sp, #20]
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007828:	2b47      	cmp	r3, #71	; 0x47
 800782a:	f040 81b3 	bne.w	8007b94 <_vfprintf_r+0x96c>
 800782e:	1cee      	adds	r6, r5, #3
 8007830:	db02      	blt.n	8007838 <_vfprintf_r+0x610>
 8007832:	4545      	cmp	r5, r8
 8007834:	f340 81d5 	ble.w	8007be2 <_vfprintf_r+0x9ba>
 8007838:	9b07      	ldr	r3, [sp, #28]
 800783a:	3b02      	subs	r3, #2
 800783c:	9307      	str	r3, [sp, #28]
 800783e:	9907      	ldr	r1, [sp, #28]
 8007840:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8007844:	f021 0120 	bic.w	r1, r1, #32
 8007848:	2941      	cmp	r1, #65	; 0x41
 800784a:	bf08      	it	eq
 800784c:	320f      	addeq	r2, #15
 800784e:	f105 33ff 	add.w	r3, r5, #4294967295
 8007852:	bf06      	itte	eq
 8007854:	b2d2      	uxtbeq	r2, r2
 8007856:	2101      	moveq	r1, #1
 8007858:	2100      	movne	r1, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	931c      	str	r3, [sp, #112]	; 0x70
 800785e:	bfb8      	it	lt
 8007860:	f1c5 0301 	rsblt	r3, r5, #1
 8007864:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007868:	bfb4      	ite	lt
 800786a:	222d      	movlt	r2, #45	; 0x2d
 800786c:	222b      	movge	r2, #43	; 0x2b
 800786e:	2b09      	cmp	r3, #9
 8007870:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8007874:	f340 81a4 	ble.w	8007bc0 <_vfprintf_r+0x998>
 8007878:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800787c:	260a      	movs	r6, #10
 800787e:	4611      	mov	r1, r2
 8007880:	fb93 f5f6 	sdiv	r5, r3, r6
 8007884:	fb06 3015 	mls	r0, r6, r5, r3
 8007888:	3030      	adds	r0, #48	; 0x30
 800788a:	f801 0c01 	strb.w	r0, [r1, #-1]
 800788e:	4618      	mov	r0, r3
 8007890:	2863      	cmp	r0, #99	; 0x63
 8007892:	f102 32ff 	add.w	r2, r2, #4294967295
 8007896:	462b      	mov	r3, r5
 8007898:	dcf1      	bgt.n	800787e <_vfprintf_r+0x656>
 800789a:	3330      	adds	r3, #48	; 0x30
 800789c:	1e88      	subs	r0, r1, #2
 800789e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078a2:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 80078a6:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80078aa:	4603      	mov	r3, r0
 80078ac:	42ab      	cmp	r3, r5
 80078ae:	f0c0 8182 	bcc.w	8007bb6 <_vfprintf_r+0x98e>
 80078b2:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 80078b6:	1a52      	subs	r2, r2, r1
 80078b8:	42a8      	cmp	r0, r5
 80078ba:	bf88      	it	hi
 80078bc:	2200      	movhi	r2, #0
 80078be:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80078c2:	441a      	add	r2, r3
 80078c4:	ab1e      	add	r3, sp, #120	; 0x78
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	9a05      	ldr	r2, [sp, #20]
 80078ca:	9315      	str	r3, [sp, #84]	; 0x54
 80078cc:	2a01      	cmp	r2, #1
 80078ce:	eb03 0802 	add.w	r8, r3, r2
 80078d2:	dc02      	bgt.n	80078da <_vfprintf_r+0x6b2>
 80078d4:	f01b 0f01 	tst.w	fp, #1
 80078d8:	d001      	beq.n	80078de <_vfprintf_r+0x6b6>
 80078da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078dc:	4498      	add	r8, r3
 80078de:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 80078e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e6:	9311      	str	r3, [sp, #68]	; 0x44
 80078e8:	2300      	movs	r3, #0
 80078ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80078ee:	461d      	mov	r5, r3
 80078f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80078f2:	b113      	cbz	r3, 80078fa <_vfprintf_r+0x6d2>
 80078f4:	232d      	movs	r3, #45	; 0x2d
 80078f6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80078fa:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80078fe:	2600      	movs	r6, #0
 8007900:	4546      	cmp	r6, r8
 8007902:	4633      	mov	r3, r6
 8007904:	bfb8      	it	lt
 8007906:	4643      	movlt	r3, r8
 8007908:	9311      	str	r3, [sp, #68]	; 0x44
 800790a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800790e:	b113      	cbz	r3, 8007916 <_vfprintf_r+0x6ee>
 8007910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007912:	3301      	adds	r3, #1
 8007914:	9311      	str	r3, [sp, #68]	; 0x44
 8007916:	f01b 0302 	ands.w	r3, fp, #2
 800791a:	9317      	str	r3, [sp, #92]	; 0x5c
 800791c:	bf1e      	ittt	ne
 800791e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8007920:	3302      	addne	r3, #2
 8007922:	9311      	strne	r3, [sp, #68]	; 0x44
 8007924:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8007928:	9318      	str	r3, [sp, #96]	; 0x60
 800792a:	d11f      	bne.n	800796c <_vfprintf_r+0x744>
 800792c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8007930:	1a9f      	subs	r7, r3, r2
 8007932:	2f00      	cmp	r7, #0
 8007934:	dd1a      	ble.n	800796c <_vfprintf_r+0x744>
 8007936:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800793a:	4848      	ldr	r0, [pc, #288]	; (8007a5c <_vfprintf_r+0x834>)
 800793c:	6020      	str	r0, [r4, #0]
 800793e:	2f10      	cmp	r7, #16
 8007940:	f103 0301 	add.w	r3, r3, #1
 8007944:	f104 0108 	add.w	r1, r4, #8
 8007948:	f300 82f0 	bgt.w	8007f2c <_vfprintf_r+0xd04>
 800794c:	6067      	str	r7, [r4, #4]
 800794e:	2b07      	cmp	r3, #7
 8007950:	4417      	add	r7, r2
 8007952:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8007956:	f340 82fc 	ble.w	8007f52 <_vfprintf_r+0xd2a>
 800795a:	aa22      	add	r2, sp, #136	; 0x88
 800795c:	4649      	mov	r1, r9
 800795e:	4650      	mov	r0, sl
 8007960:	f004 f863 	bl	800ba2a <__sprint_r>
 8007964:	2800      	cmp	r0, #0
 8007966:	f040 8632 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800796a:	ac25      	add	r4, sp, #148	; 0x94
 800796c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8007970:	b173      	cbz	r3, 8007990 <_vfprintf_r+0x768>
 8007972:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	2301      	movs	r3, #1
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800797e:	3301      	adds	r3, #1
 8007980:	9324      	str	r3, [sp, #144]	; 0x90
 8007982:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007984:	3301      	adds	r3, #1
 8007986:	2b07      	cmp	r3, #7
 8007988:	9323      	str	r3, [sp, #140]	; 0x8c
 800798a:	f300 82e4 	bgt.w	8007f56 <_vfprintf_r+0xd2e>
 800798e:	3408      	adds	r4, #8
 8007990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007992:	b16b      	cbz	r3, 80079b0 <_vfprintf_r+0x788>
 8007994:	ab1b      	add	r3, sp, #108	; 0x6c
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	2302      	movs	r3, #2
 800799a:	6063      	str	r3, [r4, #4]
 800799c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800799e:	3302      	adds	r3, #2
 80079a0:	9324      	str	r3, [sp, #144]	; 0x90
 80079a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079a4:	3301      	adds	r3, #1
 80079a6:	2b07      	cmp	r3, #7
 80079a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80079aa:	f300 82de 	bgt.w	8007f6a <_vfprintf_r+0xd42>
 80079ae:	3408      	adds	r4, #8
 80079b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d11f      	bne.n	80079f6 <_vfprintf_r+0x7ce>
 80079b6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80079ba:	1a9f      	subs	r7, r3, r2
 80079bc:	2f00      	cmp	r7, #0
 80079be:	dd1a      	ble.n	80079f6 <_vfprintf_r+0x7ce>
 80079c0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80079c4:	4826      	ldr	r0, [pc, #152]	; (8007a60 <_vfprintf_r+0x838>)
 80079c6:	6020      	str	r0, [r4, #0]
 80079c8:	2f10      	cmp	r7, #16
 80079ca:	f103 0301 	add.w	r3, r3, #1
 80079ce:	f104 0108 	add.w	r1, r4, #8
 80079d2:	f300 82d4 	bgt.w	8007f7e <_vfprintf_r+0xd56>
 80079d6:	6067      	str	r7, [r4, #4]
 80079d8:	2b07      	cmp	r3, #7
 80079da:	4417      	add	r7, r2
 80079dc:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80079e0:	f340 82e0 	ble.w	8007fa4 <_vfprintf_r+0xd7c>
 80079e4:	aa22      	add	r2, sp, #136	; 0x88
 80079e6:	4649      	mov	r1, r9
 80079e8:	4650      	mov	r0, sl
 80079ea:	f004 f81e 	bl	800ba2a <__sprint_r>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	f040 85ed 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80079f4:	ac25      	add	r4, sp, #148	; 0x94
 80079f6:	eba6 0608 	sub.w	r6, r6, r8
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	dd1a      	ble.n	8007a34 <_vfprintf_r+0x80c>
 80079fe:	4f18      	ldr	r7, [pc, #96]	; (8007a60 <_vfprintf_r+0x838>)
 8007a00:	6027      	str	r7, [r4, #0]
 8007a02:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007a06:	2e10      	cmp	r6, #16
 8007a08:	f103 0301 	add.w	r3, r3, #1
 8007a0c:	f104 0108 	add.w	r1, r4, #8
 8007a10:	f300 82ca 	bgt.w	8007fa8 <_vfprintf_r+0xd80>
 8007a14:	6066      	str	r6, [r4, #4]
 8007a16:	2b07      	cmp	r3, #7
 8007a18:	4416      	add	r6, r2
 8007a1a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8007a1e:	f340 82d6 	ble.w	8007fce <_vfprintf_r+0xda6>
 8007a22:	aa22      	add	r2, sp, #136	; 0x88
 8007a24:	4649      	mov	r1, r9
 8007a26:	4650      	mov	r0, sl
 8007a28:	f003 ffff 	bl	800ba2a <__sprint_r>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 85ce 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007a32:	ac25      	add	r4, sp, #148	; 0x94
 8007a34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007a38:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8007a3a:	f040 82cf 	bne.w	8007fdc <_vfprintf_r+0xdb4>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	e9c4 3800 	strd	r3, r8, [r4]
 8007a44:	4446      	add	r6, r8
 8007a46:	9624      	str	r6, [sp, #144]	; 0x90
 8007a48:	e00c      	b.n	8007a64 <_vfprintf_r+0x83c>
 8007a4a:	bf00      	nop
 8007a4c:	0800e3f5 	.word	0x0800e3f5
 8007a50:	0800e3e4 	.word	0x0800e3e4
 8007a54:	40300000 	.word	0x40300000
 8007a58:	3fe00000 	.word	0x3fe00000
 8007a5c:	0800e408 	.word	0x0800e408
 8007a60:	0800e418 	.word	0x0800e418
 8007a64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a66:	3301      	adds	r3, #1
 8007a68:	2b07      	cmp	r3, #7
 8007a6a:	9323      	str	r3, [sp, #140]	; 0x8c
 8007a6c:	f300 82fb 	bgt.w	8008066 <_vfprintf_r+0xe3e>
 8007a70:	3408      	adds	r4, #8
 8007a72:	f01b 0f04 	tst.w	fp, #4
 8007a76:	f040 858c 	bne.w	8008592 <_vfprintf_r+0x136a>
 8007a7a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8007a7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a80:	428a      	cmp	r2, r1
 8007a82:	bfac      	ite	ge
 8007a84:	189b      	addge	r3, r3, r2
 8007a86:	185b      	addlt	r3, r3, r1
 8007a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a8c:	b13b      	cbz	r3, 8007a9e <_vfprintf_r+0x876>
 8007a8e:	aa22      	add	r2, sp, #136	; 0x88
 8007a90:	4649      	mov	r1, r9
 8007a92:	4650      	mov	r0, sl
 8007a94:	f003 ffc9 	bl	800ba2a <__sprint_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f040 8598 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9323      	str	r3, [sp, #140]	; 0x8c
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 85ae 	bne.w	8008606 <_vfprintf_r+0x13de>
 8007aaa:	ac25      	add	r4, sp, #148	; 0x94
 8007aac:	e0eb      	b.n	8007c86 <_vfprintf_r+0xa5e>
 8007aae:	ab35      	add	r3, sp, #212	; 0xd4
 8007ab0:	9004      	str	r0, [sp, #16]
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	e62e      	b.n	8007714 <_vfprintf_r+0x4ec>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	e62b      	b.n	8007714 <_vfprintf_r+0x4ec>
 8007abc:	9004      	str	r0, [sp, #16]
 8007abe:	f04f 0806 	mov.w	r8, #6
 8007ac2:	e627      	b.n	8007714 <_vfprintf_r+0x4ec>
 8007ac4:	9004      	str	r0, [sp, #16]
 8007ac6:	e625      	b.n	8007714 <_vfprintf_r+0x4ec>
 8007ac8:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8007acc:	2300      	movs	r3, #0
 8007ace:	eeb0 8a47 	vmov.f32	s16, s14
 8007ad2:	eef0 8a67 	vmov.f32	s17, s15
 8007ad6:	e62d      	b.n	8007734 <_vfprintf_r+0x50c>
 8007ad8:	f802 0c01 	strb.w	r0, [r2, #-1]
 8007adc:	e68f      	b.n	80077fe <_vfprintf_r+0x5d6>
 8007ade:	f803 0b01 	strb.w	r0, [r3], #1
 8007ae2:	1aca      	subs	r2, r1, r3
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	dafa      	bge.n	8007ade <_vfprintf_r+0x8b6>
 8007ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aec:	3201      	adds	r2, #1
 8007aee:	f103 0301 	add.w	r3, r3, #1
 8007af2:	bfb8      	it	lt
 8007af4:	2300      	movlt	r3, #0
 8007af6:	441d      	add	r5, r3
 8007af8:	e691      	b.n	800781e <_vfprintf_r+0x5f6>
 8007afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afc:	462b      	mov	r3, r5
 8007afe:	18a9      	adds	r1, r5, r2
 8007b00:	2030      	movs	r0, #48	; 0x30
 8007b02:	e7ee      	b.n	8007ae2 <_vfprintf_r+0x8ba>
 8007b04:	9b08      	ldr	r3, [sp, #32]
 8007b06:	2b46      	cmp	r3, #70	; 0x46
 8007b08:	d005      	beq.n	8007b16 <_vfprintf_r+0x8ee>
 8007b0a:	2b45      	cmp	r3, #69	; 0x45
 8007b0c:	d11b      	bne.n	8007b46 <_vfprintf_r+0x91e>
 8007b0e:	f108 0501 	add.w	r5, r8, #1
 8007b12:	2102      	movs	r1, #2
 8007b14:	e001      	b.n	8007b1a <_vfprintf_r+0x8f2>
 8007b16:	4645      	mov	r5, r8
 8007b18:	2103      	movs	r1, #3
 8007b1a:	ab20      	add	r3, sp, #128	; 0x80
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	462a      	mov	r2, r5
 8007b24:	ab1c      	add	r3, sp, #112	; 0x70
 8007b26:	4650      	mov	r0, sl
 8007b28:	eeb0 0a48 	vmov.f32	s0, s16
 8007b2c:	eef0 0a68 	vmov.f32	s1, s17
 8007b30:	f000 fefa 	bl	8008928 <_dtoa_r>
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	9003      	str	r0, [sp, #12]
 8007b38:	2b47      	cmp	r3, #71	; 0x47
 8007b3a:	d106      	bne.n	8007b4a <_vfprintf_r+0x922>
 8007b3c:	f01b 0f01 	tst.w	fp, #1
 8007b40:	d103      	bne.n	8007b4a <_vfprintf_r+0x922>
 8007b42:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007b44:	e66b      	b.n	800781e <_vfprintf_r+0x5f6>
 8007b46:	4645      	mov	r5, r8
 8007b48:	e7e3      	b.n	8007b12 <_vfprintf_r+0x8ea>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	195e      	adds	r6, r3, r5
 8007b4e:	9b08      	ldr	r3, [sp, #32]
 8007b50:	2b46      	cmp	r3, #70	; 0x46
 8007b52:	d10f      	bne.n	8007b74 <_vfprintf_r+0x94c>
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b30      	cmp	r3, #48	; 0x30
 8007b5a:	d109      	bne.n	8007b70 <_vfprintf_r+0x948>
 8007b5c:	ec51 0b18 	vmov	r0, r1, d8
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	f7f8 ffda 	bl	8000b1c <__aeabi_dcmpeq>
 8007b68:	b910      	cbnz	r0, 8007b70 <_vfprintf_r+0x948>
 8007b6a:	f1c5 0501 	rsb	r5, r5, #1
 8007b6e:	951c      	str	r5, [sp, #112]	; 0x70
 8007b70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007b72:	441e      	add	r6, r3
 8007b74:	ec51 0b18 	vmov	r0, r1, d8
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f7f8 ffce 	bl	8000b1c <__aeabi_dcmpeq>
 8007b80:	b100      	cbz	r0, 8007b84 <_vfprintf_r+0x95c>
 8007b82:	9620      	str	r6, [sp, #128]	; 0x80
 8007b84:	2230      	movs	r2, #48	; 0x30
 8007b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b88:	429e      	cmp	r6, r3
 8007b8a:	d9da      	bls.n	8007b42 <_vfprintf_r+0x91a>
 8007b8c:	1c59      	adds	r1, r3, #1
 8007b8e:	9120      	str	r1, [sp, #128]	; 0x80
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e7f8      	b.n	8007b86 <_vfprintf_r+0x95e>
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	2b46      	cmp	r3, #70	; 0x46
 8007b98:	f47f ae51 	bne.w	800783e <_vfprintf_r+0x616>
 8007b9c:	f00b 0301 	and.w	r3, fp, #1
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	ea43 0308 	orr.w	r3, r3, r8
 8007ba6:	dd18      	ble.n	8007bda <_vfprintf_r+0x9b2>
 8007ba8:	b383      	cbz	r3, 8007c0c <_vfprintf_r+0x9e4>
 8007baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bac:	18eb      	adds	r3, r5, r3
 8007bae:	4498      	add	r8, r3
 8007bb0:	2366      	movs	r3, #102	; 0x66
 8007bb2:	9307      	str	r3, [sp, #28]
 8007bb4:	e030      	b.n	8007c18 <_vfprintf_r+0x9f0>
 8007bb6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007bba:	f802 6b01 	strb.w	r6, [r2], #1
 8007bbe:	e675      	b.n	80078ac <_vfprintf_r+0x684>
 8007bc0:	b941      	cbnz	r1, 8007bd4 <_vfprintf_r+0x9ac>
 8007bc2:	2230      	movs	r2, #48	; 0x30
 8007bc4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8007bc8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8007bcc:	3330      	adds	r3, #48	; 0x30
 8007bce:	f802 3b01 	strb.w	r3, [r2], #1
 8007bd2:	e677      	b.n	80078c4 <_vfprintf_r+0x69c>
 8007bd4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8007bd8:	e7f8      	b.n	8007bcc <_vfprintf_r+0x9a4>
 8007bda:	b1cb      	cbz	r3, 8007c10 <_vfprintf_r+0x9e8>
 8007bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bde:	3301      	adds	r3, #1
 8007be0:	e7e5      	b.n	8007bae <_vfprintf_r+0x986>
 8007be2:	9b05      	ldr	r3, [sp, #20]
 8007be4:	429d      	cmp	r5, r3
 8007be6:	db07      	blt.n	8007bf8 <_vfprintf_r+0x9d0>
 8007be8:	f01b 0f01 	tst.w	fp, #1
 8007bec:	d029      	beq.n	8007c42 <_vfprintf_r+0xa1a>
 8007bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bf0:	eb05 0803 	add.w	r8, r5, r3
 8007bf4:	2367      	movs	r3, #103	; 0x67
 8007bf6:	e7dc      	b.n	8007bb2 <_vfprintf_r+0x98a>
 8007bf8:	9b05      	ldr	r3, [sp, #20]
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bfc:	2d00      	cmp	r5, #0
 8007bfe:	eb03 0802 	add.w	r8, r3, r2
 8007c02:	dcf7      	bgt.n	8007bf4 <_vfprintf_r+0x9cc>
 8007c04:	f1c5 0301 	rsb	r3, r5, #1
 8007c08:	4498      	add	r8, r3
 8007c0a:	e7f3      	b.n	8007bf4 <_vfprintf_r+0x9cc>
 8007c0c:	46a8      	mov	r8, r5
 8007c0e:	e7cf      	b.n	8007bb0 <_vfprintf_r+0x988>
 8007c10:	2366      	movs	r3, #102	; 0x66
 8007c12:	9307      	str	r3, [sp, #28]
 8007c14:	f04f 0801 	mov.w	r8, #1
 8007c18:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8007c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c1e:	d023      	beq.n	8007c68 <_vfprintf_r+0xa40>
 8007c20:	2300      	movs	r3, #0
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8007c28:	f77f ae62 	ble.w	80078f0 <_vfprintf_r+0x6c8>
 8007c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2bff      	cmp	r3, #255	; 0xff
 8007c32:	d108      	bne.n	8007c46 <_vfprintf_r+0xa1e>
 8007c34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c38:	4413      	add	r3, r2
 8007c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c3c:	fb02 8803 	mla	r8, r2, r3, r8
 8007c40:	e656      	b.n	80078f0 <_vfprintf_r+0x6c8>
 8007c42:	46a8      	mov	r8, r5
 8007c44:	e7d6      	b.n	8007bf4 <_vfprintf_r+0x9cc>
 8007c46:	42ab      	cmp	r3, r5
 8007c48:	daf4      	bge.n	8007c34 <_vfprintf_r+0xa0c>
 8007c4a:	1aed      	subs	r5, r5, r3
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	b133      	cbz	r3, 8007c60 <_vfprintf_r+0xa38>
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	3301      	adds	r3, #1
 8007c56:	9309      	str	r3, [sp, #36]	; 0x24
 8007c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c5e:	e7e5      	b.n	8007c2c <_vfprintf_r+0xa04>
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	3301      	adds	r3, #1
 8007c64:	9308      	str	r3, [sp, #32]
 8007c66:	e7e1      	b.n	8007c2c <_vfprintf_r+0xa04>
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	9308      	str	r3, [sp, #32]
 8007c6c:	e640      	b.n	80078f0 <_vfprintf_r+0x6c8>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	f01b 0f20 	tst.w	fp, #32
 8007c74:	f852 3b04 	ldr.w	r3, [r2], #4
 8007c78:	9206      	str	r2, [sp, #24]
 8007c7a:	d009      	beq.n	8007c90 <_vfprintf_r+0xa68>
 8007c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c7e:	4610      	mov	r0, r2
 8007c80:	17d1      	asrs	r1, r2, #31
 8007c82:	e9c3 0100 	strd	r0, r1, [r3]
 8007c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c88:	9e06      	ldr	r6, [sp, #24]
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	f7ff bb4f 	b.w	800732e <_vfprintf_r+0x106>
 8007c90:	f01b 0f10 	tst.w	fp, #16
 8007c94:	d002      	beq.n	8007c9c <_vfprintf_r+0xa74>
 8007c96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	e7f4      	b.n	8007c86 <_vfprintf_r+0xa5e>
 8007c9c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007ca0:	d002      	beq.n	8007ca8 <_vfprintf_r+0xa80>
 8007ca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ca4:	801a      	strh	r2, [r3, #0]
 8007ca6:	e7ee      	b.n	8007c86 <_vfprintf_r+0xa5e>
 8007ca8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007cac:	d0f3      	beq.n	8007c96 <_vfprintf_r+0xa6e>
 8007cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e7e8      	b.n	8007c86 <_vfprintf_r+0xa5e>
 8007cb4:	f04b 0b10 	orr.w	fp, fp, #16
 8007cb8:	f01b 0f20 	tst.w	fp, #32
 8007cbc:	d01e      	beq.n	8007cfc <_vfprintf_r+0xad4>
 8007cbe:	3607      	adds	r6, #7
 8007cc0:	f026 0307 	bic.w	r3, r6, #7
 8007cc4:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8007cd6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007cda:	f000 84a9 	beq.w	8008630 <_vfprintf_r+0x1408>
 8007cde:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8007ce2:	9204      	str	r2, [sp, #16]
 8007ce4:	ea56 0207 	orrs.w	r2, r6, r7
 8007ce8:	f040 84a8 	bne.w	800863c <_vfprintf_r+0x1414>
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	f000 8104 	beq.w	8007efc <_vfprintf_r+0xcd4>
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	f040 84a4 	bne.w	8008642 <_vfprintf_r+0x141a>
 8007cfa:	e09a      	b.n	8007e32 <_vfprintf_r+0xc0a>
 8007cfc:	1d33      	adds	r3, r6, #4
 8007cfe:	f01b 0f10 	tst.w	fp, #16
 8007d02:	9306      	str	r3, [sp, #24]
 8007d04:	d001      	beq.n	8007d0a <_vfprintf_r+0xae2>
 8007d06:	6836      	ldr	r6, [r6, #0]
 8007d08:	e003      	b.n	8007d12 <_vfprintf_r+0xaea>
 8007d0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007d0e:	d002      	beq.n	8007d16 <_vfprintf_r+0xaee>
 8007d10:	8836      	ldrh	r6, [r6, #0]
 8007d12:	2700      	movs	r7, #0
 8007d14:	e7d9      	b.n	8007cca <_vfprintf_r+0xaa2>
 8007d16:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007d1a:	d0f4      	beq.n	8007d06 <_vfprintf_r+0xade>
 8007d1c:	7836      	ldrb	r6, [r6, #0]
 8007d1e:	e7f8      	b.n	8007d12 <_vfprintf_r+0xaea>
 8007d20:	4633      	mov	r3, r6
 8007d22:	2278      	movs	r2, #120	; 0x78
 8007d24:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d28:	9306      	str	r3, [sp, #24]
 8007d2a:	f647 0330 	movw	r3, #30768	; 0x7830
 8007d2e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8007d32:	4ba8      	ldr	r3, [pc, #672]	; (8007fd4 <_vfprintf_r+0xdac>)
 8007d34:	9316      	str	r3, [sp, #88]	; 0x58
 8007d36:	2700      	movs	r7, #0
 8007d38:	f04b 0b02 	orr.w	fp, fp, #2
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	9207      	str	r2, [sp, #28]
 8007d40:	e7c6      	b.n	8007cd0 <_vfprintf_r+0xaa8>
 8007d42:	4632      	mov	r2, r6
 8007d44:	2500      	movs	r5, #0
 8007d46:	f852 3b04 	ldr.w	r3, [r2], #4
 8007d4a:	9303      	str	r3, [sp, #12]
 8007d4c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007d50:	9206      	str	r2, [sp, #24]
 8007d52:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8007d56:	d010      	beq.n	8007d7a <_vfprintf_r+0xb52>
 8007d58:	9803      	ldr	r0, [sp, #12]
 8007d5a:	4642      	mov	r2, r8
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f7f8 fa5f 	bl	8000220 <memchr>
 8007d62:	9004      	str	r0, [sp, #16]
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f000 80df 	beq.w	8007f28 <_vfprintf_r+0xd00>
 8007d6a:	9a03      	ldr	r2, [sp, #12]
 8007d6c:	9504      	str	r5, [sp, #16]
 8007d6e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8007d72:	eba0 0802 	sub.w	r8, r0, r2
 8007d76:	462e      	mov	r6, r5
 8007d78:	e5c2      	b.n	8007900 <_vfprintf_r+0x6d8>
 8007d7a:	9803      	ldr	r0, [sp, #12]
 8007d7c:	f7f8 fa48 	bl	8000210 <strlen>
 8007d80:	462e      	mov	r6, r5
 8007d82:	4680      	mov	r8, r0
 8007d84:	9504      	str	r5, [sp, #16]
 8007d86:	4633      	mov	r3, r6
 8007d88:	e45e      	b.n	8007648 <_vfprintf_r+0x420>
 8007d8a:	f04b 0b10 	orr.w	fp, fp, #16
 8007d8e:	f01b 0f20 	tst.w	fp, #32
 8007d92:	d007      	beq.n	8007da4 <_vfprintf_r+0xb7c>
 8007d94:	3607      	adds	r6, #7
 8007d96:	f026 0307 	bic.w	r3, r6, #7
 8007d9a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007d9e:	9306      	str	r3, [sp, #24]
 8007da0:	2301      	movs	r3, #1
 8007da2:	e795      	b.n	8007cd0 <_vfprintf_r+0xaa8>
 8007da4:	1d33      	adds	r3, r6, #4
 8007da6:	f01b 0f10 	tst.w	fp, #16
 8007daa:	9306      	str	r3, [sp, #24]
 8007dac:	d001      	beq.n	8007db2 <_vfprintf_r+0xb8a>
 8007dae:	6836      	ldr	r6, [r6, #0]
 8007db0:	e003      	b.n	8007dba <_vfprintf_r+0xb92>
 8007db2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007db6:	d002      	beq.n	8007dbe <_vfprintf_r+0xb96>
 8007db8:	8836      	ldrh	r6, [r6, #0]
 8007dba:	2700      	movs	r7, #0
 8007dbc:	e7f0      	b.n	8007da0 <_vfprintf_r+0xb78>
 8007dbe:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007dc2:	d0f4      	beq.n	8007dae <_vfprintf_r+0xb86>
 8007dc4:	7836      	ldrb	r6, [r6, #0]
 8007dc6:	e7f8      	b.n	8007dba <_vfprintf_r+0xb92>
 8007dc8:	4b83      	ldr	r3, [pc, #524]	; (8007fd8 <_vfprintf_r+0xdb0>)
 8007dca:	9316      	str	r3, [sp, #88]	; 0x58
 8007dcc:	f01b 0f20 	tst.w	fp, #32
 8007dd0:	d019      	beq.n	8007e06 <_vfprintf_r+0xbde>
 8007dd2:	3607      	adds	r6, #7
 8007dd4:	f026 0307 	bic.w	r3, r6, #7
 8007dd8:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8007ddc:	9306      	str	r3, [sp, #24]
 8007dde:	f01b 0f01 	tst.w	fp, #1
 8007de2:	d00a      	beq.n	8007dfa <_vfprintf_r+0xbd2>
 8007de4:	ea56 0307 	orrs.w	r3, r6, r7
 8007de8:	d007      	beq.n	8007dfa <_vfprintf_r+0xbd2>
 8007dea:	2330      	movs	r3, #48	; 0x30
 8007dec:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8007df6:	f04b 0b02 	orr.w	fp, fp, #2
 8007dfa:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e766      	b.n	8007cd0 <_vfprintf_r+0xaa8>
 8007e02:	4b74      	ldr	r3, [pc, #464]	; (8007fd4 <_vfprintf_r+0xdac>)
 8007e04:	e7e1      	b.n	8007dca <_vfprintf_r+0xba2>
 8007e06:	1d33      	adds	r3, r6, #4
 8007e08:	f01b 0f10 	tst.w	fp, #16
 8007e0c:	9306      	str	r3, [sp, #24]
 8007e0e:	d001      	beq.n	8007e14 <_vfprintf_r+0xbec>
 8007e10:	6836      	ldr	r6, [r6, #0]
 8007e12:	e003      	b.n	8007e1c <_vfprintf_r+0xbf4>
 8007e14:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007e18:	d002      	beq.n	8007e20 <_vfprintf_r+0xbf8>
 8007e1a:	8836      	ldrh	r6, [r6, #0]
 8007e1c:	2700      	movs	r7, #0
 8007e1e:	e7de      	b.n	8007dde <_vfprintf_r+0xbb6>
 8007e20:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007e24:	d0f4      	beq.n	8007e10 <_vfprintf_r+0xbe8>
 8007e26:	7836      	ldrb	r6, [r6, #0]
 8007e28:	e7f8      	b.n	8007e1c <_vfprintf_r+0xbf4>
 8007e2a:	2f00      	cmp	r7, #0
 8007e2c:	bf08      	it	eq
 8007e2e:	2e0a      	cmpeq	r6, #10
 8007e30:	d206      	bcs.n	8007e40 <_vfprintf_r+0xc18>
 8007e32:	3630      	adds	r6, #48	; 0x30
 8007e34:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8007e38:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8007e3c:	f000 bc23 	b.w	8008686 <_vfprintf_r+0x145e>
 8007e40:	2300      	movs	r3, #0
 8007e42:	9305      	str	r3, [sp, #20]
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	ad4e      	add	r5, sp, #312	; 0x138
 8007e48:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 8007e4c:	1e6b      	subs	r3, r5, #1
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	220a      	movs	r2, #10
 8007e52:	2300      	movs	r3, #0
 8007e54:	4630      	mov	r0, r6
 8007e56:	4639      	mov	r1, r7
 8007e58:	f7f8 fed0 	bl	8000bfc <__aeabi_uldivmod>
 8007e5c:	9b05      	ldr	r3, [sp, #20]
 8007e5e:	3230      	adds	r2, #48	; 0x30
 8007e60:	3301      	adds	r3, #1
 8007e62:	f805 2c01 	strb.w	r2, [r5, #-1]
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	f1bb 0f00 	cmp.w	fp, #0
 8007e6c:	d019      	beq.n	8007ea2 <_vfprintf_r+0xc7a>
 8007e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e70:	9a05      	ldr	r2, [sp, #20]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d114      	bne.n	8007ea2 <_vfprintf_r+0xc7a>
 8007e78:	2aff      	cmp	r2, #255	; 0xff
 8007e7a:	d012      	beq.n	8007ea2 <_vfprintf_r+0xc7a>
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	bf08      	it	eq
 8007e80:	2e0a      	cmpeq	r6, #10
 8007e82:	d30e      	bcc.n	8007ea2 <_vfprintf_r+0xc7a>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e88:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	f002 fcb3 	bl	800a7fa <strncpy>
 8007e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e96:	785d      	ldrb	r5, [r3, #1]
 8007e98:	b1e5      	cbz	r5, 8007ed4 <_vfprintf_r+0xcac>
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	220a      	movs	r2, #10
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	f7f8 fea7 	bl	8000bfc <__aeabi_uldivmod>
 8007eae:	2f00      	cmp	r7, #0
 8007eb0:	bf08      	it	eq
 8007eb2:	2e0a      	cmpeq	r6, #10
 8007eb4:	d20a      	bcs.n	8007ecc <_vfprintf_r+0xca4>
 8007eb6:	9b03      	ldr	r3, [sp, #12]
 8007eb8:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007ebc:	aa4e      	add	r2, sp, #312	; 0x138
 8007ebe:	4646      	mov	r6, r8
 8007ec0:	eba2 0803 	sub.w	r8, r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	f7ff bbbe 	b.w	8007648 <_vfprintf_r+0x420>
 8007ecc:	9d03      	ldr	r5, [sp, #12]
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	e7bb      	b.n	8007e4c <_vfprintf_r+0xc24>
 8007ed4:	9505      	str	r5, [sp, #20]
 8007ed6:	e7e4      	b.n	8007ea2 <_vfprintf_r+0xc7a>
 8007ed8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007eda:	f006 030f 	and.w	r3, r6, #15
 8007ede:	5cd3      	ldrb	r3, [r2, r3]
 8007ee0:	9a03      	ldr	r2, [sp, #12]
 8007ee2:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8007ee6:	0933      	lsrs	r3, r6, #4
 8007ee8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007eec:	9203      	str	r2, [sp, #12]
 8007eee:	093a      	lsrs	r2, r7, #4
 8007ef0:	461e      	mov	r6, r3
 8007ef2:	4617      	mov	r7, r2
 8007ef4:	ea56 0307 	orrs.w	r3, r6, r7
 8007ef8:	d1ee      	bne.n	8007ed8 <_vfprintf_r+0xcb0>
 8007efa:	e7dc      	b.n	8007eb6 <_vfprintf_r+0xc8e>
 8007efc:	b933      	cbnz	r3, 8007f0c <_vfprintf_r+0xce4>
 8007efe:	f01b 0f01 	tst.w	fp, #1
 8007f02:	d003      	beq.n	8007f0c <_vfprintf_r+0xce4>
 8007f04:	2330      	movs	r3, #48	; 0x30
 8007f06:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8007f0a:	e795      	b.n	8007e38 <_vfprintf_r+0xc10>
 8007f0c:	ab4e      	add	r3, sp, #312	; 0x138
 8007f0e:	e3ba      	b.n	8008686 <_vfprintf_r+0x145e>
 8007f10:	9b07      	ldr	r3, [sp, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 837d 	beq.w	8008612 <_vfprintf_r+0x13ea>
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8007f1e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8007f22:	9606      	str	r6, [sp, #24]
 8007f24:	f7ff bb1e 	b.w	8007564 <_vfprintf_r+0x33c>
 8007f28:	9e04      	ldr	r6, [sp, #16]
 8007f2a:	e72c      	b.n	8007d86 <_vfprintf_r+0xb5e>
 8007f2c:	2010      	movs	r0, #16
 8007f2e:	4402      	add	r2, r0
 8007f30:	2b07      	cmp	r3, #7
 8007f32:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007f36:	6060      	str	r0, [r4, #4]
 8007f38:	dd08      	ble.n	8007f4c <_vfprintf_r+0xd24>
 8007f3a:	aa22      	add	r2, sp, #136	; 0x88
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4650      	mov	r0, sl
 8007f40:	f003 fd73 	bl	800ba2a <__sprint_r>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	f040 8342 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007f4a:	a925      	add	r1, sp, #148	; 0x94
 8007f4c:	3f10      	subs	r7, #16
 8007f4e:	460c      	mov	r4, r1
 8007f50:	e4f1      	b.n	8007936 <_vfprintf_r+0x70e>
 8007f52:	460c      	mov	r4, r1
 8007f54:	e50a      	b.n	800796c <_vfprintf_r+0x744>
 8007f56:	aa22      	add	r2, sp, #136	; 0x88
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	f003 fd65 	bl	800ba2a <__sprint_r>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f040 8334 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007f66:	ac25      	add	r4, sp, #148	; 0x94
 8007f68:	e512      	b.n	8007990 <_vfprintf_r+0x768>
 8007f6a:	aa22      	add	r2, sp, #136	; 0x88
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	4650      	mov	r0, sl
 8007f70:	f003 fd5b 	bl	800ba2a <__sprint_r>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 832a 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007f7a:	ac25      	add	r4, sp, #148	; 0x94
 8007f7c:	e518      	b.n	80079b0 <_vfprintf_r+0x788>
 8007f7e:	2010      	movs	r0, #16
 8007f80:	4402      	add	r2, r0
 8007f82:	2b07      	cmp	r3, #7
 8007f84:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007f88:	6060      	str	r0, [r4, #4]
 8007f8a:	dd08      	ble.n	8007f9e <_vfprintf_r+0xd76>
 8007f8c:	aa22      	add	r2, sp, #136	; 0x88
 8007f8e:	4649      	mov	r1, r9
 8007f90:	4650      	mov	r0, sl
 8007f92:	f003 fd4a 	bl	800ba2a <__sprint_r>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8319 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007f9c:	a925      	add	r1, sp, #148	; 0x94
 8007f9e:	3f10      	subs	r7, #16
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	e50d      	b.n	80079c0 <_vfprintf_r+0x798>
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	e526      	b.n	80079f6 <_vfprintf_r+0x7ce>
 8007fa8:	2010      	movs	r0, #16
 8007faa:	4402      	add	r2, r0
 8007fac:	2b07      	cmp	r3, #7
 8007fae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007fb2:	6060      	str	r0, [r4, #4]
 8007fb4:	dd08      	ble.n	8007fc8 <_vfprintf_r+0xda0>
 8007fb6:	aa22      	add	r2, sp, #136	; 0x88
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4650      	mov	r0, sl
 8007fbc:	f003 fd35 	bl	800ba2a <__sprint_r>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f040 8304 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8007fc6:	a925      	add	r1, sp, #148	; 0x94
 8007fc8:	3e10      	subs	r6, #16
 8007fca:	460c      	mov	r4, r1
 8007fcc:	e518      	b.n	8007a00 <_vfprintf_r+0x7d8>
 8007fce:	460c      	mov	r4, r1
 8007fd0:	e530      	b.n	8007a34 <_vfprintf_r+0x80c>
 8007fd2:	bf00      	nop
 8007fd4:	0800e3e4 	.word	0x0800e3e4
 8007fd8:	0800e3f5 	.word	0x0800e3f5
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	2b65      	cmp	r3, #101	; 0x65
 8007fe0:	f340 8242 	ble.w	8008468 <_vfprintf_r+0x1240>
 8007fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2300      	movs	r3, #0
 8007fec:	f7f8 fd96 	bl	8000b1c <__aeabi_dcmpeq>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d068      	beq.n	80080c6 <_vfprintf_r+0xe9e>
 8007ff4:	4b6d      	ldr	r3, [pc, #436]	; (80081ac <_vfprintf_r+0xf84>)
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	441e      	add	r6, r3
 8007ffc:	6063      	str	r3, [r4, #4]
 8007ffe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008000:	9624      	str	r6, [sp, #144]	; 0x90
 8008002:	3301      	adds	r3, #1
 8008004:	2b07      	cmp	r3, #7
 8008006:	9323      	str	r3, [sp, #140]	; 0x8c
 8008008:	dc37      	bgt.n	800807a <_vfprintf_r+0xe52>
 800800a:	3408      	adds	r4, #8
 800800c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800800e:	9a05      	ldr	r2, [sp, #20]
 8008010:	4293      	cmp	r3, r2
 8008012:	db03      	blt.n	800801c <_vfprintf_r+0xdf4>
 8008014:	f01b 0f01 	tst.w	fp, #1
 8008018:	f43f ad2b 	beq.w	8007a72 <_vfprintf_r+0x84a>
 800801c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008024:	6063      	str	r3, [r4, #4]
 8008026:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008028:	4413      	add	r3, r2
 800802a:	9324      	str	r3, [sp, #144]	; 0x90
 800802c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800802e:	3301      	adds	r3, #1
 8008030:	2b07      	cmp	r3, #7
 8008032:	9323      	str	r3, [sp, #140]	; 0x8c
 8008034:	dc2b      	bgt.n	800808e <_vfprintf_r+0xe66>
 8008036:	3408      	adds	r4, #8
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	1e5d      	subs	r5, r3, #1
 800803c:	2d00      	cmp	r5, #0
 800803e:	f77f ad18 	ble.w	8007a72 <_vfprintf_r+0x84a>
 8008042:	4e5b      	ldr	r6, [pc, #364]	; (80081b0 <_vfprintf_r+0xf88>)
 8008044:	2710      	movs	r7, #16
 8008046:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800804a:	2d10      	cmp	r5, #16
 800804c:	f103 0301 	add.w	r3, r3, #1
 8008050:	f104 0108 	add.w	r1, r4, #8
 8008054:	6026      	str	r6, [r4, #0]
 8008056:	dc24      	bgt.n	80080a2 <_vfprintf_r+0xe7a>
 8008058:	6065      	str	r5, [r4, #4]
 800805a:	2b07      	cmp	r3, #7
 800805c:	4415      	add	r5, r2
 800805e:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8008062:	f340 8293 	ble.w	800858c <_vfprintf_r+0x1364>
 8008066:	aa22      	add	r2, sp, #136	; 0x88
 8008068:	4649      	mov	r1, r9
 800806a:	4650      	mov	r0, sl
 800806c:	f003 fcdd 	bl	800ba2a <__sprint_r>
 8008070:	2800      	cmp	r0, #0
 8008072:	f040 82ac 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8008076:	ac25      	add	r4, sp, #148	; 0x94
 8008078:	e4fb      	b.n	8007a72 <_vfprintf_r+0x84a>
 800807a:	aa22      	add	r2, sp, #136	; 0x88
 800807c:	4649      	mov	r1, r9
 800807e:	4650      	mov	r0, sl
 8008080:	f003 fcd3 	bl	800ba2a <__sprint_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	f040 82a2 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800808a:	ac25      	add	r4, sp, #148	; 0x94
 800808c:	e7be      	b.n	800800c <_vfprintf_r+0xde4>
 800808e:	aa22      	add	r2, sp, #136	; 0x88
 8008090:	4649      	mov	r1, r9
 8008092:	4650      	mov	r0, sl
 8008094:	f003 fcc9 	bl	800ba2a <__sprint_r>
 8008098:	2800      	cmp	r0, #0
 800809a:	f040 8298 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800809e:	ac25      	add	r4, sp, #148	; 0x94
 80080a0:	e7ca      	b.n	8008038 <_vfprintf_r+0xe10>
 80080a2:	3210      	adds	r2, #16
 80080a4:	2b07      	cmp	r3, #7
 80080a6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80080aa:	6067      	str	r7, [r4, #4]
 80080ac:	dd08      	ble.n	80080c0 <_vfprintf_r+0xe98>
 80080ae:	aa22      	add	r2, sp, #136	; 0x88
 80080b0:	4649      	mov	r1, r9
 80080b2:	4650      	mov	r0, sl
 80080b4:	f003 fcb9 	bl	800ba2a <__sprint_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f040 8288 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80080be:	a925      	add	r1, sp, #148	; 0x94
 80080c0:	3d10      	subs	r5, #16
 80080c2:	460c      	mov	r4, r1
 80080c4:	e7bf      	b.n	8008046 <_vfprintf_r+0xe1e>
 80080c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	dc73      	bgt.n	80081b4 <_vfprintf_r+0xf8c>
 80080cc:	4b37      	ldr	r3, [pc, #220]	; (80081ac <_vfprintf_r+0xf84>)
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	2301      	movs	r3, #1
 80080d2:	441e      	add	r6, r3
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080d8:	9624      	str	r6, [sp, #144]	; 0x90
 80080da:	3301      	adds	r3, #1
 80080dc:	2b07      	cmp	r3, #7
 80080de:	9323      	str	r3, [sp, #140]	; 0x8c
 80080e0:	dc3d      	bgt.n	800815e <_vfprintf_r+0xf36>
 80080e2:	3408      	adds	r4, #8
 80080e4:	9905      	ldr	r1, [sp, #20]
 80080e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80080ea:	430a      	orrs	r2, r1
 80080ec:	f00b 0101 	and.w	r1, fp, #1
 80080f0:	430a      	orrs	r2, r1
 80080f2:	f43f acbe 	beq.w	8007a72 <_vfprintf_r+0x84a>
 80080f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080f8:	6022      	str	r2, [r4, #0]
 80080fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080fc:	6062      	str	r2, [r4, #4]
 80080fe:	4413      	add	r3, r2
 8008100:	9324      	str	r3, [sp, #144]	; 0x90
 8008102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008104:	3301      	adds	r3, #1
 8008106:	2b07      	cmp	r3, #7
 8008108:	9323      	str	r3, [sp, #140]	; 0x8c
 800810a:	dc32      	bgt.n	8008172 <_vfprintf_r+0xf4a>
 800810c:	3408      	adds	r4, #8
 800810e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008110:	2d00      	cmp	r5, #0
 8008112:	da1b      	bge.n	800814c <_vfprintf_r+0xf24>
 8008114:	4e26      	ldr	r6, [pc, #152]	; (80081b0 <_vfprintf_r+0xf88>)
 8008116:	426d      	negs	r5, r5
 8008118:	4623      	mov	r3, r4
 800811a:	2710      	movs	r7, #16
 800811c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8008120:	2d10      	cmp	r5, #16
 8008122:	f102 0201 	add.w	r2, r2, #1
 8008126:	f104 0408 	add.w	r4, r4, #8
 800812a:	601e      	str	r6, [r3, #0]
 800812c:	dc2b      	bgt.n	8008186 <_vfprintf_r+0xf5e>
 800812e:	605d      	str	r5, [r3, #4]
 8008130:	2a07      	cmp	r2, #7
 8008132:	440d      	add	r5, r1
 8008134:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8008138:	dd08      	ble.n	800814c <_vfprintf_r+0xf24>
 800813a:	aa22      	add	r2, sp, #136	; 0x88
 800813c:	4649      	mov	r1, r9
 800813e:	4650      	mov	r0, sl
 8008140:	f003 fc73 	bl	800ba2a <__sprint_r>
 8008144:	2800      	cmp	r0, #0
 8008146:	f040 8242 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800814a:	ac25      	add	r4, sp, #148	; 0x94
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	9a05      	ldr	r2, [sp, #20]
 8008154:	6063      	str	r3, [r4, #4]
 8008156:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008158:	4413      	add	r3, r2
 800815a:	9324      	str	r3, [sp, #144]	; 0x90
 800815c:	e482      	b.n	8007a64 <_vfprintf_r+0x83c>
 800815e:	aa22      	add	r2, sp, #136	; 0x88
 8008160:	4649      	mov	r1, r9
 8008162:	4650      	mov	r0, sl
 8008164:	f003 fc61 	bl	800ba2a <__sprint_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	f040 8230 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800816e:	ac25      	add	r4, sp, #148	; 0x94
 8008170:	e7b8      	b.n	80080e4 <_vfprintf_r+0xebc>
 8008172:	aa22      	add	r2, sp, #136	; 0x88
 8008174:	4649      	mov	r1, r9
 8008176:	4650      	mov	r0, sl
 8008178:	f003 fc57 	bl	800ba2a <__sprint_r>
 800817c:	2800      	cmp	r0, #0
 800817e:	f040 8226 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8008182:	ac25      	add	r4, sp, #148	; 0x94
 8008184:	e7c3      	b.n	800810e <_vfprintf_r+0xee6>
 8008186:	3110      	adds	r1, #16
 8008188:	2a07      	cmp	r2, #7
 800818a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800818e:	605f      	str	r7, [r3, #4]
 8008190:	dd08      	ble.n	80081a4 <_vfprintf_r+0xf7c>
 8008192:	aa22      	add	r2, sp, #136	; 0x88
 8008194:	4649      	mov	r1, r9
 8008196:	4650      	mov	r0, sl
 8008198:	f003 fc47 	bl	800ba2a <__sprint_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	f040 8216 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80081a2:	ac25      	add	r4, sp, #148	; 0x94
 80081a4:	3d10      	subs	r5, #16
 80081a6:	4623      	mov	r3, r4
 80081a8:	e7b8      	b.n	800811c <_vfprintf_r+0xef4>
 80081aa:	bf00      	nop
 80081ac:	0800e406 	.word	0x0800e406
 80081b0:	0800e418 	.word	0x0800e418
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	42ab      	cmp	r3, r5
 80081b8:	bfa8      	it	ge
 80081ba:	462b      	movge	r3, r5
 80081bc:	2b00      	cmp	r3, #0
 80081be:	461f      	mov	r7, r3
 80081c0:	dd0b      	ble.n	80081da <_vfprintf_r+0xfb2>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	e9c4 3700 	strd	r3, r7, [r4]
 80081c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081ca:	3301      	adds	r3, #1
 80081cc:	443e      	add	r6, r7
 80081ce:	2b07      	cmp	r3, #7
 80081d0:	9624      	str	r6, [sp, #144]	; 0x90
 80081d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80081d4:	f300 808c 	bgt.w	80082f0 <_vfprintf_r+0x10c8>
 80081d8:	3408      	adds	r4, #8
 80081da:	2f00      	cmp	r7, #0
 80081dc:	bfac      	ite	ge
 80081de:	1bee      	subge	r6, r5, r7
 80081e0:	462e      	movlt	r6, r5
 80081e2:	2e00      	cmp	r6, #0
 80081e4:	dd1c      	ble.n	8008220 <_vfprintf_r+0xff8>
 80081e6:	4f9f      	ldr	r7, [pc, #636]	; (8008464 <_vfprintf_r+0x123c>)
 80081e8:	f04f 0810 	mov.w	r8, #16
 80081ec:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80081f0:	2e10      	cmp	r6, #16
 80081f2:	f103 0301 	add.w	r3, r3, #1
 80081f6:	f104 0108 	add.w	r1, r4, #8
 80081fa:	6027      	str	r7, [r4, #0]
 80081fc:	f300 8082 	bgt.w	8008304 <_vfprintf_r+0x10dc>
 8008200:	6066      	str	r6, [r4, #4]
 8008202:	2b07      	cmp	r3, #7
 8008204:	4416      	add	r6, r2
 8008206:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800820a:	f340 808e 	ble.w	800832a <_vfprintf_r+0x1102>
 800820e:	aa22      	add	r2, sp, #136	; 0x88
 8008210:	4649      	mov	r1, r9
 8008212:	4650      	mov	r0, sl
 8008214:	f003 fc09 	bl	800ba2a <__sprint_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	f040 81d8 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800821e:	ac25      	add	r4, sp, #148	; 0x94
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8008226:	441d      	add	r5, r3
 8008228:	d00d      	beq.n	8008246 <_vfprintf_r+0x101e>
 800822a:	4e8e      	ldr	r6, [pc, #568]	; (8008464 <_vfprintf_r+0x123c>)
 800822c:	2710      	movs	r7, #16
 800822e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	d17c      	bne.n	800832e <_vfprintf_r+0x1106>
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d17c      	bne.n	8008334 <_vfprintf_r+0x110c>
 800823a:	9b03      	ldr	r3, [sp, #12]
 800823c:	9a05      	ldr	r2, [sp, #20]
 800823e:	4413      	add	r3, r2
 8008240:	429d      	cmp	r5, r3
 8008242:	bf28      	it	cs
 8008244:	461d      	movcs	r5, r3
 8008246:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008248:	9a05      	ldr	r2, [sp, #20]
 800824a:	4293      	cmp	r3, r2
 800824c:	db02      	blt.n	8008254 <_vfprintf_r+0x102c>
 800824e:	f01b 0f01 	tst.w	fp, #1
 8008252:	d00e      	beq.n	8008272 <_vfprintf_r+0x104a>
 8008254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800825a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800825c:	6063      	str	r3, [r4, #4]
 800825e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008260:	4413      	add	r3, r2
 8008262:	9324      	str	r3, [sp, #144]	; 0x90
 8008264:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008266:	3301      	adds	r3, #1
 8008268:	2b07      	cmp	r3, #7
 800826a:	9323      	str	r3, [sp, #140]	; 0x8c
 800826c:	f300 80e5 	bgt.w	800843a <_vfprintf_r+0x1212>
 8008270:	3408      	adds	r4, #8
 8008272:	9905      	ldr	r1, [sp, #20]
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8008278:	440b      	add	r3, r1
 800827a:	1b8e      	subs	r6, r1, r6
 800827c:	1b5a      	subs	r2, r3, r5
 800827e:	4296      	cmp	r6, r2
 8008280:	bfa8      	it	ge
 8008282:	4616      	movge	r6, r2
 8008284:	2e00      	cmp	r6, #0
 8008286:	dd0b      	ble.n	80082a0 <_vfprintf_r+0x1078>
 8008288:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800828a:	4433      	add	r3, r6
 800828c:	9324      	str	r3, [sp, #144]	; 0x90
 800828e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008290:	3301      	adds	r3, #1
 8008292:	2b07      	cmp	r3, #7
 8008294:	e9c4 5600 	strd	r5, r6, [r4]
 8008298:	9323      	str	r3, [sp, #140]	; 0x8c
 800829a:	f300 80d8 	bgt.w	800844e <_vfprintf_r+0x1226>
 800829e:	3408      	adds	r4, #8
 80082a0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80082a2:	9b05      	ldr	r3, [sp, #20]
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	eba3 0505 	sub.w	r5, r3, r5
 80082aa:	bfa8      	it	ge
 80082ac:	1bad      	subge	r5, r5, r6
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	f77f abdf 	ble.w	8007a72 <_vfprintf_r+0x84a>
 80082b4:	4e6b      	ldr	r6, [pc, #428]	; (8008464 <_vfprintf_r+0x123c>)
 80082b6:	2710      	movs	r7, #16
 80082b8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80082bc:	2d10      	cmp	r5, #16
 80082be:	f103 0301 	add.w	r3, r3, #1
 80082c2:	f104 0108 	add.w	r1, r4, #8
 80082c6:	6026      	str	r6, [r4, #0]
 80082c8:	f77f aec6 	ble.w	8008058 <_vfprintf_r+0xe30>
 80082cc:	3210      	adds	r2, #16
 80082ce:	2b07      	cmp	r3, #7
 80082d0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80082d4:	6067      	str	r7, [r4, #4]
 80082d6:	dd08      	ble.n	80082ea <_vfprintf_r+0x10c2>
 80082d8:	aa22      	add	r2, sp, #136	; 0x88
 80082da:	4649      	mov	r1, r9
 80082dc:	4650      	mov	r0, sl
 80082de:	f003 fba4 	bl	800ba2a <__sprint_r>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	f040 8173 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80082e8:	a925      	add	r1, sp, #148	; 0x94
 80082ea:	3d10      	subs	r5, #16
 80082ec:	460c      	mov	r4, r1
 80082ee:	e7e3      	b.n	80082b8 <_vfprintf_r+0x1090>
 80082f0:	aa22      	add	r2, sp, #136	; 0x88
 80082f2:	4649      	mov	r1, r9
 80082f4:	4650      	mov	r0, sl
 80082f6:	f003 fb98 	bl	800ba2a <__sprint_r>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f040 8167 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8008300:	ac25      	add	r4, sp, #148	; 0x94
 8008302:	e76a      	b.n	80081da <_vfprintf_r+0xfb2>
 8008304:	3210      	adds	r2, #16
 8008306:	2b07      	cmp	r3, #7
 8008308:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800830c:	f8c4 8004 	str.w	r8, [r4, #4]
 8008310:	dd08      	ble.n	8008324 <_vfprintf_r+0x10fc>
 8008312:	aa22      	add	r2, sp, #136	; 0x88
 8008314:	4649      	mov	r1, r9
 8008316:	4650      	mov	r0, sl
 8008318:	f003 fb87 	bl	800ba2a <__sprint_r>
 800831c:	2800      	cmp	r0, #0
 800831e:	f040 8156 	bne.w	80085ce <_vfprintf_r+0x13a6>
 8008322:	a925      	add	r1, sp, #148	; 0x94
 8008324:	3e10      	subs	r6, #16
 8008326:	460c      	mov	r4, r1
 8008328:	e760      	b.n	80081ec <_vfprintf_r+0xfc4>
 800832a:	460c      	mov	r4, r1
 800832c:	e778      	b.n	8008220 <_vfprintf_r+0xff8>
 800832e:	9b08      	ldr	r3, [sp, #32]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d052      	beq.n	80083da <_vfprintf_r+0x11b2>
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	3b01      	subs	r3, #1
 8008338:	9308      	str	r3, [sp, #32]
 800833a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008342:	6063      	str	r3, [r4, #4]
 8008344:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008346:	4413      	add	r3, r2
 8008348:	9324      	str	r3, [sp, #144]	; 0x90
 800834a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800834c:	3301      	adds	r3, #1
 800834e:	2b07      	cmp	r3, #7
 8008350:	9323      	str	r3, [sp, #140]	; 0x8c
 8008352:	dc49      	bgt.n	80083e8 <_vfprintf_r+0x11c0>
 8008354:	3408      	adds	r4, #8
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	9a05      	ldr	r2, [sp, #20]
 800835a:	eb03 0802 	add.w	r8, r3, r2
 800835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	eba8 0805 	sub.w	r8, r8, r5
 8008366:	4598      	cmp	r8, r3
 8008368:	bfa8      	it	ge
 800836a:	4698      	movge	r8, r3
 800836c:	f1b8 0f00 	cmp.w	r8, #0
 8008370:	dd0a      	ble.n	8008388 <_vfprintf_r+0x1160>
 8008372:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008374:	4443      	add	r3, r8
 8008376:	9324      	str	r3, [sp, #144]	; 0x90
 8008378:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800837a:	3301      	adds	r3, #1
 800837c:	2b07      	cmp	r3, #7
 800837e:	e9c4 5800 	strd	r5, r8, [r4]
 8008382:	9323      	str	r3, [sp, #140]	; 0x8c
 8008384:	dc3a      	bgt.n	80083fc <_vfprintf_r+0x11d4>
 8008386:	3408      	adds	r4, #8
 8008388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	bfac      	ite	ge
 8008392:	eba3 0808 	subge.w	r8, r3, r8
 8008396:	4698      	movlt	r8, r3
 8008398:	f1b8 0f00 	cmp.w	r8, #0
 800839c:	dd19      	ble.n	80083d2 <_vfprintf_r+0x11aa>
 800839e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80083a2:	f1b8 0f10 	cmp.w	r8, #16
 80083a6:	f102 0201 	add.w	r2, r2, #1
 80083aa:	f104 0108 	add.w	r1, r4, #8
 80083ae:	6026      	str	r6, [r4, #0]
 80083b0:	dc2e      	bgt.n	8008410 <_vfprintf_r+0x11e8>
 80083b2:	4443      	add	r3, r8
 80083b4:	2a07      	cmp	r2, #7
 80083b6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80083ba:	f8c4 8004 	str.w	r8, [r4, #4]
 80083be:	dd3a      	ble.n	8008436 <_vfprintf_r+0x120e>
 80083c0:	aa22      	add	r2, sp, #136	; 0x88
 80083c2:	4649      	mov	r1, r9
 80083c4:	4650      	mov	r0, sl
 80083c6:	f003 fb30 	bl	800ba2a <__sprint_r>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	f040 80ff 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80083d0:	ac25      	add	r4, sp, #148	; 0x94
 80083d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	441d      	add	r5, r3
 80083d8:	e729      	b.n	800822e <_vfprintf_r+0x1006>
 80083da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083dc:	3b01      	subs	r3, #1
 80083de:	930a      	str	r3, [sp, #40]	; 0x28
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	3b01      	subs	r3, #1
 80083e4:	9309      	str	r3, [sp, #36]	; 0x24
 80083e6:	e7a8      	b.n	800833a <_vfprintf_r+0x1112>
 80083e8:	aa22      	add	r2, sp, #136	; 0x88
 80083ea:	4649      	mov	r1, r9
 80083ec:	4650      	mov	r0, sl
 80083ee:	f003 fb1c 	bl	800ba2a <__sprint_r>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f040 80eb 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80083f8:	ac25      	add	r4, sp, #148	; 0x94
 80083fa:	e7ac      	b.n	8008356 <_vfprintf_r+0x112e>
 80083fc:	aa22      	add	r2, sp, #136	; 0x88
 80083fe:	4649      	mov	r1, r9
 8008400:	4650      	mov	r0, sl
 8008402:	f003 fb12 	bl	800ba2a <__sprint_r>
 8008406:	2800      	cmp	r0, #0
 8008408:	f040 80e1 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800840c:	ac25      	add	r4, sp, #148	; 0x94
 800840e:	e7bb      	b.n	8008388 <_vfprintf_r+0x1160>
 8008410:	3310      	adds	r3, #16
 8008412:	2a07      	cmp	r2, #7
 8008414:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008418:	6067      	str	r7, [r4, #4]
 800841a:	dd08      	ble.n	800842e <_vfprintf_r+0x1206>
 800841c:	aa22      	add	r2, sp, #136	; 0x88
 800841e:	4649      	mov	r1, r9
 8008420:	4650      	mov	r0, sl
 8008422:	f003 fb02 	bl	800ba2a <__sprint_r>
 8008426:	2800      	cmp	r0, #0
 8008428:	f040 80d1 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800842c:	a925      	add	r1, sp, #148	; 0x94
 800842e:	f1a8 0810 	sub.w	r8, r8, #16
 8008432:	460c      	mov	r4, r1
 8008434:	e7b3      	b.n	800839e <_vfprintf_r+0x1176>
 8008436:	460c      	mov	r4, r1
 8008438:	e7cb      	b.n	80083d2 <_vfprintf_r+0x11aa>
 800843a:	aa22      	add	r2, sp, #136	; 0x88
 800843c:	4649      	mov	r1, r9
 800843e:	4650      	mov	r0, sl
 8008440:	f003 faf3 	bl	800ba2a <__sprint_r>
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 80c2 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800844a:	ac25      	add	r4, sp, #148	; 0x94
 800844c:	e711      	b.n	8008272 <_vfprintf_r+0x104a>
 800844e:	aa22      	add	r2, sp, #136	; 0x88
 8008450:	4649      	mov	r1, r9
 8008452:	4650      	mov	r0, sl
 8008454:	f003 fae9 	bl	800ba2a <__sprint_r>
 8008458:	2800      	cmp	r0, #0
 800845a:	f040 80b8 	bne.w	80085ce <_vfprintf_r+0x13a6>
 800845e:	ac25      	add	r4, sp, #148	; 0x94
 8008460:	e71e      	b.n	80082a0 <_vfprintf_r+0x1078>
 8008462:	bf00      	nop
 8008464:	0800e418 	.word	0x0800e418
 8008468:	9a05      	ldr	r2, [sp, #20]
 800846a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800846c:	2a01      	cmp	r2, #1
 800846e:	9a03      	ldr	r2, [sp, #12]
 8008470:	6022      	str	r2, [r4, #0]
 8008472:	f106 0601 	add.w	r6, r6, #1
 8008476:	f103 0301 	add.w	r3, r3, #1
 800847a:	f04f 0201 	mov.w	r2, #1
 800847e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8008482:	f104 0508 	add.w	r5, r4, #8
 8008486:	6062      	str	r2, [r4, #4]
 8008488:	dc02      	bgt.n	8008490 <_vfprintf_r+0x1268>
 800848a:	f01b 0f01 	tst.w	fp, #1
 800848e:	d078      	beq.n	8008582 <_vfprintf_r+0x135a>
 8008490:	2b07      	cmp	r3, #7
 8008492:	dd08      	ble.n	80084a6 <_vfprintf_r+0x127e>
 8008494:	aa22      	add	r2, sp, #136	; 0x88
 8008496:	4649      	mov	r1, r9
 8008498:	4650      	mov	r0, sl
 800849a:	f003 fac6 	bl	800ba2a <__sprint_r>
 800849e:	2800      	cmp	r0, #0
 80084a0:	f040 8095 	bne.w	80085ce <_vfprintf_r+0x13a6>
 80084a4:	ad25      	add	r5, sp, #148	; 0x94
 80084a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084a8:	602b      	str	r3, [r5, #0]
 80084aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ae:	606b      	str	r3, [r5, #4]
 80084b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80084b2:	4413      	add	r3, r2
 80084b4:	9324      	str	r3, [sp, #144]	; 0x90
 80084b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084b8:	3301      	adds	r3, #1
 80084ba:	2b07      	cmp	r3, #7
 80084bc:	9323      	str	r3, [sp, #140]	; 0x8c
 80084be:	dc32      	bgt.n	8008526 <_vfprintf_r+0x12fe>
 80084c0:	3508      	adds	r5, #8
 80084c2:	9b05      	ldr	r3, [sp, #20]
 80084c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084c8:	1e5c      	subs	r4, r3, #1
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	f7f8 fb25 	bl	8000b1c <__aeabi_dcmpeq>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d130      	bne.n	8008538 <_vfprintf_r+0x1310>
 80084d6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80084d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80084da:	9803      	ldr	r0, [sp, #12]
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	3101      	adds	r1, #1
 80084e0:	3b01      	subs	r3, #1
 80084e2:	3001      	adds	r0, #1
 80084e4:	4413      	add	r3, r2
 80084e6:	2907      	cmp	r1, #7
 80084e8:	e9c5 0400 	strd	r0, r4, [r5]
 80084ec:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 80084f0:	dd4a      	ble.n	8008588 <_vfprintf_r+0x1360>
 80084f2:	aa22      	add	r2, sp, #136	; 0x88
 80084f4:	4649      	mov	r1, r9
 80084f6:	4650      	mov	r0, sl
 80084f8:	f003 fa97 	bl	800ba2a <__sprint_r>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d166      	bne.n	80085ce <_vfprintf_r+0x13a6>
 8008500:	ad25      	add	r5, sp, #148	; 0x94
 8008502:	ab1e      	add	r3, sp, #120	; 0x78
 8008504:	602b      	str	r3, [r5, #0]
 8008506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008508:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800850a:	606b      	str	r3, [r5, #4]
 800850c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800850e:	4413      	add	r3, r2
 8008510:	9324      	str	r3, [sp, #144]	; 0x90
 8008512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008514:	3301      	adds	r3, #1
 8008516:	2b07      	cmp	r3, #7
 8008518:	9323      	str	r3, [sp, #140]	; 0x8c
 800851a:	f73f ada4 	bgt.w	8008066 <_vfprintf_r+0xe3e>
 800851e:	f105 0408 	add.w	r4, r5, #8
 8008522:	f7ff baa6 	b.w	8007a72 <_vfprintf_r+0x84a>
 8008526:	aa22      	add	r2, sp, #136	; 0x88
 8008528:	4649      	mov	r1, r9
 800852a:	4650      	mov	r0, sl
 800852c:	f003 fa7d 	bl	800ba2a <__sprint_r>
 8008530:	2800      	cmp	r0, #0
 8008532:	d14c      	bne.n	80085ce <_vfprintf_r+0x13a6>
 8008534:	ad25      	add	r5, sp, #148	; 0x94
 8008536:	e7c4      	b.n	80084c2 <_vfprintf_r+0x129a>
 8008538:	2c00      	cmp	r4, #0
 800853a:	dde2      	ble.n	8008502 <_vfprintf_r+0x12da>
 800853c:	4e53      	ldr	r6, [pc, #332]	; (800868c <_vfprintf_r+0x1464>)
 800853e:	2710      	movs	r7, #16
 8008540:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008544:	2c10      	cmp	r4, #16
 8008546:	f103 0301 	add.w	r3, r3, #1
 800854a:	f105 0108 	add.w	r1, r5, #8
 800854e:	602e      	str	r6, [r5, #0]
 8008550:	dc07      	bgt.n	8008562 <_vfprintf_r+0x133a>
 8008552:	606c      	str	r4, [r5, #4]
 8008554:	2b07      	cmp	r3, #7
 8008556:	4414      	add	r4, r2
 8008558:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800855c:	dcc9      	bgt.n	80084f2 <_vfprintf_r+0x12ca>
 800855e:	460d      	mov	r5, r1
 8008560:	e7cf      	b.n	8008502 <_vfprintf_r+0x12da>
 8008562:	3210      	adds	r2, #16
 8008564:	2b07      	cmp	r3, #7
 8008566:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800856a:	606f      	str	r7, [r5, #4]
 800856c:	dd06      	ble.n	800857c <_vfprintf_r+0x1354>
 800856e:	aa22      	add	r2, sp, #136	; 0x88
 8008570:	4649      	mov	r1, r9
 8008572:	4650      	mov	r0, sl
 8008574:	f003 fa59 	bl	800ba2a <__sprint_r>
 8008578:	bb48      	cbnz	r0, 80085ce <_vfprintf_r+0x13a6>
 800857a:	a925      	add	r1, sp, #148	; 0x94
 800857c:	3c10      	subs	r4, #16
 800857e:	460d      	mov	r5, r1
 8008580:	e7de      	b.n	8008540 <_vfprintf_r+0x1318>
 8008582:	2b07      	cmp	r3, #7
 8008584:	ddbd      	ble.n	8008502 <_vfprintf_r+0x12da>
 8008586:	e7b4      	b.n	80084f2 <_vfprintf_r+0x12ca>
 8008588:	3508      	adds	r5, #8
 800858a:	e7ba      	b.n	8008502 <_vfprintf_r+0x12da>
 800858c:	460c      	mov	r4, r1
 800858e:	f7ff ba70 	b.w	8007a72 <_vfprintf_r+0x84a>
 8008592:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8008596:	1a9d      	subs	r5, r3, r2
 8008598:	2d00      	cmp	r5, #0
 800859a:	f77f aa6e 	ble.w	8007a7a <_vfprintf_r+0x852>
 800859e:	4e3c      	ldr	r6, [pc, #240]	; (8008690 <_vfprintf_r+0x1468>)
 80085a0:	2710      	movs	r7, #16
 80085a2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80085a6:	2d10      	cmp	r5, #16
 80085a8:	f103 0301 	add.w	r3, r3, #1
 80085ac:	6026      	str	r6, [r4, #0]
 80085ae:	dc18      	bgt.n	80085e2 <_vfprintf_r+0x13ba>
 80085b0:	6065      	str	r5, [r4, #4]
 80085b2:	2b07      	cmp	r3, #7
 80085b4:	4415      	add	r5, r2
 80085b6:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80085ba:	f77f aa5e 	ble.w	8007a7a <_vfprintf_r+0x852>
 80085be:	aa22      	add	r2, sp, #136	; 0x88
 80085c0:	4649      	mov	r1, r9
 80085c2:	4650      	mov	r0, sl
 80085c4:	f003 fa31 	bl	800ba2a <__sprint_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f43f aa56 	beq.w	8007a7a <_vfprintf_r+0x852>
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f43f a872 	beq.w	80076ba <_vfprintf_r+0x492>
 80085d6:	4619      	mov	r1, r3
 80085d8:	4650      	mov	r0, sl
 80085da:	f001 f903 	bl	80097e4 <_free_r>
 80085de:	f7ff b86c 	b.w	80076ba <_vfprintf_r+0x492>
 80085e2:	3210      	adds	r2, #16
 80085e4:	2b07      	cmp	r3, #7
 80085e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80085ea:	6067      	str	r7, [r4, #4]
 80085ec:	dc02      	bgt.n	80085f4 <_vfprintf_r+0x13cc>
 80085ee:	3408      	adds	r4, #8
 80085f0:	3d10      	subs	r5, #16
 80085f2:	e7d6      	b.n	80085a2 <_vfprintf_r+0x137a>
 80085f4:	aa22      	add	r2, sp, #136	; 0x88
 80085f6:	4649      	mov	r1, r9
 80085f8:	4650      	mov	r0, sl
 80085fa:	f003 fa16 	bl	800ba2a <__sprint_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d1e5      	bne.n	80085ce <_vfprintf_r+0x13a6>
 8008602:	ac25      	add	r4, sp, #148	; 0x94
 8008604:	e7f4      	b.n	80085f0 <_vfprintf_r+0x13c8>
 8008606:	9904      	ldr	r1, [sp, #16]
 8008608:	4650      	mov	r0, sl
 800860a:	f001 f8eb 	bl	80097e4 <_free_r>
 800860e:	f7ff ba4c 	b.w	8007aaa <_vfprintf_r+0x882>
 8008612:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008614:	b91b      	cbnz	r3, 800861e <_vfprintf_r+0x13f6>
 8008616:	2300      	movs	r3, #0
 8008618:	9323      	str	r3, [sp, #140]	; 0x8c
 800861a:	f7ff b84e 	b.w	80076ba <_vfprintf_r+0x492>
 800861e:	aa22      	add	r2, sp, #136	; 0x88
 8008620:	4649      	mov	r1, r9
 8008622:	4650      	mov	r0, sl
 8008624:	f003 fa01 	bl	800ba2a <__sprint_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	d0f4      	beq.n	8008616 <_vfprintf_r+0x13ee>
 800862c:	f7ff b845 	b.w	80076ba <_vfprintf_r+0x492>
 8008630:	ea56 0207 	orrs.w	r2, r6, r7
 8008634:	f8cd b010 	str.w	fp, [sp, #16]
 8008638:	f43f ab5c 	beq.w	8007cf4 <_vfprintf_r+0xacc>
 800863c:	2b01      	cmp	r3, #1
 800863e:	f43f abf4 	beq.w	8007e2a <_vfprintf_r+0xc02>
 8008642:	2b02      	cmp	r3, #2
 8008644:	ab4e      	add	r3, sp, #312	; 0x138
 8008646:	9303      	str	r3, [sp, #12]
 8008648:	f43f ac46 	beq.w	8007ed8 <_vfprintf_r+0xcb0>
 800864c:	9903      	ldr	r1, [sp, #12]
 800864e:	f006 0307 	and.w	r3, r6, #7
 8008652:	460a      	mov	r2, r1
 8008654:	3330      	adds	r3, #48	; 0x30
 8008656:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800865a:	9203      	str	r2, [sp, #12]
 800865c:	08f2      	lsrs	r2, r6, #3
 800865e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8008662:	08f8      	lsrs	r0, r7, #3
 8008664:	4616      	mov	r6, r2
 8008666:	4607      	mov	r7, r0
 8008668:	ea56 0207 	orrs.w	r2, r6, r7
 800866c:	d1ee      	bne.n	800864c <_vfprintf_r+0x1424>
 800866e:	9a04      	ldr	r2, [sp, #16]
 8008670:	07d0      	lsls	r0, r2, #31
 8008672:	f57f ac20 	bpl.w	8007eb6 <_vfprintf_r+0xc8e>
 8008676:	2b30      	cmp	r3, #48	; 0x30
 8008678:	f43f ac1d 	beq.w	8007eb6 <_vfprintf_r+0xc8e>
 800867c:	9a03      	ldr	r2, [sp, #12]
 800867e:	2330      	movs	r3, #48	; 0x30
 8008680:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008684:	1e8b      	subs	r3, r1, #2
 8008686:	9303      	str	r3, [sp, #12]
 8008688:	e415      	b.n	8007eb6 <_vfprintf_r+0xc8e>
 800868a:	bf00      	nop
 800868c:	0800e418 	.word	0x0800e418
 8008690:	0800e408 	.word	0x0800e408

08008694 <__sbprintf>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	460c      	mov	r4, r1
 8008698:	8989      	ldrh	r1, [r1, #12]
 800869a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800869e:	f021 0102 	bic.w	r1, r1, #2
 80086a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80086a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80086a8:	911b      	str	r1, [sp, #108]	; 0x6c
 80086aa:	89e1      	ldrh	r1, [r4, #14]
 80086ac:	f8ad 1016 	strh.w	r1, [sp, #22]
 80086b0:	69e1      	ldr	r1, [r4, #28]
 80086b2:	9109      	str	r1, [sp, #36]	; 0x24
 80086b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80086b8:	a91c      	add	r1, sp, #112	; 0x70
 80086ba:	9102      	str	r1, [sp, #8]
 80086bc:	9106      	str	r1, [sp, #24]
 80086be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086c2:	4606      	mov	r6, r0
 80086c4:	9104      	str	r1, [sp, #16]
 80086c6:	9107      	str	r1, [sp, #28]
 80086c8:	a818      	add	r0, sp, #96	; 0x60
 80086ca:	2100      	movs	r1, #0
 80086cc:	e9cd 3200 	strd	r3, r2, [sp]
 80086d0:	9108      	str	r1, [sp, #32]
 80086d2:	f001 f9b1 	bl	8009a38 <__retarget_lock_init_recursive>
 80086d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086da:	a902      	add	r1, sp, #8
 80086dc:	4630      	mov	r0, r6
 80086de:	f7fe fda3 	bl	8007228 <_vfprintf_r>
 80086e2:	1e05      	subs	r5, r0, #0
 80086e4:	db07      	blt.n	80086f6 <__sbprintf+0x62>
 80086e6:	a902      	add	r1, sp, #8
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 ff7f 	bl	80095ec <_fflush_r>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	bf18      	it	ne
 80086f2:	f04f 35ff 	movne.w	r5, #4294967295
 80086f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80086fa:	9818      	ldr	r0, [sp, #96]	; 0x60
 80086fc:	065b      	lsls	r3, r3, #25
 80086fe:	bf42      	ittt	mi
 8008700:	89a3      	ldrhmi	r3, [r4, #12]
 8008702:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008706:	81a3      	strhmi	r3, [r4, #12]
 8008708:	f001 f997 	bl	8009a3a <__retarget_lock_close_recursive>
 800870c:	4628      	mov	r0, r5
 800870e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8008712:	bd70      	pop	{r4, r5, r6, pc}

08008714 <__swsetup_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4b2a      	ldr	r3, [pc, #168]	; (80087c0 <__swsetup_r+0xac>)
 8008718:	4605      	mov	r5, r0
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	460c      	mov	r4, r1
 800871e:	b118      	cbz	r0, 8008728 <__swsetup_r+0x14>
 8008720:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008722:	b90b      	cbnz	r3, 8008728 <__swsetup_r+0x14>
 8008724:	f000 ffce 	bl	80096c4 <__sinit>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800872e:	0718      	lsls	r0, r3, #28
 8008730:	d422      	bmi.n	8008778 <__swsetup_r+0x64>
 8008732:	06d9      	lsls	r1, r3, #27
 8008734:	d407      	bmi.n	8008746 <__swsetup_r+0x32>
 8008736:	2309      	movs	r3, #9
 8008738:	602b      	str	r3, [r5, #0]
 800873a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	e034      	b.n	80087b0 <__swsetup_r+0x9c>
 8008746:	0758      	lsls	r0, r3, #29
 8008748:	d512      	bpl.n	8008770 <__swsetup_r+0x5c>
 800874a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800874c:	b141      	cbz	r1, 8008760 <__swsetup_r+0x4c>
 800874e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008752:	4299      	cmp	r1, r3
 8008754:	d002      	beq.n	800875c <__swsetup_r+0x48>
 8008756:	4628      	mov	r0, r5
 8008758:	f001 f844 	bl	80097e4 <_free_r>
 800875c:	2300      	movs	r3, #0
 800875e:	6323      	str	r3, [r4, #48]	; 0x30
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008766:	81a3      	strh	r3, [r4, #12]
 8008768:	2300      	movs	r3, #0
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f043 0308 	orr.w	r3, r3, #8
 8008776:	81a3      	strh	r3, [r4, #12]
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	b94b      	cbnz	r3, 8008790 <__swsetup_r+0x7c>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008786:	d003      	beq.n	8008790 <__swsetup_r+0x7c>
 8008788:	4621      	mov	r1, r4
 800878a:	4628      	mov	r0, r5
 800878c:	f001 f986 	bl	8009a9c <__smakebuf_r>
 8008790:	89a0      	ldrh	r0, [r4, #12]
 8008792:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008796:	f010 0301 	ands.w	r3, r0, #1
 800879a:	d00a      	beq.n	80087b2 <__swsetup_r+0x9e>
 800879c:	2300      	movs	r3, #0
 800879e:	60a3      	str	r3, [r4, #8]
 80087a0:	6963      	ldr	r3, [r4, #20]
 80087a2:	425b      	negs	r3, r3
 80087a4:	61a3      	str	r3, [r4, #24]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	b943      	cbnz	r3, 80087bc <__swsetup_r+0xa8>
 80087aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087ae:	d1c4      	bne.n	800873a <__swsetup_r+0x26>
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	0781      	lsls	r1, r0, #30
 80087b4:	bf58      	it	pl
 80087b6:	6963      	ldrpl	r3, [r4, #20]
 80087b8:	60a3      	str	r3, [r4, #8]
 80087ba:	e7f4      	b.n	80087a6 <__swsetup_r+0x92>
 80087bc:	2000      	movs	r0, #0
 80087be:	e7f7      	b.n	80087b0 <__swsetup_r+0x9c>
 80087c0:	20000018 	.word	0x20000018

080087c4 <register_fini>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	; (80087d0 <register_fini+0xc>)
 80087c6:	b113      	cbz	r3, 80087ce <register_fini+0xa>
 80087c8:	4802      	ldr	r0, [pc, #8]	; (80087d4 <register_fini+0x10>)
 80087ca:	f000 b805 	b.w	80087d8 <atexit>
 80087ce:	4770      	bx	lr
 80087d0:	00000000 	.word	0x00000000
 80087d4:	08009715 	.word	0x08009715

080087d8 <atexit>:
 80087d8:	2300      	movs	r3, #0
 80087da:	4601      	mov	r1, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	4618      	mov	r0, r3
 80087e0:	f003 be30 	b.w	800c444 <__register_exitproc>

080087e4 <div>:
 80087e4:	2900      	cmp	r1, #0
 80087e6:	b510      	push	{r4, lr}
 80087e8:	fb91 f4f2 	sdiv	r4, r1, r2
 80087ec:	fb02 1314 	mls	r3, r2, r4, r1
 80087f0:	db06      	blt.n	8008800 <div+0x1c>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da01      	bge.n	80087fa <div+0x16>
 80087f6:	3401      	adds	r4, #1
 80087f8:	1a9b      	subs	r3, r3, r2
 80087fa:	e9c0 4300 	strd	r4, r3, [r0]
 80087fe:	bd10      	pop	{r4, pc}
 8008800:	2b00      	cmp	r3, #0
 8008802:	bfc4      	itt	gt
 8008804:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8008808:	189b      	addgt	r3, r3, r2
 800880a:	e7f6      	b.n	80087fa <div+0x16>

0800880c <quorem>:
 800880c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	6903      	ldr	r3, [r0, #16]
 8008812:	690c      	ldr	r4, [r1, #16]
 8008814:	42a3      	cmp	r3, r4
 8008816:	4607      	mov	r7, r0
 8008818:	f2c0 8081 	blt.w	800891e <quorem+0x112>
 800881c:	3c01      	subs	r4, #1
 800881e:	f101 0814 	add.w	r8, r1, #20
 8008822:	f100 0514 	add.w	r5, r0, #20
 8008826:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008834:	3301      	adds	r3, #1
 8008836:	429a      	cmp	r2, r3
 8008838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800883c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008840:	fbb2 f6f3 	udiv	r6, r2, r3
 8008844:	d331      	bcc.n	80088aa <quorem+0x9e>
 8008846:	f04f 0e00 	mov.w	lr, #0
 800884a:	4640      	mov	r0, r8
 800884c:	46ac      	mov	ip, r5
 800884e:	46f2      	mov	sl, lr
 8008850:	f850 2b04 	ldr.w	r2, [r0], #4
 8008854:	b293      	uxth	r3, r2
 8008856:	fb06 e303 	mla	r3, r6, r3, lr
 800885a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800885e:	b29b      	uxth	r3, r3
 8008860:	ebaa 0303 	sub.w	r3, sl, r3
 8008864:	0c12      	lsrs	r2, r2, #16
 8008866:	f8dc a000 	ldr.w	sl, [ip]
 800886a:	fb06 e202 	mla	r2, r6, r2, lr
 800886e:	fa13 f38a 	uxtah	r3, r3, sl
 8008872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008876:	fa1f fa82 	uxth.w	sl, r2
 800887a:	f8dc 2000 	ldr.w	r2, [ip]
 800887e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008886:	b29b      	uxth	r3, r3
 8008888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888c:	4581      	cmp	r9, r0
 800888e:	f84c 3b04 	str.w	r3, [ip], #4
 8008892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008896:	d2db      	bcs.n	8008850 <quorem+0x44>
 8008898:	f855 300b 	ldr.w	r3, [r5, fp]
 800889c:	b92b      	cbnz	r3, 80088aa <quorem+0x9e>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	3b04      	subs	r3, #4
 80088a2:	429d      	cmp	r5, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	d32e      	bcc.n	8008906 <quorem+0xfa>
 80088a8:	613c      	str	r4, [r7, #16]
 80088aa:	4638      	mov	r0, r7
 80088ac:	f001 fdd2 	bl	800a454 <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	db24      	blt.n	80088fe <quorem+0xf2>
 80088b4:	3601      	adds	r6, #1
 80088b6:	4628      	mov	r0, r5
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80088c0:	f8d0 e000 	ldr.w	lr, [r0]
 80088c4:	b293      	uxth	r3, r2
 80088c6:	ebac 0303 	sub.w	r3, ip, r3
 80088ca:	0c12      	lsrs	r2, r2, #16
 80088cc:	fa13 f38e 	uxtah	r3, r3, lr
 80088d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088d8:	b29b      	uxth	r3, r3
 80088da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088de:	45c1      	cmp	r9, r8
 80088e0:	f840 3b04 	str.w	r3, [r0], #4
 80088e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088e8:	d2e8      	bcs.n	80088bc <quorem+0xb0>
 80088ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088f2:	b922      	cbnz	r2, 80088fe <quorem+0xf2>
 80088f4:	3b04      	subs	r3, #4
 80088f6:	429d      	cmp	r5, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	d30a      	bcc.n	8008912 <quorem+0x106>
 80088fc:	613c      	str	r4, [r7, #16]
 80088fe:	4630      	mov	r0, r6
 8008900:	b003      	add	sp, #12
 8008902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	3b04      	subs	r3, #4
 800890a:	2a00      	cmp	r2, #0
 800890c:	d1cc      	bne.n	80088a8 <quorem+0x9c>
 800890e:	3c01      	subs	r4, #1
 8008910:	e7c7      	b.n	80088a2 <quorem+0x96>
 8008912:	6812      	ldr	r2, [r2, #0]
 8008914:	3b04      	subs	r3, #4
 8008916:	2a00      	cmp	r2, #0
 8008918:	d1f0      	bne.n	80088fc <quorem+0xf0>
 800891a:	3c01      	subs	r4, #1
 800891c:	e7eb      	b.n	80088f6 <quorem+0xea>
 800891e:	2000      	movs	r0, #0
 8008920:	e7ee      	b.n	8008900 <quorem+0xf4>
 8008922:	0000      	movs	r0, r0
 8008924:	0000      	movs	r0, r0
	...

08008928 <_dtoa_r>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	ed2d 8b02 	vpush	{d8}
 8008930:	b095      	sub	sp, #84	; 0x54
 8008932:	ec57 6b10 	vmov	r6, r7, d0
 8008936:	9105      	str	r1, [sp, #20]
 8008938:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800893a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800893c:	9209      	str	r2, [sp, #36]	; 0x24
 800893e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008942:	4604      	mov	r4, r0
 8008944:	930f      	str	r3, [sp, #60]	; 0x3c
 8008946:	b141      	cbz	r1, 800895a <_dtoa_r+0x32>
 8008948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800894a:	604a      	str	r2, [r1, #4]
 800894c:	2301      	movs	r3, #1
 800894e:	4093      	lsls	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
 8008952:	f001 fb74 	bl	800a03e <_Bfree>
 8008956:	2300      	movs	r3, #0
 8008958:	6423      	str	r3, [r4, #64]	; 0x40
 800895a:	1e3b      	subs	r3, r7, #0
 800895c:	bfb9      	ittee	lt
 800895e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008962:	9303      	strlt	r3, [sp, #12]
 8008964:	2300      	movge	r3, #0
 8008966:	602b      	strge	r3, [r5, #0]
 8008968:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800896c:	4ba2      	ldr	r3, [pc, #648]	; (8008bf8 <_dtoa_r+0x2d0>)
 800896e:	bfbc      	itt	lt
 8008970:	2201      	movlt	r2, #1
 8008972:	602a      	strlt	r2, [r5, #0]
 8008974:	ea33 0309 	bics.w	r3, r3, r9
 8008978:	d11b      	bne.n	80089b2 <_dtoa_r+0x8a>
 800897a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800897c:	f242 730f 	movw	r3, #9999	; 0x270f
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008986:	4333      	orrs	r3, r6
 8008988:	f000 8578 	beq.w	800947c <_dtoa_r+0xb54>
 800898c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800898e:	b90b      	cbnz	r3, 8008994 <_dtoa_r+0x6c>
 8008990:	4b9a      	ldr	r3, [pc, #616]	; (8008bfc <_dtoa_r+0x2d4>)
 8008992:	e024      	b.n	80089de <_dtoa_r+0xb6>
 8008994:	4b99      	ldr	r3, [pc, #612]	; (8008bfc <_dtoa_r+0x2d4>)
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	3303      	adds	r3, #3
 800899a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	9800      	ldr	r0, [sp, #0]
 80089a0:	b015      	add	sp, #84	; 0x54
 80089a2:	ecbd 8b02 	vpop	{d8}
 80089a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089aa:	4b95      	ldr	r3, [pc, #596]	; (8008c00 <_dtoa_r+0x2d8>)
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	e7f3      	b.n	800899a <_dtoa_r+0x72>
 80089b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089b6:	2200      	movs	r2, #0
 80089b8:	ec51 0b17 	vmov	r0, r1, d7
 80089bc:	2300      	movs	r3, #0
 80089be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80089c2:	f7f8 f8ab 	bl	8000b1c <__aeabi_dcmpeq>
 80089c6:	4680      	mov	r8, r0
 80089c8:	b158      	cbz	r0, 80089e2 <_dtoa_r+0xba>
 80089ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089cc:	2301      	movs	r3, #1
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 854f 	beq.w	8009476 <_dtoa_r+0xb4e>
 80089d8:	488a      	ldr	r0, [pc, #552]	; (8008c04 <_dtoa_r+0x2dc>)
 80089da:	6018      	str	r0, [r3, #0]
 80089dc:	1e43      	subs	r3, r0, #1
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	e7dd      	b.n	800899e <_dtoa_r+0x76>
 80089e2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80089e6:	aa12      	add	r2, sp, #72	; 0x48
 80089e8:	a913      	add	r1, sp, #76	; 0x4c
 80089ea:	4620      	mov	r0, r4
 80089ec:	f001 fdd6 	bl	800a59c <__d2b>
 80089f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089f4:	4683      	mov	fp, r0
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	d07c      	beq.n	8008af4 <_dtoa_r+0x1cc>
 80089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a04:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a08:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a0c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a14:	4b7c      	ldr	r3, [pc, #496]	; (8008c08 <_dtoa_r+0x2e0>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f7 fc5e 	bl	80002dc <__aeabi_dsub>
 8008a20:	a36f      	add	r3, pc, #444	; (adr r3, 8008be0 <_dtoa_r+0x2b8>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fe11 	bl	800064c <__aeabi_dmul>
 8008a2a:	a36f      	add	r3, pc, #444	; (adr r3, 8008be8 <_dtoa_r+0x2c0>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	f7f7 fc56 	bl	80002e0 <__adddf3>
 8008a34:	4606      	mov	r6, r0
 8008a36:	4628      	mov	r0, r5
 8008a38:	460f      	mov	r7, r1
 8008a3a:	f7f7 fd9d 	bl	8000578 <__aeabi_i2d>
 8008a3e:	a36c      	add	r3, pc, #432	; (adr r3, 8008bf0 <_dtoa_r+0x2c8>)
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	f7f7 fe02 	bl	800064c <__aeabi_dmul>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	4639      	mov	r1, r7
 8008a50:	f7f7 fc46 	bl	80002e0 <__adddf3>
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	f7f8 f8a8 	bl	8000bac <__aeabi_d2iz>
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4682      	mov	sl, r0
 8008a60:	2300      	movs	r3, #0
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f8 f863 	bl	8000b30 <__aeabi_dcmplt>
 8008a6a:	b148      	cbz	r0, 8008a80 <_dtoa_r+0x158>
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f7f7 fd83 	bl	8000578 <__aeabi_i2d>
 8008a72:	4632      	mov	r2, r6
 8008a74:	463b      	mov	r3, r7
 8008a76:	f7f8 f851 	bl	8000b1c <__aeabi_dcmpeq>
 8008a7a:	b908      	cbnz	r0, 8008a80 <_dtoa_r+0x158>
 8008a7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a80:	f1ba 0f16 	cmp.w	sl, #22
 8008a84:	d854      	bhi.n	8008b30 <_dtoa_r+0x208>
 8008a86:	4b61      	ldr	r3, [pc, #388]	; (8008c0c <_dtoa_r+0x2e4>)
 8008a88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a94:	f7f8 f84c 	bl	8000b30 <__aeabi_dcmplt>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d04b      	beq.n	8008b34 <_dtoa_r+0x20c>
 8008a9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8008aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008aa6:	1b5d      	subs	r5, r3, r5
 8008aa8:	1e6b      	subs	r3, r5, #1
 8008aaa:	9304      	str	r3, [sp, #16]
 8008aac:	bf43      	ittte	mi
 8008aae:	2300      	movmi	r3, #0
 8008ab0:	f1c5 0801 	rsbmi	r8, r5, #1
 8008ab4:	9304      	strmi	r3, [sp, #16]
 8008ab6:	f04f 0800 	movpl.w	r8, #0
 8008aba:	f1ba 0f00 	cmp.w	sl, #0
 8008abe:	db3b      	blt.n	8008b38 <_dtoa_r+0x210>
 8008ac0:	9b04      	ldr	r3, [sp, #16]
 8008ac2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008ac6:	4453      	add	r3, sl
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	2300      	movs	r3, #0
 8008acc:	9306      	str	r3, [sp, #24]
 8008ace:	9b05      	ldr	r3, [sp, #20]
 8008ad0:	2b09      	cmp	r3, #9
 8008ad2:	d86a      	bhi.n	8008baa <_dtoa_r+0x282>
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	bfc4      	itt	gt
 8008ad8:	3b04      	subgt	r3, #4
 8008ada:	9305      	strgt	r3, [sp, #20]
 8008adc:	9b05      	ldr	r3, [sp, #20]
 8008ade:	f1a3 0302 	sub.w	r3, r3, #2
 8008ae2:	bfcc      	ite	gt
 8008ae4:	2500      	movgt	r5, #0
 8008ae6:	2501      	movle	r5, #1
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d86a      	bhi.n	8008bc2 <_dtoa_r+0x29a>
 8008aec:	e8df f003 	tbb	[pc, r3]
 8008af0:	5b4d4f2c 	.word	0x5b4d4f2c
 8008af4:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008af8:	441d      	add	r5, r3
 8008afa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	bfc1      	itttt	gt
 8008b02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b0a:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b12:	bfda      	itte	le
 8008b14:	f1c3 0320 	rsble	r3, r3, #32
 8008b18:	fa06 f003 	lslle.w	r0, r6, r3
 8008b1c:	4318      	orrgt	r0, r3
 8008b1e:	f7f7 fd1b 	bl	8000558 <__aeabi_ui2d>
 8008b22:	2301      	movs	r3, #1
 8008b24:	4606      	mov	r6, r0
 8008b26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b2a:	3d01      	subs	r5, #1
 8008b2c:	9310      	str	r3, [sp, #64]	; 0x40
 8008b2e:	e771      	b.n	8008a14 <_dtoa_r+0xec>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e7b6      	b.n	8008aa2 <_dtoa_r+0x17a>
 8008b34:	900e      	str	r0, [sp, #56]	; 0x38
 8008b36:	e7b5      	b.n	8008aa4 <_dtoa_r+0x17c>
 8008b38:	f1ca 0300 	rsb	r3, sl, #0
 8008b3c:	9306      	str	r3, [sp, #24]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	eba8 080a 	sub.w	r8, r8, sl
 8008b44:	930d      	str	r3, [sp, #52]	; 0x34
 8008b46:	e7c2      	b.n	8008ace <_dtoa_r+0x1a6>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9308      	str	r3, [sp, #32]
 8008b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	dc3a      	bgt.n	8008bc8 <_dtoa_r+0x2a0>
 8008b52:	f04f 0901 	mov.w	r9, #1
 8008b56:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b60:	2200      	movs	r2, #0
 8008b62:	6462      	str	r2, [r4, #68]	; 0x44
 8008b64:	2204      	movs	r2, #4
 8008b66:	f102 0014 	add.w	r0, r2, #20
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b6e:	d931      	bls.n	8008bd4 <_dtoa_r+0x2ac>
 8008b70:	4620      	mov	r0, r4
 8008b72:	f001 fa3f 	bl	8009ff4 <_Balloc>
 8008b76:	9000      	str	r0, [sp, #0]
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d14d      	bne.n	8008c18 <_dtoa_r+0x2f0>
 8008b7c:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <_dtoa_r+0x2e8>)
 8008b7e:	4602      	mov	r2, r0
 8008b80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b84:	4823      	ldr	r0, [pc, #140]	; (8008c14 <_dtoa_r+0x2ec>)
 8008b86:	f003 fc9d 	bl	800c4c4 <__assert_func>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e7dd      	b.n	8008b4a <_dtoa_r+0x222>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b94:	eb0a 0903 	add.w	r9, sl, r3
 8008b98:	f109 0301 	add.w	r3, r9, #1
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	bfb8      	it	lt
 8008ba2:	2301      	movlt	r3, #1
 8008ba4:	e7dc      	b.n	8008b60 <_dtoa_r+0x238>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e7f2      	b.n	8008b90 <_dtoa_r+0x268>
 8008baa:	2501      	movs	r5, #1
 8008bac:	2300      	movs	r3, #0
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	9508      	str	r5, [sp, #32]
 8008bb2:	f04f 39ff 	mov.w	r9, #4294967295
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bbc:	2312      	movs	r3, #18
 8008bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008bc0:	e7ce      	b.n	8008b60 <_dtoa_r+0x238>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	9308      	str	r3, [sp, #32]
 8008bc6:	e7f4      	b.n	8008bb2 <_dtoa_r+0x28a>
 8008bc8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008bcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	e7c5      	b.n	8008b60 <_dtoa_r+0x238>
 8008bd4:	3101      	adds	r1, #1
 8008bd6:	6461      	str	r1, [r4, #68]	; 0x44
 8008bd8:	0052      	lsls	r2, r2, #1
 8008bda:	e7c4      	b.n	8008b66 <_dtoa_r+0x23e>
 8008bdc:	f3af 8000 	nop.w
 8008be0:	636f4361 	.word	0x636f4361
 8008be4:	3fd287a7 	.word	0x3fd287a7
 8008be8:	8b60c8b3 	.word	0x8b60c8b3
 8008bec:	3fc68a28 	.word	0x3fc68a28
 8008bf0:	509f79fb 	.word	0x509f79fb
 8008bf4:	3fd34413 	.word	0x3fd34413
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	0800e529 	.word	0x0800e529
 8008c00:	0800e52d 	.word	0x0800e52d
 8008c04:	0800e407 	.word	0x0800e407
 8008c08:	3ff80000 	.word	0x3ff80000
 8008c0c:	0800e690 	.word	0x0800e690
 8008c10:	0800e536 	.word	0x0800e536
 8008c14:	0800e547 	.word	0x0800e547
 8008c18:	9b00      	ldr	r3, [sp, #0]
 8008c1a:	6423      	str	r3, [r4, #64]	; 0x40
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	2b0e      	cmp	r3, #14
 8008c20:	f200 80ad 	bhi.w	8008d7e <_dtoa_r+0x456>
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	f000 80aa 	beq.w	8008d7e <_dtoa_r+0x456>
 8008c2a:	f1ba 0f00 	cmp.w	sl, #0
 8008c2e:	dd36      	ble.n	8008c9e <_dtoa_r+0x376>
 8008c30:	4ac2      	ldr	r2, [pc, #776]	; (8008f3c <_dtoa_r+0x614>)
 8008c32:	f00a 030f 	and.w	r3, sl, #15
 8008c36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c3a:	ed93 7b00 	vldr	d7, [r3]
 8008c3e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c42:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c46:	eeb0 8a47 	vmov.f32	s16, s14
 8008c4a:	eef0 8a67 	vmov.f32	s17, s15
 8008c4e:	d016      	beq.n	8008c7e <_dtoa_r+0x356>
 8008c50:	4bbb      	ldr	r3, [pc, #748]	; (8008f40 <_dtoa_r+0x618>)
 8008c52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c5a:	f7f7 fe21 	bl	80008a0 <__aeabi_ddiv>
 8008c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c62:	f007 070f 	and.w	r7, r7, #15
 8008c66:	2503      	movs	r5, #3
 8008c68:	4eb5      	ldr	r6, [pc, #724]	; (8008f40 <_dtoa_r+0x618>)
 8008c6a:	b957      	cbnz	r7, 8008c82 <_dtoa_r+0x35a>
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	ec53 2b18 	vmov	r2, r3, d8
 8008c74:	f7f7 fe14 	bl	80008a0 <__aeabi_ddiv>
 8008c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c7c:	e029      	b.n	8008cd2 <_dtoa_r+0x3aa>
 8008c7e:	2502      	movs	r5, #2
 8008c80:	e7f2      	b.n	8008c68 <_dtoa_r+0x340>
 8008c82:	07f9      	lsls	r1, r7, #31
 8008c84:	d508      	bpl.n	8008c98 <_dtoa_r+0x370>
 8008c86:	ec51 0b18 	vmov	r0, r1, d8
 8008c8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c8e:	f7f7 fcdd 	bl	800064c <__aeabi_dmul>
 8008c92:	ec41 0b18 	vmov	d8, r0, r1
 8008c96:	3501      	adds	r5, #1
 8008c98:	107f      	asrs	r7, r7, #1
 8008c9a:	3608      	adds	r6, #8
 8008c9c:	e7e5      	b.n	8008c6a <_dtoa_r+0x342>
 8008c9e:	f000 80a6 	beq.w	8008dee <_dtoa_r+0x4c6>
 8008ca2:	f1ca 0600 	rsb	r6, sl, #0
 8008ca6:	4ba5      	ldr	r3, [pc, #660]	; (8008f3c <_dtoa_r+0x614>)
 8008ca8:	4fa5      	ldr	r7, [pc, #660]	; (8008f40 <_dtoa_r+0x618>)
 8008caa:	f006 020f 	and.w	r2, r6, #15
 8008cae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cba:	f7f7 fcc7 	bl	800064c <__aeabi_dmul>
 8008cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc2:	1136      	asrs	r6, r6, #4
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2502      	movs	r5, #2
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	f040 8085 	bne.w	8008dd8 <_dtoa_r+0x4b0>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1d2      	bne.n	8008c78 <_dtoa_r+0x350>
 8008cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 808c 	beq.w	8008df2 <_dtoa_r+0x4ca>
 8008cda:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cde:	4b99      	ldr	r3, [pc, #612]	; (8008f44 <_dtoa_r+0x61c>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	f7f7 ff23 	bl	8000b30 <__aeabi_dcmplt>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f000 8081 	beq.w	8008df2 <_dtoa_r+0x4ca>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d07d      	beq.n	8008df2 <_dtoa_r+0x4ca>
 8008cf6:	f1b9 0f00 	cmp.w	r9, #0
 8008cfa:	dd3c      	ble.n	8008d76 <_dtoa_r+0x44e>
 8008cfc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d00:	9307      	str	r3, [sp, #28]
 8008d02:	2200      	movs	r2, #0
 8008d04:	4b90      	ldr	r3, [pc, #576]	; (8008f48 <_dtoa_r+0x620>)
 8008d06:	4630      	mov	r0, r6
 8008d08:	4639      	mov	r1, r7
 8008d0a:	f7f7 fc9f 	bl	800064c <__aeabi_dmul>
 8008d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d12:	3501      	adds	r5, #1
 8008d14:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	f7f7 fc2b 	bl	8000578 <__aeabi_i2d>
 8008d22:	4632      	mov	r2, r6
 8008d24:	463b      	mov	r3, r7
 8008d26:	f7f7 fc91 	bl	800064c <__aeabi_dmul>
 8008d2a:	4b88      	ldr	r3, [pc, #544]	; (8008f4c <_dtoa_r+0x624>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f7f7 fad7 	bl	80002e0 <__adddf3>
 8008d32:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d15c      	bne.n	8008dfc <_dtoa_r+0x4d4>
 8008d42:	4b83      	ldr	r3, [pc, #524]	; (8008f50 <_dtoa_r+0x628>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	4630      	mov	r0, r6
 8008d48:	4639      	mov	r1, r7
 8008d4a:	f7f7 fac7 	bl	80002dc <__aeabi_dsub>
 8008d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d52:	4606      	mov	r6, r0
 8008d54:	460f      	mov	r7, r1
 8008d56:	f7f7 ff09 	bl	8000b6c <__aeabi_dcmpgt>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	f040 8295 	bne.w	800928a <_dtoa_r+0x962>
 8008d60:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d64:	4630      	mov	r0, r6
 8008d66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fee0 	bl	8000b30 <__aeabi_dcmplt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f040 8287 	bne.w	8009284 <_dtoa_r+0x95c>
 8008d76:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f2c0 8157 	blt.w	8009034 <_dtoa_r+0x70c>
 8008d86:	f1ba 0f0e 	cmp.w	sl, #14
 8008d8a:	f300 8153 	bgt.w	8009034 <_dtoa_r+0x70c>
 8008d8e:	4b6b      	ldr	r3, [pc, #428]	; (8008f3c <_dtoa_r+0x614>)
 8008d90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f280 80e2 	bge.w	8008f64 <_dtoa_r+0x63c>
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f300 80de 	bgt.w	8008f64 <_dtoa_r+0x63c>
 8008da8:	f040 826c 	bne.w	8009284 <_dtoa_r+0x95c>
 8008dac:	4b68      	ldr	r3, [pc, #416]	; (8008f50 <_dtoa_r+0x628>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	4640      	mov	r0, r8
 8008db2:	4649      	mov	r1, r9
 8008db4:	f7f7 fc4a 	bl	800064c <__aeabi_dmul>
 8008db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dbc:	f7f7 fecc 	bl	8000b58 <__aeabi_dcmpge>
 8008dc0:	9e01      	ldr	r6, [sp, #4]
 8008dc2:	4637      	mov	r7, r6
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f040 8242 	bne.w	800924e <_dtoa_r+0x926>
 8008dca:	9d00      	ldr	r5, [sp, #0]
 8008dcc:	2331      	movs	r3, #49	; 0x31
 8008dce:	f805 3b01 	strb.w	r3, [r5], #1
 8008dd2:	f10a 0a01 	add.w	sl, sl, #1
 8008dd6:	e23e      	b.n	8009256 <_dtoa_r+0x92e>
 8008dd8:	07f2      	lsls	r2, r6, #31
 8008dda:	d505      	bpl.n	8008de8 <_dtoa_r+0x4c0>
 8008ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de0:	f7f7 fc34 	bl	800064c <__aeabi_dmul>
 8008de4:	3501      	adds	r5, #1
 8008de6:	2301      	movs	r3, #1
 8008de8:	1076      	asrs	r6, r6, #1
 8008dea:	3708      	adds	r7, #8
 8008dec:	e76c      	b.n	8008cc8 <_dtoa_r+0x3a0>
 8008dee:	2502      	movs	r5, #2
 8008df0:	e76f      	b.n	8008cd2 <_dtoa_r+0x3aa>
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	f8cd a01c 	str.w	sl, [sp, #28]
 8008df8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dfa:	e78d      	b.n	8008d18 <_dtoa_r+0x3f0>
 8008dfc:	9900      	ldr	r1, [sp, #0]
 8008dfe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e02:	4b4e      	ldr	r3, [pc, #312]	; (8008f3c <_dtoa_r+0x614>)
 8008e04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e08:	4401      	add	r1, r0
 8008e0a:	9102      	str	r1, [sp, #8]
 8008e0c:	9908      	ldr	r1, [sp, #32]
 8008e0e:	eeb0 8a47 	vmov.f32	s16, s14
 8008e12:	eef0 8a67 	vmov.f32	s17, s15
 8008e16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d045      	beq.n	8008eae <_dtoa_r+0x586>
 8008e22:	494c      	ldr	r1, [pc, #304]	; (8008f54 <_dtoa_r+0x62c>)
 8008e24:	2000      	movs	r0, #0
 8008e26:	f7f7 fd3b 	bl	80008a0 <__aeabi_ddiv>
 8008e2a:	ec53 2b18 	vmov	r2, r3, d8
 8008e2e:	f7f7 fa55 	bl	80002dc <__aeabi_dsub>
 8008e32:	9d00      	ldr	r5, [sp, #0]
 8008e34:	ec41 0b18 	vmov	d8, r0, r1
 8008e38:	4639      	mov	r1, r7
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7f7 feb6 	bl	8000bac <__aeabi_d2iz>
 8008e40:	900c      	str	r0, [sp, #48]	; 0x30
 8008e42:	f7f7 fb99 	bl	8000578 <__aeabi_i2d>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 fa45 	bl	80002dc <__aeabi_dsub>
 8008e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e54:	3330      	adds	r3, #48	; 0x30
 8008e56:	f805 3b01 	strb.w	r3, [r5], #1
 8008e5a:	ec53 2b18 	vmov	r2, r3, d8
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	f7f7 fe65 	bl	8000b30 <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d165      	bne.n	8008f36 <_dtoa_r+0x60e>
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	4935      	ldr	r1, [pc, #212]	; (8008f44 <_dtoa_r+0x61c>)
 8008e70:	2000      	movs	r0, #0
 8008e72:	f7f7 fa33 	bl	80002dc <__aeabi_dsub>
 8008e76:	ec53 2b18 	vmov	r2, r3, d8
 8008e7a:	f7f7 fe59 	bl	8000b30 <__aeabi_dcmplt>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f040 80b8 	bne.w	8008ff4 <_dtoa_r+0x6cc>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	429d      	cmp	r5, r3
 8008e88:	f43f af75 	beq.w	8008d76 <_dtoa_r+0x44e>
 8008e8c:	4b2e      	ldr	r3, [pc, #184]	; (8008f48 <_dtoa_r+0x620>)
 8008e8e:	ec51 0b18 	vmov	r0, r1, d8
 8008e92:	2200      	movs	r2, #0
 8008e94:	f7f7 fbda 	bl	800064c <__aeabi_dmul>
 8008e98:	4b2b      	ldr	r3, [pc, #172]	; (8008f48 <_dtoa_r+0x620>)
 8008e9a:	ec41 0b18 	vmov	d8, r0, r1
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 fbd2 	bl	800064c <__aeabi_dmul>
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	460f      	mov	r7, r1
 8008eac:	e7c4      	b.n	8008e38 <_dtoa_r+0x510>
 8008eae:	ec51 0b17 	vmov	r0, r1, d7
 8008eb2:	f7f7 fbcb 	bl	800064c <__aeabi_dmul>
 8008eb6:	9b02      	ldr	r3, [sp, #8]
 8008eb8:	9d00      	ldr	r5, [sp, #0]
 8008eba:	930c      	str	r3, [sp, #48]	; 0x30
 8008ebc:	ec41 0b18 	vmov	d8, r0, r1
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7f7 fe72 	bl	8000bac <__aeabi_d2iz>
 8008ec8:	9011      	str	r0, [sp, #68]	; 0x44
 8008eca:	f7f7 fb55 	bl	8000578 <__aeabi_i2d>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	f7f7 fa01 	bl	80002dc <__aeabi_dsub>
 8008eda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008edc:	3330      	adds	r3, #48	; 0x30
 8008ede:	f805 3b01 	strb.w	r3, [r5], #1
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	460f      	mov	r7, r1
 8008eea:	f04f 0200 	mov.w	r2, #0
 8008eee:	d133      	bne.n	8008f58 <_dtoa_r+0x630>
 8008ef0:	4b18      	ldr	r3, [pc, #96]	; (8008f54 <_dtoa_r+0x62c>)
 8008ef2:	ec51 0b18 	vmov	r0, r1, d8
 8008ef6:	f7f7 f9f3 	bl	80002e0 <__adddf3>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fe33 	bl	8000b6c <__aeabi_dcmpgt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d174      	bne.n	8008ff4 <_dtoa_r+0x6cc>
 8008f0a:	ec53 2b18 	vmov	r2, r3, d8
 8008f0e:	4911      	ldr	r1, [pc, #68]	; (8008f54 <_dtoa_r+0x62c>)
 8008f10:	2000      	movs	r0, #0
 8008f12:	f7f7 f9e3 	bl	80002dc <__aeabi_dsub>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	f7f7 fe07 	bl	8000b30 <__aeabi_dcmplt>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f af27 	beq.w	8008d76 <_dtoa_r+0x44e>
 8008f28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f2a:	1e6b      	subs	r3, r5, #1
 8008f2c:	930c      	str	r3, [sp, #48]	; 0x30
 8008f2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f32:	2b30      	cmp	r3, #48	; 0x30
 8008f34:	d0f8      	beq.n	8008f28 <_dtoa_r+0x600>
 8008f36:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f3a:	e049      	b.n	8008fd0 <_dtoa_r+0x6a8>
 8008f3c:	0800e690 	.word	0x0800e690
 8008f40:	0800e668 	.word	0x0800e668
 8008f44:	3ff00000 	.word	0x3ff00000
 8008f48:	40240000 	.word	0x40240000
 8008f4c:	401c0000 	.word	0x401c0000
 8008f50:	40140000 	.word	0x40140000
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	4baf      	ldr	r3, [pc, #700]	; (8009218 <_dtoa_r+0x8f0>)
 8008f5a:	f7f7 fb77 	bl	800064c <__aeabi_dmul>
 8008f5e:	4606      	mov	r6, r0
 8008f60:	460f      	mov	r7, r1
 8008f62:	e7ad      	b.n	8008ec0 <_dtoa_r+0x598>
 8008f64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f68:	9d00      	ldr	r5, [sp, #0]
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	f7f7 fc95 	bl	80008a0 <__aeabi_ddiv>
 8008f76:	f7f7 fe19 	bl	8000bac <__aeabi_d2iz>
 8008f7a:	9002      	str	r0, [sp, #8]
 8008f7c:	f7f7 fafc 	bl	8000578 <__aeabi_i2d>
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	f7f7 fb62 	bl	800064c <__aeabi_dmul>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 f9a4 	bl	80002dc <__aeabi_dsub>
 8008f94:	9e02      	ldr	r6, [sp, #8]
 8008f96:	9f01      	ldr	r7, [sp, #4]
 8008f98:	3630      	adds	r6, #48	; 0x30
 8008f9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008f9e:	9e00      	ldr	r6, [sp, #0]
 8008fa0:	1bae      	subs	r6, r5, r6
 8008fa2:	42b7      	cmp	r7, r6
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	d137      	bne.n	800901a <_dtoa_r+0x6f2>
 8008faa:	f7f7 f999 	bl	80002e0 <__adddf3>
 8008fae:	4642      	mov	r2, r8
 8008fb0:	464b      	mov	r3, r9
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	f7f7 fdd9 	bl	8000b6c <__aeabi_dcmpgt>
 8008fba:	b9c8      	cbnz	r0, 8008ff0 <_dtoa_r+0x6c8>
 8008fbc:	4642      	mov	r2, r8
 8008fbe:	464b      	mov	r3, r9
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 fdaa 	bl	8000b1c <__aeabi_dcmpeq>
 8008fc8:	b110      	cbz	r0, 8008fd0 <_dtoa_r+0x6a8>
 8008fca:	9b02      	ldr	r3, [sp, #8]
 8008fcc:	07d9      	lsls	r1, r3, #31
 8008fce:	d40f      	bmi.n	8008ff0 <_dtoa_r+0x6c8>
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4659      	mov	r1, fp
 8008fd4:	f001 f833 	bl	800a03e <_Bfree>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	702b      	strb	r3, [r5, #0]
 8008fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fde:	f10a 0001 	add.w	r0, sl, #1
 8008fe2:	6018      	str	r0, [r3, #0]
 8008fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f43f acd9 	beq.w	800899e <_dtoa_r+0x76>
 8008fec:	601d      	str	r5, [r3, #0]
 8008fee:	e4d6      	b.n	800899e <_dtoa_r+0x76>
 8008ff0:	f8cd a01c 	str.w	sl, [sp, #28]
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	461d      	mov	r5, r3
 8008ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ffc:	2a39      	cmp	r2, #57	; 0x39
 8008ffe:	d108      	bne.n	8009012 <_dtoa_r+0x6ea>
 8009000:	9a00      	ldr	r2, [sp, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d1f7      	bne.n	8008ff6 <_dtoa_r+0x6ce>
 8009006:	9a07      	ldr	r2, [sp, #28]
 8009008:	9900      	ldr	r1, [sp, #0]
 800900a:	3201      	adds	r2, #1
 800900c:	9207      	str	r2, [sp, #28]
 800900e:	2230      	movs	r2, #48	; 0x30
 8009010:	700a      	strb	r2, [r1, #0]
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	3201      	adds	r2, #1
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	e78d      	b.n	8008f36 <_dtoa_r+0x60e>
 800901a:	4b7f      	ldr	r3, [pc, #508]	; (8009218 <_dtoa_r+0x8f0>)
 800901c:	2200      	movs	r2, #0
 800901e:	f7f7 fb15 	bl	800064c <__aeabi_dmul>
 8009022:	2200      	movs	r2, #0
 8009024:	2300      	movs	r3, #0
 8009026:	4606      	mov	r6, r0
 8009028:	460f      	mov	r7, r1
 800902a:	f7f7 fd77 	bl	8000b1c <__aeabi_dcmpeq>
 800902e:	2800      	cmp	r0, #0
 8009030:	d09b      	beq.n	8008f6a <_dtoa_r+0x642>
 8009032:	e7cd      	b.n	8008fd0 <_dtoa_r+0x6a8>
 8009034:	9a08      	ldr	r2, [sp, #32]
 8009036:	2a00      	cmp	r2, #0
 8009038:	f000 80c4 	beq.w	80091c4 <_dtoa_r+0x89c>
 800903c:	9a05      	ldr	r2, [sp, #20]
 800903e:	2a01      	cmp	r2, #1
 8009040:	f300 80a8 	bgt.w	8009194 <_dtoa_r+0x86c>
 8009044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009046:	2a00      	cmp	r2, #0
 8009048:	f000 80a0 	beq.w	800918c <_dtoa_r+0x864>
 800904c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009050:	9e06      	ldr	r6, [sp, #24]
 8009052:	4645      	mov	r5, r8
 8009054:	9a04      	ldr	r2, [sp, #16]
 8009056:	2101      	movs	r1, #1
 8009058:	441a      	add	r2, r3
 800905a:	4620      	mov	r0, r4
 800905c:	4498      	add	r8, r3
 800905e:	9204      	str	r2, [sp, #16]
 8009060:	f001 f890 	bl	800a184 <__i2b>
 8009064:	4607      	mov	r7, r0
 8009066:	2d00      	cmp	r5, #0
 8009068:	dd0b      	ble.n	8009082 <_dtoa_r+0x75a>
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd08      	ble.n	8009082 <_dtoa_r+0x75a>
 8009070:	42ab      	cmp	r3, r5
 8009072:	9a04      	ldr	r2, [sp, #16]
 8009074:	bfa8      	it	ge
 8009076:	462b      	movge	r3, r5
 8009078:	eba8 0803 	sub.w	r8, r8, r3
 800907c:	1aed      	subs	r5, r5, r3
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	9b06      	ldr	r3, [sp, #24]
 8009084:	b1fb      	cbz	r3, 80090c6 <_dtoa_r+0x79e>
 8009086:	9b08      	ldr	r3, [sp, #32]
 8009088:	2b00      	cmp	r3, #0
 800908a:	f000 809f 	beq.w	80091cc <_dtoa_r+0x8a4>
 800908e:	2e00      	cmp	r6, #0
 8009090:	dd11      	ble.n	80090b6 <_dtoa_r+0x78e>
 8009092:	4639      	mov	r1, r7
 8009094:	4632      	mov	r2, r6
 8009096:	4620      	mov	r0, r4
 8009098:	f001 f930 	bl	800a2fc <__pow5mult>
 800909c:	465a      	mov	r2, fp
 800909e:	4601      	mov	r1, r0
 80090a0:	4607      	mov	r7, r0
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 f884 	bl	800a1b0 <__multiply>
 80090a8:	4659      	mov	r1, fp
 80090aa:	9007      	str	r0, [sp, #28]
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 ffc6 	bl	800a03e <_Bfree>
 80090b2:	9b07      	ldr	r3, [sp, #28]
 80090b4:	469b      	mov	fp, r3
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	1b9a      	subs	r2, r3, r6
 80090ba:	d004      	beq.n	80090c6 <_dtoa_r+0x79e>
 80090bc:	4659      	mov	r1, fp
 80090be:	4620      	mov	r0, r4
 80090c0:	f001 f91c 	bl	800a2fc <__pow5mult>
 80090c4:	4683      	mov	fp, r0
 80090c6:	2101      	movs	r1, #1
 80090c8:	4620      	mov	r0, r4
 80090ca:	f001 f85b 	bl	800a184 <__i2b>
 80090ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	4606      	mov	r6, r0
 80090d4:	dd7c      	ble.n	80091d0 <_dtoa_r+0x8a8>
 80090d6:	461a      	mov	r2, r3
 80090d8:	4601      	mov	r1, r0
 80090da:	4620      	mov	r0, r4
 80090dc:	f001 f90e 	bl	800a2fc <__pow5mult>
 80090e0:	9b05      	ldr	r3, [sp, #20]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	4606      	mov	r6, r0
 80090e6:	dd76      	ble.n	80091d6 <_dtoa_r+0x8ae>
 80090e8:	2300      	movs	r3, #0
 80090ea:	9306      	str	r3, [sp, #24]
 80090ec:	6933      	ldr	r3, [r6, #16]
 80090ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090f2:	6918      	ldr	r0, [r3, #16]
 80090f4:	f000 fff6 	bl	800a0e4 <__hi0bits>
 80090f8:	f1c0 0020 	rsb	r0, r0, #32
 80090fc:	9b04      	ldr	r3, [sp, #16]
 80090fe:	4418      	add	r0, r3
 8009100:	f010 001f 	ands.w	r0, r0, #31
 8009104:	f000 8086 	beq.w	8009214 <_dtoa_r+0x8ec>
 8009108:	f1c0 0320 	rsb	r3, r0, #32
 800910c:	2b04      	cmp	r3, #4
 800910e:	dd7f      	ble.n	8009210 <_dtoa_r+0x8e8>
 8009110:	f1c0 001c 	rsb	r0, r0, #28
 8009114:	9b04      	ldr	r3, [sp, #16]
 8009116:	4403      	add	r3, r0
 8009118:	4480      	add	r8, r0
 800911a:	4405      	add	r5, r0
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	f1b8 0f00 	cmp.w	r8, #0
 8009122:	dd05      	ble.n	8009130 <_dtoa_r+0x808>
 8009124:	4659      	mov	r1, fp
 8009126:	4642      	mov	r2, r8
 8009128:	4620      	mov	r0, r4
 800912a:	f001 f927 	bl	800a37c <__lshift>
 800912e:	4683      	mov	fp, r0
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	dd05      	ble.n	8009142 <_dtoa_r+0x81a>
 8009136:	4631      	mov	r1, r6
 8009138:	461a      	mov	r2, r3
 800913a:	4620      	mov	r0, r4
 800913c:	f001 f91e 	bl	800a37c <__lshift>
 8009140:	4606      	mov	r6, r0
 8009142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d069      	beq.n	800921c <_dtoa_r+0x8f4>
 8009148:	4631      	mov	r1, r6
 800914a:	4658      	mov	r0, fp
 800914c:	f001 f982 	bl	800a454 <__mcmp>
 8009150:	2800      	cmp	r0, #0
 8009152:	da63      	bge.n	800921c <_dtoa_r+0x8f4>
 8009154:	2300      	movs	r3, #0
 8009156:	4659      	mov	r1, fp
 8009158:	220a      	movs	r2, #10
 800915a:	4620      	mov	r0, r4
 800915c:	f000 ff78 	bl	800a050 <__multadd>
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009166:	4683      	mov	fp, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 818e 	beq.w	800948a <_dtoa_r+0xb62>
 800916e:	4639      	mov	r1, r7
 8009170:	2300      	movs	r3, #0
 8009172:	220a      	movs	r2, #10
 8009174:	4620      	mov	r0, r4
 8009176:	f000 ff6b 	bl	800a050 <__multadd>
 800917a:	f1b9 0f00 	cmp.w	r9, #0
 800917e:	4607      	mov	r7, r0
 8009180:	f300 808e 	bgt.w	80092a0 <_dtoa_r+0x978>
 8009184:	9b05      	ldr	r3, [sp, #20]
 8009186:	2b02      	cmp	r3, #2
 8009188:	dc50      	bgt.n	800922c <_dtoa_r+0x904>
 800918a:	e089      	b.n	80092a0 <_dtoa_r+0x978>
 800918c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800918e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009192:	e75d      	b.n	8009050 <_dtoa_r+0x728>
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	1e5e      	subs	r6, r3, #1
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	42b3      	cmp	r3, r6
 800919c:	bfbf      	itttt	lt
 800919e:	9b06      	ldrlt	r3, [sp, #24]
 80091a0:	9606      	strlt	r6, [sp, #24]
 80091a2:	1af2      	sublt	r2, r6, r3
 80091a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80091a6:	bfb6      	itet	lt
 80091a8:	189b      	addlt	r3, r3, r2
 80091aa:	1b9e      	subge	r6, r3, r6
 80091ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	bfb8      	it	lt
 80091b2:	2600      	movlt	r6, #0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfb5      	itete	lt
 80091b8:	eba8 0503 	sublt.w	r5, r8, r3
 80091bc:	9b01      	ldrge	r3, [sp, #4]
 80091be:	2300      	movlt	r3, #0
 80091c0:	4645      	movge	r5, r8
 80091c2:	e747      	b.n	8009054 <_dtoa_r+0x72c>
 80091c4:	9e06      	ldr	r6, [sp, #24]
 80091c6:	9f08      	ldr	r7, [sp, #32]
 80091c8:	4645      	mov	r5, r8
 80091ca:	e74c      	b.n	8009066 <_dtoa_r+0x73e>
 80091cc:	9a06      	ldr	r2, [sp, #24]
 80091ce:	e775      	b.n	80090bc <_dtoa_r+0x794>
 80091d0:	9b05      	ldr	r3, [sp, #20]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	dc18      	bgt.n	8009208 <_dtoa_r+0x8e0>
 80091d6:	9b02      	ldr	r3, [sp, #8]
 80091d8:	b9b3      	cbnz	r3, 8009208 <_dtoa_r+0x8e0>
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091e0:	b9a3      	cbnz	r3, 800920c <_dtoa_r+0x8e4>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e8:	0d1b      	lsrs	r3, r3, #20
 80091ea:	051b      	lsls	r3, r3, #20
 80091ec:	b12b      	cbz	r3, 80091fa <_dtoa_r+0x8d2>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	3301      	adds	r3, #1
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	f108 0801 	add.w	r8, r8, #1
 80091f8:	2301      	movs	r3, #1
 80091fa:	9306      	str	r3, [sp, #24]
 80091fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f47f af74 	bne.w	80090ec <_dtoa_r+0x7c4>
 8009204:	2001      	movs	r0, #1
 8009206:	e779      	b.n	80090fc <_dtoa_r+0x7d4>
 8009208:	2300      	movs	r3, #0
 800920a:	e7f6      	b.n	80091fa <_dtoa_r+0x8d2>
 800920c:	9b02      	ldr	r3, [sp, #8]
 800920e:	e7f4      	b.n	80091fa <_dtoa_r+0x8d2>
 8009210:	d085      	beq.n	800911e <_dtoa_r+0x7f6>
 8009212:	4618      	mov	r0, r3
 8009214:	301c      	adds	r0, #28
 8009216:	e77d      	b.n	8009114 <_dtoa_r+0x7ec>
 8009218:	40240000 	.word	0x40240000
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	dc38      	bgt.n	8009294 <_dtoa_r+0x96c>
 8009222:	9b05      	ldr	r3, [sp, #20]
 8009224:	2b02      	cmp	r3, #2
 8009226:	dd35      	ble.n	8009294 <_dtoa_r+0x96c>
 8009228:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800922c:	f1b9 0f00 	cmp.w	r9, #0
 8009230:	d10d      	bne.n	800924e <_dtoa_r+0x926>
 8009232:	4631      	mov	r1, r6
 8009234:	464b      	mov	r3, r9
 8009236:	2205      	movs	r2, #5
 8009238:	4620      	mov	r0, r4
 800923a:	f000 ff09 	bl	800a050 <__multadd>
 800923e:	4601      	mov	r1, r0
 8009240:	4606      	mov	r6, r0
 8009242:	4658      	mov	r0, fp
 8009244:	f001 f906 	bl	800a454 <__mcmp>
 8009248:	2800      	cmp	r0, #0
 800924a:	f73f adbe 	bgt.w	8008dca <_dtoa_r+0x4a2>
 800924e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009250:	9d00      	ldr	r5, [sp, #0]
 8009252:	ea6f 0a03 	mvn.w	sl, r3
 8009256:	f04f 0800 	mov.w	r8, #0
 800925a:	4631      	mov	r1, r6
 800925c:	4620      	mov	r0, r4
 800925e:	f000 feee 	bl	800a03e <_Bfree>
 8009262:	2f00      	cmp	r7, #0
 8009264:	f43f aeb4 	beq.w	8008fd0 <_dtoa_r+0x6a8>
 8009268:	f1b8 0f00 	cmp.w	r8, #0
 800926c:	d005      	beq.n	800927a <_dtoa_r+0x952>
 800926e:	45b8      	cmp	r8, r7
 8009270:	d003      	beq.n	800927a <_dtoa_r+0x952>
 8009272:	4641      	mov	r1, r8
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fee2 	bl	800a03e <_Bfree>
 800927a:	4639      	mov	r1, r7
 800927c:	4620      	mov	r0, r4
 800927e:	f000 fede 	bl	800a03e <_Bfree>
 8009282:	e6a5      	b.n	8008fd0 <_dtoa_r+0x6a8>
 8009284:	2600      	movs	r6, #0
 8009286:	4637      	mov	r7, r6
 8009288:	e7e1      	b.n	800924e <_dtoa_r+0x926>
 800928a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800928c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009290:	4637      	mov	r7, r6
 8009292:	e59a      	b.n	8008dca <_dtoa_r+0x4a2>
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 80fc 	beq.w	8009498 <_dtoa_r+0xb70>
 80092a0:	2d00      	cmp	r5, #0
 80092a2:	dd05      	ble.n	80092b0 <_dtoa_r+0x988>
 80092a4:	4639      	mov	r1, r7
 80092a6:	462a      	mov	r2, r5
 80092a8:	4620      	mov	r0, r4
 80092aa:	f001 f867 	bl	800a37c <__lshift>
 80092ae:	4607      	mov	r7, r0
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d05b      	beq.n	800936e <_dtoa_r+0xa46>
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 fe9b 	bl	8009ff4 <_Balloc>
 80092be:	4605      	mov	r5, r0
 80092c0:	b920      	cbnz	r0, 80092cc <_dtoa_r+0x9a4>
 80092c2:	4b80      	ldr	r3, [pc, #512]	; (80094c4 <_dtoa_r+0xb9c>)
 80092c4:	4602      	mov	r2, r0
 80092c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092ca:	e45b      	b.n	8008b84 <_dtoa_r+0x25c>
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	3202      	adds	r2, #2
 80092d0:	0092      	lsls	r2, r2, #2
 80092d2:	f107 010c 	add.w	r1, r7, #12
 80092d6:	300c      	adds	r0, #12
 80092d8:	f000 fe72 	bl	8009fc0 <memcpy>
 80092dc:	2201      	movs	r2, #1
 80092de:	4629      	mov	r1, r5
 80092e0:	4620      	mov	r0, r4
 80092e2:	f001 f84b 	bl	800a37c <__lshift>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	444b      	add	r3, r9
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	46b8      	mov	r8, r7
 80092fa:	9306      	str	r3, [sp, #24]
 80092fc:	4607      	mov	r7, r0
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	4631      	mov	r1, r6
 8009302:	3b01      	subs	r3, #1
 8009304:	4658      	mov	r0, fp
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	f7ff fa80 	bl	800880c <quorem>
 800930c:	4603      	mov	r3, r0
 800930e:	3330      	adds	r3, #48	; 0x30
 8009310:	9004      	str	r0, [sp, #16]
 8009312:	4641      	mov	r1, r8
 8009314:	4658      	mov	r0, fp
 8009316:	9308      	str	r3, [sp, #32]
 8009318:	f001 f89c 	bl	800a454 <__mcmp>
 800931c:	463a      	mov	r2, r7
 800931e:	4681      	mov	r9, r0
 8009320:	4631      	mov	r1, r6
 8009322:	4620      	mov	r0, r4
 8009324:	f001 f8b2 	bl	800a48c <__mdiff>
 8009328:	68c2      	ldr	r2, [r0, #12]
 800932a:	9b08      	ldr	r3, [sp, #32]
 800932c:	4605      	mov	r5, r0
 800932e:	bb02      	cbnz	r2, 8009372 <_dtoa_r+0xa4a>
 8009330:	4601      	mov	r1, r0
 8009332:	4658      	mov	r0, fp
 8009334:	f001 f88e 	bl	800a454 <__mcmp>
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	4602      	mov	r2, r0
 800933c:	4629      	mov	r1, r5
 800933e:	4620      	mov	r0, r4
 8009340:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009344:	f000 fe7b 	bl	800a03e <_Bfree>
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800934c:	9d01      	ldr	r5, [sp, #4]
 800934e:	ea43 0102 	orr.w	r1, r3, r2
 8009352:	9b06      	ldr	r3, [sp, #24]
 8009354:	430b      	orrs	r3, r1
 8009356:	9b08      	ldr	r3, [sp, #32]
 8009358:	d10d      	bne.n	8009376 <_dtoa_r+0xa4e>
 800935a:	2b39      	cmp	r3, #57	; 0x39
 800935c:	d029      	beq.n	80093b2 <_dtoa_r+0xa8a>
 800935e:	f1b9 0f00 	cmp.w	r9, #0
 8009362:	dd01      	ble.n	8009368 <_dtoa_r+0xa40>
 8009364:	9b04      	ldr	r3, [sp, #16]
 8009366:	3331      	adds	r3, #49	; 0x31
 8009368:	9a02      	ldr	r2, [sp, #8]
 800936a:	7013      	strb	r3, [r2, #0]
 800936c:	e775      	b.n	800925a <_dtoa_r+0x932>
 800936e:	4638      	mov	r0, r7
 8009370:	e7b9      	b.n	80092e6 <_dtoa_r+0x9be>
 8009372:	2201      	movs	r2, #1
 8009374:	e7e2      	b.n	800933c <_dtoa_r+0xa14>
 8009376:	f1b9 0f00 	cmp.w	r9, #0
 800937a:	db06      	blt.n	800938a <_dtoa_r+0xa62>
 800937c:	9905      	ldr	r1, [sp, #20]
 800937e:	ea41 0909 	orr.w	r9, r1, r9
 8009382:	9906      	ldr	r1, [sp, #24]
 8009384:	ea59 0101 	orrs.w	r1, r9, r1
 8009388:	d120      	bne.n	80093cc <_dtoa_r+0xaa4>
 800938a:	2a00      	cmp	r2, #0
 800938c:	ddec      	ble.n	8009368 <_dtoa_r+0xa40>
 800938e:	4659      	mov	r1, fp
 8009390:	2201      	movs	r2, #1
 8009392:	4620      	mov	r0, r4
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	f000 fff1 	bl	800a37c <__lshift>
 800939a:	4631      	mov	r1, r6
 800939c:	4683      	mov	fp, r0
 800939e:	f001 f859 	bl	800a454 <__mcmp>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	dc02      	bgt.n	80093ae <_dtoa_r+0xa86>
 80093a8:	d1de      	bne.n	8009368 <_dtoa_r+0xa40>
 80093aa:	07da      	lsls	r2, r3, #31
 80093ac:	d5dc      	bpl.n	8009368 <_dtoa_r+0xa40>
 80093ae:	2b39      	cmp	r3, #57	; 0x39
 80093b0:	d1d8      	bne.n	8009364 <_dtoa_r+0xa3c>
 80093b2:	9a02      	ldr	r2, [sp, #8]
 80093b4:	2339      	movs	r3, #57	; 0x39
 80093b6:	7013      	strb	r3, [r2, #0]
 80093b8:	462b      	mov	r3, r5
 80093ba:	461d      	mov	r5, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093c2:	2a39      	cmp	r2, #57	; 0x39
 80093c4:	d050      	beq.n	8009468 <_dtoa_r+0xb40>
 80093c6:	3201      	adds	r2, #1
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	e746      	b.n	800925a <_dtoa_r+0x932>
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	dd03      	ble.n	80093d8 <_dtoa_r+0xab0>
 80093d0:	2b39      	cmp	r3, #57	; 0x39
 80093d2:	d0ee      	beq.n	80093b2 <_dtoa_r+0xa8a>
 80093d4:	3301      	adds	r3, #1
 80093d6:	e7c7      	b.n	8009368 <_dtoa_r+0xa40>
 80093d8:	9a01      	ldr	r2, [sp, #4]
 80093da:	9907      	ldr	r1, [sp, #28]
 80093dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093e0:	428a      	cmp	r2, r1
 80093e2:	d02a      	beq.n	800943a <_dtoa_r+0xb12>
 80093e4:	4659      	mov	r1, fp
 80093e6:	2300      	movs	r3, #0
 80093e8:	220a      	movs	r2, #10
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fe30 	bl	800a050 <__multadd>
 80093f0:	45b8      	cmp	r8, r7
 80093f2:	4683      	mov	fp, r0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	f04f 020a 	mov.w	r2, #10
 80093fc:	4641      	mov	r1, r8
 80093fe:	4620      	mov	r0, r4
 8009400:	d107      	bne.n	8009412 <_dtoa_r+0xaea>
 8009402:	f000 fe25 	bl	800a050 <__multadd>
 8009406:	4680      	mov	r8, r0
 8009408:	4607      	mov	r7, r0
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	3301      	adds	r3, #1
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	e775      	b.n	80092fe <_dtoa_r+0x9d6>
 8009412:	f000 fe1d 	bl	800a050 <__multadd>
 8009416:	4639      	mov	r1, r7
 8009418:	4680      	mov	r8, r0
 800941a:	2300      	movs	r3, #0
 800941c:	220a      	movs	r2, #10
 800941e:	4620      	mov	r0, r4
 8009420:	f000 fe16 	bl	800a050 <__multadd>
 8009424:	4607      	mov	r7, r0
 8009426:	e7f0      	b.n	800940a <_dtoa_r+0xae2>
 8009428:	f1b9 0f00 	cmp.w	r9, #0
 800942c:	9a00      	ldr	r2, [sp, #0]
 800942e:	bfcc      	ite	gt
 8009430:	464d      	movgt	r5, r9
 8009432:	2501      	movle	r5, #1
 8009434:	4415      	add	r5, r2
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	4659      	mov	r1, fp
 800943c:	2201      	movs	r2, #1
 800943e:	4620      	mov	r0, r4
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	f000 ff9b 	bl	800a37c <__lshift>
 8009446:	4631      	mov	r1, r6
 8009448:	4683      	mov	fp, r0
 800944a:	f001 f803 	bl	800a454 <__mcmp>
 800944e:	2800      	cmp	r0, #0
 8009450:	dcb2      	bgt.n	80093b8 <_dtoa_r+0xa90>
 8009452:	d102      	bne.n	800945a <_dtoa_r+0xb32>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	07db      	lsls	r3, r3, #31
 8009458:	d4ae      	bmi.n	80093b8 <_dtoa_r+0xa90>
 800945a:	462b      	mov	r3, r5
 800945c:	461d      	mov	r5, r3
 800945e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009462:	2a30      	cmp	r2, #48	; 0x30
 8009464:	d0fa      	beq.n	800945c <_dtoa_r+0xb34>
 8009466:	e6f8      	b.n	800925a <_dtoa_r+0x932>
 8009468:	9a00      	ldr	r2, [sp, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d1a5      	bne.n	80093ba <_dtoa_r+0xa92>
 800946e:	f10a 0a01 	add.w	sl, sl, #1
 8009472:	2331      	movs	r3, #49	; 0x31
 8009474:	e779      	b.n	800936a <_dtoa_r+0xa42>
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <_dtoa_r+0xba0>)
 8009478:	f7ff bab1 	b.w	80089de <_dtoa_r+0xb6>
 800947c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800947e:	2b00      	cmp	r3, #0
 8009480:	f47f aa93 	bne.w	80089aa <_dtoa_r+0x82>
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <_dtoa_r+0xba4>)
 8009486:	f7ff baaa 	b.w	80089de <_dtoa_r+0xb6>
 800948a:	f1b9 0f00 	cmp.w	r9, #0
 800948e:	dc03      	bgt.n	8009498 <_dtoa_r+0xb70>
 8009490:	9b05      	ldr	r3, [sp, #20]
 8009492:	2b02      	cmp	r3, #2
 8009494:	f73f aeca 	bgt.w	800922c <_dtoa_r+0x904>
 8009498:	9d00      	ldr	r5, [sp, #0]
 800949a:	4631      	mov	r1, r6
 800949c:	4658      	mov	r0, fp
 800949e:	f7ff f9b5 	bl	800880c <quorem>
 80094a2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094a6:	f805 3b01 	strb.w	r3, [r5], #1
 80094aa:	9a00      	ldr	r2, [sp, #0]
 80094ac:	1aaa      	subs	r2, r5, r2
 80094ae:	4591      	cmp	r9, r2
 80094b0:	ddba      	ble.n	8009428 <_dtoa_r+0xb00>
 80094b2:	4659      	mov	r1, fp
 80094b4:	2300      	movs	r3, #0
 80094b6:	220a      	movs	r2, #10
 80094b8:	4620      	mov	r0, r4
 80094ba:	f000 fdc9 	bl	800a050 <__multadd>
 80094be:	4683      	mov	fp, r0
 80094c0:	e7eb      	b.n	800949a <_dtoa_r+0xb72>
 80094c2:	bf00      	nop
 80094c4:	0800e536 	.word	0x0800e536
 80094c8:	0800e406 	.word	0x0800e406
 80094cc:	0800e52d 	.word	0x0800e52d

080094d0 <__sflush_r>:
 80094d0:	898b      	ldrh	r3, [r1, #12]
 80094d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094da:	4605      	mov	r5, r0
 80094dc:	0718      	lsls	r0, r3, #28
 80094de:	460c      	mov	r4, r1
 80094e0:	d45f      	bmi.n	80095a2 <__sflush_r+0xd2>
 80094e2:	684b      	ldr	r3, [r1, #4]
 80094e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	818a      	strh	r2, [r1, #12]
 80094ec:	dc05      	bgt.n	80094fa <__sflush_r+0x2a>
 80094ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc02      	bgt.n	80094fa <__sflush_r+0x2a>
 80094f4:	2000      	movs	r0, #0
 80094f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094fc:	2e00      	cmp	r6, #0
 80094fe:	d0f9      	beq.n	80094f4 <__sflush_r+0x24>
 8009500:	2300      	movs	r3, #0
 8009502:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009506:	682f      	ldr	r7, [r5, #0]
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	d036      	beq.n	800957a <__sflush_r+0xaa>
 800950c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	075a      	lsls	r2, r3, #29
 8009512:	d505      	bpl.n	8009520 <__sflush_r+0x50>
 8009514:	6863      	ldr	r3, [r4, #4]
 8009516:	1ac0      	subs	r0, r0, r3
 8009518:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800951a:	b10b      	cbz	r3, 8009520 <__sflush_r+0x50>
 800951c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800951e:	1ac0      	subs	r0, r0, r3
 8009520:	2300      	movs	r3, #0
 8009522:	4602      	mov	r2, r0
 8009524:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009526:	69e1      	ldr	r1, [r4, #28]
 8009528:	4628      	mov	r0, r5
 800952a:	47b0      	blx	r6
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	d106      	bne.n	8009540 <__sflush_r+0x70>
 8009532:	6829      	ldr	r1, [r5, #0]
 8009534:	291d      	cmp	r1, #29
 8009536:	d830      	bhi.n	800959a <__sflush_r+0xca>
 8009538:	4a2b      	ldr	r2, [pc, #172]	; (80095e8 <__sflush_r+0x118>)
 800953a:	40ca      	lsrs	r2, r1
 800953c:	07d6      	lsls	r6, r2, #31
 800953e:	d52c      	bpl.n	800959a <__sflush_r+0xca>
 8009540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009544:	b21b      	sxth	r3, r3
 8009546:	2200      	movs	r2, #0
 8009548:	6062      	str	r2, [r4, #4]
 800954a:	04d9      	lsls	r1, r3, #19
 800954c:	6922      	ldr	r2, [r4, #16]
 800954e:	81a3      	strh	r3, [r4, #12]
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	d504      	bpl.n	800955e <__sflush_r+0x8e>
 8009554:	1c42      	adds	r2, r0, #1
 8009556:	d101      	bne.n	800955c <__sflush_r+0x8c>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b903      	cbnz	r3, 800955e <__sflush_r+0x8e>
 800955c:	6520      	str	r0, [r4, #80]	; 0x50
 800955e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009560:	602f      	str	r7, [r5, #0]
 8009562:	2900      	cmp	r1, #0
 8009564:	d0c6      	beq.n	80094f4 <__sflush_r+0x24>
 8009566:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800956a:	4299      	cmp	r1, r3
 800956c:	d002      	beq.n	8009574 <__sflush_r+0xa4>
 800956e:	4628      	mov	r0, r5
 8009570:	f000 f938 	bl	80097e4 <_free_r>
 8009574:	2000      	movs	r0, #0
 8009576:	6320      	str	r0, [r4, #48]	; 0x30
 8009578:	e7bd      	b.n	80094f6 <__sflush_r+0x26>
 800957a:	69e1      	ldr	r1, [r4, #28]
 800957c:	2301      	movs	r3, #1
 800957e:	4628      	mov	r0, r5
 8009580:	47b0      	blx	r6
 8009582:	1c41      	adds	r1, r0, #1
 8009584:	d1c3      	bne.n	800950e <__sflush_r+0x3e>
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0c0      	beq.n	800950e <__sflush_r+0x3e>
 800958c:	2b1d      	cmp	r3, #29
 800958e:	d001      	beq.n	8009594 <__sflush_r+0xc4>
 8009590:	2b16      	cmp	r3, #22
 8009592:	d101      	bne.n	8009598 <__sflush_r+0xc8>
 8009594:	602f      	str	r7, [r5, #0]
 8009596:	e7ad      	b.n	80094f4 <__sflush_r+0x24>
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	e7a9      	b.n	80094f6 <__sflush_r+0x26>
 80095a2:	690f      	ldr	r7, [r1, #16]
 80095a4:	2f00      	cmp	r7, #0
 80095a6:	d0a5      	beq.n	80094f4 <__sflush_r+0x24>
 80095a8:	079b      	lsls	r3, r3, #30
 80095aa:	680e      	ldr	r6, [r1, #0]
 80095ac:	bf08      	it	eq
 80095ae:	694b      	ldreq	r3, [r1, #20]
 80095b0:	600f      	str	r7, [r1, #0]
 80095b2:	bf18      	it	ne
 80095b4:	2300      	movne	r3, #0
 80095b6:	eba6 0807 	sub.w	r8, r6, r7
 80095ba:	608b      	str	r3, [r1, #8]
 80095bc:	f1b8 0f00 	cmp.w	r8, #0
 80095c0:	dd98      	ble.n	80094f4 <__sflush_r+0x24>
 80095c2:	69e1      	ldr	r1, [r4, #28]
 80095c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095c6:	4643      	mov	r3, r8
 80095c8:	463a      	mov	r2, r7
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	2800      	cmp	r0, #0
 80095d0:	dc06      	bgt.n	80095e0 <__sflush_r+0x110>
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	e78a      	b.n	80094f6 <__sflush_r+0x26>
 80095e0:	4407      	add	r7, r0
 80095e2:	eba8 0800 	sub.w	r8, r8, r0
 80095e6:	e7e9      	b.n	80095bc <__sflush_r+0xec>
 80095e8:	20400001 	.word	0x20400001

080095ec <_fflush_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	460c      	mov	r4, r1
 80095f0:	4605      	mov	r5, r0
 80095f2:	b118      	cbz	r0, 80095fc <_fflush_r+0x10>
 80095f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80095f6:	b90b      	cbnz	r3, 80095fc <_fflush_r+0x10>
 80095f8:	f000 f864 	bl	80096c4 <__sinit>
 80095fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009600:	b1bb      	cbz	r3, 8009632 <_fflush_r+0x46>
 8009602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009604:	07d0      	lsls	r0, r2, #31
 8009606:	d404      	bmi.n	8009612 <_fflush_r+0x26>
 8009608:	0599      	lsls	r1, r3, #22
 800960a:	d402      	bmi.n	8009612 <_fflush_r+0x26>
 800960c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960e:	f000 fa16 	bl	8009a3e <__retarget_lock_acquire_recursive>
 8009612:	4628      	mov	r0, r5
 8009614:	4621      	mov	r1, r4
 8009616:	f7ff ff5b 	bl	80094d0 <__sflush_r>
 800961a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800961c:	07da      	lsls	r2, r3, #31
 800961e:	4605      	mov	r5, r0
 8009620:	d405      	bmi.n	800962e <_fflush_r+0x42>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	059b      	lsls	r3, r3, #22
 8009626:	d402      	bmi.n	800962e <_fflush_r+0x42>
 8009628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800962a:	f000 fa0a 	bl	8009a42 <__retarget_lock_release_recursive>
 800962e:	4628      	mov	r0, r5
 8009630:	bd38      	pop	{r3, r4, r5, pc}
 8009632:	461d      	mov	r5, r3
 8009634:	e7fb      	b.n	800962e <_fflush_r+0x42>
	...

08009638 <std>:
 8009638:	2300      	movs	r3, #0
 800963a:	b510      	push	{r4, lr}
 800963c:	4604      	mov	r4, r0
 800963e:	e9c0 3300 	strd	r3, r3, [r0]
 8009642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009646:	6083      	str	r3, [r0, #8]
 8009648:	8181      	strh	r1, [r0, #12]
 800964a:	6643      	str	r3, [r0, #100]	; 0x64
 800964c:	81c2      	strh	r2, [r0, #14]
 800964e:	6183      	str	r3, [r0, #24]
 8009650:	4619      	mov	r1, r3
 8009652:	2208      	movs	r2, #8
 8009654:	305c      	adds	r0, #92	; 0x5c
 8009656:	f7fd f889 	bl	800676c <memset>
 800965a:	4b07      	ldr	r3, [pc, #28]	; (8009678 <std+0x40>)
 800965c:	6223      	str	r3, [r4, #32]
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <std+0x44>)
 8009660:	6263      	str	r3, [r4, #36]	; 0x24
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <std+0x48>)
 8009664:	62a3      	str	r3, [r4, #40]	; 0x28
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <std+0x4c>)
 8009668:	61e4      	str	r4, [r4, #28]
 800966a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800966c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009674:	f000 b9e0 	b.w	8009a38 <__retarget_lock_init_recursive>
 8009678:	0800a73d 	.word	0x0800a73d
 800967c:	0800a763 	.word	0x0800a763
 8009680:	0800a79b 	.word	0x0800a79b
 8009684:	0800a7bf 	.word	0x0800a7bf

08009688 <_cleanup_r>:
 8009688:	4901      	ldr	r1, [pc, #4]	; (8009690 <_cleanup_r+0x8>)
 800968a:	f000 b96b 	b.w	8009964 <_fwalk_reent>
 800968e:	bf00      	nop
 8009690:	0800c595 	.word	0x0800c595

08009694 <__sfp_lock_acquire>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__sfp_lock_acquire+0x8>)
 8009696:	f000 b9d2 	b.w	8009a3e <__retarget_lock_acquire_recursive>
 800969a:	bf00      	nop
 800969c:	20000cac 	.word	0x20000cac

080096a0 <__sfp_lock_release>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__sfp_lock_release+0x8>)
 80096a2:	f000 b9ce 	b.w	8009a42 <__retarget_lock_release_recursive>
 80096a6:	bf00      	nop
 80096a8:	20000cac 	.word	0x20000cac

080096ac <__sinit_lock_acquire>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__sinit_lock_acquire+0x8>)
 80096ae:	f000 b9c6 	b.w	8009a3e <__retarget_lock_acquire_recursive>
 80096b2:	bf00      	nop
 80096b4:	20000ca7 	.word	0x20000ca7

080096b8 <__sinit_lock_release>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__sinit_lock_release+0x8>)
 80096ba:	f000 b9c2 	b.w	8009a42 <__retarget_lock_release_recursive>
 80096be:	bf00      	nop
 80096c0:	20000ca7 	.word	0x20000ca7

080096c4 <__sinit>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	4604      	mov	r4, r0
 80096c8:	f7ff fff0 	bl	80096ac <__sinit_lock_acquire>
 80096cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096ce:	b11a      	cbz	r2, 80096d8 <__sinit+0x14>
 80096d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d4:	f7ff bff0 	b.w	80096b8 <__sinit_lock_release>
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <__sinit+0x4c>)
 80096da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80096dc:	2303      	movs	r3, #3
 80096de:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80096e2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80096e6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80096ea:	6860      	ldr	r0, [r4, #4]
 80096ec:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80096f0:	2104      	movs	r1, #4
 80096f2:	f7ff ffa1 	bl	8009638 <std>
 80096f6:	68a0      	ldr	r0, [r4, #8]
 80096f8:	2201      	movs	r2, #1
 80096fa:	2109      	movs	r1, #9
 80096fc:	f7ff ff9c 	bl	8009638 <std>
 8009700:	68e0      	ldr	r0, [r4, #12]
 8009702:	2202      	movs	r2, #2
 8009704:	2112      	movs	r1, #18
 8009706:	f7ff ff97 	bl	8009638 <std>
 800970a:	2301      	movs	r3, #1
 800970c:	63a3      	str	r3, [r4, #56]	; 0x38
 800970e:	e7df      	b.n	80096d0 <__sinit+0xc>
 8009710:	08009689 	.word	0x08009689

08009714 <__libc_fini_array>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	; (8009734 <__libc_fini_array+0x20>)
 8009718:	4c07      	ldr	r4, [pc, #28]	; (8009738 <__libc_fini_array+0x24>)
 800971a:	1b64      	subs	r4, r4, r5
 800971c:	10a4      	asrs	r4, r4, #2
 800971e:	b91c      	cbnz	r4, 8009728 <__libc_fini_array+0x14>
 8009720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009724:	f004 bd88 	b.w	800e238 <_fini>
 8009728:	3c01      	subs	r4, #1
 800972a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800972e:	4798      	blx	r3
 8009730:	e7f5      	b.n	800971e <__libc_fini_array+0xa>
 8009732:	bf00      	nop
 8009734:	0800e840 	.word	0x0800e840
 8009738:	0800e844 	.word	0x0800e844

0800973c <_malloc_trim_r>:
 800973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	4606      	mov	r6, r0
 8009742:	2008      	movs	r0, #8
 8009744:	460c      	mov	r4, r1
 8009746:	f002 f929 	bl	800b99c <sysconf>
 800974a:	4f23      	ldr	r7, [pc, #140]	; (80097d8 <_malloc_trim_r+0x9c>)
 800974c:	4680      	mov	r8, r0
 800974e:	4630      	mov	r0, r6
 8009750:	f000 fc44 	bl	8009fdc <__malloc_lock>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	685d      	ldr	r5, [r3, #4]
 8009758:	f025 0503 	bic.w	r5, r5, #3
 800975c:	1b2c      	subs	r4, r5, r4
 800975e:	3c11      	subs	r4, #17
 8009760:	4444      	add	r4, r8
 8009762:	fbb4 f4f8 	udiv	r4, r4, r8
 8009766:	3c01      	subs	r4, #1
 8009768:	fb08 f404 	mul.w	r4, r8, r4
 800976c:	45a0      	cmp	r8, r4
 800976e:	dd05      	ble.n	800977c <_malloc_trim_r+0x40>
 8009770:	4630      	mov	r0, r6
 8009772:	f000 fc39 	bl	8009fe8 <__malloc_unlock>
 8009776:	2000      	movs	r0, #0
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	2100      	movs	r1, #0
 800977e:	4630      	mov	r0, r6
 8009780:	f000 ffa0 	bl	800a6c4 <_sbrk_r>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	442b      	add	r3, r5
 8009788:	4298      	cmp	r0, r3
 800978a:	d1f1      	bne.n	8009770 <_malloc_trim_r+0x34>
 800978c:	4261      	negs	r1, r4
 800978e:	4630      	mov	r0, r6
 8009790:	f000 ff98 	bl	800a6c4 <_sbrk_r>
 8009794:	3001      	adds	r0, #1
 8009796:	d110      	bne.n	80097ba <_malloc_trim_r+0x7e>
 8009798:	2100      	movs	r1, #0
 800979a:	4630      	mov	r0, r6
 800979c:	f000 ff92 	bl	800a6c4 <_sbrk_r>
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	1a83      	subs	r3, r0, r2
 80097a4:	2b0f      	cmp	r3, #15
 80097a6:	dde3      	ble.n	8009770 <_malloc_trim_r+0x34>
 80097a8:	490c      	ldr	r1, [pc, #48]	; (80097dc <_malloc_trim_r+0xa0>)
 80097aa:	6809      	ldr	r1, [r1, #0]
 80097ac:	1a40      	subs	r0, r0, r1
 80097ae:	490c      	ldr	r1, [pc, #48]	; (80097e0 <_malloc_trim_r+0xa4>)
 80097b0:	f043 0301 	orr.w	r3, r3, #1
 80097b4:	6008      	str	r0, [r1, #0]
 80097b6:	6053      	str	r3, [r2, #4]
 80097b8:	e7da      	b.n	8009770 <_malloc_trim_r+0x34>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <_malloc_trim_r+0xa4>)
 80097be:	1b2d      	subs	r5, r5, r4
 80097c0:	f045 0501 	orr.w	r5, r5, #1
 80097c4:	605d      	str	r5, [r3, #4]
 80097c6:	6813      	ldr	r3, [r2, #0]
 80097c8:	4630      	mov	r0, r6
 80097ca:	1b1c      	subs	r4, r3, r4
 80097cc:	6014      	str	r4, [r2, #0]
 80097ce:	f000 fc0b 	bl	8009fe8 <__malloc_unlock>
 80097d2:	2001      	movs	r0, #1
 80097d4:	e7d0      	b.n	8009778 <_malloc_trim_r+0x3c>
 80097d6:	bf00      	nop
 80097d8:	200004b0 	.word	0x200004b0
 80097dc:	200008b8 	.word	0x200008b8
 80097e0:	20000abc 	.word	0x20000abc

080097e4 <_free_r>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	4605      	mov	r5, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	2900      	cmp	r1, #0
 80097ec:	f000 80b1 	beq.w	8009952 <_free_r+0x16e>
 80097f0:	f000 fbf4 	bl	8009fdc <__malloc_lock>
 80097f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80097f8:	4856      	ldr	r0, [pc, #344]	; (8009954 <_free_r+0x170>)
 80097fa:	f022 0401 	bic.w	r4, r2, #1
 80097fe:	f1a7 0308 	sub.w	r3, r7, #8
 8009802:	eb03 0c04 	add.w	ip, r3, r4
 8009806:	6881      	ldr	r1, [r0, #8]
 8009808:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800980c:	4561      	cmp	r1, ip
 800980e:	f026 0603 	bic.w	r6, r6, #3
 8009812:	f002 0201 	and.w	r2, r2, #1
 8009816:	d11b      	bne.n	8009850 <_free_r+0x6c>
 8009818:	4434      	add	r4, r6
 800981a:	b93a      	cbnz	r2, 800982c <_free_r+0x48>
 800981c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009820:	1a9b      	subs	r3, r3, r2
 8009822:	4414      	add	r4, r2
 8009824:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8009828:	60ca      	str	r2, [r1, #12]
 800982a:	6091      	str	r1, [r2, #8]
 800982c:	f044 0201 	orr.w	r2, r4, #1
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	6083      	str	r3, [r0, #8]
 8009834:	4b48      	ldr	r3, [pc, #288]	; (8009958 <_free_r+0x174>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	42a3      	cmp	r3, r4
 800983a:	d804      	bhi.n	8009846 <_free_r+0x62>
 800983c:	4b47      	ldr	r3, [pc, #284]	; (800995c <_free_r+0x178>)
 800983e:	4628      	mov	r0, r5
 8009840:	6819      	ldr	r1, [r3, #0]
 8009842:	f7ff ff7b 	bl	800973c <_malloc_trim_r>
 8009846:	4628      	mov	r0, r5
 8009848:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800984c:	f000 bbcc 	b.w	8009fe8 <__malloc_unlock>
 8009850:	f8cc 6004 	str.w	r6, [ip, #4]
 8009854:	2a00      	cmp	r2, #0
 8009856:	d138      	bne.n	80098ca <_free_r+0xe6>
 8009858:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800985c:	1a5b      	subs	r3, r3, r1
 800985e:	440c      	add	r4, r1
 8009860:	6899      	ldr	r1, [r3, #8]
 8009862:	f100 0708 	add.w	r7, r0, #8
 8009866:	42b9      	cmp	r1, r7
 8009868:	d031      	beq.n	80098ce <_free_r+0xea>
 800986a:	68df      	ldr	r7, [r3, #12]
 800986c:	60cf      	str	r7, [r1, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	eb0c 0106 	add.w	r1, ip, r6
 8009874:	6849      	ldr	r1, [r1, #4]
 8009876:	07c9      	lsls	r1, r1, #31
 8009878:	d40b      	bmi.n	8009892 <_free_r+0xae>
 800987a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800987e:	4434      	add	r4, r6
 8009880:	bb3a      	cbnz	r2, 80098d2 <_free_r+0xee>
 8009882:	4e37      	ldr	r6, [pc, #220]	; (8009960 <_free_r+0x17c>)
 8009884:	42b1      	cmp	r1, r6
 8009886:	d124      	bne.n	80098d2 <_free_r+0xee>
 8009888:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800988c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009890:	2201      	movs	r2, #1
 8009892:	f044 0101 	orr.w	r1, r4, #1
 8009896:	6059      	str	r1, [r3, #4]
 8009898:	511c      	str	r4, [r3, r4]
 800989a:	2a00      	cmp	r2, #0
 800989c:	d1d3      	bne.n	8009846 <_free_r+0x62>
 800989e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80098a2:	d21b      	bcs.n	80098dc <_free_r+0xf8>
 80098a4:	0961      	lsrs	r1, r4, #5
 80098a6:	08e2      	lsrs	r2, r4, #3
 80098a8:	2401      	movs	r4, #1
 80098aa:	408c      	lsls	r4, r1
 80098ac:	6841      	ldr	r1, [r0, #4]
 80098ae:	3201      	adds	r2, #1
 80098b0:	430c      	orrs	r4, r1
 80098b2:	6044      	str	r4, [r0, #4]
 80098b4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80098b8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80098bc:	3908      	subs	r1, #8
 80098be:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80098c2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80098c6:	60e3      	str	r3, [r4, #12]
 80098c8:	e7bd      	b.n	8009846 <_free_r+0x62>
 80098ca:	2200      	movs	r2, #0
 80098cc:	e7d0      	b.n	8009870 <_free_r+0x8c>
 80098ce:	2201      	movs	r2, #1
 80098d0:	e7ce      	b.n	8009870 <_free_r+0x8c>
 80098d2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80098d6:	60ce      	str	r6, [r1, #12]
 80098d8:	60b1      	str	r1, [r6, #8]
 80098da:	e7da      	b.n	8009892 <_free_r+0xae>
 80098dc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80098e0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80098e4:	d214      	bcs.n	8009910 <_free_r+0x12c>
 80098e6:	09a2      	lsrs	r2, r4, #6
 80098e8:	3238      	adds	r2, #56	; 0x38
 80098ea:	1c51      	adds	r1, r2, #1
 80098ec:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80098f0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80098f4:	428e      	cmp	r6, r1
 80098f6:	d125      	bne.n	8009944 <_free_r+0x160>
 80098f8:	2401      	movs	r4, #1
 80098fa:	1092      	asrs	r2, r2, #2
 80098fc:	fa04 f202 	lsl.w	r2, r4, r2
 8009900:	6844      	ldr	r4, [r0, #4]
 8009902:	4322      	orrs	r2, r4
 8009904:	6042      	str	r2, [r0, #4]
 8009906:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800990a:	60b3      	str	r3, [r6, #8]
 800990c:	60cb      	str	r3, [r1, #12]
 800990e:	e79a      	b.n	8009846 <_free_r+0x62>
 8009910:	2a14      	cmp	r2, #20
 8009912:	d801      	bhi.n	8009918 <_free_r+0x134>
 8009914:	325b      	adds	r2, #91	; 0x5b
 8009916:	e7e8      	b.n	80098ea <_free_r+0x106>
 8009918:	2a54      	cmp	r2, #84	; 0x54
 800991a:	d802      	bhi.n	8009922 <_free_r+0x13e>
 800991c:	0b22      	lsrs	r2, r4, #12
 800991e:	326e      	adds	r2, #110	; 0x6e
 8009920:	e7e3      	b.n	80098ea <_free_r+0x106>
 8009922:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009926:	d802      	bhi.n	800992e <_free_r+0x14a>
 8009928:	0be2      	lsrs	r2, r4, #15
 800992a:	3277      	adds	r2, #119	; 0x77
 800992c:	e7dd      	b.n	80098ea <_free_r+0x106>
 800992e:	f240 5154 	movw	r1, #1364	; 0x554
 8009932:	428a      	cmp	r2, r1
 8009934:	bf9a      	itte	ls
 8009936:	0ca2      	lsrls	r2, r4, #18
 8009938:	327c      	addls	r2, #124	; 0x7c
 800993a:	227e      	movhi	r2, #126	; 0x7e
 800993c:	e7d5      	b.n	80098ea <_free_r+0x106>
 800993e:	6889      	ldr	r1, [r1, #8]
 8009940:	428e      	cmp	r6, r1
 8009942:	d004      	beq.n	800994e <_free_r+0x16a>
 8009944:	684a      	ldr	r2, [r1, #4]
 8009946:	f022 0203 	bic.w	r2, r2, #3
 800994a:	42a2      	cmp	r2, r4
 800994c:	d8f7      	bhi.n	800993e <_free_r+0x15a>
 800994e:	68ce      	ldr	r6, [r1, #12]
 8009950:	e7d9      	b.n	8009906 <_free_r+0x122>
 8009952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009954:	200004b0 	.word	0x200004b0
 8009958:	200008bc 	.word	0x200008bc
 800995c:	20000aec 	.word	0x20000aec
 8009960:	200004b8 	.word	0x200004b8

08009964 <_fwalk_reent>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	4606      	mov	r6, r0
 800996a:	4688      	mov	r8, r1
 800996c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8009970:	2700      	movs	r7, #0
 8009972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009976:	f1b9 0901 	subs.w	r9, r9, #1
 800997a:	d505      	bpl.n	8009988 <_fwalk_reent+0x24>
 800997c:	6824      	ldr	r4, [r4, #0]
 800997e:	2c00      	cmp	r4, #0
 8009980:	d1f7      	bne.n	8009972 <_fwalk_reent+0xe>
 8009982:	4638      	mov	r0, r7
 8009984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009988:	89ab      	ldrh	r3, [r5, #12]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d907      	bls.n	800999e <_fwalk_reent+0x3a>
 800998e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009992:	3301      	adds	r3, #1
 8009994:	d003      	beq.n	800999e <_fwalk_reent+0x3a>
 8009996:	4629      	mov	r1, r5
 8009998:	4630      	mov	r0, r6
 800999a:	47c0      	blx	r8
 800999c:	4307      	orrs	r7, r0
 800999e:	3568      	adds	r5, #104	; 0x68
 80099a0:	e7e9      	b.n	8009976 <_fwalk_reent+0x12>
	...

080099a4 <_findenv_r>:
 80099a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	4607      	mov	r7, r0
 80099aa:	4689      	mov	r9, r1
 80099ac:	4616      	mov	r6, r2
 80099ae:	f002 fde5 	bl	800c57c <__env_lock>
 80099b2:	4b18      	ldr	r3, [pc, #96]	; (8009a14 <_findenv_r+0x70>)
 80099b4:	681c      	ldr	r4, [r3, #0]
 80099b6:	469a      	mov	sl, r3
 80099b8:	b134      	cbz	r4, 80099c8 <_findenv_r+0x24>
 80099ba:	464b      	mov	r3, r9
 80099bc:	4698      	mov	r8, r3
 80099be:	f813 1b01 	ldrb.w	r1, [r3], #1
 80099c2:	b139      	cbz	r1, 80099d4 <_findenv_r+0x30>
 80099c4:	293d      	cmp	r1, #61	; 0x3d
 80099c6:	d1f9      	bne.n	80099bc <_findenv_r+0x18>
 80099c8:	4638      	mov	r0, r7
 80099ca:	f002 fddd 	bl	800c588 <__env_unlock>
 80099ce:	2000      	movs	r0, #0
 80099d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	eba8 0809 	sub.w	r8, r8, r9
 80099d8:	46a3      	mov	fp, r4
 80099da:	f854 0b04 	ldr.w	r0, [r4], #4
 80099de:	2800      	cmp	r0, #0
 80099e0:	d0f2      	beq.n	80099c8 <_findenv_r+0x24>
 80099e2:	4642      	mov	r2, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f000 fef6 	bl	800a7d6 <strncmp>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d1f4      	bne.n	80099d8 <_findenv_r+0x34>
 80099ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80099f2:	eb03 0508 	add.w	r5, r3, r8
 80099f6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80099fa:	2b3d      	cmp	r3, #61	; 0x3d
 80099fc:	d1ec      	bne.n	80099d8 <_findenv_r+0x34>
 80099fe:	f8da 3000 	ldr.w	r3, [sl]
 8009a02:	ebab 0303 	sub.w	r3, fp, r3
 8009a06:	109b      	asrs	r3, r3, #2
 8009a08:	4638      	mov	r0, r7
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	f002 fdbc 	bl	800c588 <__env_unlock>
 8009a10:	1c68      	adds	r0, r5, #1
 8009a12:	e7dd      	b.n	80099d0 <_findenv_r+0x2c>
 8009a14:	20000008 	.word	0x20000008

08009a18 <_getenv_r>:
 8009a18:	b507      	push	{r0, r1, r2, lr}
 8009a1a:	aa01      	add	r2, sp, #4
 8009a1c:	f7ff ffc2 	bl	80099a4 <_findenv_r>
 8009a20:	b003      	add	sp, #12
 8009a22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009a28 <__gettzinfo>:
 8009a28:	4800      	ldr	r0, [pc, #0]	; (8009a2c <__gettzinfo+0x4>)
 8009a2a:	4770      	bx	lr
 8009a2c:	20000458 	.word	0x20000458

08009a30 <_localeconv_r>:
 8009a30:	4800      	ldr	r0, [pc, #0]	; (8009a34 <_localeconv_r+0x4>)
 8009a32:	4770      	bx	lr
 8009a34:	200009b0 	.word	0x200009b0

08009a38 <__retarget_lock_init_recursive>:
 8009a38:	4770      	bx	lr

08009a3a <__retarget_lock_close_recursive>:
 8009a3a:	4770      	bx	lr

08009a3c <__retarget_lock_acquire>:
 8009a3c:	4770      	bx	lr

08009a3e <__retarget_lock_acquire_recursive>:
 8009a3e:	4770      	bx	lr

08009a40 <__retarget_lock_release>:
 8009a40:	4770      	bx	lr

08009a42 <__retarget_lock_release_recursive>:
 8009a42:	4770      	bx	lr

08009a44 <__swhatbuf_r>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	460e      	mov	r6, r1
 8009a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	b096      	sub	sp, #88	; 0x58
 8009a50:	4614      	mov	r4, r2
 8009a52:	461d      	mov	r5, r3
 8009a54:	da09      	bge.n	8009a6a <__swhatbuf_r+0x26>
 8009a56:	89b3      	ldrh	r3, [r6, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	d116      	bne.n	8009a90 <__swhatbuf_r+0x4c>
 8009a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a66:	6023      	str	r3, [r4, #0]
 8009a68:	e015      	b.n	8009a96 <__swhatbuf_r+0x52>
 8009a6a:	466a      	mov	r2, sp
 8009a6c:	f002 fe68 	bl	800c740 <_fstat_r>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	dbf0      	blt.n	8009a56 <__swhatbuf_r+0x12>
 8009a74:	9a01      	ldr	r2, [sp, #4]
 8009a76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a7e:	425a      	negs	r2, r3
 8009a80:	415a      	adcs	r2, r3
 8009a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a86:	602a      	str	r2, [r5, #0]
 8009a88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	e002      	b.n	8009a96 <__swhatbuf_r+0x52>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	4610      	mov	r0, r2
 8009a96:	b016      	add	sp, #88	; 0x58
 8009a98:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a9c <__smakebuf_r>:
 8009a9c:	898b      	ldrh	r3, [r1, #12]
 8009a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aa0:	079d      	lsls	r5, r3, #30
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	d507      	bpl.n	8009ab8 <__smakebuf_r+0x1c>
 8009aa8:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	6163      	str	r3, [r4, #20]
 8009ab4:	b002      	add	sp, #8
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	ab01      	add	r3, sp, #4
 8009aba:	466a      	mov	r2, sp
 8009abc:	f7ff ffc2 	bl	8009a44 <__swhatbuf_r>
 8009ac0:	9900      	ldr	r1, [sp, #0]
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f839 	bl	8009b3c <_malloc_r>
 8009aca:	b948      	cbnz	r0, 8009ae0 <__smakebuf_r+0x44>
 8009acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ad0:	059a      	lsls	r2, r3, #22
 8009ad2:	d4ef      	bmi.n	8009ab4 <__smakebuf_r+0x18>
 8009ad4:	f023 0303 	bic.w	r3, r3, #3
 8009ad8:	f043 0302 	orr.w	r3, r3, #2
 8009adc:	81a3      	strh	r3, [r4, #12]
 8009ade:	e7e3      	b.n	8009aa8 <__smakebuf_r+0xc>
 8009ae0:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <__smakebuf_r+0x7c>)
 8009ae2:	63f3      	str	r3, [r6, #60]	; 0x3c
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	6020      	str	r0, [r4, #0]
 8009ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aec:	81a3      	strh	r3, [r4, #12]
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	6163      	str	r3, [r4, #20]
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	6120      	str	r0, [r4, #16]
 8009af6:	b15b      	cbz	r3, 8009b10 <__smakebuf_r+0x74>
 8009af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009afc:	4630      	mov	r0, r6
 8009afe:	f002 ff7b 	bl	800c9f8 <_isatty_r>
 8009b02:	b128      	cbz	r0, 8009b10 <__smakebuf_r+0x74>
 8009b04:	89a3      	ldrh	r3, [r4, #12]
 8009b06:	f023 0303 	bic.w	r3, r3, #3
 8009b0a:	f043 0301 	orr.w	r3, r3, #1
 8009b0e:	81a3      	strh	r3, [r4, #12]
 8009b10:	89a0      	ldrh	r0, [r4, #12]
 8009b12:	4305      	orrs	r5, r0
 8009b14:	81a5      	strh	r5, [r4, #12]
 8009b16:	e7cd      	b.n	8009ab4 <__smakebuf_r+0x18>
 8009b18:	08009689 	.word	0x08009689

08009b1c <malloc>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <malloc+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f000 b80b 	b.w	8009b3c <_malloc_r>
 8009b26:	bf00      	nop
 8009b28:	20000018 	.word	0x20000018

08009b2c <free>:
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <free+0xc>)
 8009b2e:	4601      	mov	r1, r0
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	f7ff be57 	b.w	80097e4 <_free_r>
 8009b36:	bf00      	nop
 8009b38:	20000018 	.word	0x20000018

08009b3c <_malloc_r>:
 8009b3c:	f101 030b 	add.w	r3, r1, #11
 8009b40:	2b16      	cmp	r3, #22
 8009b42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	d906      	bls.n	8009b58 <_malloc_r+0x1c>
 8009b4a:	f033 0707 	bics.w	r7, r3, #7
 8009b4e:	d504      	bpl.n	8009b5a <_malloc_r+0x1e>
 8009b50:	230c      	movs	r3, #12
 8009b52:	602b      	str	r3, [r5, #0]
 8009b54:	2400      	movs	r4, #0
 8009b56:	e1ae      	b.n	8009eb6 <_malloc_r+0x37a>
 8009b58:	2710      	movs	r7, #16
 8009b5a:	42b9      	cmp	r1, r7
 8009b5c:	d8f8      	bhi.n	8009b50 <_malloc_r+0x14>
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f000 fa3c 	bl	8009fdc <__malloc_lock>
 8009b64:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009b68:	4ec3      	ldr	r6, [pc, #780]	; (8009e78 <_malloc_r+0x33c>)
 8009b6a:	d238      	bcs.n	8009bde <_malloc_r+0xa2>
 8009b6c:	f107 0208 	add.w	r2, r7, #8
 8009b70:	4432      	add	r2, r6
 8009b72:	f1a2 0108 	sub.w	r1, r2, #8
 8009b76:	6854      	ldr	r4, [r2, #4]
 8009b78:	428c      	cmp	r4, r1
 8009b7a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009b7e:	d102      	bne.n	8009b86 <_malloc_r+0x4a>
 8009b80:	68d4      	ldr	r4, [r2, #12]
 8009b82:	42a2      	cmp	r2, r4
 8009b84:	d010      	beq.n	8009ba8 <_malloc_r+0x6c>
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	60ca      	str	r2, [r1, #12]
 8009b92:	4423      	add	r3, r4
 8009b94:	6091      	str	r1, [r2, #8]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	f042 0201 	orr.w	r2, r2, #1
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 fa22 	bl	8009fe8 <__malloc_unlock>
 8009ba4:	3408      	adds	r4, #8
 8009ba6:	e186      	b.n	8009eb6 <_malloc_r+0x37a>
 8009ba8:	3302      	adds	r3, #2
 8009baa:	4ab4      	ldr	r2, [pc, #720]	; (8009e7c <_malloc_r+0x340>)
 8009bac:	6934      	ldr	r4, [r6, #16]
 8009bae:	4294      	cmp	r4, r2
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	d077      	beq.n	8009ca4 <_malloc_r+0x168>
 8009bb4:	6860      	ldr	r0, [r4, #4]
 8009bb6:	f020 0c03 	bic.w	ip, r0, #3
 8009bba:	ebac 0007 	sub.w	r0, ip, r7
 8009bbe:	280f      	cmp	r0, #15
 8009bc0:	dd48      	ble.n	8009c54 <_malloc_r+0x118>
 8009bc2:	19e1      	adds	r1, r4, r7
 8009bc4:	f040 0301 	orr.w	r3, r0, #1
 8009bc8:	f047 0701 	orr.w	r7, r7, #1
 8009bcc:	6067      	str	r7, [r4, #4]
 8009bce:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009bd2:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8009bd6:	604b      	str	r3, [r1, #4]
 8009bd8:	f844 000c 	str.w	r0, [r4, ip]
 8009bdc:	e7df      	b.n	8009b9e <_malloc_r+0x62>
 8009bde:	0a7b      	lsrs	r3, r7, #9
 8009be0:	d02a      	beq.n	8009c38 <_malloc_r+0xfc>
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d812      	bhi.n	8009c0c <_malloc_r+0xd0>
 8009be6:	09bb      	lsrs	r3, r7, #6
 8009be8:	3338      	adds	r3, #56	; 0x38
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009bf0:	f1a2 0c08 	sub.w	ip, r2, #8
 8009bf4:	6854      	ldr	r4, [r2, #4]
 8009bf6:	4564      	cmp	r4, ip
 8009bf8:	d006      	beq.n	8009c08 <_malloc_r+0xcc>
 8009bfa:	6862      	ldr	r2, [r4, #4]
 8009bfc:	f022 0203 	bic.w	r2, r2, #3
 8009c00:	1bd0      	subs	r0, r2, r7
 8009c02:	280f      	cmp	r0, #15
 8009c04:	dd1c      	ble.n	8009c40 <_malloc_r+0x104>
 8009c06:	3b01      	subs	r3, #1
 8009c08:	3301      	adds	r3, #1
 8009c0a:	e7ce      	b.n	8009baa <_malloc_r+0x6e>
 8009c0c:	2b14      	cmp	r3, #20
 8009c0e:	d801      	bhi.n	8009c14 <_malloc_r+0xd8>
 8009c10:	335b      	adds	r3, #91	; 0x5b
 8009c12:	e7ea      	b.n	8009bea <_malloc_r+0xae>
 8009c14:	2b54      	cmp	r3, #84	; 0x54
 8009c16:	d802      	bhi.n	8009c1e <_malloc_r+0xe2>
 8009c18:	0b3b      	lsrs	r3, r7, #12
 8009c1a:	336e      	adds	r3, #110	; 0x6e
 8009c1c:	e7e5      	b.n	8009bea <_malloc_r+0xae>
 8009c1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009c22:	d802      	bhi.n	8009c2a <_malloc_r+0xee>
 8009c24:	0bfb      	lsrs	r3, r7, #15
 8009c26:	3377      	adds	r3, #119	; 0x77
 8009c28:	e7df      	b.n	8009bea <_malloc_r+0xae>
 8009c2a:	f240 5254 	movw	r2, #1364	; 0x554
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d804      	bhi.n	8009c3c <_malloc_r+0x100>
 8009c32:	0cbb      	lsrs	r3, r7, #18
 8009c34:	337c      	adds	r3, #124	; 0x7c
 8009c36:	e7d8      	b.n	8009bea <_malloc_r+0xae>
 8009c38:	233f      	movs	r3, #63	; 0x3f
 8009c3a:	e7d6      	b.n	8009bea <_malloc_r+0xae>
 8009c3c:	237e      	movs	r3, #126	; 0x7e
 8009c3e:	e7d4      	b.n	8009bea <_malloc_r+0xae>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	68e1      	ldr	r1, [r4, #12]
 8009c44:	db04      	blt.n	8009c50 <_malloc_r+0x114>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	60d9      	str	r1, [r3, #12]
 8009c4a:	608b      	str	r3, [r1, #8]
 8009c4c:	18a3      	adds	r3, r4, r2
 8009c4e:	e7a2      	b.n	8009b96 <_malloc_r+0x5a>
 8009c50:	460c      	mov	r4, r1
 8009c52:	e7d0      	b.n	8009bf6 <_malloc_r+0xba>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009c5a:	db07      	blt.n	8009c6c <_malloc_r+0x130>
 8009c5c:	44a4      	add	ip, r4
 8009c5e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009c62:	f043 0301 	orr.w	r3, r3, #1
 8009c66:	f8cc 3004 	str.w	r3, [ip, #4]
 8009c6a:	e798      	b.n	8009b9e <_malloc_r+0x62>
 8009c6c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009c70:	6870      	ldr	r0, [r6, #4]
 8009c72:	f080 809e 	bcs.w	8009db2 <_malloc_r+0x276>
 8009c76:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009c7a:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009c7e:	f04f 0c01 	mov.w	ip, #1
 8009c82:	3201      	adds	r2, #1
 8009c84:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009c88:	ea4c 0000 	orr.w	r0, ip, r0
 8009c8c:	6070      	str	r0, [r6, #4]
 8009c8e:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009c92:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009c96:	3808      	subs	r0, #8
 8009c98:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009c9c:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009ca0:	f8cc 400c 	str.w	r4, [ip, #12]
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	109a      	asrs	r2, r3, #2
 8009ca8:	fa00 f202 	lsl.w	r2, r0, r2
 8009cac:	6870      	ldr	r0, [r6, #4]
 8009cae:	4290      	cmp	r0, r2
 8009cb0:	d326      	bcc.n	8009d00 <_malloc_r+0x1c4>
 8009cb2:	4210      	tst	r0, r2
 8009cb4:	d106      	bne.n	8009cc4 <_malloc_r+0x188>
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	0052      	lsls	r2, r2, #1
 8009cbc:	4210      	tst	r0, r2
 8009cbe:	f103 0304 	add.w	r3, r3, #4
 8009cc2:	d0fa      	beq.n	8009cba <_malloc_r+0x17e>
 8009cc4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009cc8:	46c1      	mov	r9, r8
 8009cca:	469e      	mov	lr, r3
 8009ccc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009cd0:	454c      	cmp	r4, r9
 8009cd2:	f040 80b3 	bne.w	8009e3c <_malloc_r+0x300>
 8009cd6:	f10e 0e01 	add.w	lr, lr, #1
 8009cda:	f01e 0f03 	tst.w	lr, #3
 8009cde:	f109 0908 	add.w	r9, r9, #8
 8009ce2:	d1f3      	bne.n	8009ccc <_malloc_r+0x190>
 8009ce4:	0798      	lsls	r0, r3, #30
 8009ce6:	f040 80ec 	bne.w	8009ec2 <_malloc_r+0x386>
 8009cea:	6873      	ldr	r3, [r6, #4]
 8009cec:	ea23 0302 	bic.w	r3, r3, r2
 8009cf0:	6073      	str	r3, [r6, #4]
 8009cf2:	6870      	ldr	r0, [r6, #4]
 8009cf4:	0052      	lsls	r2, r2, #1
 8009cf6:	4290      	cmp	r0, r2
 8009cf8:	d302      	bcc.n	8009d00 <_malloc_r+0x1c4>
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	f040 80ee 	bne.w	8009edc <_malloc_r+0x3a0>
 8009d00:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8009d04:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009d08:	f021 0903 	bic.w	r9, r1, #3
 8009d0c:	45b9      	cmp	r9, r7
 8009d0e:	d304      	bcc.n	8009d1a <_malloc_r+0x1de>
 8009d10:	eba9 0207 	sub.w	r2, r9, r7
 8009d14:	2a0f      	cmp	r2, #15
 8009d16:	f300 8149 	bgt.w	8009fac <_malloc_r+0x470>
 8009d1a:	4a59      	ldr	r2, [pc, #356]	; (8009e80 <_malloc_r+0x344>)
 8009d1c:	6811      	ldr	r1, [r2, #0]
 8009d1e:	3110      	adds	r1, #16
 8009d20:	eb0b 0309 	add.w	r3, fp, r9
 8009d24:	4439      	add	r1, r7
 8009d26:	2008      	movs	r0, #8
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	9100      	str	r1, [sp, #0]
 8009d2c:	f001 fe36 	bl	800b99c <sysconf>
 8009d30:	4a54      	ldr	r2, [pc, #336]	; (8009e84 <_malloc_r+0x348>)
 8009d32:	e9dd 1300 	ldrd	r1, r3, [sp]
 8009d36:	4680      	mov	r8, r0
 8009d38:	6810      	ldr	r0, [r2, #0]
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	bf1f      	itttt	ne
 8009d3e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8009d42:	4441      	addne	r1, r8
 8009d44:	f1c8 0000 	rsbne	r0, r8, #0
 8009d48:	4001      	andne	r1, r0
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e9cd 1300 	strd	r1, r3, [sp]
 8009d50:	f000 fcb8 	bl	800a6c4 <_sbrk_r>
 8009d54:	1c42      	adds	r2, r0, #1
 8009d56:	4604      	mov	r4, r0
 8009d58:	f000 80fc 	beq.w	8009f54 <_malloc_r+0x418>
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	9900      	ldr	r1, [sp, #0]
 8009d60:	4a48      	ldr	r2, [pc, #288]	; (8009e84 <_malloc_r+0x348>)
 8009d62:	4283      	cmp	r3, r0
 8009d64:	d902      	bls.n	8009d6c <_malloc_r+0x230>
 8009d66:	45b3      	cmp	fp, r6
 8009d68:	f040 80f4 	bne.w	8009f54 <_malloc_r+0x418>
 8009d6c:	f8df a120 	ldr.w	sl, [pc, #288]	; 8009e90 <_malloc_r+0x354>
 8009d70:	f8da 0000 	ldr.w	r0, [sl]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	eb00 0e01 	add.w	lr, r0, r1
 8009d7a:	f8ca e000 	str.w	lr, [sl]
 8009d7e:	f108 3cff 	add.w	ip, r8, #4294967295
 8009d82:	f040 80ad 	bne.w	8009ee0 <_malloc_r+0x3a4>
 8009d86:	ea13 0f0c 	tst.w	r3, ip
 8009d8a:	f040 80a9 	bne.w	8009ee0 <_malloc_r+0x3a4>
 8009d8e:	68b3      	ldr	r3, [r6, #8]
 8009d90:	4449      	add	r1, r9
 8009d92:	f041 0101 	orr.w	r1, r1, #1
 8009d96:	6059      	str	r1, [r3, #4]
 8009d98:	4a3b      	ldr	r2, [pc, #236]	; (8009e88 <_malloc_r+0x34c>)
 8009d9a:	f8da 3000 	ldr.w	r3, [sl]
 8009d9e:	6811      	ldr	r1, [r2, #0]
 8009da0:	428b      	cmp	r3, r1
 8009da2:	bf88      	it	hi
 8009da4:	6013      	strhi	r3, [r2, #0]
 8009da6:	4a39      	ldr	r2, [pc, #228]	; (8009e8c <_malloc_r+0x350>)
 8009da8:	6811      	ldr	r1, [r2, #0]
 8009daa:	428b      	cmp	r3, r1
 8009dac:	bf88      	it	hi
 8009dae:	6013      	strhi	r3, [r2, #0]
 8009db0:	e0d0      	b.n	8009f54 <_malloc_r+0x418>
 8009db2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009db6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009dba:	d218      	bcs.n	8009dee <_malloc_r+0x2b2>
 8009dbc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009dc0:	3238      	adds	r2, #56	; 0x38
 8009dc2:	f102 0e01 	add.w	lr, r2, #1
 8009dc6:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009dca:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009dce:	45f0      	cmp	r8, lr
 8009dd0:	d12b      	bne.n	8009e2a <_malloc_r+0x2ee>
 8009dd2:	1092      	asrs	r2, r2, #2
 8009dd4:	f04f 0c01 	mov.w	ip, #1
 8009dd8:	fa0c f202 	lsl.w	r2, ip, r2
 8009ddc:	4310      	orrs	r0, r2
 8009dde:	6070      	str	r0, [r6, #4]
 8009de0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009de4:	f8c8 4008 	str.w	r4, [r8, #8]
 8009de8:	f8ce 400c 	str.w	r4, [lr, #12]
 8009dec:	e75a      	b.n	8009ca4 <_malloc_r+0x168>
 8009dee:	2a14      	cmp	r2, #20
 8009df0:	d801      	bhi.n	8009df6 <_malloc_r+0x2ba>
 8009df2:	325b      	adds	r2, #91	; 0x5b
 8009df4:	e7e5      	b.n	8009dc2 <_malloc_r+0x286>
 8009df6:	2a54      	cmp	r2, #84	; 0x54
 8009df8:	d803      	bhi.n	8009e02 <_malloc_r+0x2c6>
 8009dfa:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009dfe:	326e      	adds	r2, #110	; 0x6e
 8009e00:	e7df      	b.n	8009dc2 <_malloc_r+0x286>
 8009e02:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009e06:	d803      	bhi.n	8009e10 <_malloc_r+0x2d4>
 8009e08:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009e0c:	3277      	adds	r2, #119	; 0x77
 8009e0e:	e7d8      	b.n	8009dc2 <_malloc_r+0x286>
 8009e10:	f240 5e54 	movw	lr, #1364	; 0x554
 8009e14:	4572      	cmp	r2, lr
 8009e16:	bf9a      	itte	ls
 8009e18:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009e1c:	327c      	addls	r2, #124	; 0x7c
 8009e1e:	227e      	movhi	r2, #126	; 0x7e
 8009e20:	e7cf      	b.n	8009dc2 <_malloc_r+0x286>
 8009e22:	f8de e008 	ldr.w	lr, [lr, #8]
 8009e26:	45f0      	cmp	r8, lr
 8009e28:	d005      	beq.n	8009e36 <_malloc_r+0x2fa>
 8009e2a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009e2e:	f022 0203 	bic.w	r2, r2, #3
 8009e32:	4562      	cmp	r2, ip
 8009e34:	d8f5      	bhi.n	8009e22 <_malloc_r+0x2e6>
 8009e36:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009e3a:	e7d1      	b.n	8009de0 <_malloc_r+0x2a4>
 8009e3c:	6860      	ldr	r0, [r4, #4]
 8009e3e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009e42:	f020 0003 	bic.w	r0, r0, #3
 8009e46:	eba0 0a07 	sub.w	sl, r0, r7
 8009e4a:	f1ba 0f0f 	cmp.w	sl, #15
 8009e4e:	dd21      	ble.n	8009e94 <_malloc_r+0x358>
 8009e50:	68a3      	ldr	r3, [r4, #8]
 8009e52:	19e2      	adds	r2, r4, r7
 8009e54:	f047 0701 	orr.w	r7, r7, #1
 8009e58:	6067      	str	r7, [r4, #4]
 8009e5a:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009e5e:	f8cc 3008 	str.w	r3, [ip, #8]
 8009e62:	f04a 0301 	orr.w	r3, sl, #1
 8009e66:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009e6a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009e6e:	6053      	str	r3, [r2, #4]
 8009e70:	f844 a000 	str.w	sl, [r4, r0]
 8009e74:	e693      	b.n	8009b9e <_malloc_r+0x62>
 8009e76:	bf00      	nop
 8009e78:	200004b0 	.word	0x200004b0
 8009e7c:	200004b8 	.word	0x200004b8
 8009e80:	20000aec 	.word	0x20000aec
 8009e84:	200008b8 	.word	0x200008b8
 8009e88:	20000ae4 	.word	0x20000ae4
 8009e8c:	20000ae8 	.word	0x20000ae8
 8009e90:	20000abc 	.word	0x20000abc
 8009e94:	f1ba 0f00 	cmp.w	sl, #0
 8009e98:	db11      	blt.n	8009ebe <_malloc_r+0x382>
 8009e9a:	4420      	add	r0, r4
 8009e9c:	6843      	ldr	r3, [r0, #4]
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	6043      	str	r3, [r0, #4]
 8009ea4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009eae:	f8cc 3008 	str.w	r3, [ip, #8]
 8009eb2:	f000 f899 	bl	8009fe8 <__malloc_unlock>
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	b003      	add	sp, #12
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	4664      	mov	r4, ip
 8009ec0:	e706      	b.n	8009cd0 <_malloc_r+0x194>
 8009ec2:	f858 0908 	ldr.w	r0, [r8], #-8
 8009ec6:	4540      	cmp	r0, r8
 8009ec8:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ecc:	f43f af0a 	beq.w	8009ce4 <_malloc_r+0x1a8>
 8009ed0:	e70f      	b.n	8009cf2 <_malloc_r+0x1b6>
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	0052      	lsls	r2, r2, #1
 8009ed6:	4210      	tst	r0, r2
 8009ed8:	d0fb      	beq.n	8009ed2 <_malloc_r+0x396>
 8009eda:	e6f3      	b.n	8009cc4 <_malloc_r+0x188>
 8009edc:	4673      	mov	r3, lr
 8009ede:	e7fa      	b.n	8009ed6 <_malloc_r+0x39a>
 8009ee0:	6810      	ldr	r0, [r2, #0]
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	bf1b      	ittet	ne
 8009ee6:	1ae3      	subne	r3, r4, r3
 8009ee8:	4473      	addne	r3, lr
 8009eea:	6014      	streq	r4, [r2, #0]
 8009eec:	f8ca 3000 	strne.w	r3, [sl]
 8009ef0:	f014 0307 	ands.w	r3, r4, #7
 8009ef4:	bf1a      	itte	ne
 8009ef6:	f1c3 0008 	rsbne	r0, r3, #8
 8009efa:	1824      	addne	r4, r4, r0
 8009efc:	4618      	moveq	r0, r3
 8009efe:	1862      	adds	r2, r4, r1
 8009f00:	ea02 010c 	and.w	r1, r2, ip
 8009f04:	4480      	add	r8, r0
 8009f06:	eba8 0801 	sub.w	r8, r8, r1
 8009f0a:	ea08 080c 	and.w	r8, r8, ip
 8009f0e:	4641      	mov	r1, r8
 8009f10:	4628      	mov	r0, r5
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	9200      	str	r2, [sp, #0]
 8009f16:	f000 fbd5 	bl	800a6c4 <_sbrk_r>
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f20:	d105      	bne.n	8009f2e <_malloc_r+0x3f2>
 8009f22:	b32b      	cbz	r3, 8009f70 <_malloc_r+0x434>
 8009f24:	f1a3 0008 	sub.w	r0, r3, #8
 8009f28:	4410      	add	r0, r2
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	f8da 2000 	ldr.w	r2, [sl]
 8009f32:	60b4      	str	r4, [r6, #8]
 8009f34:	1b00      	subs	r0, r0, r4
 8009f36:	4440      	add	r0, r8
 8009f38:	4442      	add	r2, r8
 8009f3a:	f040 0001 	orr.w	r0, r0, #1
 8009f3e:	45b3      	cmp	fp, r6
 8009f40:	f8ca 2000 	str.w	r2, [sl]
 8009f44:	6060      	str	r0, [r4, #4]
 8009f46:	f43f af27 	beq.w	8009d98 <_malloc_r+0x25c>
 8009f4a:	f1b9 0f0f 	cmp.w	r9, #15
 8009f4e:	d812      	bhi.n	8009f76 <_malloc_r+0x43a>
 8009f50:	2301      	movs	r3, #1
 8009f52:	6063      	str	r3, [r4, #4]
 8009f54:	68b3      	ldr	r3, [r6, #8]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f023 0303 	bic.w	r3, r3, #3
 8009f5c:	42bb      	cmp	r3, r7
 8009f5e:	eba3 0207 	sub.w	r2, r3, r7
 8009f62:	d301      	bcc.n	8009f68 <_malloc_r+0x42c>
 8009f64:	2a0f      	cmp	r2, #15
 8009f66:	dc21      	bgt.n	8009fac <_malloc_r+0x470>
 8009f68:	4628      	mov	r0, r5
 8009f6a:	f000 f83d 	bl	8009fe8 <__malloc_unlock>
 8009f6e:	e5f1      	b.n	8009b54 <_malloc_r+0x18>
 8009f70:	4610      	mov	r0, r2
 8009f72:	4698      	mov	r8, r3
 8009f74:	e7db      	b.n	8009f2e <_malloc_r+0x3f2>
 8009f76:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009f7a:	f1a9 090c 	sub.w	r9, r9, #12
 8009f7e:	f029 0907 	bic.w	r9, r9, #7
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	ea43 0309 	orr.w	r3, r3, r9
 8009f8a:	f8cb 3004 	str.w	r3, [fp, #4]
 8009f8e:	2205      	movs	r2, #5
 8009f90:	eb0b 0309 	add.w	r3, fp, r9
 8009f94:	f1b9 0f0f 	cmp.w	r9, #15
 8009f98:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8009f9c:	f67f aefc 	bls.w	8009d98 <_malloc_r+0x25c>
 8009fa0:	f10b 0108 	add.w	r1, fp, #8
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7ff fc1d 	bl	80097e4 <_free_r>
 8009faa:	e6f5      	b.n	8009d98 <_malloc_r+0x25c>
 8009fac:	68b4      	ldr	r4, [r6, #8]
 8009fae:	f047 0301 	orr.w	r3, r7, #1
 8009fb2:	4427      	add	r7, r4
 8009fb4:	f042 0201 	orr.w	r2, r2, #1
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	60b7      	str	r7, [r6, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	e5ee      	b.n	8009b9e <_malloc_r+0x62>

08009fc0 <memcpy>:
 8009fc0:	440a      	add	r2, r1
 8009fc2:	4291      	cmp	r1, r2
 8009fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fc8:	d100      	bne.n	8009fcc <memcpy+0xc>
 8009fca:	4770      	bx	lr
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fd6:	4291      	cmp	r1, r2
 8009fd8:	d1f9      	bne.n	8009fce <memcpy+0xe>
 8009fda:	bd10      	pop	{r4, pc}

08009fdc <__malloc_lock>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__malloc_lock+0x8>)
 8009fde:	f7ff bd2e 	b.w	8009a3e <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	20000ca8 	.word	0x20000ca8

08009fe8 <__malloc_unlock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_unlock+0x8>)
 8009fea:	f7ff bd2a 	b.w	8009a42 <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	20000ca8 	.word	0x20000ca8

08009ff4 <_Balloc>:
 8009ff4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009ff6:	b570      	push	{r4, r5, r6, lr}
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	b17b      	cbz	r3, 800a01e <_Balloc+0x2a>
 8009ffe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a000:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a004:	b9a0      	cbnz	r0, 800a030 <_Balloc+0x3c>
 800a006:	2101      	movs	r1, #1
 800a008:	fa01 f604 	lsl.w	r6, r1, r4
 800a00c:	1d72      	adds	r2, r6, #5
 800a00e:	0092      	lsls	r2, r2, #2
 800a010:	4628      	mov	r0, r5
 800a012:	f002 fa75 	bl	800c500 <_calloc_r>
 800a016:	b148      	cbz	r0, 800a02c <_Balloc+0x38>
 800a018:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a01c:	e00b      	b.n	800a036 <_Balloc+0x42>
 800a01e:	2221      	movs	r2, #33	; 0x21
 800a020:	2104      	movs	r1, #4
 800a022:	f002 fa6d 	bl	800c500 <_calloc_r>
 800a026:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1e8      	bne.n	8009ffe <_Balloc+0xa>
 800a02c:	2000      	movs	r0, #0
 800a02e:	bd70      	pop	{r4, r5, r6, pc}
 800a030:	6802      	ldr	r2, [r0, #0]
 800a032:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a036:	2300      	movs	r3, #0
 800a038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a03c:	e7f7      	b.n	800a02e <_Balloc+0x3a>

0800a03e <_Bfree>:
 800a03e:	b131      	cbz	r1, 800a04e <_Bfree+0x10>
 800a040:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a042:	684a      	ldr	r2, [r1, #4]
 800a044:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a048:	6008      	str	r0, [r1, #0]
 800a04a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a04e:	4770      	bx	lr

0800a050 <__multadd>:
 800a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a054:	690e      	ldr	r6, [r1, #16]
 800a056:	4607      	mov	r7, r0
 800a058:	4698      	mov	r8, r3
 800a05a:	460c      	mov	r4, r1
 800a05c:	f101 0014 	add.w	r0, r1, #20
 800a060:	2300      	movs	r3, #0
 800a062:	6805      	ldr	r5, [r0, #0]
 800a064:	b2a9      	uxth	r1, r5
 800a066:	fb02 8101 	mla	r1, r2, r1, r8
 800a06a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a06e:	0c2d      	lsrs	r5, r5, #16
 800a070:	fb02 c505 	mla	r5, r2, r5, ip
 800a074:	b289      	uxth	r1, r1
 800a076:	3301      	adds	r3, #1
 800a078:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a07c:	429e      	cmp	r6, r3
 800a07e:	f840 1b04 	str.w	r1, [r0], #4
 800a082:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a086:	dcec      	bgt.n	800a062 <__multadd+0x12>
 800a088:	f1b8 0f00 	cmp.w	r8, #0
 800a08c:	d022      	beq.n	800a0d4 <__multadd+0x84>
 800a08e:	68a3      	ldr	r3, [r4, #8]
 800a090:	42b3      	cmp	r3, r6
 800a092:	dc19      	bgt.n	800a0c8 <__multadd+0x78>
 800a094:	6861      	ldr	r1, [r4, #4]
 800a096:	4638      	mov	r0, r7
 800a098:	3101      	adds	r1, #1
 800a09a:	f7ff ffab 	bl	8009ff4 <_Balloc>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b928      	cbnz	r0, 800a0ae <__multadd+0x5e>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b0d      	ldr	r3, [pc, #52]	; (800a0dc <__multadd+0x8c>)
 800a0a6:	480e      	ldr	r0, [pc, #56]	; (800a0e0 <__multadd+0x90>)
 800a0a8:	21b5      	movs	r1, #181	; 0xb5
 800a0aa:	f002 fa0b 	bl	800c4c4 <__assert_func>
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	3202      	adds	r2, #2
 800a0b2:	f104 010c 	add.w	r1, r4, #12
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f7ff ff81 	bl	8009fc0 <memcpy>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ffbc 	bl	800a03e <_Bfree>
 800a0c6:	462c      	mov	r4, r5
 800a0c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a0cc:	3601      	adds	r6, #1
 800a0ce:	f8c3 8014 	str.w	r8, [r3, #20]
 800a0d2:	6126      	str	r6, [r4, #16]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800e536 	.word	0x0800e536
 800a0e0:	0800e608 	.word	0x0800e608

0800a0e4 <__hi0bits>:
 800a0e4:	0c03      	lsrs	r3, r0, #16
 800a0e6:	041b      	lsls	r3, r3, #16
 800a0e8:	b9d3      	cbnz	r3, 800a120 <__hi0bits+0x3c>
 800a0ea:	0400      	lsls	r0, r0, #16
 800a0ec:	2310      	movs	r3, #16
 800a0ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0f2:	bf04      	itt	eq
 800a0f4:	0200      	lsleq	r0, r0, #8
 800a0f6:	3308      	addeq	r3, #8
 800a0f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a0fc:	bf04      	itt	eq
 800a0fe:	0100      	lsleq	r0, r0, #4
 800a100:	3304      	addeq	r3, #4
 800a102:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a106:	bf04      	itt	eq
 800a108:	0080      	lsleq	r0, r0, #2
 800a10a:	3302      	addeq	r3, #2
 800a10c:	2800      	cmp	r0, #0
 800a10e:	db05      	blt.n	800a11c <__hi0bits+0x38>
 800a110:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a114:	f103 0301 	add.w	r3, r3, #1
 800a118:	bf08      	it	eq
 800a11a:	2320      	moveq	r3, #32
 800a11c:	4618      	mov	r0, r3
 800a11e:	4770      	bx	lr
 800a120:	2300      	movs	r3, #0
 800a122:	e7e4      	b.n	800a0ee <__hi0bits+0xa>

0800a124 <__lo0bits>:
 800a124:	6803      	ldr	r3, [r0, #0]
 800a126:	f013 0207 	ands.w	r2, r3, #7
 800a12a:	4601      	mov	r1, r0
 800a12c:	d00b      	beq.n	800a146 <__lo0bits+0x22>
 800a12e:	07da      	lsls	r2, r3, #31
 800a130:	d424      	bmi.n	800a17c <__lo0bits+0x58>
 800a132:	0798      	lsls	r0, r3, #30
 800a134:	bf49      	itett	mi
 800a136:	085b      	lsrmi	r3, r3, #1
 800a138:	089b      	lsrpl	r3, r3, #2
 800a13a:	2001      	movmi	r0, #1
 800a13c:	600b      	strmi	r3, [r1, #0]
 800a13e:	bf5c      	itt	pl
 800a140:	600b      	strpl	r3, [r1, #0]
 800a142:	2002      	movpl	r0, #2
 800a144:	4770      	bx	lr
 800a146:	b298      	uxth	r0, r3
 800a148:	b9b0      	cbnz	r0, 800a178 <__lo0bits+0x54>
 800a14a:	0c1b      	lsrs	r3, r3, #16
 800a14c:	2010      	movs	r0, #16
 800a14e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a152:	bf04      	itt	eq
 800a154:	0a1b      	lsreq	r3, r3, #8
 800a156:	3008      	addeq	r0, #8
 800a158:	071a      	lsls	r2, r3, #28
 800a15a:	bf04      	itt	eq
 800a15c:	091b      	lsreq	r3, r3, #4
 800a15e:	3004      	addeq	r0, #4
 800a160:	079a      	lsls	r2, r3, #30
 800a162:	bf04      	itt	eq
 800a164:	089b      	lsreq	r3, r3, #2
 800a166:	3002      	addeq	r0, #2
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	d403      	bmi.n	800a174 <__lo0bits+0x50>
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	f100 0001 	add.w	r0, r0, #1
 800a172:	d005      	beq.n	800a180 <__lo0bits+0x5c>
 800a174:	600b      	str	r3, [r1, #0]
 800a176:	4770      	bx	lr
 800a178:	4610      	mov	r0, r2
 800a17a:	e7e8      	b.n	800a14e <__lo0bits+0x2a>
 800a17c:	2000      	movs	r0, #0
 800a17e:	4770      	bx	lr
 800a180:	2020      	movs	r0, #32
 800a182:	4770      	bx	lr

0800a184 <__i2b>:
 800a184:	b510      	push	{r4, lr}
 800a186:	460c      	mov	r4, r1
 800a188:	2101      	movs	r1, #1
 800a18a:	f7ff ff33 	bl	8009ff4 <_Balloc>
 800a18e:	4602      	mov	r2, r0
 800a190:	b928      	cbnz	r0, 800a19e <__i2b+0x1a>
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <__i2b+0x24>)
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <__i2b+0x28>)
 800a196:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a19a:	f002 f993 	bl	800c4c4 <__assert_func>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	6144      	str	r4, [r0, #20]
 800a1a2:	6103      	str	r3, [r0, #16]
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	bf00      	nop
 800a1a8:	0800e536 	.word	0x0800e536
 800a1ac:	0800e608 	.word	0x0800e608

0800a1b0 <__multiply>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	4614      	mov	r4, r2
 800a1b6:	690a      	ldr	r2, [r1, #16]
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	bfb8      	it	lt
 800a1be:	460b      	movlt	r3, r1
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	bfbc      	itt	lt
 800a1c4:	4625      	movlt	r5, r4
 800a1c6:	461c      	movlt	r4, r3
 800a1c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a1cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1d0:	68ab      	ldr	r3, [r5, #8]
 800a1d2:	6869      	ldr	r1, [r5, #4]
 800a1d4:	eb0a 0709 	add.w	r7, sl, r9
 800a1d8:	42bb      	cmp	r3, r7
 800a1da:	b085      	sub	sp, #20
 800a1dc:	bfb8      	it	lt
 800a1de:	3101      	addlt	r1, #1
 800a1e0:	f7ff ff08 	bl	8009ff4 <_Balloc>
 800a1e4:	b930      	cbnz	r0, 800a1f4 <__multiply+0x44>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4b42      	ldr	r3, [pc, #264]	; (800a2f4 <__multiply+0x144>)
 800a1ea:	4843      	ldr	r0, [pc, #268]	; (800a2f8 <__multiply+0x148>)
 800a1ec:	f240 115d 	movw	r1, #349	; 0x15d
 800a1f0:	f002 f968 	bl	800c4c4 <__assert_func>
 800a1f4:	f100 0614 	add.w	r6, r0, #20
 800a1f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a1fc:	4633      	mov	r3, r6
 800a1fe:	2200      	movs	r2, #0
 800a200:	4543      	cmp	r3, r8
 800a202:	d31e      	bcc.n	800a242 <__multiply+0x92>
 800a204:	f105 0c14 	add.w	ip, r5, #20
 800a208:	f104 0314 	add.w	r3, r4, #20
 800a20c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a210:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a214:	9202      	str	r2, [sp, #8]
 800a216:	ebac 0205 	sub.w	r2, ip, r5
 800a21a:	3a15      	subs	r2, #21
 800a21c:	f022 0203 	bic.w	r2, r2, #3
 800a220:	3204      	adds	r2, #4
 800a222:	f105 0115 	add.w	r1, r5, #21
 800a226:	458c      	cmp	ip, r1
 800a228:	bf38      	it	cc
 800a22a:	2204      	movcc	r2, #4
 800a22c:	9201      	str	r2, [sp, #4]
 800a22e:	9a02      	ldr	r2, [sp, #8]
 800a230:	9303      	str	r3, [sp, #12]
 800a232:	429a      	cmp	r2, r3
 800a234:	d808      	bhi.n	800a248 <__multiply+0x98>
 800a236:	2f00      	cmp	r7, #0
 800a238:	dc55      	bgt.n	800a2e6 <__multiply+0x136>
 800a23a:	6107      	str	r7, [r0, #16]
 800a23c:	b005      	add	sp, #20
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	f843 2b04 	str.w	r2, [r3], #4
 800a246:	e7db      	b.n	800a200 <__multiply+0x50>
 800a248:	f8b3 a000 	ldrh.w	sl, [r3]
 800a24c:	f1ba 0f00 	cmp.w	sl, #0
 800a250:	d020      	beq.n	800a294 <__multiply+0xe4>
 800a252:	f105 0e14 	add.w	lr, r5, #20
 800a256:	46b1      	mov	r9, r6
 800a258:	2200      	movs	r2, #0
 800a25a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a25e:	f8d9 b000 	ldr.w	fp, [r9]
 800a262:	b2a1      	uxth	r1, r4
 800a264:	fa1f fb8b 	uxth.w	fp, fp
 800a268:	fb0a b101 	mla	r1, sl, r1, fp
 800a26c:	4411      	add	r1, r2
 800a26e:	f8d9 2000 	ldr.w	r2, [r9]
 800a272:	0c24      	lsrs	r4, r4, #16
 800a274:	0c12      	lsrs	r2, r2, #16
 800a276:	fb0a 2404 	mla	r4, sl, r4, r2
 800a27a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a27e:	b289      	uxth	r1, r1
 800a280:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a284:	45f4      	cmp	ip, lr
 800a286:	f849 1b04 	str.w	r1, [r9], #4
 800a28a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a28e:	d8e4      	bhi.n	800a25a <__multiply+0xaa>
 800a290:	9901      	ldr	r1, [sp, #4]
 800a292:	5072      	str	r2, [r6, r1]
 800a294:	9a03      	ldr	r2, [sp, #12]
 800a296:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a29a:	3304      	adds	r3, #4
 800a29c:	f1b9 0f00 	cmp.w	r9, #0
 800a2a0:	d01f      	beq.n	800a2e2 <__multiply+0x132>
 800a2a2:	6834      	ldr	r4, [r6, #0]
 800a2a4:	f105 0114 	add.w	r1, r5, #20
 800a2a8:	46b6      	mov	lr, r6
 800a2aa:	f04f 0a00 	mov.w	sl, #0
 800a2ae:	880a      	ldrh	r2, [r1, #0]
 800a2b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a2b4:	fb09 b202 	mla	r2, r9, r2, fp
 800a2b8:	4492      	add	sl, r2
 800a2ba:	b2a4      	uxth	r4, r4
 800a2bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a2c0:	f84e 4b04 	str.w	r4, [lr], #4
 800a2c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a2c8:	f8be 2000 	ldrh.w	r2, [lr]
 800a2cc:	0c24      	lsrs	r4, r4, #16
 800a2ce:	fb09 2404 	mla	r4, r9, r4, r2
 800a2d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a2d6:	458c      	cmp	ip, r1
 800a2d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a2dc:	d8e7      	bhi.n	800a2ae <__multiply+0xfe>
 800a2de:	9a01      	ldr	r2, [sp, #4]
 800a2e0:	50b4      	str	r4, [r6, r2]
 800a2e2:	3604      	adds	r6, #4
 800a2e4:	e7a3      	b.n	800a22e <__multiply+0x7e>
 800a2e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1a5      	bne.n	800a23a <__multiply+0x8a>
 800a2ee:	3f01      	subs	r7, #1
 800a2f0:	e7a1      	b.n	800a236 <__multiply+0x86>
 800a2f2:	bf00      	nop
 800a2f4:	0800e536 	.word	0x0800e536
 800a2f8:	0800e608 	.word	0x0800e608

0800a2fc <__pow5mult>:
 800a2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a300:	4615      	mov	r5, r2
 800a302:	f012 0203 	ands.w	r2, r2, #3
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	d007      	beq.n	800a31c <__pow5mult+0x20>
 800a30c:	4c1a      	ldr	r4, [pc, #104]	; (800a378 <__pow5mult+0x7c>)
 800a30e:	3a01      	subs	r2, #1
 800a310:	2300      	movs	r3, #0
 800a312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a316:	f7ff fe9b 	bl	800a050 <__multadd>
 800a31a:	4607      	mov	r7, r0
 800a31c:	10ad      	asrs	r5, r5, #2
 800a31e:	d027      	beq.n	800a370 <__pow5mult+0x74>
 800a320:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800a322:	b944      	cbnz	r4, 800a336 <__pow5mult+0x3a>
 800a324:	f240 2171 	movw	r1, #625	; 0x271
 800a328:	4630      	mov	r0, r6
 800a32a:	f7ff ff2b 	bl	800a184 <__i2b>
 800a32e:	2300      	movs	r3, #0
 800a330:	64b0      	str	r0, [r6, #72]	; 0x48
 800a332:	4604      	mov	r4, r0
 800a334:	6003      	str	r3, [r0, #0]
 800a336:	f04f 0900 	mov.w	r9, #0
 800a33a:	07eb      	lsls	r3, r5, #31
 800a33c:	d50a      	bpl.n	800a354 <__pow5mult+0x58>
 800a33e:	4639      	mov	r1, r7
 800a340:	4622      	mov	r2, r4
 800a342:	4630      	mov	r0, r6
 800a344:	f7ff ff34 	bl	800a1b0 <__multiply>
 800a348:	4639      	mov	r1, r7
 800a34a:	4680      	mov	r8, r0
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff fe76 	bl	800a03e <_Bfree>
 800a352:	4647      	mov	r7, r8
 800a354:	106d      	asrs	r5, r5, #1
 800a356:	d00b      	beq.n	800a370 <__pow5mult+0x74>
 800a358:	6820      	ldr	r0, [r4, #0]
 800a35a:	b938      	cbnz	r0, 800a36c <__pow5mult+0x70>
 800a35c:	4622      	mov	r2, r4
 800a35e:	4621      	mov	r1, r4
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff ff25 	bl	800a1b0 <__multiply>
 800a366:	6020      	str	r0, [r4, #0]
 800a368:	f8c0 9000 	str.w	r9, [r0]
 800a36c:	4604      	mov	r4, r0
 800a36e:	e7e4      	b.n	800a33a <__pow5mult+0x3e>
 800a370:	4638      	mov	r0, r7
 800a372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a376:	bf00      	nop
 800a378:	0800e758 	.word	0x0800e758

0800a37c <__lshift>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	460c      	mov	r4, r1
 800a382:	6849      	ldr	r1, [r1, #4]
 800a384:	6923      	ldr	r3, [r4, #16]
 800a386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a38a:	68a3      	ldr	r3, [r4, #8]
 800a38c:	4607      	mov	r7, r0
 800a38e:	4691      	mov	r9, r2
 800a390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a394:	f108 0601 	add.w	r6, r8, #1
 800a398:	42b3      	cmp	r3, r6
 800a39a:	db0b      	blt.n	800a3b4 <__lshift+0x38>
 800a39c:	4638      	mov	r0, r7
 800a39e:	f7ff fe29 	bl	8009ff4 <_Balloc>
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	b948      	cbnz	r0, 800a3ba <__lshift+0x3e>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	4b28      	ldr	r3, [pc, #160]	; (800a44c <__lshift+0xd0>)
 800a3aa:	4829      	ldr	r0, [pc, #164]	; (800a450 <__lshift+0xd4>)
 800a3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a3b0:	f002 f888 	bl	800c4c4 <__assert_func>
 800a3b4:	3101      	adds	r1, #1
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	e7ee      	b.n	800a398 <__lshift+0x1c>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f100 0114 	add.w	r1, r0, #20
 800a3c0:	f100 0210 	add.w	r2, r0, #16
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	4553      	cmp	r3, sl
 800a3c8:	db33      	blt.n	800a432 <__lshift+0xb6>
 800a3ca:	6920      	ldr	r0, [r4, #16]
 800a3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3d0:	f104 0314 	add.w	r3, r4, #20
 800a3d4:	f019 091f 	ands.w	r9, r9, #31
 800a3d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3e0:	d02b      	beq.n	800a43a <__lshift+0xbe>
 800a3e2:	f1c9 0e20 	rsb	lr, r9, #32
 800a3e6:	468a      	mov	sl, r1
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	fa00 f009 	lsl.w	r0, r0, r9
 800a3f0:	4302      	orrs	r2, r0
 800a3f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fa:	459c      	cmp	ip, r3
 800a3fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a400:	d8f3      	bhi.n	800a3ea <__lshift+0x6e>
 800a402:	ebac 0304 	sub.w	r3, ip, r4
 800a406:	3b15      	subs	r3, #21
 800a408:	f023 0303 	bic.w	r3, r3, #3
 800a40c:	3304      	adds	r3, #4
 800a40e:	f104 0015 	add.w	r0, r4, #21
 800a412:	4584      	cmp	ip, r0
 800a414:	bf38      	it	cc
 800a416:	2304      	movcc	r3, #4
 800a418:	50ca      	str	r2, [r1, r3]
 800a41a:	b10a      	cbz	r2, 800a420 <__lshift+0xa4>
 800a41c:	f108 0602 	add.w	r6, r8, #2
 800a420:	3e01      	subs	r6, #1
 800a422:	4638      	mov	r0, r7
 800a424:	612e      	str	r6, [r5, #16]
 800a426:	4621      	mov	r1, r4
 800a428:	f7ff fe09 	bl	800a03e <_Bfree>
 800a42c:	4628      	mov	r0, r5
 800a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a432:	f842 0f04 	str.w	r0, [r2, #4]!
 800a436:	3301      	adds	r3, #1
 800a438:	e7c5      	b.n	800a3c6 <__lshift+0x4a>
 800a43a:	3904      	subs	r1, #4
 800a43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a440:	f841 2f04 	str.w	r2, [r1, #4]!
 800a444:	459c      	cmp	ip, r3
 800a446:	d8f9      	bhi.n	800a43c <__lshift+0xc0>
 800a448:	e7ea      	b.n	800a420 <__lshift+0xa4>
 800a44a:	bf00      	nop
 800a44c:	0800e536 	.word	0x0800e536
 800a450:	0800e608 	.word	0x0800e608

0800a454 <__mcmp>:
 800a454:	b530      	push	{r4, r5, lr}
 800a456:	6902      	ldr	r2, [r0, #16]
 800a458:	690c      	ldr	r4, [r1, #16]
 800a45a:	1b12      	subs	r2, r2, r4
 800a45c:	d10e      	bne.n	800a47c <__mcmp+0x28>
 800a45e:	f100 0314 	add.w	r3, r0, #20
 800a462:	3114      	adds	r1, #20
 800a464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a46c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a474:	42a5      	cmp	r5, r4
 800a476:	d003      	beq.n	800a480 <__mcmp+0x2c>
 800a478:	d305      	bcc.n	800a486 <__mcmp+0x32>
 800a47a:	2201      	movs	r2, #1
 800a47c:	4610      	mov	r0, r2
 800a47e:	bd30      	pop	{r4, r5, pc}
 800a480:	4283      	cmp	r3, r0
 800a482:	d3f3      	bcc.n	800a46c <__mcmp+0x18>
 800a484:	e7fa      	b.n	800a47c <__mcmp+0x28>
 800a486:	f04f 32ff 	mov.w	r2, #4294967295
 800a48a:	e7f7      	b.n	800a47c <__mcmp+0x28>

0800a48c <__mdiff>:
 800a48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a490:	460c      	mov	r4, r1
 800a492:	4606      	mov	r6, r0
 800a494:	4611      	mov	r1, r2
 800a496:	4620      	mov	r0, r4
 800a498:	4617      	mov	r7, r2
 800a49a:	f7ff ffdb 	bl	800a454 <__mcmp>
 800a49e:	1e05      	subs	r5, r0, #0
 800a4a0:	d110      	bne.n	800a4c4 <__mdiff+0x38>
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f7ff fda5 	bl	8009ff4 <_Balloc>
 800a4aa:	b930      	cbnz	r0, 800a4ba <__mdiff+0x2e>
 800a4ac:	4b39      	ldr	r3, [pc, #228]	; (800a594 <__mdiff+0x108>)
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	f240 2132 	movw	r1, #562	; 0x232
 800a4b4:	4838      	ldr	r0, [pc, #224]	; (800a598 <__mdiff+0x10c>)
 800a4b6:	f002 f805 	bl	800c4c4 <__assert_func>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c4:	bfa4      	itt	ge
 800a4c6:	463b      	movge	r3, r7
 800a4c8:	4627      	movge	r7, r4
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	bfa6      	itte	ge
 800a4d0:	461c      	movge	r4, r3
 800a4d2:	2500      	movge	r5, #0
 800a4d4:	2501      	movlt	r5, #1
 800a4d6:	f7ff fd8d 	bl	8009ff4 <_Balloc>
 800a4da:	b920      	cbnz	r0, 800a4e6 <__mdiff+0x5a>
 800a4dc:	4b2d      	ldr	r3, [pc, #180]	; (800a594 <__mdiff+0x108>)
 800a4de:	4602      	mov	r2, r0
 800a4e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a4e4:	e7e6      	b.n	800a4b4 <__mdiff+0x28>
 800a4e6:	693e      	ldr	r6, [r7, #16]
 800a4e8:	60c5      	str	r5, [r0, #12]
 800a4ea:	6925      	ldr	r5, [r4, #16]
 800a4ec:	f107 0114 	add.w	r1, r7, #20
 800a4f0:	f104 0914 	add.w	r9, r4, #20
 800a4f4:	f100 0e14 	add.w	lr, r0, #20
 800a4f8:	f107 0210 	add.w	r2, r7, #16
 800a4fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a500:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a504:	46f2      	mov	sl, lr
 800a506:	2700      	movs	r7, #0
 800a508:	f859 3b04 	ldr.w	r3, [r9], #4
 800a50c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a510:	fa1f f883 	uxth.w	r8, r3
 800a514:	fa17 f78b 	uxtah	r7, r7, fp
 800a518:	0c1b      	lsrs	r3, r3, #16
 800a51a:	eba7 0808 	sub.w	r8, r7, r8
 800a51e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a522:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a526:	fa1f f888 	uxth.w	r8, r8
 800a52a:	141f      	asrs	r7, r3, #16
 800a52c:	454d      	cmp	r5, r9
 800a52e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a532:	f84a 3b04 	str.w	r3, [sl], #4
 800a536:	d8e7      	bhi.n	800a508 <__mdiff+0x7c>
 800a538:	1b2b      	subs	r3, r5, r4
 800a53a:	3b15      	subs	r3, #21
 800a53c:	f023 0303 	bic.w	r3, r3, #3
 800a540:	3304      	adds	r3, #4
 800a542:	3415      	adds	r4, #21
 800a544:	42a5      	cmp	r5, r4
 800a546:	bf38      	it	cc
 800a548:	2304      	movcc	r3, #4
 800a54a:	4419      	add	r1, r3
 800a54c:	4473      	add	r3, lr
 800a54e:	469e      	mov	lr, r3
 800a550:	460d      	mov	r5, r1
 800a552:	4565      	cmp	r5, ip
 800a554:	d30e      	bcc.n	800a574 <__mdiff+0xe8>
 800a556:	f10c 0203 	add.w	r2, ip, #3
 800a55a:	1a52      	subs	r2, r2, r1
 800a55c:	f022 0203 	bic.w	r2, r2, #3
 800a560:	3903      	subs	r1, #3
 800a562:	458c      	cmp	ip, r1
 800a564:	bf38      	it	cc
 800a566:	2200      	movcc	r2, #0
 800a568:	441a      	add	r2, r3
 800a56a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a56e:	b17b      	cbz	r3, 800a590 <__mdiff+0x104>
 800a570:	6106      	str	r6, [r0, #16]
 800a572:	e7a5      	b.n	800a4c0 <__mdiff+0x34>
 800a574:	f855 8b04 	ldr.w	r8, [r5], #4
 800a578:	fa17 f488 	uxtah	r4, r7, r8
 800a57c:	1422      	asrs	r2, r4, #16
 800a57e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a582:	b2a4      	uxth	r4, r4
 800a584:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a588:	f84e 4b04 	str.w	r4, [lr], #4
 800a58c:	1417      	asrs	r7, r2, #16
 800a58e:	e7e0      	b.n	800a552 <__mdiff+0xc6>
 800a590:	3e01      	subs	r6, #1
 800a592:	e7ea      	b.n	800a56a <__mdiff+0xde>
 800a594:	0800e536 	.word	0x0800e536
 800a598:	0800e608 	.word	0x0800e608

0800a59c <__d2b>:
 800a59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5a0:	4689      	mov	r9, r1
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	ec57 6b10 	vmov	r6, r7, d0
 800a5a8:	4690      	mov	r8, r2
 800a5aa:	f7ff fd23 	bl	8009ff4 <_Balloc>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	b930      	cbnz	r0, 800a5c0 <__d2b+0x24>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b25      	ldr	r3, [pc, #148]	; (800a64c <__d2b+0xb0>)
 800a5b6:	4826      	ldr	r0, [pc, #152]	; (800a650 <__d2b+0xb4>)
 800a5b8:	f240 310a 	movw	r1, #778	; 0x30a
 800a5bc:	f001 ff82 	bl	800c4c4 <__assert_func>
 800a5c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a5c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5c8:	bb35      	cbnz	r5, 800a618 <__d2b+0x7c>
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	d028      	beq.n	800a622 <__d2b+0x86>
 800a5d0:	4668      	mov	r0, sp
 800a5d2:	9600      	str	r6, [sp, #0]
 800a5d4:	f7ff fda6 	bl	800a124 <__lo0bits>
 800a5d8:	9900      	ldr	r1, [sp, #0]
 800a5da:	b300      	cbz	r0, 800a61e <__d2b+0x82>
 800a5dc:	9a01      	ldr	r2, [sp, #4]
 800a5de:	f1c0 0320 	rsb	r3, r0, #32
 800a5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	40c2      	lsrs	r2, r0
 800a5ea:	6163      	str	r3, [r4, #20]
 800a5ec:	9201      	str	r2, [sp, #4]
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	61a3      	str	r3, [r4, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	bf14      	ite	ne
 800a5f6:	2202      	movne	r2, #2
 800a5f8:	2201      	moveq	r2, #1
 800a5fa:	6122      	str	r2, [r4, #16]
 800a5fc:	b1d5      	cbz	r5, 800a634 <__d2b+0x98>
 800a5fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a602:	4405      	add	r5, r0
 800a604:	f8c9 5000 	str.w	r5, [r9]
 800a608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a60c:	f8c8 0000 	str.w	r0, [r8]
 800a610:	4620      	mov	r0, r4
 800a612:	b003      	add	sp, #12
 800a614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a61c:	e7d5      	b.n	800a5ca <__d2b+0x2e>
 800a61e:	6161      	str	r1, [r4, #20]
 800a620:	e7e5      	b.n	800a5ee <__d2b+0x52>
 800a622:	a801      	add	r0, sp, #4
 800a624:	f7ff fd7e 	bl	800a124 <__lo0bits>
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	6163      	str	r3, [r4, #20]
 800a62c:	2201      	movs	r2, #1
 800a62e:	6122      	str	r2, [r4, #16]
 800a630:	3020      	adds	r0, #32
 800a632:	e7e3      	b.n	800a5fc <__d2b+0x60>
 800a634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a63c:	f8c9 0000 	str.w	r0, [r9]
 800a640:	6918      	ldr	r0, [r3, #16]
 800a642:	f7ff fd4f 	bl	800a0e4 <__hi0bits>
 800a646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a64a:	e7df      	b.n	800a60c <__d2b+0x70>
 800a64c:	0800e536 	.word	0x0800e536
 800a650:	0800e608 	.word	0x0800e608

0800a654 <frexp>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	2100      	movs	r1, #0
 800a658:	ec55 4b10 	vmov	r4, r5, d0
 800a65c:	6001      	str	r1, [r0, #0]
 800a65e:	4916      	ldr	r1, [pc, #88]	; (800a6b8 <frexp+0x64>)
 800a660:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800a664:	428a      	cmp	r2, r1
 800a666:	4606      	mov	r6, r0
 800a668:	462b      	mov	r3, r5
 800a66a:	dc22      	bgt.n	800a6b2 <frexp+0x5e>
 800a66c:	ee10 1a10 	vmov	r1, s0
 800a670:	4311      	orrs	r1, r2
 800a672:	d01e      	beq.n	800a6b2 <frexp+0x5e>
 800a674:	4911      	ldr	r1, [pc, #68]	; (800a6bc <frexp+0x68>)
 800a676:	4029      	ands	r1, r5
 800a678:	b969      	cbnz	r1, 800a696 <frexp+0x42>
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <frexp+0x6c>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	ee10 0a10 	vmov	r0, s0
 800a682:	4629      	mov	r1, r5
 800a684:	f7f5 ffe2 	bl	800064c <__aeabi_dmul>
 800a688:	460b      	mov	r3, r1
 800a68a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a68e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800a692:	4604      	mov	r4, r0
 800a694:	6031      	str	r1, [r6, #0]
 800a696:	6831      	ldr	r1, [r6, #0]
 800a698:	1512      	asrs	r2, r2, #20
 800a69a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a69e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800a6a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6a6:	440a      	add	r2, r1
 800a6a8:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800a6ac:	6032      	str	r2, [r6, #0]
 800a6ae:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800a6b2:	ec45 4b10 	vmov	d0, r4, r5
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	7fefffff 	.word	0x7fefffff
 800a6bc:	7ff00000 	.word	0x7ff00000
 800a6c0:	43500000 	.word	0x43500000

0800a6c4 <_sbrk_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d06      	ldr	r5, [pc, #24]	; (800a6e0 <_sbrk_r+0x1c>)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4608      	mov	r0, r1
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	f7f8 f912 	bl	80028f8 <_sbrk>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_sbrk_r+0x1a>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_sbrk_r+0x1a>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	20000cb0 	.word	0x20000cb0

0800a6e4 <siscanf>:
 800a6e4:	b40e      	push	{r1, r2, r3}
 800a6e6:	b510      	push	{r4, lr}
 800a6e8:	b09f      	sub	sp, #124	; 0x7c
 800a6ea:	ac21      	add	r4, sp, #132	; 0x84
 800a6ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a6f0:	f854 2b04 	ldr.w	r2, [r4], #4
 800a6f4:	9201      	str	r2, [sp, #4]
 800a6f6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a6fa:	9004      	str	r0, [sp, #16]
 800a6fc:	9008      	str	r0, [sp, #32]
 800a6fe:	f7f5 fd87 	bl	8000210 <strlen>
 800a702:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <siscanf+0x50>)
 800a704:	9005      	str	r0, [sp, #20]
 800a706:	9009      	str	r0, [sp, #36]	; 0x24
 800a708:	930c      	str	r3, [sp, #48]	; 0x30
 800a70a:	480b      	ldr	r0, [pc, #44]	; (800a738 <siscanf+0x54>)
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	6800      	ldr	r0, [r0, #0]
 800a710:	9403      	str	r4, [sp, #12]
 800a712:	2300      	movs	r3, #0
 800a714:	9310      	str	r3, [sp, #64]	; 0x40
 800a716:	9315      	str	r3, [sp, #84]	; 0x54
 800a718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a71c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a720:	a904      	add	r1, sp, #16
 800a722:	4623      	mov	r3, r4
 800a724:	f000 f996 	bl	800aa54 <__ssvfiscanf_r>
 800a728:	b01f      	add	sp, #124	; 0x7c
 800a72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a72e:	b003      	add	sp, #12
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	0800a75f 	.word	0x0800a75f
 800a738:	20000018 	.word	0x20000018

0800a73c <__sread>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	460c      	mov	r4, r1
 800a740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a744:	f002 f9d4 	bl	800caf0 <_read_r>
 800a748:	2800      	cmp	r0, #0
 800a74a:	bfab      	itete	ge
 800a74c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800a74e:	89a3      	ldrhlt	r3, [r4, #12]
 800a750:	181b      	addge	r3, r3, r0
 800a752:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a756:	bfac      	ite	ge
 800a758:	6523      	strge	r3, [r4, #80]	; 0x50
 800a75a:	81a3      	strhlt	r3, [r4, #12]
 800a75c:	bd10      	pop	{r4, pc}

0800a75e <__seofread>:
 800a75e:	2000      	movs	r0, #0
 800a760:	4770      	bx	lr

0800a762 <__swrite>:
 800a762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	461f      	mov	r7, r3
 800a768:	898b      	ldrh	r3, [r1, #12]
 800a76a:	05db      	lsls	r3, r3, #23
 800a76c:	4605      	mov	r5, r0
 800a76e:	460c      	mov	r4, r1
 800a770:	4616      	mov	r6, r2
 800a772:	d505      	bpl.n	800a780 <__swrite+0x1e>
 800a774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a778:	2302      	movs	r3, #2
 800a77a:	2200      	movs	r2, #0
 800a77c:	f002 f960 	bl	800ca40 <_lseek_r>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	4628      	mov	r0, r5
 800a792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a796:	f001 be43 	b.w	800c420 <_write_r>

0800a79a <__sseek>:
 800a79a:	b510      	push	{r4, lr}
 800a79c:	460c      	mov	r4, r1
 800a79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a2:	f002 f94d 	bl	800ca40 <_lseek_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	bf15      	itete	ne
 800a7ac:	6520      	strne	r0, [r4, #80]	; 0x50
 800a7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7b6:	81a3      	strheq	r3, [r4, #12]
 800a7b8:	bf18      	it	ne
 800a7ba:	81a3      	strhne	r3, [r4, #12]
 800a7bc:	bd10      	pop	{r4, pc}

0800a7be <__sclose>:
 800a7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c2:	f001 becb 	b.w	800c55c <_close_r>

0800a7c6 <strcpy>:
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7cc:	f803 2b01 	strb.w	r2, [r3], #1
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d1f9      	bne.n	800a7c8 <strcpy+0x2>
 800a7d4:	4770      	bx	lr

0800a7d6 <strncmp>:
 800a7d6:	b510      	push	{r4, lr}
 800a7d8:	b16a      	cbz	r2, 800a7f6 <strncmp+0x20>
 800a7da:	3901      	subs	r1, #1
 800a7dc:	1884      	adds	r4, r0, r2
 800a7de:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d103      	bne.n	800a7f2 <strncmp+0x1c>
 800a7ea:	42a0      	cmp	r0, r4
 800a7ec:	d001      	beq.n	800a7f2 <strncmp+0x1c>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1f5      	bne.n	800a7de <strncmp+0x8>
 800a7f2:	1a98      	subs	r0, r3, r2
 800a7f4:	bd10      	pop	{r4, pc}
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	e7fc      	b.n	800a7f4 <strncmp+0x1e>

0800a7fa <strncpy>:
 800a7fa:	b510      	push	{r4, lr}
 800a7fc:	3901      	subs	r1, #1
 800a7fe:	4603      	mov	r3, r0
 800a800:	b132      	cbz	r2, 800a810 <strncpy+0x16>
 800a802:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a806:	f803 4b01 	strb.w	r4, [r3], #1
 800a80a:	3a01      	subs	r2, #1
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	d1f7      	bne.n	800a800 <strncpy+0x6>
 800a810:	441a      	add	r2, r3
 800a812:	2100      	movs	r1, #0
 800a814:	4293      	cmp	r3, r2
 800a816:	d100      	bne.n	800a81a <strncpy+0x20>
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	f803 1b01 	strb.w	r1, [r3], #1
 800a81e:	e7f9      	b.n	800a814 <strncpy+0x1a>

0800a820 <_strtoul_l.isra.0>:
 800a820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a824:	4e3b      	ldr	r6, [pc, #236]	; (800a914 <_strtoul_l.isra.0+0xf4>)
 800a826:	4686      	mov	lr, r0
 800a828:	468c      	mov	ip, r1
 800a82a:	4660      	mov	r0, ip
 800a82c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a830:	5da5      	ldrb	r5, [r4, r6]
 800a832:	f015 0508 	ands.w	r5, r5, #8
 800a836:	d1f8      	bne.n	800a82a <_strtoul_l.isra.0+0xa>
 800a838:	2c2d      	cmp	r4, #45	; 0x2d
 800a83a:	d134      	bne.n	800a8a6 <_strtoul_l.isra.0+0x86>
 800a83c:	f89c 4000 	ldrb.w	r4, [ip]
 800a840:	f04f 0801 	mov.w	r8, #1
 800a844:	f100 0c02 	add.w	ip, r0, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d05e      	beq.n	800a90a <_strtoul_l.isra.0+0xea>
 800a84c:	2b10      	cmp	r3, #16
 800a84e:	d10c      	bne.n	800a86a <_strtoul_l.isra.0+0x4a>
 800a850:	2c30      	cmp	r4, #48	; 0x30
 800a852:	d10a      	bne.n	800a86a <_strtoul_l.isra.0+0x4a>
 800a854:	f89c 0000 	ldrb.w	r0, [ip]
 800a858:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a85c:	2858      	cmp	r0, #88	; 0x58
 800a85e:	d14f      	bne.n	800a900 <_strtoul_l.isra.0+0xe0>
 800a860:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a864:	2310      	movs	r3, #16
 800a866:	f10c 0c02 	add.w	ip, ip, #2
 800a86a:	f04f 37ff 	mov.w	r7, #4294967295
 800a86e:	2500      	movs	r5, #0
 800a870:	fbb7 f7f3 	udiv	r7, r7, r3
 800a874:	fb03 f907 	mul.w	r9, r3, r7
 800a878:	ea6f 0909 	mvn.w	r9, r9
 800a87c:	4628      	mov	r0, r5
 800a87e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a882:	2e09      	cmp	r6, #9
 800a884:	d818      	bhi.n	800a8b8 <_strtoul_l.isra.0+0x98>
 800a886:	4634      	mov	r4, r6
 800a888:	42a3      	cmp	r3, r4
 800a88a:	dd24      	ble.n	800a8d6 <_strtoul_l.isra.0+0xb6>
 800a88c:	2d00      	cmp	r5, #0
 800a88e:	db1f      	blt.n	800a8d0 <_strtoul_l.isra.0+0xb0>
 800a890:	4287      	cmp	r7, r0
 800a892:	d31d      	bcc.n	800a8d0 <_strtoul_l.isra.0+0xb0>
 800a894:	d101      	bne.n	800a89a <_strtoul_l.isra.0+0x7a>
 800a896:	45a1      	cmp	r9, r4
 800a898:	db1a      	blt.n	800a8d0 <_strtoul_l.isra.0+0xb0>
 800a89a:	fb00 4003 	mla	r0, r0, r3, r4
 800a89e:	2501      	movs	r5, #1
 800a8a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a8a4:	e7eb      	b.n	800a87e <_strtoul_l.isra.0+0x5e>
 800a8a6:	2c2b      	cmp	r4, #43	; 0x2b
 800a8a8:	bf08      	it	eq
 800a8aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a8ae:	46a8      	mov	r8, r5
 800a8b0:	bf08      	it	eq
 800a8b2:	f100 0c02 	addeq.w	ip, r0, #2
 800a8b6:	e7c7      	b.n	800a848 <_strtoul_l.isra.0+0x28>
 800a8b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a8bc:	2e19      	cmp	r6, #25
 800a8be:	d801      	bhi.n	800a8c4 <_strtoul_l.isra.0+0xa4>
 800a8c0:	3c37      	subs	r4, #55	; 0x37
 800a8c2:	e7e1      	b.n	800a888 <_strtoul_l.isra.0+0x68>
 800a8c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a8c8:	2e19      	cmp	r6, #25
 800a8ca:	d804      	bhi.n	800a8d6 <_strtoul_l.isra.0+0xb6>
 800a8cc:	3c57      	subs	r4, #87	; 0x57
 800a8ce:	e7db      	b.n	800a888 <_strtoul_l.isra.0+0x68>
 800a8d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a8d4:	e7e4      	b.n	800a8a0 <_strtoul_l.isra.0+0x80>
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	da07      	bge.n	800a8ea <_strtoul_l.isra.0+0xca>
 800a8da:	2322      	movs	r3, #34	; 0x22
 800a8dc:	f8ce 3000 	str.w	r3, [lr]
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	b942      	cbnz	r2, 800a8f8 <_strtoul_l.isra.0+0xd8>
 800a8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ea:	f1b8 0f00 	cmp.w	r8, #0
 800a8ee:	d000      	beq.n	800a8f2 <_strtoul_l.isra.0+0xd2>
 800a8f0:	4240      	negs	r0, r0
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	d0f7      	beq.n	800a8e6 <_strtoul_l.isra.0+0xc6>
 800a8f6:	b10d      	cbz	r5, 800a8fc <_strtoul_l.isra.0+0xdc>
 800a8f8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a8fc:	6011      	str	r1, [r2, #0]
 800a8fe:	e7f2      	b.n	800a8e6 <_strtoul_l.isra.0+0xc6>
 800a900:	2430      	movs	r4, #48	; 0x30
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1b1      	bne.n	800a86a <_strtoul_l.isra.0+0x4a>
 800a906:	2308      	movs	r3, #8
 800a908:	e7af      	b.n	800a86a <_strtoul_l.isra.0+0x4a>
 800a90a:	2c30      	cmp	r4, #48	; 0x30
 800a90c:	d0a2      	beq.n	800a854 <_strtoul_l.isra.0+0x34>
 800a90e:	230a      	movs	r3, #10
 800a910:	e7ab      	b.n	800a86a <_strtoul_l.isra.0+0x4a>
 800a912:	bf00      	nop
 800a914:	0800e429 	.word	0x0800e429

0800a918 <_strtoul_r>:
 800a918:	f7ff bf82 	b.w	800a820 <_strtoul_l.isra.0>

0800a91c <strtoul>:
 800a91c:	4613      	mov	r3, r2
 800a91e:	460a      	mov	r2, r1
 800a920:	4601      	mov	r1, r0
 800a922:	4802      	ldr	r0, [pc, #8]	; (800a92c <strtoul+0x10>)
 800a924:	6800      	ldr	r0, [r0, #0]
 800a926:	f7ff bf7b 	b.w	800a820 <_strtoul_l.isra.0>
 800a92a:	bf00      	nop
 800a92c:	20000018 	.word	0x20000018

0800a930 <_sungetc_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	1c4b      	adds	r3, r1, #1
 800a934:	4614      	mov	r4, r2
 800a936:	d103      	bne.n	800a940 <_sungetc_r+0x10>
 800a938:	f04f 35ff 	mov.w	r5, #4294967295
 800a93c:	4628      	mov	r0, r5
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	8993      	ldrh	r3, [r2, #12]
 800a942:	f023 0320 	bic.w	r3, r3, #32
 800a946:	8193      	strh	r3, [r2, #12]
 800a948:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a94a:	6852      	ldr	r2, [r2, #4]
 800a94c:	b2cd      	uxtb	r5, r1
 800a94e:	b18b      	cbz	r3, 800a974 <_sungetc_r+0x44>
 800a950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a952:	4293      	cmp	r3, r2
 800a954:	dd08      	ble.n	800a968 <_sungetc_r+0x38>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	1e5a      	subs	r2, r3, #1
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a960:	6863      	ldr	r3, [r4, #4]
 800a962:	3301      	adds	r3, #1
 800a964:	6063      	str	r3, [r4, #4]
 800a966:	e7e9      	b.n	800a93c <_sungetc_r+0xc>
 800a968:	4621      	mov	r1, r4
 800a96a:	f001 f824 	bl	800b9b6 <__submore>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d0f1      	beq.n	800a956 <_sungetc_r+0x26>
 800a972:	e7e1      	b.n	800a938 <_sungetc_r+0x8>
 800a974:	6921      	ldr	r1, [r4, #16]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	b151      	cbz	r1, 800a990 <_sungetc_r+0x60>
 800a97a:	4299      	cmp	r1, r3
 800a97c:	d208      	bcs.n	800a990 <_sungetc_r+0x60>
 800a97e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a982:	42a9      	cmp	r1, r5
 800a984:	d104      	bne.n	800a990 <_sungetc_r+0x60>
 800a986:	3b01      	subs	r3, #1
 800a988:	3201      	adds	r2, #1
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	6062      	str	r2, [r4, #4]
 800a98e:	e7d5      	b.n	800a93c <_sungetc_r+0xc>
 800a990:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800a994:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a998:	6323      	str	r3, [r4, #48]	; 0x30
 800a99a:	2303      	movs	r3, #3
 800a99c:	6363      	str	r3, [r4, #52]	; 0x34
 800a99e:	4623      	mov	r3, r4
 800a9a0:	f803 5f42 	strb.w	r5, [r3, #66]!
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e7dc      	b.n	800a964 <_sungetc_r+0x34>

0800a9aa <__ssrefill_r>:
 800a9aa:	b510      	push	{r4, lr}
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800a9b0:	b169      	cbz	r1, 800a9ce <__ssrefill_r+0x24>
 800a9b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a9b6:	4299      	cmp	r1, r3
 800a9b8:	d001      	beq.n	800a9be <__ssrefill_r+0x14>
 800a9ba:	f7fe ff13 	bl	80097e4 <_free_r>
 800a9be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a9c0:	6063      	str	r3, [r4, #4]
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	6320      	str	r0, [r4, #48]	; 0x30
 800a9c6:	b113      	cbz	r3, 800a9ce <__ssrefill_r+0x24>
 800a9c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	6063      	str	r3, [r4, #4]
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f043 0320 	orr.w	r3, r3, #32
 800a9dc:	81a3      	strh	r3, [r4, #12]
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	e7f3      	b.n	800a9cc <__ssrefill_r+0x22>

0800a9e4 <_sfread_r>:
 800a9e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	461f      	mov	r7, r3
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	437b      	muls	r3, r7
 800a9ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	4688      	mov	r8, r1
 800a9f4:	4691      	mov	r9, r2
 800a9f6:	d027      	beq.n	800aa48 <_sfread_r+0x64>
 800a9f8:	461e      	mov	r6, r3
 800a9fa:	e9d4 1500 	ldrd	r1, r5, [r4]
 800a9fe:	42b5      	cmp	r5, r6
 800aa00:	d30b      	bcc.n	800aa1a <_sfread_r+0x36>
 800aa02:	4632      	mov	r2, r6
 800aa04:	4640      	mov	r0, r8
 800aa06:	f7ff fadb 	bl	8009fc0 <memcpy>
 800aa0a:	6862      	ldr	r2, [r4, #4]
 800aa0c:	1b92      	subs	r2, r2, r6
 800aa0e:	6062      	str	r2, [r4, #4]
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	4432      	add	r2, r6
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	463b      	mov	r3, r7
 800aa18:	e016      	b.n	800aa48 <_sfread_r+0x64>
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	f7ff face 	bl	8009fc0 <memcpy>
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	2300      	movs	r3, #0
 800aa28:	442a      	add	r2, r5
 800aa2a:	6063      	str	r3, [r4, #4]
 800aa2c:	6022      	str	r2, [r4, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4650      	mov	r0, sl
 800aa32:	f7ff ffba 	bl	800a9aa <__ssrefill_r>
 800aa36:	44a8      	add	r8, r5
 800aa38:	9b01      	ldr	r3, [sp, #4]
 800aa3a:	eba6 0b05 	sub.w	fp, r6, r5
 800aa3e:	b138      	cbz	r0, 800aa50 <_sfread_r+0x6c>
 800aa40:	441d      	add	r5, r3
 800aa42:	1bad      	subs	r5, r5, r6
 800aa44:	fbb5 f3f9 	udiv	r3, r5, r9
 800aa48:	4618      	mov	r0, r3
 800aa4a:	b003      	add	sp, #12
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	465e      	mov	r6, fp
 800aa52:	e7d2      	b.n	800a9fa <_sfread_r+0x16>

0800aa54 <__ssvfiscanf_r>:
 800aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa58:	ed2d 8b02 	vpush	{d8}
 800aa5c:	b0df      	sub	sp, #380	; 0x17c
 800aa5e:	461e      	mov	r6, r3
 800aa60:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	049d      	lsls	r5, r3, #18
 800aa68:	ee08 0a10 	vmov	s16, r0
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	613a      	str	r2, [r7, #16]
 800aa70:	d406      	bmi.n	800aa80 <__ssvfiscanf_r+0x2c>
 800aa72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa76:	818b      	strh	r3, [r1, #12]
 800aa78:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800aa7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa7e:	664b      	str	r3, [r1, #100]	; 0x64
 800aa80:	2300      	movs	r3, #0
 800aa82:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	469b      	mov	fp, r3
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	f812 3b01 	ldrb.w	r3, [r2], #1
 800aa94:	613a      	str	r2, [r7, #16]
 800aa96:	637b      	str	r3, [r7, #52]	; 0x34
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d035      	beq.n	800ab08 <__ssvfiscanf_r+0xb4>
 800aa9c:	4a9f      	ldr	r2, [pc, #636]	; (800ad1c <__ssvfiscanf_r+0x2c8>)
 800aa9e:	f813 9002 	ldrb.w	r9, [r3, r2]
 800aaa2:	f019 0908 	ands.w	r9, r9, #8
 800aaa6:	d019      	beq.n	800aadc <__ssvfiscanf_r+0x88>
 800aaa8:	6863      	ldr	r3, [r4, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dd0e      	ble.n	800aacc <__ssvfiscanf_r+0x78>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	499a      	ldr	r1, [pc, #616]	; (800ad1c <__ssvfiscanf_r+0x2c8>)
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	5c8a      	ldrb	r2, [r1, r2]
 800aab6:	0710      	lsls	r0, r2, #28
 800aab8:	d5e9      	bpl.n	800aa8e <__ssvfiscanf_r+0x3a>
 800aaba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aabc:	3201      	adds	r2, #1
 800aabe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aac0:	6862      	ldr	r2, [r4, #4]
 800aac2:	3301      	adds	r3, #1
 800aac4:	3a01      	subs	r2, #1
 800aac6:	6062      	str	r2, [r4, #4]
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	e7ed      	b.n	800aaa8 <__ssvfiscanf_r+0x54>
 800aacc:	ee18 0a10 	vmov	r0, s16
 800aad0:	4621      	mov	r1, r4
 800aad2:	f7ff ff6a 	bl	800a9aa <__ssrefill_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0e9      	beq.n	800aaae <__ssvfiscanf_r+0x5a>
 800aada:	e7d8      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800aadc:	2b25      	cmp	r3, #37	; 0x25
 800aade:	f040 809f 	bne.w	800ac20 <__ssvfiscanf_r+0x1cc>
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 800aae8:	220a      	movs	r2, #10
 800aaea:	6939      	ldr	r1, [r7, #16]
 800aaec:	781d      	ldrb	r5, [r3, #0]
 800aaee:	3101      	adds	r1, #1
 800aaf0:	2d7a      	cmp	r5, #122	; 0x7a
 800aaf2:	6139      	str	r1, [r7, #16]
 800aaf4:	d808      	bhi.n	800ab08 <__ssvfiscanf_r+0xb4>
 800aaf6:	2d42      	cmp	r5, #66	; 0x42
 800aaf8:	d80b      	bhi.n	800ab12 <__ssvfiscanf_r+0xbe>
 800aafa:	2d2a      	cmp	r5, #42	; 0x2a
 800aafc:	f000 80b9 	beq.w	800ac72 <__ssvfiscanf_r+0x21e>
 800ab00:	d87e      	bhi.n	800ac00 <__ssvfiscanf_r+0x1ac>
 800ab02:	2d25      	cmp	r5, #37	; 0x25
 800ab04:	f000 808c 	beq.w	800ac20 <__ssvfiscanf_r+0x1cc>
 800ab08:	f1bb 0f00 	cmp.w	fp, #0
 800ab0c:	f000 815f 	beq.w	800adce <__ssvfiscanf_r+0x37a>
 800ab10:	e158      	b.n	800adc4 <__ssvfiscanf_r+0x370>
 800ab12:	3d43      	subs	r5, #67	; 0x43
 800ab14:	2d37      	cmp	r5, #55	; 0x37
 800ab16:	d8f7      	bhi.n	800ab08 <__ssvfiscanf_r+0xb4>
 800ab18:	a101      	add	r1, pc, #4	; (adr r1, 800ab20 <__ssvfiscanf_r+0xcc>)
 800ab1a:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800adf3 	.word	0x0800adf3
 800ab24:	0800acef 	.word	0x0800acef
 800ab28:	0800ab09 	.word	0x0800ab09
 800ab2c:	0800ab09 	.word	0x0800ab09
 800ab30:	0800ab09 	.word	0x0800ab09
 800ab34:	0800ab09 	.word	0x0800ab09
 800ab38:	0800ab09 	.word	0x0800ab09
 800ab3c:	0800ab09 	.word	0x0800ab09
 800ab40:	0800ab09 	.word	0x0800ab09
 800ab44:	0800acc1 	.word	0x0800acc1
 800ab48:	0800ab09 	.word	0x0800ab09
 800ab4c:	0800ab09 	.word	0x0800ab09
 800ab50:	0800acf7 	.word	0x0800acf7
 800ab54:	0800ab09 	.word	0x0800ab09
 800ab58:	0800ab09 	.word	0x0800ab09
 800ab5c:	0800ab09 	.word	0x0800ab09
 800ab60:	0800ad29 	.word	0x0800ad29
 800ab64:	0800ab09 	.word	0x0800ab09
 800ab68:	0800ab09 	.word	0x0800ab09
 800ab6c:	0800ab09 	.word	0x0800ab09
 800ab70:	0800ab09 	.word	0x0800ab09
 800ab74:	0800ad0f 	.word	0x0800ad0f
 800ab78:	0800ab09 	.word	0x0800ab09
 800ab7c:	0800ab09 	.word	0x0800ab09
 800ab80:	0800addf 	.word	0x0800addf
 800ab84:	0800ab09 	.word	0x0800ab09
 800ab88:	0800ab09 	.word	0x0800ab09
 800ab8c:	0800ab09 	.word	0x0800ab09
 800ab90:	0800ab09 	.word	0x0800ab09
 800ab94:	0800ab09 	.word	0x0800ab09
 800ab98:	0800ab09 	.word	0x0800ab09
 800ab9c:	0800ab09 	.word	0x0800ab09
 800aba0:	0800adf7 	.word	0x0800adf7
 800aba4:	0800acf3 	.word	0x0800acf3
 800aba8:	0800ab09 	.word	0x0800ab09
 800abac:	0800ab09 	.word	0x0800ab09
 800abb0:	0800ab09 	.word	0x0800ab09
 800abb4:	0800aca5 	.word	0x0800aca5
 800abb8:	0800ae4b 	.word	0x0800ae4b
 800abbc:	0800acc1 	.word	0x0800acc1
 800abc0:	0800ab09 	.word	0x0800ab09
 800abc4:	0800ac87 	.word	0x0800ac87
 800abc8:	0800acd1 	.word	0x0800acd1
 800abcc:	0800ae05 	.word	0x0800ae05
 800abd0:	0800acfb 	.word	0x0800acfb
 800abd4:	0800adff 	.word	0x0800adff
 800abd8:	0800ab09 	.word	0x0800ab09
 800abdc:	0800ab09 	.word	0x0800ab09
 800abe0:	0800ad2d 	.word	0x0800ad2d
 800abe4:	0800acc9 	.word	0x0800acc9
 800abe8:	0800ad07 	.word	0x0800ad07
 800abec:	0800ab09 	.word	0x0800ab09
 800abf0:	0800ab09 	.word	0x0800ab09
 800abf4:	0800ad0f 	.word	0x0800ad0f
 800abf8:	0800ab09 	.word	0x0800ab09
 800abfc:	0800acc9 	.word	0x0800acc9
 800ac00:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ac04:	2b09      	cmp	r3, #9
 800ac06:	f63f af7f 	bhi.w	800ab08 <__ssvfiscanf_r+0xb4>
 800ac0a:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 800ac0e:	f47f af7b 	bne.w	800ab08 <__ssvfiscanf_r+0xb4>
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	fb02 5503 	mla	r5, r2, r3, r5
 800ac18:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ac1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac1e:	e030      	b.n	800ac82 <__ssvfiscanf_r+0x22e>
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	dd10      	ble.n	800ac48 <__ssvfiscanf_r+0x1f4>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	693a      	ldr	r2, [r7, #16]
 800ac2a:	7819      	ldrb	r1, [r3, #0]
 800ac2c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800ac30:	4291      	cmp	r1, r2
 800ac32:	f47f af69 	bne.w	800ab08 <__ssvfiscanf_r+0xb4>
 800ac36:	6862      	ldr	r2, [r4, #4]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	3a01      	subs	r2, #1
 800ac40:	6062      	str	r2, [r4, #4]
 800ac42:	3301      	adds	r3, #1
 800ac44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac46:	e722      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800ac48:	ee18 0a10 	vmov	r0, s16
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	f7ff feac 	bl	800a9aa <__ssrefill_r>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d0e7      	beq.n	800ac26 <__ssvfiscanf_r+0x1d2>
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	b11b      	cbz	r3, 800ac62 <__ssvfiscanf_r+0x20e>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	065b      	lsls	r3, r3, #25
 800ac5e:	f57f af53 	bpl.w	800ab08 <__ssvfiscanf_r+0xb4>
 800ac62:	f1bb 0f00 	cmp.w	fp, #0
 800ac66:	f040 80a1 	bne.w	800adac <__ssvfiscanf_r+0x358>
 800ac6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac70:	e0ad      	b.n	800adce <__ssvfiscanf_r+0x37a>
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	ea53 0309 	orrs.w	r3, r3, r9
 800ac78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac7a:	f47f af45 	bne.w	800ab08 <__ssvfiscanf_r+0xb4>
 800ac7e:	f04f 0910 	mov.w	r9, #16
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	e731      	b.n	800aaea <__ssvfiscanf_r+0x96>
 800ac86:	f019 0f0f 	tst.w	r9, #15
 800ac8a:	f47f af3d 	bne.w	800ab08 <__ssvfiscanf_r+0xb4>
 800ac8e:	7859      	ldrb	r1, [r3, #1]
 800ac90:	296c      	cmp	r1, #108	; 0x6c
 800ac92:	d104      	bne.n	800ac9e <__ssvfiscanf_r+0x24a>
 800ac94:	3302      	adds	r3, #2
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	f049 0902 	orr.w	r9, r9, #2
 800ac9c:	e7f1      	b.n	800ac82 <__ssvfiscanf_r+0x22e>
 800ac9e:	f049 0901 	orr.w	r9, r9, #1
 800aca2:	e7ee      	b.n	800ac82 <__ssvfiscanf_r+0x22e>
 800aca4:	f019 0f0f 	tst.w	r9, #15
 800aca8:	f47f af2e 	bne.w	800ab08 <__ssvfiscanf_r+0xb4>
 800acac:	7859      	ldrb	r1, [r3, #1]
 800acae:	2968      	cmp	r1, #104	; 0x68
 800acb0:	bf03      	ittte	eq
 800acb2:	3302      	addeq	r3, #2
 800acb4:	613b      	streq	r3, [r7, #16]
 800acb6:	f049 0908 	orreq.w	r9, r9, #8
 800acba:	f049 0904 	orrne.w	r9, r9, #4
 800acbe:	e7e0      	b.n	800ac82 <__ssvfiscanf_r+0x22e>
 800acc0:	f019 0f0f 	tst.w	r9, #15
 800acc4:	d0e8      	beq.n	800ac98 <__ssvfiscanf_r+0x244>
 800acc6:	e71f      	b.n	800ab08 <__ssvfiscanf_r+0xb4>
 800acc8:	f019 0f0f 	tst.w	r9, #15
 800accc:	d0d9      	beq.n	800ac82 <__ssvfiscanf_r+0x22e>
 800acce:	e71b      	b.n	800ab08 <__ssvfiscanf_r+0xb4>
 800acd0:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 800acd4:	f47f af18 	bne.w	800ab08 <__ssvfiscanf_r+0xb4>
 800acd8:	f1bb 0f00 	cmp.w	fp, #0
 800acdc:	d104      	bne.n	800ace8 <__ssvfiscanf_r+0x294>
 800acde:	b082      	sub	sp, #8
 800ace0:	f10d 0b08 	add.w	fp, sp, #8
 800ace4:	e9cb 3300 	strd	r3, r3, [fp]
 800ace8:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800acec:	e7c9      	b.n	800ac82 <__ssvfiscanf_r+0x22e>
 800acee:	f049 0901 	orr.w	r9, r9, #1
 800acf2:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <__ssvfiscanf_r+0x2cc>)
 800acf4:	e008      	b.n	800ad08 <__ssvfiscanf_r+0x2b4>
 800acf6:	f049 0901 	orr.w	r9, r9, #1
 800acfa:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <__ssvfiscanf_r+0x2d0>)
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	2308      	movs	r3, #8
 800ad00:	61fb      	str	r3, [r7, #28]
 800ad02:	2503      	movs	r5, #3
 800ad04:	e013      	b.n	800ad2e <__ssvfiscanf_r+0x2da>
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <__ssvfiscanf_r+0x2d0>)
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	e7f8      	b.n	800ad00 <__ssvfiscanf_r+0x2ac>
 800ad0e:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 800ad12:	4b04      	ldr	r3, [pc, #16]	; (800ad24 <__ssvfiscanf_r+0x2d0>)
 800ad14:	617b      	str	r3, [r7, #20]
 800ad16:	2310      	movs	r3, #16
 800ad18:	e7f2      	b.n	800ad00 <__ssvfiscanf_r+0x2ac>
 800ad1a:	bf00      	nop
 800ad1c:	0800e429 	.word	0x0800e429
 800ad20:	08006da5 	.word	0x08006da5
 800ad24:	0800a919 	.word	0x0800a919
 800ad28:	f049 0901 	orr.w	r9, r9, #1
 800ad2c:	2502      	movs	r5, #2
 800ad2e:	6863      	ldr	r3, [r4, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f340 808e 	ble.w	800ae52 <__ssvfiscanf_r+0x3fe>
 800ad36:	f019 0f40 	tst.w	r9, #64	; 0x40
 800ad3a:	d106      	bne.n	800ad4a <__ssvfiscanf_r+0x2f6>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	49b3      	ldr	r1, [pc, #716]	; (800b00c <__ssvfiscanf_r+0x5b8>)
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	5c52      	ldrb	r2, [r2, r1]
 800ad44:	0711      	lsls	r1, r2, #28
 800ad46:	f100 808d 	bmi.w	800ae64 <__ssvfiscanf_r+0x410>
 800ad4a:	2d02      	cmp	r5, #2
 800ad4c:	f000 8394 	beq.w	800b478 <__ssvfiscanf_r+0xa24>
 800ad50:	2d03      	cmp	r5, #3
 800ad52:	f000 8535 	beq.w	800b7c0 <__ssvfiscanf_r+0xd6c>
 800ad56:	f009 0310 	and.w	r3, r9, #16
 800ad5a:	2d01      	cmp	r5, #1
 800ad5c:	61bb      	str	r3, [r7, #24]
 800ad5e:	f009 0301 	and.w	r3, r9, #1
 800ad62:	f000 81cc 	beq.w	800b0fe <__ssvfiscanf_r+0x6aa>
 800ad66:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800ad68:	2d01      	cmp	r5, #1
 800ad6a:	bf38      	it	cc
 800ad6c:	2501      	movcc	r5, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 8150 	beq.w	800b014 <__ssvfiscanf_r+0x5c0>
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f040 810d 	bne.w	800af96 <__ssvfiscanf_r+0x542>
 800ad7c:	4633      	mov	r3, r6
 800ad7e:	f019 0f80 	tst.w	r9, #128	; 0x80
 800ad82:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad86:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad88:	f000 810c 	beq.w	800afa4 <__ssvfiscanf_r+0x550>
 800ad8c:	b146      	cbz	r6, 800ada0 <__ssvfiscanf_r+0x34c>
 800ad8e:	2080      	movs	r0, #128	; 0x80
 800ad90:	f7fe fec4 	bl	8009b1c <malloc>
 800ad94:	4680      	mov	r8, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d178      	bne.n	800ae8c <__ssvfiscanf_r+0x438>
 800ad9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
 800ada0:	f1bb 0f00 	cmp.w	fp, #0
 800ada4:	d013      	beq.n	800adce <__ssvfiscanf_r+0x37a>
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	3301      	adds	r3, #1
 800adaa:	d10b      	bne.n	800adc4 <__ssvfiscanf_r+0x370>
 800adac:	2400      	movs	r4, #0
 800adae:	4626      	mov	r6, r4
 800adb0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 800adb4:	f8db 5000 	ldr.w	r5, [fp]
 800adb8:	42a3      	cmp	r3, r4
 800adba:	f300 85df 	bgt.w	800b97c <__ssvfiscanf_r+0xf28>
 800adbe:	f04f 33ff 	mov.w	r3, #4294967295
 800adc2:	627b      	str	r3, [r7, #36]	; 0x24
 800adc4:	f8db 0000 	ldr.w	r0, [fp]
 800adc8:	b108      	cbz	r0, 800adce <__ssvfiscanf_r+0x37a>
 800adca:	f7fe feaf 	bl	8009b2c <free>
 800adce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800add0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 800add4:	46bd      	mov	sp, r7
 800add6:	ecbd 8b02 	vpop	{d8}
 800adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adde:	6939      	ldr	r1, [r7, #16]
 800ade0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800ade4:	f002 f844 	bl	800ce70 <__sccl>
 800ade8:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800adec:	6138      	str	r0, [r7, #16]
 800adee:	2501      	movs	r5, #1
 800adf0:	e79d      	b.n	800ad2e <__ssvfiscanf_r+0x2da>
 800adf2:	f049 0901 	orr.w	r9, r9, #1
 800adf6:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800adfa:	2500      	movs	r5, #0
 800adfc:	e797      	b.n	800ad2e <__ssvfiscanf_r+0x2da>
 800adfe:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 800ae02:	e786      	b.n	800ad12 <__ssvfiscanf_r+0x2be>
 800ae04:	f019 0f10 	tst.w	r9, #16
 800ae08:	f47f ae41 	bne.w	800aa8e <__ssvfiscanf_r+0x3a>
 800ae0c:	f019 0f08 	tst.w	r9, #8
 800ae10:	f856 1b04 	ldr.w	r1, [r6], #4
 800ae14:	d002      	beq.n	800ae1c <__ssvfiscanf_r+0x3c8>
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	700b      	strb	r3, [r1, #0]
 800ae1a:	e638      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800ae1c:	f019 0f04 	tst.w	r9, #4
 800ae20:	d002      	beq.n	800ae28 <__ssvfiscanf_r+0x3d4>
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	800b      	strh	r3, [r1, #0]
 800ae26:	e632      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800ae28:	f019 0f01 	tst.w	r9, #1
 800ae2c:	d002      	beq.n	800ae34 <__ssvfiscanf_r+0x3e0>
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	600b      	str	r3, [r1, #0]
 800ae32:	e62c      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800ae34:	f019 0f02 	tst.w	r9, #2
 800ae38:	d0f9      	beq.n	800ae2e <__ssvfiscanf_r+0x3da>
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800ae40:	461a      	mov	r2, r3
 800ae42:	464b      	mov	r3, r9
 800ae44:	e9c1 2300 	strd	r2, r3, [r1]
 800ae48:	e621      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800ae4a:	4b71      	ldr	r3, [pc, #452]	; (800b010 <__ssvfiscanf_r+0x5bc>)
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e756      	b.n	800ad00 <__ssvfiscanf_r+0x2ac>
 800ae52:	ee18 0a10 	vmov	r0, s16
 800ae56:	4621      	mov	r1, r4
 800ae58:	f7ff fda7 	bl	800a9aa <__ssrefill_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f43f af6a 	beq.w	800ad36 <__ssvfiscanf_r+0x2e2>
 800ae62:	e6f8      	b.n	800ac56 <__ssvfiscanf_r+0x202>
 800ae64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae66:	3201      	adds	r2, #1
 800ae68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae6a:	6862      	ldr	r2, [r4, #4]
 800ae6c:	3a01      	subs	r2, #1
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	6062      	str	r2, [r4, #4]
 800ae72:	dd02      	ble.n	800ae7a <__ssvfiscanf_r+0x426>
 800ae74:	3301      	adds	r3, #1
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	e760      	b.n	800ad3c <__ssvfiscanf_r+0x2e8>
 800ae7a:	ee18 0a10 	vmov	r0, s16
 800ae7e:	4621      	mov	r1, r4
 800ae80:	f7ff fd93 	bl	800a9aa <__ssrefill_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	f43f af59 	beq.w	800ad3c <__ssvfiscanf_r+0x2e8>
 800ae8a:	e6e4      	b.n	800ac56 <__ssvfiscanf_r+0x202>
 800ae8c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800ae90:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800ae94:	6030      	str	r0, [r6, #0]
 800ae96:	45ca      	cmp	sl, r9
 800ae98:	d313      	bcc.n	800aec2 <__ssvfiscanf_r+0x46e>
 800ae9a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800ae9e:	4599      	cmp	r9, r3
 800aea0:	f63f af7b 	bhi.w	800ad9a <__ssvfiscanf_r+0x346>
 800aea4:	f109 0908 	add.w	r9, r9, #8
 800aea8:	f8db 0000 	ldr.w	r0, [fp]
 800aeac:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800aeb0:	f001 fe30 	bl	800cb14 <realloc>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f43f af70 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800aeba:	f8cb 0000 	str.w	r0, [fp]
 800aebe:	f8ab 9004 	strh.w	r9, [fp, #4]
 800aec2:	f8db 3000 	ldr.w	r3, [fp]
 800aec6:	f10a 0201 	add.w	r2, sl, #1
 800aeca:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800aece:	f8ab 2006 	strh.w	r2, [fp, #6]
 800aed2:	46b2      	mov	sl, r6
 800aed4:	f04f 0920 	mov.w	r9, #32
 800aed8:	4646      	mov	r6, r8
 800aeda:	2200      	movs	r2, #0
 800aedc:	60fa      	str	r2, [r7, #12]
 800aede:	f001 fda9 	bl	800ca34 <__locale_mb_cur_max>
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	4290      	cmp	r0, r2
 800aee6:	f43f aeb6 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800aeea:	6821      	ldr	r1, [r4, #0]
 800aeec:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800aef0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800aef4:	f80c 0002 	strb.w	r0, [ip, r2]
 800aef8:	1c53      	adds	r3, r2, #1
 800aefa:	6862      	ldr	r2, [r4, #4]
 800aefc:	3a01      	subs	r2, #1
 800aefe:	e9c4 1200 	strd	r1, r2, [r4]
 800af02:	6a3a      	ldr	r2, [r7, #32]
 800af04:	2a03      	cmp	r2, #3
 800af06:	d102      	bne.n	800af0e <__ssvfiscanf_r+0x4ba>
 800af08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af0a:	2a04      	cmp	r2, #4
 800af0c:	d007      	beq.n	800af1e <__ssvfiscanf_r+0x4ca>
 800af0e:	2208      	movs	r2, #8
 800af10:	2100      	movs	r1, #0
 800af12:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800af16:	623b      	str	r3, [r7, #32]
 800af18:	f7fb fc28 	bl	800676c <memset>
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800af24:	9200      	str	r2, [sp, #0]
 800af26:	ee18 0a10 	vmov	r0, s16
 800af2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800af2e:	4631      	mov	r1, r6
 800af30:	f001 fd98 	bl	800ca64 <_mbrtowc_r>
 800af34:	1c42      	adds	r2, r0, #1
 800af36:	6238      	str	r0, [r7, #32]
 800af38:	f43f ae8d 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2800      	cmp	r0, #0
 800af40:	d135      	bne.n	800afae <__ssvfiscanf_r+0x55a>
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	b902      	cbnz	r2, 800af48 <__ssvfiscanf_r+0x4f4>
 800af46:	6032      	str	r2, [r6, #0]
 800af48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4a:	441a      	add	r2, r3
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af50:	2b03      	cmp	r3, #3
 800af52:	d102      	bne.n	800af5a <__ssvfiscanf_r+0x506>
 800af54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af56:	2b04      	cmp	r3, #4
 800af58:	d000      	beq.n	800af5c <__ssvfiscanf_r+0x508>
 800af5a:	3d01      	subs	r5, #1
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	b9c3      	cbnz	r3, 800af92 <__ssvfiscanf_r+0x53e>
 800af60:	f1ba 0f00 	cmp.w	sl, #0
 800af64:	d014      	beq.n	800af90 <__ssvfiscanf_r+0x53c>
 800af66:	eba6 0308 	sub.w	r3, r6, r8
 800af6a:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800af6e:	d80f      	bhi.n	800af90 <__ssvfiscanf_r+0x53c>
 800af70:	4640      	mov	r0, r8
 800af72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	f001 fdcc 	bl	800cb14 <realloc>
 800af7c:	4680      	mov	r8, r0
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f af0b 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8ca 0000 	str.w	r0, [sl]
 800af8a:	18c6      	adds	r6, r0, r3
 800af8c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800af90:	3604      	adds	r6, #4
 800af92:	2200      	movs	r2, #0
 800af94:	e00f      	b.n	800afb6 <__ssvfiscanf_r+0x562>
 800af96:	f04f 0900 	mov.w	r9, #0
 800af9a:	62be      	str	r6, [r7, #40]	; 0x28
 800af9c:	46c8      	mov	r8, r9
 800af9e:	46ca      	mov	sl, r9
 800afa0:	464e      	mov	r6, r9
 800afa2:	e79a      	b.n	800aeda <__ssvfiscanf_r+0x486>
 800afa4:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800afa8:	46c8      	mov	r8, r9
 800afaa:	46ca      	mov	sl, r9
 800afac:	e795      	b.n	800aeda <__ssvfiscanf_r+0x486>
 800afae:	6a3a      	ldr	r2, [r7, #32]
 800afb0:	3202      	adds	r2, #2
 800afb2:	d1c9      	bne.n	800af48 <__ssvfiscanf_r+0x4f4>
 800afb4:	461a      	mov	r2, r3
 800afb6:	6863      	ldr	r3, [r4, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dc14      	bgt.n	800afe6 <__ssvfiscanf_r+0x592>
 800afbc:	ee18 0a10 	vmov	r0, s16
 800afc0:	4621      	mov	r1, r4
 800afc2:	60fa      	str	r2, [r7, #12]
 800afc4:	f7ff fcf1 	bl	800a9aa <__ssrefill_r>
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	b160      	cbz	r0, 800afe6 <__ssvfiscanf_r+0x592>
 800afcc:	2a00      	cmp	r2, #0
 800afce:	f47f ae42 	bne.w	800ac56 <__ssvfiscanf_r+0x202>
 800afd2:	f1ba 0f00 	cmp.w	sl, #0
 800afd6:	d10a      	bne.n	800afee <__ssvfiscanf_r+0x59a>
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	b913      	cbnz	r3, 800afe2 <__ssvfiscanf_r+0x58e>
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	3301      	adds	r3, #1
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
 800afe2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800afe4:	e553      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	f47f af78 	bne.w	800aedc <__ssvfiscanf_r+0x488>
 800afec:	e7f1      	b.n	800afd2 <__ssvfiscanf_r+0x57e>
 800afee:	eba6 0108 	sub.w	r1, r6, r8
 800aff2:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800aff6:	d9ef      	bls.n	800afd8 <__ssvfiscanf_r+0x584>
 800aff8:	f8da 0000 	ldr.w	r0, [sl]
 800affc:	f001 fd8a 	bl	800cb14 <realloc>
 800b000:	2800      	cmp	r0, #0
 800b002:	d0e9      	beq.n	800afd8 <__ssvfiscanf_r+0x584>
 800b004:	f8ca 0000 	str.w	r0, [sl]
 800b008:	e7e6      	b.n	800afd8 <__ssvfiscanf_r+0x584>
 800b00a:	bf00      	nop
 800b00c:	0800e429 	.word	0x0800e429
 800b010:	08006da5 	.word	0x08006da5
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	b1e2      	cbz	r2, 800b052 <__ssvfiscanf_r+0x5fe>
 800b018:	4698      	mov	r8, r3
 800b01a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b01e:	429d      	cmp	r5, r3
 800b020:	dd11      	ble.n	800b046 <__ssvfiscanf_r+0x5f2>
 800b022:	4498      	add	r8, r3
 800b024:	1aed      	subs	r5, r5, r3
 800b026:	4413      	add	r3, r2
 800b028:	ee18 0a10 	vmov	r0, s16
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	4621      	mov	r1, r4
 800b030:	f7ff fcbb 	bl	800a9aa <__ssrefill_r>
 800b034:	2800      	cmp	r0, #0
 800b036:	d0f0      	beq.n	800b01a <__ssvfiscanf_r+0x5c6>
 800b038:	f1b8 0f00 	cmp.w	r8, #0
 800b03c:	f43f ae0b 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b042:	4443      	add	r3, r8
 800b044:	e5fe      	b.n	800ac44 <__ssvfiscanf_r+0x1f0>
 800b046:	1b5b      	subs	r3, r3, r5
 800b048:	44a8      	add	r8, r5
 800b04a:	4415      	add	r5, r2
 800b04c:	6063      	str	r3, [r4, #4]
 800b04e:	6025      	str	r5, [r4, #0]
 800b050:	e7f6      	b.n	800b040 <__ssvfiscanf_r+0x5ec>
 800b052:	46b0      	mov	r8, r6
 800b054:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800b058:	f858 6b04 	ldr.w	r6, [r8], #4
 800b05c:	d02e      	beq.n	800b0bc <__ssvfiscanf_r+0x668>
 800b05e:	2e00      	cmp	r6, #0
 800b060:	f43f ad52 	beq.w	800ab08 <__ssvfiscanf_r+0xb4>
 800b064:	4628      	mov	r0, r5
 800b066:	f7fe fd59 	bl	8009b1c <malloc>
 800b06a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b06c:	2800      	cmp	r0, #0
 800b06e:	f43f adf8 	beq.w	800ac62 <__ssvfiscanf_r+0x20e>
 800b072:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800b076:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800b07a:	6030      	str	r0, [r6, #0]
 800b07c:	45ca      	cmp	sl, r9
 800b07e:	d313      	bcc.n	800b0a8 <__ssvfiscanf_r+0x654>
 800b080:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800b084:	4599      	cmp	r9, r3
 800b086:	f63f ae91 	bhi.w	800adac <__ssvfiscanf_r+0x358>
 800b08a:	f109 0908 	add.w	r9, r9, #8
 800b08e:	f8db 0000 	ldr.w	r0, [fp]
 800b092:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800b096:	f001 fd3d 	bl	800cb14 <realloc>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f ae86 	beq.w	800adac <__ssvfiscanf_r+0x358>
 800b0a0:	f8cb 0000 	str.w	r0, [fp]
 800b0a4:	f8ab 9004 	strh.w	r9, [fp, #4]
 800b0a8:	f8db 3000 	ldr.w	r3, [fp]
 800b0ac:	f10a 0201 	add.w	r2, sl, #1
 800b0b0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800b0b4:	46b1      	mov	r9, r6
 800b0b6:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800b0b8:	f8ab 2006 	strh.w	r2, [fp, #6]
 800b0bc:	4631      	mov	r1, r6
 800b0be:	ee18 0a10 	vmov	r0, s16
 800b0c2:	9400      	str	r4, [sp, #0]
 800b0c4:	462b      	mov	r3, r5
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f7ff fc8c 	bl	800a9e4 <_sfread_r>
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f adc1 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b0d4:	f1b9 0f00 	cmp.w	r9, #0
 800b0d8:	d009      	beq.n	800b0ee <__ssvfiscanf_r+0x69a>
 800b0da:	4285      	cmp	r5, r0
 800b0dc:	d907      	bls.n	800b0ee <__ssvfiscanf_r+0x69a>
 800b0de:	4601      	mov	r1, r0
 800b0e0:	f8d9 0000 	ldr.w	r0, [r9]
 800b0e4:	f001 fd16 	bl	800cb14 <realloc>
 800b0e8:	b108      	cbz	r0, 800b0ee <__ssvfiscanf_r+0x69a>
 800b0ea:	f8c9 0000 	str.w	r0, [r9]
 800b0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f0:	4433      	add	r3, r6
 800b0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0fa:	4646      	mov	r6, r8
 800b0fc:	e4c7      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800b0fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b100:	2a00      	cmp	r2, #0
 800b102:	bf08      	it	eq
 800b104:	f04f 32ff 	moveq.w	r2, #4294967295
 800b108:	461d      	mov	r5, r3
 800b10a:	62ba      	str	r2, [r7, #40]	; 0x28
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2d00      	cmp	r5, #0
 800b110:	f000 8105 	beq.w	800b31e <__ssvfiscanf_r+0x8ca>
 800b114:	2b00      	cmp	r3, #0
 800b116:	f040 80a5 	bne.w	800b264 <__ssvfiscanf_r+0x810>
 800b11a:	4633      	mov	r3, r6
 800b11c:	f019 0f80 	tst.w	r9, #128	; 0x80
 800b120:	f853 5b04 	ldr.w	r5, [r3], #4
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	f000 80a6 	beq.w	800b276 <__ssvfiscanf_r+0x822>
 800b12a:	2d00      	cmp	r5, #0
 800b12c:	f43f ae38 	beq.w	800ada0 <__ssvfiscanf_r+0x34c>
 800b130:	2080      	movs	r0, #128	; 0x80
 800b132:	f7fe fcf3 	bl	8009b1c <malloc>
 800b136:	4680      	mov	r8, r0
 800b138:	2800      	cmp	r0, #0
 800b13a:	f43f ae2e 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800b13e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 800b142:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 800b146:	6028      	str	r0, [r5, #0]
 800b148:	45b1      	cmp	r9, r6
 800b14a:	d311      	bcc.n	800b170 <__ssvfiscanf_r+0x71c>
 800b14c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800b150:	429e      	cmp	r6, r3
 800b152:	f63f ae22 	bhi.w	800ad9a <__ssvfiscanf_r+0x346>
 800b156:	3608      	adds	r6, #8
 800b158:	f8db 0000 	ldr.w	r0, [fp]
 800b15c:	00b1      	lsls	r1, r6, #2
 800b15e:	f001 fcd9 	bl	800cb14 <realloc>
 800b162:	2800      	cmp	r0, #0
 800b164:	f43f ae19 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800b168:	f8cb 0000 	str.w	r0, [fp]
 800b16c:	f8ab 6004 	strh.w	r6, [fp, #4]
 800b170:	f8db 3000 	ldr.w	r3, [fp]
 800b174:	60fd      	str	r5, [r7, #12]
 800b176:	f109 0201 	add.w	r2, r9, #1
 800b17a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800b17e:	f8ab 2006 	strh.w	r2, [fp, #6]
 800b182:	4645      	mov	r5, r8
 800b184:	f04f 0920 	mov.w	r9, #32
 800b188:	2600      	movs	r6, #0
 800b18a:	f001 fc53 	bl	800ca34 <__locale_mb_cur_max>
 800b18e:	42b0      	cmp	r0, r6
 800b190:	f43f ad61 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b194:	1c73      	adds	r3, r6, #1
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b19e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a2:	558a      	strb	r2, [r1, r6]
 800b1a4:	6862      	ldr	r2, [r4, #4]
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	e9c4 3200 	strd	r3, r2, [r4]
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d102      	bne.n	800b1b8 <__ssvfiscanf_r+0x764>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d005      	beq.n	800b1c4 <__ssvfiscanf_r+0x770>
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800b1c0:	f7fb fad4 	bl	800676c <memset>
 800b1c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	ee18 0a10 	vmov	r0, s16
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	f001 fc45 	bl	800ca64 <_mbrtowc_r>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	6238      	str	r0, [r7, #32]
 800b1de:	1c58      	adds	r0, r3, #1
 800b1e0:	f43f ad39 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d14c      	bne.n	800b282 <__ssvfiscanf_r+0x82e>
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	682e      	ldr	r6, [r5, #0]
 800b1ec:	1c71      	adds	r1, r6, #1
 800b1ee:	d059      	beq.n	800b2a4 <__ssvfiscanf_r+0x850>
 800b1f0:	2208      	movs	r2, #8
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800b1f8:	f7fb fab8 	bl	800676c <memset>
 800b1fc:	4b9d      	ldr	r3, [pc, #628]	; (800b474 <__ssvfiscanf_r+0xa20>)
 800b1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	4632      	mov	r2, r6
 800b206:	ee18 0a10 	vmov	r0, s16
 800b20a:	683e      	ldr	r6, [r7, #0]
 800b20c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b210:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b214:	47b0      	blx	r6
 800b216:	2801      	cmp	r0, #1
 800b218:	d146      	bne.n	800b2a8 <__ssvfiscanf_r+0x854>
 800b21a:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 800b21e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b222:	f813 300a 	ldrb.w	r3, [r3, sl]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d14b      	bne.n	800b2c2 <__ssvfiscanf_r+0x86e>
 800b22a:	f107 0648 	add.w	r6, r7, #72	; 0x48
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d13c      	bne.n	800b2ae <__ssvfiscanf_r+0x85a>
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	b99b      	cbnz	r3, 800b260 <__ssvfiscanf_r+0x80c>
 800b238:	602b      	str	r3, [r5, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	b16b      	cbz	r3, 800b25a <__ssvfiscanf_r+0x806>
 800b23e:	eba5 0108 	sub.w	r1, r5, r8
 800b242:	108b      	asrs	r3, r1, #2
 800b244:	3301      	adds	r3, #1
 800b246:	4599      	cmp	r9, r3
 800b248:	d907      	bls.n	800b25a <__ssvfiscanf_r+0x806>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3104      	adds	r1, #4
 800b24e:	6818      	ldr	r0, [r3, #0]
 800b250:	f001 fc60 	bl	800cb14 <realloc>
 800b254:	b108      	cbz	r0, 800b25a <__ssvfiscanf_r+0x806>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6018      	str	r0, [r3, #0]
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	3301      	adds	r3, #1
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
 800b260:	687e      	ldr	r6, [r7, #4]
 800b262:	e414      	b.n	800aa8e <__ssvfiscanf_r+0x3a>
 800b264:	f04f 0900 	mov.w	r9, #0
 800b268:	607e      	str	r6, [r7, #4]
 800b26a:	46c8      	mov	r8, r9
 800b26c:	f8c7 900c 	str.w	r9, [r7, #12]
 800b270:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800b274:	e788      	b.n	800b188 <__ssvfiscanf_r+0x734>
 800b276:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800b27a:	f8c7 900c 	str.w	r9, [r7, #12]
 800b27e:	46c8      	mov	r8, r9
 800b280:	e782      	b.n	800b188 <__ssvfiscanf_r+0x734>
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	3302      	adds	r3, #2
 800b286:	d1b0      	bne.n	800b1ea <__ssvfiscanf_r+0x796>
 800b288:	68be      	ldr	r6, [r7, #8]
 800b28a:	6863      	ldr	r3, [r4, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dc41      	bgt.n	800b314 <__ssvfiscanf_r+0x8c0>
 800b290:	ee18 0a10 	vmov	r0, s16
 800b294:	4621      	mov	r1, r4
 800b296:	f7ff fb88 	bl	800a9aa <__ssrefill_r>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d03a      	beq.n	800b314 <__ssvfiscanf_r+0x8c0>
 800b29e:	2e00      	cmp	r6, #0
 800b2a0:	d0c8      	beq.n	800b234 <__ssvfiscanf_r+0x7e0>
 800b2a2:	e4d8      	b.n	800ac56 <__ssvfiscanf_r+0x202>
 800b2a4:	46b2      	mov	sl, r6
 800b2a6:	e7ba      	b.n	800b21e <__ssvfiscanf_r+0x7ca>
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	e7b7      	b.n	800b21e <__ssvfiscanf_r+0x7ca>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	ee18 0a10 	vmov	r0, s16
 800b2b6:	5cf1      	ldrb	r1, [r6, r3]
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	f7ff fb38 	bl	800a930 <_sungetc_r>
 800b2c0:	e7b5      	b.n	800b22e <__ssvfiscanf_r+0x7da>
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d102      	bne.n	800b2d6 <__ssvfiscanf_r+0x882>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	2b04      	cmp	r3, #4
 800b2d4:	d002      	beq.n	800b2dc <__ssvfiscanf_r+0x888>
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	b9bb      	cbnz	r3, 800b310 <__ssvfiscanf_r+0x8bc>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	3504      	adds	r5, #4
 800b2e4:	b1a3      	cbz	r3, 800b310 <__ssvfiscanf_r+0x8bc>
 800b2e6:	eba5 0608 	sub.w	r6, r5, r8
 800b2ea:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 800b2ee:	d80d      	bhi.n	800b30c <__ssvfiscanf_r+0x8b8>
 800b2f0:	4640      	mov	r0, r8
 800b2f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2f6:	f001 fc0d 	bl	800cb14 <realloc>
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f43f ad4c 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	1985      	adds	r5, r0, r6
 800b306:	6018      	str	r0, [r3, #0]
 800b308:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b30c:	69be      	ldr	r6, [r7, #24]
 800b30e:	e7bc      	b.n	800b28a <__ssvfiscanf_r+0x836>
 800b310:	2600      	movs	r6, #0
 800b312:	e7ba      	b.n	800b28a <__ssvfiscanf_r+0x836>
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	2b00      	cmp	r3, #0
 800b318:	f47f af37 	bne.w	800b18a <__ssvfiscanf_r+0x736>
 800b31c:	e78a      	b.n	800b234 <__ssvfiscanf_r+0x7e0>
 800b31e:	b1f3      	cbz	r3, 800b35e <__ssvfiscanf_r+0x90a>
 800b320:	f107 0870 	add.w	r8, r7, #112	; 0x70
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	781a      	ldrb	r2, [r3, #0]
 800b328:	f818 2002 	ldrb.w	r2, [r8, r2]
 800b32c:	b912      	cbnz	r2, 800b334 <__ssvfiscanf_r+0x8e0>
 800b32e:	b99d      	cbnz	r5, 800b358 <__ssvfiscanf_r+0x904>
 800b330:	f7ff bbea 	b.w	800ab08 <__ssvfiscanf_r+0xb4>
 800b334:	3301      	adds	r3, #1
 800b336:	6862      	ldr	r2, [r4, #4]
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	3501      	adds	r5, #1
 800b33e:	3a01      	subs	r2, #1
 800b340:	42ab      	cmp	r3, r5
 800b342:	6062      	str	r2, [r4, #4]
 800b344:	d008      	beq.n	800b358 <__ssvfiscanf_r+0x904>
 800b346:	2a00      	cmp	r2, #0
 800b348:	dcec      	bgt.n	800b324 <__ssvfiscanf_r+0x8d0>
 800b34a:	ee18 0a10 	vmov	r0, s16
 800b34e:	4621      	mov	r1, r4
 800b350:	f7ff fb2b 	bl	800a9aa <__ssrefill_r>
 800b354:	2800      	cmp	r0, #0
 800b356:	d0e5      	beq.n	800b324 <__ssvfiscanf_r+0x8d0>
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	442b      	add	r3, r5
 800b35c:	e472      	b.n	800ac44 <__ssvfiscanf_r+0x1f0>
 800b35e:	4633      	mov	r3, r6
 800b360:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 800b364:	f853 6b04 	ldr.w	r6, [r3], #4
 800b368:	61bb      	str	r3, [r7, #24]
 800b36a:	f000 8081 	beq.w	800b470 <__ssvfiscanf_r+0xa1c>
 800b36e:	2e00      	cmp	r6, #0
 800b370:	f43f abca 	beq.w	800ab08 <__ssvfiscanf_r+0xb4>
 800b374:	2020      	movs	r0, #32
 800b376:	f7fe fbd1 	bl	8009b1c <malloc>
 800b37a:	4680      	mov	r8, r0
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f43f ac70 	beq.w	800ac62 <__ssvfiscanf_r+0x20e>
 800b382:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 800b386:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 800b38a:	6030      	str	r0, [r6, #0]
 800b38c:	45a9      	cmp	r9, r5
 800b38e:	d311      	bcc.n	800b3b4 <__ssvfiscanf_r+0x960>
 800b390:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800b394:	429d      	cmp	r5, r3
 800b396:	f63f ad09 	bhi.w	800adac <__ssvfiscanf_r+0x358>
 800b39a:	3508      	adds	r5, #8
 800b39c:	f8db 0000 	ldr.w	r0, [fp]
 800b3a0:	00a9      	lsls	r1, r5, #2
 800b3a2:	f001 fbb7 	bl	800cb14 <realloc>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f43f ad00 	beq.w	800adac <__ssvfiscanf_r+0x358>
 800b3ac:	f8cb 0000 	str.w	r0, [fp]
 800b3b0:	f8ab 5004 	strh.w	r5, [fp, #4]
 800b3b4:	f8db 3000 	ldr.w	r3, [fp]
 800b3b8:	f109 0201 	add.w	r2, r9, #1
 800b3bc:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800b3c0:	46b2      	mov	sl, r6
 800b3c2:	f8ab 2006 	strh.w	r2, [fp, #6]
 800b3c6:	4646      	mov	r6, r8
 800b3c8:	2520      	movs	r5, #32
 800b3ca:	46b0      	mov	r8, r6
 800b3cc:	f107 0970 	add.w	r9, r7, #112	; 0x70
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	f819 2002 	ldrb.w	r2, [r9, r2]
 800b3d8:	b36a      	cbz	r2, 800b436 <__ssvfiscanf_r+0x9e2>
 800b3da:	6862      	ldr	r2, [r4, #4]
 800b3dc:	3a01      	subs	r2, #1
 800b3de:	6062      	str	r2, [r4, #4]
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	f806 3b01 	strb.w	r3, [r6], #1
 800b3ea:	f1ba 0f00 	cmp.w	sl, #0
 800b3ee:	d011      	beq.n	800b414 <__ssvfiscanf_r+0x9c0>
 800b3f0:	eba6 0308 	sub.w	r3, r6, r8
 800b3f4:	42ab      	cmp	r3, r5
 800b3f6:	d30d      	bcc.n	800b414 <__ssvfiscanf_r+0x9c0>
 800b3f8:	006d      	lsls	r5, r5, #1
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	f001 fb88 	bl	800cb14 <realloc>
 800b404:	4680      	mov	r8, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f ac2b 	beq.w	800ac62 <__ssvfiscanf_r+0x20e>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8ca 0000 	str.w	r0, [sl]
 800b412:	18c6      	adds	r6, r0, r3
 800b414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b416:	3b01      	subs	r3, #1
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28
 800b41a:	d00c      	beq.n	800b436 <__ssvfiscanf_r+0x9e2>
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dcd6      	bgt.n	800b3d0 <__ssvfiscanf_r+0x97c>
 800b422:	ee18 0a10 	vmov	r0, s16
 800b426:	4621      	mov	r1, r4
 800b428:	f7ff fabf 	bl	800a9aa <__ssrefill_r>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d0cf      	beq.n	800b3d0 <__ssvfiscanf_r+0x97c>
 800b430:	4546      	cmp	r6, r8
 800b432:	f43f ac10 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b436:	ebb6 0808 	subs.w	r8, r6, r8
 800b43a:	f43f ab65 	beq.w	800ab08 <__ssvfiscanf_r+0xb4>
 800b43e:	2300      	movs	r3, #0
 800b440:	7033      	strb	r3, [r6, #0]
 800b442:	f1ba 0f00 	cmp.w	sl, #0
 800b446:	d00a      	beq.n	800b45e <__ssvfiscanf_r+0xa0a>
 800b448:	f108 0101 	add.w	r1, r8, #1
 800b44c:	428d      	cmp	r5, r1
 800b44e:	d906      	bls.n	800b45e <__ssvfiscanf_r+0xa0a>
 800b450:	f8da 0000 	ldr.w	r0, [sl]
 800b454:	f001 fb5e 	bl	800cb14 <realloc>
 800b458:	b108      	cbz	r0, 800b45e <__ssvfiscanf_r+0xa0a>
 800b45a:	f8ca 0000 	str.w	r0, [sl]
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	3301      	adds	r3, #1
 800b462:	627b      	str	r3, [r7, #36]	; 0x24
 800b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b466:	4443      	add	r3, r8
 800b468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b46a:	69be      	ldr	r6, [r7, #24]
 800b46c:	f7ff bb0f 	b.w	800aa8e <__ssvfiscanf_r+0x3a>
 800b470:	46aa      	mov	sl, r5
 800b472:	e7aa      	b.n	800b3ca <__ssvfiscanf_r+0x976>
 800b474:	200008c0 	.word	0x200008c0
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bf08      	it	eq
 800b47e:	f04f 33ff 	moveq.w	r3, #4294967295
 800b482:	f019 0501 	ands.w	r5, r9, #1
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
 800b488:	f009 0810 	and.w	r8, r9, #16
 800b48c:	f000 80f5 	beq.w	800b67a <__ssvfiscanf_r+0xc26>
 800b490:	f1b8 0f00 	cmp.w	r8, #0
 800b494:	f040 809a 	bne.w	800b5cc <__ssvfiscanf_r+0xb78>
 800b498:	4633      	mov	r3, r6
 800b49a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800b49e:	f853 5b04 	ldr.w	r5, [r3], #4
 800b4a2:	61bb      	str	r3, [r7, #24]
 800b4a4:	f000 809a 	beq.w	800b5dc <__ssvfiscanf_r+0xb88>
 800b4a8:	2d00      	cmp	r5, #0
 800b4aa:	f43f ac79 	beq.w	800ada0 <__ssvfiscanf_r+0x34c>
 800b4ae:	2080      	movs	r0, #128	; 0x80
 800b4b0:	f7fe fb34 	bl	8009b1c <malloc>
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	f43f ac6f 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800b4bc:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800b4c0:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 800b4c4:	6028      	str	r0, [r5, #0]
 800b4c6:	45ca      	cmp	sl, r9
 800b4c8:	d313      	bcc.n	800b4f2 <__ssvfiscanf_r+0xa9e>
 800b4ca:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800b4ce:	4599      	cmp	r9, r3
 800b4d0:	f63f ac63 	bhi.w	800ad9a <__ssvfiscanf_r+0x346>
 800b4d4:	f109 0908 	add.w	r9, r9, #8
 800b4d8:	f8db 0000 	ldr.w	r0, [fp]
 800b4dc:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800b4e0:	f001 fb18 	bl	800cb14 <realloc>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	f43f ac58 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800b4ea:	f8cb 0000 	str.w	r0, [fp]
 800b4ee:	f8ab 9004 	strh.w	r9, [fp, #4]
 800b4f2:	f8db 3000 	ldr.w	r3, [fp]
 800b4f6:	f10a 0201 	add.w	r2, sl, #1
 800b4fa:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800b4fe:	f8ab 2006 	strh.w	r2, [fp, #6]
 800b502:	46aa      	mov	sl, r5
 800b504:	f04f 0920 	mov.w	r9, #32
 800b508:	4635      	mov	r5, r6
 800b50a:	2200      	movs	r2, #0
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	49ab      	ldr	r1, [pc, #684]	; (800b7bc <__ssvfiscanf_r+0xd68>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	5c5b      	ldrb	r3, [r3, r1]
 800b514:	0718      	lsls	r0, r3, #28
 800b516:	d43f      	bmi.n	800b598 <__ssvfiscanf_r+0xb44>
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d03c      	beq.n	800b598 <__ssvfiscanf_r+0xb44>
 800b51e:	60fa      	str	r2, [r7, #12]
 800b520:	f001 fa88 	bl	800ca34 <__locale_mb_cur_max>
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	4290      	cmp	r0, r2
 800b528:	f43f ab95 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b52c:	6821      	ldr	r1, [r4, #0]
 800b52e:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 800b532:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b536:	f80c 0002 	strb.w	r0, [ip, r2]
 800b53a:	1c53      	adds	r3, r2, #1
 800b53c:	6862      	ldr	r2, [r4, #4]
 800b53e:	3a01      	subs	r2, #1
 800b540:	e9c4 1200 	strd	r1, r2, [r4]
 800b544:	6a3a      	ldr	r2, [r7, #32]
 800b546:	2a03      	cmp	r2, #3
 800b548:	d102      	bne.n	800b550 <__ssvfiscanf_r+0xafc>
 800b54a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b54c:	2a04      	cmp	r2, #4
 800b54e:	d007      	beq.n	800b560 <__ssvfiscanf_r+0xb0c>
 800b550:	2208      	movs	r2, #8
 800b552:	2100      	movs	r1, #0
 800b554:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800b558:	623b      	str	r3, [r7, #32]
 800b55a:	f7fb f907 	bl	800676c <memset>
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	60fb      	str	r3, [r7, #12]
 800b562:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b566:	9200      	str	r2, [sp, #0]
 800b568:	ee18 0a10 	vmov	r0, s16
 800b56c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b570:	4629      	mov	r1, r5
 800b572:	f001 fa77 	bl	800ca64 <_mbrtowc_r>
 800b576:	1c42      	adds	r2, r0, #1
 800b578:	6238      	str	r0, [r7, #32]
 800b57a:	f43f ab6c 	beq.w	800ac56 <__ssvfiscanf_r+0x202>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	bb80      	cbnz	r0, 800b5e4 <__ssvfiscanf_r+0xb90>
 800b582:	6028      	str	r0, [r5, #0]
 800b584:	6828      	ldr	r0, [r5, #0]
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	f001 fa46 	bl	800ca18 <iswspace>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4602      	mov	r2, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d047      	beq.n	800b624 <__ssvfiscanf_r+0xbd0>
 800b594:	2b00      	cmp	r3, #0
 800b596:	d139      	bne.n	800b60c <__ssvfiscanf_r+0xbb8>
 800b598:	f1b8 0f00 	cmp.w	r8, #0
 800b59c:	f47f af65 	bne.w	800b46a <__ssvfiscanf_r+0xa16>
 800b5a0:	f8c5 8000 	str.w	r8, [r5]
 800b5a4:	f1ba 0f00 	cmp.w	sl, #0
 800b5a8:	d00c      	beq.n	800b5c4 <__ssvfiscanf_r+0xb70>
 800b5aa:	1ba9      	subs	r1, r5, r6
 800b5ac:	108b      	asrs	r3, r1, #2
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	4599      	cmp	r9, r3
 800b5b2:	d907      	bls.n	800b5c4 <__ssvfiscanf_r+0xb70>
 800b5b4:	f8da 0000 	ldr.w	r0, [sl]
 800b5b8:	3104      	adds	r1, #4
 800b5ba:	f001 faab 	bl	800cb14 <realloc>
 800b5be:	b108      	cbz	r0, 800b5c4 <__ssvfiscanf_r+0xb70>
 800b5c0:	f8ca 0000 	str.w	r0, [sl]
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ca:	e74e      	b.n	800b46a <__ssvfiscanf_r+0xa16>
 800b5cc:	f04f 0900 	mov.w	r9, #0
 800b5d0:	61be      	str	r6, [r7, #24]
 800b5d2:	46ca      	mov	sl, r9
 800b5d4:	464e      	mov	r6, r9
 800b5d6:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800b5da:	e796      	b.n	800b50a <__ssvfiscanf_r+0xab6>
 800b5dc:	46c1      	mov	r9, r8
 800b5de:	4646      	mov	r6, r8
 800b5e0:	46c2      	mov	sl, r8
 800b5e2:	e792      	b.n	800b50a <__ssvfiscanf_r+0xab6>
 800b5e4:	6a3a      	ldr	r2, [r7, #32]
 800b5e6:	3202      	adds	r2, #2
 800b5e8:	d1cc      	bne.n	800b584 <__ssvfiscanf_r+0xb30>
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6863      	ldr	r3, [r4, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	dc8c      	bgt.n	800b50c <__ssvfiscanf_r+0xab8>
 800b5f2:	ee18 0a10 	vmov	r0, s16
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	60fa      	str	r2, [r7, #12]
 800b5fa:	f7ff f9d6 	bl	800a9aa <__ssrefill_r>
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	2800      	cmp	r0, #0
 800b602:	d083      	beq.n	800b50c <__ssvfiscanf_r+0xab8>
 800b604:	2a00      	cmp	r2, #0
 800b606:	f47f ab26 	bne.w	800ac56 <__ssvfiscanf_r+0x202>
 800b60a:	e7c5      	b.n	800b598 <__ssvfiscanf_r+0xb44>
 800b60c:	3b01      	subs	r3, #1
 800b60e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b612:	ee18 0a10 	vmov	r0, s16
 800b616:	5cc9      	ldrb	r1, [r1, r3]
 800b618:	62bb      	str	r3, [r7, #40]	; 0x28
 800b61a:	4622      	mov	r2, r4
 800b61c:	f7ff f988 	bl	800a930 <_sungetc_r>
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	e7b7      	b.n	800b594 <__ssvfiscanf_r+0xb40>
 800b624:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b626:	4419      	add	r1, r3
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d102      	bne.n	800b636 <__ssvfiscanf_r+0xbe2>
 800b630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b632:	2b04      	cmp	r3, #4
 800b634:	d002      	beq.n	800b63c <__ssvfiscanf_r+0xbe8>
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	3b01      	subs	r3, #1
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b63c:	f1b8 0f00 	cmp.w	r8, #0
 800b640:	d1d4      	bne.n	800b5ec <__ssvfiscanf_r+0xb98>
 800b642:	3504      	adds	r5, #4
 800b644:	f1ba 0f00 	cmp.w	sl, #0
 800b648:	d015      	beq.n	800b676 <__ssvfiscanf_r+0xc22>
 800b64a:	1bab      	subs	r3, r5, r6
 800b64c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800b650:	d80f      	bhi.n	800b672 <__ssvfiscanf_r+0xc1e>
 800b652:	4630      	mov	r0, r6
 800b654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b658:	60fb      	str	r3, [r7, #12]
 800b65a:	f001 fa5b 	bl	800cb14 <realloc>
 800b65e:	4606      	mov	r6, r0
 800b660:	2800      	cmp	r0, #0
 800b662:	f43f ab9a 	beq.w	800ad9a <__ssvfiscanf_r+0x346>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8ca 0000 	str.w	r0, [sl]
 800b66c:	18c5      	adds	r5, r0, r3
 800b66e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b672:	4642      	mov	r2, r8
 800b674:	e7ba      	b.n	800b5ec <__ssvfiscanf_r+0xb98>
 800b676:	4652      	mov	r2, sl
 800b678:	e7b8      	b.n	800b5ec <__ssvfiscanf_r+0xb98>
 800b67a:	f1b8 0f00 	cmp.w	r8, #0
 800b67e:	d01a      	beq.n	800b6b6 <__ssvfiscanf_r+0xc62>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	494e      	ldr	r1, [pc, #312]	; (800b7bc <__ssvfiscanf_r+0xd68>)
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	5c52      	ldrb	r2, [r2, r1]
 800b688:	0711      	lsls	r1, r2, #28
 800b68a:	f53f ae65 	bmi.w	800b358 <__ssvfiscanf_r+0x904>
 800b68e:	3301      	adds	r3, #1
 800b690:	6862      	ldr	r2, [r4, #4]
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	3501      	adds	r5, #1
 800b698:	3a01      	subs	r2, #1
 800b69a:	42ab      	cmp	r3, r5
 800b69c:	6062      	str	r2, [r4, #4]
 800b69e:	f43f ae5b 	beq.w	800b358 <__ssvfiscanf_r+0x904>
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	dcec      	bgt.n	800b680 <__ssvfiscanf_r+0xc2c>
 800b6a6:	ee18 0a10 	vmov	r0, s16
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	f7ff f97d 	bl	800a9aa <__ssrefill_r>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d0e5      	beq.n	800b680 <__ssvfiscanf_r+0xc2c>
 800b6b4:	e650      	b.n	800b358 <__ssvfiscanf_r+0x904>
 800b6b6:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800b6ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6be:	d07b      	beq.n	800b7b8 <__ssvfiscanf_r+0xd64>
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	f43f aa21 	beq.w	800ab08 <__ssvfiscanf_r+0xb4>
 800b6c6:	2020      	movs	r0, #32
 800b6c8:	f7fe fa28 	bl	8009b1c <malloc>
 800b6cc:	4681      	mov	r9, r0
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f43f aac7 	beq.w	800ac62 <__ssvfiscanf_r+0x20e>
 800b6d4:	f8bb a006 	ldrh.w	sl, [fp, #6]
 800b6d8:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 800b6dc:	6028      	str	r0, [r5, #0]
 800b6de:	45c2      	cmp	sl, r8
 800b6e0:	d313      	bcc.n	800b70a <__ssvfiscanf_r+0xcb6>
 800b6e2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800b6e6:	4598      	cmp	r8, r3
 800b6e8:	f63f ab60 	bhi.w	800adac <__ssvfiscanf_r+0x358>
 800b6ec:	f108 0808 	add.w	r8, r8, #8
 800b6f0:	f8db 0000 	ldr.w	r0, [fp]
 800b6f4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800b6f8:	f001 fa0c 	bl	800cb14 <realloc>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	f43f ab55 	beq.w	800adac <__ssvfiscanf_r+0x358>
 800b702:	f8cb 0000 	str.w	r0, [fp]
 800b706:	f8ab 8004 	strh.w	r8, [fp, #4]
 800b70a:	f8db 3000 	ldr.w	r3, [fp]
 800b70e:	f10a 0201 	add.w	r2, sl, #1
 800b712:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800b716:	f8ab 2006 	strh.w	r2, [fp, #6]
 800b71a:	46aa      	mov	sl, r5
 800b71c:	464d      	mov	r5, r9
 800b71e:	f04f 0920 	mov.w	r9, #32
 800b722:	46a8      	mov	r8, r5
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	4925      	ldr	r1, [pc, #148]	; (800b7bc <__ssvfiscanf_r+0xd68>)
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	5c52      	ldrb	r2, [r2, r1]
 800b72c:	0712      	lsls	r2, r2, #28
 800b72e:	d42b      	bmi.n	800b788 <__ssvfiscanf_r+0xd34>
 800b730:	6862      	ldr	r2, [r4, #4]
 800b732:	3a01      	subs	r2, #1
 800b734:	6062      	str	r2, [r4, #4]
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	6022      	str	r2, [r4, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	f805 3b01 	strb.w	r3, [r5], #1
 800b740:	f1ba 0f00 	cmp.w	sl, #0
 800b744:	d012      	beq.n	800b76c <__ssvfiscanf_r+0xd18>
 800b746:	eba5 0308 	sub.w	r3, r5, r8
 800b74a:	454b      	cmp	r3, r9
 800b74c:	d30e      	bcc.n	800b76c <__ssvfiscanf_r+0xd18>
 800b74e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b752:	4640      	mov	r0, r8
 800b754:	4649      	mov	r1, r9
 800b756:	61bb      	str	r3, [r7, #24]
 800b758:	f001 f9dc 	bl	800cb14 <realloc>
 800b75c:	4680      	mov	r8, r0
 800b75e:	2800      	cmp	r0, #0
 800b760:	f43f aa7f 	beq.w	800ac62 <__ssvfiscanf_r+0x20e>
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	f8ca 0000 	str.w	r0, [sl]
 800b76a:	18c5      	adds	r5, r0, r3
 800b76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76e:	3b01      	subs	r3, #1
 800b770:	62bb      	str	r3, [r7, #40]	; 0x28
 800b772:	d009      	beq.n	800b788 <__ssvfiscanf_r+0xd34>
 800b774:	6863      	ldr	r3, [r4, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	dcd4      	bgt.n	800b724 <__ssvfiscanf_r+0xcd0>
 800b77a:	ee18 0a10 	vmov	r0, s16
 800b77e:	4621      	mov	r1, r4
 800b780:	f7ff f913 	bl	800a9aa <__ssrefill_r>
 800b784:	2800      	cmp	r0, #0
 800b786:	d0cd      	beq.n	800b724 <__ssvfiscanf_r+0xcd0>
 800b788:	2300      	movs	r3, #0
 800b78a:	702b      	strb	r3, [r5, #0]
 800b78c:	eba5 0508 	sub.w	r5, r5, r8
 800b790:	f1ba 0f00 	cmp.w	sl, #0
 800b794:	d009      	beq.n	800b7aa <__ssvfiscanf_r+0xd56>
 800b796:	1c69      	adds	r1, r5, #1
 800b798:	4589      	cmp	r9, r1
 800b79a:	d906      	bls.n	800b7aa <__ssvfiscanf_r+0xd56>
 800b79c:	f8da 0000 	ldr.w	r0, [sl]
 800b7a0:	f001 f9b8 	bl	800cb14 <realloc>
 800b7a4:	b108      	cbz	r0, 800b7aa <__ssvfiscanf_r+0xd56>
 800b7a6:	f8ca 0000 	str.w	r0, [sl]
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	442b      	add	r3, r5
 800b7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	f7ff b96a 	b.w	800aa8c <__ssvfiscanf_r+0x38>
 800b7b8:	46ca      	mov	sl, r9
 800b7ba:	e7b2      	b.n	800b722 <__ssvfiscanf_r+0xcce>
 800b7bc:	0800e429 	.word	0x0800e429
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	2b26      	cmp	r3, #38	; 0x26
 800b7c6:	bf81      	itttt	hi
 800b7c8:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 800b7ca:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 800b7ce:	2327      	movhi	r3, #39	; 0x27
 800b7d0:	62bb      	strhi	r3, [r7, #40]	; 0x28
 800b7d2:	bf98      	it	ls
 800b7d4:	2500      	movls	r5, #0
 800b7d6:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 800b7da:	f04f 0a00 	mov.w	sl, #0
 800b7de:	f107 0848 	add.w	r8, r7, #72	; 0x48
 800b7e2:	6822      	ldr	r2, [r4, #0]
 800b7e4:	7813      	ldrb	r3, [r2, #0]
 800b7e6:	2b39      	cmp	r3, #57	; 0x39
 800b7e8:	d80f      	bhi.n	800b80a <__ssvfiscanf_r+0xdb6>
 800b7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ec:	d91a      	bls.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b7ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b7f2:	290e      	cmp	r1, #14
 800b7f4:	d816      	bhi.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b7f6:	e8df f001 	tbb	[pc, r1]
 800b7fa:	1577      	.short	0x1577
 800b7fc:	41151577 	.word	0x41151577
 800b800:	67676767 	.word	0x67676767
 800b804:	6f676767 	.word	0x6f676767
 800b808:	6f          	.byte	0x6f
 800b809:	00          	.byte	0x00
 800b80a:	2b66      	cmp	r3, #102	; 0x66
 800b80c:	d834      	bhi.n	800b878 <__ssvfiscanf_r+0xe24>
 800b80e:	2b60      	cmp	r3, #96	; 0x60
 800b810:	d803      	bhi.n	800b81a <__ssvfiscanf_r+0xdc6>
 800b812:	2b46      	cmp	r3, #70	; 0x46
 800b814:	d804      	bhi.n	800b820 <__ssvfiscanf_r+0xdcc>
 800b816:	2b40      	cmp	r3, #64	; 0x40
 800b818:	d904      	bls.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b81a:	69f9      	ldr	r1, [r7, #28]
 800b81c:	290a      	cmp	r1, #10
 800b81e:	e061      	b.n	800b8e4 <__ssvfiscanf_r+0xe90>
 800b820:	2b58      	cmp	r3, #88	; 0x58
 800b822:	d067      	beq.n	800b8f4 <__ssvfiscanf_r+0xea0>
 800b824:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b828:	d012      	beq.n	800b850 <__ssvfiscanf_r+0xdfc>
 800b82a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b82e:	4598      	cmp	r8, r3
 800b830:	d909      	bls.n	800b846 <__ssvfiscanf_r+0xdf2>
 800b832:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800b836:	ee18 0a10 	vmov	r0, s16
 800b83a:	4622      	mov	r2, r4
 800b83c:	f7ff f878 	bl	800a930 <_sungetc_r>
 800b840:	f108 35ff 	add.w	r5, r8, #4294967295
 800b844:	46a8      	mov	r8, r5
 800b846:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b84a:	4598      	cmp	r8, r3
 800b84c:	f43f a95c 	beq.w	800ab08 <__ssvfiscanf_r+0xb4>
 800b850:	f019 0210 	ands.w	r2, r9, #16
 800b854:	d16b      	bne.n	800b92e <__ssvfiscanf_r+0xeda>
 800b856:	697d      	ldr	r5, [r7, #20]
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	f888 2000 	strb.w	r2, [r8]
 800b85e:	ee18 0a10 	vmov	r0, s16
 800b862:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b866:	47a8      	blx	r5
 800b868:	f019 0f20 	tst.w	r9, #32
 800b86c:	f106 0504 	add.w	r5, r6, #4
 800b870:	d054      	beq.n	800b91c <__ssvfiscanf_r+0xec8>
 800b872:	6833      	ldr	r3, [r6, #0]
 800b874:	6018      	str	r0, [r3, #0]
 800b876:	e056      	b.n	800b926 <__ssvfiscanf_r+0xed2>
 800b878:	2b78      	cmp	r3, #120	; 0x78
 800b87a:	e7d2      	b.n	800b822 <__ssvfiscanf_r+0xdce>
 800b87c:	f419 6f00 	tst.w	r9, #2048	; 0x800
 800b880:	d00a      	beq.n	800b898 <__ssvfiscanf_r+0xe44>
 800b882:	69f9      	ldr	r1, [r7, #28]
 800b884:	b919      	cbnz	r1, 800b88e <__ssvfiscanf_r+0xe3a>
 800b886:	2108      	movs	r1, #8
 800b888:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 800b88c:	61f9      	str	r1, [r7, #28]
 800b88e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 800b892:	d004      	beq.n	800b89e <__ssvfiscanf_r+0xe4a>
 800b894:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 800b898:	f808 3b01 	strb.w	r3, [r8], #1
 800b89c:	e008      	b.n	800b8b0 <__ssvfiscanf_r+0xe5c>
 800b89e:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 800b8a2:	b11d      	cbz	r5, 800b8ac <__ssvfiscanf_r+0xe58>
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	3d01      	subs	r5, #1
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8ac:	f10a 0a01 	add.w	sl, sl, #1
 800b8b0:	6863      	ldr	r3, [r4, #4]
 800b8b2:	3b01      	subs	r3, #1
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	6063      	str	r3, [r4, #4]
 800b8b8:	dd28      	ble.n	800b90c <__ssvfiscanf_r+0xeb8>
 800b8ba:	3201      	adds	r2, #1
 800b8bc:	6022      	str	r2, [r4, #0]
 800b8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8c4:	d18d      	bne.n	800b7e2 <__ssvfiscanf_r+0xd8e>
 800b8c6:	e7ad      	b.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b8c8:	69f8      	ldr	r0, [r7, #28]
 800b8ca:	4932      	ldr	r1, [pc, #200]	; (800b994 <__ssvfiscanf_r+0xf40>)
 800b8cc:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800b8d0:	61f9      	str	r1, [r7, #28]
 800b8d2:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 800b8d6:	e7df      	b.n	800b898 <__ssvfiscanf_r+0xe44>
 800b8d8:	69f8      	ldr	r0, [r7, #28]
 800b8da:	492e      	ldr	r1, [pc, #184]	; (800b994 <__ssvfiscanf_r+0xf40>)
 800b8dc:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 800b8e0:	61f9      	str	r1, [r7, #28]
 800b8e2:	2908      	cmp	r1, #8
 800b8e4:	dcf5      	bgt.n	800b8d2 <__ssvfiscanf_r+0xe7e>
 800b8e6:	e79d      	b.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b8e8:	f019 0f80 	tst.w	r9, #128	; 0x80
 800b8ec:	d09a      	beq.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b8ee:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 800b8f2:	e7d1      	b.n	800b898 <__ssvfiscanf_r+0xe44>
 800b8f4:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 800b8f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b8fc:	d192      	bne.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b8fe:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 800b902:	2110      	movs	r1, #16
 800b904:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 800b908:	61f9      	str	r1, [r7, #28]
 800b90a:	e7c5      	b.n	800b898 <__ssvfiscanf_r+0xe44>
 800b90c:	ee18 0a10 	vmov	r0, s16
 800b910:	4621      	mov	r1, r4
 800b912:	f7ff f84a 	bl	800a9aa <__ssrefill_r>
 800b916:	2800      	cmp	r0, #0
 800b918:	d0d1      	beq.n	800b8be <__ssvfiscanf_r+0xe6a>
 800b91a:	e783      	b.n	800b824 <__ssvfiscanf_r+0xdd0>
 800b91c:	f019 0f08 	tst.w	r9, #8
 800b920:	d00e      	beq.n	800b940 <__ssvfiscanf_r+0xeec>
 800b922:	6833      	ldr	r3, [r6, #0]
 800b924:	7018      	strb	r0, [r3, #0]
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	3301      	adds	r3, #1
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24
 800b92c:	462e      	mov	r6, r5
 800b92e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b932:	eba8 0803 	sub.w	r8, r8, r3
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	44c2      	add	sl, r8
 800b93a:	4453      	add	r3, sl
 800b93c:	f7ff b982 	b.w	800ac44 <__ssvfiscanf_r+0x1f0>
 800b940:	f019 0f04 	tst.w	r9, #4
 800b944:	d002      	beq.n	800b94c <__ssvfiscanf_r+0xef8>
 800b946:	6833      	ldr	r3, [r6, #0]
 800b948:	8018      	strh	r0, [r3, #0]
 800b94a:	e7ec      	b.n	800b926 <__ssvfiscanf_r+0xed2>
 800b94c:	f019 0201 	ands.w	r2, r9, #1
 800b950:	d18f      	bne.n	800b872 <__ssvfiscanf_r+0xe1e>
 800b952:	f019 0f02 	tst.w	r9, #2
 800b956:	d08c      	beq.n	800b872 <__ssvfiscanf_r+0xe1e>
 800b958:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <__ssvfiscanf_r+0xf44>)
 800b95a:	6979      	ldr	r1, [r7, #20]
 800b95c:	4299      	cmp	r1, r3
 800b95e:	ee18 0a10 	vmov	r0, s16
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b968:	d105      	bne.n	800b976 <__ssvfiscanf_r+0xf22>
 800b96a:	f001 fbed 	bl	800d148 <_strtoull_r>
 800b96e:	6833      	ldr	r3, [r6, #0]
 800b970:	e9c3 0100 	strd	r0, r1, [r3]
 800b974:	e7d7      	b.n	800b926 <__ssvfiscanf_r+0xed2>
 800b976:	f001 fb4b 	bl	800d010 <_strtoll_r>
 800b97a:	e7f8      	b.n	800b96e <__ssvfiscanf_r+0xf1a>
 800b97c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f7fe f8d3 	bl	8009b2c <free>
 800b986:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b98a:	3401      	adds	r4, #1
 800b98c:	601e      	str	r6, [r3, #0]
 800b98e:	f7ff ba0f 	b.w	800adb0 <__ssvfiscanf_r+0x35c>
 800b992:	bf00      	nop
 800b994:	0800e764 	.word	0x0800e764
 800b998:	0800a919 	.word	0x0800a919

0800b99c <sysconf>:
 800b99c:	2808      	cmp	r0, #8
 800b99e:	b508      	push	{r3, lr}
 800b9a0:	d006      	beq.n	800b9b0 <sysconf+0x14>
 800b9a2:	f7fa feb9 	bl	8006718 <__errno>
 800b9a6:	2316      	movs	r3, #22
 800b9a8:	6003      	str	r3, [r0, #0]
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	bd08      	pop	{r3, pc}
 800b9b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b9b4:	e7fb      	b.n	800b9ae <sysconf+0x12>

0800b9b6 <__submore>:
 800b9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800b9be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	d11d      	bne.n	800ba02 <__submore+0x4c>
 800b9c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b9ca:	f7fe f8b7 	bl	8009b3c <_malloc_r>
 800b9ce:	b918      	cbnz	r0, 800b9d8 <__submore+0x22>
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9dc:	6363      	str	r3, [r4, #52]	; 0x34
 800b9de:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b9e2:	6320      	str	r0, [r4, #48]	; 0x30
 800b9e4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b9e8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b9ec:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b9f0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b9f4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b9f8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b9fc:	6020      	str	r0, [r4, #0]
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e7e8      	b.n	800b9d4 <__submore+0x1e>
 800ba02:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ba04:	0077      	lsls	r7, r6, #1
 800ba06:	463a      	mov	r2, r7
 800ba08:	f001 f88c 	bl	800cb24 <_realloc_r>
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d0de      	beq.n	800b9d0 <__submore+0x1a>
 800ba12:	eb00 0806 	add.w	r8, r0, r6
 800ba16:	4601      	mov	r1, r0
 800ba18:	4632      	mov	r2, r6
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	f7fe fad0 	bl	8009fc0 <memcpy>
 800ba20:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800ba24:	f8c4 8000 	str.w	r8, [r4]
 800ba28:	e7e9      	b.n	800b9fe <__submore+0x48>

0800ba2a <__sprint_r>:
 800ba2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2e:	6893      	ldr	r3, [r2, #8]
 800ba30:	4680      	mov	r8, r0
 800ba32:	460f      	mov	r7, r1
 800ba34:	4614      	mov	r4, r2
 800ba36:	b91b      	cbnz	r3, 800ba40 <__sprint_r+0x16>
 800ba38:	6053      	str	r3, [r2, #4]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba40:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ba42:	049d      	lsls	r5, r3, #18
 800ba44:	d520      	bpl.n	800ba88 <__sprint_r+0x5e>
 800ba46:	6815      	ldr	r5, [r2, #0]
 800ba48:	3508      	adds	r5, #8
 800ba4a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800ba4e:	f04f 0900 	mov.w	r9, #0
 800ba52:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800ba56:	45ca      	cmp	sl, r9
 800ba58:	dc0b      	bgt.n	800ba72 <__sprint_r+0x48>
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	f026 0003 	bic.w	r0, r6, #3
 800ba60:	1a18      	subs	r0, r3, r0
 800ba62:	60a0      	str	r0, [r4, #8]
 800ba64:	3508      	adds	r5, #8
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d1ef      	bne.n	800ba4a <__sprint_r+0x20>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800ba70:	e7e4      	b.n	800ba3c <__sprint_r+0x12>
 800ba72:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800ba76:	463a      	mov	r2, r7
 800ba78:	4640      	mov	r0, r8
 800ba7a:	f000 fe36 	bl	800c6ea <_fputwc_r>
 800ba7e:	1c43      	adds	r3, r0, #1
 800ba80:	d0f3      	beq.n	800ba6a <__sprint_r+0x40>
 800ba82:	f109 0901 	add.w	r9, r9, #1
 800ba86:	e7e6      	b.n	800ba56 <__sprint_r+0x2c>
 800ba88:	f000 fe6c 	bl	800c764 <__sfvwrite_r>
 800ba8c:	e7ed      	b.n	800ba6a <__sprint_r+0x40>
	...

0800ba90 <_vfiprintf_r>:
 800ba90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba94:	ed2d 8b02 	vpush	{d8}
 800ba98:	b0b9      	sub	sp, #228	; 0xe4
 800ba9a:	460f      	mov	r7, r1
 800ba9c:	9201      	str	r2, [sp, #4]
 800ba9e:	461d      	mov	r5, r3
 800baa0:	461c      	mov	r4, r3
 800baa2:	4681      	mov	r9, r0
 800baa4:	b118      	cbz	r0, 800baae <_vfiprintf_r+0x1e>
 800baa6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800baa8:	b90b      	cbnz	r3, 800baae <_vfiprintf_r+0x1e>
 800baaa:	f7fd fe0b 	bl	80096c4 <__sinit>
 800baae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab0:	07d8      	lsls	r0, r3, #31
 800bab2:	d405      	bmi.n	800bac0 <_vfiprintf_r+0x30>
 800bab4:	89bb      	ldrh	r3, [r7, #12]
 800bab6:	0599      	lsls	r1, r3, #22
 800bab8:	d402      	bmi.n	800bac0 <_vfiprintf_r+0x30>
 800baba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800babc:	f7fd ffbf 	bl	8009a3e <__retarget_lock_acquire_recursive>
 800bac0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bac4:	049a      	lsls	r2, r3, #18
 800bac6:	d406      	bmi.n	800bad6 <_vfiprintf_r+0x46>
 800bac8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bacc:	81bb      	strh	r3, [r7, #12]
 800bace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bad4:	667b      	str	r3, [r7, #100]	; 0x64
 800bad6:	89bb      	ldrh	r3, [r7, #12]
 800bad8:	071e      	lsls	r6, r3, #28
 800bada:	d501      	bpl.n	800bae0 <_vfiprintf_r+0x50>
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	b9bb      	cbnz	r3, 800bb10 <_vfiprintf_r+0x80>
 800bae0:	4639      	mov	r1, r7
 800bae2:	4648      	mov	r0, r9
 800bae4:	f7fc fe16 	bl	8008714 <__swsetup_r>
 800bae8:	b190      	cbz	r0, 800bb10 <_vfiprintf_r+0x80>
 800baea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baec:	07d8      	lsls	r0, r3, #31
 800baee:	d508      	bpl.n	800bb02 <_vfiprintf_r+0x72>
 800baf0:	f04f 33ff 	mov.w	r3, #4294967295
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	9802      	ldr	r0, [sp, #8]
 800baf8:	b039      	add	sp, #228	; 0xe4
 800bafa:	ecbd 8b02 	vpop	{d8}
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	89bb      	ldrh	r3, [r7, #12]
 800bb04:	0599      	lsls	r1, r3, #22
 800bb06:	d4f3      	bmi.n	800baf0 <_vfiprintf_r+0x60>
 800bb08:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bb0a:	f7fd ff9a 	bl	8009a42 <__retarget_lock_release_recursive>
 800bb0e:	e7ef      	b.n	800baf0 <_vfiprintf_r+0x60>
 800bb10:	89bb      	ldrh	r3, [r7, #12]
 800bb12:	f003 021a 	and.w	r2, r3, #26
 800bb16:	2a0a      	cmp	r2, #10
 800bb18:	d113      	bne.n	800bb42 <_vfiprintf_r+0xb2>
 800bb1a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bb1e:	2a00      	cmp	r2, #0
 800bb20:	db0f      	blt.n	800bb42 <_vfiprintf_r+0xb2>
 800bb22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb24:	07d2      	lsls	r2, r2, #31
 800bb26:	d404      	bmi.n	800bb32 <_vfiprintf_r+0xa2>
 800bb28:	059e      	lsls	r6, r3, #22
 800bb2a:	d402      	bmi.n	800bb32 <_vfiprintf_r+0xa2>
 800bb2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bb2e:	f7fd ff88 	bl	8009a42 <__retarget_lock_release_recursive>
 800bb32:	9a01      	ldr	r2, [sp, #4]
 800bb34:	462b      	mov	r3, r5
 800bb36:	4639      	mov	r1, r7
 800bb38:	4648      	mov	r0, r9
 800bb3a:	f000 fc31 	bl	800c3a0 <__sbprintf>
 800bb3e:	9002      	str	r0, [sp, #8]
 800bb40:	e7d9      	b.n	800baf6 <_vfiprintf_r+0x66>
 800bb42:	2300      	movs	r3, #0
 800bb44:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800bb48:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bb4c:	ae0f      	add	r6, sp, #60	; 0x3c
 800bb4e:	ee08 3a10 	vmov	s16, r3
 800bb52:	960c      	str	r6, [sp, #48]	; 0x30
 800bb54:	9307      	str	r3, [sp, #28]
 800bb56:	9302      	str	r3, [sp, #8]
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	461d      	mov	r5, r3
 800bb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb60:	b10a      	cbz	r2, 800bb66 <_vfiprintf_r+0xd6>
 800bb62:	2a25      	cmp	r2, #37	; 0x25
 800bb64:	d1f9      	bne.n	800bb5a <_vfiprintf_r+0xca>
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	ebb5 0803 	subs.w	r8, r5, r3
 800bb6c:	d00d      	beq.n	800bb8a <_vfiprintf_r+0xfa>
 800bb6e:	e9c6 3800 	strd	r3, r8, [r6]
 800bb72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb74:	4443      	add	r3, r8
 800bb76:	930e      	str	r3, [sp, #56]	; 0x38
 800bb78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	2b07      	cmp	r3, #7
 800bb7e:	930d      	str	r3, [sp, #52]	; 0x34
 800bb80:	dc75      	bgt.n	800bc6e <_vfiprintf_r+0x1de>
 800bb82:	3608      	adds	r6, #8
 800bb84:	9b02      	ldr	r3, [sp, #8]
 800bb86:	4443      	add	r3, r8
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	782b      	ldrb	r3, [r5, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 83c8 	beq.w	800c322 <_vfiprintf_r+0x892>
 800bb92:	2300      	movs	r3, #0
 800bb94:	f04f 31ff 	mov.w	r1, #4294967295
 800bb98:	1c6a      	adds	r2, r5, #1
 800bb9a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bb9e:	9100      	str	r1, [sp, #0]
 800bba0:	9303      	str	r3, [sp, #12]
 800bba2:	469a      	mov	sl, r3
 800bba4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bba8:	9201      	str	r2, [sp, #4]
 800bbaa:	f1a3 0220 	sub.w	r2, r3, #32
 800bbae:	2a5a      	cmp	r2, #90	; 0x5a
 800bbb0:	f200 8310 	bhi.w	800c1d4 <_vfiprintf_r+0x744>
 800bbb4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800bbb8:	030e0099 	.word	0x030e0099
 800bbbc:	00a1030e 	.word	0x00a1030e
 800bbc0:	030e030e 	.word	0x030e030e
 800bbc4:	0080030e 	.word	0x0080030e
 800bbc8:	030e030e 	.word	0x030e030e
 800bbcc:	00ae00a4 	.word	0x00ae00a4
 800bbd0:	00ab030e 	.word	0x00ab030e
 800bbd4:	030e00b0 	.word	0x030e00b0
 800bbd8:	00ce00cb 	.word	0x00ce00cb
 800bbdc:	00ce00ce 	.word	0x00ce00ce
 800bbe0:	00ce00ce 	.word	0x00ce00ce
 800bbe4:	00ce00ce 	.word	0x00ce00ce
 800bbe8:	00ce00ce 	.word	0x00ce00ce
 800bbec:	030e030e 	.word	0x030e030e
 800bbf0:	030e030e 	.word	0x030e030e
 800bbf4:	030e030e 	.word	0x030e030e
 800bbf8:	030e030e 	.word	0x030e030e
 800bbfc:	00f8030e 	.word	0x00f8030e
 800bc00:	030e0106 	.word	0x030e0106
 800bc04:	030e030e 	.word	0x030e030e
 800bc08:	030e030e 	.word	0x030e030e
 800bc0c:	030e030e 	.word	0x030e030e
 800bc10:	030e030e 	.word	0x030e030e
 800bc14:	014d030e 	.word	0x014d030e
 800bc18:	030e030e 	.word	0x030e030e
 800bc1c:	0192030e 	.word	0x0192030e
 800bc20:	0270030e 	.word	0x0270030e
 800bc24:	030e030e 	.word	0x030e030e
 800bc28:	030e028e 	.word	0x030e028e
 800bc2c:	030e030e 	.word	0x030e030e
 800bc30:	030e030e 	.word	0x030e030e
 800bc34:	030e030e 	.word	0x030e030e
 800bc38:	030e030e 	.word	0x030e030e
 800bc3c:	00f8030e 	.word	0x00f8030e
 800bc40:	030e0108 	.word	0x030e0108
 800bc44:	030e030e 	.word	0x030e030e
 800bc48:	010800de 	.word	0x010800de
 800bc4c:	030e00f2 	.word	0x030e00f2
 800bc50:	030e00eb 	.word	0x030e00eb
 800bc54:	014f0130 	.word	0x014f0130
 800bc58:	00f20182 	.word	0x00f20182
 800bc5c:	0192030e 	.word	0x0192030e
 800bc60:	02720097 	.word	0x02720097
 800bc64:	030e030e 	.word	0x030e030e
 800bc68:	030e0065 	.word	0x030e0065
 800bc6c:	0097      	.short	0x0097
 800bc6e:	aa0c      	add	r2, sp, #48	; 0x30
 800bc70:	4639      	mov	r1, r7
 800bc72:	4648      	mov	r0, r9
 800bc74:	f7ff fed9 	bl	800ba2a <__sprint_r>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f040 8331 	bne.w	800c2e0 <_vfiprintf_r+0x850>
 800bc7e:	ae0f      	add	r6, sp, #60	; 0x3c
 800bc80:	e780      	b.n	800bb84 <_vfiprintf_r+0xf4>
 800bc82:	4a95      	ldr	r2, [pc, #596]	; (800bed8 <_vfiprintf_r+0x448>)
 800bc84:	9205      	str	r2, [sp, #20]
 800bc86:	f01a 0f20 	tst.w	sl, #32
 800bc8a:	f000 8225 	beq.w	800c0d8 <_vfiprintf_r+0x648>
 800bc8e:	3407      	adds	r4, #7
 800bc90:	f024 0b07 	bic.w	fp, r4, #7
 800bc94:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800bc98:	f01a 0f01 	tst.w	sl, #1
 800bc9c:	d009      	beq.n	800bcb2 <_vfiprintf_r+0x222>
 800bc9e:	ea54 0205 	orrs.w	r2, r4, r5
 800bca2:	bf1f      	itttt	ne
 800bca4:	2230      	movne	r2, #48	; 0x30
 800bca6:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800bcaa:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800bcae:	f04a 0a02 	orrne.w	sl, sl, #2
 800bcb2:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800bcb6:	e10d      	b.n	800bed4 <_vfiprintf_r+0x444>
 800bcb8:	4648      	mov	r0, r9
 800bcba:	f7fd feb9 	bl	8009a30 <_localeconv_r>
 800bcbe:	6843      	ldr	r3, [r0, #4]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	ee08 3a10 	vmov	s16, r3
 800bcc6:	f7f4 faa3 	bl	8000210 <strlen>
 800bcca:	9007      	str	r0, [sp, #28]
 800bccc:	4648      	mov	r0, r9
 800bcce:	f7fd feaf 	bl	8009a30 <_localeconv_r>
 800bcd2:	6883      	ldr	r3, [r0, #8]
 800bcd4:	9306      	str	r3, [sp, #24]
 800bcd6:	9b07      	ldr	r3, [sp, #28]
 800bcd8:	b12b      	cbz	r3, 800bce6 <_vfiprintf_r+0x256>
 800bcda:	9b06      	ldr	r3, [sp, #24]
 800bcdc:	b11b      	cbz	r3, 800bce6 <_vfiprintf_r+0x256>
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	b10b      	cbz	r3, 800bce6 <_vfiprintf_r+0x256>
 800bce2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800bce6:	9a01      	ldr	r2, [sp, #4]
 800bce8:	e75c      	b.n	800bba4 <_vfiprintf_r+0x114>
 800bcea:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1f9      	bne.n	800bce6 <_vfiprintf_r+0x256>
 800bcf2:	2320      	movs	r3, #32
 800bcf4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bcf8:	e7f5      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bcfa:	f04a 0a01 	orr.w	sl, sl, #1
 800bcfe:	e7f2      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bd00:	f854 3b04 	ldr.w	r3, [r4], #4
 800bd04:	9303      	str	r3, [sp, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	daed      	bge.n	800bce6 <_vfiprintf_r+0x256>
 800bd0a:	425b      	negs	r3, r3
 800bd0c:	9303      	str	r3, [sp, #12]
 800bd0e:	f04a 0a04 	orr.w	sl, sl, #4
 800bd12:	e7e8      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bd14:	232b      	movs	r3, #43	; 0x2b
 800bd16:	e7ed      	b.n	800bcf4 <_vfiprintf_r+0x264>
 800bd18:	9a01      	ldr	r2, [sp, #4]
 800bd1a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd20:	d112      	bne.n	800bd48 <_vfiprintf_r+0x2b8>
 800bd22:	f854 0b04 	ldr.w	r0, [r4], #4
 800bd26:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800bd2a:	e9cd 3200 	strd	r3, r2, [sp]
 800bd2e:	e7da      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bd30:	9b00      	ldr	r3, [sp, #0]
 800bd32:	200a      	movs	r0, #10
 800bd34:	fb00 1303 	mla	r3, r0, r3, r1
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bd3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bd42:	2909      	cmp	r1, #9
 800bd44:	d9f4      	bls.n	800bd30 <_vfiprintf_r+0x2a0>
 800bd46:	e72f      	b.n	800bba8 <_vfiprintf_r+0x118>
 800bd48:	2100      	movs	r1, #0
 800bd4a:	9100      	str	r1, [sp, #0]
 800bd4c:	e7f7      	b.n	800bd3e <_vfiprintf_r+0x2ae>
 800bd4e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800bd52:	e7c8      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bd54:	2100      	movs	r1, #0
 800bd56:	9a01      	ldr	r2, [sp, #4]
 800bd58:	9103      	str	r1, [sp, #12]
 800bd5a:	9903      	ldr	r1, [sp, #12]
 800bd5c:	3b30      	subs	r3, #48	; 0x30
 800bd5e:	200a      	movs	r0, #10
 800bd60:	fb00 3301 	mla	r3, r0, r1, r3
 800bd64:	9303      	str	r3, [sp, #12]
 800bd66:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bd6a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bd6e:	2909      	cmp	r1, #9
 800bd70:	d9f3      	bls.n	800bd5a <_vfiprintf_r+0x2ca>
 800bd72:	e719      	b.n	800bba8 <_vfiprintf_r+0x118>
 800bd74:	9b01      	ldr	r3, [sp, #4]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b68      	cmp	r3, #104	; 0x68
 800bd7a:	bf01      	itttt	eq
 800bd7c:	9b01      	ldreq	r3, [sp, #4]
 800bd7e:	3301      	addeq	r3, #1
 800bd80:	9301      	streq	r3, [sp, #4]
 800bd82:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800bd86:	bf18      	it	ne
 800bd88:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800bd8c:	e7ab      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b6c      	cmp	r3, #108	; 0x6c
 800bd94:	d105      	bne.n	800bda2 <_vfiprintf_r+0x312>
 800bd96:	9b01      	ldr	r3, [sp, #4]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	f04a 0a20 	orr.w	sl, sl, #32
 800bda0:	e7a1      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bda2:	f04a 0a10 	orr.w	sl, sl, #16
 800bda6:	e79e      	b.n	800bce6 <_vfiprintf_r+0x256>
 800bda8:	46a3      	mov	fp, r4
 800bdaa:	2100      	movs	r1, #0
 800bdac:	f85b 3b04 	ldr.w	r3, [fp], #4
 800bdb0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800bdb4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800bdb8:	2301      	movs	r3, #1
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	460d      	mov	r5, r1
 800bdbe:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800bdc2:	e0a0      	b.n	800bf06 <_vfiprintf_r+0x476>
 800bdc4:	f04a 0a10 	orr.w	sl, sl, #16
 800bdc8:	f01a 0f20 	tst.w	sl, #32
 800bdcc:	d011      	beq.n	800bdf2 <_vfiprintf_r+0x362>
 800bdce:	3407      	adds	r4, #7
 800bdd0:	f024 0b07 	bic.w	fp, r4, #7
 800bdd4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	f175 0300 	sbcs.w	r3, r5, #0
 800bdde:	da06      	bge.n	800bdee <_vfiprintf_r+0x35e>
 800bde0:	4264      	negs	r4, r4
 800bde2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800bde6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800bdea:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e03f      	b.n	800be72 <_vfiprintf_r+0x3e2>
 800bdf2:	f01a 0f10 	tst.w	sl, #16
 800bdf6:	f104 0b04 	add.w	fp, r4, #4
 800bdfa:	d002      	beq.n	800be02 <_vfiprintf_r+0x372>
 800bdfc:	6824      	ldr	r4, [r4, #0]
 800bdfe:	17e5      	asrs	r5, r4, #31
 800be00:	e7ea      	b.n	800bdd8 <_vfiprintf_r+0x348>
 800be02:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800be06:	6824      	ldr	r4, [r4, #0]
 800be08:	d001      	beq.n	800be0e <_vfiprintf_r+0x37e>
 800be0a:	b224      	sxth	r4, r4
 800be0c:	e7f7      	b.n	800bdfe <_vfiprintf_r+0x36e>
 800be0e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800be12:	bf18      	it	ne
 800be14:	b264      	sxtbne	r4, r4
 800be16:	e7f2      	b.n	800bdfe <_vfiprintf_r+0x36e>
 800be18:	f01a 0f20 	tst.w	sl, #32
 800be1c:	f854 3b04 	ldr.w	r3, [r4], #4
 800be20:	d005      	beq.n	800be2e <_vfiprintf_r+0x39e>
 800be22:	9a02      	ldr	r2, [sp, #8]
 800be24:	4610      	mov	r0, r2
 800be26:	17d1      	asrs	r1, r2, #31
 800be28:	e9c3 0100 	strd	r0, r1, [r3]
 800be2c:	e694      	b.n	800bb58 <_vfiprintf_r+0xc8>
 800be2e:	f01a 0f10 	tst.w	sl, #16
 800be32:	d002      	beq.n	800be3a <_vfiprintf_r+0x3aa>
 800be34:	9a02      	ldr	r2, [sp, #8]
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	e68e      	b.n	800bb58 <_vfiprintf_r+0xc8>
 800be3a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800be3e:	d002      	beq.n	800be46 <_vfiprintf_r+0x3b6>
 800be40:	9a02      	ldr	r2, [sp, #8]
 800be42:	801a      	strh	r2, [r3, #0]
 800be44:	e688      	b.n	800bb58 <_vfiprintf_r+0xc8>
 800be46:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800be4a:	d0f3      	beq.n	800be34 <_vfiprintf_r+0x3a4>
 800be4c:	9a02      	ldr	r2, [sp, #8]
 800be4e:	701a      	strb	r2, [r3, #0]
 800be50:	e682      	b.n	800bb58 <_vfiprintf_r+0xc8>
 800be52:	f04a 0a10 	orr.w	sl, sl, #16
 800be56:	f01a 0f20 	tst.w	sl, #32
 800be5a:	d01d      	beq.n	800be98 <_vfiprintf_r+0x408>
 800be5c:	3407      	adds	r4, #7
 800be5e:	f024 0b07 	bic.w	fp, r4, #7
 800be62:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800be66:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800be6a:	2300      	movs	r3, #0
 800be6c:	2200      	movs	r2, #0
 800be6e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800be72:	9a00      	ldr	r2, [sp, #0]
 800be74:	3201      	adds	r2, #1
 800be76:	f000 8261 	beq.w	800c33c <_vfiprintf_r+0x8ac>
 800be7a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800be7e:	9204      	str	r2, [sp, #16]
 800be80:	ea54 0205 	orrs.w	r2, r4, r5
 800be84:	f040 8260 	bne.w	800c348 <_vfiprintf_r+0x8b8>
 800be88:	9a00      	ldr	r2, [sp, #0]
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	f000 8197 	beq.w	800c1be <_vfiprintf_r+0x72e>
 800be90:	2b01      	cmp	r3, #1
 800be92:	f040 825c 	bne.w	800c34e <_vfiprintf_r+0x8be>
 800be96:	e135      	b.n	800c104 <_vfiprintf_r+0x674>
 800be98:	f01a 0f10 	tst.w	sl, #16
 800be9c:	f104 0b04 	add.w	fp, r4, #4
 800bea0:	d001      	beq.n	800bea6 <_vfiprintf_r+0x416>
 800bea2:	6824      	ldr	r4, [r4, #0]
 800bea4:	e003      	b.n	800beae <_vfiprintf_r+0x41e>
 800bea6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800beaa:	d002      	beq.n	800beb2 <_vfiprintf_r+0x422>
 800beac:	8824      	ldrh	r4, [r4, #0]
 800beae:	2500      	movs	r5, #0
 800beb0:	e7d9      	b.n	800be66 <_vfiprintf_r+0x3d6>
 800beb2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800beb6:	d0f4      	beq.n	800bea2 <_vfiprintf_r+0x412>
 800beb8:	7824      	ldrb	r4, [r4, #0]
 800beba:	e7f8      	b.n	800beae <_vfiprintf_r+0x41e>
 800bebc:	46a3      	mov	fp, r4
 800bebe:	f647 0330 	movw	r3, #30768	; 0x7830
 800bec2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800bec6:	f85b 4b04 	ldr.w	r4, [fp], #4
 800beca:	4b03      	ldr	r3, [pc, #12]	; (800bed8 <_vfiprintf_r+0x448>)
 800becc:	9305      	str	r3, [sp, #20]
 800bece:	2500      	movs	r5, #0
 800bed0:	f04a 0a02 	orr.w	sl, sl, #2
 800bed4:	2302      	movs	r3, #2
 800bed6:	e7c9      	b.n	800be6c <_vfiprintf_r+0x3dc>
 800bed8:	0800e3e4 	.word	0x0800e3e4
 800bedc:	9b00      	ldr	r3, [sp, #0]
 800bede:	46a3      	mov	fp, r4
 800bee0:	2500      	movs	r5, #0
 800bee2:	1c5c      	adds	r4, r3, #1
 800bee4:	f85b 8b04 	ldr.w	r8, [fp], #4
 800bee8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800beec:	f000 80cf 	beq.w	800c08e <_vfiprintf_r+0x5fe>
 800bef0:	461a      	mov	r2, r3
 800bef2:	4629      	mov	r1, r5
 800bef4:	4640      	mov	r0, r8
 800bef6:	f7f4 f993 	bl	8000220 <memchr>
 800befa:	2800      	cmp	r0, #0
 800befc:	f000 8174 	beq.w	800c1e8 <_vfiprintf_r+0x758>
 800bf00:	eba0 0308 	sub.w	r3, r0, r8
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	9b00      	ldr	r3, [sp, #0]
 800bf08:	42ab      	cmp	r3, r5
 800bf0a:	bfb8      	it	lt
 800bf0c:	462b      	movlt	r3, r5
 800bf0e:	9304      	str	r3, [sp, #16]
 800bf10:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800bf14:	b113      	cbz	r3, 800bf1c <_vfiprintf_r+0x48c>
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	f01a 0302 	ands.w	r3, sl, #2
 800bf20:	9308      	str	r3, [sp, #32]
 800bf22:	bf1e      	ittt	ne
 800bf24:	9b04      	ldrne	r3, [sp, #16]
 800bf26:	3302      	addne	r3, #2
 800bf28:	9304      	strne	r3, [sp, #16]
 800bf2a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800bf2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf30:	d11f      	bne.n	800bf72 <_vfiprintf_r+0x4e2>
 800bf32:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bf36:	1a9c      	subs	r4, r3, r2
 800bf38:	2c00      	cmp	r4, #0
 800bf3a:	dd1a      	ble.n	800bf72 <_vfiprintf_r+0x4e2>
 800bf3c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bf40:	48b9      	ldr	r0, [pc, #740]	; (800c228 <_vfiprintf_r+0x798>)
 800bf42:	6030      	str	r0, [r6, #0]
 800bf44:	2c10      	cmp	r4, #16
 800bf46:	f103 0301 	add.w	r3, r3, #1
 800bf4a:	f106 0108 	add.w	r1, r6, #8
 800bf4e:	f300 814d 	bgt.w	800c1ec <_vfiprintf_r+0x75c>
 800bf52:	6074      	str	r4, [r6, #4]
 800bf54:	2b07      	cmp	r3, #7
 800bf56:	4414      	add	r4, r2
 800bf58:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800bf5c:	f340 8158 	ble.w	800c210 <_vfiprintf_r+0x780>
 800bf60:	aa0c      	add	r2, sp, #48	; 0x30
 800bf62:	4639      	mov	r1, r7
 800bf64:	4648      	mov	r0, r9
 800bf66:	f7ff fd60 	bl	800ba2a <__sprint_r>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	f040 81b8 	bne.w	800c2e0 <_vfiprintf_r+0x850>
 800bf70:	ae0f      	add	r6, sp, #60	; 0x3c
 800bf72:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800bf76:	b173      	cbz	r3, 800bf96 <_vfiprintf_r+0x506>
 800bf78:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800bf7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf7e:	6032      	str	r2, [r6, #0]
 800bf80:	2201      	movs	r2, #1
 800bf82:	6072      	str	r2, [r6, #4]
 800bf84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf86:	3301      	adds	r3, #1
 800bf88:	3201      	adds	r2, #1
 800bf8a:	2b07      	cmp	r3, #7
 800bf8c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bf90:	f300 8140 	bgt.w	800c214 <_vfiprintf_r+0x784>
 800bf94:	3608      	adds	r6, #8
 800bf96:	9b08      	ldr	r3, [sp, #32]
 800bf98:	b16b      	cbz	r3, 800bfb6 <_vfiprintf_r+0x526>
 800bf9a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf9e:	6032      	str	r2, [r6, #0]
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	6072      	str	r2, [r6, #4]
 800bfa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	3202      	adds	r2, #2
 800bfaa:	2b07      	cmp	r3, #7
 800bfac:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800bfb0:	f300 8140 	bgt.w	800c234 <_vfiprintf_r+0x7a4>
 800bfb4:	3608      	adds	r6, #8
 800bfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb8:	2b80      	cmp	r3, #128	; 0x80
 800bfba:	d11f      	bne.n	800bffc <_vfiprintf_r+0x56c>
 800bfbc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bfc0:	1a9c      	subs	r4, r3, r2
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	dd1a      	ble.n	800bffc <_vfiprintf_r+0x56c>
 800bfc6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bfca:	4898      	ldr	r0, [pc, #608]	; (800c22c <_vfiprintf_r+0x79c>)
 800bfcc:	6030      	str	r0, [r6, #0]
 800bfce:	2c10      	cmp	r4, #16
 800bfd0:	f103 0301 	add.w	r3, r3, #1
 800bfd4:	f106 0108 	add.w	r1, r6, #8
 800bfd8:	f300 8135 	bgt.w	800c246 <_vfiprintf_r+0x7b6>
 800bfdc:	6074      	str	r4, [r6, #4]
 800bfde:	2b07      	cmp	r3, #7
 800bfe0:	4414      	add	r4, r2
 800bfe2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800bfe6:	f340 8140 	ble.w	800c26a <_vfiprintf_r+0x7da>
 800bfea:	aa0c      	add	r2, sp, #48	; 0x30
 800bfec:	4639      	mov	r1, r7
 800bfee:	4648      	mov	r0, r9
 800bff0:	f7ff fd1b 	bl	800ba2a <__sprint_r>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	f040 8173 	bne.w	800c2e0 <_vfiprintf_r+0x850>
 800bffa:	ae0f      	add	r6, sp, #60	; 0x3c
 800bffc:	9b00      	ldr	r3, [sp, #0]
 800bffe:	1aec      	subs	r4, r5, r3
 800c000:	2c00      	cmp	r4, #0
 800c002:	dd1a      	ble.n	800c03a <_vfiprintf_r+0x5aa>
 800c004:	4d89      	ldr	r5, [pc, #548]	; (800c22c <_vfiprintf_r+0x79c>)
 800c006:	6035      	str	r5, [r6, #0]
 800c008:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800c00c:	2c10      	cmp	r4, #16
 800c00e:	f103 0301 	add.w	r3, r3, #1
 800c012:	f106 0208 	add.w	r2, r6, #8
 800c016:	f300 812a 	bgt.w	800c26e <_vfiprintf_r+0x7de>
 800c01a:	6074      	str	r4, [r6, #4]
 800c01c:	2b07      	cmp	r3, #7
 800c01e:	440c      	add	r4, r1
 800c020:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c024:	f340 8134 	ble.w	800c290 <_vfiprintf_r+0x800>
 800c028:	aa0c      	add	r2, sp, #48	; 0x30
 800c02a:	4639      	mov	r1, r7
 800c02c:	4648      	mov	r0, r9
 800c02e:	f7ff fcfc 	bl	800ba2a <__sprint_r>
 800c032:	2800      	cmp	r0, #0
 800c034:	f040 8154 	bne.w	800c2e0 <_vfiprintf_r+0x850>
 800c038:	ae0f      	add	r6, sp, #60	; 0x3c
 800c03a:	9b00      	ldr	r3, [sp, #0]
 800c03c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c03e:	6073      	str	r3, [r6, #4]
 800c040:	4418      	add	r0, r3
 800c042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c044:	f8c6 8000 	str.w	r8, [r6]
 800c048:	3301      	adds	r3, #1
 800c04a:	2b07      	cmp	r3, #7
 800c04c:	900e      	str	r0, [sp, #56]	; 0x38
 800c04e:	930d      	str	r3, [sp, #52]	; 0x34
 800c050:	f300 8120 	bgt.w	800c294 <_vfiprintf_r+0x804>
 800c054:	f106 0308 	add.w	r3, r6, #8
 800c058:	f01a 0f04 	tst.w	sl, #4
 800c05c:	f040 8122 	bne.w	800c2a4 <_vfiprintf_r+0x814>
 800c060:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c064:	9904      	ldr	r1, [sp, #16]
 800c066:	428a      	cmp	r2, r1
 800c068:	bfac      	ite	ge
 800c06a:	189b      	addge	r3, r3, r2
 800c06c:	185b      	addlt	r3, r3, r1
 800c06e:	9302      	str	r3, [sp, #8]
 800c070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c072:	b13b      	cbz	r3, 800c084 <_vfiprintf_r+0x5f4>
 800c074:	aa0c      	add	r2, sp, #48	; 0x30
 800c076:	4639      	mov	r1, r7
 800c078:	4648      	mov	r0, r9
 800c07a:	f7ff fcd6 	bl	800ba2a <__sprint_r>
 800c07e:	2800      	cmp	r0, #0
 800c080:	f040 812e 	bne.w	800c2e0 <_vfiprintf_r+0x850>
 800c084:	2300      	movs	r3, #0
 800c086:	930d      	str	r3, [sp, #52]	; 0x34
 800c088:	465c      	mov	r4, fp
 800c08a:	ae0f      	add	r6, sp, #60	; 0x3c
 800c08c:	e564      	b.n	800bb58 <_vfiprintf_r+0xc8>
 800c08e:	4640      	mov	r0, r8
 800c090:	f7f4 f8be 	bl	8000210 <strlen>
 800c094:	9000      	str	r0, [sp, #0]
 800c096:	e736      	b.n	800bf06 <_vfiprintf_r+0x476>
 800c098:	f04a 0a10 	orr.w	sl, sl, #16
 800c09c:	f01a 0f20 	tst.w	sl, #32
 800c0a0:	d006      	beq.n	800c0b0 <_vfiprintf_r+0x620>
 800c0a2:	3407      	adds	r4, #7
 800c0a4:	f024 0b07 	bic.w	fp, r4, #7
 800c0a8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e6dd      	b.n	800be6c <_vfiprintf_r+0x3dc>
 800c0b0:	f01a 0f10 	tst.w	sl, #16
 800c0b4:	f104 0b04 	add.w	fp, r4, #4
 800c0b8:	d001      	beq.n	800c0be <_vfiprintf_r+0x62e>
 800c0ba:	6824      	ldr	r4, [r4, #0]
 800c0bc:	e003      	b.n	800c0c6 <_vfiprintf_r+0x636>
 800c0be:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c0c2:	d002      	beq.n	800c0ca <_vfiprintf_r+0x63a>
 800c0c4:	8824      	ldrh	r4, [r4, #0]
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	e7f0      	b.n	800c0ac <_vfiprintf_r+0x61c>
 800c0ca:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c0ce:	d0f4      	beq.n	800c0ba <_vfiprintf_r+0x62a>
 800c0d0:	7824      	ldrb	r4, [r4, #0]
 800c0d2:	e7f8      	b.n	800c0c6 <_vfiprintf_r+0x636>
 800c0d4:	4a56      	ldr	r2, [pc, #344]	; (800c230 <_vfiprintf_r+0x7a0>)
 800c0d6:	e5d5      	b.n	800bc84 <_vfiprintf_r+0x1f4>
 800c0d8:	f01a 0f10 	tst.w	sl, #16
 800c0dc:	f104 0b04 	add.w	fp, r4, #4
 800c0e0:	d001      	beq.n	800c0e6 <_vfiprintf_r+0x656>
 800c0e2:	6824      	ldr	r4, [r4, #0]
 800c0e4:	e003      	b.n	800c0ee <_vfiprintf_r+0x65e>
 800c0e6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c0ea:	d002      	beq.n	800c0f2 <_vfiprintf_r+0x662>
 800c0ec:	8824      	ldrh	r4, [r4, #0]
 800c0ee:	2500      	movs	r5, #0
 800c0f0:	e5d2      	b.n	800bc98 <_vfiprintf_r+0x208>
 800c0f2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c0f6:	d0f4      	beq.n	800c0e2 <_vfiprintf_r+0x652>
 800c0f8:	7824      	ldrb	r4, [r4, #0]
 800c0fa:	e7f8      	b.n	800c0ee <_vfiprintf_r+0x65e>
 800c0fc:	2d00      	cmp	r5, #0
 800c0fe:	bf08      	it	eq
 800c100:	2c0a      	cmpeq	r4, #10
 800c102:	d205      	bcs.n	800c110 <_vfiprintf_r+0x680>
 800c104:	3430      	adds	r4, #48	; 0x30
 800c106:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800c10a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800c10e:	e13c      	b.n	800c38a <_vfiprintf_r+0x8fa>
 800c110:	ab38      	add	r3, sp, #224	; 0xe0
 800c112:	9308      	str	r3, [sp, #32]
 800c114:	9b04      	ldr	r3, [sp, #16]
 800c116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c11a:	f04f 0a00 	mov.w	sl, #0
 800c11e:	9309      	str	r3, [sp, #36]	; 0x24
 800c120:	9b08      	ldr	r3, [sp, #32]
 800c122:	220a      	movs	r2, #10
 800c124:	f103 38ff 	add.w	r8, r3, #4294967295
 800c128:	4620      	mov	r0, r4
 800c12a:	2300      	movs	r3, #0
 800c12c:	4629      	mov	r1, r5
 800c12e:	f7f4 fd65 	bl	8000bfc <__aeabi_uldivmod>
 800c132:	9b08      	ldr	r3, [sp, #32]
 800c134:	3230      	adds	r2, #48	; 0x30
 800c136:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13c:	f10a 0a01 	add.w	sl, sl, #1
 800c140:	b1db      	cbz	r3, 800c17a <_vfiprintf_r+0x6ea>
 800c142:	9b06      	ldr	r3, [sp, #24]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	4553      	cmp	r3, sl
 800c148:	d117      	bne.n	800c17a <_vfiprintf_r+0x6ea>
 800c14a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c14e:	d014      	beq.n	800c17a <_vfiprintf_r+0x6ea>
 800c150:	2d00      	cmp	r5, #0
 800c152:	bf08      	it	eq
 800c154:	2c0a      	cmpeq	r4, #10
 800c156:	d310      	bcc.n	800c17a <_vfiprintf_r+0x6ea>
 800c158:	9b07      	ldr	r3, [sp, #28]
 800c15a:	eba8 0803 	sub.w	r8, r8, r3
 800c15e:	461a      	mov	r2, r3
 800c160:	ee18 1a10 	vmov	r1, s16
 800c164:	4640      	mov	r0, r8
 800c166:	f7fe fb48 	bl	800a7fa <strncpy>
 800c16a:	9b06      	ldr	r3, [sp, #24]
 800c16c:	785b      	ldrb	r3, [r3, #1]
 800c16e:	b1a3      	cbz	r3, 800c19a <_vfiprintf_r+0x70a>
 800c170:	9b06      	ldr	r3, [sp, #24]
 800c172:	3301      	adds	r3, #1
 800c174:	9306      	str	r3, [sp, #24]
 800c176:	f04f 0a00 	mov.w	sl, #0
 800c17a:	220a      	movs	r2, #10
 800c17c:	2300      	movs	r3, #0
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 fd3b 	bl	8000bfc <__aeabi_uldivmod>
 800c186:	2d00      	cmp	r5, #0
 800c188:	bf08      	it	eq
 800c18a:	2c0a      	cmpeq	r4, #10
 800c18c:	f0c0 80fd 	bcc.w	800c38a <_vfiprintf_r+0x8fa>
 800c190:	4604      	mov	r4, r0
 800c192:	460d      	mov	r5, r1
 800c194:	f8cd 8020 	str.w	r8, [sp, #32]
 800c198:	e7c2      	b.n	800c120 <_vfiprintf_r+0x690>
 800c19a:	469a      	mov	sl, r3
 800c19c:	e7ed      	b.n	800c17a <_vfiprintf_r+0x6ea>
 800c19e:	9a05      	ldr	r2, [sp, #20]
 800c1a0:	f004 030f 	and.w	r3, r4, #15
 800c1a4:	5cd3      	ldrb	r3, [r2, r3]
 800c1a6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c1aa:	0923      	lsrs	r3, r4, #4
 800c1ac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800c1b0:	092a      	lsrs	r2, r5, #4
 800c1b2:	461c      	mov	r4, r3
 800c1b4:	4615      	mov	r5, r2
 800c1b6:	ea54 0305 	orrs.w	r3, r4, r5
 800c1ba:	d1f0      	bne.n	800c19e <_vfiprintf_r+0x70e>
 800c1bc:	e0e5      	b.n	800c38a <_vfiprintf_r+0x8fa>
 800c1be:	b933      	cbnz	r3, 800c1ce <_vfiprintf_r+0x73e>
 800c1c0:	f01a 0f01 	tst.w	sl, #1
 800c1c4:	d003      	beq.n	800c1ce <_vfiprintf_r+0x73e>
 800c1c6:	2330      	movs	r3, #48	; 0x30
 800c1c8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800c1cc:	e79d      	b.n	800c10a <_vfiprintf_r+0x67a>
 800c1ce:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800c1d2:	e0da      	b.n	800c38a <_vfiprintf_r+0x8fa>
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80a4 	beq.w	800c322 <_vfiprintf_r+0x892>
 800c1da:	2100      	movs	r1, #0
 800c1dc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c1e0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800c1e4:	46a3      	mov	fp, r4
 800c1e6:	e5e7      	b.n	800bdb8 <_vfiprintf_r+0x328>
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	e68c      	b.n	800bf06 <_vfiprintf_r+0x476>
 800c1ec:	2010      	movs	r0, #16
 800c1ee:	4402      	add	r2, r0
 800c1f0:	2b07      	cmp	r3, #7
 800c1f2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c1f6:	6070      	str	r0, [r6, #4]
 800c1f8:	dd07      	ble.n	800c20a <_vfiprintf_r+0x77a>
 800c1fa:	aa0c      	add	r2, sp, #48	; 0x30
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	4648      	mov	r0, r9
 800c200:	f7ff fc13 	bl	800ba2a <__sprint_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	d16b      	bne.n	800c2e0 <_vfiprintf_r+0x850>
 800c208:	a90f      	add	r1, sp, #60	; 0x3c
 800c20a:	3c10      	subs	r4, #16
 800c20c:	460e      	mov	r6, r1
 800c20e:	e695      	b.n	800bf3c <_vfiprintf_r+0x4ac>
 800c210:	460e      	mov	r6, r1
 800c212:	e6ae      	b.n	800bf72 <_vfiprintf_r+0x4e2>
 800c214:	aa0c      	add	r2, sp, #48	; 0x30
 800c216:	4639      	mov	r1, r7
 800c218:	4648      	mov	r0, r9
 800c21a:	f7ff fc06 	bl	800ba2a <__sprint_r>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d15e      	bne.n	800c2e0 <_vfiprintf_r+0x850>
 800c222:	ae0f      	add	r6, sp, #60	; 0x3c
 800c224:	e6b7      	b.n	800bf96 <_vfiprintf_r+0x506>
 800c226:	bf00      	nop
 800c228:	0800e786 	.word	0x0800e786
 800c22c:	0800e796 	.word	0x0800e796
 800c230:	0800e3f5 	.word	0x0800e3f5
 800c234:	aa0c      	add	r2, sp, #48	; 0x30
 800c236:	4639      	mov	r1, r7
 800c238:	4648      	mov	r0, r9
 800c23a:	f7ff fbf6 	bl	800ba2a <__sprint_r>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d14e      	bne.n	800c2e0 <_vfiprintf_r+0x850>
 800c242:	ae0f      	add	r6, sp, #60	; 0x3c
 800c244:	e6b7      	b.n	800bfb6 <_vfiprintf_r+0x526>
 800c246:	2010      	movs	r0, #16
 800c248:	4402      	add	r2, r0
 800c24a:	2b07      	cmp	r3, #7
 800c24c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c250:	6070      	str	r0, [r6, #4]
 800c252:	dd07      	ble.n	800c264 <_vfiprintf_r+0x7d4>
 800c254:	aa0c      	add	r2, sp, #48	; 0x30
 800c256:	4639      	mov	r1, r7
 800c258:	4648      	mov	r0, r9
 800c25a:	f7ff fbe6 	bl	800ba2a <__sprint_r>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d13e      	bne.n	800c2e0 <_vfiprintf_r+0x850>
 800c262:	a90f      	add	r1, sp, #60	; 0x3c
 800c264:	3c10      	subs	r4, #16
 800c266:	460e      	mov	r6, r1
 800c268:	e6ad      	b.n	800bfc6 <_vfiprintf_r+0x536>
 800c26a:	460e      	mov	r6, r1
 800c26c:	e6c6      	b.n	800bffc <_vfiprintf_r+0x56c>
 800c26e:	2010      	movs	r0, #16
 800c270:	4401      	add	r1, r0
 800c272:	2b07      	cmp	r3, #7
 800c274:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c278:	6070      	str	r0, [r6, #4]
 800c27a:	dd06      	ble.n	800c28a <_vfiprintf_r+0x7fa>
 800c27c:	aa0c      	add	r2, sp, #48	; 0x30
 800c27e:	4639      	mov	r1, r7
 800c280:	4648      	mov	r0, r9
 800c282:	f7ff fbd2 	bl	800ba2a <__sprint_r>
 800c286:	bb58      	cbnz	r0, 800c2e0 <_vfiprintf_r+0x850>
 800c288:	aa0f      	add	r2, sp, #60	; 0x3c
 800c28a:	3c10      	subs	r4, #16
 800c28c:	4616      	mov	r6, r2
 800c28e:	e6ba      	b.n	800c006 <_vfiprintf_r+0x576>
 800c290:	4616      	mov	r6, r2
 800c292:	e6d2      	b.n	800c03a <_vfiprintf_r+0x5aa>
 800c294:	aa0c      	add	r2, sp, #48	; 0x30
 800c296:	4639      	mov	r1, r7
 800c298:	4648      	mov	r0, r9
 800c29a:	f7ff fbc6 	bl	800ba2a <__sprint_r>
 800c29e:	b9f8      	cbnz	r0, 800c2e0 <_vfiprintf_r+0x850>
 800c2a0:	ab0f      	add	r3, sp, #60	; 0x3c
 800c2a2:	e6d9      	b.n	800c058 <_vfiprintf_r+0x5c8>
 800c2a4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800c2a8:	1a54      	subs	r4, r2, r1
 800c2aa:	2c00      	cmp	r4, #0
 800c2ac:	f77f aed8 	ble.w	800c060 <_vfiprintf_r+0x5d0>
 800c2b0:	4d3a      	ldr	r5, [pc, #232]	; (800c39c <_vfiprintf_r+0x90c>)
 800c2b2:	2610      	movs	r6, #16
 800c2b4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800c2b8:	2c10      	cmp	r4, #16
 800c2ba:	f102 0201 	add.w	r2, r2, #1
 800c2be:	601d      	str	r5, [r3, #0]
 800c2c0:	dc1d      	bgt.n	800c2fe <_vfiprintf_r+0x86e>
 800c2c2:	605c      	str	r4, [r3, #4]
 800c2c4:	2a07      	cmp	r2, #7
 800c2c6:	440c      	add	r4, r1
 800c2c8:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800c2cc:	f77f aec8 	ble.w	800c060 <_vfiprintf_r+0x5d0>
 800c2d0:	aa0c      	add	r2, sp, #48	; 0x30
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	f7ff fba8 	bl	800ba2a <__sprint_r>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	f43f aec0 	beq.w	800c060 <_vfiprintf_r+0x5d0>
 800c2e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2e2:	07d9      	lsls	r1, r3, #31
 800c2e4:	d405      	bmi.n	800c2f2 <_vfiprintf_r+0x862>
 800c2e6:	89bb      	ldrh	r3, [r7, #12]
 800c2e8:	059a      	lsls	r2, r3, #22
 800c2ea:	d402      	bmi.n	800c2f2 <_vfiprintf_r+0x862>
 800c2ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c2ee:	f7fd fba8 	bl	8009a42 <__retarget_lock_release_recursive>
 800c2f2:	89bb      	ldrh	r3, [r7, #12]
 800c2f4:	065b      	lsls	r3, r3, #25
 800c2f6:	f57f abfe 	bpl.w	800baf6 <_vfiprintf_r+0x66>
 800c2fa:	f7ff bbf9 	b.w	800baf0 <_vfiprintf_r+0x60>
 800c2fe:	3110      	adds	r1, #16
 800c300:	2a07      	cmp	r2, #7
 800c302:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800c306:	605e      	str	r6, [r3, #4]
 800c308:	dc02      	bgt.n	800c310 <_vfiprintf_r+0x880>
 800c30a:	3308      	adds	r3, #8
 800c30c:	3c10      	subs	r4, #16
 800c30e:	e7d1      	b.n	800c2b4 <_vfiprintf_r+0x824>
 800c310:	aa0c      	add	r2, sp, #48	; 0x30
 800c312:	4639      	mov	r1, r7
 800c314:	4648      	mov	r0, r9
 800c316:	f7ff fb88 	bl	800ba2a <__sprint_r>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d1e0      	bne.n	800c2e0 <_vfiprintf_r+0x850>
 800c31e:	ab0f      	add	r3, sp, #60	; 0x3c
 800c320:	e7f4      	b.n	800c30c <_vfiprintf_r+0x87c>
 800c322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c324:	b913      	cbnz	r3, 800c32c <_vfiprintf_r+0x89c>
 800c326:	2300      	movs	r3, #0
 800c328:	930d      	str	r3, [sp, #52]	; 0x34
 800c32a:	e7d9      	b.n	800c2e0 <_vfiprintf_r+0x850>
 800c32c:	aa0c      	add	r2, sp, #48	; 0x30
 800c32e:	4639      	mov	r1, r7
 800c330:	4648      	mov	r0, r9
 800c332:	f7ff fb7a 	bl	800ba2a <__sprint_r>
 800c336:	2800      	cmp	r0, #0
 800c338:	d0f5      	beq.n	800c326 <_vfiprintf_r+0x896>
 800c33a:	e7d1      	b.n	800c2e0 <_vfiprintf_r+0x850>
 800c33c:	ea54 0205 	orrs.w	r2, r4, r5
 800c340:	f8cd a010 	str.w	sl, [sp, #16]
 800c344:	f43f ada4 	beq.w	800be90 <_vfiprintf_r+0x400>
 800c348:	2b01      	cmp	r3, #1
 800c34a:	f43f aed7 	beq.w	800c0fc <_vfiprintf_r+0x66c>
 800c34e:	2b02      	cmp	r3, #2
 800c350:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800c354:	f43f af23 	beq.w	800c19e <_vfiprintf_r+0x70e>
 800c358:	08e2      	lsrs	r2, r4, #3
 800c35a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800c35e:	08e8      	lsrs	r0, r5, #3
 800c360:	f004 0307 	and.w	r3, r4, #7
 800c364:	4605      	mov	r5, r0
 800c366:	4614      	mov	r4, r2
 800c368:	3330      	adds	r3, #48	; 0x30
 800c36a:	ea54 0205 	orrs.w	r2, r4, r5
 800c36e:	4641      	mov	r1, r8
 800c370:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c374:	d1f0      	bne.n	800c358 <_vfiprintf_r+0x8c8>
 800c376:	9a04      	ldr	r2, [sp, #16]
 800c378:	07d0      	lsls	r0, r2, #31
 800c37a:	d506      	bpl.n	800c38a <_vfiprintf_r+0x8fa>
 800c37c:	2b30      	cmp	r3, #48	; 0x30
 800c37e:	d004      	beq.n	800c38a <_vfiprintf_r+0x8fa>
 800c380:	2330      	movs	r3, #48	; 0x30
 800c382:	f808 3c01 	strb.w	r3, [r8, #-1]
 800c386:	f1a1 0802 	sub.w	r8, r1, #2
 800c38a:	ab38      	add	r3, sp, #224	; 0xe0
 800c38c:	eba3 0308 	sub.w	r3, r3, r8
 800c390:	9d00      	ldr	r5, [sp, #0]
 800c392:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	e5b5      	b.n	800bf06 <_vfiprintf_r+0x476>
 800c39a:	bf00      	nop
 800c39c:	0800e786 	.word	0x0800e786

0800c3a0 <__sbprintf>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	8989      	ldrh	r1, [r1, #12]
 800c3a6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800c3aa:	f021 0102 	bic.w	r1, r1, #2
 800c3ae:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c3b2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c3b4:	911b      	str	r1, [sp, #108]	; 0x6c
 800c3b6:	89e1      	ldrh	r1, [r4, #14]
 800c3b8:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c3bc:	69e1      	ldr	r1, [r4, #28]
 800c3be:	9109      	str	r1, [sp, #36]	; 0x24
 800c3c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3c2:	910b      	str	r1, [sp, #44]	; 0x2c
 800c3c4:	a91c      	add	r1, sp, #112	; 0x70
 800c3c6:	9102      	str	r1, [sp, #8]
 800c3c8:	9106      	str	r1, [sp, #24]
 800c3ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	9104      	str	r1, [sp, #16]
 800c3d2:	9107      	str	r1, [sp, #28]
 800c3d4:	a818      	add	r0, sp, #96	; 0x60
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	e9cd 3200 	strd	r3, r2, [sp]
 800c3dc:	9108      	str	r1, [sp, #32]
 800c3de:	f7fd fb2b 	bl	8009a38 <__retarget_lock_init_recursive>
 800c3e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c3e6:	a902      	add	r1, sp, #8
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff fb51 	bl	800ba90 <_vfiprintf_r>
 800c3ee:	1e05      	subs	r5, r0, #0
 800c3f0:	db07      	blt.n	800c402 <__sbprintf+0x62>
 800c3f2:	a902      	add	r1, sp, #8
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7fd f8f9 	bl	80095ec <_fflush_r>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	bf18      	it	ne
 800c3fe:	f04f 35ff 	movne.w	r5, #4294967295
 800c402:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c406:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c408:	065b      	lsls	r3, r3, #25
 800c40a:	bf42      	ittt	mi
 800c40c:	89a3      	ldrhmi	r3, [r4, #12]
 800c40e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800c412:	81a3      	strhmi	r3, [r4, #12]
 800c414:	f7fd fb11 	bl	8009a3a <__retarget_lock_close_recursive>
 800c418:	4628      	mov	r0, r5
 800c41a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800c41e:	bd70      	pop	{r4, r5, r6, pc}

0800c420 <_write_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4d07      	ldr	r5, [pc, #28]	; (800c440 <_write_r+0x20>)
 800c424:	4604      	mov	r4, r0
 800c426:	4608      	mov	r0, r1
 800c428:	4611      	mov	r1, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	602a      	str	r2, [r5, #0]
 800c42e:	461a      	mov	r2, r3
 800c430:	f7f4 fd87 	bl	8000f42 <_write>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_write_r+0x1e>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_write_r+0x1e>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	20000cb0 	.word	0x20000cb0

0800c444 <__register_exitproc>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	4d1c      	ldr	r5, [pc, #112]	; (800c4bc <__register_exitproc+0x78>)
 800c44a:	4606      	mov	r6, r0
 800c44c:	6828      	ldr	r0, [r5, #0]
 800c44e:	4698      	mov	r8, r3
 800c450:	460f      	mov	r7, r1
 800c452:	4691      	mov	r9, r2
 800c454:	f7fd faf3 	bl	8009a3e <__retarget_lock_acquire_recursive>
 800c458:	4b19      	ldr	r3, [pc, #100]	; (800c4c0 <__register_exitproc+0x7c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800c460:	4628      	mov	r0, r5
 800c462:	b91c      	cbnz	r4, 800c46c <__register_exitproc+0x28>
 800c464:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800c468:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800c46c:	6865      	ldr	r5, [r4, #4]
 800c46e:	6800      	ldr	r0, [r0, #0]
 800c470:	2d1f      	cmp	r5, #31
 800c472:	dd05      	ble.n	800c480 <__register_exitproc+0x3c>
 800c474:	f7fd fae5 	bl	8009a42 <__retarget_lock_release_recursive>
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c480:	b19e      	cbz	r6, 800c4aa <__register_exitproc+0x66>
 800c482:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800c486:	2201      	movs	r2, #1
 800c488:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800c48c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800c490:	40aa      	lsls	r2, r5
 800c492:	4313      	orrs	r3, r2
 800c494:	2e02      	cmp	r6, #2
 800c496:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800c49a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800c49e:	bf02      	ittt	eq
 800c4a0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800c4a4:	431a      	orreq	r2, r3
 800c4a6:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800c4aa:	1c6b      	adds	r3, r5, #1
 800c4ac:	3502      	adds	r5, #2
 800c4ae:	6063      	str	r3, [r4, #4]
 800c4b0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800c4b4:	f7fd fac5 	bl	8009a42 <__retarget_lock_release_recursive>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e7df      	b.n	800c47c <__register_exitproc+0x38>
 800c4bc:	20000450 	.word	0x20000450
 800c4c0:	0800e334 	.word	0x0800e334

0800c4c4 <__assert_func>:
 800c4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4c6:	4614      	mov	r4, r2
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <__assert_func+0x2c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	68d8      	ldr	r0, [r3, #12]
 800c4d2:	b14c      	cbz	r4, 800c4e8 <__assert_func+0x24>
 800c4d4:	4b07      	ldr	r3, [pc, #28]	; (800c4f4 <__assert_func+0x30>)
 800c4d6:	9100      	str	r1, [sp, #0]
 800c4d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4dc:	4906      	ldr	r1, [pc, #24]	; (800c4f8 <__assert_func+0x34>)
 800c4de:	462b      	mov	r3, r5
 800c4e0:	f000 f8b0 	bl	800c644 <fiprintf>
 800c4e4:	f000 fe9f 	bl	800d226 <abort>
 800c4e8:	4b04      	ldr	r3, [pc, #16]	; (800c4fc <__assert_func+0x38>)
 800c4ea:	461c      	mov	r4, r3
 800c4ec:	e7f3      	b.n	800c4d6 <__assert_func+0x12>
 800c4ee:	bf00      	nop
 800c4f0:	20000018 	.word	0x20000018
 800c4f4:	0800e7a6 	.word	0x0800e7a6
 800c4f8:	0800e7b3 	.word	0x0800e7b3
 800c4fc:	0800e7e1 	.word	0x0800e7e1

0800c500 <_calloc_r>:
 800c500:	b510      	push	{r4, lr}
 800c502:	4351      	muls	r1, r2
 800c504:	f7fd fb1a 	bl	8009b3c <_malloc_r>
 800c508:	4604      	mov	r4, r0
 800c50a:	b198      	cbz	r0, 800c534 <_calloc_r+0x34>
 800c50c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c510:	f022 0203 	bic.w	r2, r2, #3
 800c514:	3a04      	subs	r2, #4
 800c516:	2a24      	cmp	r2, #36	; 0x24
 800c518:	d81b      	bhi.n	800c552 <_calloc_r+0x52>
 800c51a:	2a13      	cmp	r2, #19
 800c51c:	d917      	bls.n	800c54e <_calloc_r+0x4e>
 800c51e:	2100      	movs	r1, #0
 800c520:	2a1b      	cmp	r2, #27
 800c522:	e9c0 1100 	strd	r1, r1, [r0]
 800c526:	d807      	bhi.n	800c538 <_calloc_r+0x38>
 800c528:	f100 0308 	add.w	r3, r0, #8
 800c52c:	2200      	movs	r2, #0
 800c52e:	e9c3 2200 	strd	r2, r2, [r3]
 800c532:	609a      	str	r2, [r3, #8]
 800c534:	4620      	mov	r0, r4
 800c536:	bd10      	pop	{r4, pc}
 800c538:	2a24      	cmp	r2, #36	; 0x24
 800c53a:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800c53e:	bf11      	iteee	ne
 800c540:	f100 0310 	addne.w	r3, r0, #16
 800c544:	6101      	streq	r1, [r0, #16]
 800c546:	f100 0318 	addeq.w	r3, r0, #24
 800c54a:	6141      	streq	r1, [r0, #20]
 800c54c:	e7ee      	b.n	800c52c <_calloc_r+0x2c>
 800c54e:	4603      	mov	r3, r0
 800c550:	e7ec      	b.n	800c52c <_calloc_r+0x2c>
 800c552:	2100      	movs	r1, #0
 800c554:	f7fa f90a 	bl	800676c <memset>
 800c558:	e7ec      	b.n	800c534 <_calloc_r+0x34>
	...

0800c55c <_close_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	4d06      	ldr	r5, [pc, #24]	; (800c578 <_close_r+0x1c>)
 800c560:	2300      	movs	r3, #0
 800c562:	4604      	mov	r4, r0
 800c564:	4608      	mov	r0, r1
 800c566:	602b      	str	r3, [r5, #0]
 800c568:	f7f6 f991 	bl	800288e <_close>
 800c56c:	1c43      	adds	r3, r0, #1
 800c56e:	d102      	bne.n	800c576 <_close_r+0x1a>
 800c570:	682b      	ldr	r3, [r5, #0]
 800c572:	b103      	cbz	r3, 800c576 <_close_r+0x1a>
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	20000cb0 	.word	0x20000cb0

0800c57c <__env_lock>:
 800c57c:	4801      	ldr	r0, [pc, #4]	; (800c584 <__env_lock+0x8>)
 800c57e:	f7fd ba5e 	b.w	8009a3e <__retarget_lock_acquire_recursive>
 800c582:	bf00      	nop
 800c584:	20000ca6 	.word	0x20000ca6

0800c588 <__env_unlock>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__env_unlock+0x8>)
 800c58a:	f7fd ba5a 	b.w	8009a42 <__retarget_lock_release_recursive>
 800c58e:	bf00      	nop
 800c590:	20000ca6 	.word	0x20000ca6

0800c594 <_fclose_r>:
 800c594:	b570      	push	{r4, r5, r6, lr}
 800c596:	4606      	mov	r6, r0
 800c598:	460c      	mov	r4, r1
 800c59a:	b911      	cbnz	r1, 800c5a2 <_fclose_r+0xe>
 800c59c:	2500      	movs	r5, #0
 800c59e:	4628      	mov	r0, r5
 800c5a0:	bd70      	pop	{r4, r5, r6, pc}
 800c5a2:	b118      	cbz	r0, 800c5ac <_fclose_r+0x18>
 800c5a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c5a6:	b90b      	cbnz	r3, 800c5ac <_fclose_r+0x18>
 800c5a8:	f7fd f88c 	bl	80096c4 <__sinit>
 800c5ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ae:	07d8      	lsls	r0, r3, #31
 800c5b0:	d405      	bmi.n	800c5be <_fclose_r+0x2a>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	0599      	lsls	r1, r3, #22
 800c5b6:	d402      	bmi.n	800c5be <_fclose_r+0x2a>
 800c5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ba:	f7fd fa40 	bl	8009a3e <__retarget_lock_acquire_recursive>
 800c5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c2:	b93b      	cbnz	r3, 800c5d4 <_fclose_r+0x40>
 800c5c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c5c6:	f015 0501 	ands.w	r5, r5, #1
 800c5ca:	d1e7      	bne.n	800c59c <_fclose_r+0x8>
 800c5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ce:	f7fd fa38 	bl	8009a42 <__retarget_lock_release_recursive>
 800c5d2:	e7e4      	b.n	800c59e <_fclose_r+0xa>
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f7fc ff7a 	bl	80094d0 <__sflush_r>
 800c5dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c5de:	4605      	mov	r5, r0
 800c5e0:	b133      	cbz	r3, 800c5f0 <_fclose_r+0x5c>
 800c5e2:	69e1      	ldr	r1, [r4, #28]
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	4798      	blx	r3
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	bfb8      	it	lt
 800c5ec:	f04f 35ff 	movlt.w	r5, #4294967295
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	061a      	lsls	r2, r3, #24
 800c5f4:	d503      	bpl.n	800c5fe <_fclose_r+0x6a>
 800c5f6:	6921      	ldr	r1, [r4, #16]
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7fd f8f3 	bl	80097e4 <_free_r>
 800c5fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c600:	b141      	cbz	r1, 800c614 <_fclose_r+0x80>
 800c602:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c606:	4299      	cmp	r1, r3
 800c608:	d002      	beq.n	800c610 <_fclose_r+0x7c>
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7fd f8ea 	bl	80097e4 <_free_r>
 800c610:	2300      	movs	r3, #0
 800c612:	6323      	str	r3, [r4, #48]	; 0x30
 800c614:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c616:	b121      	cbz	r1, 800c622 <_fclose_r+0x8e>
 800c618:	4630      	mov	r0, r6
 800c61a:	f7fd f8e3 	bl	80097e4 <_free_r>
 800c61e:	2300      	movs	r3, #0
 800c620:	6463      	str	r3, [r4, #68]	; 0x44
 800c622:	f7fd f837 	bl	8009694 <__sfp_lock_acquire>
 800c626:	2300      	movs	r3, #0
 800c628:	81a3      	strh	r3, [r4, #12]
 800c62a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c62c:	07db      	lsls	r3, r3, #31
 800c62e:	d402      	bmi.n	800c636 <_fclose_r+0xa2>
 800c630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c632:	f7fd fa06 	bl	8009a42 <__retarget_lock_release_recursive>
 800c636:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c638:	f7fd f9ff 	bl	8009a3a <__retarget_lock_close_recursive>
 800c63c:	f7fd f830 	bl	80096a0 <__sfp_lock_release>
 800c640:	e7ad      	b.n	800c59e <_fclose_r+0xa>
	...

0800c644 <fiprintf>:
 800c644:	b40e      	push	{r1, r2, r3}
 800c646:	b503      	push	{r0, r1, lr}
 800c648:	4601      	mov	r1, r0
 800c64a:	ab03      	add	r3, sp, #12
 800c64c:	4805      	ldr	r0, [pc, #20]	; (800c664 <fiprintf+0x20>)
 800c64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c652:	6800      	ldr	r0, [r0, #0]
 800c654:	9301      	str	r3, [sp, #4]
 800c656:	f7ff fa1b 	bl	800ba90 <_vfiprintf_r>
 800c65a:	b002      	add	sp, #8
 800c65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c660:	b003      	add	sp, #12
 800c662:	4770      	bx	lr
 800c664:	20000018 	.word	0x20000018

0800c668 <__fputwc>:
 800c668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	4680      	mov	r8, r0
 800c66e:	460e      	mov	r6, r1
 800c670:	4615      	mov	r5, r2
 800c672:	f000 f9df 	bl	800ca34 <__locale_mb_cur_max>
 800c676:	2801      	cmp	r0, #1
 800c678:	d11c      	bne.n	800c6b4 <__fputwc+0x4c>
 800c67a:	1e73      	subs	r3, r6, #1
 800c67c:	2bfe      	cmp	r3, #254	; 0xfe
 800c67e:	d819      	bhi.n	800c6b4 <__fputwc+0x4c>
 800c680:	f88d 6004 	strb.w	r6, [sp, #4]
 800c684:	4604      	mov	r4, r0
 800c686:	2700      	movs	r7, #0
 800c688:	f10d 0904 	add.w	r9, sp, #4
 800c68c:	42a7      	cmp	r7, r4
 800c68e:	d020      	beq.n	800c6d2 <__fputwc+0x6a>
 800c690:	68ab      	ldr	r3, [r5, #8]
 800c692:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c696:	3b01      	subs	r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	60ab      	str	r3, [r5, #8]
 800c69c:	da04      	bge.n	800c6a8 <__fputwc+0x40>
 800c69e:	69aa      	ldr	r2, [r5, #24]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	db1a      	blt.n	800c6da <__fputwc+0x72>
 800c6a4:	290a      	cmp	r1, #10
 800c6a6:	d018      	beq.n	800c6da <__fputwc+0x72>
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	602a      	str	r2, [r5, #0]
 800c6ae:	7019      	strb	r1, [r3, #0]
 800c6b0:	3701      	adds	r7, #1
 800c6b2:	e7eb      	b.n	800c68c <__fputwc+0x24>
 800c6b4:	4632      	mov	r2, r6
 800c6b6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800c6ba:	a901      	add	r1, sp, #4
 800c6bc:	4640      	mov	r0, r8
 800c6be:	f000 fd8f 	bl	800d1e0 <_wcrtomb_r>
 800c6c2:	1c42      	adds	r2, r0, #1
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	d1de      	bne.n	800c686 <__fputwc+0x1e>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ce:	81ab      	strh	r3, [r5, #12]
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	b003      	add	sp, #12
 800c6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6da:	462a      	mov	r2, r5
 800c6dc:	4640      	mov	r0, r8
 800c6de:	f000 fd35 	bl	800d14c <__swbuf_r>
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	d1e4      	bne.n	800c6b0 <__fputwc+0x48>
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	e7f3      	b.n	800c6d2 <__fputwc+0x6a>

0800c6ea <_fputwc_r>:
 800c6ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ee:	4614      	mov	r4, r2
 800c6f0:	07da      	lsls	r2, r3, #31
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	d407      	bmi.n	800c706 <_fputwc_r+0x1c>
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	059b      	lsls	r3, r3, #22
 800c6fa:	d404      	bmi.n	800c706 <_fputwc_r+0x1c>
 800c6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6fe:	9101      	str	r1, [sp, #4]
 800c700:	f7fd f99d 	bl	8009a3e <__retarget_lock_acquire_recursive>
 800c704:	9901      	ldr	r1, [sp, #4]
 800c706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70a:	0498      	lsls	r0, r3, #18
 800c70c:	d406      	bmi.n	800c71c <_fputwc_r+0x32>
 800c70e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c71a:	6663      	str	r3, [r4, #100]	; 0x64
 800c71c:	4622      	mov	r2, r4
 800c71e:	4628      	mov	r0, r5
 800c720:	f7ff ffa2 	bl	800c668 <__fputwc>
 800c724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c726:	07da      	lsls	r2, r3, #31
 800c728:	4605      	mov	r5, r0
 800c72a:	d405      	bmi.n	800c738 <_fputwc_r+0x4e>
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	059b      	lsls	r3, r3, #22
 800c730:	d402      	bmi.n	800c738 <_fputwc_r+0x4e>
 800c732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c734:	f7fd f985 	bl	8009a42 <__retarget_lock_release_recursive>
 800c738:	4628      	mov	r0, r5
 800c73a:	b003      	add	sp, #12
 800c73c:	bd30      	pop	{r4, r5, pc}
	...

0800c740 <_fstat_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	; (800c760 <_fstat_r+0x20>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	4611      	mov	r1, r2
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	f7f6 f8aa 	bl	80028a6 <_fstat>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d102      	bne.n	800c75c <_fstat_r+0x1c>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	b103      	cbz	r3, 800c75c <_fstat_r+0x1c>
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	bd38      	pop	{r3, r4, r5, pc}
 800c75e:	bf00      	nop
 800c760:	20000cb0 	.word	0x20000cb0

0800c764 <__sfvwrite_r>:
 800c764:	6893      	ldr	r3, [r2, #8]
 800c766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76a:	4606      	mov	r6, r0
 800c76c:	460c      	mov	r4, r1
 800c76e:	4690      	mov	r8, r2
 800c770:	b91b      	cbnz	r3, 800c77a <__sfvwrite_r+0x16>
 800c772:	2000      	movs	r0, #0
 800c774:	b003      	add	sp, #12
 800c776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77a:	898b      	ldrh	r3, [r1, #12]
 800c77c:	0718      	lsls	r0, r3, #28
 800c77e:	d550      	bpl.n	800c822 <__sfvwrite_r+0xbe>
 800c780:	690b      	ldr	r3, [r1, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d04d      	beq.n	800c822 <__sfvwrite_r+0xbe>
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	f8d8 7000 	ldr.w	r7, [r8]
 800c78c:	f013 0902 	ands.w	r9, r3, #2
 800c790:	d16c      	bne.n	800c86c <__sfvwrite_r+0x108>
 800c792:	f013 0301 	ands.w	r3, r3, #1
 800c796:	f000 809c 	beq.w	800c8d2 <__sfvwrite_r+0x16e>
 800c79a:	4648      	mov	r0, r9
 800c79c:	46ca      	mov	sl, r9
 800c79e:	46cb      	mov	fp, r9
 800c7a0:	f1bb 0f00 	cmp.w	fp, #0
 800c7a4:	f000 8103 	beq.w	800c9ae <__sfvwrite_r+0x24a>
 800c7a8:	b950      	cbnz	r0, 800c7c0 <__sfvwrite_r+0x5c>
 800c7aa:	465a      	mov	r2, fp
 800c7ac:	210a      	movs	r1, #10
 800c7ae:	4650      	mov	r0, sl
 800c7b0:	f7f3 fd36 	bl	8000220 <memchr>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	f000 80ff 	beq.w	800c9b8 <__sfvwrite_r+0x254>
 800c7ba:	3001      	adds	r0, #1
 800c7bc:	eba0 090a 	sub.w	r9, r0, sl
 800c7c0:	6820      	ldr	r0, [r4, #0]
 800c7c2:	6921      	ldr	r1, [r4, #16]
 800c7c4:	6963      	ldr	r3, [r4, #20]
 800c7c6:	45d9      	cmp	r9, fp
 800c7c8:	464a      	mov	r2, r9
 800c7ca:	bf28      	it	cs
 800c7cc:	465a      	movcs	r2, fp
 800c7ce:	4288      	cmp	r0, r1
 800c7d0:	f240 80f5 	bls.w	800c9be <__sfvwrite_r+0x25a>
 800c7d4:	68a5      	ldr	r5, [r4, #8]
 800c7d6:	441d      	add	r5, r3
 800c7d8:	42aa      	cmp	r2, r5
 800c7da:	f340 80f0 	ble.w	800c9be <__sfvwrite_r+0x25a>
 800c7de:	4651      	mov	r1, sl
 800c7e0:	462a      	mov	r2, r5
 800c7e2:	f000 f96b 	bl	800cabc <memmove>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	442b      	add	r3, r5
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7fc fefc 	bl	80095ec <_fflush_r>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d167      	bne.n	800c8c8 <__sfvwrite_r+0x164>
 800c7f8:	ebb9 0905 	subs.w	r9, r9, r5
 800c7fc:	f040 80f7 	bne.w	800c9ee <__sfvwrite_r+0x28a>
 800c800:	4621      	mov	r1, r4
 800c802:	4630      	mov	r0, r6
 800c804:	f7fc fef2 	bl	80095ec <_fflush_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d15d      	bne.n	800c8c8 <__sfvwrite_r+0x164>
 800c80c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c810:	44aa      	add	sl, r5
 800c812:	ebab 0b05 	sub.w	fp, fp, r5
 800c816:	1b55      	subs	r5, r2, r5
 800c818:	f8c8 5008 	str.w	r5, [r8, #8]
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	d1bf      	bne.n	800c7a0 <__sfvwrite_r+0x3c>
 800c820:	e7a7      	b.n	800c772 <__sfvwrite_r+0xe>
 800c822:	4621      	mov	r1, r4
 800c824:	4630      	mov	r0, r6
 800c826:	f7fb ff75 	bl	8008714 <__swsetup_r>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0ab      	beq.n	800c786 <__sfvwrite_r+0x22>
 800c82e:	f04f 30ff 	mov.w	r0, #4294967295
 800c832:	e79f      	b.n	800c774 <__sfvwrite_r+0x10>
 800c834:	e9d7 b900 	ldrd	fp, r9, [r7]
 800c838:	3708      	adds	r7, #8
 800c83a:	f1b9 0f00 	cmp.w	r9, #0
 800c83e:	d0f9      	beq.n	800c834 <__sfvwrite_r+0xd0>
 800c840:	45d1      	cmp	r9, sl
 800c842:	464b      	mov	r3, r9
 800c844:	69e1      	ldr	r1, [r4, #28]
 800c846:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c848:	bf28      	it	cs
 800c84a:	4653      	movcs	r3, sl
 800c84c:	465a      	mov	r2, fp
 800c84e:	4630      	mov	r0, r6
 800c850:	47a8      	blx	r5
 800c852:	2800      	cmp	r0, #0
 800c854:	dd38      	ble.n	800c8c8 <__sfvwrite_r+0x164>
 800c856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c85a:	4483      	add	fp, r0
 800c85c:	eba9 0900 	sub.w	r9, r9, r0
 800c860:	1a18      	subs	r0, r3, r0
 800c862:	f8c8 0008 	str.w	r0, [r8, #8]
 800c866:	2800      	cmp	r0, #0
 800c868:	d1e7      	bne.n	800c83a <__sfvwrite_r+0xd6>
 800c86a:	e782      	b.n	800c772 <__sfvwrite_r+0xe>
 800c86c:	f04f 0b00 	mov.w	fp, #0
 800c870:	f8df a180 	ldr.w	sl, [pc, #384]	; 800c9f4 <__sfvwrite_r+0x290>
 800c874:	46d9      	mov	r9, fp
 800c876:	e7e0      	b.n	800c83a <__sfvwrite_r+0xd6>
 800c878:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800c87c:	3708      	adds	r7, #8
 800c87e:	f1ba 0f00 	cmp.w	sl, #0
 800c882:	d0f9      	beq.n	800c878 <__sfvwrite_r+0x114>
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	68a2      	ldr	r2, [r4, #8]
 800c888:	6820      	ldr	r0, [r4, #0]
 800c88a:	0599      	lsls	r1, r3, #22
 800c88c:	d563      	bpl.n	800c956 <__sfvwrite_r+0x1f2>
 800c88e:	4552      	cmp	r2, sl
 800c890:	d836      	bhi.n	800c900 <__sfvwrite_r+0x19c>
 800c892:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c896:	d033      	beq.n	800c900 <__sfvwrite_r+0x19c>
 800c898:	6921      	ldr	r1, [r4, #16]
 800c89a:	6965      	ldr	r5, [r4, #20]
 800c89c:	eba0 0b01 	sub.w	fp, r0, r1
 800c8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8a8:	f10b 0201 	add.w	r2, fp, #1
 800c8ac:	106d      	asrs	r5, r5, #1
 800c8ae:	4452      	add	r2, sl
 800c8b0:	4295      	cmp	r5, r2
 800c8b2:	bf38      	it	cc
 800c8b4:	4615      	movcc	r5, r2
 800c8b6:	055b      	lsls	r3, r3, #21
 800c8b8:	d53d      	bpl.n	800c936 <__sfvwrite_r+0x1d2>
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7fd f93d 	bl	8009b3c <_malloc_r>
 800c8c2:	b948      	cbnz	r0, 800c8d8 <__sfvwrite_r+0x174>
 800c8c4:	230c      	movs	r3, #12
 800c8c6:	6033      	str	r3, [r6, #0]
 800c8c8:	89a3      	ldrh	r3, [r4, #12]
 800c8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	e7ad      	b.n	800c82e <__sfvwrite_r+0xca>
 800c8d2:	4699      	mov	r9, r3
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	e7d2      	b.n	800c87e <__sfvwrite_r+0x11a>
 800c8d8:	465a      	mov	r2, fp
 800c8da:	6921      	ldr	r1, [r4, #16]
 800c8dc:	9001      	str	r0, [sp, #4]
 800c8de:	f7fd fb6f 	bl	8009fc0 <memcpy>
 800c8e2:	89a2      	ldrh	r2, [r4, #12]
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c8ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c8ee:	81a2      	strh	r2, [r4, #12]
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	6165      	str	r5, [r4, #20]
 800c8f4:	445b      	add	r3, fp
 800c8f6:	eba5 050b 	sub.w	r5, r5, fp
 800c8fa:	6023      	str	r3, [r4, #0]
 800c8fc:	4652      	mov	r2, sl
 800c8fe:	60a5      	str	r5, [r4, #8]
 800c900:	4552      	cmp	r2, sl
 800c902:	bf28      	it	cs
 800c904:	4652      	movcs	r2, sl
 800c906:	6820      	ldr	r0, [r4, #0]
 800c908:	9201      	str	r2, [sp, #4]
 800c90a:	4649      	mov	r1, r9
 800c90c:	f000 f8d6 	bl	800cabc <memmove>
 800c910:	68a3      	ldr	r3, [r4, #8]
 800c912:	9a01      	ldr	r2, [sp, #4]
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	60a3      	str	r3, [r4, #8]
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	441a      	add	r2, r3
 800c91c:	4655      	mov	r5, sl
 800c91e:	6022      	str	r2, [r4, #0]
 800c920:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c924:	44a9      	add	r9, r5
 800c926:	ebaa 0a05 	sub.w	sl, sl, r5
 800c92a:	1b45      	subs	r5, r0, r5
 800c92c:	f8c8 5008 	str.w	r5, [r8, #8]
 800c930:	2d00      	cmp	r5, #0
 800c932:	d1a4      	bne.n	800c87e <__sfvwrite_r+0x11a>
 800c934:	e71d      	b.n	800c772 <__sfvwrite_r+0xe>
 800c936:	462a      	mov	r2, r5
 800c938:	4630      	mov	r0, r6
 800c93a:	f000 f8f3 	bl	800cb24 <_realloc_r>
 800c93e:	4603      	mov	r3, r0
 800c940:	2800      	cmp	r0, #0
 800c942:	d1d5      	bne.n	800c8f0 <__sfvwrite_r+0x18c>
 800c944:	6921      	ldr	r1, [r4, #16]
 800c946:	4630      	mov	r0, r6
 800c948:	f7fc ff4c 	bl	80097e4 <_free_r>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c952:	81a3      	strh	r3, [r4, #12]
 800c954:	e7b6      	b.n	800c8c4 <__sfvwrite_r+0x160>
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	4283      	cmp	r3, r0
 800c95a:	d302      	bcc.n	800c962 <__sfvwrite_r+0x1fe>
 800c95c:	6961      	ldr	r1, [r4, #20]
 800c95e:	4551      	cmp	r1, sl
 800c960:	d915      	bls.n	800c98e <__sfvwrite_r+0x22a>
 800c962:	4552      	cmp	r2, sl
 800c964:	bf28      	it	cs
 800c966:	4652      	movcs	r2, sl
 800c968:	4649      	mov	r1, r9
 800c96a:	4615      	mov	r5, r2
 800c96c:	f000 f8a6 	bl	800cabc <memmove>
 800c970:	68a3      	ldr	r3, [r4, #8]
 800c972:	6822      	ldr	r2, [r4, #0]
 800c974:	1b5b      	subs	r3, r3, r5
 800c976:	442a      	add	r2, r5
 800c978:	60a3      	str	r3, [r4, #8]
 800c97a:	6022      	str	r2, [r4, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1cf      	bne.n	800c920 <__sfvwrite_r+0x1bc>
 800c980:	4621      	mov	r1, r4
 800c982:	4630      	mov	r0, r6
 800c984:	f7fc fe32 	bl	80095ec <_fflush_r>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d0c9      	beq.n	800c920 <__sfvwrite_r+0x1bc>
 800c98c:	e79c      	b.n	800c8c8 <__sfvwrite_r+0x164>
 800c98e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c992:	459a      	cmp	sl, r3
 800c994:	bf38      	it	cc
 800c996:	4653      	movcc	r3, sl
 800c998:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c99a:	fb93 f3f1 	sdiv	r3, r3, r1
 800c99e:	464a      	mov	r2, r9
 800c9a0:	434b      	muls	r3, r1
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	69e1      	ldr	r1, [r4, #28]
 800c9a6:	47a8      	blx	r5
 800c9a8:	1e05      	subs	r5, r0, #0
 800c9aa:	dcb9      	bgt.n	800c920 <__sfvwrite_r+0x1bc>
 800c9ac:	e78c      	b.n	800c8c8 <__sfvwrite_r+0x164>
 800c9ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	e6f3      	b.n	800c7a0 <__sfvwrite_r+0x3c>
 800c9b8:	f10b 0901 	add.w	r9, fp, #1
 800c9bc:	e700      	b.n	800c7c0 <__sfvwrite_r+0x5c>
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	dc08      	bgt.n	800c9d4 <__sfvwrite_r+0x270>
 800c9c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c9c4:	69e1      	ldr	r1, [r4, #28]
 800c9c6:	4652      	mov	r2, sl
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	47a8      	blx	r5
 800c9cc:	1e05      	subs	r5, r0, #0
 800c9ce:	f73f af13 	bgt.w	800c7f8 <__sfvwrite_r+0x94>
 800c9d2:	e779      	b.n	800c8c8 <__sfvwrite_r+0x164>
 800c9d4:	4651      	mov	r1, sl
 800c9d6:	9201      	str	r2, [sp, #4]
 800c9d8:	f000 f870 	bl	800cabc <memmove>
 800c9dc:	9a01      	ldr	r2, [sp, #4]
 800c9de:	68a3      	ldr	r3, [r4, #8]
 800c9e0:	1a9b      	subs	r3, r3, r2
 800c9e2:	60a3      	str	r3, [r4, #8]
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	4615      	mov	r5, r2
 800c9ec:	e704      	b.n	800c7f8 <__sfvwrite_r+0x94>
 800c9ee:	2001      	movs	r0, #1
 800c9f0:	e70c      	b.n	800c80c <__sfvwrite_r+0xa8>
 800c9f2:	bf00      	nop
 800c9f4:	7ffffc00 	.word	0x7ffffc00

0800c9f8 <_isatty_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d06      	ldr	r5, [pc, #24]	; (800ca14 <_isatty_r+0x1c>)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4608      	mov	r0, r1
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	f7f5 ff5f 	bl	80028c6 <_isatty>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_isatty_r+0x1a>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_isatty_r+0x1a>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	20000cb0 	.word	0x20000cb0

0800ca18 <iswspace>:
 800ca18:	2100      	movs	r1, #0
 800ca1a:	f000 b801 	b.w	800ca20 <iswspace_l>
	...

0800ca20 <iswspace_l>:
 800ca20:	28ff      	cmp	r0, #255	; 0xff
 800ca22:	bf9d      	ittte	ls
 800ca24:	4b02      	ldrls	r3, [pc, #8]	; (800ca30 <iswspace_l+0x10>)
 800ca26:	5cc0      	ldrbls	r0, [r0, r3]
 800ca28:	f000 0008 	andls.w	r0, r0, #8
 800ca2c:	2000      	movhi	r0, #0
 800ca2e:	4770      	bx	lr
 800ca30:	0800e429 	.word	0x0800e429

0800ca34 <__locale_mb_cur_max>:
 800ca34:	4b01      	ldr	r3, [pc, #4]	; (800ca3c <__locale_mb_cur_max+0x8>)
 800ca36:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ca3a:	4770      	bx	lr
 800ca3c:	200008c0 	.word	0x200008c0

0800ca40 <_lseek_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d07      	ldr	r5, [pc, #28]	; (800ca60 <_lseek_r+0x20>)
 800ca44:	4604      	mov	r4, r0
 800ca46:	4608      	mov	r0, r1
 800ca48:	4611      	mov	r1, r2
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	602a      	str	r2, [r5, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f7f5 ff44 	bl	80028dc <_lseek>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d102      	bne.n	800ca5e <_lseek_r+0x1e>
 800ca58:	682b      	ldr	r3, [r5, #0]
 800ca5a:	b103      	cbz	r3, 800ca5e <_lseek_r+0x1e>
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	20000cb0 	.word	0x20000cb0

0800ca64 <_mbrtowc_r>:
 800ca64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca66:	4c0a      	ldr	r4, [pc, #40]	; (800ca90 <_mbrtowc_r+0x2c>)
 800ca68:	9e08      	ldr	r6, [sp, #32]
 800ca6a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800ca6e:	9600      	str	r6, [sp, #0]
 800ca70:	4605      	mov	r5, r0
 800ca72:	4614      	mov	r4, r2
 800ca74:	b912      	cbnz	r2, 800ca7c <_mbrtowc_r+0x18>
 800ca76:	4a07      	ldr	r2, [pc, #28]	; (800ca94 <_mbrtowc_r+0x30>)
 800ca78:	2301      	movs	r3, #1
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	47b8      	blx	r7
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	bf01      	itttt	eq
 800ca82:	2300      	moveq	r3, #0
 800ca84:	6033      	streq	r3, [r6, #0]
 800ca86:	238a      	moveq	r3, #138	; 0x8a
 800ca88:	602b      	streq	r3, [r5, #0]
 800ca8a:	b003      	add	sp, #12
 800ca8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	200008c0 	.word	0x200008c0
 800ca94:	0800e7e1 	.word	0x0800e7e1

0800ca98 <__ascii_mbtowc>:
 800ca98:	b082      	sub	sp, #8
 800ca9a:	b901      	cbnz	r1, 800ca9e <__ascii_mbtowc+0x6>
 800ca9c:	a901      	add	r1, sp, #4
 800ca9e:	b142      	cbz	r2, 800cab2 <__ascii_mbtowc+0x1a>
 800caa0:	b14b      	cbz	r3, 800cab6 <__ascii_mbtowc+0x1e>
 800caa2:	7813      	ldrb	r3, [r2, #0]
 800caa4:	600b      	str	r3, [r1, #0]
 800caa6:	7812      	ldrb	r2, [r2, #0]
 800caa8:	1e10      	subs	r0, r2, #0
 800caaa:	bf18      	it	ne
 800caac:	2001      	movne	r0, #1
 800caae:	b002      	add	sp, #8
 800cab0:	4770      	bx	lr
 800cab2:	4610      	mov	r0, r2
 800cab4:	e7fb      	b.n	800caae <__ascii_mbtowc+0x16>
 800cab6:	f06f 0001 	mvn.w	r0, #1
 800caba:	e7f8      	b.n	800caae <__ascii_mbtowc+0x16>

0800cabc <memmove>:
 800cabc:	4288      	cmp	r0, r1
 800cabe:	b510      	push	{r4, lr}
 800cac0:	eb01 0402 	add.w	r4, r1, r2
 800cac4:	d902      	bls.n	800cacc <memmove+0x10>
 800cac6:	4284      	cmp	r4, r0
 800cac8:	4623      	mov	r3, r4
 800caca:	d807      	bhi.n	800cadc <memmove+0x20>
 800cacc:	1e43      	subs	r3, r0, #1
 800cace:	42a1      	cmp	r1, r4
 800cad0:	d008      	beq.n	800cae4 <memmove+0x28>
 800cad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cada:	e7f8      	b.n	800cace <memmove+0x12>
 800cadc:	4402      	add	r2, r0
 800cade:	4601      	mov	r1, r0
 800cae0:	428a      	cmp	r2, r1
 800cae2:	d100      	bne.n	800cae6 <memmove+0x2a>
 800cae4:	bd10      	pop	{r4, pc}
 800cae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caee:	e7f7      	b.n	800cae0 <memmove+0x24>

0800caf0 <_read_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d07      	ldr	r5, [pc, #28]	; (800cb10 <_read_r+0x20>)
 800caf4:	4604      	mov	r4, r0
 800caf6:	4608      	mov	r0, r1
 800caf8:	4611      	mov	r1, r2
 800cafa:	2200      	movs	r2, #0
 800cafc:	602a      	str	r2, [r5, #0]
 800cafe:	461a      	mov	r2, r3
 800cb00:	f7f5 fea8 	bl	8002854 <_read>
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d102      	bne.n	800cb0e <_read_r+0x1e>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	b103      	cbz	r3, 800cb0e <_read_r+0x1e>
 800cb0c:	6023      	str	r3, [r4, #0]
 800cb0e:	bd38      	pop	{r3, r4, r5, pc}
 800cb10:	20000cb0 	.word	0x20000cb0

0800cb14 <realloc>:
 800cb14:	4b02      	ldr	r3, [pc, #8]	; (800cb20 <realloc+0xc>)
 800cb16:	460a      	mov	r2, r1
 800cb18:	4601      	mov	r1, r0
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	f000 b802 	b.w	800cb24 <_realloc_r>
 800cb20:	20000018 	.word	0x20000018

0800cb24 <_realloc_r>:
 800cb24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb28:	4681      	mov	r9, r0
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	b929      	cbnz	r1, 800cb3a <_realloc_r+0x16>
 800cb2e:	4611      	mov	r1, r2
 800cb30:	b003      	add	sp, #12
 800cb32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb36:	f7fd b801 	b.w	8009b3c <_malloc_r>
 800cb3a:	9201      	str	r2, [sp, #4]
 800cb3c:	f7fd fa4e 	bl	8009fdc <__malloc_lock>
 800cb40:	9a01      	ldr	r2, [sp, #4]
 800cb42:	f102 080b 	add.w	r8, r2, #11
 800cb46:	f1b8 0f16 	cmp.w	r8, #22
 800cb4a:	d90b      	bls.n	800cb64 <_realloc_r+0x40>
 800cb4c:	f038 0807 	bics.w	r8, r8, #7
 800cb50:	d50a      	bpl.n	800cb68 <_realloc_r+0x44>
 800cb52:	230c      	movs	r3, #12
 800cb54:	f8c9 3000 	str.w	r3, [r9]
 800cb58:	f04f 0b00 	mov.w	fp, #0
 800cb5c:	4658      	mov	r0, fp
 800cb5e:	b003      	add	sp, #12
 800cb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb64:	f04f 0810 	mov.w	r8, #16
 800cb68:	4590      	cmp	r8, r2
 800cb6a:	d3f2      	bcc.n	800cb52 <_realloc_r+0x2e>
 800cb6c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800cb70:	f025 0603 	bic.w	r6, r5, #3
 800cb74:	45b0      	cmp	r8, r6
 800cb76:	f1a4 0a08 	sub.w	sl, r4, #8
 800cb7a:	f340 8170 	ble.w	800ce5e <_realloc_r+0x33a>
 800cb7e:	48a9      	ldr	r0, [pc, #676]	; (800ce24 <_realloc_r+0x300>)
 800cb80:	9001      	str	r0, [sp, #4]
 800cb82:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800cb86:	eb0a 0306 	add.w	r3, sl, r6
 800cb8a:	459c      	cmp	ip, r3
 800cb8c:	6859      	ldr	r1, [r3, #4]
 800cb8e:	d005      	beq.n	800cb9c <_realloc_r+0x78>
 800cb90:	f021 0001 	bic.w	r0, r1, #1
 800cb94:	4418      	add	r0, r3
 800cb96:	6840      	ldr	r0, [r0, #4]
 800cb98:	07c7      	lsls	r7, r0, #31
 800cb9a:	d427      	bmi.n	800cbec <_realloc_r+0xc8>
 800cb9c:	f021 0103 	bic.w	r1, r1, #3
 800cba0:	459c      	cmp	ip, r3
 800cba2:	eb06 0701 	add.w	r7, r6, r1
 800cba6:	d119      	bne.n	800cbdc <_realloc_r+0xb8>
 800cba8:	f108 0010 	add.w	r0, r8, #16
 800cbac:	42b8      	cmp	r0, r7
 800cbae:	dc1f      	bgt.n	800cbf0 <_realloc_r+0xcc>
 800cbb0:	eb0a 0308 	add.w	r3, sl, r8
 800cbb4:	9a01      	ldr	r2, [sp, #4]
 800cbb6:	eba7 0708 	sub.w	r7, r7, r8
 800cbba:	f047 0701 	orr.w	r7, r7, #1
 800cbbe:	6093      	str	r3, [r2, #8]
 800cbc0:	605f      	str	r7, [r3, #4]
 800cbc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	ea43 0308 	orr.w	r3, r3, r8
 800cbce:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbd2:	4648      	mov	r0, r9
 800cbd4:	f7fd fa08 	bl	8009fe8 <__malloc_unlock>
 800cbd8:	46a3      	mov	fp, r4
 800cbda:	e7bf      	b.n	800cb5c <_realloc_r+0x38>
 800cbdc:	45b8      	cmp	r8, r7
 800cbde:	dc07      	bgt.n	800cbf0 <_realloc_r+0xcc>
 800cbe0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800cbe4:	60da      	str	r2, [r3, #12]
 800cbe6:	6093      	str	r3, [r2, #8]
 800cbe8:	4655      	mov	r5, sl
 800cbea:	e07f      	b.n	800ccec <_realloc_r+0x1c8>
 800cbec:	2100      	movs	r1, #0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	07e8      	lsls	r0, r5, #31
 800cbf2:	f100 80e5 	bmi.w	800cdc0 <_realloc_r+0x29c>
 800cbf6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800cbfa:	ebaa 0505 	sub.w	r5, sl, r5
 800cbfe:	6868      	ldr	r0, [r5, #4]
 800cc00:	f020 0003 	bic.w	r0, r0, #3
 800cc04:	eb00 0b06 	add.w	fp, r0, r6
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 80a5 	beq.w	800cd58 <_realloc_r+0x234>
 800cc0e:	459c      	cmp	ip, r3
 800cc10:	eb01 070b 	add.w	r7, r1, fp
 800cc14:	d14a      	bne.n	800ccac <_realloc_r+0x188>
 800cc16:	f108 0310 	add.w	r3, r8, #16
 800cc1a:	42bb      	cmp	r3, r7
 800cc1c:	f300 809c 	bgt.w	800cd58 <_realloc_r+0x234>
 800cc20:	46ab      	mov	fp, r5
 800cc22:	68eb      	ldr	r3, [r5, #12]
 800cc24:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800cc28:	60d3      	str	r3, [r2, #12]
 800cc2a:	609a      	str	r2, [r3, #8]
 800cc2c:	1f32      	subs	r2, r6, #4
 800cc2e:	2a24      	cmp	r2, #36	; 0x24
 800cc30:	d837      	bhi.n	800cca2 <_realloc_r+0x17e>
 800cc32:	2a13      	cmp	r2, #19
 800cc34:	d933      	bls.n	800cc9e <_realloc_r+0x17a>
 800cc36:	6823      	ldr	r3, [r4, #0]
 800cc38:	60ab      	str	r3, [r5, #8]
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	60eb      	str	r3, [r5, #12]
 800cc3e:	2a1b      	cmp	r2, #27
 800cc40:	d81b      	bhi.n	800cc7a <_realloc_r+0x156>
 800cc42:	3408      	adds	r4, #8
 800cc44:	f105 0310 	add.w	r3, r5, #16
 800cc48:	6822      	ldr	r2, [r4, #0]
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	6862      	ldr	r2, [r4, #4]
 800cc4e:	605a      	str	r2, [r3, #4]
 800cc50:	68a2      	ldr	r2, [r4, #8]
 800cc52:	609a      	str	r2, [r3, #8]
 800cc54:	eb05 0308 	add.w	r3, r5, r8
 800cc58:	9a01      	ldr	r2, [sp, #4]
 800cc5a:	eba7 0708 	sub.w	r7, r7, r8
 800cc5e:	f047 0701 	orr.w	r7, r7, #1
 800cc62:	6093      	str	r3, [r2, #8]
 800cc64:	605f      	str	r7, [r3, #4]
 800cc66:	686b      	ldr	r3, [r5, #4]
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	ea43 0308 	orr.w	r3, r3, r8
 800cc70:	606b      	str	r3, [r5, #4]
 800cc72:	4648      	mov	r0, r9
 800cc74:	f7fd f9b8 	bl	8009fe8 <__malloc_unlock>
 800cc78:	e770      	b.n	800cb5c <_realloc_r+0x38>
 800cc7a:	68a3      	ldr	r3, [r4, #8]
 800cc7c:	612b      	str	r3, [r5, #16]
 800cc7e:	68e3      	ldr	r3, [r4, #12]
 800cc80:	616b      	str	r3, [r5, #20]
 800cc82:	2a24      	cmp	r2, #36	; 0x24
 800cc84:	bf01      	itttt	eq
 800cc86:	6923      	ldreq	r3, [r4, #16]
 800cc88:	61ab      	streq	r3, [r5, #24]
 800cc8a:	6962      	ldreq	r2, [r4, #20]
 800cc8c:	61ea      	streq	r2, [r5, #28]
 800cc8e:	bf19      	ittee	ne
 800cc90:	3410      	addne	r4, #16
 800cc92:	f105 0318 	addne.w	r3, r5, #24
 800cc96:	f105 0320 	addeq.w	r3, r5, #32
 800cc9a:	3418      	addeq	r4, #24
 800cc9c:	e7d4      	b.n	800cc48 <_realloc_r+0x124>
 800cc9e:	465b      	mov	r3, fp
 800cca0:	e7d2      	b.n	800cc48 <_realloc_r+0x124>
 800cca2:	4621      	mov	r1, r4
 800cca4:	4658      	mov	r0, fp
 800cca6:	f7ff ff09 	bl	800cabc <memmove>
 800ccaa:	e7d3      	b.n	800cc54 <_realloc_r+0x130>
 800ccac:	45b8      	cmp	r8, r7
 800ccae:	dc53      	bgt.n	800cd58 <_realloc_r+0x234>
 800ccb0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	60da      	str	r2, [r3, #12]
 800ccb8:	6093      	str	r3, [r2, #8]
 800ccba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ccbe:	68eb      	ldr	r3, [r5, #12]
 800ccc0:	60d3      	str	r3, [r2, #12]
 800ccc2:	609a      	str	r2, [r3, #8]
 800ccc4:	1f32      	subs	r2, r6, #4
 800ccc6:	2a24      	cmp	r2, #36	; 0x24
 800ccc8:	d842      	bhi.n	800cd50 <_realloc_r+0x22c>
 800ccca:	2a13      	cmp	r2, #19
 800cccc:	d908      	bls.n	800cce0 <_realloc_r+0x1bc>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	60ab      	str	r3, [r5, #8]
 800ccd2:	6863      	ldr	r3, [r4, #4]
 800ccd4:	60eb      	str	r3, [r5, #12]
 800ccd6:	2a1b      	cmp	r2, #27
 800ccd8:	d828      	bhi.n	800cd2c <_realloc_r+0x208>
 800ccda:	3408      	adds	r4, #8
 800ccdc:	f105 0010 	add.w	r0, r5, #16
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	6003      	str	r3, [r0, #0]
 800cce4:	6863      	ldr	r3, [r4, #4]
 800cce6:	6043      	str	r3, [r0, #4]
 800cce8:	68a3      	ldr	r3, [r4, #8]
 800ccea:	6083      	str	r3, [r0, #8]
 800ccec:	686a      	ldr	r2, [r5, #4]
 800ccee:	eba7 0008 	sub.w	r0, r7, r8
 800ccf2:	280f      	cmp	r0, #15
 800ccf4:	f002 0201 	and.w	r2, r2, #1
 800ccf8:	eb05 0307 	add.w	r3, r5, r7
 800ccfc:	f240 80b1 	bls.w	800ce62 <_realloc_r+0x33e>
 800cd00:	eb05 0108 	add.w	r1, r5, r8
 800cd04:	ea48 0202 	orr.w	r2, r8, r2
 800cd08:	f040 0001 	orr.w	r0, r0, #1
 800cd0c:	606a      	str	r2, [r5, #4]
 800cd0e:	6048      	str	r0, [r1, #4]
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	f042 0201 	orr.w	r2, r2, #1
 800cd16:	605a      	str	r2, [r3, #4]
 800cd18:	3108      	adds	r1, #8
 800cd1a:	4648      	mov	r0, r9
 800cd1c:	f7fc fd62 	bl	80097e4 <_free_r>
 800cd20:	4648      	mov	r0, r9
 800cd22:	f7fd f961 	bl	8009fe8 <__malloc_unlock>
 800cd26:	f105 0b08 	add.w	fp, r5, #8
 800cd2a:	e717      	b.n	800cb5c <_realloc_r+0x38>
 800cd2c:	68a3      	ldr	r3, [r4, #8]
 800cd2e:	612b      	str	r3, [r5, #16]
 800cd30:	68e3      	ldr	r3, [r4, #12]
 800cd32:	616b      	str	r3, [r5, #20]
 800cd34:	2a24      	cmp	r2, #36	; 0x24
 800cd36:	bf01      	itttt	eq
 800cd38:	6923      	ldreq	r3, [r4, #16]
 800cd3a:	61ab      	streq	r3, [r5, #24]
 800cd3c:	6963      	ldreq	r3, [r4, #20]
 800cd3e:	61eb      	streq	r3, [r5, #28]
 800cd40:	bf19      	ittee	ne
 800cd42:	3410      	addne	r4, #16
 800cd44:	f105 0018 	addne.w	r0, r5, #24
 800cd48:	f105 0020 	addeq.w	r0, r5, #32
 800cd4c:	3418      	addeq	r4, #24
 800cd4e:	e7c7      	b.n	800cce0 <_realloc_r+0x1bc>
 800cd50:	4621      	mov	r1, r4
 800cd52:	f7ff feb3 	bl	800cabc <memmove>
 800cd56:	e7c9      	b.n	800ccec <_realloc_r+0x1c8>
 800cd58:	45d8      	cmp	r8, fp
 800cd5a:	dc31      	bgt.n	800cdc0 <_realloc_r+0x29c>
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	68eb      	ldr	r3, [r5, #12]
 800cd60:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cd64:	60d3      	str	r3, [r2, #12]
 800cd66:	609a      	str	r2, [r3, #8]
 800cd68:	1f32      	subs	r2, r6, #4
 800cd6a:	2a24      	cmp	r2, #36	; 0x24
 800cd6c:	d824      	bhi.n	800cdb8 <_realloc_r+0x294>
 800cd6e:	2a13      	cmp	r2, #19
 800cd70:	d908      	bls.n	800cd84 <_realloc_r+0x260>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	60ab      	str	r3, [r5, #8]
 800cd76:	6863      	ldr	r3, [r4, #4]
 800cd78:	60eb      	str	r3, [r5, #12]
 800cd7a:	2a1b      	cmp	r2, #27
 800cd7c:	d80a      	bhi.n	800cd94 <_realloc_r+0x270>
 800cd7e:	3408      	adds	r4, #8
 800cd80:	f105 0010 	add.w	r0, r5, #16
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	6003      	str	r3, [r0, #0]
 800cd88:	6863      	ldr	r3, [r4, #4]
 800cd8a:	6043      	str	r3, [r0, #4]
 800cd8c:	68a3      	ldr	r3, [r4, #8]
 800cd8e:	6083      	str	r3, [r0, #8]
 800cd90:	465f      	mov	r7, fp
 800cd92:	e7ab      	b.n	800ccec <_realloc_r+0x1c8>
 800cd94:	68a3      	ldr	r3, [r4, #8]
 800cd96:	612b      	str	r3, [r5, #16]
 800cd98:	68e3      	ldr	r3, [r4, #12]
 800cd9a:	616b      	str	r3, [r5, #20]
 800cd9c:	2a24      	cmp	r2, #36	; 0x24
 800cd9e:	bf01      	itttt	eq
 800cda0:	6923      	ldreq	r3, [r4, #16]
 800cda2:	61ab      	streq	r3, [r5, #24]
 800cda4:	6963      	ldreq	r3, [r4, #20]
 800cda6:	61eb      	streq	r3, [r5, #28]
 800cda8:	bf19      	ittee	ne
 800cdaa:	3410      	addne	r4, #16
 800cdac:	f105 0018 	addne.w	r0, r5, #24
 800cdb0:	f105 0020 	addeq.w	r0, r5, #32
 800cdb4:	3418      	addeq	r4, #24
 800cdb6:	e7e5      	b.n	800cd84 <_realloc_r+0x260>
 800cdb8:	4621      	mov	r1, r4
 800cdba:	f7ff fe7f 	bl	800cabc <memmove>
 800cdbe:	e7e7      	b.n	800cd90 <_realloc_r+0x26c>
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4648      	mov	r0, r9
 800cdc4:	f7fc feba 	bl	8009b3c <_malloc_r>
 800cdc8:	4683      	mov	fp, r0
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	f43f af51 	beq.w	800cc72 <_realloc_r+0x14e>
 800cdd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cdd4:	f023 0301 	bic.w	r3, r3, #1
 800cdd8:	4453      	add	r3, sl
 800cdda:	f1a0 0208 	sub.w	r2, r0, #8
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d105      	bne.n	800cdee <_realloc_r+0x2ca>
 800cde2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800cde6:	f027 0703 	bic.w	r7, r7, #3
 800cdea:	4437      	add	r7, r6
 800cdec:	e6fc      	b.n	800cbe8 <_realloc_r+0xc4>
 800cdee:	1f32      	subs	r2, r6, #4
 800cdf0:	2a24      	cmp	r2, #36	; 0x24
 800cdf2:	d830      	bhi.n	800ce56 <_realloc_r+0x332>
 800cdf4:	2a13      	cmp	r2, #19
 800cdf6:	d92b      	bls.n	800ce50 <_realloc_r+0x32c>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	6003      	str	r3, [r0, #0]
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	6043      	str	r3, [r0, #4]
 800ce00:	2a1b      	cmp	r2, #27
 800ce02:	d811      	bhi.n	800ce28 <_realloc_r+0x304>
 800ce04:	f104 0208 	add.w	r2, r4, #8
 800ce08:	f100 0308 	add.w	r3, r0, #8
 800ce0c:	6811      	ldr	r1, [r2, #0]
 800ce0e:	6019      	str	r1, [r3, #0]
 800ce10:	6851      	ldr	r1, [r2, #4]
 800ce12:	6059      	str	r1, [r3, #4]
 800ce14:	6892      	ldr	r2, [r2, #8]
 800ce16:	609a      	str	r2, [r3, #8]
 800ce18:	4621      	mov	r1, r4
 800ce1a:	4648      	mov	r0, r9
 800ce1c:	f7fc fce2 	bl	80097e4 <_free_r>
 800ce20:	e727      	b.n	800cc72 <_realloc_r+0x14e>
 800ce22:	bf00      	nop
 800ce24:	200004b0 	.word	0x200004b0
 800ce28:	68a3      	ldr	r3, [r4, #8]
 800ce2a:	6083      	str	r3, [r0, #8]
 800ce2c:	68e3      	ldr	r3, [r4, #12]
 800ce2e:	60c3      	str	r3, [r0, #12]
 800ce30:	2a24      	cmp	r2, #36	; 0x24
 800ce32:	bf01      	itttt	eq
 800ce34:	6923      	ldreq	r3, [r4, #16]
 800ce36:	6103      	streq	r3, [r0, #16]
 800ce38:	6961      	ldreq	r1, [r4, #20]
 800ce3a:	6141      	streq	r1, [r0, #20]
 800ce3c:	bf19      	ittee	ne
 800ce3e:	f104 0210 	addne.w	r2, r4, #16
 800ce42:	f100 0310 	addne.w	r3, r0, #16
 800ce46:	f104 0218 	addeq.w	r2, r4, #24
 800ce4a:	f100 0318 	addeq.w	r3, r0, #24
 800ce4e:	e7dd      	b.n	800ce0c <_realloc_r+0x2e8>
 800ce50:	4603      	mov	r3, r0
 800ce52:	4622      	mov	r2, r4
 800ce54:	e7da      	b.n	800ce0c <_realloc_r+0x2e8>
 800ce56:	4621      	mov	r1, r4
 800ce58:	f7ff fe30 	bl	800cabc <memmove>
 800ce5c:	e7dc      	b.n	800ce18 <_realloc_r+0x2f4>
 800ce5e:	4637      	mov	r7, r6
 800ce60:	e6c2      	b.n	800cbe8 <_realloc_r+0xc4>
 800ce62:	4317      	orrs	r7, r2
 800ce64:	606f      	str	r7, [r5, #4]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	f042 0201 	orr.w	r2, r2, #1
 800ce6c:	605a      	str	r2, [r3, #4]
 800ce6e:	e757      	b.n	800cd20 <_realloc_r+0x1fc>

0800ce70 <__sccl>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	780b      	ldrb	r3, [r1, #0]
 800ce74:	4604      	mov	r4, r0
 800ce76:	2b5e      	cmp	r3, #94	; 0x5e
 800ce78:	bf0b      	itete	eq
 800ce7a:	784b      	ldrbeq	r3, [r1, #1]
 800ce7c:	1c48      	addne	r0, r1, #1
 800ce7e:	1c88      	addeq	r0, r1, #2
 800ce80:	2200      	movne	r2, #0
 800ce82:	bf08      	it	eq
 800ce84:	2201      	moveq	r2, #1
 800ce86:	1e61      	subs	r1, r4, #1
 800ce88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ce8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ce90:	42a9      	cmp	r1, r5
 800ce92:	d1fb      	bne.n	800ce8c <__sccl+0x1c>
 800ce94:	b90b      	cbnz	r3, 800ce9a <__sccl+0x2a>
 800ce96:	3801      	subs	r0, #1
 800ce98:	bd70      	pop	{r4, r5, r6, pc}
 800ce9a:	f082 0101 	eor.w	r1, r2, #1
 800ce9e:	54e1      	strb	r1, [r4, r3]
 800cea0:	1c42      	adds	r2, r0, #1
 800cea2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800cea6:	2d2d      	cmp	r5, #45	; 0x2d
 800cea8:	f102 36ff 	add.w	r6, r2, #4294967295
 800ceac:	4610      	mov	r0, r2
 800ceae:	d006      	beq.n	800cebe <__sccl+0x4e>
 800ceb0:	2d5d      	cmp	r5, #93	; 0x5d
 800ceb2:	d0f1      	beq.n	800ce98 <__sccl+0x28>
 800ceb4:	b90d      	cbnz	r5, 800ceba <__sccl+0x4a>
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	e7ee      	b.n	800ce98 <__sccl+0x28>
 800ceba:	462b      	mov	r3, r5
 800cebc:	e7ef      	b.n	800ce9e <__sccl+0x2e>
 800cebe:	7816      	ldrb	r6, [r2, #0]
 800cec0:	2e5d      	cmp	r6, #93	; 0x5d
 800cec2:	d0fa      	beq.n	800ceba <__sccl+0x4a>
 800cec4:	42b3      	cmp	r3, r6
 800cec6:	dcf8      	bgt.n	800ceba <__sccl+0x4a>
 800cec8:	4618      	mov	r0, r3
 800ceca:	3001      	adds	r0, #1
 800cecc:	4286      	cmp	r6, r0
 800cece:	5421      	strb	r1, [r4, r0]
 800ced0:	dcfb      	bgt.n	800ceca <__sccl+0x5a>
 800ced2:	43d8      	mvns	r0, r3
 800ced4:	4430      	add	r0, r6
 800ced6:	1c5d      	adds	r5, r3, #1
 800ced8:	42b3      	cmp	r3, r6
 800ceda:	bfa8      	it	ge
 800cedc:	2000      	movge	r0, #0
 800cede:	182b      	adds	r3, r5, r0
 800cee0:	3202      	adds	r2, #2
 800cee2:	e7de      	b.n	800cea2 <__sccl+0x32>

0800cee4 <_strtoll_l.isra.0>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	b087      	sub	sp, #28
 800ceea:	4691      	mov	r9, r2
 800ceec:	4a47      	ldr	r2, [pc, #284]	; (800d00c <_strtoll_l.isra.0+0x128>)
 800ceee:	9005      	str	r0, [sp, #20]
 800cef0:	4688      	mov	r8, r1
 800cef2:	461f      	mov	r7, r3
 800cef4:	460d      	mov	r5, r1
 800cef6:	462b      	mov	r3, r5
 800cef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cefc:	5ca6      	ldrb	r6, [r4, r2]
 800cefe:	f016 0608 	ands.w	r6, r6, #8
 800cf02:	d1f8      	bne.n	800cef6 <_strtoll_l.isra.0+0x12>
 800cf04:	2c2d      	cmp	r4, #45	; 0x2d
 800cf06:	d147      	bne.n	800cf98 <_strtoll_l.isra.0+0xb4>
 800cf08:	782c      	ldrb	r4, [r5, #0]
 800cf0a:	2601      	movs	r6, #1
 800cf0c:	1c9d      	adds	r5, r3, #2
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	d077      	beq.n	800d002 <_strtoll_l.isra.0+0x11e>
 800cf12:	2f10      	cmp	r7, #16
 800cf14:	d109      	bne.n	800cf2a <_strtoll_l.isra.0+0x46>
 800cf16:	2c30      	cmp	r4, #48	; 0x30
 800cf18:	d107      	bne.n	800cf2a <_strtoll_l.isra.0+0x46>
 800cf1a:	782b      	ldrb	r3, [r5, #0]
 800cf1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf20:	2b58      	cmp	r3, #88	; 0x58
 800cf22:	d169      	bne.n	800cff8 <_strtoll_l.isra.0+0x114>
 800cf24:	786c      	ldrb	r4, [r5, #1]
 800cf26:	2710      	movs	r7, #16
 800cf28:	3502      	adds	r5, #2
 800cf2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2e:	1990      	adds	r0, r2, r6
 800cf30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf34:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800cf38:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800cf3c:	463a      	mov	r2, r7
 800cf3e:	465b      	mov	r3, fp
 800cf40:	e9cd 0100 	strd	r0, r1, [sp]
 800cf44:	f7f3 fe5a 	bl	8000bfc <__aeabi_uldivmod>
 800cf48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf4c:	46ba      	mov	sl, r7
 800cf4e:	4696      	mov	lr, r2
 800cf50:	2300      	movs	r3, #0
 800cf52:	2000      	movs	r0, #0
 800cf54:	2100      	movs	r1, #0
 800cf56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf5a:	f1bc 0f09 	cmp.w	ip, #9
 800cf5e:	d820      	bhi.n	800cfa2 <_strtoll_l.isra.0+0xbe>
 800cf60:	4664      	mov	r4, ip
 800cf62:	42a7      	cmp	r7, r4
 800cf64:	dd2e      	ble.n	800cfc4 <_strtoll_l.isra.0+0xe0>
 800cf66:	1c5a      	adds	r2, r3, #1
 800cf68:	d013      	beq.n	800cf92 <_strtoll_l.isra.0+0xae>
 800cf6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf6e:	428b      	cmp	r3, r1
 800cf70:	bf08      	it	eq
 800cf72:	4282      	cmpeq	r2, r0
 800cf74:	d323      	bcc.n	800cfbe <_strtoll_l.isra.0+0xda>
 800cf76:	d101      	bne.n	800cf7c <_strtoll_l.isra.0+0x98>
 800cf78:	45a6      	cmp	lr, r4
 800cf7a:	db20      	blt.n	800cfbe <_strtoll_l.isra.0+0xda>
 800cf7c:	fb0a f301 	mul.w	r3, sl, r1
 800cf80:	fb00 330b 	mla	r3, r0, fp, r3
 800cf84:	fbaa 0100 	umull	r0, r1, sl, r0
 800cf88:	4419      	add	r1, r3
 800cf8a:	1900      	adds	r0, r0, r4
 800cf8c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800cf90:	2301      	movs	r3, #1
 800cf92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf96:	e7de      	b.n	800cf56 <_strtoll_l.isra.0+0x72>
 800cf98:	2c2b      	cmp	r4, #43	; 0x2b
 800cf9a:	bf04      	itt	eq
 800cf9c:	782c      	ldrbeq	r4, [r5, #0]
 800cf9e:	1c9d      	addeq	r5, r3, #2
 800cfa0:	e7b5      	b.n	800cf0e <_strtoll_l.isra.0+0x2a>
 800cfa2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cfa6:	f1bc 0f19 	cmp.w	ip, #25
 800cfaa:	d801      	bhi.n	800cfb0 <_strtoll_l.isra.0+0xcc>
 800cfac:	3c37      	subs	r4, #55	; 0x37
 800cfae:	e7d8      	b.n	800cf62 <_strtoll_l.isra.0+0x7e>
 800cfb0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cfb4:	f1bc 0f19 	cmp.w	ip, #25
 800cfb8:	d804      	bhi.n	800cfc4 <_strtoll_l.isra.0+0xe0>
 800cfba:	3c57      	subs	r4, #87	; 0x57
 800cfbc:	e7d1      	b.n	800cf62 <_strtoll_l.isra.0+0x7e>
 800cfbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc2:	e7e6      	b.n	800cf92 <_strtoll_l.isra.0+0xae>
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	d10a      	bne.n	800cfde <_strtoll_l.isra.0+0xfa>
 800cfc8:	9a05      	ldr	r2, [sp, #20]
 800cfca:	2322      	movs	r3, #34	; 0x22
 800cfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	f1b9 0f00 	cmp.w	r9, #0
 800cfd6:	d10a      	bne.n	800cfee <_strtoll_l.isra.0+0x10a>
 800cfd8:	b007      	add	sp, #28
 800cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfde:	b116      	cbz	r6, 800cfe6 <_strtoll_l.isra.0+0x102>
 800cfe0:	4240      	negs	r0, r0
 800cfe2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800cfe6:	f1b9 0f00 	cmp.w	r9, #0
 800cfea:	d0f5      	beq.n	800cfd8 <_strtoll_l.isra.0+0xf4>
 800cfec:	b10b      	cbz	r3, 800cff2 <_strtoll_l.isra.0+0x10e>
 800cfee:	f105 38ff 	add.w	r8, r5, #4294967295
 800cff2:	f8c9 8000 	str.w	r8, [r9]
 800cff6:	e7ef      	b.n	800cfd8 <_strtoll_l.isra.0+0xf4>
 800cff8:	2430      	movs	r4, #48	; 0x30
 800cffa:	2f00      	cmp	r7, #0
 800cffc:	d195      	bne.n	800cf2a <_strtoll_l.isra.0+0x46>
 800cffe:	2708      	movs	r7, #8
 800d000:	e793      	b.n	800cf2a <_strtoll_l.isra.0+0x46>
 800d002:	2c30      	cmp	r4, #48	; 0x30
 800d004:	d089      	beq.n	800cf1a <_strtoll_l.isra.0+0x36>
 800d006:	270a      	movs	r7, #10
 800d008:	e78f      	b.n	800cf2a <_strtoll_l.isra.0+0x46>
 800d00a:	bf00      	nop
 800d00c:	0800e429 	.word	0x0800e429

0800d010 <_strtoll_r>:
 800d010:	f7ff bf68 	b.w	800cee4 <_strtoll_l.isra.0>

0800d014 <_strtoull_l.isra.0>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	b085      	sub	sp, #20
 800d01a:	4691      	mov	r9, r2
 800d01c:	4a49      	ldr	r2, [pc, #292]	; (800d144 <_strtoull_l.isra.0+0x130>)
 800d01e:	9003      	str	r0, [sp, #12]
 800d020:	4688      	mov	r8, r1
 800d022:	461e      	mov	r6, r3
 800d024:	460d      	mov	r5, r1
 800d026:	462b      	mov	r3, r5
 800d028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d02c:	5ca7      	ldrb	r7, [r4, r2]
 800d02e:	f017 0708 	ands.w	r7, r7, #8
 800d032:	d1f8      	bne.n	800d026 <_strtoull_l.isra.0+0x12>
 800d034:	2c2d      	cmp	r4, #45	; 0x2d
 800d036:	d14a      	bne.n	800d0ce <_strtoull_l.isra.0+0xba>
 800d038:	782c      	ldrb	r4, [r5, #0]
 800d03a:	2701      	movs	r7, #1
 800d03c:	1c9d      	adds	r5, r3, #2
 800d03e:	2e00      	cmp	r6, #0
 800d040:	d07c      	beq.n	800d13c <_strtoull_l.isra.0+0x128>
 800d042:	2e10      	cmp	r6, #16
 800d044:	d109      	bne.n	800d05a <_strtoull_l.isra.0+0x46>
 800d046:	2c30      	cmp	r4, #48	; 0x30
 800d048:	d107      	bne.n	800d05a <_strtoull_l.isra.0+0x46>
 800d04a:	782b      	ldrb	r3, [r5, #0]
 800d04c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d050:	2b58      	cmp	r3, #88	; 0x58
 800d052:	d16e      	bne.n	800d132 <_strtoull_l.isra.0+0x11e>
 800d054:	786c      	ldrb	r4, [r5, #1]
 800d056:	2610      	movs	r6, #16
 800d058:	3502      	adds	r5, #2
 800d05a:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800d05e:	4632      	mov	r2, r6
 800d060:	465b      	mov	r3, fp
 800d062:	f04f 30ff 	mov.w	r0, #4294967295
 800d066:	f04f 31ff 	mov.w	r1, #4294967295
 800d06a:	f7f3 fdc7 	bl	8000bfc <__aeabi_uldivmod>
 800d06e:	e9cd 0100 	strd	r0, r1, [sp]
 800d072:	4632      	mov	r2, r6
 800d074:	465b      	mov	r3, fp
 800d076:	f04f 30ff 	mov.w	r0, #4294967295
 800d07a:	f04f 31ff 	mov.w	r1, #4294967295
 800d07e:	f7f3 fdbd 	bl	8000bfc <__aeabi_uldivmod>
 800d082:	46b2      	mov	sl, r6
 800d084:	4696      	mov	lr, r2
 800d086:	2300      	movs	r3, #0
 800d088:	2000      	movs	r0, #0
 800d08a:	2100      	movs	r1, #0
 800d08c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d090:	f1bc 0f09 	cmp.w	ip, #9
 800d094:	d820      	bhi.n	800d0d8 <_strtoull_l.isra.0+0xc4>
 800d096:	4664      	mov	r4, ip
 800d098:	42a6      	cmp	r6, r4
 800d09a:	dd2e      	ble.n	800d0fa <_strtoull_l.isra.0+0xe6>
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	db29      	blt.n	800d0f4 <_strtoull_l.isra.0+0xe0>
 800d0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0a4:	428b      	cmp	r3, r1
 800d0a6:	bf08      	it	eq
 800d0a8:	4282      	cmpeq	r2, r0
 800d0aa:	d323      	bcc.n	800d0f4 <_strtoull_l.isra.0+0xe0>
 800d0ac:	d101      	bne.n	800d0b2 <_strtoull_l.isra.0+0x9e>
 800d0ae:	45a6      	cmp	lr, r4
 800d0b0:	db20      	blt.n	800d0f4 <_strtoull_l.isra.0+0xe0>
 800d0b2:	fb0a f301 	mul.w	r3, sl, r1
 800d0b6:	fb00 330b 	mla	r3, r0, fp, r3
 800d0ba:	fbaa 0100 	umull	r0, r1, sl, r0
 800d0be:	4419      	add	r1, r3
 800d0c0:	1900      	adds	r0, r0, r4
 800d0c2:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0cc:	e7de      	b.n	800d08c <_strtoull_l.isra.0+0x78>
 800d0ce:	2c2b      	cmp	r4, #43	; 0x2b
 800d0d0:	bf04      	itt	eq
 800d0d2:	782c      	ldrbeq	r4, [r5, #0]
 800d0d4:	1c9d      	addeq	r5, r3, #2
 800d0d6:	e7b2      	b.n	800d03e <_strtoull_l.isra.0+0x2a>
 800d0d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d0dc:	f1bc 0f19 	cmp.w	ip, #25
 800d0e0:	d801      	bhi.n	800d0e6 <_strtoull_l.isra.0+0xd2>
 800d0e2:	3c37      	subs	r4, #55	; 0x37
 800d0e4:	e7d8      	b.n	800d098 <_strtoull_l.isra.0+0x84>
 800d0e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d0ea:	f1bc 0f19 	cmp.w	ip, #25
 800d0ee:	d804      	bhi.n	800d0fa <_strtoull_l.isra.0+0xe6>
 800d0f0:	3c57      	subs	r4, #87	; 0x57
 800d0f2:	e7d1      	b.n	800d098 <_strtoull_l.isra.0+0x84>
 800d0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f8:	e7e6      	b.n	800d0c8 <_strtoull_l.isra.0+0xb4>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	da0c      	bge.n	800d118 <_strtoull_l.isra.0+0x104>
 800d0fe:	9a03      	ldr	r2, [sp, #12]
 800d100:	2322      	movs	r3, #34	; 0x22
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	f04f 31ff 	mov.w	r1, #4294967295
 800d10c:	f1b9 0f00 	cmp.w	r9, #0
 800d110:	d10a      	bne.n	800d128 <_strtoull_l.isra.0+0x114>
 800d112:	b005      	add	sp, #20
 800d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d118:	b117      	cbz	r7, 800d120 <_strtoull_l.isra.0+0x10c>
 800d11a:	4240      	negs	r0, r0
 800d11c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800d120:	f1b9 0f00 	cmp.w	r9, #0
 800d124:	d0f5      	beq.n	800d112 <_strtoull_l.isra.0+0xfe>
 800d126:	b10b      	cbz	r3, 800d12c <_strtoull_l.isra.0+0x118>
 800d128:	f105 38ff 	add.w	r8, r5, #4294967295
 800d12c:	f8c9 8000 	str.w	r8, [r9]
 800d130:	e7ef      	b.n	800d112 <_strtoull_l.isra.0+0xfe>
 800d132:	2430      	movs	r4, #48	; 0x30
 800d134:	2e00      	cmp	r6, #0
 800d136:	d190      	bne.n	800d05a <_strtoull_l.isra.0+0x46>
 800d138:	2608      	movs	r6, #8
 800d13a:	e78e      	b.n	800d05a <_strtoull_l.isra.0+0x46>
 800d13c:	2c30      	cmp	r4, #48	; 0x30
 800d13e:	d084      	beq.n	800d04a <_strtoull_l.isra.0+0x36>
 800d140:	260a      	movs	r6, #10
 800d142:	e78a      	b.n	800d05a <_strtoull_l.isra.0+0x46>
 800d144:	0800e429 	.word	0x0800e429

0800d148 <_strtoull_r>:
 800d148:	f7ff bf64 	b.w	800d014 <_strtoull_l.isra.0>

0800d14c <__swbuf_r>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	460e      	mov	r6, r1
 800d150:	4614      	mov	r4, r2
 800d152:	4605      	mov	r5, r0
 800d154:	b118      	cbz	r0, 800d15e <__swbuf_r+0x12>
 800d156:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d158:	b90b      	cbnz	r3, 800d15e <__swbuf_r+0x12>
 800d15a:	f7fc fab3 	bl	80096c4 <__sinit>
 800d15e:	69a3      	ldr	r3, [r4, #24]
 800d160:	60a3      	str	r3, [r4, #8]
 800d162:	89a3      	ldrh	r3, [r4, #12]
 800d164:	0719      	lsls	r1, r3, #28
 800d166:	d529      	bpl.n	800d1bc <__swbuf_r+0x70>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	b33b      	cbz	r3, 800d1bc <__swbuf_r+0x70>
 800d16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d170:	b2f6      	uxtb	r6, r6
 800d172:	049a      	lsls	r2, r3, #18
 800d174:	4637      	mov	r7, r6
 800d176:	d52a      	bpl.n	800d1ce <__swbuf_r+0x82>
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	6920      	ldr	r0, [r4, #16]
 800d17c:	1a18      	subs	r0, r3, r0
 800d17e:	6963      	ldr	r3, [r4, #20]
 800d180:	4283      	cmp	r3, r0
 800d182:	dc04      	bgt.n	800d18e <__swbuf_r+0x42>
 800d184:	4621      	mov	r1, r4
 800d186:	4628      	mov	r0, r5
 800d188:	f7fc fa30 	bl	80095ec <_fflush_r>
 800d18c:	b9e0      	cbnz	r0, 800d1c8 <__swbuf_r+0x7c>
 800d18e:	68a3      	ldr	r3, [r4, #8]
 800d190:	3b01      	subs	r3, #1
 800d192:	60a3      	str	r3, [r4, #8]
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	6022      	str	r2, [r4, #0]
 800d19a:	701e      	strb	r6, [r3, #0]
 800d19c:	6962      	ldr	r2, [r4, #20]
 800d19e:	1c43      	adds	r3, r0, #1
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d004      	beq.n	800d1ae <__swbuf_r+0x62>
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	07db      	lsls	r3, r3, #31
 800d1a8:	d506      	bpl.n	800d1b8 <__swbuf_r+0x6c>
 800d1aa:	2e0a      	cmp	r6, #10
 800d1ac:	d104      	bne.n	800d1b8 <__swbuf_r+0x6c>
 800d1ae:	4621      	mov	r1, r4
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	f7fc fa1b 	bl	80095ec <_fflush_r>
 800d1b6:	b938      	cbnz	r0, 800d1c8 <__swbuf_r+0x7c>
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1bc:	4621      	mov	r1, r4
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f7fb faa8 	bl	8008714 <__swsetup_r>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d0d1      	beq.n	800d16c <__swbuf_r+0x20>
 800d1c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d1cc:	e7f4      	b.n	800d1b8 <__swbuf_r+0x6c>
 800d1ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1da:	6663      	str	r3, [r4, #100]	; 0x64
 800d1dc:	e7cc      	b.n	800d178 <__swbuf_r+0x2c>
	...

0800d1e0 <_wcrtomb_r>:
 800d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e2:	4c09      	ldr	r4, [pc, #36]	; (800d208 <_wcrtomb_r+0x28>)
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	461e      	mov	r6, r3
 800d1ee:	b909      	cbnz	r1, 800d1f4 <_wcrtomb_r+0x14>
 800d1f0:	460a      	mov	r2, r1
 800d1f2:	a901      	add	r1, sp, #4
 800d1f4:	47b8      	blx	r7
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	bf01      	itttt	eq
 800d1fa:	2300      	moveq	r3, #0
 800d1fc:	6033      	streq	r3, [r6, #0]
 800d1fe:	238a      	moveq	r3, #138	; 0x8a
 800d200:	602b      	streq	r3, [r5, #0]
 800d202:	b005      	add	sp, #20
 800d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d206:	bf00      	nop
 800d208:	200008c0 	.word	0x200008c0

0800d20c <__ascii_wctomb>:
 800d20c:	b149      	cbz	r1, 800d222 <__ascii_wctomb+0x16>
 800d20e:	2aff      	cmp	r2, #255	; 0xff
 800d210:	bf85      	ittet	hi
 800d212:	238a      	movhi	r3, #138	; 0x8a
 800d214:	6003      	strhi	r3, [r0, #0]
 800d216:	700a      	strbls	r2, [r1, #0]
 800d218:	f04f 30ff 	movhi.w	r0, #4294967295
 800d21c:	bf98      	it	ls
 800d21e:	2001      	movls	r0, #1
 800d220:	4770      	bx	lr
 800d222:	4608      	mov	r0, r1
 800d224:	4770      	bx	lr

0800d226 <abort>:
 800d226:	b508      	push	{r3, lr}
 800d228:	2006      	movs	r0, #6
 800d22a:	f000 f82d 	bl	800d288 <raise>
 800d22e:	2001      	movs	r0, #1
 800d230:	f7f5 fb06 	bl	8002840 <_exit>

0800d234 <_raise_r>:
 800d234:	291f      	cmp	r1, #31
 800d236:	b538      	push	{r3, r4, r5, lr}
 800d238:	4604      	mov	r4, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	d904      	bls.n	800d248 <_raise_r+0x14>
 800d23e:	2316      	movs	r3, #22
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	f04f 30ff 	mov.w	r0, #4294967295
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800d24c:	b112      	cbz	r2, 800d254 <_raise_r+0x20>
 800d24e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d252:	b94b      	cbnz	r3, 800d268 <_raise_r+0x34>
 800d254:	4620      	mov	r0, r4
 800d256:	f000 f831 	bl	800d2bc <_getpid_r>
 800d25a:	462a      	mov	r2, r5
 800d25c:	4601      	mov	r1, r0
 800d25e:	4620      	mov	r0, r4
 800d260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d264:	f000 b818 	b.w	800d298 <_kill_r>
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d00a      	beq.n	800d282 <_raise_r+0x4e>
 800d26c:	1c59      	adds	r1, r3, #1
 800d26e:	d103      	bne.n	800d278 <_raise_r+0x44>
 800d270:	2316      	movs	r3, #22
 800d272:	6003      	str	r3, [r0, #0]
 800d274:	2001      	movs	r0, #1
 800d276:	e7e6      	b.n	800d246 <_raise_r+0x12>
 800d278:	2400      	movs	r4, #0
 800d27a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d27e:	4628      	mov	r0, r5
 800d280:	4798      	blx	r3
 800d282:	2000      	movs	r0, #0
 800d284:	e7df      	b.n	800d246 <_raise_r+0x12>
	...

0800d288 <raise>:
 800d288:	4b02      	ldr	r3, [pc, #8]	; (800d294 <raise+0xc>)
 800d28a:	4601      	mov	r1, r0
 800d28c:	6818      	ldr	r0, [r3, #0]
 800d28e:	f7ff bfd1 	b.w	800d234 <_raise_r>
 800d292:	bf00      	nop
 800d294:	20000018 	.word	0x20000018

0800d298 <_kill_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d07      	ldr	r5, [pc, #28]	; (800d2b8 <_kill_r+0x20>)
 800d29c:	2300      	movs	r3, #0
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	602b      	str	r3, [r5, #0]
 800d2a6:	f7f5 fabb 	bl	8002820 <_kill>
 800d2aa:	1c43      	adds	r3, r0, #1
 800d2ac:	d102      	bne.n	800d2b4 <_kill_r+0x1c>
 800d2ae:	682b      	ldr	r3, [r5, #0]
 800d2b0:	b103      	cbz	r3, 800d2b4 <_kill_r+0x1c>
 800d2b2:	6023      	str	r3, [r4, #0]
 800d2b4:	bd38      	pop	{r3, r4, r5, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20000cb0 	.word	0x20000cb0

0800d2bc <_getpid_r>:
 800d2bc:	f7f5 baa8 	b.w	8002810 <_getpid>

0800d2c0 <pow>:
 800d2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	ec59 8b10 	vmov	r8, r9, d0
 800d2c8:	ec57 6b11 	vmov	r6, r7, d1
 800d2cc:	f000 f8a8 	bl	800d420 <__ieee754_pow>
 800d2d0:	4b4e      	ldr	r3, [pc, #312]	; (800d40c <pow+0x14c>)
 800d2d2:	f993 3000 	ldrsb.w	r3, [r3]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	ec55 4b10 	vmov	r4, r5, d0
 800d2dc:	d015      	beq.n	800d30a <pow+0x4a>
 800d2de:	4632      	mov	r2, r6
 800d2e0:	463b      	mov	r3, r7
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f3 fc4b 	bl	8000b80 <__aeabi_dcmpun>
 800d2ea:	b970      	cbnz	r0, 800d30a <pow+0x4a>
 800d2ec:	4642      	mov	r2, r8
 800d2ee:	464b      	mov	r3, r9
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	4649      	mov	r1, r9
 800d2f4:	f7f3 fc44 	bl	8000b80 <__aeabi_dcmpun>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	b148      	cbz	r0, 800d312 <pow+0x52>
 800d2fe:	4630      	mov	r0, r6
 800d300:	4639      	mov	r1, r7
 800d302:	f7f3 fc0b 	bl	8000b1c <__aeabi_dcmpeq>
 800d306:	2800      	cmp	r0, #0
 800d308:	d17d      	bne.n	800d406 <pow+0x146>
 800d30a:	ec45 4b10 	vmov	d0, r4, r5
 800d30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d312:	4640      	mov	r0, r8
 800d314:	4649      	mov	r1, r9
 800d316:	f7f3 fc01 	bl	8000b1c <__aeabi_dcmpeq>
 800d31a:	b1e0      	cbz	r0, 800d356 <pow+0x96>
 800d31c:	2200      	movs	r2, #0
 800d31e:	2300      	movs	r3, #0
 800d320:	4630      	mov	r0, r6
 800d322:	4639      	mov	r1, r7
 800d324:	f7f3 fbfa 	bl	8000b1c <__aeabi_dcmpeq>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d16c      	bne.n	800d406 <pow+0x146>
 800d32c:	ec47 6b10 	vmov	d0, r6, r7
 800d330:	f000 fe55 	bl	800dfde <finite>
 800d334:	2800      	cmp	r0, #0
 800d336:	d0e8      	beq.n	800d30a <pow+0x4a>
 800d338:	2200      	movs	r2, #0
 800d33a:	2300      	movs	r3, #0
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f3 fbf6 	bl	8000b30 <__aeabi_dcmplt>
 800d344:	2800      	cmp	r0, #0
 800d346:	d0e0      	beq.n	800d30a <pow+0x4a>
 800d348:	f7f9 f9e6 	bl	8006718 <__errno>
 800d34c:	2321      	movs	r3, #33	; 0x21
 800d34e:	6003      	str	r3, [r0, #0]
 800d350:	2400      	movs	r4, #0
 800d352:	4d2f      	ldr	r5, [pc, #188]	; (800d410 <pow+0x150>)
 800d354:	e7d9      	b.n	800d30a <pow+0x4a>
 800d356:	ec45 4b10 	vmov	d0, r4, r5
 800d35a:	f000 fe40 	bl	800dfde <finite>
 800d35e:	bbb8      	cbnz	r0, 800d3d0 <pow+0x110>
 800d360:	ec49 8b10 	vmov	d0, r8, r9
 800d364:	f000 fe3b 	bl	800dfde <finite>
 800d368:	b390      	cbz	r0, 800d3d0 <pow+0x110>
 800d36a:	ec47 6b10 	vmov	d0, r6, r7
 800d36e:	f000 fe36 	bl	800dfde <finite>
 800d372:	b368      	cbz	r0, 800d3d0 <pow+0x110>
 800d374:	4622      	mov	r2, r4
 800d376:	462b      	mov	r3, r5
 800d378:	4620      	mov	r0, r4
 800d37a:	4629      	mov	r1, r5
 800d37c:	f7f3 fc00 	bl	8000b80 <__aeabi_dcmpun>
 800d380:	b160      	cbz	r0, 800d39c <pow+0xdc>
 800d382:	f7f9 f9c9 	bl	8006718 <__errno>
 800d386:	2321      	movs	r3, #33	; 0x21
 800d388:	6003      	str	r3, [r0, #0]
 800d38a:	2200      	movs	r2, #0
 800d38c:	2300      	movs	r3, #0
 800d38e:	4610      	mov	r0, r2
 800d390:	4619      	mov	r1, r3
 800d392:	f7f3 fa85 	bl	80008a0 <__aeabi_ddiv>
 800d396:	4604      	mov	r4, r0
 800d398:	460d      	mov	r5, r1
 800d39a:	e7b6      	b.n	800d30a <pow+0x4a>
 800d39c:	f7f9 f9bc 	bl	8006718 <__errno>
 800d3a0:	2322      	movs	r3, #34	; 0x22
 800d3a2:	6003      	str	r3, [r0, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	f7f3 fbc0 	bl	8000b30 <__aeabi_dcmplt>
 800d3b0:	2400      	movs	r4, #0
 800d3b2:	b158      	cbz	r0, 800d3cc <pow+0x10c>
 800d3b4:	ec47 6b10 	vmov	d0, r6, r7
 800d3b8:	f000 fe26 	bl	800e008 <rint>
 800d3bc:	4632      	mov	r2, r6
 800d3be:	ec51 0b10 	vmov	r0, r1, d0
 800d3c2:	463b      	mov	r3, r7
 800d3c4:	f7f3 fbaa 	bl	8000b1c <__aeabi_dcmpeq>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d0c2      	beq.n	800d352 <pow+0x92>
 800d3cc:	4d11      	ldr	r5, [pc, #68]	; (800d414 <pow+0x154>)
 800d3ce:	e79c      	b.n	800d30a <pow+0x4a>
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	4629      	mov	r1, r5
 800d3d8:	f7f3 fba0 	bl	8000b1c <__aeabi_dcmpeq>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d094      	beq.n	800d30a <pow+0x4a>
 800d3e0:	ec49 8b10 	vmov	d0, r8, r9
 800d3e4:	f000 fdfb 	bl	800dfde <finite>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d08e      	beq.n	800d30a <pow+0x4a>
 800d3ec:	ec47 6b10 	vmov	d0, r6, r7
 800d3f0:	f000 fdf5 	bl	800dfde <finite>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d088      	beq.n	800d30a <pow+0x4a>
 800d3f8:	f7f9 f98e 	bl	8006718 <__errno>
 800d3fc:	2322      	movs	r3, #34	; 0x22
 800d3fe:	6003      	str	r3, [r0, #0]
 800d400:	2400      	movs	r4, #0
 800d402:	2500      	movs	r5, #0
 800d404:	e781      	b.n	800d30a <pow+0x4a>
 800d406:	4d04      	ldr	r5, [pc, #16]	; (800d418 <pow+0x158>)
 800d408:	2400      	movs	r4, #0
 800d40a:	e77e      	b.n	800d30a <pow+0x4a>
 800d40c:	20000a2c 	.word	0x20000a2c
 800d410:	fff00000 	.word	0xfff00000
 800d414:	7ff00000 	.word	0x7ff00000
 800d418:	3ff00000 	.word	0x3ff00000
 800d41c:	00000000 	.word	0x00000000

0800d420 <__ieee754_pow>:
 800d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d424:	ed2d 8b06 	vpush	{d8-d10}
 800d428:	b08d      	sub	sp, #52	; 0x34
 800d42a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d42e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d432:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d436:	ea56 0100 	orrs.w	r1, r6, r0
 800d43a:	ec53 2b10 	vmov	r2, r3, d0
 800d43e:	f000 84d1 	beq.w	800dde4 <__ieee754_pow+0x9c4>
 800d442:	497f      	ldr	r1, [pc, #508]	; (800d640 <__ieee754_pow+0x220>)
 800d444:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d448:	428c      	cmp	r4, r1
 800d44a:	ee10 8a10 	vmov	r8, s0
 800d44e:	4699      	mov	r9, r3
 800d450:	dc09      	bgt.n	800d466 <__ieee754_pow+0x46>
 800d452:	d103      	bne.n	800d45c <__ieee754_pow+0x3c>
 800d454:	b97a      	cbnz	r2, 800d476 <__ieee754_pow+0x56>
 800d456:	42a6      	cmp	r6, r4
 800d458:	dd02      	ble.n	800d460 <__ieee754_pow+0x40>
 800d45a:	e00c      	b.n	800d476 <__ieee754_pow+0x56>
 800d45c:	428e      	cmp	r6, r1
 800d45e:	dc02      	bgt.n	800d466 <__ieee754_pow+0x46>
 800d460:	428e      	cmp	r6, r1
 800d462:	d110      	bne.n	800d486 <__ieee754_pow+0x66>
 800d464:	b178      	cbz	r0, 800d486 <__ieee754_pow+0x66>
 800d466:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d46a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d46e:	ea54 0308 	orrs.w	r3, r4, r8
 800d472:	f000 84b7 	beq.w	800dde4 <__ieee754_pow+0x9c4>
 800d476:	4873      	ldr	r0, [pc, #460]	; (800d644 <__ieee754_pow+0x224>)
 800d478:	b00d      	add	sp, #52	; 0x34
 800d47a:	ecbd 8b06 	vpop	{d8-d10}
 800d47e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d482:	f000 bdb9 	b.w	800dff8 <nan>
 800d486:	f1b9 0f00 	cmp.w	r9, #0
 800d48a:	da36      	bge.n	800d4fa <__ieee754_pow+0xda>
 800d48c:	496e      	ldr	r1, [pc, #440]	; (800d648 <__ieee754_pow+0x228>)
 800d48e:	428e      	cmp	r6, r1
 800d490:	dc51      	bgt.n	800d536 <__ieee754_pow+0x116>
 800d492:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d496:	428e      	cmp	r6, r1
 800d498:	f340 84af 	ble.w	800ddfa <__ieee754_pow+0x9da>
 800d49c:	1531      	asrs	r1, r6, #20
 800d49e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d4a2:	2914      	cmp	r1, #20
 800d4a4:	dd0f      	ble.n	800d4c6 <__ieee754_pow+0xa6>
 800d4a6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d4aa:	fa20 fc01 	lsr.w	ip, r0, r1
 800d4ae:	fa0c f101 	lsl.w	r1, ip, r1
 800d4b2:	4281      	cmp	r1, r0
 800d4b4:	f040 84a1 	bne.w	800ddfa <__ieee754_pow+0x9da>
 800d4b8:	f00c 0c01 	and.w	ip, ip, #1
 800d4bc:	f1cc 0102 	rsb	r1, ip, #2
 800d4c0:	9100      	str	r1, [sp, #0]
 800d4c2:	b180      	cbz	r0, 800d4e6 <__ieee754_pow+0xc6>
 800d4c4:	e059      	b.n	800d57a <__ieee754_pow+0x15a>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d155      	bne.n	800d576 <__ieee754_pow+0x156>
 800d4ca:	f1c1 0114 	rsb	r1, r1, #20
 800d4ce:	fa46 fc01 	asr.w	ip, r6, r1
 800d4d2:	fa0c f101 	lsl.w	r1, ip, r1
 800d4d6:	42b1      	cmp	r1, r6
 800d4d8:	f040 848c 	bne.w	800ddf4 <__ieee754_pow+0x9d4>
 800d4dc:	f00c 0c01 	and.w	ip, ip, #1
 800d4e0:	f1cc 0102 	rsb	r1, ip, #2
 800d4e4:	9100      	str	r1, [sp, #0]
 800d4e6:	4959      	ldr	r1, [pc, #356]	; (800d64c <__ieee754_pow+0x22c>)
 800d4e8:	428e      	cmp	r6, r1
 800d4ea:	d12d      	bne.n	800d548 <__ieee754_pow+0x128>
 800d4ec:	2f00      	cmp	r7, #0
 800d4ee:	da79      	bge.n	800d5e4 <__ieee754_pow+0x1c4>
 800d4f0:	4956      	ldr	r1, [pc, #344]	; (800d64c <__ieee754_pow+0x22c>)
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	f7f3 f9d4 	bl	80008a0 <__aeabi_ddiv>
 800d4f8:	e016      	b.n	800d528 <__ieee754_pow+0x108>
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	9100      	str	r1, [sp, #0]
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d13b      	bne.n	800d57a <__ieee754_pow+0x15a>
 800d502:	494f      	ldr	r1, [pc, #316]	; (800d640 <__ieee754_pow+0x220>)
 800d504:	428e      	cmp	r6, r1
 800d506:	d1ee      	bne.n	800d4e6 <__ieee754_pow+0xc6>
 800d508:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d50c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d510:	ea53 0308 	orrs.w	r3, r3, r8
 800d514:	f000 8466 	beq.w	800dde4 <__ieee754_pow+0x9c4>
 800d518:	4b4d      	ldr	r3, [pc, #308]	; (800d650 <__ieee754_pow+0x230>)
 800d51a:	429c      	cmp	r4, r3
 800d51c:	dd0d      	ble.n	800d53a <__ieee754_pow+0x11a>
 800d51e:	2f00      	cmp	r7, #0
 800d520:	f280 8464 	bge.w	800ddec <__ieee754_pow+0x9cc>
 800d524:	2000      	movs	r0, #0
 800d526:	2100      	movs	r1, #0
 800d528:	ec41 0b10 	vmov	d0, r0, r1
 800d52c:	b00d      	add	sp, #52	; 0x34
 800d52e:	ecbd 8b06 	vpop	{d8-d10}
 800d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d536:	2102      	movs	r1, #2
 800d538:	e7e0      	b.n	800d4fc <__ieee754_pow+0xdc>
 800d53a:	2f00      	cmp	r7, #0
 800d53c:	daf2      	bge.n	800d524 <__ieee754_pow+0x104>
 800d53e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d542:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d546:	e7ef      	b.n	800d528 <__ieee754_pow+0x108>
 800d548:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d54c:	d104      	bne.n	800d558 <__ieee754_pow+0x138>
 800d54e:	4610      	mov	r0, r2
 800d550:	4619      	mov	r1, r3
 800d552:	f7f3 f87b 	bl	800064c <__aeabi_dmul>
 800d556:	e7e7      	b.n	800d528 <__ieee754_pow+0x108>
 800d558:	493e      	ldr	r1, [pc, #248]	; (800d654 <__ieee754_pow+0x234>)
 800d55a:	428f      	cmp	r7, r1
 800d55c:	d10d      	bne.n	800d57a <__ieee754_pow+0x15a>
 800d55e:	f1b9 0f00 	cmp.w	r9, #0
 800d562:	db0a      	blt.n	800d57a <__ieee754_pow+0x15a>
 800d564:	ec43 2b10 	vmov	d0, r2, r3
 800d568:	b00d      	add	sp, #52	; 0x34
 800d56a:	ecbd 8b06 	vpop	{d8-d10}
 800d56e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d572:	f000 bc77 	b.w	800de64 <__ieee754_sqrt>
 800d576:	2100      	movs	r1, #0
 800d578:	9100      	str	r1, [sp, #0]
 800d57a:	ec43 2b10 	vmov	d0, r2, r3
 800d57e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d582:	f000 fd23 	bl	800dfcc <fabs>
 800d586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d58a:	ec51 0b10 	vmov	r0, r1, d0
 800d58e:	f1b8 0f00 	cmp.w	r8, #0
 800d592:	d12a      	bne.n	800d5ea <__ieee754_pow+0x1ca>
 800d594:	b12c      	cbz	r4, 800d5a2 <__ieee754_pow+0x182>
 800d596:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d64c <__ieee754_pow+0x22c>
 800d59a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d59e:	45e6      	cmp	lr, ip
 800d5a0:	d123      	bne.n	800d5ea <__ieee754_pow+0x1ca>
 800d5a2:	2f00      	cmp	r7, #0
 800d5a4:	da05      	bge.n	800d5b2 <__ieee754_pow+0x192>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	4927      	ldr	r1, [pc, #156]	; (800d64c <__ieee754_pow+0x22c>)
 800d5ae:	f7f3 f977 	bl	80008a0 <__aeabi_ddiv>
 800d5b2:	f1b9 0f00 	cmp.w	r9, #0
 800d5b6:	dab7      	bge.n	800d528 <__ieee754_pow+0x108>
 800d5b8:	9b00      	ldr	r3, [sp, #0]
 800d5ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d5be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d5c2:	4323      	orrs	r3, r4
 800d5c4:	d108      	bne.n	800d5d8 <__ieee754_pow+0x1b8>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	f7f2 fe85 	bl	80002dc <__aeabi_dsub>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	e78d      	b.n	800d4f4 <__ieee754_pow+0xd4>
 800d5d8:	9b00      	ldr	r3, [sp, #0]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d1a4      	bne.n	800d528 <__ieee754_pow+0x108>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	e79e      	b.n	800d528 <__ieee754_pow+0x108>
 800d5ea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d5ee:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d5f2:	950a      	str	r5, [sp, #40]	; 0x28
 800d5f4:	9d00      	ldr	r5, [sp, #0]
 800d5f6:	46ac      	mov	ip, r5
 800d5f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d5fa:	ea5c 0505 	orrs.w	r5, ip, r5
 800d5fe:	d0e4      	beq.n	800d5ca <__ieee754_pow+0x1aa>
 800d600:	4b15      	ldr	r3, [pc, #84]	; (800d658 <__ieee754_pow+0x238>)
 800d602:	429e      	cmp	r6, r3
 800d604:	f340 80fc 	ble.w	800d800 <__ieee754_pow+0x3e0>
 800d608:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d60c:	429e      	cmp	r6, r3
 800d60e:	4b10      	ldr	r3, [pc, #64]	; (800d650 <__ieee754_pow+0x230>)
 800d610:	dd07      	ble.n	800d622 <__ieee754_pow+0x202>
 800d612:	429c      	cmp	r4, r3
 800d614:	dc0a      	bgt.n	800d62c <__ieee754_pow+0x20c>
 800d616:	2f00      	cmp	r7, #0
 800d618:	da84      	bge.n	800d524 <__ieee754_pow+0x104>
 800d61a:	a307      	add	r3, pc, #28	; (adr r3, 800d638 <__ieee754_pow+0x218>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	e795      	b.n	800d54e <__ieee754_pow+0x12e>
 800d622:	429c      	cmp	r4, r3
 800d624:	dbf7      	blt.n	800d616 <__ieee754_pow+0x1f6>
 800d626:	4b09      	ldr	r3, [pc, #36]	; (800d64c <__ieee754_pow+0x22c>)
 800d628:	429c      	cmp	r4, r3
 800d62a:	dd17      	ble.n	800d65c <__ieee754_pow+0x23c>
 800d62c:	2f00      	cmp	r7, #0
 800d62e:	dcf4      	bgt.n	800d61a <__ieee754_pow+0x1fa>
 800d630:	e778      	b.n	800d524 <__ieee754_pow+0x104>
 800d632:	bf00      	nop
 800d634:	f3af 8000 	nop.w
 800d638:	8800759c 	.word	0x8800759c
 800d63c:	7e37e43c 	.word	0x7e37e43c
 800d640:	7ff00000 	.word	0x7ff00000
 800d644:	0800e7e1 	.word	0x0800e7e1
 800d648:	433fffff 	.word	0x433fffff
 800d64c:	3ff00000 	.word	0x3ff00000
 800d650:	3fefffff 	.word	0x3fefffff
 800d654:	3fe00000 	.word	0x3fe00000
 800d658:	41e00000 	.word	0x41e00000
 800d65c:	4b64      	ldr	r3, [pc, #400]	; (800d7f0 <__ieee754_pow+0x3d0>)
 800d65e:	2200      	movs	r2, #0
 800d660:	f7f2 fe3c 	bl	80002dc <__aeabi_dsub>
 800d664:	a356      	add	r3, pc, #344	; (adr r3, 800d7c0 <__ieee754_pow+0x3a0>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	4604      	mov	r4, r0
 800d66c:	460d      	mov	r5, r1
 800d66e:	f7f2 ffed 	bl	800064c <__aeabi_dmul>
 800d672:	a355      	add	r3, pc, #340	; (adr r3, 800d7c8 <__ieee754_pow+0x3a8>)
 800d674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d678:	4606      	mov	r6, r0
 800d67a:	460f      	mov	r7, r1
 800d67c:	4620      	mov	r0, r4
 800d67e:	4629      	mov	r1, r5
 800d680:	f7f2 ffe4 	bl	800064c <__aeabi_dmul>
 800d684:	4b5b      	ldr	r3, [pc, #364]	; (800d7f4 <__ieee754_pow+0x3d4>)
 800d686:	4682      	mov	sl, r0
 800d688:	468b      	mov	fp, r1
 800d68a:	2200      	movs	r2, #0
 800d68c:	4620      	mov	r0, r4
 800d68e:	4629      	mov	r1, r5
 800d690:	f7f2 ffdc 	bl	800064c <__aeabi_dmul>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	a14d      	add	r1, pc, #308	; (adr r1, 800d7d0 <__ieee754_pow+0x3b0>)
 800d69a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d69e:	f7f2 fe1d 	bl	80002dc <__aeabi_dsub>
 800d6a2:	4622      	mov	r2, r4
 800d6a4:	462b      	mov	r3, r5
 800d6a6:	f7f2 ffd1 	bl	800064c <__aeabi_dmul>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	4951      	ldr	r1, [pc, #324]	; (800d7f8 <__ieee754_pow+0x3d8>)
 800d6b2:	f7f2 fe13 	bl	80002dc <__aeabi_dsub>
 800d6b6:	4622      	mov	r2, r4
 800d6b8:	4680      	mov	r8, r0
 800d6ba:	4689      	mov	r9, r1
 800d6bc:	462b      	mov	r3, r5
 800d6be:	4620      	mov	r0, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7f2 ffc3 	bl	800064c <__aeabi_dmul>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	f7f2 ffbd 	bl	800064c <__aeabi_dmul>
 800d6d2:	a341      	add	r3, pc, #260	; (adr r3, 800d7d8 <__ieee754_pow+0x3b8>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f2 ffb8 	bl	800064c <__aeabi_dmul>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	4650      	mov	r0, sl
 800d6e2:	4659      	mov	r1, fp
 800d6e4:	f7f2 fdfa 	bl	80002dc <__aeabi_dsub>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	4689      	mov	r9, r1
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	f7f2 fdf4 	bl	80002e0 <__adddf3>
 800d6f8:	2400      	movs	r4, #0
 800d6fa:	4632      	mov	r2, r6
 800d6fc:	463b      	mov	r3, r7
 800d6fe:	4620      	mov	r0, r4
 800d700:	460d      	mov	r5, r1
 800d702:	f7f2 fdeb 	bl	80002dc <__aeabi_dsub>
 800d706:	4602      	mov	r2, r0
 800d708:	460b      	mov	r3, r1
 800d70a:	4640      	mov	r0, r8
 800d70c:	4649      	mov	r1, r9
 800d70e:	f7f2 fde5 	bl	80002dc <__aeabi_dsub>
 800d712:	9b00      	ldr	r3, [sp, #0]
 800d714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d716:	3b01      	subs	r3, #1
 800d718:	4313      	orrs	r3, r2
 800d71a:	4682      	mov	sl, r0
 800d71c:	468b      	mov	fp, r1
 800d71e:	f040 81f1 	bne.w	800db04 <__ieee754_pow+0x6e4>
 800d722:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d7e0 <__ieee754_pow+0x3c0>
 800d726:	eeb0 8a47 	vmov.f32	s16, s14
 800d72a:	eef0 8a67 	vmov.f32	s17, s15
 800d72e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d732:	2600      	movs	r6, #0
 800d734:	4632      	mov	r2, r6
 800d736:	463b      	mov	r3, r7
 800d738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d73c:	f7f2 fdce 	bl	80002dc <__aeabi_dsub>
 800d740:	4622      	mov	r2, r4
 800d742:	462b      	mov	r3, r5
 800d744:	f7f2 ff82 	bl	800064c <__aeabi_dmul>
 800d748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d74c:	4680      	mov	r8, r0
 800d74e:	4689      	mov	r9, r1
 800d750:	4650      	mov	r0, sl
 800d752:	4659      	mov	r1, fp
 800d754:	f7f2 ff7a 	bl	800064c <__aeabi_dmul>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	4640      	mov	r0, r8
 800d75e:	4649      	mov	r1, r9
 800d760:	f7f2 fdbe 	bl	80002e0 <__adddf3>
 800d764:	4632      	mov	r2, r6
 800d766:	463b      	mov	r3, r7
 800d768:	4680      	mov	r8, r0
 800d76a:	4689      	mov	r9, r1
 800d76c:	4620      	mov	r0, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	f7f2 ff6c 	bl	800064c <__aeabi_dmul>
 800d774:	460b      	mov	r3, r1
 800d776:	4604      	mov	r4, r0
 800d778:	460d      	mov	r5, r1
 800d77a:	4602      	mov	r2, r0
 800d77c:	4649      	mov	r1, r9
 800d77e:	4640      	mov	r0, r8
 800d780:	f7f2 fdae 	bl	80002e0 <__adddf3>
 800d784:	4b1d      	ldr	r3, [pc, #116]	; (800d7fc <__ieee754_pow+0x3dc>)
 800d786:	4299      	cmp	r1, r3
 800d788:	ec45 4b19 	vmov	d9, r4, r5
 800d78c:	4606      	mov	r6, r0
 800d78e:	460f      	mov	r7, r1
 800d790:	468b      	mov	fp, r1
 800d792:	f340 82fe 	ble.w	800dd92 <__ieee754_pow+0x972>
 800d796:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d79a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d79e:	4303      	orrs	r3, r0
 800d7a0:	f000 81f0 	beq.w	800db84 <__ieee754_pow+0x764>
 800d7a4:	a310      	add	r3, pc, #64	; (adr r3, 800d7e8 <__ieee754_pow+0x3c8>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	ec51 0b18 	vmov	r0, r1, d8
 800d7ae:	f7f2 ff4d 	bl	800064c <__aeabi_dmul>
 800d7b2:	a30d      	add	r3, pc, #52	; (adr r3, 800d7e8 <__ieee754_pow+0x3c8>)
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	e6cb      	b.n	800d552 <__ieee754_pow+0x132>
 800d7ba:	bf00      	nop
 800d7bc:	f3af 8000 	nop.w
 800d7c0:	60000000 	.word	0x60000000
 800d7c4:	3ff71547 	.word	0x3ff71547
 800d7c8:	f85ddf44 	.word	0xf85ddf44
 800d7cc:	3e54ae0b 	.word	0x3e54ae0b
 800d7d0:	55555555 	.word	0x55555555
 800d7d4:	3fd55555 	.word	0x3fd55555
 800d7d8:	652b82fe 	.word	0x652b82fe
 800d7dc:	3ff71547 	.word	0x3ff71547
 800d7e0:	00000000 	.word	0x00000000
 800d7e4:	bff00000 	.word	0xbff00000
 800d7e8:	8800759c 	.word	0x8800759c
 800d7ec:	7e37e43c 	.word	0x7e37e43c
 800d7f0:	3ff00000 	.word	0x3ff00000
 800d7f4:	3fd00000 	.word	0x3fd00000
 800d7f8:	3fe00000 	.word	0x3fe00000
 800d7fc:	408fffff 	.word	0x408fffff
 800d800:	4bd7      	ldr	r3, [pc, #860]	; (800db60 <__ieee754_pow+0x740>)
 800d802:	ea03 0309 	and.w	r3, r3, r9
 800d806:	2200      	movs	r2, #0
 800d808:	b92b      	cbnz	r3, 800d816 <__ieee754_pow+0x3f6>
 800d80a:	4bd6      	ldr	r3, [pc, #856]	; (800db64 <__ieee754_pow+0x744>)
 800d80c:	f7f2 ff1e 	bl	800064c <__aeabi_dmul>
 800d810:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d814:	460c      	mov	r4, r1
 800d816:	1523      	asrs	r3, r4, #20
 800d818:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d81c:	4413      	add	r3, r2
 800d81e:	9309      	str	r3, [sp, #36]	; 0x24
 800d820:	4bd1      	ldr	r3, [pc, #836]	; (800db68 <__ieee754_pow+0x748>)
 800d822:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d826:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d82a:	429c      	cmp	r4, r3
 800d82c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d830:	dd08      	ble.n	800d844 <__ieee754_pow+0x424>
 800d832:	4bce      	ldr	r3, [pc, #824]	; (800db6c <__ieee754_pow+0x74c>)
 800d834:	429c      	cmp	r4, r3
 800d836:	f340 8163 	ble.w	800db00 <__ieee754_pow+0x6e0>
 800d83a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83c:	3301      	adds	r3, #1
 800d83e:	9309      	str	r3, [sp, #36]	; 0x24
 800d840:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d844:	2400      	movs	r4, #0
 800d846:	00e3      	lsls	r3, r4, #3
 800d848:	930b      	str	r3, [sp, #44]	; 0x2c
 800d84a:	4bc9      	ldr	r3, [pc, #804]	; (800db70 <__ieee754_pow+0x750>)
 800d84c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d850:	ed93 7b00 	vldr	d7, [r3]
 800d854:	4629      	mov	r1, r5
 800d856:	ec53 2b17 	vmov	r2, r3, d7
 800d85a:	eeb0 8a47 	vmov.f32	s16, s14
 800d85e:	eef0 8a67 	vmov.f32	s17, s15
 800d862:	4682      	mov	sl, r0
 800d864:	f7f2 fd3a 	bl	80002dc <__aeabi_dsub>
 800d868:	4652      	mov	r2, sl
 800d86a:	4606      	mov	r6, r0
 800d86c:	460f      	mov	r7, r1
 800d86e:	462b      	mov	r3, r5
 800d870:	ec51 0b18 	vmov	r0, r1, d8
 800d874:	f7f2 fd34 	bl	80002e0 <__adddf3>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	2000      	movs	r0, #0
 800d87e:	49bd      	ldr	r1, [pc, #756]	; (800db74 <__ieee754_pow+0x754>)
 800d880:	f7f3 f80e 	bl	80008a0 <__aeabi_ddiv>
 800d884:	ec41 0b19 	vmov	d9, r0, r1
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4630      	mov	r0, r6
 800d88e:	4639      	mov	r1, r7
 800d890:	f7f2 fedc 	bl	800064c <__aeabi_dmul>
 800d894:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d898:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d89c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	9304      	str	r3, [sp, #16]
 800d8a4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d8a8:	46ab      	mov	fp, r5
 800d8aa:	106d      	asrs	r5, r5, #1
 800d8ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d8b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d8b4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	4649      	mov	r1, r9
 800d8be:	4614      	mov	r4, r2
 800d8c0:	461d      	mov	r5, r3
 800d8c2:	f7f2 fec3 	bl	800064c <__aeabi_dmul>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f2 fd05 	bl	80002dc <__aeabi_dsub>
 800d8d2:	ec53 2b18 	vmov	r2, r3, d8
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	460f      	mov	r7, r1
 800d8da:	4620      	mov	r0, r4
 800d8dc:	4629      	mov	r1, r5
 800d8de:	f7f2 fcfd 	bl	80002dc <__aeabi_dsub>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	4659      	mov	r1, fp
 800d8ea:	f7f2 fcf7 	bl	80002dc <__aeabi_dsub>
 800d8ee:	4642      	mov	r2, r8
 800d8f0:	464b      	mov	r3, r9
 800d8f2:	f7f2 feab 	bl	800064c <__aeabi_dmul>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f2 fced 	bl	80002dc <__aeabi_dsub>
 800d902:	ec53 2b19 	vmov	r2, r3, d9
 800d906:	f7f2 fea1 	bl	800064c <__aeabi_dmul>
 800d90a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d90e:	ec41 0b18 	vmov	d8, r0, r1
 800d912:	4610      	mov	r0, r2
 800d914:	4619      	mov	r1, r3
 800d916:	f7f2 fe99 	bl	800064c <__aeabi_dmul>
 800d91a:	a37d      	add	r3, pc, #500	; (adr r3, 800db10 <__ieee754_pow+0x6f0>)
 800d91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d920:	4604      	mov	r4, r0
 800d922:	460d      	mov	r5, r1
 800d924:	f7f2 fe92 	bl	800064c <__aeabi_dmul>
 800d928:	a37b      	add	r3, pc, #492	; (adr r3, 800db18 <__ieee754_pow+0x6f8>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fcd7 	bl	80002e0 <__adddf3>
 800d932:	4622      	mov	r2, r4
 800d934:	462b      	mov	r3, r5
 800d936:	f7f2 fe89 	bl	800064c <__aeabi_dmul>
 800d93a:	a379      	add	r3, pc, #484	; (adr r3, 800db20 <__ieee754_pow+0x700>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f2 fcce 	bl	80002e0 <__adddf3>
 800d944:	4622      	mov	r2, r4
 800d946:	462b      	mov	r3, r5
 800d948:	f7f2 fe80 	bl	800064c <__aeabi_dmul>
 800d94c:	a376      	add	r3, pc, #472	; (adr r3, 800db28 <__ieee754_pow+0x708>)
 800d94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d952:	f7f2 fcc5 	bl	80002e0 <__adddf3>
 800d956:	4622      	mov	r2, r4
 800d958:	462b      	mov	r3, r5
 800d95a:	f7f2 fe77 	bl	800064c <__aeabi_dmul>
 800d95e:	a374      	add	r3, pc, #464	; (adr r3, 800db30 <__ieee754_pow+0x710>)
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	f7f2 fcbc 	bl	80002e0 <__adddf3>
 800d968:	4622      	mov	r2, r4
 800d96a:	462b      	mov	r3, r5
 800d96c:	f7f2 fe6e 	bl	800064c <__aeabi_dmul>
 800d970:	a371      	add	r3, pc, #452	; (adr r3, 800db38 <__ieee754_pow+0x718>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fcb3 	bl	80002e0 <__adddf3>
 800d97a:	4622      	mov	r2, r4
 800d97c:	4606      	mov	r6, r0
 800d97e:	460f      	mov	r7, r1
 800d980:	462b      	mov	r3, r5
 800d982:	4620      	mov	r0, r4
 800d984:	4629      	mov	r1, r5
 800d986:	f7f2 fe61 	bl	800064c <__aeabi_dmul>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4630      	mov	r0, r6
 800d990:	4639      	mov	r1, r7
 800d992:	f7f2 fe5b 	bl	800064c <__aeabi_dmul>
 800d996:	4642      	mov	r2, r8
 800d998:	4604      	mov	r4, r0
 800d99a:	460d      	mov	r5, r1
 800d99c:	464b      	mov	r3, r9
 800d99e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9a2:	f7f2 fc9d 	bl	80002e0 <__adddf3>
 800d9a6:	ec53 2b18 	vmov	r2, r3, d8
 800d9aa:	f7f2 fe4f 	bl	800064c <__aeabi_dmul>
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	462b      	mov	r3, r5
 800d9b2:	f7f2 fc95 	bl	80002e0 <__adddf3>
 800d9b6:	4642      	mov	r2, r8
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	468b      	mov	fp, r1
 800d9bc:	464b      	mov	r3, r9
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	f7f2 fe43 	bl	800064c <__aeabi_dmul>
 800d9c6:	4b6c      	ldr	r3, [pc, #432]	; (800db78 <__ieee754_pow+0x758>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	f7f2 fc87 	bl	80002e0 <__adddf3>
 800d9d2:	4652      	mov	r2, sl
 800d9d4:	465b      	mov	r3, fp
 800d9d6:	f7f2 fc83 	bl	80002e0 <__adddf3>
 800d9da:	9c04      	ldr	r4, [sp, #16]
 800d9dc:	460d      	mov	r5, r1
 800d9de:	4622      	mov	r2, r4
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f2 fe31 	bl	800064c <__aeabi_dmul>
 800d9ea:	4b63      	ldr	r3, [pc, #396]	; (800db78 <__ieee754_pow+0x758>)
 800d9ec:	4680      	mov	r8, r0
 800d9ee:	4689      	mov	r9, r1
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	f7f2 fc71 	bl	80002dc <__aeabi_dsub>
 800d9fa:	4632      	mov	r2, r6
 800d9fc:	463b      	mov	r3, r7
 800d9fe:	f7f2 fc6d 	bl	80002dc <__aeabi_dsub>
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4650      	mov	r0, sl
 800da08:	4659      	mov	r1, fp
 800da0a:	f7f2 fc67 	bl	80002dc <__aeabi_dsub>
 800da0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da12:	f7f2 fe1b 	bl	800064c <__aeabi_dmul>
 800da16:	4622      	mov	r2, r4
 800da18:	4606      	mov	r6, r0
 800da1a:	460f      	mov	r7, r1
 800da1c:	462b      	mov	r3, r5
 800da1e:	ec51 0b18 	vmov	r0, r1, d8
 800da22:	f7f2 fe13 	bl	800064c <__aeabi_dmul>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f2 fc57 	bl	80002e0 <__adddf3>
 800da32:	4606      	mov	r6, r0
 800da34:	460f      	mov	r7, r1
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4640      	mov	r0, r8
 800da3c:	4649      	mov	r1, r9
 800da3e:	f7f2 fc4f 	bl	80002e0 <__adddf3>
 800da42:	9c04      	ldr	r4, [sp, #16]
 800da44:	a33e      	add	r3, pc, #248	; (adr r3, 800db40 <__ieee754_pow+0x720>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	4620      	mov	r0, r4
 800da4c:	460d      	mov	r5, r1
 800da4e:	f7f2 fdfd 	bl	800064c <__aeabi_dmul>
 800da52:	4642      	mov	r2, r8
 800da54:	ec41 0b18 	vmov	d8, r0, r1
 800da58:	464b      	mov	r3, r9
 800da5a:	4620      	mov	r0, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	f7f2 fc3d 	bl	80002dc <__aeabi_dsub>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4630      	mov	r0, r6
 800da68:	4639      	mov	r1, r7
 800da6a:	f7f2 fc37 	bl	80002dc <__aeabi_dsub>
 800da6e:	a336      	add	r3, pc, #216	; (adr r3, 800db48 <__ieee754_pow+0x728>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	f7f2 fdea 	bl	800064c <__aeabi_dmul>
 800da78:	a335      	add	r3, pc, #212	; (adr r3, 800db50 <__ieee754_pow+0x730>)
 800da7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7e:	4606      	mov	r6, r0
 800da80:	460f      	mov	r7, r1
 800da82:	4620      	mov	r0, r4
 800da84:	4629      	mov	r1, r5
 800da86:	f7f2 fde1 	bl	800064c <__aeabi_dmul>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fc25 	bl	80002e0 <__adddf3>
 800da96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da98:	4b38      	ldr	r3, [pc, #224]	; (800db7c <__ieee754_pow+0x75c>)
 800da9a:	4413      	add	r3, r2
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	f7f2 fc1e 	bl	80002e0 <__adddf3>
 800daa4:	4682      	mov	sl, r0
 800daa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daa8:	468b      	mov	fp, r1
 800daaa:	f7f2 fd65 	bl	8000578 <__aeabi_i2d>
 800daae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dab0:	4b33      	ldr	r3, [pc, #204]	; (800db80 <__ieee754_pow+0x760>)
 800dab2:	4413      	add	r3, r2
 800dab4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dab8:	4606      	mov	r6, r0
 800daba:	460f      	mov	r7, r1
 800dabc:	4652      	mov	r2, sl
 800dabe:	465b      	mov	r3, fp
 800dac0:	ec51 0b18 	vmov	r0, r1, d8
 800dac4:	f7f2 fc0c 	bl	80002e0 <__adddf3>
 800dac8:	4642      	mov	r2, r8
 800daca:	464b      	mov	r3, r9
 800dacc:	f7f2 fc08 	bl	80002e0 <__adddf3>
 800dad0:	4632      	mov	r2, r6
 800dad2:	463b      	mov	r3, r7
 800dad4:	f7f2 fc04 	bl	80002e0 <__adddf3>
 800dad8:	9c04      	ldr	r4, [sp, #16]
 800dada:	4632      	mov	r2, r6
 800dadc:	463b      	mov	r3, r7
 800dade:	4620      	mov	r0, r4
 800dae0:	460d      	mov	r5, r1
 800dae2:	f7f2 fbfb 	bl	80002dc <__aeabi_dsub>
 800dae6:	4642      	mov	r2, r8
 800dae8:	464b      	mov	r3, r9
 800daea:	f7f2 fbf7 	bl	80002dc <__aeabi_dsub>
 800daee:	ec53 2b18 	vmov	r2, r3, d8
 800daf2:	f7f2 fbf3 	bl	80002dc <__aeabi_dsub>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4650      	mov	r0, sl
 800dafc:	4659      	mov	r1, fp
 800dafe:	e606      	b.n	800d70e <__ieee754_pow+0x2ee>
 800db00:	2401      	movs	r4, #1
 800db02:	e6a0      	b.n	800d846 <__ieee754_pow+0x426>
 800db04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800db58 <__ieee754_pow+0x738>
 800db08:	e60d      	b.n	800d726 <__ieee754_pow+0x306>
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w
 800db10:	4a454eef 	.word	0x4a454eef
 800db14:	3fca7e28 	.word	0x3fca7e28
 800db18:	93c9db65 	.word	0x93c9db65
 800db1c:	3fcd864a 	.word	0x3fcd864a
 800db20:	a91d4101 	.word	0xa91d4101
 800db24:	3fd17460 	.word	0x3fd17460
 800db28:	518f264d 	.word	0x518f264d
 800db2c:	3fd55555 	.word	0x3fd55555
 800db30:	db6fabff 	.word	0xdb6fabff
 800db34:	3fdb6db6 	.word	0x3fdb6db6
 800db38:	33333303 	.word	0x33333303
 800db3c:	3fe33333 	.word	0x3fe33333
 800db40:	e0000000 	.word	0xe0000000
 800db44:	3feec709 	.word	0x3feec709
 800db48:	dc3a03fd 	.word	0xdc3a03fd
 800db4c:	3feec709 	.word	0x3feec709
 800db50:	145b01f5 	.word	0x145b01f5
 800db54:	be3e2fe0 	.word	0xbe3e2fe0
 800db58:	00000000 	.word	0x00000000
 800db5c:	3ff00000 	.word	0x3ff00000
 800db60:	7ff00000 	.word	0x7ff00000
 800db64:	43400000 	.word	0x43400000
 800db68:	0003988e 	.word	0x0003988e
 800db6c:	000bb679 	.word	0x000bb679
 800db70:	0800e7f0 	.word	0x0800e7f0
 800db74:	3ff00000 	.word	0x3ff00000
 800db78:	40080000 	.word	0x40080000
 800db7c:	0800e810 	.word	0x0800e810
 800db80:	0800e800 	.word	0x0800e800
 800db84:	a3b5      	add	r3, pc, #724	; (adr r3, 800de5c <__ieee754_pow+0xa3c>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 fba7 	bl	80002e0 <__adddf3>
 800db92:	4622      	mov	r2, r4
 800db94:	ec41 0b1a 	vmov	d10, r0, r1
 800db98:	462b      	mov	r3, r5
 800db9a:	4630      	mov	r0, r6
 800db9c:	4639      	mov	r1, r7
 800db9e:	f7f2 fb9d 	bl	80002dc <__aeabi_dsub>
 800dba2:	4602      	mov	r2, r0
 800dba4:	460b      	mov	r3, r1
 800dba6:	ec51 0b1a 	vmov	r0, r1, d10
 800dbaa:	f7f2 ffdf 	bl	8000b6c <__aeabi_dcmpgt>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	f47f adf8 	bne.w	800d7a4 <__ieee754_pow+0x384>
 800dbb4:	4aa4      	ldr	r2, [pc, #656]	; (800de48 <__ieee754_pow+0xa28>)
 800dbb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	f340 810b 	ble.w	800ddd6 <__ieee754_pow+0x9b6>
 800dbc0:	151b      	asrs	r3, r3, #20
 800dbc2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dbc6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dbca:	fa4a f303 	asr.w	r3, sl, r3
 800dbce:	445b      	add	r3, fp
 800dbd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dbd4:	4e9d      	ldr	r6, [pc, #628]	; (800de4c <__ieee754_pow+0xa2c>)
 800dbd6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dbda:	4116      	asrs	r6, r2
 800dbdc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dbe0:	2000      	movs	r0, #0
 800dbe2:	ea23 0106 	bic.w	r1, r3, r6
 800dbe6:	f1c2 0214 	rsb	r2, r2, #20
 800dbea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dbee:	fa4a fa02 	asr.w	sl, sl, r2
 800dbf2:	f1bb 0f00 	cmp.w	fp, #0
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	bfb8      	it	lt
 800dc00:	f1ca 0a00 	rsblt	sl, sl, #0
 800dc04:	f7f2 fb6a 	bl	80002dc <__aeabi_dsub>
 800dc08:	ec41 0b19 	vmov	d9, r0, r1
 800dc0c:	4642      	mov	r2, r8
 800dc0e:	464b      	mov	r3, r9
 800dc10:	ec51 0b19 	vmov	r0, r1, d9
 800dc14:	f7f2 fb64 	bl	80002e0 <__adddf3>
 800dc18:	2400      	movs	r4, #0
 800dc1a:	a379      	add	r3, pc, #484	; (adr r3, 800de00 <__ieee754_pow+0x9e0>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	4620      	mov	r0, r4
 800dc22:	460d      	mov	r5, r1
 800dc24:	f7f2 fd12 	bl	800064c <__aeabi_dmul>
 800dc28:	ec53 2b19 	vmov	r2, r3, d9
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
 800dc30:	4620      	mov	r0, r4
 800dc32:	4629      	mov	r1, r5
 800dc34:	f7f2 fb52 	bl	80002dc <__aeabi_dsub>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4640      	mov	r0, r8
 800dc3e:	4649      	mov	r1, r9
 800dc40:	f7f2 fb4c 	bl	80002dc <__aeabi_dsub>
 800dc44:	a370      	add	r3, pc, #448	; (adr r3, 800de08 <__ieee754_pow+0x9e8>)
 800dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4a:	f7f2 fcff 	bl	800064c <__aeabi_dmul>
 800dc4e:	a370      	add	r3, pc, #448	; (adr r3, 800de10 <__ieee754_pow+0x9f0>)
 800dc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc54:	4680      	mov	r8, r0
 800dc56:	4689      	mov	r9, r1
 800dc58:	4620      	mov	r0, r4
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	f7f2 fcf6 	bl	800064c <__aeabi_dmul>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	4640      	mov	r0, r8
 800dc66:	4649      	mov	r1, r9
 800dc68:	f7f2 fb3a 	bl	80002e0 <__adddf3>
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	460d      	mov	r5, r1
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4630      	mov	r0, r6
 800dc76:	4639      	mov	r1, r7
 800dc78:	f7f2 fb32 	bl	80002e0 <__adddf3>
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	463b      	mov	r3, r7
 800dc80:	4680      	mov	r8, r0
 800dc82:	4689      	mov	r9, r1
 800dc84:	f7f2 fb2a 	bl	80002dc <__aeabi_dsub>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	4629      	mov	r1, r5
 800dc90:	f7f2 fb24 	bl	80002dc <__aeabi_dsub>
 800dc94:	4642      	mov	r2, r8
 800dc96:	4606      	mov	r6, r0
 800dc98:	460f      	mov	r7, r1
 800dc9a:	464b      	mov	r3, r9
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	4649      	mov	r1, r9
 800dca0:	f7f2 fcd4 	bl	800064c <__aeabi_dmul>
 800dca4:	a35c      	add	r3, pc, #368	; (adr r3, 800de18 <__ieee754_pow+0x9f8>)
 800dca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcaa:	4604      	mov	r4, r0
 800dcac:	460d      	mov	r5, r1
 800dcae:	f7f2 fccd 	bl	800064c <__aeabi_dmul>
 800dcb2:	a35b      	add	r3, pc, #364	; (adr r3, 800de20 <__ieee754_pow+0xa00>)
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	f7f2 fb10 	bl	80002dc <__aeabi_dsub>
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	f7f2 fcc4 	bl	800064c <__aeabi_dmul>
 800dcc4:	a358      	add	r3, pc, #352	; (adr r3, 800de28 <__ieee754_pow+0xa08>)
 800dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcca:	f7f2 fb09 	bl	80002e0 <__adddf3>
 800dcce:	4622      	mov	r2, r4
 800dcd0:	462b      	mov	r3, r5
 800dcd2:	f7f2 fcbb 	bl	800064c <__aeabi_dmul>
 800dcd6:	a356      	add	r3, pc, #344	; (adr r3, 800de30 <__ieee754_pow+0xa10>)
 800dcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcdc:	f7f2 fafe 	bl	80002dc <__aeabi_dsub>
 800dce0:	4622      	mov	r2, r4
 800dce2:	462b      	mov	r3, r5
 800dce4:	f7f2 fcb2 	bl	800064c <__aeabi_dmul>
 800dce8:	a353      	add	r3, pc, #332	; (adr r3, 800de38 <__ieee754_pow+0xa18>)
 800dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcee:	f7f2 faf7 	bl	80002e0 <__adddf3>
 800dcf2:	4622      	mov	r2, r4
 800dcf4:	462b      	mov	r3, r5
 800dcf6:	f7f2 fca9 	bl	800064c <__aeabi_dmul>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	4640      	mov	r0, r8
 800dd00:	4649      	mov	r1, r9
 800dd02:	f7f2 faeb 	bl	80002dc <__aeabi_dsub>
 800dd06:	4604      	mov	r4, r0
 800dd08:	460d      	mov	r5, r1
 800dd0a:	4602      	mov	r2, r0
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	4640      	mov	r0, r8
 800dd10:	4649      	mov	r1, r9
 800dd12:	f7f2 fc9b 	bl	800064c <__aeabi_dmul>
 800dd16:	2200      	movs	r2, #0
 800dd18:	ec41 0b19 	vmov	d9, r0, r1
 800dd1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd20:	4620      	mov	r0, r4
 800dd22:	4629      	mov	r1, r5
 800dd24:	f7f2 fada 	bl	80002dc <__aeabi_dsub>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	ec51 0b19 	vmov	r0, r1, d9
 800dd30:	f7f2 fdb6 	bl	80008a0 <__aeabi_ddiv>
 800dd34:	4632      	mov	r2, r6
 800dd36:	4604      	mov	r4, r0
 800dd38:	460d      	mov	r5, r1
 800dd3a:	463b      	mov	r3, r7
 800dd3c:	4640      	mov	r0, r8
 800dd3e:	4649      	mov	r1, r9
 800dd40:	f7f2 fc84 	bl	800064c <__aeabi_dmul>
 800dd44:	4632      	mov	r2, r6
 800dd46:	463b      	mov	r3, r7
 800dd48:	f7f2 faca 	bl	80002e0 <__adddf3>
 800dd4c:	4602      	mov	r2, r0
 800dd4e:	460b      	mov	r3, r1
 800dd50:	4620      	mov	r0, r4
 800dd52:	4629      	mov	r1, r5
 800dd54:	f7f2 fac2 	bl	80002dc <__aeabi_dsub>
 800dd58:	4642      	mov	r2, r8
 800dd5a:	464b      	mov	r3, r9
 800dd5c:	f7f2 fabe 	bl	80002dc <__aeabi_dsub>
 800dd60:	460b      	mov	r3, r1
 800dd62:	4602      	mov	r2, r0
 800dd64:	493a      	ldr	r1, [pc, #232]	; (800de50 <__ieee754_pow+0xa30>)
 800dd66:	2000      	movs	r0, #0
 800dd68:	f7f2 fab8 	bl	80002dc <__aeabi_dsub>
 800dd6c:	e9cd 0100 	strd	r0, r1, [sp]
 800dd70:	9b01      	ldr	r3, [sp, #4]
 800dd72:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dd76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd7a:	da2f      	bge.n	800dddc <__ieee754_pow+0x9bc>
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	ed9d 0b00 	vldr	d0, [sp]
 800dd82:	f000 f9cd 	bl	800e120 <scalbn>
 800dd86:	ec51 0b10 	vmov	r0, r1, d0
 800dd8a:	ec53 2b18 	vmov	r2, r3, d8
 800dd8e:	f7ff bbe0 	b.w	800d552 <__ieee754_pow+0x132>
 800dd92:	4b30      	ldr	r3, [pc, #192]	; (800de54 <__ieee754_pow+0xa34>)
 800dd94:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd98:	429e      	cmp	r6, r3
 800dd9a:	f77f af0b 	ble.w	800dbb4 <__ieee754_pow+0x794>
 800dd9e:	4b2e      	ldr	r3, [pc, #184]	; (800de58 <__ieee754_pow+0xa38>)
 800dda0:	440b      	add	r3, r1
 800dda2:	4303      	orrs	r3, r0
 800dda4:	d00b      	beq.n	800ddbe <__ieee754_pow+0x99e>
 800dda6:	a326      	add	r3, pc, #152	; (adr r3, 800de40 <__ieee754_pow+0xa20>)
 800dda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddac:	ec51 0b18 	vmov	r0, r1, d8
 800ddb0:	f7f2 fc4c 	bl	800064c <__aeabi_dmul>
 800ddb4:	a322      	add	r3, pc, #136	; (adr r3, 800de40 <__ieee754_pow+0xa20>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	f7ff bbca 	b.w	800d552 <__ieee754_pow+0x132>
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	462b      	mov	r3, r5
 800ddc2:	f7f2 fa8b 	bl	80002dc <__aeabi_dsub>
 800ddc6:	4642      	mov	r2, r8
 800ddc8:	464b      	mov	r3, r9
 800ddca:	f7f2 fec5 	bl	8000b58 <__aeabi_dcmpge>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f43f aef0 	beq.w	800dbb4 <__ieee754_pow+0x794>
 800ddd4:	e7e7      	b.n	800dda6 <__ieee754_pow+0x986>
 800ddd6:	f04f 0a00 	mov.w	sl, #0
 800ddda:	e717      	b.n	800dc0c <__ieee754_pow+0x7ec>
 800dddc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dde0:	4619      	mov	r1, r3
 800dde2:	e7d2      	b.n	800dd8a <__ieee754_pow+0x96a>
 800dde4:	491a      	ldr	r1, [pc, #104]	; (800de50 <__ieee754_pow+0xa30>)
 800dde6:	2000      	movs	r0, #0
 800dde8:	f7ff bb9e 	b.w	800d528 <__ieee754_pow+0x108>
 800ddec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddf0:	f7ff bb9a 	b.w	800d528 <__ieee754_pow+0x108>
 800ddf4:	9000      	str	r0, [sp, #0]
 800ddf6:	f7ff bb76 	b.w	800d4e6 <__ieee754_pow+0xc6>
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	f7ff bb60 	b.w	800d4c0 <__ieee754_pow+0xa0>
 800de00:	00000000 	.word	0x00000000
 800de04:	3fe62e43 	.word	0x3fe62e43
 800de08:	fefa39ef 	.word	0xfefa39ef
 800de0c:	3fe62e42 	.word	0x3fe62e42
 800de10:	0ca86c39 	.word	0x0ca86c39
 800de14:	be205c61 	.word	0xbe205c61
 800de18:	72bea4d0 	.word	0x72bea4d0
 800de1c:	3e663769 	.word	0x3e663769
 800de20:	c5d26bf1 	.word	0xc5d26bf1
 800de24:	3ebbbd41 	.word	0x3ebbbd41
 800de28:	af25de2c 	.word	0xaf25de2c
 800de2c:	3f11566a 	.word	0x3f11566a
 800de30:	16bebd93 	.word	0x16bebd93
 800de34:	3f66c16c 	.word	0x3f66c16c
 800de38:	5555553e 	.word	0x5555553e
 800de3c:	3fc55555 	.word	0x3fc55555
 800de40:	c2f8f359 	.word	0xc2f8f359
 800de44:	01a56e1f 	.word	0x01a56e1f
 800de48:	3fe00000 	.word	0x3fe00000
 800de4c:	000fffff 	.word	0x000fffff
 800de50:	3ff00000 	.word	0x3ff00000
 800de54:	4090cbff 	.word	0x4090cbff
 800de58:	3f6f3400 	.word	0x3f6f3400
 800de5c:	652b82fe 	.word	0x652b82fe
 800de60:	3c971547 	.word	0x3c971547

0800de64 <__ieee754_sqrt>:
 800de64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	ec55 4b10 	vmov	r4, r5, d0
 800de6c:	4e56      	ldr	r6, [pc, #344]	; (800dfc8 <__ieee754_sqrt+0x164>)
 800de6e:	43ae      	bics	r6, r5
 800de70:	ee10 0a10 	vmov	r0, s0
 800de74:	ee10 3a10 	vmov	r3, s0
 800de78:	4629      	mov	r1, r5
 800de7a:	462a      	mov	r2, r5
 800de7c:	d110      	bne.n	800dea0 <__ieee754_sqrt+0x3c>
 800de7e:	ee10 2a10 	vmov	r2, s0
 800de82:	462b      	mov	r3, r5
 800de84:	f7f2 fbe2 	bl	800064c <__aeabi_dmul>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 fa26 	bl	80002e0 <__adddf3>
 800de94:	4604      	mov	r4, r0
 800de96:	460d      	mov	r5, r1
 800de98:	ec45 4b10 	vmov	d0, r4, r5
 800de9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	dc10      	bgt.n	800dec6 <__ieee754_sqrt+0x62>
 800dea4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dea8:	4330      	orrs	r0, r6
 800deaa:	d0f5      	beq.n	800de98 <__ieee754_sqrt+0x34>
 800deac:	b15d      	cbz	r5, 800dec6 <__ieee754_sqrt+0x62>
 800deae:	ee10 2a10 	vmov	r2, s0
 800deb2:	462b      	mov	r3, r5
 800deb4:	ee10 0a10 	vmov	r0, s0
 800deb8:	f7f2 fa10 	bl	80002dc <__aeabi_dsub>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	f7f2 fcee 	bl	80008a0 <__aeabi_ddiv>
 800dec4:	e7e6      	b.n	800de94 <__ieee754_sqrt+0x30>
 800dec6:	1509      	asrs	r1, r1, #20
 800dec8:	d076      	beq.n	800dfb8 <__ieee754_sqrt+0x154>
 800deca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dece:	07ce      	lsls	r6, r1, #31
 800ded0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ded4:	bf5e      	ittt	pl
 800ded6:	0fda      	lsrpl	r2, r3, #31
 800ded8:	005b      	lslpl	r3, r3, #1
 800deda:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800dede:	0fda      	lsrs	r2, r3, #31
 800dee0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800dee4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800dee8:	2000      	movs	r0, #0
 800deea:	106d      	asrs	r5, r5, #1
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	f04f 0e16 	mov.w	lr, #22
 800def2:	4684      	mov	ip, r0
 800def4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800def8:	eb0c 0401 	add.w	r4, ip, r1
 800defc:	4294      	cmp	r4, r2
 800defe:	bfde      	ittt	le
 800df00:	1b12      	suble	r2, r2, r4
 800df02:	eb04 0c01 	addle.w	ip, r4, r1
 800df06:	1840      	addle	r0, r0, r1
 800df08:	0052      	lsls	r2, r2, #1
 800df0a:	f1be 0e01 	subs.w	lr, lr, #1
 800df0e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800df12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800df16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df1a:	d1ed      	bne.n	800def8 <__ieee754_sqrt+0x94>
 800df1c:	4671      	mov	r1, lr
 800df1e:	2720      	movs	r7, #32
 800df20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800df24:	4562      	cmp	r2, ip
 800df26:	eb04 060e 	add.w	r6, r4, lr
 800df2a:	dc02      	bgt.n	800df32 <__ieee754_sqrt+0xce>
 800df2c:	d113      	bne.n	800df56 <__ieee754_sqrt+0xf2>
 800df2e:	429e      	cmp	r6, r3
 800df30:	d811      	bhi.n	800df56 <__ieee754_sqrt+0xf2>
 800df32:	2e00      	cmp	r6, #0
 800df34:	eb06 0e04 	add.w	lr, r6, r4
 800df38:	da43      	bge.n	800dfc2 <__ieee754_sqrt+0x15e>
 800df3a:	f1be 0f00 	cmp.w	lr, #0
 800df3e:	db40      	blt.n	800dfc2 <__ieee754_sqrt+0x15e>
 800df40:	f10c 0801 	add.w	r8, ip, #1
 800df44:	eba2 020c 	sub.w	r2, r2, ip
 800df48:	429e      	cmp	r6, r3
 800df4a:	bf88      	it	hi
 800df4c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800df50:	1b9b      	subs	r3, r3, r6
 800df52:	4421      	add	r1, r4
 800df54:	46c4      	mov	ip, r8
 800df56:	0052      	lsls	r2, r2, #1
 800df58:	3f01      	subs	r7, #1
 800df5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800df5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800df62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df66:	d1dd      	bne.n	800df24 <__ieee754_sqrt+0xc0>
 800df68:	4313      	orrs	r3, r2
 800df6a:	d006      	beq.n	800df7a <__ieee754_sqrt+0x116>
 800df6c:	1c4c      	adds	r4, r1, #1
 800df6e:	bf13      	iteet	ne
 800df70:	3101      	addne	r1, #1
 800df72:	3001      	addeq	r0, #1
 800df74:	4639      	moveq	r1, r7
 800df76:	f021 0101 	bicne.w	r1, r1, #1
 800df7a:	1043      	asrs	r3, r0, #1
 800df7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800df80:	0849      	lsrs	r1, r1, #1
 800df82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800df86:	07c2      	lsls	r2, r0, #31
 800df88:	bf48      	it	mi
 800df8a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800df8e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800df92:	460c      	mov	r4, r1
 800df94:	463d      	mov	r5, r7
 800df96:	e77f      	b.n	800de98 <__ieee754_sqrt+0x34>
 800df98:	0ada      	lsrs	r2, r3, #11
 800df9a:	3815      	subs	r0, #21
 800df9c:	055b      	lsls	r3, r3, #21
 800df9e:	2a00      	cmp	r2, #0
 800dfa0:	d0fa      	beq.n	800df98 <__ieee754_sqrt+0x134>
 800dfa2:	02d7      	lsls	r7, r2, #11
 800dfa4:	d50a      	bpl.n	800dfbc <__ieee754_sqrt+0x158>
 800dfa6:	f1c1 0420 	rsb	r4, r1, #32
 800dfaa:	fa23 f404 	lsr.w	r4, r3, r4
 800dfae:	1e4d      	subs	r5, r1, #1
 800dfb0:	408b      	lsls	r3, r1
 800dfb2:	4322      	orrs	r2, r4
 800dfb4:	1b41      	subs	r1, r0, r5
 800dfb6:	e788      	b.n	800deca <__ieee754_sqrt+0x66>
 800dfb8:	4608      	mov	r0, r1
 800dfba:	e7f0      	b.n	800df9e <__ieee754_sqrt+0x13a>
 800dfbc:	0052      	lsls	r2, r2, #1
 800dfbe:	3101      	adds	r1, #1
 800dfc0:	e7ef      	b.n	800dfa2 <__ieee754_sqrt+0x13e>
 800dfc2:	46e0      	mov	r8, ip
 800dfc4:	e7be      	b.n	800df44 <__ieee754_sqrt+0xe0>
 800dfc6:	bf00      	nop
 800dfc8:	7ff00000 	.word	0x7ff00000

0800dfcc <fabs>:
 800dfcc:	ec51 0b10 	vmov	r0, r1, d0
 800dfd0:	ee10 2a10 	vmov	r2, s0
 800dfd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfd8:	ec43 2b10 	vmov	d0, r2, r3
 800dfdc:	4770      	bx	lr

0800dfde <finite>:
 800dfde:	b082      	sub	sp, #8
 800dfe0:	ed8d 0b00 	vstr	d0, [sp]
 800dfe4:	9801      	ldr	r0, [sp, #4]
 800dfe6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dfea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dfee:	0fc0      	lsrs	r0, r0, #31
 800dff0:	b002      	add	sp, #8
 800dff2:	4770      	bx	lr
 800dff4:	0000      	movs	r0, r0
	...

0800dff8 <nan>:
 800dff8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e000 <nan+0x8>
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	00000000 	.word	0x00000000
 800e004:	7ff80000 	.word	0x7ff80000

0800e008 <rint>:
 800e008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e00a:	ec51 0b10 	vmov	r0, r1, d0
 800e00e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e012:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800e016:	2e13      	cmp	r6, #19
 800e018:	ee10 4a10 	vmov	r4, s0
 800e01c:	460b      	mov	r3, r1
 800e01e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800e022:	dc58      	bgt.n	800e0d6 <rint+0xce>
 800e024:	2e00      	cmp	r6, #0
 800e026:	da2b      	bge.n	800e080 <rint+0x78>
 800e028:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e02c:	4302      	orrs	r2, r0
 800e02e:	d023      	beq.n	800e078 <rint+0x70>
 800e030:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800e034:	4302      	orrs	r2, r0
 800e036:	4254      	negs	r4, r2
 800e038:	4314      	orrs	r4, r2
 800e03a:	0c4b      	lsrs	r3, r1, #17
 800e03c:	0b24      	lsrs	r4, r4, #12
 800e03e:	045b      	lsls	r3, r3, #17
 800e040:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800e044:	ea44 0103 	orr.w	r1, r4, r3
 800e048:	4b32      	ldr	r3, [pc, #200]	; (800e114 <rint+0x10c>)
 800e04a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e04e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4630      	mov	r0, r6
 800e058:	4639      	mov	r1, r7
 800e05a:	f7f2 f941 	bl	80002e0 <__adddf3>
 800e05e:	e9cd 0100 	strd	r0, r1, [sp]
 800e062:	463b      	mov	r3, r7
 800e064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e068:	4632      	mov	r2, r6
 800e06a:	f7f2 f937 	bl	80002dc <__aeabi_dsub>
 800e06e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e072:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800e076:	4639      	mov	r1, r7
 800e078:	ec41 0b10 	vmov	d0, r0, r1
 800e07c:	b003      	add	sp, #12
 800e07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e080:	4a25      	ldr	r2, [pc, #148]	; (800e118 <rint+0x110>)
 800e082:	4132      	asrs	r2, r6
 800e084:	ea01 0702 	and.w	r7, r1, r2
 800e088:	4307      	orrs	r7, r0
 800e08a:	d0f5      	beq.n	800e078 <rint+0x70>
 800e08c:	0851      	lsrs	r1, r2, #1
 800e08e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800e092:	4314      	orrs	r4, r2
 800e094:	d00c      	beq.n	800e0b0 <rint+0xa8>
 800e096:	ea23 0201 	bic.w	r2, r3, r1
 800e09a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e09e:	2e13      	cmp	r6, #19
 800e0a0:	fa43 f606 	asr.w	r6, r3, r6
 800e0a4:	bf0c      	ite	eq
 800e0a6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800e0aa:	2400      	movne	r4, #0
 800e0ac:	ea42 0306 	orr.w	r3, r2, r6
 800e0b0:	4918      	ldr	r1, [pc, #96]	; (800e114 <rint+0x10c>)
 800e0b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e0bc:	4620      	mov	r0, r4
 800e0be:	4629      	mov	r1, r5
 800e0c0:	f7f2 f90e 	bl	80002e0 <__adddf3>
 800e0c4:	e9cd 0100 	strd	r0, r1, [sp]
 800e0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	f7f2 f904 	bl	80002dc <__aeabi_dsub>
 800e0d4:	e7d0      	b.n	800e078 <rint+0x70>
 800e0d6:	2e33      	cmp	r6, #51	; 0x33
 800e0d8:	dd07      	ble.n	800e0ea <rint+0xe2>
 800e0da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e0de:	d1cb      	bne.n	800e078 <rint+0x70>
 800e0e0:	ee10 2a10 	vmov	r2, s0
 800e0e4:	f7f2 f8fc 	bl	80002e0 <__adddf3>
 800e0e8:	e7c6      	b.n	800e078 <rint+0x70>
 800e0ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800e0ee:	f04f 36ff 	mov.w	r6, #4294967295
 800e0f2:	40d6      	lsrs	r6, r2
 800e0f4:	4230      	tst	r0, r6
 800e0f6:	d0bf      	beq.n	800e078 <rint+0x70>
 800e0f8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800e0fc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800e100:	bf1f      	itttt	ne
 800e102:	ea24 0101 	bicne.w	r1, r4, r1
 800e106:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800e10a:	fa44 f202 	asrne.w	r2, r4, r2
 800e10e:	ea41 0402 	orrne.w	r4, r1, r2
 800e112:	e7cd      	b.n	800e0b0 <rint+0xa8>
 800e114:	0800e820 	.word	0x0800e820
 800e118:	000fffff 	.word	0x000fffff
 800e11c:	00000000 	.word	0x00000000

0800e120 <scalbn>:
 800e120:	b570      	push	{r4, r5, r6, lr}
 800e122:	ec55 4b10 	vmov	r4, r5, d0
 800e126:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e12a:	4606      	mov	r6, r0
 800e12c:	462b      	mov	r3, r5
 800e12e:	b99a      	cbnz	r2, 800e158 <scalbn+0x38>
 800e130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e134:	4323      	orrs	r3, r4
 800e136:	d036      	beq.n	800e1a6 <scalbn+0x86>
 800e138:	4b39      	ldr	r3, [pc, #228]	; (800e220 <scalbn+0x100>)
 800e13a:	4629      	mov	r1, r5
 800e13c:	ee10 0a10 	vmov	r0, s0
 800e140:	2200      	movs	r2, #0
 800e142:	f7f2 fa83 	bl	800064c <__aeabi_dmul>
 800e146:	4b37      	ldr	r3, [pc, #220]	; (800e224 <scalbn+0x104>)
 800e148:	429e      	cmp	r6, r3
 800e14a:	4604      	mov	r4, r0
 800e14c:	460d      	mov	r5, r1
 800e14e:	da10      	bge.n	800e172 <scalbn+0x52>
 800e150:	a32b      	add	r3, pc, #172	; (adr r3, 800e200 <scalbn+0xe0>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	e03a      	b.n	800e1ce <scalbn+0xae>
 800e158:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e15c:	428a      	cmp	r2, r1
 800e15e:	d10c      	bne.n	800e17a <scalbn+0x5a>
 800e160:	ee10 2a10 	vmov	r2, s0
 800e164:	4620      	mov	r0, r4
 800e166:	4629      	mov	r1, r5
 800e168:	f7f2 f8ba 	bl	80002e0 <__adddf3>
 800e16c:	4604      	mov	r4, r0
 800e16e:	460d      	mov	r5, r1
 800e170:	e019      	b.n	800e1a6 <scalbn+0x86>
 800e172:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e176:	460b      	mov	r3, r1
 800e178:	3a36      	subs	r2, #54	; 0x36
 800e17a:	4432      	add	r2, r6
 800e17c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e180:	428a      	cmp	r2, r1
 800e182:	dd08      	ble.n	800e196 <scalbn+0x76>
 800e184:	2d00      	cmp	r5, #0
 800e186:	a120      	add	r1, pc, #128	; (adr r1, 800e208 <scalbn+0xe8>)
 800e188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e18c:	da1c      	bge.n	800e1c8 <scalbn+0xa8>
 800e18e:	a120      	add	r1, pc, #128	; (adr r1, 800e210 <scalbn+0xf0>)
 800e190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e194:	e018      	b.n	800e1c8 <scalbn+0xa8>
 800e196:	2a00      	cmp	r2, #0
 800e198:	dd08      	ble.n	800e1ac <scalbn+0x8c>
 800e19a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e19e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e1a6:	ec45 4b10 	vmov	d0, r4, r5
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e1b0:	da19      	bge.n	800e1e6 <scalbn+0xc6>
 800e1b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e1b6:	429e      	cmp	r6, r3
 800e1b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e1bc:	dd0a      	ble.n	800e1d4 <scalbn+0xb4>
 800e1be:	a112      	add	r1, pc, #72	; (adr r1, 800e208 <scalbn+0xe8>)
 800e1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1e2      	bne.n	800e18e <scalbn+0x6e>
 800e1c8:	a30f      	add	r3, pc, #60	; (adr r3, 800e208 <scalbn+0xe8>)
 800e1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ce:	f7f2 fa3d 	bl	800064c <__aeabi_dmul>
 800e1d2:	e7cb      	b.n	800e16c <scalbn+0x4c>
 800e1d4:	a10a      	add	r1, pc, #40	; (adr r1, 800e200 <scalbn+0xe0>)
 800e1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d0b8      	beq.n	800e150 <scalbn+0x30>
 800e1de:	a10e      	add	r1, pc, #56	; (adr r1, 800e218 <scalbn+0xf8>)
 800e1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1e4:	e7b4      	b.n	800e150 <scalbn+0x30>
 800e1e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e1ea:	3236      	adds	r2, #54	; 0x36
 800e1ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e1f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <scalbn+0x108>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	e7e8      	b.n	800e1ce <scalbn+0xae>
 800e1fc:	f3af 8000 	nop.w
 800e200:	c2f8f359 	.word	0xc2f8f359
 800e204:	01a56e1f 	.word	0x01a56e1f
 800e208:	8800759c 	.word	0x8800759c
 800e20c:	7e37e43c 	.word	0x7e37e43c
 800e210:	8800759c 	.word	0x8800759c
 800e214:	fe37e43c 	.word	0xfe37e43c
 800e218:	c2f8f359 	.word	0xc2f8f359
 800e21c:	81a56e1f 	.word	0x81a56e1f
 800e220:	43500000 	.word	0x43500000
 800e224:	ffff3cb0 	.word	0xffff3cb0
 800e228:	3c900000 	.word	0x3c900000

0800e22c <_init>:
 800e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22e:	bf00      	nop
 800e230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e232:	bc08      	pop	{r3}
 800e234:	469e      	mov	lr, r3
 800e236:	4770      	bx	lr

0800e238 <_fini>:
 800e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23a:	bf00      	nop
 800e23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e23e:	bc08      	pop	{r3}
 800e240:	469e      	mov	lr, r3
 800e242:	4770      	bx	lr
