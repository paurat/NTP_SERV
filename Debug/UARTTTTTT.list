
UARTTTTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000243bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005ec0  08024590  08024590  00034590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a450  0802a450  00040a50  2**0
                  CONTENTS
  4 .ARM          00000008  0802a450  0802a450  0003a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a458  0802a458  00040a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a458  0802a458  0003a458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a460  0802a460  0003a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  0802a464  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3b0  20000a50  0802aeb4  00040a50  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000be00  0802aeb4  0004be00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052f07  00000000  00000000  00040a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a533  00000000  00000000  00093987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a0  00000000  00000000  0009dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025f8  00000000  00000000  000a0660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bb3b  00000000  00000000  000a2c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f7af  00000000  00000000  000de793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120ca5  00000000  00000000  0011df42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023ebe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000beec  00000000  00000000  0023ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a50 	.word	0x20000a50
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024574 	.word	0x08024574

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a54 	.word	0x20000a54
 800020c:	08024574 	.word	0x08024574

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <clearFlash>:
 *      Author: User
 */
#include "MyFlash.h"
#include "local_files.h"
#define CONFIGURATION_START_ADDR 0x080c0000
void clearFlash(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Get the 1st sector to erase */
	uint32_t FirstSector = 7;//flash memory sector
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	60fb      	str	r3, [r7, #12]
	/* Get the number of sector to erase from 1st sector*/
	uint32_t NbOfSectors = 1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <clearFlash+0x44>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <clearFlash+0x44>)
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	60da      	str	r2, [r3, #12]
	EraseInitStruct.Sector = FirstSector;
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <clearFlash+0x44>)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbSectors = NbOfSectors;
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <clearFlash+0x44>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	6093      	str	r3, [r2, #8]
	uint32_t SectorError = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();
 8000fca:	f004 fa7f 	bl	80054cc <HAL_FLASH_Unlock>
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <clearFlash+0x44>)
 8000fd4:	f004 fbdc 	bl	8005790 <HAL_FLASHEx_Erase>
		/*FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
		 */
		//Error_Handler();

	}
	HAL_FLASH_Lock();
 8000fd8:	f004 fa9a 	bl	8005510 <HAL_FLASH_Lock>

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000a6c 	.word	0x20000a6c

08000fe8 <WriteDeviceAddressOffset>:
void WriteDeviceAddressOffset(char* data, int size, int offset) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <WriteDeviceAddressOffset+0x5c>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
	HAL_FLASH_Unlock();
 8000ffc:	f004 fa66 	bl	80054cc <HAL_FLASH_Unlock>
	for (int i = 0; i<size; i++){
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e012      	b.n	800102c <WriteDeviceAddressOffset+0x44>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address+i, data[i]) != HAL_OK){
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	18d1      	adds	r1, r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f004 f9fa 	bl	8005414 <HAL_FLASH_Program>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d107      	bne.n	8001036 <WriteDeviceAddressOffset+0x4e>
	for (int i = 0; i<size; i++){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbe8      	blt.n	8001006 <WriteDeviceAddressOffset+0x1e>
 8001034:	e000      	b.n	8001038 <WriteDeviceAddressOffset+0x50>
FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError();
			 */
			//Error_Handler();
			// int error = HAL_FLASH_GetError();

			break;
 8001036:	bf00      	nop
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001038:	f004 fa6a 	bl	8005510 <HAL_FLASH_Lock>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	080c0000 	.word	0x080c0000

08001048 <ReadDeviceAddressOffset>:
void ReadDeviceAddressOffset(char* Dout, int size, int offset)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
	uint32_t Address = CONFIGURATION_START_ADDR+offset;
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ReadDeviceAddressOffset+0x4c>)
 8001058:	4413      	add	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

	for (int i = 0; i<size; i++){
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00c      	b.n	800107c <ReadDeviceAddressOffset+0x34>
		Dout[i] = *(__IO char*)(Address+i);
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4413      	add	r3, r2
 8001068:	4619      	mov	r1, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	780a      	ldrb	r2, [r1, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<size; i++){
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbee      	blt.n	8001062 <ReadDeviceAddressOffset+0x1a>
	}
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	080c0000 	.word	0x080c0000

08001098 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000a7c 	.word	0x20000a7c
 80010c8:	20000ad0 	.word	0x20000ad0

080010cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010f4:	e000      	b.n	80010f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f9      	beq.n	80010f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001102:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// это же дебаг
int _write(int file, char *ptr,int len){
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int i=0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffc7 	bl	80010cc <ITM_SendChar>
	for(i=0;i<len;i++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x16>
	return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	b0c0      	sub	sp, #256	; 0x100
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	memset(gps.day,0,sizeof(gps));
 800115e:	221b      	movs	r2, #27
 8001160:	2100      	movs	r1, #0
 8001162:	489b      	ldr	r0, [pc, #620]	; (80013d0 <main+0x278>)
 8001164:	f01a f93c 	bl	801b3e0 <memset>
	// ZDA-38;RMC-68



	 //включение ZDA
	 char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x0B, 0x6B};
 8001168:	4b9a      	ldr	r3, [pc, #616]	; (80013d4 <main+0x27c>)
 800116a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800116e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};
 8001174:	4a98      	ldr	r2, [pc, #608]	; (80013d8 <main+0x280>)
 8001176:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800117a:	ca07      	ldmia	r2, {r0, r1, r2}
 800117c:	c303      	stmia	r3!, {r0, r1}
 800117e:	801a      	strh	r2, [r3, #0]
	 //отключение ZDA
	 //char MESZDA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5B};
	 //char CONZDA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x08, 0x01, 0x19};

	 //отключение остального
	 char MESGGA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x23};
 8001180:	4b96      	ldr	r3, [pc, #600]	; (80013dc <main+0x284>)
 8001182:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8001186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGGA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x00, 0xF9, 0x11};
 800118c:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <main+0x288>)
 800118e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001192:	ca07      	ldmia	r2, {r0, r1, r2}
 8001194:	c303      	stmia	r3!, {r0, r1}
 8001196:	801a      	strh	r2, [r3, #0]

	 char MESGLL[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A};
 8001198:	4b92      	ldr	r3, [pc, #584]	; (80013e4 <main+0x28c>)
 800119a:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGLL[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x01, 0xFA, 0x12};
 80011a4:	4a90      	ldr	r2, [pc, #576]	; (80013e8 <main+0x290>)
 80011a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]

	 char MESGSA[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31};
 80011b0:	4b8e      	ldr	r3, [pc, #568]	; (80013ec <main+0x294>)
 80011b2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80011b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSA[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x02, 0xFB, 0x13};
 80011bc:	4a8c      	ldr	r2, [pc, #560]	; (80013f0 <main+0x298>)
 80011be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	c303      	stmia	r3!, {r0, r1}
 80011c6:	801a      	strh	r2, [r3, #0]

	 char MESGSV[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38};
 80011c8:	4b8a      	ldr	r3, [pc, #552]	; (80013f4 <main+0x29c>)
 80011ca:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80011ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONGSV[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x03, 0xFC, 0x14};
 80011d4:	4a88      	ldr	r2, [pc, #544]	; (80013f8 <main+0x2a0>)
 80011d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011da:	ca07      	ldmia	r2, {r0, r1, r2}
 80011dc:	c303      	stmia	r3!, {r0, r1}
 80011de:	801a      	strh	r2, [r3, #0]

	 char MESVTG[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46};
 80011e0:	4b86      	ldr	r3, [pc, #536]	; (80013fc <main+0x2a4>)
 80011e2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONVTG[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x05, 0xFE, 0x16};
 80011ec:	4a84      	ldr	r2, [pc, #528]	; (8001400 <main+0x2a8>)
 80011ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	c303      	stmia	r3!, {r0, r1}
 80011f6:	801a      	strh	r2, [r3, #0]
	 //отключение RMC на всякий
	 //char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3F};
	 //char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};

	 //включение RMC
	 char MESRMC[]={0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF0, 0x04, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x07, 0x4F};
 80011f8:	4b82      	ldr	r3, [pc, #520]	; (8001404 <main+0x2ac>)
 80011fa:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80011fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 char CONRMC[]={0xB5, 0x62, 0x06, 0x01, 0x02, 0x00, 0xF0, 0x04, 0xFD, 0x15};
 8001204:	4a80      	ldr	r2, [pc, #512]	; (8001408 <main+0x2b0>)
 8001206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800120a:	ca07      	ldmia	r2, {r0, r1, r2}
 800120c:	c303      	stmia	r3!, {r0, r1}
 800120e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f002 ff4b 	bl	80040aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f906 	bl	8001424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //MX_LWIP_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 fa28 	bl	800166c <MX_GPIO_Init>
  MX_UART7_Init();
 800121c:	f000 f9f6 	bl	800160c <MX_UART7_Init>
  MX_RTC_Init();
 8001220:	f000 f998 	bl	8001554 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 8001224:	f241 3088 	movw	r0, #5000	; 0x1388
 8001228:	f002 ff6c 	bl	8004104 <HAL_Delay>
  //ON ZDA
  HAL_UART_Transmit(&huart7,(uint8_t*) MESZDA, 16, 1000);
 800122c:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	2210      	movs	r2, #16
 8001236:	4875      	ldr	r0, [pc, #468]	; (800140c <main+0x2b4>)
 8001238:	f006 fce0 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 800123c:	2064      	movs	r0, #100	; 0x64
 800123e:	f002 ff61 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONZDA, 10, 1000);
 8001242:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	220a      	movs	r2, #10
 800124c:	486f      	ldr	r0, [pc, #444]	; (800140c <main+0x2b4>)
 800124e:	f006 fcd5 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001252:	2064      	movs	r0, #100	; 0x64
 8001254:	f002 ff56 	bl	8004104 <HAL_Delay>

  // OFF protokol
  HAL_UART_Transmit(&huart7,(uint8_t*) MESGGA, 16, 1000);
 8001258:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	2210      	movs	r2, #16
 8001262:	486a      	ldr	r0, [pc, #424]	; (800140c <main+0x2b4>)
 8001264:	f006 fcca 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f002 ff4b 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGGA, 10, 1000);
 800126e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	220a      	movs	r2, #10
 8001278:	4864      	ldr	r0, [pc, #400]	; (800140c <main+0x2b4>)
 800127a:	f006 fcbf 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f002 ff40 	bl	8004104 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGLL, 16, 1000);
 8001284:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	2210      	movs	r2, #16
 800128e:	485f      	ldr	r0, [pc, #380]	; (800140c <main+0x2b4>)
 8001290:	f006 fcb4 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f002 ff35 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGLL, 10, 1000);
 800129a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	220a      	movs	r2, #10
 80012a4:	4859      	ldr	r0, [pc, #356]	; (800140c <main+0x2b4>)
 80012a6:	f006 fca9 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f002 ff2a 	bl	8004104 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSA, 16, 1000);
 80012b0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	2210      	movs	r2, #16
 80012ba:	4854      	ldr	r0, [pc, #336]	; (800140c <main+0x2b4>)
 80012bc:	f006 fc9e 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 80012c0:	2064      	movs	r0, #100	; 0x64
 80012c2:	f002 ff1f 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSA, 10, 1000);
 80012c6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	220a      	movs	r2, #10
 80012d0:	484e      	ldr	r0, [pc, #312]	; (800140c <main+0x2b4>)
 80012d2:	f006 fc93 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f002 ff14 	bl	8004104 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESGSV, 16, 1000);
 80012dc:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	2210      	movs	r2, #16
 80012e6:	4849      	ldr	r0, [pc, #292]	; (800140c <main+0x2b4>)
 80012e8:	f006 fc88 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f002 ff09 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONGSV, 10, 1000);
 80012f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	220a      	movs	r2, #10
 80012fc:	4843      	ldr	r0, [pc, #268]	; (800140c <main+0x2b4>)
 80012fe:	f006 fc7d 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001302:	2064      	movs	r0, #100	; 0x64
 8001304:	f002 fefe 	bl	8004104 <HAL_Delay>

  HAL_UART_Transmit(&huart7,(uint8_t*) MESVTG, 16, 1000);
 8001308:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2210      	movs	r2, #16
 8001312:	483e      	ldr	r0, [pc, #248]	; (800140c <main+0x2b4>)
 8001314:	f006 fc72 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	; 0x64
 800131a:	f002 fef3 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONVTG, 10, 1000);
 800131e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	220a      	movs	r2, #10
 8001328:	4838      	ldr	r0, [pc, #224]	; (800140c <main+0x2b4>)
 800132a:	f006 fc67 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f002 fee8 	bl	8004104 <HAL_Delay>

  //отключение и включение RMC на всякий
  HAL_UART_Transmit(&huart7,(uint8_t*) MESRMC, 16, 1000);
 8001334:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	2210      	movs	r2, #16
 800133e:	4833      	ldr	r0, [pc, #204]	; (800140c <main+0x2b4>)
 8001340:	f006 fc5c 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f002 fedd 	bl	8004104 <HAL_Delay>
  HAL_UART_Transmit(&huart7,(uint8_t*) CONRMC, 10, 1000);
 800134a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	220a      	movs	r2, #10
 8001354:	482d      	ldr	r0, [pc, #180]	; (800140c <main+0x2b4>)
 8001356:	f006 fc51 	bl	8007bfc <HAL_UART_Transmit>
  HAL_Delay(100);
 800135a:	2064      	movs	r0, #100	; 0x64
 800135c:	f002 fed2 	bl	8004104 <HAL_Delay>

  //start the web server
  int offset =0;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 ReadDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8001366:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800136a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800136e:	4828      	ldr	r0, [pc, #160]	; (8001410 <main+0x2b8>)
 8001370:	f7ff fe6a 	bl	8001048 <ReadDeviceAddressOffset>
 offset+=sizeof(user_info);
 8001374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001378:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800137c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <main+0x2bc>)
 8001382:	f107 041c 	add.w	r4, r7, #28
 8001386:	461d      	mov	r5, r3
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f008 fbf0 	bl	8009b80 <osThreadCreate>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <main+0x2c0>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, tcpecho_thread, osPriorityIdle, 0, 128);
 80013a6:	463b      	mov	r3, r7
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <main+0x2c4>)
 80013aa:	461c      	mov	r4, r3
 80013ac:	4615      	mov	r5, r2
 80013ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80013ba:	463b      	mov	r3, r7
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f008 fbde 	bl	8009b80 <osThreadCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a16      	ldr	r2, [pc, #88]	; (8001420 <main+0x2c8>)
 80013c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013ca:	f008 fbc2 	bl	8009b52 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <main+0x276>
 80013d0:	2000509c 	.word	0x2000509c
 80013d4:	080245a8 	.word	0x080245a8
 80013d8:	080245b8 	.word	0x080245b8
 80013dc:	080245c4 	.word	0x080245c4
 80013e0:	080245d4 	.word	0x080245d4
 80013e4:	080245e0 	.word	0x080245e0
 80013e8:	080245f0 	.word	0x080245f0
 80013ec:	080245fc 	.word	0x080245fc
 80013f0:	0802460c 	.word	0x0802460c
 80013f4:	08024618 	.word	0x08024618
 80013f8:	08024628 	.word	0x08024628
 80013fc:	08024634 	.word	0x08024634
 8001400:	08024644 	.word	0x08024644
 8001404:	08024650 	.word	0x08024650
 8001408:	08024660 	.word	0x08024660
 800140c:	200051e0 	.word	0x200051e0
 8001410:	200050b8 	.word	0x200050b8
 8001414:	0802466c 	.word	0x0802466c
 8001418:	200051dc 	.word	0x200051dc
 800141c:	08024688 	.word	0x08024688
 8001420:	20005268 	.word	0x20005268

08001424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0b4      	sub	sp, #208	; 0xd0
 8001428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800142e:	2230      	movs	r2, #48	; 0x30
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f019 ffd4 	bl	801b3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001438:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2284      	movs	r2, #132	; 0x84
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f019 ffc5 	bl	801b3e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001456:	f004 fc71 	bl	8005d3c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b3c      	ldr	r3, [pc, #240]	; (800154c <SystemClock_Config+0x128>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a3b      	ldr	r2, [pc, #236]	; (800154c <SystemClock_Config+0x128>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <SystemClock_Config+0x128>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <SystemClock_Config+0x12c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a36      	ldr	r2, [pc, #216]	; (8001550 <SystemClock_Config+0x12c>)
 8001478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <SystemClock_Config+0x12c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800148a:	2309      	movs	r3, #9
 800148c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014ac:	2319      	movs	r3, #25
 80014ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80014b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80014b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014c0:	2309      	movs	r3, #9
 80014c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 fc96 	bl	8005dfc <HAL_RCC_OscConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80014d6:	f001 fa93 	bl	8002a00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014da:	f004 fc3f 	bl	8005d5c <HAL_PWREx_EnableOverDrive>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014e4:	f001 fa8c 	bl	8002a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2302      	movs	r3, #2
 80014f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800150a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800150e:	2106      	movs	r1, #6
 8001510:	4618      	mov	r0, r3
 8001512:	f004 ff17 	bl	8006344 <HAL_RCC_ClockConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800151c:	f001 fa70 	bl	8002a00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART7;
 8001520:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001524:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f005 f90d 	bl	8006754 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001540:	f001 fa5e 	bl	8002a00 <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	37d0      	adds	r7, #208	; 0xd0
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40007000 	.word	0x40007000

08001554 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <MX_RTC_Init+0xb0>)
 8001572:	4a25      	ldr	r2, [pc, #148]	; (8001608 <MX_RTC_Init+0xb4>)
 8001574:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <MX_RTC_Init+0xb0>)
 8001578:	2200      	movs	r2, #0
 800157a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_RTC_Init+0xb0>)
 800157e:	227f      	movs	r2, #127	; 0x7f
 8001580:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <MX_RTC_Init+0xb0>)
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_RTC_Init+0xb0>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_RTC_Init+0xb0>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_RTC_Init+0xb0>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800159a:	481a      	ldr	r0, [pc, #104]	; (8001604 <MX_RTC_Init+0xb0>)
 800159c:	f005 fcca 	bl	8006f34 <HAL_RTC_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80015a6:	f001 fa2b 	bl	8002a00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 80015aa:	2317      	movs	r3, #23
 80015ac:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 59;
 80015ae:	233b      	movs	r3, #59	; 0x3b
 80015b0:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	480f      	ldr	r0, [pc, #60]	; (8001604 <MX_RTC_Init+0xb0>)
 80015c8:	f005 fd46 	bl	8007058 <HAL_RTC_SetTime>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80015d2:	f001 fa15 	bl	8002a00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80015d6:	2307      	movs	r3, #7
 80015d8:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_DECEMBER;
 80015da:	2312      	movs	r3, #18
 80015dc:	717b      	strb	r3, [r7, #5]
  sDate.Date = 31;
 80015de:	231f      	movs	r3, #31
 80015e0:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_RTC_Init+0xb0>)
 80015ee:	f005 fe4f 	bl	8007290 <HAL_RTC_SetDate>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80015f8:	f001 fa02 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000526c 	.word	0x2000526c
 8001608:	40002800 	.word	0x40002800

0800160c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_UART7_Init+0x58>)
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <MX_UART7_Init+0x5c>)
 8001614:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_UART7_Init+0x58>)
 8001618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800161c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_UART7_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_UART7_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_UART7_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_UART7_Init+0x58>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_UART7_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_UART7_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_UART7_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_UART7_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_UART7_Init+0x58>)
 8001650:	f006 fa86 	bl	8007b60 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800165a:	f001 f9d1 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200051e0 	.word	0x200051e0
 8001668:	40007800 	.word	0x40007800

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b090      	sub	sp, #64	; 0x40
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001682:	4bae      	ldr	r3, [pc, #696]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4aad      	ldr	r2, [pc, #692]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001688:	f043 0310 	orr.w	r3, r3, #16
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4bab      	ldr	r3, [pc, #684]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169a:	4ba8      	ldr	r3, [pc, #672]	; (800193c <MX_GPIO_Init+0x2d0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4aa7      	ldr	r2, [pc, #668]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4ba5      	ldr	r3, [pc, #660]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4ba2      	ldr	r3, [pc, #648]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4aa1      	ldr	r2, [pc, #644]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b9f      	ldr	r3, [pc, #636]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	4b9c      	ldr	r3, [pc, #624]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a9b      	ldr	r2, [pc, #620]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b99      	ldr	r3, [pc, #612]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b96      	ldr	r3, [pc, #600]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a95      	ldr	r2, [pc, #596]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b93      	ldr	r3, [pc, #588]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b90      	ldr	r3, [pc, #576]	; (800193c <MX_GPIO_Init+0x2d0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a8f      	ldr	r2, [pc, #572]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b8d      	ldr	r3, [pc, #564]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001712:	4b8a      	ldr	r3, [pc, #552]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a89      	ldr	r2, [pc, #548]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b87      	ldr	r3, [pc, #540]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800172a:	4b84      	ldr	r3, [pc, #528]	; (800193c <MX_GPIO_Init+0x2d0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a83      	ldr	r2, [pc, #524]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b81      	ldr	r3, [pc, #516]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001742:	4b7e      	ldr	r3, [pc, #504]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a7d      	ldr	r2, [pc, #500]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b7b      	ldr	r3, [pc, #492]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175a:	4b78      	ldr	r3, [pc, #480]	; (800193c <MX_GPIO_Init+0x2d0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a77      	ldr	r2, [pc, #476]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b75      	ldr	r3, [pc, #468]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	4b72      	ldr	r3, [pc, #456]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a71      	ldr	r2, [pc, #452]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <MX_GPIO_Init+0x2d0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2120      	movs	r1, #32
 800178e:	486c      	ldr	r0, [pc, #432]	; (8001940 <MX_GPIO_Init+0x2d4>)
 8001790:	f004 faa0 	bl	8005cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|Led1_Pin, GPIO_PIN_RESET);
 8001794:	2200      	movs	r2, #0
 8001796:	210f      	movs	r1, #15
 8001798:	486a      	ldr	r0, [pc, #424]	; (8001944 <MX_GPIO_Init+0x2d8>)
 800179a:	f004 fa9b 	bl	8005cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	2108      	movs	r1, #8
 80017a2:	4869      	ldr	r0, [pc, #420]	; (8001948 <MX_GPIO_Init+0x2dc>)
 80017a4:	f004 fa96 	bl	8005cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ae:	4865      	ldr	r0, [pc, #404]	; (8001944 <MX_GPIO_Init+0x2d8>)
 80017b0:	f004 fa90 	bl	8005cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ba:	4864      	ldr	r0, [pc, #400]	; (800194c <MX_GPIO_Init+0x2e0>)
 80017bc:	f004 fa8a 	bl	8005cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	21c8      	movs	r1, #200	; 0xc8
 80017c4:	4862      	ldr	r0, [pc, #392]	; (8001950 <MX_GPIO_Init+0x2e4>)
 80017c6:	f004 fa85 	bl	8005cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80017ca:	2310      	movs	r3, #16
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017da:	230e      	movs	r3, #14
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	485b      	ldr	r0, [pc, #364]	; (8001954 <MX_GPIO_Init+0x2e8>)
 80017e6:	f004 f8b1 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017ea:	2308      	movs	r3, #8
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4855      	ldr	r0, [pc, #340]	; (8001954 <MX_GPIO_Init+0x2e8>)
 80017fe:	f004 f8a5 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001802:	2304      	movs	r3, #4
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001812:	2309      	movs	r3, #9
 8001814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	484d      	ldr	r0, [pc, #308]	; (8001954 <MX_GPIO_Init+0x2e8>)
 800181e:	f004 f895 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001822:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001834:	230c      	movs	r3, #12
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4845      	ldr	r0, [pc, #276]	; (8001954 <MX_GPIO_Init+0x2e8>)
 8001840:	f004 f884 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184e:	2301      	movs	r3, #1
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001856:	2304      	movs	r3, #4
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185e:	4619      	mov	r1, r3
 8001860:	483d      	ldr	r0, [pc, #244]	; (8001958 <MX_GPIO_Init+0x2ec>)
 8001862:	f004 f873 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001866:	f643 4323 	movw	r3, #15395	; 0x3c23
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001878:	230a      	movs	r3, #10
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	4619      	mov	r1, r3
 8001882:	4835      	ldr	r0, [pc, #212]	; (8001958 <MX_GPIO_Init+0x2ec>)
 8001884:	f004 f862 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001888:	2310      	movs	r3, #16
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001898:	2302      	movs	r3, #2
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a0:	4619      	mov	r1, r3
 80018a2:	482d      	ldr	r0, [pc, #180]	; (8001958 <MX_GPIO_Init+0x2ec>)
 80018a4:	f004 f852 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80018b8:	2308      	movs	r3, #8
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	481f      	ldr	r0, [pc, #124]	; (8001940 <MX_GPIO_Init+0x2d4>)
 80018c4:	f004 f842 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80018c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018da:	230c      	movs	r3, #12
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e2:	4619      	mov	r1, r3
 80018e4:	481d      	ldr	r0, [pc, #116]	; (800195c <MX_GPIO_Init+0x2f0>)
 80018e6:	f004 f831 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80018ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fc:	2301      	movs	r3, #1
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <MX_GPIO_Init+0x2f4>)
 8001908:	f004 f820 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800191c:	230d      	movs	r3, #13
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <MX_GPIO_Init+0x2e8>)
 8001928:	f004 f810 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
 8001938:	e014      	b.n	8001964 <MX_GPIO_Init+0x2f8>
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40022000 	.word	0x40022000
 8001948:	40022800 	.word	0x40022800
 800194c:	40021c00 	.word	0x40021c00
 8001950:	40021800 	.word	0x40021800
 8001954:	40021000 	.word	0x40021000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001968:	2307      	movs	r3, #7
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	48bd      	ldr	r0, [pc, #756]	; (8001c68 <MX_GPIO_Init+0x5fc>)
 8001974:	f003 ffea 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001988:	230a      	movs	r3, #10
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001990:	4619      	mov	r1, r3
 8001992:	48b5      	ldr	r0, [pc, #724]	; (8001c68 <MX_GPIO_Init+0x5fc>)
 8001994:	f003 ffda 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001998:	f248 1333 	movw	r3, #33075	; 0x8133
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019aa:	230c      	movs	r3, #12
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	48ad      	ldr	r0, [pc, #692]	; (8001c6c <MX_GPIO_Init+0x600>)
 80019b6:	f003 ffc9 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80019ba:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019cc:	230e      	movs	r3, #14
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	48a6      	ldr	r0, [pc, #664]	; (8001c70 <MX_GPIO_Init+0x604>)
 80019d8:	f003 ffb8 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	4619      	mov	r1, r3
 80019f0:	489f      	ldr	r0, [pc, #636]	; (8001c70 <MX_GPIO_Init+0x604>)
 80019f2:	f003 ffab 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	489a      	ldr	r0, [pc, #616]	; (8001c74 <MX_GPIO_Init+0x608>)
 8001a0c:	f003 ff9e 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001a10:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a22:	230c      	movs	r3, #12
 8001a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4891      	ldr	r0, [pc, #580]	; (8001c74 <MX_GPIO_Init+0x608>)
 8001a2e:	f003 ff8d 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001a32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a44:	230a      	movs	r3, #10
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	488a      	ldr	r0, [pc, #552]	; (8001c78 <MX_GPIO_Init+0x60c>)
 8001a50:	f003 ff7c 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001a54:	23f0      	movs	r3, #240	; 0xf0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001a64:	230a      	movs	r3, #10
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4883      	ldr	r0, [pc, #524]	; (8001c7c <MX_GPIO_Init+0x610>)
 8001a70:	f003 ff6c 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001a74:	23f7      	movs	r3, #247	; 0xf7
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a84:	230e      	movs	r3, #14
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	487c      	ldr	r0, [pc, #496]	; (8001c80 <MX_GPIO_Init+0x614>)
 8001a90:	f003 ff5c 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001aa6:	2309      	movs	r3, #9
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	486e      	ldr	r0, [pc, #440]	; (8001c6c <MX_GPIO_Init+0x600>)
 8001ab2:	f003 ff4b 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ac8:	230a      	movs	r3, #10
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4866      	ldr	r0, [pc, #408]	; (8001c6c <MX_GPIO_Init+0x600>)
 8001ad4:	f003 ff3a 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4861      	ldr	r0, [pc, #388]	; (8001c74 <MX_GPIO_Init+0x608>)
 8001af0:	f003 ff2c 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001af4:	2308      	movs	r3, #8
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b04:	230d      	movs	r3, #13
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4859      	ldr	r0, [pc, #356]	; (8001c74 <MX_GPIO_Init+0x608>)
 8001b10:	f003 ff1c 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin Led_Pin LCD_DISP_Pin
                           Led1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|Led_Pin|LCD_DISP_Pin
 8001b14:	f241 030f 	movw	r3, #4111	; 0x100f
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |Led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4853      	ldr	r0, [pc, #332]	; (8001c7c <MX_GPIO_Init+0x610>)
 8001b2e:	f003 ff0d 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b44:	4619      	mov	r1, r3
 8001b46:	484f      	ldr	r0, [pc, #316]	; (8001c84 <MX_GPIO_Init+0x618>)
 8001b48:	f003 ff00 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001b4c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b5e:	230c      	movs	r3, #12
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	4619      	mov	r1, r3
 8001b68:	4847      	ldr	r0, [pc, #284]	; (8001c88 <MX_GPIO_Init+0x61c>)
 8001b6a:	f003 feef 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001b6e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b80:	230e      	movs	r3, #14
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	483c      	ldr	r0, [pc, #240]	; (8001c7c <MX_GPIO_Init+0x610>)
 8001b8c:	f003 fede 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b90:	2308      	movs	r3, #8
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4836      	ldr	r0, [pc, #216]	; (8001c80 <MX_GPIO_Init+0x614>)
 8001ba8:	f003 fed0 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001bbe:	230d      	movs	r3, #13
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4828      	ldr	r0, [pc, #160]	; (8001c6c <MX_GPIO_Init+0x600>)
 8001bca:	f003 febf 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bce:	2310      	movs	r3, #16
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	4824      	ldr	r0, [pc, #144]	; (8001c74 <MX_GPIO_Init+0x608>)
 8001be2:	f003 feb3 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001be6:	2304      	movs	r3, #4
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bf6:	230c      	movs	r3, #12
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	481c      	ldr	r0, [pc, #112]	; (8001c74 <MX_GPIO_Init+0x608>)
 8001c02:	f003 fea3 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001c06:	f248 0304 	movw	r3, #32772	; 0x8004
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	481c      	ldr	r0, [pc, #112]	; (8001c8c <MX_GPIO_Init+0x620>)
 8001c1c:	f003 fe96 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c36:	4619      	mov	r1, r3
 8001c38:	4814      	ldr	r0, [pc, #80]	; (8001c8c <MX_GPIO_Init+0x620>)
 8001c3a:	f003 fe87 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c3e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c50:	230d      	movs	r3, #13
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_GPIO_Init+0x620>)
 8001c5c:	f003 fe76 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	e014      	b.n	8001c90 <MX_GPIO_Init+0x624>
 8001c66:	bf00      	nop
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40021800 	.word	0x40021800
 8001c70:	40022400 	.word	0x40022400
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40022800 	.word	0x40022800
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40021400 	.word	0x40021400
 8001c8c:	40021c00 	.word	0x40021c00
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4894      	ldr	r0, [pc, #592]	; (8001efc <MX_GPIO_Init+0x890>)
 8001caa:	f003 fe4f 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001cae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	488f      	ldr	r0, [pc, #572]	; (8001f00 <MX_GPIO_Init+0x894>)
 8001cc4:	f003 fe42 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4885      	ldr	r0, [pc, #532]	; (8001efc <MX_GPIO_Init+0x890>)
 8001ce6:	f003 fe31 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cf0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	487f      	ldr	r0, [pc, #508]	; (8001f00 <MX_GPIO_Init+0x894>)
 8001d02:	f003 fe23 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d16:	2308      	movs	r3, #8
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4878      	ldr	r0, [pc, #480]	; (8001f04 <MX_GPIO_Init+0x898>)
 8001d22:	f003 fe13 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d26:	2310      	movs	r3, #16
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d36:	230a      	movs	r3, #10
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4871      	ldr	r0, [pc, #452]	; (8001f08 <MX_GPIO_Init+0x89c>)
 8001d42:	f003 fe03 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001d46:	2328      	movs	r3, #40	; 0x28
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d56:	230c      	movs	r3, #12
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4869      	ldr	r0, [pc, #420]	; (8001f08 <MX_GPIO_Init+0x89c>)
 8001d62:	f003 fdf3 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001d66:	23c8      	movs	r3, #200	; 0xc8
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4863      	ldr	r0, [pc, #396]	; (8001f0c <MX_GPIO_Init+0x8a0>)
 8001d7e:	f003 fde5 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001d82:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d94:	4619      	mov	r1, r3
 8001d96:	485e      	ldr	r0, [pc, #376]	; (8001f10 <MX_GPIO_Init+0x8a4>)
 8001d98:	f003 fdd8 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dac:	230c      	movs	r3, #12
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4853      	ldr	r0, [pc, #332]	; (8001f04 <MX_GPIO_Init+0x898>)
 8001db8:	f003 fdc8 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	484b      	ldr	r0, [pc, #300]	; (8001f04 <MX_GPIO_Init+0x898>)
 8001dd8:	f003 fdb8 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dec:	2309      	movs	r3, #9
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	4847      	ldr	r0, [pc, #284]	; (8001f14 <MX_GPIO_Init+0x8a8>)
 8001df8:	f003 fda8 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001dfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e0e:	2309      	movs	r3, #9
 8001e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e16:	4619      	mov	r1, r3
 8001e18:	483f      	ldr	r0, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x8ac>)
 8001e1a:	f003 fd97 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4836      	ldr	r0, [pc, #216]	; (8001f0c <MX_GPIO_Init+0x8a0>)
 8001e32:	f003 fd8b 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001e36:	2301      	movs	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e46:	4619      	mov	r1, r3
 8001e48:	482c      	ldr	r0, [pc, #176]	; (8001efc <MX_GPIO_Init+0x890>)
 8001e4a:	f003 fd7f 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001e4e:	2350      	movs	r3, #80	; 0x50
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e5e:	230d      	movs	r3, #13
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4824      	ldr	r0, [pc, #144]	; (8001efc <MX_GPIO_Init+0x890>)
 8001e6a:	f003 fd6f 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e80:	2304      	movs	r3, #4
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <MX_GPIO_Init+0x89c>)
 8001e8c:	f003 fd5e 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e90:	2328      	movs	r3, #40	; 0x28
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ea0:	230a      	movs	r3, #10
 8001ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <MX_GPIO_Init+0x890>)
 8001eac:	f003 fd4e 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001eb0:	2340      	movs	r3, #64	; 0x40
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ec0:	2309      	movs	r3, #9
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480f      	ldr	r0, [pc, #60]	; (8001f08 <MX_GPIO_Init+0x89c>)
 8001ecc:	f003 fd3e 	bl	800594c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001ed0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eea:	4619      	mov	r1, r3
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <MX_GPIO_Init+0x8a8>)
 8001eee:	f003 fd2d 	bl	800594c <HAL_GPIO_Init>

}
 8001ef2:	bf00      	nop
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40021c00 	.word	0x40021c00
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020c00 	.word	0x40020c00

08001f1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
	if(huart == &huart7) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a62      	ldr	r2, [pc, #392]	; (80020c8 <HAL_UART_RxCpltCallback+0x1ac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f040 82b4 	bne.w	80024ac <HAL_UART_RxCpltCallback+0x590>
		//$ message start
		if(buff[0]=='$'){
 8001f44:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_UART_RxCpltCallback+0x1b0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b24      	cmp	r3, #36	; 0x24
 8001f4a:	d106      	bne.n	8001f5a <HAL_UART_RxCpltCallback+0x3e>
			count=0;
 8001f4c:	4b60      	ldr	r3, [pc, #384]	; (80020d0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
			zpt=0;
 8001f52:	4b60      	ldr	r3, [pc, #384]	; (80020d4 <HAL_UART_RxCpltCallback+0x1b8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e00f      	b.n	8001f7a <HAL_UART_RxCpltCallback+0x5e>
		}
		//Message error
		else if (count==1&&buff[0]!='G'){
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10b      	bne.n	8001f7a <HAL_UART_RxCpltCallback+0x5e>
 8001f62:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <HAL_UART_RxCpltCallback+0x1b0>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b47      	cmp	r3, #71	; 0x47
 8001f68:	d007      	beq.n	8001f7a <HAL_UART_RxCpltCallback+0x5e>
			count=0;
 8001f6a:	4b59      	ldr	r3, [pc, #356]	; (80020d0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
			ERRORS++;
 8001f70:	4b59      	ldr	r3, [pc, #356]	; (80020d8 <HAL_UART_RxCpltCallback+0x1bc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3301      	adds	r3, #1
 8001f76:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <HAL_UART_RxCpltCallback+0x1bc>)
 8001f78:	6013      	str	r3, [r2, #0]
		}


		//CRC calculation
		int res = calc_crc(buff[0],count);
 8001f7a:	4b54      	ldr	r3, [pc, #336]	; (80020cc <HAL_UART_RxCpltCallback+0x1b0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_UART_RxCpltCallback+0x1b4>)
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fb4d 	bl	8002624 <calc_crc>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
		if(res==1){
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d13e      	bne.n	8002012 <HAL_UART_RxCpltCallback+0xf6>
			//printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
			//RTC READ
			rtc_read();
 8001f94:	f000 fba2 	bl	80026dc <rtc_read>
			//printf("rtc_read=%llu\t",rtc_read());
			//comparison RTC&CRC
			//Time_calc.tm_wday = 1;//atoi(gps.);
			Time_calc.tm_mon = atoi(gps.month)-1;//-1 do January==0 month
 8001f98:	4850      	ldr	r0, [pc, #320]	; (80020dc <HAL_UART_RxCpltCallback+0x1c0>)
 8001f9a:	f019 f8cd 	bl	801b138 <atoi>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4a4f      	ldr	r2, [pc, #316]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001fa4:	6113      	str	r3, [r2, #16]
			Time_calc.tm_mday = atoi(gps.day);
 8001fa6:	484f      	ldr	r0, [pc, #316]	; (80020e4 <HAL_UART_RxCpltCallback+0x1c8>)
 8001fa8:	f019 f8c6 	bl	801b138 <atoi>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001fb0:	60d3      	str	r3, [r2, #12]
			if(year_str[0]=='0'&&year_str[1]=='0'){
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b30      	cmp	r3, #48	; 0x30
 8001fb8:	d108      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0xb0>
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	2b30      	cmp	r3, #48	; 0x30
 8001fc0:	d104      	bne.n	8001fcc <HAL_UART_RxCpltCallback+0xb0>
				century=century+100;//atoi(gps.year)
 8001fc2:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_UART_RxCpltCallback+0x1d0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3364      	adds	r3, #100	; 0x64
 8001fc8:	4a48      	ldr	r2, [pc, #288]	; (80020ec <HAL_UART_RxCpltCallback+0x1d0>)
 8001fca:	6013      	str	r3, [r2, #0]
			}
			Time_calc.tm_year = atoi(year_str) + century;
 8001fcc:	4846      	ldr	r0, [pc, #280]	; (80020e8 <HAL_UART_RxCpltCallback+0x1cc>)
 8001fce:	f019 f8b3 	bl	801b138 <atoi>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	4b45      	ldr	r3, [pc, #276]	; (80020ec <HAL_UART_RxCpltCallback+0x1d0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001fdc:	6153      	str	r3, [r2, #20]
			Time_calc.tm_hour = atoi(gps.hours);
 8001fde:	4844      	ldr	r0, [pc, #272]	; (80020f0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001fe0:	f019 f8aa 	bl	801b138 <atoi>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001fe8:	6093      	str	r3, [r2, #8]
			Time_calc.tm_min = atoi(gps.minuttes);
 8001fea:	4842      	ldr	r0, [pc, #264]	; (80020f4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001fec:	f019 f8a4 	bl	801b138 <atoi>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8001ff4:	6053      	str	r3, [r2, #4]
			Time_calc.tm_sec = atoi(gps.seconds);
 8001ff6:	4840      	ldr	r0, [pc, #256]	; (80020f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ff8:	f019 f89e 	bl	801b138 <atoi>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a38      	ldr	r2, [pc, #224]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8002000:	6013      	str	r3, [r2, #0]
			gps_unix = mktime(&Time_calc);
 8002002:	4837      	ldr	r0, [pc, #220]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8002004:	f019 facc 	bl	801b5a0 <mktime>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	493b      	ldr	r1, [pc, #236]	; (80020fc <HAL_UART_RxCpltCallback+0x1e0>)
 800200e:	e9c1 2300 	strd	r2, r3, [r1]
			//printf("tm_year=%d\t tm_mon=%d\t tm_mday=%d\t tm_hour=%d\t tm_min=%d\t tm_sec=%d\n",Time_calc.tm_year,Time_calc.tm_mon,Time_calc.tm_mday,Time_calc.tm_hour,Time_calc.tm_min,Time_calc.tm_sec);
			//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		}
		if(res==1&&gps_unix!=rtc_read()){
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	2b01      	cmp	r3, #1
 8002016:	d14a      	bne.n	80020ae <HAL_UART_RxCpltCallback+0x192>
 8002018:	f000 fb60 	bl	80026dc <rtc_read>
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_UART_RxCpltCallback+0x1e0>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	4299      	cmp	r1, r3
 8002024:	bf08      	it	eq
 8002026:	4290      	cmpeq	r0, r2
 8002028:	d041      	beq.n	80020ae <HAL_UART_RxCpltCallback+0x192>

			time_ref_s=htonl(gps_unix- DIFF_SEC_1970_2036);
 800202a:	4b34      	ldr	r3, [pc, #208]	; (80020fc <HAL_UART_RxCpltCallback+0x1e0>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_UART_RxCpltCallback+0x1e4>)
 8002032:	4413      	add	r3, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f00d fd4c 	bl	800fad2 <lwip_htonl>
 800203a:	4603      	mov	r3, r0
 800203c:	4a31      	ldr	r2, [pc, #196]	; (8002104 <HAL_UART_RxCpltCallback+0x1e8>)
 800203e:	6013      	str	r3, [r2, #0]
			sTime.Hours = Time_calc.tm_hour;
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	733b      	strb	r3, [r7, #12]
			sTime.Minutes = Time_calc.tm_min;
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	737b      	strb	r3, [r7, #13]
			sTime.Seconds = Time_calc.tm_sec;
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	73bb      	strb	r3, [r7, #14]
			sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]




			if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	4828      	ldr	r0, [pc, #160]	; (8002108 <HAL_UART_RxCpltCallback+0x1ec>)
 8002066:	f004 fff7 	bl	8007058 <HAL_RTC_SetTime>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_RxCpltCallback+0x158>
			{
				Error_Handler();
 8002070:	f000 fcc6 	bl	8002a00 <Error_Handler>
			}
			sDate.Month = Time_calc.tm_mon;
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	727b      	strb	r3, [r7, #9]
			sDate.Date = Time_calc.tm_mday;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	72bb      	strb	r3, [r7, #10]
			sDate.Year = Time_calc.tm_year-century;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_UART_RxCpltCallback+0x1c4>)
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_UART_RxCpltCallback+0x1d0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	72fb      	strb	r3, [r7, #11]
			if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2200      	movs	r2, #0
 800209c:	4619      	mov	r1, r3
 800209e:	481a      	ldr	r0, [pc, #104]	; (8002108 <HAL_UART_RxCpltCallback+0x1ec>)
 80020a0:	f005 f8f6 	bl	8007290 <HAL_RTC_SetDate>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_RxCpltCallback+0x192>
			{
				Error_Handler();
 80020aa:	f000 fca9 	bl	8002a00 <Error_Handler>

		}
		//printf("rtc_read=%llu\t Time_calc=%llu\n",rtc_read(),gps_unix);

		//ZDA OR RMC
		if (count==3&&buff[0]=='Z'){
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_UART_RxCpltCallback+0x1b4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d12c      	bne.n	8002110 <HAL_UART_RxCpltCallback+0x1f4>
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_UART_RxCpltCallback+0x1b0>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b5a      	cmp	r3, #90	; 0x5a
 80020bc:	d128      	bne.n	8002110 <HAL_UART_RxCpltCallback+0x1f4>
			Tipe_Mes=1;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_UART_RxCpltCallback+0x1f0>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e02f      	b.n	8002126 <HAL_UART_RxCpltCallback+0x20a>
 80020c6:	bf00      	nop
 80020c8:	200051e0 	.word	0x200051e0
 80020cc:	20000d0c 	.word	0x20000d0c
 80020d0:	20000cf4 	.word	0x20000cf4
 80020d4:	20000ce0 	.word	0x20000ce0
 80020d8:	20000cd0 	.word	0x20000cd0
 80020dc:	2000509f 	.word	0x2000509f
 80020e0:	20005294 	.word	0x20005294
 80020e4:	2000509c 	.word	0x2000509c
 80020e8:	20000d10 	.word	0x20000d10
 80020ec:	20000008 	.word	0x20000008
 80020f0:	200050a7 	.word	0x200050a7
 80020f4:	200050aa 	.word	0x200050aa
 80020f8:	200050ad 	.word	0x200050ad
 80020fc:	20000cd8 	.word	0x20000cd8
 8002100:	83aa7e80 	.word	0x83aa7e80
 8002104:	20005290 	.word	0x20005290
 8002108:	2000526c 	.word	0x2000526c
 800210c:	20000cd4 	.word	0x20000cd4
		}
		else if(count==3&&buff[0]=='R'){
 8002110:	4b91      	ldr	r3, [pc, #580]	; (8002358 <HAL_UART_RxCpltCallback+0x43c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d106      	bne.n	8002126 <HAL_UART_RxCpltCallback+0x20a>
 8002118:	4b90      	ldr	r3, [pc, #576]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b52      	cmp	r3, #82	; 0x52
 800211e:	d102      	bne.n	8002126 <HAL_UART_RxCpltCallback+0x20a>
			Tipe_Mes=2;
 8002120:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_UART_RxCpltCallback+0x444>)
 8002122:	2202      	movs	r2, #2
 8002124:	601a      	str	r2, [r3, #0]
		}
		//If ZDA
		if(Tipe_Mes==1){
 8002126:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_UART_RxCpltCallback+0x444>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	f040 80d4 	bne.w	80022d8 <HAL_UART_RxCpltCallback+0x3bc>

			if(count==6&&buff[0]!=','){
 8002130:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_UART_RxCpltCallback+0x43c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d10b      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x234>
 8002138:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b2c      	cmp	r3, #44	; 0x2c
 800213e:	d007      	beq.n	8002150 <HAL_UART_RxCpltCallback+0x234>
				count=0;
 8002140:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_UART_RxCpltCallback+0x43c>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
				ERRORS++;
 8002146:	4b87      	ldr	r3, [pc, #540]	; (8002364 <HAL_UART_RxCpltCallback+0x448>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	4a85      	ldr	r2, [pc, #532]	; (8002364 <HAL_UART_RxCpltCallback+0x448>)
 800214e:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8002150:	4b82      	ldr	r3, [pc, #520]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b2c      	cmp	r3, #44	; 0x2c
 8002156:	d107      	bne.n	8002168 <HAL_UART_RxCpltCallback+0x24c>
				zpt++;
 8002158:	4b83      	ldr	r3, [pc, #524]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	4a82      	ldr	r2, [pc, #520]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 8002160:	6013      	str	r3, [r2, #0]
				ind=0;
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 8002168:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10e      	bne.n	800218e <HAL_UART_RxCpltCallback+0x272>
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b2c      	cmp	r3, #44	; 0x2c
 8002176:	d00a      	beq.n	800218e <HAL_UART_RxCpltCallback+0x272>
				time_buff[ind]=buff[0];
 8002178:	4b7c      	ldr	r3, [pc, #496]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a77      	ldr	r2, [pc, #476]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 800217e:	7811      	ldrb	r1, [r2, #0]
 8002180:	4a7b      	ldr	r2, [pc, #492]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002182:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002184:	4b79      	ldr	r3, [pc, #484]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a78      	ldr	r2, [pc, #480]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800218c:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d127      	bne.n	80021e6 <HAL_UART_RxCpltCallback+0x2ca>
 8002196:	4b71      	ldr	r3, [pc, #452]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b2c      	cmp	r3, #44	; 0x2c
 800219c:	d123      	bne.n	80021e6 <HAL_UART_RxCpltCallback+0x2ca>
				gps.hours[0]=time_buff[0];
 800219e:	4b74      	ldr	r3, [pc, #464]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b74      	ldr	r3, [pc, #464]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021a4:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021a8:	785a      	ldrb	r2, [r3, #1]
 80021aa:	4b72      	ldr	r3, [pc, #456]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021ac:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 80021ae:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021b0:	789a      	ldrb	r2, [r3, #2]
 80021b2:	4b70      	ldr	r3, [pc, #448]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021b4:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 80021b6:	4b6e      	ldr	r3, [pc, #440]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021b8:	78da      	ldrb	r2, [r3, #3]
 80021ba:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021bc:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021c0:	791a      	ldrb	r2, [r3, #4]
 80021c2:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021c4:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 80021c6:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021c8:	795a      	ldrb	r2, [r3, #5]
 80021ca:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021cc:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 80021ce:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021d0:	799a      	ldrb	r2, [r3, #6]
 80021d2:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021d4:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 80021d6:	4b66      	ldr	r3, [pc, #408]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021d8:	79da      	ldrb	r2, [r3, #7]
 80021da:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021dc:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 80021de:	4b64      	ldr	r3, [pc, #400]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80021e0:	7a1a      	ldrb	r2, [r3, #8]
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80021e4:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 80021e6:	4b60      	ldr	r3, [pc, #384]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d10e      	bne.n	800220c <HAL_UART_RxCpltCallback+0x2f0>
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b2c      	cmp	r3, #44	; 0x2c
 80021f4:	d00a      	beq.n	800220c <HAL_UART_RxCpltCallback+0x2f0>

				time_buff[ind]=buff[0];
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 80021fc:	7811      	ldrb	r1, [r2, #0]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002200:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800220a:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 800220c:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d10b      	bne.n	800222c <HAL_UART_RxCpltCallback+0x310>
 8002214:	4b51      	ldr	r3, [pc, #324]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b2c      	cmp	r3, #44	; 0x2c
 800221a:	d107      	bne.n	800222c <HAL_UART_RxCpltCallback+0x310>
				gps.day[0]=time_buff[0];
 800221c:	4b54      	ldr	r3, [pc, #336]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 8002222:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 8002224:	4b52      	ldr	r3, [pc, #328]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002226:	785a      	ldrb	r2, [r3, #1]
 8002228:	4b52      	ldr	r3, [pc, #328]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 800222a:	705a      	strb	r2, [r3, #1]
			}
			if(zpt==3&&buff[0]!=','){
 800222c:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d10e      	bne.n	8002252 <HAL_UART_RxCpltCallback+0x336>
 8002234:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b2c      	cmp	r3, #44	; 0x2c
 800223a:	d00a      	beq.n	8002252 <HAL_UART_RxCpltCallback+0x336>

				time_buff[ind]=buff[0];
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a46      	ldr	r2, [pc, #280]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002242:	7811      	ldrb	r1, [r2, #0]
 8002244:	4a4a      	ldr	r2, [pc, #296]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002246:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002248:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a47      	ldr	r2, [pc, #284]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002250:	6013      	str	r3, [r2, #0]
			}
			if(zpt==4&&buff[0]==','){
 8002252:	4b45      	ldr	r3, [pc, #276]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b04      	cmp	r3, #4
 8002258:	d10b      	bne.n	8002272 <HAL_UART_RxCpltCallback+0x356>
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b2c      	cmp	r3, #44	; 0x2c
 8002260:	d107      	bne.n	8002272 <HAL_UART_RxCpltCallback+0x356>
				gps.month[0]=time_buff[0];
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 8002268:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[1];
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 800226c:	785a      	ldrb	r2, [r3, #1]
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 8002270:	711a      	strb	r2, [r3, #4]
			}
			if(zpt==4&&buff[0]!=','){
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d10e      	bne.n	8002298 <HAL_UART_RxCpltCallback+0x37c>
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b2c      	cmp	r3, #44	; 0x2c
 8002280:	d00a      	beq.n	8002298 <HAL_UART_RxCpltCallback+0x37c>

				time_buff[ind]=buff[0];
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a35      	ldr	r2, [pc, #212]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002288:	7811      	ldrb	r1, [r2, #0]
 800228a:	4a39      	ldr	r2, [pc, #228]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 800228c:	54d1      	strb	r1, [r2, r3]
				ind++;
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a35      	ldr	r2, [pc, #212]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002296:	6013      	str	r3, [r2, #0]
			}
			if(zpt==5&&buff[0]==','){
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d11b      	bne.n	80022d8 <HAL_UART_RxCpltCallback+0x3bc>
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b2c      	cmp	r3, #44	; 0x2c
 80022a6:	d117      	bne.n	80022d8 <HAL_UART_RxCpltCallback+0x3bc>
				gps.year[0]=time_buff[0];
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80022ae:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[1];
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80022b2:	785a      	ldrb	r2, [r3, #1]
 80022b4:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80022b6:	71da      	strb	r2, [r3, #7]
				gps.year[2]=time_buff[2];
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80022ba:	789a      	ldrb	r2, [r3, #2]
 80022bc:	4b2d      	ldr	r3, [pc, #180]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80022be:	721a      	strb	r2, [r3, #8]
				gps.year[3]=time_buff[3];
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80022c2:	78da      	ldrb	r2, [r3, #3]
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_UART_RxCpltCallback+0x458>)
 80022c6:	725a      	strb	r2, [r3, #9]
				year_str[0]=time_buff[2];
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80022ca:	789a      	ldrb	r2, [r3, #2]
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_UART_RxCpltCallback+0x45c>)
 80022ce:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[3];
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 80022d2:	78da      	ldrb	r2, [r3, #3]
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_UART_RxCpltCallback+0x45c>)
 80022d6:	705a      	strb	r2, [r3, #1]
			}
		}


		//IF RMC
		if(Tipe_Mes==2){
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_UART_RxCpltCallback+0x444>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 80c9 	bne.w	8002474 <HAL_UART_RxCpltCallback+0x558>

			if(count==6&&buff[0]!=','){
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_UART_RxCpltCallback+0x43c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d10b      	bne.n	8002302 <HAL_UART_RxCpltCallback+0x3e6>
 80022ea:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b2c      	cmp	r3, #44	; 0x2c
 80022f0:	d007      	beq.n	8002302 <HAL_UART_RxCpltCallback+0x3e6>
				count=0;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_UART_RxCpltCallback+0x43c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
				ERRORS++;
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_UART_RxCpltCallback+0x448>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a19      	ldr	r2, [pc, #100]	; (8002364 <HAL_UART_RxCpltCallback+0x448>)
 8002300:	6013      	str	r3, [r2, #0]
			}
			if(buff[0]==','){
 8002302:	4b16      	ldr	r3, [pc, #88]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b2c      	cmp	r3, #44	; 0x2c
 8002308:	d107      	bne.n	800231a <HAL_UART_RxCpltCallback+0x3fe>
				zpt++;
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 8002312:	6013      	str	r3, [r2, #0]
				ind=0;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
			}
			if(zpt==1&&buff[0]!=','){
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10e      	bne.n	8002340 <HAL_UART_RxCpltCallback+0x424>
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b2c      	cmp	r3, #44	; 0x2c
 8002328:	d00a      	beq.n	8002340 <HAL_UART_RxCpltCallback+0x424>

				time_buff[ind]=buff[0];
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 8002330:	7811      	ldrb	r1, [r2, #0]
 8002332:	4a0f      	ldr	r2, [pc, #60]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002334:	54d1      	strb	r1, [r2, r3]
				ind++;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_UART_RxCpltCallback+0x450>)
 800233e:	6013      	str	r3, [r2, #0]
			}
			if(zpt==2&&buff[0]==','){
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_UART_RxCpltCallback+0x44c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d13b      	bne.n	80023c0 <HAL_UART_RxCpltCallback+0x4a4>
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <HAL_UART_RxCpltCallback+0x440>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b2c      	cmp	r3, #44	; 0x2c
 800234e:	d137      	bne.n	80023c0 <HAL_UART_RxCpltCallback+0x4a4>
				gps.hours[0]=time_buff[0];
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <HAL_UART_RxCpltCallback+0x454>)
 8002352:	781a      	ldrb	r2, [r3, #0]
 8002354:	e012      	b.n	800237c <HAL_UART_RxCpltCallback+0x460>
 8002356:	bf00      	nop
 8002358:	20000cf4 	.word	0x20000cf4
 800235c:	20000d0c 	.word	0x20000d0c
 8002360:	20000cd4 	.word	0x20000cd4
 8002364:	20000cd0 	.word	0x20000cd0
 8002368:	20000ce0 	.word	0x20000ce0
 800236c:	20000cec 	.word	0x20000cec
 8002370:	20000cfc 	.word	0x20000cfc
 8002374:	2000509c 	.word	0x2000509c
 8002378:	20000d10 	.word	0x20000d10
 800237c:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 800237e:	72da      	strb	r2, [r3, #11]
				gps.hours[1]=time_buff[1];
 8002380:	4b4d      	ldr	r3, [pc, #308]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002382:	785a      	ldrb	r2, [r3, #1]
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 8002386:	731a      	strb	r2, [r3, #12]
				gps.minuttes[0]=time_buff[2];
 8002388:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 800238a:	789a      	ldrb	r2, [r3, #2]
 800238c:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 800238e:	739a      	strb	r2, [r3, #14]
				gps.minuttes[1]=time_buff[3];
 8002390:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002392:	78da      	ldrb	r2, [r3, #3]
 8002394:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 8002396:	73da      	strb	r2, [r3, #15]
				gps.seconds[0]=time_buff[4];
 8002398:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 800239a:	791a      	ldrb	r2, [r3, #4]
 800239c:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 800239e:	745a      	strb	r2, [r3, #17]
				gps.seconds[1]=time_buff[5];
 80023a0:	4b45      	ldr	r3, [pc, #276]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 80023a2:	795a      	ldrb	r2, [r3, #5]
 80023a4:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 80023a6:	749a      	strb	r2, [r3, #18]
				gps.seconds[2]=time_buff[6];
 80023a8:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 80023aa:	799a      	ldrb	r2, [r3, #6]
 80023ac:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 80023ae:	74da      	strb	r2, [r3, #19]
				gps.seconds[3]=time_buff[7];
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 80023b2:	79da      	ldrb	r2, [r3, #7]
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 80023b6:	751a      	strb	r2, [r3, #20]
				gps.seconds[4]=time_buff[8];
 80023b8:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 80023ba:	7a1a      	ldrb	r2, [r3, #8]
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 80023be:	755a      	strb	r2, [r3, #21]
			}
			if(zpt==2&&buff[0]!=','){
 80023c0:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_UART_RxCpltCallback+0x5a0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d10e      	bne.n	80023e6 <HAL_UART_RxCpltCallback+0x4ca>
 80023c8:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b2c      	cmp	r3, #44	; 0x2c
 80023ce:	d00a      	beq.n	80023e6 <HAL_UART_RxCpltCallback+0x4ca>

				time_buff[ind]=buff[0];
 80023d0:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <HAL_UART_RxCpltCallback+0x5a8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a3a      	ldr	r2, [pc, #232]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 80023d6:	7811      	ldrb	r1, [r2, #0]
 80023d8:	4a37      	ldr	r2, [pc, #220]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 80023da:	54d1      	strb	r1, [r2, r3]
				ind++;
 80023dc:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_UART_RxCpltCallback+0x5a8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	4a38      	ldr	r2, [pc, #224]	; (80024c4 <HAL_UART_RxCpltCallback+0x5a8>)
 80023e4:	6013      	str	r3, [r2, #0]
			}
			if(zpt==3&&buff[0]==','){
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_UART_RxCpltCallback+0x5a0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_UART_RxCpltCallback+0x4e2>
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b2c      	cmp	r3, #44	; 0x2c
 80023f4:	d103      	bne.n	80023fe <HAL_UART_RxCpltCallback+0x4e2>
				gps.sinc[1]=time_buff[0];
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 80023fc:	769a      	strb	r2, [r3, #26]
			}

			if(zpt==9&&buff[0]!=','){
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_UART_RxCpltCallback+0x5a0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b09      	cmp	r3, #9
 8002404:	d10e      	bne.n	8002424 <HAL_UART_RxCpltCallback+0x508>
 8002406:	4b2e      	ldr	r3, [pc, #184]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b2c      	cmp	r3, #44	; 0x2c
 800240c:	d00a      	beq.n	8002424 <HAL_UART_RxCpltCallback+0x508>

				time_buff[ind]=buff[0];
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_UART_RxCpltCallback+0x5a8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 8002414:	7811      	ldrb	r1, [r2, #0]
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002418:	54d1      	strb	r1, [r2, r3]
				ind++;
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_UART_RxCpltCallback+0x5a8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3301      	adds	r3, #1
 8002420:	4a28      	ldr	r2, [pc, #160]	; (80024c4 <HAL_UART_RxCpltCallback+0x5a8>)
 8002422:	6013      	str	r3, [r2, #0]
			}
			if(zpt==10&&buff[0]==','){
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_UART_RxCpltCallback+0x5a0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b0a      	cmp	r3, #10
 800242a:	d123      	bne.n	8002474 <HAL_UART_RxCpltCallback+0x558>
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b2c      	cmp	r3, #44	; 0x2c
 8002432:	d11f      	bne.n	8002474 <HAL_UART_RxCpltCallback+0x558>
				gps.day[0]=time_buff[0];
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 800243a:	701a      	strb	r2, [r3, #0]
				gps.day[1]=time_buff[1];
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 800243e:	785a      	ldrb	r2, [r3, #1]
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 8002442:	705a      	strb	r2, [r3, #1]
				gps.month[0]=time_buff[2];
 8002444:	4b1c      	ldr	r3, [pc, #112]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002446:	789a      	ldrb	r2, [r3, #2]
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 800244a:	70da      	strb	r2, [r3, #3]
				gps.month[1]=time_buff[3];
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 800244e:	78da      	ldrb	r2, [r3, #3]
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 8002452:	711a      	strb	r2, [r3, #4]
				gps.year[0]=time_buff[4];
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002456:	791a      	ldrb	r2, [r3, #4]
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 800245a:	719a      	strb	r2, [r3, #6]
				gps.year[1]=time_buff[5];
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 800245e:	795a      	ldrb	r2, [r3, #5]
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 8002462:	71da      	strb	r2, [r3, #7]
				year_str[0]=time_buff[4];
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 8002466:	791a      	ldrb	r2, [r3, #4]
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_UART_RxCpltCallback+0x5ac>)
 800246a:	701a      	strb	r2, [r3, #0]
				year_str[1]=time_buff[5];
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_UART_RxCpltCallback+0x59c>)
 800246e:	795a      	ldrb	r2, [r3, #5]
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_UART_RxCpltCallback+0x5ac>)
 8002472:	705a      	strb	r2, [r3, #1]
			}
		}
		//printf("buff=%c\tcount=%d\tzpt=%d\tind=%d\tTipe_Mes=%d\n\r",buff[0],count,zpt,ind,Tipe_Mes);
		//printf("crc_hx=%s\t crc=%d\t crc_buff=%s\t dec=%d\n\r",crc_hx,crc,crc_buff,dec);
		dataReceived=1;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_UART_RxCpltCallback+0x5b0>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

		if( dataTransmitted != 0 ) {
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_UART_RxCpltCallback+0x5b4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_UART_RxCpltCallback+0x572>

			//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);

			dataReceived=0;
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_UART_RxCpltCallback+0x5b0>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_UART_RxCpltCallback+0x5b4>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT (&huart7, (uint8_t *)buff, 1);
 800248e:	2201      	movs	r2, #1
 8002490:	490b      	ldr	r1, [pc, #44]	; (80024c0 <HAL_UART_RxCpltCallback+0x5a4>)
 8002492:	4810      	ldr	r0, [pc, #64]	; (80024d4 <HAL_UART_RxCpltCallback+0x5b8>)
 8002494:	f005 fc45 	bl	8007d22 <HAL_UART_Receive_IT>
		gps.errors[1]=ERRORS;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_UART_RxCpltCallback+0x5bc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_UART_RxCpltCallback+0x598>)
 80024a0:	761a      	strb	r2, [r3, #24]
		count++;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_UART_RxCpltCallback+0x5c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_UART_RxCpltCallback+0x5c0>)
 80024aa:	6013      	str	r3, [r2, #0]
	}
}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000509c 	.word	0x2000509c
 80024b8:	20000cfc 	.word	0x20000cfc
 80024bc:	20000ce0 	.word	0x20000ce0
 80024c0:	20000d0c 	.word	0x20000d0c
 80024c4:	20000cec 	.word	0x20000cec
 80024c8:	20000d10 	.word	0x20000d10
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000004 	.word	0x20000004
 80024d4:	200051e0 	.word	0x200051e0
 80024d8:	20000cd0 	.word	0x20000cd0
 80024dc:	20000cf4 	.word	0x20000cf4

080024e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

	//if(huart == &huart6) {

		dataTransmitted=1;
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_UART_TxCpltCallback+0x30>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

		if( dataReceived != 0 ) {
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_UART_TxCpltCallback+0x34>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_UART_TxCpltCallback+0x22>
			//HAL_UART_Transmit_IT(&huart6, (uint8_t *)buff, 1);
			dataReceived=0;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HAL_UART_TxCpltCallback+0x34>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
			dataTransmitted=0;
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_UART_TxCpltCallback+0x30>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
		}
	//}
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000004 	.word	0x20000004
 8002514:	20000000 	.word	0x20000000

08002518 <Hex_to_dec>:

char Hex_to_dec(char hex[2]){
 8002518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
    int i;
    int dig; /*to store digit*/
    int cont = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
    dec = 0;
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <Hex_to_dec+0x108>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fd fe79 	bl	8000224 <strlen>
 8002532:	4603      	mov	r3, r0
 8002534:	3b01      	subs	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e060      	b.n	80025fc <Hex_to_dec+0xe4>
        switch (hex[i]) {
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3b41      	subs	r3, #65	; 0x41
 8002544:	2b05      	cmp	r3, #5
 8002546:	d821      	bhi.n	800258c <Hex_to_dec+0x74>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <Hex_to_dec+0x38>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002569 	.word	0x08002569
 8002554:	0800256f 	.word	0x0800256f
 8002558:	08002575 	.word	0x08002575
 800255c:	0800257b 	.word	0x0800257b
 8002560:	08002581 	.word	0x08002581
 8002564:	08002587 	.word	0x08002587
        case 'A':
            dig = 10;
 8002568:	230a      	movs	r3, #10
 800256a:	613b      	str	r3, [r7, #16]
            break;
 800256c:	e014      	b.n	8002598 <Hex_to_dec+0x80>
        case 'B':
            dig = 11;
 800256e:	230b      	movs	r3, #11
 8002570:	613b      	str	r3, [r7, #16]
            break;
 8002572:	e011      	b.n	8002598 <Hex_to_dec+0x80>
        case 'C':
            dig = 12;
 8002574:	230c      	movs	r3, #12
 8002576:	613b      	str	r3, [r7, #16]
            break;
 8002578:	e00e      	b.n	8002598 <Hex_to_dec+0x80>
        case 'D':
            dig = 13;
 800257a:	230d      	movs	r3, #13
 800257c:	613b      	str	r3, [r7, #16]
            break;
 800257e:	e00b      	b.n	8002598 <Hex_to_dec+0x80>
        case 'E':
            dig = 14;
 8002580:	230e      	movs	r3, #14
 8002582:	613b      	str	r3, [r7, #16]
            break;
 8002584:	e008      	b.n	8002598 <Hex_to_dec+0x80>
        case 'F':
            dig = 15;
 8002586:	230f      	movs	r3, #15
 8002588:	613b      	str	r3, [r7, #16]
            break;
 800258a:	e005      	b.n	8002598 <Hex_to_dec+0x80>
        default:
            dig = hex[i] - 0x30;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	3b30      	subs	r3, #48	; 0x30
 8002596:	613b      	str	r3, [r7, #16]
        }
        dec = dec + (dig)*pow((double)16, (double)cont);
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <Hex_to_dec+0x108>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fff1 	bl	8000584 <__aeabi_i2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	6938      	ldr	r0, [r7, #16]
 80025a8:	f7fd ffec 	bl	8000584 <__aeabi_i2d>
 80025ac:	4680      	mov	r8, r0
 80025ae:	4689      	mov	r9, r1
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7fd ffe7 	bl	8000584 <__aeabi_i2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ec43 2b11 	vmov	d1, r2, r3
 80025be:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002618 <Hex_to_dec+0x100>
 80025c2:	f021 f823 	bl	802360c <pow>
 80025c6:	ec53 2b10 	vmov	r2, r3, d0
 80025ca:	4640      	mov	r0, r8
 80025cc:	4649      	mov	r1, r9
 80025ce:	f7fe f843 	bl	8000658 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fe87 	bl	80002ec <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fae7 	bl	8000bb8 <__aeabi_d2iz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <Hex_to_dec+0x108>)
 80025ee:	6013      	str	r3, [r2, #0]
        cont++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
    for (i = (strlen(hex) - 1); i >= 0; i--) {
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	da9b      	bge.n	800253a <Hex_to_dec+0x22>
    }
    return dec;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <Hex_to_dec+0x108>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002612:	bf00      	nop
 8002614:	f3af 8000 	nop.w
 8002618:	00000000 	.word	0x00000000
 800261c:	40300000 	.word	0x40300000
 8002620:	20005264 	.word	0x20005264

08002624 <calc_crc>:


char calc_crc(char c,int cnt){
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
	if (c=='*'){
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	2b2a      	cmp	r3, #42	; 0x2a
 8002634:	d108      	bne.n	8002648 <calc_crc+0x24>
		start_crc=0;
 8002636:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <calc_crc+0xa0>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
		crc_pars=1;
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <calc_crc+0xa4>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
		z=0;
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <calc_crc+0xa8>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
	}
	if(start_crc==1){
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <calc_crc+0xa0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <calc_crc+0x38>
		crc^=c;
 8002650:	79fa      	ldrb	r2, [r7, #7]
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <calc_crc+0xac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4053      	eors	r3, r2
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <calc_crc+0xac>)
 800265a:	6013      	str	r3, [r2, #0]
	}
	if(crc_pars==1&&c!='*'&&z<=1){
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <calc_crc+0xa4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d110      	bne.n	8002686 <calc_crc+0x62>
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	2b2a      	cmp	r3, #42	; 0x2a
 8002668:	d00d      	beq.n	8002686 <calc_crc+0x62>
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <calc_crc+0xa8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	dc09      	bgt.n	8002686 <calc_crc+0x62>
		crc_buff[z]=c;
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <calc_crc+0xa8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4917      	ldr	r1, [pc, #92]	; (80026d4 <calc_crc+0xb0>)
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	54ca      	strb	r2, [r1, r3]
		z++;
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <calc_crc+0xa8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <calc_crc+0xa8>)
 8002684:	6013      	str	r3, [r2, #0]
	}
	if(c=='\n'){
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b0a      	cmp	r3, #10
 800268a:	d10a      	bne.n	80026a2 <calc_crc+0x7e>
		Hex_to_dec(crc_buff);
 800268c:	4811      	ldr	r0, [pc, #68]	; (80026d4 <calc_crc+0xb0>)
 800268e:	f7ff ff43 	bl	8002518 <Hex_to_dec>
		if(crc==dec){
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <calc_crc+0xac>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <calc_crc+0xb4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d101      	bne.n	80026a2 <calc_crc+0x7e>
			//Test++;
			return 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00c      	b.n	80026bc <calc_crc+0x98>
		}
	}
	if(cnt==0){
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d108      	bne.n	80026ba <calc_crc+0x96>
		start_crc=1;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <calc_crc+0xa0>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
		crc_pars=0;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <calc_crc+0xa4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
		crc=0;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <calc_crc+0xac>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
	}
//	printf("crc=%d\t crc_buff=%s\t dec=%d\n\r",crc,crc_buff,dec);
	return 0;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000ce4 	.word	0x20000ce4
 80026c8:	20000cf8 	.word	0x20000cf8
 80026cc:	20000ce8 	.word	0x20000ce8
 80026d0:	20000cf0 	.word	0x20000cf0
 80026d4:	20000d08 	.word	0x20000d08
 80026d8:	20005264 	.word	0x20005264

080026dc <rtc_read>:

time_t rtc_read(void) {
 80026dc:	b5b0      	push	{r4, r5, r7, lr}
 80026de:	b092      	sub	sp, #72	; 0x48
 80026e0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	struct tm timeinfo;

	hrtc.Instance = RTC;
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <rtc_read+0x84>)
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <rtc_read+0x88>)
 80026e6:	601a      	str	r2, [r3, #0]

	// Read actual date and time
	HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 80026e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	481b      	ldr	r0, [pc, #108]	; (8002760 <rtc_read+0x84>)
 80026f2:	f004 fd6f 	bl	80071d4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 80026f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4818      	ldr	r0, [pc, #96]	; (8002760 <rtc_read+0x84>)
 8002700:	f004 fe6e 	bl	80073e0 <HAL_RTC_GetDate>

	// Setup a tm structure based on the RTC
	// monday==1 sunday==7
	timeinfo.tm_wday = dateStruct.WeekDay;
 8002704:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002708:	61bb      	str	r3, [r7, #24]
	timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 800270a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800270e:	613b      	str	r3, [r7, #16]
	timeinfo.tm_mday = dateStruct.Date;
 8002710:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002714:	60fb      	str	r3, [r7, #12]
	timeinfo.tm_year = dateStruct.Year + 100;
 8002716:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800271a:	3364      	adds	r3, #100	; 0x64
 800271c:	617b      	str	r3, [r7, #20]
	timeinfo.tm_hour = timeStruct.Hours;
 800271e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002722:	60bb      	str	r3, [r7, #8]
	timeinfo.tm_min = timeStruct.Minutes;
 8002724:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002728:	607b      	str	r3, [r7, #4]
	timeinfo.tm_sec = timeStruct.Seconds;
 800272a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800272e:	603b      	str	r3, [r7, #0]
	//printf("tm_wday=%d\t\n",timeinfo.tm_wday);

	// Convert to timestamp
	time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002730:	463b      	mov	r3, r7
 8002732:	4618      	mov	r0, r3
 8002734:	f018 ff34 	bl	801b5a0 <mktime>
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <rtc_read+0x8c>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4a0b      	ldr	r2, [pc, #44]	; (800276c <rtc_read+0x90>)
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	461a      	mov	r2, r3
 8002744:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002748:	1884      	adds	r4, r0, r2
 800274a:	eb41 0503 	adc.w	r5, r1, r3
 800274e:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40


	return t;
 8002752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
}
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	3748      	adds	r7, #72	; 0x48
 800275c:	46bd      	mov	sp, r7
 800275e:	bdb0      	pop	{r4, r5, r7, pc}
 8002760:	2000526c 	.word	0x2000526c
 8002764:	40002800 	.word	0x40002800
 8002768:	200050b8 	.word	0x200050b8
 800276c:	08028054 	.word	0x08028054

08002770 <tcpecho_init>:

void tcpecho_init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL,DEFAULT_THREAD_STACKSIZE, 1);
 8002776:	2301      	movs	r3, #1
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277e:	2200      	movs	r2, #0
 8002780:	4903      	ldr	r1, [pc, #12]	; (8002790 <tcpecho_init+0x20>)
 8002782:	4804      	ldr	r0, [pc, #16]	; (8002794 <tcpecho_init+0x24>)
 8002784:	f018 fc94 	bl	801b0b0 <sys_thread_new>
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	08002891 	.word	0x08002891
 8002794:	080246a4 	.word	0x080246a4

08002798 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80027a0:	f006 fcea 	bl	8009178 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 80027a4:	f00d f960 	bl	800fa68 <httpd_init>
	/* Initialize tcp echo server */
	tcpecho_init();
 80027a8:	f7ff ffe2 	bl	8002770 <tcpecho_init>


	  ip4_addr_t add;
	  inet_aton(user_info.ip, &add);
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	4619      	mov	r1, r3
 80027b2:	4830      	ldr	r0, [pc, #192]	; (8002874 <StartDefaultTask+0xdc>)
 80027b4:	f017 faa6 	bl	8019d04 <ip4addr_aton>
	  setIP(add.addr);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f006 fcb8 	bl	8009130 <setIP>

	ip4_addr_t mask;
	inet_aton(user_info.netmask, &mask);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	482c      	ldr	r0, [pc, #176]	; (8002878 <StartDefaultTask+0xe0>)
 80027c8:	f017 fa9c 	bl	8019d04 <ip4addr_aton>
	setNetmask(mask.addr);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f006 fcc0 	bl	8009154 <setNetmask>
	int IPres=0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
	/* Infinite loop */
	for(;;)
	{

		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 80027d8:	2201      	movs	r2, #1
 80027da:	4928      	ldr	r1, [pc, #160]	; (800287c <StartDefaultTask+0xe4>)
 80027dc:	4828      	ldr	r0, [pc, #160]	; (8002880 <StartDefaultTask+0xe8>)
 80027de:	f005 faa0 	bl	8007d22 <HAL_UART_Receive_IT>

		if(HAL_GPIO_ReadPin (GPIOI, Button_Pin)){
 80027e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e6:	4827      	ldr	r0, [pc, #156]	; (8002884 <StartDefaultTask+0xec>)
 80027e8:	f003 fa5c 	bl	8005ca4 <HAL_GPIO_ReadPin>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <StartDefaultTask+0x62>
			IPres=IPres+1;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e032      	b.n	8002860 <StartDefaultTask+0xc8>
		}
		else
		{
			HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin,GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2102      	movs	r1, #2
 80027fe:	4821      	ldr	r0, [pc, #132]	; (8002884 <StartDefaultTask+0xec>)
 8002800:	f003 fa68 	bl	8005cd4 <HAL_GPIO_WritePin>
			if(IPres>5){
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b05      	cmp	r3, #5
 8002808:	dd28      	ble.n	800285c <StartDefaultTask+0xc4>
				memset(&user_info,0,sizeof(user_info));
 800280a:	f44f 7292 	mov.w	r2, #292	; 0x124
 800280e:	2100      	movs	r1, #0
 8002810:	4818      	ldr	r0, [pc, #96]	; (8002874 <StartDefaultTask+0xdc>)
 8002812:	f018 fde5 	bl	801b3e0 <memset>
				strncpy(user_info.ip,"192.168.0.68",13);
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <StartDefaultTask+0xdc>)
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <StartDefaultTask+0xf0>)
 800281a:	4614      	mov	r4, r2
 800281c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800281e:	c407      	stmia	r4!, {r0, r1, r2}
 8002820:	7023      	strb	r3, [r4, #0]
				strncpy(user_info.netmask,"255.255.255.0",14);
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <StartDefaultTask+0xe0>)
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <StartDefaultTask+0xf4>)
 8002826:	4614      	mov	r4, r2
 8002828:	cb07      	ldmia	r3!, {r0, r1, r2}
 800282a:	6020      	str	r0, [r4, #0]
 800282c:	6061      	str	r1, [r4, #4]
 800282e:	60a2      	str	r2, [r4, #8]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	81a3      	strh	r3, [r4, #12]
				//setIPaddr
				ip4_addr_t add;
				inet_aton(user_info.ip, &add);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	480e      	ldr	r0, [pc, #56]	; (8002874 <StartDefaultTask+0xdc>)
 800283c:	f017 fa62 	bl	8019d04 <ip4addr_aton>
				setIP(add.addr);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4618      	mov	r0, r3
 8002844:	f006 fc74 	bl	8009130 <setIP>
				//setNetMask
				ip4_addr_t mask;
				inet_aton(user_info.netmask, &mask);
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	4619      	mov	r1, r3
 800284e:	480a      	ldr	r0, [pc, #40]	; (8002878 <StartDefaultTask+0xe0>)
 8002850:	f017 fa58 	bl	8019d04 <ip4addr_aton>
				setNetmask(mask.addr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4618      	mov	r0, r3
 8002858:	f006 fc7c 	bl	8009154 <setNetmask>
			}
			IPres=0;
 800285c:	2300      	movs	r3, #0
 800285e:	61fb      	str	r3, [r7, #28]

		}
		//HAL_GPIO_TogglePin(Led_GPIO_Port, Led1_Pin);
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002860:	2102      	movs	r1, #2
 8002862:	4808      	ldr	r0, [pc, #32]	; (8002884 <StartDefaultTask+0xec>)
 8002864:	f003 fa4f 	bl	8005d06 <HAL_GPIO_TogglePin>
		//HAL_UART_Receive(&huart7, (uint8_t*)RXstr, MESsize, 1000);
		//HAL_UART_Transmit(&huart6, (uint8_t*)str, 8, 1000);
		HAL_Delay(1000);
 8002868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286c:	f001 fc4a 	bl	8004104 <HAL_Delay>
		HAL_UART_Receive_IT (&huart7, (uint8_t*)&buff, 1);
 8002870:	e7b2      	b.n	80027d8 <StartDefaultTask+0x40>
 8002872:	bf00      	nop
 8002874:	200050b8 	.word	0x200050b8
 8002878:	200051cb 	.word	0x200051cb
 800287c:	20000d0c 	.word	0x20000d0c
 8002880:	200051e0 	.word	0x200051e0
 8002884:	40022000 	.word	0x40022000
 8002888:	080246b4 	.word	0x080246b4
 800288c:	080246c4 	.word	0x080246c4

08002890 <tcpecho_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tcpecho_thread */
void tcpecho_thread(void const * argument)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
		//struct tm tm_;
		//uint32_t tm_ms_;


		/* Create a new connection identifier. */
		conn = netconn_new(NETCONN_UDP);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	2020      	movs	r0, #32
 800289e:	f00a f933 	bl	800cb08 <netconn_new_with_proto_and_callback>
 80028a2:	61f8      	str	r0, [r7, #28]
		if (conn!=NULL)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8089 	beq.w	80029be <tcpecho_thread+0x12e>
		{
			/* Bind connection to well known port number 7. */
			err = netconn_bind(conn, NULL, 123);
 80028ac:	227b      	movs	r2, #123	; 0x7b
 80028ae:	2100      	movs	r1, #0
 80028b0:	69f8      	ldr	r0, [r7, #28]
 80028b2:	f00a f9e3 	bl	800cc7c <netconn_bind>
 80028b6:	4603      	mov	r3, r0
 80028b8:	76fb      	strb	r3, [r7, #27]
			if (err == ERR_OK)
 80028ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d17a      	bne.n	80029b8 <tcpecho_thread+0x128>
			{
				while (1)
				{
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 80028c2:	e067      	b.n	8002994 <tcpecho_thread+0x104>
					{
						do
						{
							netbuf_data(buf, (void **)&ntp_packet_ptr, &buf_data_len);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f107 0212 	add.w	r2, r7, #18
 80028ca:	f107 010c 	add.w	r1, r7, #12
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00b feda 	bl	800e688 <netbuf_data>

							if(buf_data_len < 48 || buf_data_len > 2048)
 80028d4:	8a7b      	ldrh	r3, [r7, #18]
 80028d6:	2b2f      	cmp	r3, #47	; 0x2f
 80028d8:	d903      	bls.n	80028e2 <tcpecho_thread+0x52>
 80028da:	8a7b      	ldrh	r3, [r7, #18]
 80028dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e0:	d904      	bls.n	80028ec <tcpecho_thread+0x5c>
							{
								netbuf_delete(buf);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00b feaf 	bl	800e648 <netbuf_delete>
								continue;
 80028ea:	e048      	b.n	800297e <tcpecho_thread+0xee>
							}
							ntp_packet_ptr->li_vn_mode = (0 << 6) | (4 << 3) | (4); // Leap Warning: None, Version: NTPv4, Mode: 4 - Server
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	701a      	strb	r2, [r3, #0]
							ntp_packet_ptr->stratum = ntpd_status.stratum;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <tcpecho_thread+0x138>)
 80028f6:	7a12      	ldrb	r2, [r2, #8]
 80028f8:	705a      	strb	r2, [r3, #1]
							ntp_packet_ptr->poll = 5; // 32s
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2205      	movs	r2, #5
 80028fe:	709a      	strb	r2, [r3, #2]
							ntp_packet_ptr->precision = -10; // ~1ms
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22f6      	movs	r2, #246	; 0xf6
 8002904:	70da      	strb	r2, [r3, #3]

							ntp_packet_ptr->rootDelay = 0; // Delay from GPS clock is ~zero
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
							ntp_packet_ptr->rootDispersion_s = 0;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	811a      	strh	r2, [r3, #8]
							ntp_packet_ptr->rootDispersion_f = htonl(NTP_MS_TO_FS_U16 * 1.0); // 1ms
 8002912:	2041      	movs	r0, #65	; 0x41
 8002914:	f00d f8dd 	bl	800fad2 <lwip_htonl>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	b292      	uxth	r2, r2
 800291e:	815a      	strh	r2, [r3, #10]
							ntp_packet_ptr->refId = ('G') | ('P' << 8) | ('S' << 16) | ('\0' << 24);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <tcpecho_thread+0x13c>)
 8002924:	60da      	str	r2, [r3, #12]
							/* Move client's transmit timestamp into origin fields */
							ntp_packet_ptr->origTm_s = ntp_packet_ptr->txTm_s;
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800292c:	619a      	str	r2, [r3, #24]
							ntp_packet_ptr->origTm_f = ntp_packet_ptr->txTm_f;
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002934:	61da      	str	r2, [r3, #28]

							ntp_packet_ptr->refTm_s = time_ref_s;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <tcpecho_thread+0x140>)
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	611a      	str	r2, [r3, #16]
							ntp_packet_ptr->refTm_f = time_ref_f;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <tcpecho_thread+0x144>)
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	615a      	str	r2, [r3, #20]

							//rtcGetTime(&RTCD1, &ntpd_datetime);
							//rtcConvertDateTimeToStructTm(&ntpd_datetime, &tm_, &tm_ms_);

							ntp_packet_ptr->rxTm_s = htonl(rtc_read()- DIFF_SEC_1970_2036);//htonl(mktime(&tm_) - DIFF_SEC_1970_2036);
 8002946:	f7ff fec9 	bl	80026dc <rtc_read>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <tcpecho_thread+0x148>)
 8002950:	4413      	add	r3, r2
 8002952:	68fc      	ldr	r4, [r7, #12]
 8002954:	4618      	mov	r0, r3
 8002956:	f00d f8bc 	bl	800fad2 <lwip_htonl>
 800295a:	4603      	mov	r3, r0
 800295c:	6223      	str	r3, [r4, #32]
							ntp_packet_ptr->rxTm_f = 0;//htonl((NTP_MS_TO_FS_U32 * tm_ms_));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

							/* Copy into transmit timestamp fields */
							ntp_packet_ptr->txTm_s = ntp_packet_ptr->rxTm_s;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a12      	ldr	r2, [r2, #32]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
							ntp_packet_ptr->txTm_f = ntp_packet_ptr->rxTm_f;
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

							netconn_send(conn, buf);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	4619      	mov	r1, r3
 8002978:	69f8      	ldr	r0, [r7, #28]
 800297a:	f00a fbad 	bl	800d0d8 <netconn_send>
						}
						while (netbuf_next(buf) >= 0);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4618      	mov	r0, r3
 8002982:	f00b fecb 	bl	800e71c <netbuf_next>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	da9b      	bge.n	80028c4 <tcpecho_thread+0x34>

						netbuf_delete(buf);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4618      	mov	r0, r3
 8002990:	f00b fe5a 	bl	800e648 <netbuf_delete>
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	69f8      	ldr	r0, [r7, #28]
 800299c:	f00a fb22 	bl	800cfe4 <netconn_recv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	76bb      	strb	r3, [r7, #26]
 80029a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d08b      	beq.n	80028c4 <tcpecho_thread+0x34>
					}
					/* Close connection and discard connection identifier. */
					//netconn_close(newconn);
					//netconn_delete(newconn);
					ntpd_status.requests_count++;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <tcpecho_thread+0x138>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <tcpecho_thread+0x138>)
 80029b4:	6053      	str	r3, [r2, #4]
					while (( recv_err = netconn_recv(conn, &buf)) == ERR_OK)
 80029b6:	e7ed      	b.n	8002994 <tcpecho_thread+0x104>
				}
			}
			else
			{
				netconn_delete(conn);
 80029b8:	69f8      	ldr	r0, [r7, #28]
 80029ba:	f00a f943 	bl	800cc44 <netconn_delete>
			}
		}
	}
  /* USER CODE END tcpecho_thread */
}
 80029be:	bf00      	nop
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	00535047 	.word	0x00535047
 80029d0:	20005290 	.word	0x20005290
 80029d4:	2000528c 	.word	0x2000528c
 80029d8:	83aa7e80 	.word	0x83aa7e80

080029dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ee:	f001 fb69 	bl	80040c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40001000 	.word	0x40001000

08002a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
}
 8002a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <Error_Handler+0x8>
	...

08002a0c <fs_open_custom>:
#define JSON_SIZE 1608
struct tm WebPageTime;
int fs_read_custom(struct fs_file *file, char *buffer, int count){
	return 0;
}
int fs_open_custom(struct fs_file *file, const char *name){
 8002a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a10:	f2ad 6df4 	subw	sp, sp, #1780	; 0x6f4
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	6018      	str	r0, [r3, #0]
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	6019      	str	r1, [r3, #0]
	char generated_html[JSON_SIZE];
	memset(generated_html, 0, JSON_SIZE);
 8002a1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a22:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f018 fcd9 	bl	801b3e0 <memset>
	u16_t offset = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de

	if (!strcmp(name, "/info.json")) {
 8002a34:	463b      	mov	r3, r7
 8002a36:	499f      	ldr	r1, [pc, #636]	; (8002cb4 <fs_open_custom+0x2a8>)
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	f7fd fbe9 	bl	8000210 <strcmp>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d14a      	bne.n	8002ada <fs_open_custom+0xce>

		char* ip=user_info.ip;
 8002a44:	4b9c      	ldr	r3, [pc, #624]	; (8002cb8 <fs_open_custom+0x2ac>)
 8002a46:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		int zone=user_info.zone;
 8002a4a:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <fs_open_custom+0x2ac>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
		char* contacts=user_info.contacts;
 8002a52:	4b9a      	ldr	r3, [pc, #616]	; (8002cbc <fs_open_custom+0x2b0>)
 8002a54:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		char* netmask=user_info.netmask;
 8002a58:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <fs_open_custom+0x2b4>)
 8002a5a:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
		char macstr[18]; //string to be displayed on web page
		sprintf (macstr, "%02X:%02X:%02X:%02X:%02X:%02X", getMAC(0), getMAC(1), getMAC(2), getMAC(3), getMAC(4), getMAC(5) );
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f006 fb54 	bl	800910c <getMAC>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4698      	mov	r8, r3
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f006 fb4f 	bl	800910c <getMAC>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4699      	mov	r9, r3
 8002a72:	2002      	movs	r0, #2
 8002a74:	f006 fb4a 	bl	800910c <getMAC>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f006 fb45 	bl	800910c <getMAC>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461d      	mov	r5, r3
 8002a86:	2004      	movs	r0, #4
 8002a88:	f006 fb40 	bl	800910c <getMAC>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461e      	mov	r6, r3
 8002a90:	2005      	movs	r0, #5
 8002a92:	f006 fb3b 	bl	800910c <getMAC>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002a9c:	9303      	str	r3, [sp, #12]
 8002a9e:	9602      	str	r6, [sp, #8]
 8002aa0:	9501      	str	r5, [sp, #4]
 8002aa2:	9400      	str	r4, [sp, #0]
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	4642      	mov	r2, r8
 8002aa8:	4986      	ldr	r1, [pc, #536]	; (8002cc4 <fs_open_custom+0x2b8>)
 8002aaa:	f018 ff83 	bl	801b9b4 <sprintf>

			offset = sprintf(generated_html,"[{\"IPaddress\":\"%s\",\"NetMask\":\"%s\",\"Timezone\":\"%d\",\"contacts\":\"%s\",\"software_version\":\"0.00001\",\"mac\":\"%s\"}]",ip,netmask,zone,contacts,macstr);
 8002aae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8002ac8:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 8002acc:	497e      	ldr	r1, [pc, #504]	; (8002cc8 <fs_open_custom+0x2bc>)
 8002ace:	f018 ff71 	bl	801b9b4 <sprintf>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
 8002ad8:	e0a7      	b.n	8002c2a <fs_open_custom+0x21e>
	}
	else if (!strcmp(name, "/uptime.json")) {
 8002ada:	463b      	mov	r3, r7
 8002adc:	497b      	ldr	r1, [pc, #492]	; (8002ccc <fs_open_custom+0x2c0>)
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	f7fd fb96 	bl	8000210 <strcmp>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 809f 	bne.w	8002c2a <fs_open_custom+0x21e>
		RTC_DateTypeDef dateStruct;
		RTC_TimeTypeDef timeStruct;

		//hrtc.Instance = RTC;
		if (gps.year[0]!='V'){
 8002aec:	4b78      	ldr	r3, [pc, #480]	; (8002cd0 <fs_open_custom+0x2c4>)
 8002aee:	799b      	ldrb	r3, [r3, #6]
 8002af0:	2b56      	cmp	r3, #86	; 0x56
 8002af2:	f000 808d 	beq.w	8002c10 <fs_open_custom+0x204>
			// Read actual date and time
			HAL_RTC_GetTime(&hrtc, &timeStruct, FORMAT_BIN); // Read time first!
 8002af6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afa:	2200      	movs	r2, #0
 8002afc:	4619      	mov	r1, r3
 8002afe:	4875      	ldr	r0, [pc, #468]	; (8002cd4 <fs_open_custom+0x2c8>)
 8002b00:	f004 fb68 	bl	80071d4 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &dateStruct, FORMAT_BIN);
 8002b04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b08:	2200      	movs	r2, #0
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4871      	ldr	r0, [pc, #452]	; (8002cd4 <fs_open_custom+0x2c8>)
 8002b0e:	f004 fc67 	bl	80073e0 <HAL_RTC_GetDate>

			struct tm timeinfo;

			timeinfo.tm_wday = dateStruct.WeekDay;
 8002b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	619a      	str	r2, [r3, #24]
			timeinfo.tm_mon = dateStruct.Month;//-1 do January==0 month
 8002b20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	611a      	str	r2, [r3, #16]
			timeinfo.tm_mday = dateStruct.Date;
 8002b2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b32:	789b      	ldrb	r3, [r3, #2]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	60da      	str	r2, [r3, #12]
			timeinfo.tm_year = dateStruct.Year;
 8002b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	615a      	str	r2, [r3, #20]
			timeinfo.tm_hour = timeStruct.Hours;
 8002b4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	609a      	str	r2, [r3, #8]
			timeinfo.tm_min = timeStruct.Minutes;
 8002b58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b5c:	785b      	ldrb	r3, [r3, #1]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	605a      	str	r2, [r3, #4]
			timeinfo.tm_sec = timeStruct.Seconds;
 8002b66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b6a:	789b      	ldrb	r3, [r3, #2]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	601a      	str	r2, [r3, #0]

			time_t t = mktime(&timeinfo)+offset_unix[user_info.zone];
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f018 fd11 	bl	801b5a0 <mktime>
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <fs_open_custom+0x2ac>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <fs_open_custom+0x2cc>)
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b8e:	1884      	adds	r4, r0, r2
 8002b90:	eb41 0503 	adc.w	r5, r1, r3
 8002b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b98:	e9c3 4500 	strd	r4, r5, [r3]
			// time_t  to   tm

			localtime_r(  &t, &WebPageTime );
 8002b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ba0:	494e      	ldr	r1, [pc, #312]	; (8002cdc <fs_open_custom+0x2d0>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f018 faf0 	bl	801b188 <localtime_r>

			int Hours=WebPageTime.tm_hour;
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <fs_open_custom+0x2d0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
			int Minutes=WebPageTime.tm_min;
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <fs_open_custom+0x2d0>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
			int Seconds=WebPageTime.tm_sec;
 8002bb8:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <fs_open_custom+0x2d0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
			int Date=WebPageTime.tm_mday;
 8002bc0:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <fs_open_custom+0x2d0>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
			int Month=WebPageTime.tm_mon+1;
 8002bc8:	4b44      	ldr	r3, [pc, #272]	; (8002cdc <fs_open_custom+0x2d0>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
			int Year=WebPageTime.tm_year+2000;
 8002bd2:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <fs_open_custom+0x2d0>)
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002bda:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4


			offset = sprintf(generated_html,"%02d:%02d:%02d %02d.%02d.%04d",Hours,Minutes,Seconds,Date,Month,Year);
 8002bde:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002be2:	f8d7 36c4 	ldr.w	r3, [r7, #1732]	; 0x6c4
 8002be6:	9303      	str	r3, [sp, #12]
 8002be8:	f8d7 36c8 	ldr.w	r3, [r7, #1736]	; 0x6c8
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	f8d7 36cc 	ldr.w	r3, [r7, #1740]	; 0x6cc
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8002bfe:	f8d7 26d8 	ldr.w	r2, [r7, #1752]	; 0x6d8
 8002c02:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <fs_open_custom+0x2d4>)
 8002c04:	f018 fed6 	bl	801b9b4 <sprintf>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
 8002c0e:	e00c      	b.n	8002c2a <fs_open_custom+0x21e>
		}
		else if (gps.year[0]=='V') {
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <fs_open_custom+0x2c4>)
 8002c12:	799b      	ldrb	r3, [r3, #6]
 8002c14:	2b56      	cmp	r3, #86	; 0x56
 8002c16:	d108      	bne.n	8002c2a <fs_open_custom+0x21e>
			offset = sprintf(generated_html,"no Reference Timestamp");
 8002c18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c1c:	4931      	ldr	r1, [pc, #196]	; (8002ce4 <fs_open_custom+0x2d8>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f018 fec8 	bl	801b9b4 <sprintf>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f8a7 36de 	strh.w	r3, [r7, #1758]	; 0x6de
		}
	}

	if (offset>0){
 8002c2a:	f8b7 36de 	ldrh.w	r3, [r7, #1758]	; 0x6de
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00e      	beq.n	8002c50 <fs_open_custom+0x244>
		memset(file, 0, sizeof(struct fs_file));
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2214      	movs	r2, #20
 8002c36:	2100      	movs	r1, #0
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	f018 fbd1 	bl	801b3e0 <memset>
		file->pextension = mem_malloc(offset);
 8002c3e:	f8b7 36de 	ldrh.w	r3, [r7, #1758]	; 0x6de
 8002c42:	4618      	mov	r0, r3
 8002c44:	f00d fa9a 	bl	801017c <mem_malloc>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60da      	str	r2, [r3, #12]
	}

	if (file->pextension != NULL) {
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d020      	beq.n	8002c9c <fs_open_custom+0x290>
		/* instead of doing memcpy, you would generate e.g. a JSON here */
		memcpy(file->pextension, generated_html, offset);
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f8b7 26de 	ldrh.w	r2, [r7, #1758]	; 0x6de
 8002c64:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f018 fb91 	bl	801b390 <memcpy>
		file->data = (const char *)file->pextension;
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	601a      	str	r2, [r3, #0]
		file->len = offset; /* don't send the trailing 0 */
 8002c7a:	f8b7 26de 	ldrh.w	r2, [r7, #1758]	; 0x6de
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
		file->index = file->len;
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	609a      	str	r2, [r3, #8]
		/* allow persisteng connections */
		file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	741a      	strb	r2, [r3, #16]
		return 1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e005      	b.n	8002ca8 <fs_open_custom+0x29c>
	}

	printf("Extension fail %s\n\r",name);
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	4811      	ldr	r0, [pc, #68]	; (8002ce8 <fs_open_custom+0x2dc>)
 8002ca2:	f018 fe23 	bl	801b8ec <printf>
	return 0;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f207 67e4 	addw	r7, r7, #1764	; 0x6e4
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cb4:	080246d4 	.word	0x080246d4
 8002cb8:	200050b8 	.word	0x200050b8
 8002cbc:	200050cc 	.word	0x200050cc
 8002cc0:	200051cb 	.word	0x200051cb
 8002cc4:	080246e0 	.word	0x080246e0
 8002cc8:	08024700 	.word	0x08024700
 8002ccc:	0802476c 	.word	0x0802476c
 8002cd0:	2000509c 	.word	0x2000509c
 8002cd4:	2000526c 	.word	0x2000526c
 8002cd8:	08028054 	.word	0x08028054
 8002cdc:	200052b8 	.word	0x200052b8
 8002ce0:	0802477c 	.word	0x0802477c
 8002ce4:	0802479c 	.word	0x0802479c
 8002ce8:	080247b4 	.word	0x080247b4

08002cec <fs_close_custom>:
void fs_close_custom(struct fs_file *file){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	if (file && file->pextension) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <fs_close_custom+0x26>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <fs_close_custom+0x26>
		mem_free(file->pextension);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f00d f89e 	bl	800fe48 <mem_free>
		file->pextension = NULL;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
	}
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8002d1a:	b480      	push	{r7}
 8002d1c:	b087      	sub	sp, #28
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d801      	bhi.n	8002d34 <jsmn_alloc_token+0x1a>
    return NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e014      	b.n	8002d5e <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	1c59      	adds	r1, r3, #1
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	6051      	str	r1, [r2, #4]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8002d5c:	697b      	ldr	r3, [r7, #20]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	460b      	mov	r3, r1
 8002d78:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	7afa      	ldrb	r2, [r7, #11]
 8002d7e:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	605a      	str	r2, [r3, #4]
  token->end = end;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002db4:	e07c      	b.n	8002eb0 <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b7d      	cmp	r3, #125	; 0x7d
 8002dc2:	f000 8083 	beq.w	8002ecc <jsmn_parse_primitive+0x12c>
 8002dc6:	2b7d      	cmp	r3, #125	; 0x7d
 8002dc8:	dc58      	bgt.n	8002e7c <jsmn_parse_primitive+0xdc>
 8002dca:	2b5d      	cmp	r3, #93	; 0x5d
 8002dcc:	d07e      	beq.n	8002ecc <jsmn_parse_primitive+0x12c>
 8002dce:	2b5d      	cmp	r3, #93	; 0x5d
 8002dd0:	dc54      	bgt.n	8002e7c <jsmn_parse_primitive+0xdc>
 8002dd2:	2b2c      	cmp	r3, #44	; 0x2c
 8002dd4:	dc50      	bgt.n	8002e78 <jsmn_parse_primitive+0xd8>
 8002dd6:	2b09      	cmp	r3, #9
 8002dd8:	db50      	blt.n	8002e7c <jsmn_parse_primitive+0xdc>
 8002dda:	3b09      	subs	r3, #9
 8002ddc:	2b23      	cmp	r3, #35	; 0x23
 8002dde:	d84d      	bhi.n	8002e7c <jsmn_parse_primitive+0xdc>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <jsmn_parse_primitive+0x48>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002ecd 	.word	0x08002ecd
 8002dec:	08002ecd 	.word	0x08002ecd
 8002df0:	08002e7d 	.word	0x08002e7d
 8002df4:	08002e7d 	.word	0x08002e7d
 8002df8:	08002ecd 	.word	0x08002ecd
 8002dfc:	08002e7d 	.word	0x08002e7d
 8002e00:	08002e7d 	.word	0x08002e7d
 8002e04:	08002e7d 	.word	0x08002e7d
 8002e08:	08002e7d 	.word	0x08002e7d
 8002e0c:	08002e7d 	.word	0x08002e7d
 8002e10:	08002e7d 	.word	0x08002e7d
 8002e14:	08002e7d 	.word	0x08002e7d
 8002e18:	08002e7d 	.word	0x08002e7d
 8002e1c:	08002e7d 	.word	0x08002e7d
 8002e20:	08002e7d 	.word	0x08002e7d
 8002e24:	08002e7d 	.word	0x08002e7d
 8002e28:	08002e7d 	.word	0x08002e7d
 8002e2c:	08002e7d 	.word	0x08002e7d
 8002e30:	08002e7d 	.word	0x08002e7d
 8002e34:	08002e7d 	.word	0x08002e7d
 8002e38:	08002e7d 	.word	0x08002e7d
 8002e3c:	08002e7d 	.word	0x08002e7d
 8002e40:	08002e7d 	.word	0x08002e7d
 8002e44:	08002ecd 	.word	0x08002ecd
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e7d 	.word	0x08002e7d
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002e7d 	.word	0x08002e7d
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e7d 	.word	0x08002e7d
 8002e60:	08002e7d 	.word	0x08002e7d
 8002e64:	08002e7d 	.word	0x08002e7d
 8002e68:	08002e7d 	.word	0x08002e7d
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e7d 	.word	0x08002e7d
 8002e74:	08002ecd 	.word	0x08002ecd
 8002e78:	2b3a      	cmp	r3, #58	; 0x3a
 8002e7a:	d027      	beq.n	8002ecc <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8002e7c:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b1f      	cmp	r3, #31
 8002e8a:	d906      	bls.n	8002e9a <jsmn_parse_primitive+0xfa>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b7e      	cmp	r3, #126	; 0x7e
 8002e98:	d905      	bls.n	8002ea6 <jsmn_parse_primitive+0x106>
      parser->pos = start;
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8002ea0:	f06f 0301 	mvn.w	r3, #1
 8002ea4:	e03b      	b.n	8002f1e <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90a      	bls.n	8002ed0 <jsmn_parse_primitive+0x130>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f47f af76 	bne.w	8002db6 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 8002eca:	e001      	b.n	8002ed0 <jsmn_parse_primitive+0x130>
      goto found;
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <jsmn_parse_primitive+0x132>
found:
 8002ed0:	bf00      	nop
  if (tokens == NULL) {
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <jsmn_parse_primitive+0x146>
    parser->pos--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	601a      	str	r2, [r3, #0]
    return 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e01b      	b.n	8002f1e <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff ff15 	bl	8002d1a <jsmn_alloc_token>
 8002ef0:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	e00c      	b.n	8002f1e <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	2108      	movs	r1, #8
 8002f0c:	6938      	ldr	r0, [r7, #16]
 8002f0e:	f7ff ff2c 	bl	8002d6a <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]
  return 0;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop

08002f28 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8002f46:	e0e6      	b.n	8003116 <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b22      	cmp	r3, #34	; 0x22
 8002f58:	d11d      	bne.n	8002f96 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <jsmn_parse_string+0x3c>
        return 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e0ea      	b.n	800313a <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8002f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f66:	6839      	ldr	r1, [r7, #0]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fed6 	bl	8002d1a <jsmn_alloc_token>
 8002f6e:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <jsmn_parse_string+0x5a>
        parser->pos = start;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f80:	e0db      	b.n	800313a <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2104      	movs	r1, #4
 8002f8c:	6938      	ldr	r0, [r7, #16]
 8002f8e:	f7ff feec 	bl	8002d6a <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e0d1      	b.n	800313a <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b5c      	cmp	r3, #92	; 0x5c
 8002f9a:	f040 80b4 	bne.w	8003106 <jsmn_parse_string+0x1de>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f240 80ad 	bls.w	8003106 <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b75      	cmp	r3, #117	; 0x75
 8002fc2:	f300 809a 	bgt.w	80030fa <jsmn_parse_string+0x1d2>
 8002fc6:	2b5c      	cmp	r3, #92	; 0x5c
 8002fc8:	da06      	bge.n	8002fd8 <jsmn_parse_string+0xb0>
 8002fca:	2b22      	cmp	r3, #34	; 0x22
 8002fcc:	f000 809d 	beq.w	800310a <jsmn_parse_string+0x1e2>
 8002fd0:	2b2f      	cmp	r3, #47	; 0x2f
 8002fd2:	f000 809a 	beq.w	800310a <jsmn_parse_string+0x1e2>
 8002fd6:	e090      	b.n	80030fa <jsmn_parse_string+0x1d2>
 8002fd8:	3b5c      	subs	r3, #92	; 0x5c
 8002fda:	2b19      	cmp	r3, #25
 8002fdc:	f200 808d 	bhi.w	80030fa <jsmn_parse_string+0x1d2>
 8002fe0:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <jsmn_parse_string+0xc0>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	0800310b 	.word	0x0800310b
 8002fec:	080030fb 	.word	0x080030fb
 8002ff0:	080030fb 	.word	0x080030fb
 8002ff4:	080030fb 	.word	0x080030fb
 8002ff8:	080030fb 	.word	0x080030fb
 8002ffc:	080030fb 	.word	0x080030fb
 8003000:	0800310b 	.word	0x0800310b
 8003004:	080030fb 	.word	0x080030fb
 8003008:	080030fb 	.word	0x080030fb
 800300c:	080030fb 	.word	0x080030fb
 8003010:	0800310b 	.word	0x0800310b
 8003014:	080030fb 	.word	0x080030fb
 8003018:	080030fb 	.word	0x080030fb
 800301c:	080030fb 	.word	0x080030fb
 8003020:	080030fb 	.word	0x080030fb
 8003024:	080030fb 	.word	0x080030fb
 8003028:	080030fb 	.word	0x080030fb
 800302c:	080030fb 	.word	0x080030fb
 8003030:	0800310b 	.word	0x0800310b
 8003034:	080030fb 	.word	0x080030fb
 8003038:	080030fb 	.word	0x080030fb
 800303c:	080030fb 	.word	0x080030fb
 8003040:	0800310b 	.word	0x0800310b
 8003044:	080030fb 	.word	0x080030fb
 8003048:	0800310b 	.word	0x0800310b
 800304c:	08003051 	.word	0x08003051
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e037      	b.n	80030d0 <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b2f      	cmp	r3, #47	; 0x2f
 800306c:	d906      	bls.n	800307c <jsmn_parse_string+0x154>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b39      	cmp	r3, #57	; 0x39
 800307a:	d921      	bls.n	80030c0 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	d906      	bls.n	8003098 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4413      	add	r3, r2
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b46      	cmp	r3, #70	; 0x46
 8003096:	d913      	bls.n	80030c0 <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80030a2:	2b60      	cmp	r3, #96	; 0x60
 80030a4:	d906      	bls.n	80030b4 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4413      	add	r3, r2
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b66      	cmp	r3, #102	; 0x66
 80030b2:	d905      	bls.n	80030c0 <jsmn_parse_string+0x198>
            parser->pos = start;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 80030ba:	f06f 0301 	mvn.w	r3, #1
 80030be:	e03c      	b.n	800313a <jsmn_parse_string+0x212>
          }
          parser->pos++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]
             i++) {
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3301      	adds	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	dc0b      	bgt.n	80030ee <jsmn_parse_string+0x1c6>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d906      	bls.n	80030ee <jsmn_parse_string+0x1c6>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1b8      	bne.n	8003060 <jsmn_parse_string+0x138>
        }
        parser->pos--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]
        break;
 80030f8:	e008      	b.n	800310c <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8003100:	f06f 0301 	mvn.w	r3, #1
 8003104:	e019      	b.n	800313a <jsmn_parse_string+0x212>
      }
    }
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <jsmn_parse_string+0x1e4>
        break;
 800310a:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d907      	bls.n	8003130 <jsmn_parse_string+0x208>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f47f af0c 	bne.w	8002f48 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8003136:	f06f 0302 	mvn.w	r3, #2
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop

08003144 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8003158:	e1bf      	b.n	80034da <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	4413      	add	r3, r2
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8003166:	7ffb      	ldrb	r3, [r7, #31]
 8003168:	2b7d      	cmp	r3, #125	; 0x7d
 800316a:	f000 80b9 	beq.w	80032e0 <jsmn_parse+0x19c>
 800316e:	2b7d      	cmp	r3, #125	; 0x7d
 8003170:	f300 8181 	bgt.w	8003476 <jsmn_parse+0x332>
 8003174:	2b7b      	cmp	r3, #123	; 0x7b
 8003176:	d07c      	beq.n	8003272 <jsmn_parse+0x12e>
 8003178:	2b7b      	cmp	r3, #123	; 0x7b
 800317a:	f300 817c 	bgt.w	8003476 <jsmn_parse+0x332>
 800317e:	2b5d      	cmp	r3, #93	; 0x5d
 8003180:	f000 80ae 	beq.w	80032e0 <jsmn_parse+0x19c>
 8003184:	2b5d      	cmp	r3, #93	; 0x5d
 8003186:	f300 8176 	bgt.w	8003476 <jsmn_parse+0x332>
 800318a:	2b3a      	cmp	r3, #58	; 0x3a
 800318c:	dc6e      	bgt.n	800326c <jsmn_parse+0x128>
 800318e:	2b09      	cmp	r3, #9
 8003190:	f2c0 8171 	blt.w	8003476 <jsmn_parse+0x332>
 8003194:	3b09      	subs	r3, #9
 8003196:	2b31      	cmp	r3, #49	; 0x31
 8003198:	f200 816d 	bhi.w	8003476 <jsmn_parse+0x332>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <jsmn_parse+0x60>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080034bb 	.word	0x080034bb
 80031a8:	080034bb 	.word	0x080034bb
 80031ac:	08003477 	.word	0x08003477
 80031b0:	08003477 	.word	0x08003477
 80031b4:	080034bb 	.word	0x080034bb
 80031b8:	08003477 	.word	0x08003477
 80031bc:	08003477 	.word	0x08003477
 80031c0:	08003477 	.word	0x08003477
 80031c4:	08003477 	.word	0x08003477
 80031c8:	08003477 	.word	0x08003477
 80031cc:	08003477 	.word	0x08003477
 80031d0:	08003477 	.word	0x08003477
 80031d4:	08003477 	.word	0x08003477
 80031d8:	08003477 	.word	0x08003477
 80031dc:	08003477 	.word	0x08003477
 80031e0:	08003477 	.word	0x08003477
 80031e4:	08003477 	.word	0x08003477
 80031e8:	08003477 	.word	0x08003477
 80031ec:	08003477 	.word	0x08003477
 80031f0:	08003477 	.word	0x08003477
 80031f4:	08003477 	.word	0x08003477
 80031f8:	08003477 	.word	0x08003477
 80031fc:	08003477 	.word	0x08003477
 8003200:	080034bb 	.word	0x080034bb
 8003204:	08003477 	.word	0x08003477
 8003208:	08003395 	.word	0x08003395
 800320c:	08003477 	.word	0x08003477
 8003210:	08003477 	.word	0x08003477
 8003214:	08003477 	.word	0x08003477
 8003218:	08003477 	.word	0x08003477
 800321c:	08003477 	.word	0x08003477
 8003220:	08003477 	.word	0x08003477
 8003224:	08003477 	.word	0x08003477
 8003228:	08003477 	.word	0x08003477
 800322c:	08003477 	.word	0x08003477
 8003230:	080033e9 	.word	0x080033e9
 8003234:	08003477 	.word	0x08003477
 8003238:	08003477 	.word	0x08003477
 800323c:	08003477 	.word	0x08003477
 8003240:	08003477 	.word	0x08003477
 8003244:	08003477 	.word	0x08003477
 8003248:	08003477 	.word	0x08003477
 800324c:	08003477 	.word	0x08003477
 8003250:	08003477 	.word	0x08003477
 8003254:	08003477 	.word	0x08003477
 8003258:	08003477 	.word	0x08003477
 800325c:	08003477 	.word	0x08003477
 8003260:	08003477 	.word	0x08003477
 8003264:	08003477 	.word	0x08003477
 8003268:	080033db 	.word	0x080033db
 800326c:	2b5b      	cmp	r3, #91	; 0x5b
 800326e:	f040 8102 	bne.w	8003476 <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	3301      	adds	r3, #1
 8003276:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 811f 	beq.w	80034be <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8003280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff fd48 	bl	8002d1a <jsmn_alloc_token>
 800328a:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	e14f      	b.n	8003538 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d00a      	beq.n	80032b8 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	4413      	add	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80032b8:	7ffb      	ldrb	r3, [r7, #31]
 80032ba:	2b7b      	cmp	r3, #123	; 0x7b
 80032bc:	d101      	bne.n	80032c2 <jsmn_parse+0x17e>
 80032be:	2201      	movs	r2, #1
 80032c0:	e000      	b.n	80032c4 <jsmn_parse+0x180>
 80032c2:	2202      	movs	r2, #2
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	461a      	mov	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	609a      	str	r2, [r3, #8]
      break;
 80032de:	e0f7      	b.n	80034d0 <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80ed 	beq.w	80034c2 <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80032e8:	7ffb      	ldrb	r3, [r7, #31]
 80032ea:	2b7d      	cmp	r3, #125	; 0x7d
 80032ec:	d101      	bne.n	80032f2 <jsmn_parse+0x1ae>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <jsmn_parse+0x1b0>
 80032f2:	2302      	movs	r3, #2
 80032f4:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e024      	b.n	800334a <jsmn_parse+0x206>
        token = &tokens[i];
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4413      	add	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d017      	beq.n	8003344 <jsmn_parse+0x200>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d112      	bne.n	8003344 <jsmn_parse+0x200>
          if (token->type != type) {
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	7fba      	ldrb	r2, [r7, #30]
 8003324:	429a      	cmp	r2, r3
 8003326:	d002      	beq.n	800332e <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8003328:	f06f 0301 	mvn.w	r3, #1
 800332c:	e104      	b.n	8003538 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	461a      	mov	r2, r3
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	609a      	str	r2, [r3, #8]
          break;
 8003342:	e005      	b.n	8003350 <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	3b01      	subs	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	dad7      	bge.n	8003300 <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d119      	bne.n	800338c <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8003358:	f06f 0301 	mvn.w	r3, #1
 800335c:	e0ec      	b.n	8003538 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d009      	beq.n	8003386 <jsmn_parse+0x242>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d104      	bne.n	8003386 <jsmn_parse+0x242>
          parser->toksuper = i;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	609a      	str	r2, [r3, #8]
          break;
 8003382:	bf00      	nop
        }
      }
#endif
      break;
 8003384:	e0a4      	b.n	80034d0 <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	3b01      	subs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	dae5      	bge.n	800335e <jsmn_parse+0x21a>
      break;
 8003392:	e09d      	b.n	80034d0 <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fdc2 	bl	8002f28 <jsmn_parse_string>
 80033a4:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da01      	bge.n	80033b0 <jsmn_parse+0x26c>
        return r;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	e0c3      	b.n	8003538 <jsmn_parse+0x3f4>
      }
      count++;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	3301      	adds	r3, #1
 80033b4:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	f000 8082 	beq.w	80034c6 <jsmn_parse+0x382>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d07e      	beq.n	80034c6 <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	3201      	adds	r2, #1
 80033d6:	60da      	str	r2, [r3, #12]
      }
      break;
 80033d8:	e075      	b.n	80034c6 <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	461a      	mov	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	609a      	str	r2, [r3, #8]
      break;
 80033e6:	e073      	b.n	80034d0 <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d06d      	beq.n	80034ca <jsmn_parse+0x386>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f6:	d068      	beq.n	80034ca <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8003404:	2b02      	cmp	r3, #2
 8003406:	d060      	beq.n	80034ca <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	4413      	add	r3, r2
 8003412:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8003414:	2b01      	cmp	r3, #1
 8003416:	d058      	beq.n	80034ca <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	3b01      	subs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
 8003420:	e025      	b.n	800346e <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d006      	beq.n	800343e <jsmn_parse+0x2fa>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	4413      	add	r3, r2
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d114      	bne.n	8003468 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	4413      	add	r3, r2
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d00c      	beq.n	8003468 <jsmn_parse+0x324>
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4413      	add	r3, r2
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d104      	bne.n	8003468 <jsmn_parse+0x324>
              parser->toksuper = i;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003462:	609a      	str	r2, [r3, #8]
              break;
 8003464:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8003466:	e030      	b.n	80034ca <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	3b01      	subs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	dad6      	bge.n	8003422 <jsmn_parse+0x2de>
      break;
 8003474:	e029      	b.n	80034ca <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fc8d 	bl	8002da0 <jsmn_parse_primitive>
 8003486:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da01      	bge.n	8003492 <jsmn_parse+0x34e>
        return r;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	e052      	b.n	8003538 <jsmn_parse+0x3f4>
      }
      count++;
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	3301      	adds	r3, #1
 8003496:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d015      	beq.n	80034ce <jsmn_parse+0x38a>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	3201      	adds	r2, #1
 80034b6:	60da      	str	r2, [r3, #12]
      }
      break;
 80034b8:	e009      	b.n	80034ce <jsmn_parse+0x38a>
      break;
 80034ba:	bf00      	nop
 80034bc:	e008      	b.n	80034d0 <jsmn_parse+0x38c>
        break;
 80034be:	bf00      	nop
 80034c0:	e006      	b.n	80034d0 <jsmn_parse+0x38c>
        break;
 80034c2:	bf00      	nop
 80034c4:	e004      	b.n	80034d0 <jsmn_parse+0x38c>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <jsmn_parse+0x38c>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <jsmn_parse+0x38c>
      break;
 80034ce:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d907      	bls.n	80034f4 <jsmn_parse+0x3b0>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f ae33 	bne.w	800315a <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d01d      	beq.n	8003536 <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	e015      	b.n	8003530 <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4413      	add	r3, r2
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d00a      	beq.n	800352a <jsmn_parse+0x3e6>
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	4413      	add	r3, r2
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d102      	bne.n	800352a <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 8003524:	f06f 0302 	mvn.w	r3, #2
 8003528:	e006      	b.n	8003538 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	3b01      	subs	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	dae6      	bge.n	8003504 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 8003536:	6a3b      	ldr	r3, [r7, #32]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f04f 32ff 	mov.w	r2, #4294967295
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <jsoneq>:
int post_offset=0;
//static char last_user[USER_PASS_BUFSIZE];

char buf_data[USER_PASS_BUFSIZE];

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b04      	cmp	r3, #4
 800357a:	d11e      	bne.n	80035ba <jsoneq+0x52>
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fc fe51 	bl	8000224 <strlen>
 8003582:	4603      	mov	r3, r0
 8003584:	4619      	mov	r1, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	4299      	cmp	r1, r3
 8003592:	d112      	bne.n	80035ba <jsoneq+0x52>
			strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	461a      	mov	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1898      	adds	r0, r3, r2
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	f018 fa2f 	bl	801ba0e <strncmp>
 80035b0:	4603      	mov	r3, r0
	if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <jsoneq+0x52>
		return 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e001      	b.n	80035be <jsoneq+0x56>
	}
	return -1;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <httpd_post_begin>:
err_t
httpd_post_begin(void *connection, const char *uri, const char *http_request, u16_t http_request_len, int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	807b      	strh	r3, [r7, #2]
	post_offset=0;
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <httpd_post_begin+0x68>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

	memset(buf_data,0,sizeof(buf_data));
 80035dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e0:	2100      	movs	r1, #0
 80035e2:	4814      	ldr	r0, [pc, #80]	; (8003634 <httpd_post_begin+0x6c>)
 80035e4:	f017 fefc 	bl	801b3e0 <memset>
	LWIP_UNUSED_ARG(connection);
	LWIP_UNUSED_ARG(http_request);
	LWIP_UNUSED_ARG(http_request_len);
	LWIP_UNUSED_ARG(content_len);
	LWIP_UNUSED_ARG(post_auto_wnd);
	if (!memcmp(uri, "/info.html", 10)) {
 80035e8:	220a      	movs	r2, #10
 80035ea:	4913      	ldr	r1, [pc, #76]	; (8003638 <httpd_post_begin+0x70>)
 80035ec:	68b8      	ldr	r0, [r7, #8]
 80035ee:	f017 fec1 	bl	801b374 <memcmp>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d115      	bne.n	8003624 <httpd_post_begin+0x5c>
		if (current_connection != connection) {
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <httpd_post_begin+0x74>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d010      	beq.n	8003624 <httpd_post_begin+0x5c>
			current_connection = connection;
 8003602:	4a0e      	ldr	r2, [pc, #56]	; (800363c <httpd_post_begin+0x74>)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6013      	str	r3, [r2, #0]
			valid_connection = NULL;
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <httpd_post_begin+0x78>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
			/* default page is "login failed" */
			snprintf(response_uri, response_uri_len, "/info.html");
 800360e:	8c3b      	ldrh	r3, [r7, #32]
 8003610:	4a09      	ldr	r2, [pc, #36]	; (8003638 <httpd_post_begin+0x70>)
 8003612:	4619      	mov	r1, r3
 8003614:	69f8      	ldr	r0, [r7, #28]
 8003616:	f018 f999 	bl	801b94c <snprintf>
			/* e.g. for large uploads to slow flash over a fast connection, you should
         manually update the rx window. That way, a sender can only send a full
         tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
         We do not need to throttle upload speed here, so: */
			*post_auto_wnd = 1;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
			return ERR_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e001      	b.n	8003628 <httpd_post_begin+0x60>
		}
	}
	return ERR_VAL;
 8003624:	f06f 0305 	mvn.w	r3, #5
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000d1c 	.word	0x20000d1c
 8003634:	200052dc 	.word	0x200052dc
 8003638:	080247c8 	.word	0x080247c8
 800363c:	20000d14 	.word	0x20000d14
 8003640:	20000d18 	.word	0x20000d18

08003644 <httpd_post_receive_data>:

err_t
httpd_post_receive_data(void *connection, struct pbuf *p)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	4b98      	ldr	r3, [pc, #608]	; (80038b0 <httpd_post_receive_data+0x26c>)
 8003650:	f242 0258 	movw	r2, #8280	; 0x2058
 8003654:	443a      	add	r2, r7
 8003656:	4413      	add	r3, r2
 8003658:	6018      	str	r0, [r3, #0]
 800365a:	4b96      	ldr	r3, [pc, #600]	; (80038b4 <httpd_post_receive_data+0x270>)
 800365c:	f242 0258 	movw	r2, #8280	; 0x2058
 8003660:	443a      	add	r2, r7
 8003662:	4413      	add	r3, r2
 8003664:	6019      	str	r1, [r3, #0]
	err_t ret;

	if ((post_offset+p->len) <= USER_PASS_BUFSIZE){
 8003666:	4b93      	ldr	r3, [pc, #588]	; (80038b4 <httpd_post_receive_data+0x270>)
 8003668:	f242 0258 	movw	r2, #8280	; 0x2058
 800366c:	443a      	add	r2, r7
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	895b      	ldrh	r3, [r3, #10]
 8003674:	461a      	mov	r2, r3
 8003676:	4b90      	ldr	r3, [pc, #576]	; (80038b8 <httpd_post_receive_data+0x274>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4413      	add	r3, r2
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	dc34      	bgt.n	80036ec <httpd_post_receive_data+0xa8>
		strncpy(buf_data+post_offset, p->payload,p->len);
 8003682:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <httpd_post_receive_data+0x274>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b8c      	ldr	r3, [pc, #560]	; (80038bc <httpd_post_receive_data+0x278>)
 800368a:	18d0      	adds	r0, r2, r3
 800368c:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <httpd_post_receive_data+0x270>)
 800368e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003692:	443a      	add	r2, r7
 8003694:	4413      	add	r3, r2
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	4b86      	ldr	r3, [pc, #536]	; (80038b4 <httpd_post_receive_data+0x270>)
 800369c:	f242 0258 	movw	r2, #8280	; 0x2058
 80036a0:	443a      	add	r2, r7
 80036a2:	4413      	add	r3, r2
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	895b      	ldrh	r3, [r3, #10]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f018 f9c2 	bl	801ba32 <strncpy>
	else{
		ret = ERR_VAL;
		pbuf_free(p);
		return ret;
	}
	post_offset += p->len;
 80036ae:	4b81      	ldr	r3, [pc, #516]	; (80038b4 <httpd_post_receive_data+0x270>)
 80036b0:	f242 0258 	movw	r2, #8280	; 0x2058
 80036b4:	443a      	add	r2, r7
 80036b6:	4413      	add	r3, r2
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	895b      	ldrh	r3, [r3, #10]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <httpd_post_receive_data+0x274>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	4a7c      	ldr	r2, [pc, #496]	; (80038b8 <httpd_post_receive_data+0x274>)
 80036c6:	6013      	str	r3, [r2, #0]

	int data_len = strlen(buf_data);
 80036c8:	487c      	ldr	r0, [pc, #496]	; (80038bc <httpd_post_receive_data+0x278>)
 80036ca:	f7fc fdab 	bl	8000224 <strlen>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f242 024c 	movw	r2, #8268	; 0x204c
 80036d4:	443a      	add	r2, r7
 80036d6:	6013      	str	r3, [r2, #0]
	if (buf_data[data_len-1]!=']'){
 80036d8:	f242 034c 	movw	r3, #8268	; 0x204c
 80036dc:	443b      	add	r3, r7
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4a76      	ldr	r2, [pc, #472]	; (80038bc <httpd_post_receive_data+0x278>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	2b5d      	cmp	r3, #93	; 0x5d
 80036e8:	d026      	beq.n	8003738 <httpd_post_receive_data+0xf4>
 80036ea:	e012      	b.n	8003712 <httpd_post_receive_data+0xce>
		ret = ERR_VAL;
 80036ec:	23fa      	movs	r3, #250	; 0xfa
 80036ee:	f242 0257 	movw	r2, #8279	; 0x2057
 80036f2:	443a      	add	r2, r7
 80036f4:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 80036f6:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <httpd_post_receive_data+0x270>)
 80036f8:	f242 0258 	movw	r2, #8280	; 0x2058
 80036fc:	443a      	add	r2, r7
 80036fe:	4413      	add	r3, r2
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	f00d fd8d 	bl	8011220 <pbuf_free>
		return ret;
 8003706:	f242 0357 	movw	r3, #8279	; 0x2057
 800370a:	443b      	add	r3, r7
 800370c:	f993 3000 	ldrsb.w	r3, [r3]
 8003710:	e284      	b.n	8003c1c <httpd_post_receive_data+0x5d8>
		ret = ERR_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	f242 0257 	movw	r2, #8279	; 0x2057
 8003718:	443a      	add	r2, r7
 800371a:	7013      	strb	r3, [r2, #0]
		pbuf_free(p);
 800371c:	4b65      	ldr	r3, [pc, #404]	; (80038b4 <httpd_post_receive_data+0x270>)
 800371e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003722:	443a      	add	r2, r7
 8003724:	4413      	add	r3, r2
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	f00d fd7a 	bl	8011220 <pbuf_free>
		return ret;
 800372c:	f242 0357 	movw	r3, #8279	; 0x2057
 8003730:	443b      	add	r3, r7
 8003732:	f993 3000 	ldrsb.w	r3, [r3]
 8003736:	e271      	b.n	8003c1c <httpd_post_receive_data+0x5d8>
	}

	LWIP_ASSERT("NULL pbuf", p != NULL);
 8003738:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <httpd_post_receive_data+0x270>)
 800373a:	f242 0258 	movw	r2, #8280	; 0x2058
 800373e:	443a      	add	r2, r7
 8003740:	4413      	add	r3, r2
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <httpd_post_receive_data+0x110>
 8003748:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <httpd_post_receive_data+0x27c>)
 800374a:	224d      	movs	r2, #77	; 0x4d
 800374c:	495d      	ldr	r1, [pc, #372]	; (80038c4 <httpd_post_receive_data+0x280>)
 800374e:	485e      	ldr	r0, [pc, #376]	; (80038c8 <httpd_post_receive_data+0x284>)
 8003750:	f018 f8cc 	bl	801b8ec <printf>

	if (current_connection == connection) {
 8003754:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <httpd_post_receive_data+0x288>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <httpd_post_receive_data+0x26c>)
 800375a:	f242 0158 	movw	r1, #8280	; 0x2058
 800375e:	4439      	add	r1, r7
 8003760:	440b      	add	r3, r1
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4293      	cmp	r3, r2
 8003766:	f040 8247 	bne.w	8003bf8 <httpd_post_receive_data+0x5b4>
		jsmn_parser parser;
		jsmntok_t t[512]; /* We expect no more than 512 JSON tokens */
		jsmn_init(&parser);
 800376a:	f242 0314 	movw	r3, #8212	; 0x2014
 800376e:	443b      	add	r3, r7
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fee5 	bl	8003540 <jsmn_init>

		int tokens = jsmn_parse(&parser, buf_data, strlen(buf_data), t, 128);
 8003776:	4851      	ldr	r0, [pc, #324]	; (80038bc <httpd_post_receive_data+0x278>)
 8003778:	f7fc fd54 	bl	8000224 <strlen>
 800377c:	4602      	mov	r2, r0
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <httpd_post_receive_data+0x28c>)
 8003780:	f242 0158 	movw	r1, #8280	; 0x2058
 8003784:	4439      	add	r1, r7
 8003786:	440b      	add	r3, r1
 8003788:	f242 0014 	movw	r0, #8212	; 0x2014
 800378c:	4438      	add	r0, r7
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	9100      	str	r1, [sp, #0]
 8003792:	494a      	ldr	r1, [pc, #296]	; (80038bc <httpd_post_receive_data+0x278>)
 8003794:	f7ff fcd6 	bl	8003144 <jsmn_parse>
 8003798:	f242 0348 	movw	r3, #8264	; 0x2048
 800379c:	443b      	add	r3, r7
 800379e:	6018      	str	r0, [r3, #0]
		for (int i = 0; i<tokens; i++){
 80037a0:	2300      	movs	r3, #0
 80037a2:	f242 0250 	movw	r2, #8272	; 0x2050
 80037a6:	443a      	add	r2, r7
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e1de      	b.n	8003b6a <httpd_post_receive_data+0x526>
			if (jsoneq(buf_data, &t[i], "IPaddress") == 0) {
 80037ac:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <httpd_post_receive_data+0x28c>)
 80037ae:	f242 0258 	movw	r2, #8280	; 0x2058
 80037b2:	443a      	add	r2, r7
 80037b4:	4413      	add	r3, r2
 80037b6:	f242 0250 	movw	r2, #8272	; 0x2050
 80037ba:	443a      	add	r2, r7
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	4a44      	ldr	r2, [pc, #272]	; (80038d4 <httpd_post_receive_data+0x290>)
 80037c4:	4619      	mov	r1, r3
 80037c6:	483d      	ldr	r0, [pc, #244]	; (80038bc <httpd_post_receive_data+0x278>)
 80037c8:	f7ff fece 	bl	8003568 <jsoneq>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 8084 	bne.w	80038dc <httpd_post_receive_data+0x298>
				buf_data[t[i+1].end] = '\0';
 80037d4:	f242 0350 	movw	r3, #8272	; 0x2050
 80037d8:	443b      	add	r3, r7
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <httpd_post_receive_data+0x28c>)
 80037e0:	f242 0158 	movw	r1, #8280	; 0x2058
 80037e4:	4439      	add	r1, r7
 80037e6:	440b      	add	r3, r1
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	4413      	add	r3, r2
 80037ec:	3308      	adds	r3, #8
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a32      	ldr	r2, [pc, #200]	; (80038bc <httpd_post_receive_data+0x278>)
 80037f2:	2100      	movs	r1, #0
 80037f4:	54d1      	strb	r1, [r2, r3]
				memset(user_info.ip,0,16);
 80037f6:	2210      	movs	r2, #16
 80037f8:	2100      	movs	r1, #0
 80037fa:	4837      	ldr	r0, [pc, #220]	; (80038d8 <httpd_post_receive_data+0x294>)
 80037fc:	f017 fdf0 	bl	801b3e0 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 8003800:	2310      	movs	r3, #16
 8003802:	f242 0228 	movw	r2, #8232	; 0x2028
 8003806:	443a      	add	r2, r7
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	f242 0350 	movw	r3, #8272	; 0x2050
 800380e:	443b      	add	r3, r7
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <httpd_post_receive_data+0x28c>)
 8003816:	f242 0158 	movw	r1, #8280	; 0x2058
 800381a:	4439      	add	r1, r7
 800381c:	440b      	add	r3, r1
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	4413      	add	r3, r2
 8003822:	3308      	adds	r3, #8
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f242 0350 	movw	r3, #8272	; 0x2050
 800382a:	443b      	add	r3, r7
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <httpd_post_receive_data+0x28c>)
 8003832:	f242 0058 	movw	r0, #8280	; 0x2058
 8003836:	4438      	add	r0, r7
 8003838:	4403      	add	r3, r0
 800383a:	0109      	lsls	r1, r1, #4
 800383c:	440b      	add	r3, r1
 800383e:	3304      	adds	r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f242 0224 	movw	r2, #8228	; 0x2024
 8003848:	443a      	add	r2, r7
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	f242 0324 	movw	r3, #8228	; 0x2024
 8003850:	443b      	add	r3, r7
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f242 0328 	movw	r3, #8232	; 0x2028
 8003858:	443b      	add	r3, r7
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4293      	cmp	r3, r2
 800385e:	bfa8      	it	ge
 8003860:	4613      	movge	r3, r2
 8003862:	f242 0220 	movw	r2, #8224	; 0x2020
 8003866:	443a      	add	r2, r7
 8003868:	6013      	str	r3, [r2, #0]
				strncpy(user_info.ip,&buf_data[t[i+1].start],len);
 800386a:	f242 0350 	movw	r3, #8272	; 0x2050
 800386e:	443b      	add	r3, r7
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <httpd_post_receive_data+0x28c>)
 8003876:	f242 0158 	movw	r1, #8280	; 0x2058
 800387a:	4439      	add	r1, r7
 800387c:	440b      	add	r3, r1
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a0d      	ldr	r2, [pc, #52]	; (80038bc <httpd_post_receive_data+0x278>)
 8003888:	4413      	add	r3, r2
 800388a:	f242 0220 	movw	r2, #8224	; 0x2020
 800388e:	443a      	add	r2, r7
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4810      	ldr	r0, [pc, #64]	; (80038d8 <httpd_post_receive_data+0x294>)
 8003896:	f018 f8cc 	bl	801ba32 <strncpy>
				i++;
 800389a:	f242 0350 	movw	r3, #8272	; 0x2050
 800389e:	443b      	add	r3, r7
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	f242 0250 	movw	r2, #8272	; 0x2050
 80038a8:	443a      	add	r2, r7
 80038aa:	6013      	str	r3, [r2, #0]
				continue;
 80038ac:	e154      	b.n	8003b58 <httpd_post_receive_data+0x514>
 80038ae:	bf00      	nop
 80038b0:	ffffdfac 	.word	0xffffdfac
 80038b4:	ffffdfa8 	.word	0xffffdfa8
 80038b8:	20000d1c 	.word	0x20000d1c
 80038bc:	200052dc 	.word	0x200052dc
 80038c0:	080247d4 	.word	0x080247d4
 80038c4:	080247ec 	.word	0x080247ec
 80038c8:	080247f8 	.word	0x080247f8
 80038cc:	20000d14 	.word	0x20000d14
 80038d0:	ffffdfb4 	.word	0xffffdfb4
 80038d4:	08024820 	.word	0x08024820
 80038d8:	200050b8 	.word	0x200050b8
			}
			if (jsoneq(buf_data, &t[i], "NetMask") == 0) {
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <httpd_post_receive_data+0x400>)
 80038de:	f242 0258 	movw	r2, #8280	; 0x2058
 80038e2:	443a      	add	r2, r7
 80038e4:	4413      	add	r3, r2
 80038e6:	f242 0250 	movw	r2, #8272	; 0x2050
 80038ea:	443a      	add	r2, r7
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	4413      	add	r3, r2
 80038f2:	4a55      	ldr	r2, [pc, #340]	; (8003a48 <httpd_post_receive_data+0x404>)
 80038f4:	4619      	mov	r1, r3
 80038f6:	4855      	ldr	r0, [pc, #340]	; (8003a4c <httpd_post_receive_data+0x408>)
 80038f8:	f7ff fe36 	bl	8003568 <jsoneq>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d16c      	bne.n	80039dc <httpd_post_receive_data+0x398>
				buf_data[t[i+1].end] = '\0';
 8003902:	f242 0350 	movw	r3, #8272	; 0x2050
 8003906:	443b      	add	r3, r7
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <httpd_post_receive_data+0x400>)
 800390e:	f242 0158 	movw	r1, #8280	; 0x2058
 8003912:	4439      	add	r1, r7
 8003914:	440b      	add	r3, r1
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	4413      	add	r3, r2
 800391a:	3308      	adds	r3, #8
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <httpd_post_receive_data+0x408>)
 8003920:	2100      	movs	r1, #0
 8003922:	54d1      	strb	r1, [r2, r3]
				memset(user_info.netmask,0,16);
 8003924:	2210      	movs	r2, #16
 8003926:	2100      	movs	r1, #0
 8003928:	4849      	ldr	r0, [pc, #292]	; (8003a50 <httpd_post_receive_data+0x40c>)
 800392a:	f017 fd59 	bl	801b3e0 <memset>
				int len = mymin(16,t[i+1].end-t[i+1].start);
 800392e:	2310      	movs	r3, #16
 8003930:	f242 0234 	movw	r2, #8244	; 0x2034
 8003934:	443a      	add	r2, r7
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	f242 0350 	movw	r3, #8272	; 0x2050
 800393c:	443b      	add	r3, r7
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <httpd_post_receive_data+0x400>)
 8003944:	f242 0158 	movw	r1, #8280	; 0x2058
 8003948:	4439      	add	r1, r7
 800394a:	440b      	add	r3, r1
 800394c:	0112      	lsls	r2, r2, #4
 800394e:	4413      	add	r3, r2
 8003950:	3308      	adds	r3, #8
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f242 0350 	movw	r3, #8272	; 0x2050
 8003958:	443b      	add	r3, r7
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c59      	adds	r1, r3, #1
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <httpd_post_receive_data+0x400>)
 8003960:	f242 0058 	movw	r0, #8280	; 0x2058
 8003964:	4438      	add	r0, r7
 8003966:	4403      	add	r3, r0
 8003968:	0109      	lsls	r1, r1, #4
 800396a:	440b      	add	r3, r1
 800396c:	3304      	adds	r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f242 0230 	movw	r2, #8240	; 0x2030
 8003976:	443a      	add	r2, r7
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	f242 0330 	movw	r3, #8240	; 0x2030
 800397e:	443b      	add	r3, r7
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f242 0334 	movw	r3, #8244	; 0x2034
 8003986:	443b      	add	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4293      	cmp	r3, r2
 800398c:	bfa8      	it	ge
 800398e:	4613      	movge	r3, r2
 8003990:	f242 022c 	movw	r2, #8236	; 0x202c
 8003994:	443a      	add	r2, r7
 8003996:	6013      	str	r3, [r2, #0]
				strncpy(user_info.netmask,&buf_data[t[i+1].start],len);
 8003998:	f242 0350 	movw	r3, #8272	; 0x2050
 800399c:	443b      	add	r3, r7
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <httpd_post_receive_data+0x400>)
 80039a4:	f242 0158 	movw	r1, #8280	; 0x2058
 80039a8:	4439      	add	r1, r7
 80039aa:	440b      	add	r3, r1
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	4413      	add	r3, r2
 80039b0:	3304      	adds	r3, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <httpd_post_receive_data+0x408>)
 80039b6:	4413      	add	r3, r2
 80039b8:	f242 022c 	movw	r2, #8236	; 0x202c
 80039bc:	443a      	add	r2, r7
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	4823      	ldr	r0, [pc, #140]	; (8003a50 <httpd_post_receive_data+0x40c>)
 80039c4:	f018 f835 	bl	801ba32 <strncpy>
				i++;
 80039c8:	f242 0350 	movw	r3, #8272	; 0x2050
 80039cc:	443b      	add	r3, r7
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	f242 0250 	movw	r2, #8272	; 0x2050
 80039d6:	443a      	add	r2, r7
 80039d8:	6013      	str	r3, [r2, #0]
				continue;
 80039da:	e0bd      	b.n	8003b58 <httpd_post_receive_data+0x514>
			}
			if (jsoneq(buf_data, &t[i], "Timezone") == 0) {
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <httpd_post_receive_data+0x400>)
 80039de:	f242 0258 	movw	r2, #8280	; 0x2058
 80039e2:	443a      	add	r2, r7
 80039e4:	4413      	add	r3, r2
 80039e6:	f242 0250 	movw	r2, #8272	; 0x2050
 80039ea:	443a      	add	r2, r7
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	4413      	add	r3, r2
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <httpd_post_receive_data+0x410>)
 80039f4:	4619      	mov	r1, r3
 80039f6:	4815      	ldr	r0, [pc, #84]	; (8003a4c <httpd_post_receive_data+0x408>)
 80039f8:	f7ff fdb6 	bl	8003568 <jsoneq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12c      	bne.n	8003a5c <httpd_post_receive_data+0x418>
				user_info.zone = atoi(&buf_data[t[i+1].start]);
 8003a02:	f242 0350 	movw	r3, #8272	; 0x2050
 8003a06:	443b      	add	r3, r7
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <httpd_post_receive_data+0x400>)
 8003a0e:	f242 0158 	movw	r1, #8280	; 0x2058
 8003a12:	4439      	add	r1, r7
 8003a14:	440b      	add	r3, r1
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	4413      	add	r3, r2
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <httpd_post_receive_data+0x408>)
 8003a20:	4413      	add	r3, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f017 fb88 	bl	801b138 <atoi>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <httpd_post_receive_data+0x414>)
 8003a2c:	6113      	str	r3, [r2, #16]
				i++;
 8003a2e:	f242 0350 	movw	r3, #8272	; 0x2050
 8003a32:	443b      	add	r3, r7
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	f242 0250 	movw	r2, #8272	; 0x2050
 8003a3c:	443a      	add	r2, r7
 8003a3e:	6013      	str	r3, [r2, #0]
				continue;
 8003a40:	e08a      	b.n	8003b58 <httpd_post_receive_data+0x514>
 8003a42:	bf00      	nop
 8003a44:	ffffdfb4 	.word	0xffffdfb4
 8003a48:	0802482c 	.word	0x0802482c
 8003a4c:	200052dc 	.word	0x200052dc
 8003a50:	200051cb 	.word	0x200051cb
 8003a54:	08024834 	.word	0x08024834
 8003a58:	200050b8 	.word	0x200050b8
			}
			if (jsoneq(buf_data, &t[i], "contacts") == 0) {
 8003a5c:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <httpd_post_receive_data+0x5e4>)
 8003a5e:	f242 0258 	movw	r2, #8280	; 0x2058
 8003a62:	443a      	add	r2, r7
 8003a64:	4413      	add	r3, r2
 8003a66:	f242 0250 	movw	r2, #8272	; 0x2050
 8003a6a:	443a      	add	r2, r7
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	4413      	add	r3, r2
 8003a72:	4a6e      	ldr	r2, [pc, #440]	; (8003c2c <httpd_post_receive_data+0x5e8>)
 8003a74:	4619      	mov	r1, r3
 8003a76:	486e      	ldr	r0, [pc, #440]	; (8003c30 <httpd_post_receive_data+0x5ec>)
 8003a78:	f7ff fd76 	bl	8003568 <jsoneq>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d16a      	bne.n	8003b58 <httpd_post_receive_data+0x514>
				memset(user_info.contacts,0,INFOLEN);
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	2100      	movs	r1, #0
 8003a86:	486b      	ldr	r0, [pc, #428]	; (8003c34 <httpd_post_receive_data+0x5f0>)
 8003a88:	f017 fcaa 	bl	801b3e0 <memset>
				buf_data[t[i+1].end] = '\0';
 8003a8c:	f242 0350 	movw	r3, #8272	; 0x2050
 8003a90:	443b      	add	r3, r7
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	4b64      	ldr	r3, [pc, #400]	; (8003c28 <httpd_post_receive_data+0x5e4>)
 8003a98:	f242 0158 	movw	r1, #8280	; 0x2058
 8003a9c:	4439      	add	r1, r7
 8003a9e:	440b      	add	r3, r1
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a61      	ldr	r2, [pc, #388]	; (8003c30 <httpd_post_receive_data+0x5ec>)
 8003aaa:	2100      	movs	r1, #0
 8003aac:	54d1      	strb	r1, [r2, r3]
				int len = mymin(INFOLEN,t[i+1].end-t[i+1].start);
 8003aae:	23ff      	movs	r3, #255	; 0xff
 8003ab0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	f242 0350 	movw	r3, #8272	; 0x2050
 8003aba:	443b      	add	r3, r7
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <httpd_post_receive_data+0x5e4>)
 8003ac2:	f242 0158 	movw	r1, #8280	; 0x2058
 8003ac6:	4439      	add	r1, r7
 8003ac8:	440b      	add	r3, r1
 8003aca:	0112      	lsls	r2, r2, #4
 8003acc:	4413      	add	r3, r2
 8003ace:	3308      	adds	r3, #8
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f242 0350 	movw	r3, #8272	; 0x2050
 8003ad6:	443b      	add	r3, r7
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1c59      	adds	r1, r3, #1
 8003adc:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <httpd_post_receive_data+0x5e4>)
 8003ade:	f242 0058 	movw	r0, #8280	; 0x2058
 8003ae2:	4438      	add	r0, r7
 8003ae4:	4403      	add	r3, r0
 8003ae6:	0109      	lsls	r1, r1, #4
 8003ae8:	440b      	add	r3, r1
 8003aea:	3304      	adds	r3, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f242 023c 	movw	r2, #8252	; 0x203c
 8003af4:	443a      	add	r2, r7
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	f242 033c 	movw	r3, #8252	; 0x203c
 8003afc:	443b      	add	r3, r7
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	bfa8      	it	ge
 8003b0a:	4613      	movge	r3, r2
 8003b0c:	f242 0238 	movw	r2, #8248	; 0x2038
 8003b10:	443a      	add	r2, r7
 8003b12:	6013      	str	r3, [r2, #0]
				strncpy(user_info.contacts,&buf_data[t[i+1].start],len);
 8003b14:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b18:	443b      	add	r3, r7
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <httpd_post_receive_data+0x5e4>)
 8003b20:	f242 0158 	movw	r1, #8280	; 0x2058
 8003b24:	4439      	add	r1, r7
 8003b26:	440b      	add	r3, r1
 8003b28:	0112      	lsls	r2, r2, #4
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3f      	ldr	r2, [pc, #252]	; (8003c30 <httpd_post_receive_data+0x5ec>)
 8003b32:	4413      	add	r3, r2
 8003b34:	f242 0238 	movw	r2, #8248	; 0x2038
 8003b38:	443a      	add	r2, r7
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	483d      	ldr	r0, [pc, #244]	; (8003c34 <httpd_post_receive_data+0x5f0>)
 8003b40:	f017 ff77 	bl	801ba32 <strncpy>
				i++;
 8003b44:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b48:	443b      	add	r3, r7
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f242 0250 	movw	r2, #8272	; 0x2050
 8003b52:	443a      	add	r2, r7
 8003b54:	6013      	str	r3, [r2, #0]
				continue;
 8003b56:	bf00      	nop
		for (int i = 0; i<tokens; i++){
 8003b58:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b5c:	443b      	add	r3, r7
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	f242 0250 	movw	r2, #8272	; 0x2050
 8003b66:	443a      	add	r2, r7
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	f242 0350 	movw	r3, #8272	; 0x2050
 8003b6e:	443b      	add	r3, r7
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	f242 0348 	movw	r3, #8264	; 0x2048
 8003b76:	443b      	add	r3, r7
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	f6ff ae16 	blt.w	80037ac <httpd_post_receive_data+0x168>
			}
		}
		//setIPaddr
		ip4_addr_t add;
		inet_aton(user_info.ip, &add);
 8003b80:	f242 0310 	movw	r3, #8208	; 0x2010
 8003b84:	443b      	add	r3, r7
 8003b86:	4619      	mov	r1, r3
 8003b88:	482b      	ldr	r0, [pc, #172]	; (8003c38 <httpd_post_receive_data+0x5f4>)
 8003b8a:	f016 f8bb 	bl	8019d04 <ip4addr_aton>
		setIP(add.addr);
 8003b8e:	f242 0310 	movw	r3, #8208	; 0x2010
 8003b92:	443b      	add	r3, r7
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f005 faca 	bl	8009130 <setIP>
		//setNetMask
		ip4_addr_t mask;
		inet_aton(user_info.netmask, &mask);
 8003b9c:	f242 030c 	movw	r3, #8204	; 0x200c
 8003ba0:	443b      	add	r3, r7
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4825      	ldr	r0, [pc, #148]	; (8003c3c <httpd_post_receive_data+0x5f8>)
 8003ba6:	f016 f8ad 	bl	8019d04 <ip4addr_aton>
		setNetmask(mask.addr);
 8003baa:	f242 030c 	movw	r3, #8204	; 0x200c
 8003bae:	443b      	add	r3, r7
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f005 face 	bl	8009154 <setNetmask>

        clearFlash();
 8003bb8:	f7fd f9f2 	bl	8000fa0 <clearFlash>
        int offset=0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f242 0244 	movw	r2, #8260	; 0x2044
 8003bc2:	443a      	add	r2, r7
 8003bc4:	6013      	str	r3, [r2, #0]
        WriteDeviceAddressOffset((char*) &user_info, sizeof(user_info), offset);
 8003bc6:	f242 0344 	movw	r3, #8260	; 0x2044
 8003bca:	443b      	add	r3, r7
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003bd2:	4819      	ldr	r0, [pc, #100]	; (8003c38 <httpd_post_receive_data+0x5f4>)
 8003bd4:	f7fd fa08 	bl	8000fe8 <WriteDeviceAddressOffset>
        offset+=sizeof(user_info);
 8003bd8:	f242 0344 	movw	r3, #8260	; 0x2044
 8003bdc:	443b      	add	r3, r7
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8003be4:	f242 0244 	movw	r2, #8260	; 0x2044
 8003be8:	443a      	add	r2, r7
 8003bea:	6013      	str	r3, [r2, #0]
		/* not returning ERR_OK aborts the connection, so return ERR_OK unless the
       connection is unknown */
		ret = ERR_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f242 0257 	movw	r2, #8279	; 0x2057
 8003bf2:	443a      	add	r2, r7
 8003bf4:	7013      	strb	r3, [r2, #0]
 8003bf6:	e004      	b.n	8003c02 <httpd_post_receive_data+0x5be>
	} else {
		ret = ERR_VAL;
 8003bf8:	23fa      	movs	r3, #250	; 0xfa
 8003bfa:	f242 0257 	movw	r2, #8279	; 0x2057
 8003bfe:	443a      	add	r2, r7
 8003c00:	7013      	strb	r3, [r2, #0]
	}

	/* this function must ALWAYS free the pbuf it is passed or it will leak memory */
	pbuf_free(p);
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <httpd_post_receive_data+0x5fc>)
 8003c04:	f242 0258 	movw	r2, #8280	; 0x2058
 8003c08:	443a      	add	r2, r7
 8003c0a:	4413      	add	r3, r2
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	f00d fb07 	bl	8011220 <pbuf_free>

	return ret;
 8003c12:	f242 0357 	movw	r3, #8279	; 0x2057
 8003c16:	443b      	add	r3, r7
 8003c18:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	ffffdfb4 	.word	0xffffdfb4
 8003c2c:	08024840 	.word	0x08024840
 8003c30:	200052dc 	.word	0x200052dc
 8003c34:	200050cc 	.word	0x200050cc
 8003c38:	200050b8 	.word	0x200050b8
 8003c3c:	200051cb 	.word	0x200051cb
 8003c40:	ffffdfa8 	.word	0xffffdfa8

08003c44 <httpd_post_finished>:

void
httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/404.html");
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4a0f      	ldr	r2, [pc, #60]	; (8003c94 <httpd_post_finished+0x50>)
 8003c56:	4619      	mov	r1, r3
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	f017 fe77 	bl	801b94c <snprintf>
	if (current_connection == connection) {
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <httpd_post_finished+0x54>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d110      	bne.n	8003c8a <httpd_post_finished+0x46>
		if (valid_connection == connection) {
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <httpd_post_finished+0x58>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d105      	bne.n	8003c7e <httpd_post_finished+0x3a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/info.html");
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <httpd_post_finished+0x5c>)
 8003c76:	4619      	mov	r1, r3
 8003c78:	68b8      	ldr	r0, [r7, #8]
 8003c7a:	f017 fe67 	bl	801b94c <snprintf>
		}
		current_connection = NULL;
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <httpd_post_finished+0x54>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <httpd_post_finished+0x58>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0802484c 	.word	0x0802484c
 8003c98:	20000d14 	.word	0x20000d14
 8003c9c:	20000d18 	.word	0x20000d18
 8003ca0:	080247c8 	.word	0x080247c8

08003ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	210f      	movs	r1, #15
 8003cde:	f06f 0001 	mvn.w	r0, #1
 8003ce2:	f000 faeb 	bl	80042bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <HAL_RTC_MspInit+0x2c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d105      	bne.n	8003d12 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_RTC_MspInit+0x30>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0a:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <HAL_RTC_MspInit+0x30>)
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40002800 	.word	0x40002800
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_UART_MspInit+0x8c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d12f      	bne.n	8003daa <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_UART_MspInit+0x90>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a1a      	ldr	r2, [pc, #104]	; (8003db8 <HAL_UART_MspInit+0x90>)
 8003d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <HAL_UART_MspInit+0x90>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <HAL_UART_MspInit+0x90>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_UART_MspInit+0x90>)
 8003d68:	f043 0320 	orr.w	r3, r3, #32
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_UART_MspInit+0x90>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003d7a:	23c0      	movs	r3, #192	; 0xc0
 8003d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d86:	2303      	movs	r3, #3
 8003d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d8e:	f107 0314 	add.w	r3, r7, #20
 8003d92:	4619      	mov	r1, r3
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <HAL_UART_MspInit+0x94>)
 8003d96:	f001 fdd9 	bl	800594c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2105      	movs	r1, #5
 8003d9e:	2052      	movs	r0, #82	; 0x52
 8003da0:	f000 fa8c 	bl	80042bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003da4:	2052      	movs	r0, #82	; 0x52
 8003da6:	f000 faa5 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003daa:	bf00      	nop
 8003dac:	3728      	adds	r7, #40	; 0x28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40007800 	.word	0x40007800
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40021400 	.word	0x40021400

08003dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08c      	sub	sp, #48	; 0x30
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	2036      	movs	r0, #54	; 0x36
 8003dd6:	f000 fa71 	bl	80042bc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003dda:	2036      	movs	r0, #54	; 0x36
 8003ddc:	f000 fa8a 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <HAL_InitTick+0xa0>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <HAL_InitTick+0xa0>)
 8003de6:	f043 0310 	orr.w	r3, r3, #16
 8003dea:	6413      	str	r3, [r2, #64]	; 0x40
 8003dec:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <HAL_InitTick+0xa0>)
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003df8:	f107 0210 	add.w	r2, r7, #16
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f002 fc74 	bl	80066f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003e08:	f002 fc4a 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <HAL_InitTick+0xa4>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0c9b      	lsrs	r3, r3, #18
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e22:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <HAL_InitTick+0xac>)
 8003e24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003e40:	4809      	ldr	r0, [pc, #36]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e42:	f003 fbad 	bl	80075a0 <HAL_TIM_Base_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003e4c:	4806      	ldr	r0, [pc, #24]	; (8003e68 <HAL_InitTick+0xa8>)
 8003e4e:	f003 fc09 	bl	8007664 <HAL_TIM_Base_Start_IT>
 8003e52:	4603      	mov	r3, r0
 8003e54:	e000      	b.n	8003e58 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3730      	adds	r7, #48	; 0x30
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	200054dc 	.word	0x200054dc
 8003e6c:	40001000 	.word	0x40001000

08003e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e74:	e7fe      	b.n	8003e74 <NMI_Handler+0x4>

08003e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7a:	e7fe      	b.n	8003e7a <HardFault_Handler+0x4>

08003e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <MemManage_Handler+0x4>

08003e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <BusFault_Handler+0x4>

08003e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e8c:	e7fe      	b.n	8003e8c <UsageFault_Handler+0x4>

08003e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <TIM6_DAC_IRQHandler+0x10>)
 8003ea2:	f003 fc57 	bl	8007754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	200054dc 	.word	0x200054dc

08003eb0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <ETH_IRQHandler+0x10>)
 8003eb6:	f000 fe9f 	bl	8004bf8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20006e60 	.word	0x20006e60

08003ec4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
//	  } else {
//	    uart7_handler();
//	  }
//	  return;
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <UART7_IRQHandler+0x10>)
 8003eca:	f003 ff79 	bl	8007dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200051e0 	.word	0x200051e0

08003ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
	return 1;
 8003edc:	2301      	movs	r3, #1
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <_kill>:

int _kill(int pid, int sig)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <_kill+0x20>)
 8003ef4:	2216      	movs	r2, #22
 8003ef6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	2000bdec 	.word	0x2000bdec

08003f0c <_exit>:

void _exit (int status)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f14:	f04f 31ff 	mov.w	r1, #4294967295
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ffe5 	bl	8003ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f1e:	e7fe      	b.n	8003f1e <_exit+0x12>

08003f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e00a      	b.n	8003f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f32:	f3af 8000 	nop.w
 8003f36:	4601      	mov	r1, r0
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	60ba      	str	r2, [r7, #8]
 8003f3e:	b2ca      	uxtb	r2, r1
 8003f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	3301      	adds	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	dbf0      	blt.n	8003f32 <_read+0x12>
	}

return len;
 8003f50:	687b      	ldr	r3, [r7, #4]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	return -1;
 8003f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f82:	605a      	str	r2, [r3, #4]
	return 0;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <_isatty>:

int _isatty(int file)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	return 1;
 8003f9a:	2301      	movs	r3, #1
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
	return 0;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <_sbrk+0x5c>)
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <_sbrk+0x60>)
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <_sbrk+0x64>)
 8003fe2:	4a12      	ldr	r2, [pc, #72]	; (800402c <_sbrk+0x68>)
 8003fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <_sbrk+0x64>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d205      	bcs.n	8004000 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003ff4:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <_sbrk+0x6c>)
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	e009      	b.n	8004014 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <_sbrk+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <_sbrk+0x64>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	4a06      	ldr	r2, [pc, #24]	; (8004028 <_sbrk+0x64>)
 8004010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20050000 	.word	0x20050000
 8004024:	00000400 	.word	0x00000400
 8004028:	20000d24 	.word	0x20000d24
 800402c:	2000be00 	.word	0x2000be00
 8004030:	2000bdec 	.word	0x2000bdec

08004034 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004038:	4b06      	ldr	r3, [pc, #24]	; (8004054 <SystemInit+0x20>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <SystemInit+0x20>)
 8004040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000ed00 	.word	0xe000ed00

08004058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800405c:	480d      	ldr	r0, [pc, #52]	; (8004094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800405e:	490e      	ldr	r1, [pc, #56]	; (8004098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004060:	4a0e      	ldr	r2, [pc, #56]	; (800409c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004064:	e002      	b.n	800406c <LoopCopyDataInit>

08004066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406a:	3304      	adds	r3, #4

0800406c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800406c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004070:	d3f9      	bcc.n	8004066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004072:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004074:	4c0b      	ldr	r4, [pc, #44]	; (80040a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004078:	e001      	b.n	800407e <LoopFillZerobss>

0800407a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800407c:	3204      	adds	r2, #4

0800407e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004080:	d3fb      	bcc.n	800407a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004082:	f7ff ffd7 	bl	8004034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004086:	f017 f85b 	bl	801b140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408a:	f7fd f865 	bl	8001158 <main>
  bx  lr    
 800408e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004090:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004098:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 800409c:	0802a464 	.word	0x0802a464
  ldr r2, =_sbss
 80040a0:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 80040a4:	2000be00 	.word	0x2000be00

080040a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040a8:	e7fe      	b.n	80040a8 <ADC_IRQHandler>

080040aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ae:	2003      	movs	r0, #3
 80040b0:	f000 f8f9 	bl	80042a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7ff fe83 	bl	8003dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040ba:	f7ff fdf3 	bl	8003ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_IncTick+0x20>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_IncTick+0x24>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_IncTick+0x24>)
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000024 	.word	0x20000024
 80040e8:	20005528 	.word	0x20005528

080040ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_GetTick+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20005528 	.word	0x20005528

08004104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff ffee 	bl	80040ec <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d005      	beq.n	800412a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_Delay+0x44>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800412a:	bf00      	nop
 800412c:	f7ff ffde 	bl	80040ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d8f7      	bhi.n	800412c <HAL_Delay+0x28>
  {
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000024 	.word	0x20000024

0800414c <__NVIC_SetPriorityGrouping>:
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <__NVIC_SetPriorityGrouping+0x40>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417a:	4a04      	ldr	r2, [pc, #16]	; (800418c <__NVIC_SetPriorityGrouping+0x40>)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	60d3      	str	r3, [r2, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	e000ed00 	.word	0xe000ed00
 8004190:	05fa0000 	.word	0x05fa0000

08004194 <__NVIC_GetPriorityGrouping>:
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	; (80041e8 <__NVIC_EnableIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_SetPriority>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	; (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	; (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <NVIC_EncodePriority>:
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f1c3 0307 	rsb	r3, r3, #7
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf28      	it	cs
 800425e:	2304      	movcs	r3, #4
 8004260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	2b06      	cmp	r3, #6
 8004268:	d902      	bls.n	8004270 <NVIC_EncodePriority+0x30>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b03      	subs	r3, #3
 800426e:	e000      	b.n	8004272 <NVIC_EncodePriority+0x32>
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	401a      	ands	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43d9      	mvns	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4313      	orrs	r3, r2
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	; 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff4c 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042ce:	f7ff ff61 	bl	8004194 <__NVIC_GetPriorityGrouping>
 80042d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f7ff ffb1 	bl	8004240 <NVIC_EncodePriority>
 80042de:	4602      	mov	r2, r0
 80042e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff ff80 	bl	80041ec <__NVIC_SetPriority>
}
 80042ec:	bf00      	nop
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff54 	bl	80041b0 <__NVIC_EnableIRQ>
}
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800431e:	f7ff fee5 	bl	80040ec <HAL_GetTick>
 8004322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d008      	beq.n	8004342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e052      	b.n	80043e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0216 	bic.w	r2, r2, #22
 8004350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_DMA_Abort+0x62>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0208 	bic.w	r2, r2, #8
 8004380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0201 	bic.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004392:	e013      	b.n	80043bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004394:	f7ff feaa 	bl	80040ec <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d90c      	bls.n	80043bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2203      	movs	r2, #3
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e015      	b.n	80043e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e4      	bne.n	8004394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ce:	223f      	movs	r2, #63	; 0x3f
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d004      	beq.n	800440e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e00c      	b.n	8004428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2205      	movs	r2, #5
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004444:	4ba9      	ldr	r3, [pc, #676]	; (80046ec <HAL_ETH_Init+0x2b8>)
 8004446:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e181      	b.n	800475e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f004 ffb0 	bl	80093d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004474:	4b9e      	ldr	r3, [pc, #632]	; (80046f0 <HAL_ETH_Init+0x2bc>)
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	4a9d      	ldr	r2, [pc, #628]	; (80046f0 <HAL_ETH_Init+0x2bc>)
 800447a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800447e:	6453      	str	r3, [r2, #68]	; 0x44
 8004480:	4b9b      	ldr	r3, [pc, #620]	; (80046f0 <HAL_ETH_Init+0x2bc>)
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800448c:	4b99      	ldr	r3, [pc, #612]	; (80046f4 <HAL_ETH_Init+0x2c0>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a98      	ldr	r2, [pc, #608]	; (80046f4 <HAL_ETH_Init+0x2c0>)
 8004492:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004496:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004498:	4b96      	ldr	r3, [pc, #600]	; (80046f4 <HAL_ETH_Init+0x2c0>)
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4994      	ldr	r1, [pc, #592]	; (80046f4 <HAL_ETH_Init+0x2c0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0201 	orr.w	r2, r2, #1
 80044b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044bc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80044be:	f7ff fe15 	bl	80040ec <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80044c4:	e011      	b.n	80044ea <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80044c6:	f7ff fe11 	bl	80040ec <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044d4:	d909      	bls.n	80044ea <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e139      	b.n	800475e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e4      	bne.n	80044c6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f023 031c 	bic.w	r3, r3, #28
 800450a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800450c:	f002 f8bc 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 8004510:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4a78      	ldr	r2, [pc, #480]	; (80046f8 <HAL_ETH_Init+0x2c4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d908      	bls.n	800452c <HAL_ETH_Init+0xf8>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	4a77      	ldr	r2, [pc, #476]	; (80046fc <HAL_ETH_Init+0x2c8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d804      	bhi.n	800452c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f043 0308 	orr.w	r3, r3, #8
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e027      	b.n	800457c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	4a73      	ldr	r2, [pc, #460]	; (80046fc <HAL_ETH_Init+0x2c8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d908      	bls.n	8004546 <HAL_ETH_Init+0x112>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4a6d      	ldr	r2, [pc, #436]	; (80046ec <HAL_ETH_Init+0x2b8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d204      	bcs.n	8004546 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f043 030c 	orr.w	r3, r3, #12
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e01a      	b.n	800457c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4a68      	ldr	r2, [pc, #416]	; (80046ec <HAL_ETH_Init+0x2b8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d303      	bcc.n	8004556 <HAL_ETH_Init+0x122>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	4a6b      	ldr	r2, [pc, #428]	; (8004700 <HAL_ETH_Init+0x2cc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d911      	bls.n	800457a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4a69      	ldr	r2, [pc, #420]	; (8004700 <HAL_ETH_Init+0x2cc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d908      	bls.n	8004570 <HAL_ETH_Init+0x13c>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4a68      	ldr	r2, [pc, #416]	; (8004704 <HAL_ETH_Init+0x2d0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d804      	bhi.n	8004570 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e005      	b.n	800457c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e000      	b.n	800457c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800457a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004584:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004588:	2100      	movs	r1, #0
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fc17 	bl	8004dbe <HAL_ETH_WritePHYRegister>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800459a:	6939      	ldr	r1, [r7, #16]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fca3 	bl	8004ee8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0d7      	b.n	800475e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80045ae:	20ff      	movs	r0, #255	; 0xff
 80045b0:	f7ff fda8 	bl	8004104 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80a5 	beq.w	8004708 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80045be:	f7ff fd95 	bl	80040ec <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	461a      	mov	r2, r3
 80045ca:	2101      	movs	r1, #1
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb8e 	bl	8004cee <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80045d2:	f7ff fd8b 	bl	80040ec <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d90f      	bls.n	8004604 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fc7c 	bl	8004ee8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0ac      	b.n	800475e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0da      	beq.n	80045c4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800460e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004612:	2100      	movs	r1, #0
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fbd2 	bl	8004dbe <HAL_ETH_WritePHYRegister>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004624:	6939      	ldr	r1, [r7, #16]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fc5e 	bl	8004ee8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004634:	2301      	movs	r3, #1
 8004636:	e092      	b.n	800475e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004638:	f7ff fd58 	bl	80040ec <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800463e:	f107 030c 	add.w	r3, r7, #12
 8004642:	461a      	mov	r2, r3
 8004644:	2101      	movs	r1, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fb51 	bl	8004cee <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800464c:	f7ff fd4e 	bl	80040ec <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d90f      	bls.n	800467e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004662:	6939      	ldr	r1, [r7, #16]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fc3f 	bl	8004ee8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e06f      	b.n	800475e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0da      	beq.n	800463e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	461a      	mov	r2, r3
 800468e:	2110      	movs	r1, #16
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fb2c 	bl	8004cee <HAL_ETH_ReadPHYRegister>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00b      	beq.n	80046b4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80046a0:	6939      	ldr	r1, [r7, #16]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fc20 	bl	8004ee8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80046b0:	2301      	movs	r3, #1
 80046b2:	e054      	b.n	800475e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e002      	b.n	80046ce <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	e035      	b.n	800474c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	e030      	b.n	800474c <HAL_ETH_Init+0x318>
 80046ea:	bf00      	nop
 80046ec:	03938700 	.word	0x03938700
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40013800 	.word	0x40013800
 80046f8:	01312cff 	.word	0x01312cff
 80046fc:	02160ebf 	.word	0x02160ebf
 8004700:	05f5e0ff 	.word	0x05f5e0ff
 8004704:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	08db      	lsrs	r3, r3, #3
 800470e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004718:	4313      	orrs	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	2100      	movs	r1, #0
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fb4c 	bl	8004dbe <HAL_ETH_WritePHYRegister>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004730:	6939      	ldr	r1, [r7, #16]
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fbd8 	bl	8004ee8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e00c      	b.n	800475e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004744:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004748:	f7ff fcdc 	bl	8004104 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800474c:	6939      	ldr	r1, [r7, #16]
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fbca 	bl	8004ee8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop

08004768 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_ETH_DMATxDescListInit+0x20>
 8004784:	2302      	movs	r3, #2
 8004786:	e052      	b.n	800482e <HAL_ETH_DMATxDescListInit+0xc6>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e030      	b.n	8004806 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	015b      	lsls	r3, r3, #5
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4413      	add	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047b4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047bc:	fb02 f303 	mul.w	r3, r2, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4413      	add	r3, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d105      	bne.n	80047de <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d208      	bcs.n	80047fa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3301      	adds	r3, #1
 80047ec:	015b      	lsls	r3, r3, #5
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	461a      	mov	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	e002      	b.n	8004800 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3301      	adds	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3ca      	bcc.n	80047a4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	f241 0310 	movw	r3, #4112	; 0x1010
 8004818:	440b      	add	r3, r1
 800481a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_ETH_DMARxDescListInit+0x20>
 8004856:	2302      	movs	r3, #2
 8004858:	e056      	b.n	8004908 <HAL_ETH_DMARxDescListInit+0xce>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e034      	b.n	80048e0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	015b      	lsls	r3, r3, #5
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004886:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800488e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	461a      	mov	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d208      	bcs.n	80048d4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3301      	adds	r3, #1
 80048c6:	015b      	lsls	r3, r3, #5
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	4413      	add	r3, r2
 80048cc:	461a      	mov	r2, r3
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	e002      	b.n	80048da <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3301      	adds	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d3c6      	bcc.n	8004876 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6819      	ldr	r1, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	f241 030c 	movw	r3, #4108	; 0x100c
 80048f2:	440b      	add	r3, r1
 80048f4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_ETH_TransmitFrame+0x24>
 8004934:	2302      	movs	r3, #2
 8004936:	e0cd      	b.n	8004ad4 <HAL_ETH_TransmitFrame+0x1c0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800495e:	2301      	movs	r3, #1
 8004960:	e0b8      	b.n	8004ad4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	da09      	bge.n	8004980 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2212      	movs	r2, #18
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0a9      	b.n	8004ad4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004986:	4293      	cmp	r3, r2
 8004988:	d915      	bls.n	80049b6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4a54      	ldr	r2, [pc, #336]	; (8004ae0 <HAL_ETH_TransmitFrame+0x1cc>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_ETH_TransmitFrame+0x1cc>)
 800499a:	fba3 1302 	umull	r1, r3, r3, r2
 800499e:	0a9b      	lsrs	r3, r3, #10
 80049a0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e001      	b.n	80049ba <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d11c      	bne.n	80049fa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80049ce:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80049da:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80049ea:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	461a      	mov	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049f8:	e04b      	b.n	8004a92 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	e044      	b.n	8004a8a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a0e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d107      	bne.n	8004a26 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a2e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d116      	bne.n	8004a68 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004a48:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <HAL_ETH_TransmitFrame+0x1d0>)
 8004a4e:	fb02 f203 	mul.w	r2, r2, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a5a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004a66:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004a76:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3301      	adds	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d3b6      	bcc.n	8004a00 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	f241 0314 	movw	r3, #4116	; 0x1014
 8004a9a:	4413      	add	r3, r2
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	f241 0314 	movw	r3, #4116	; 0x1014
 8004aae:	4413      	add	r3, r2
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	f241 0304 	movw	r3, #4100	; 0x1004
 8004abc:	4413      	add	r3, r2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	ac02b00b 	.word	0xac02b00b
 8004ae4:	fffffa0c 	.word	0xfffffa0c

08004ae8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e074      	b.n	8004bec <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004b12:	e05a      	b.n	8004bca <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b28:	d10d      	bne.n	8004b46 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
 8004b44:	e041      	b.n	8004bca <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	461a      	mov	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	629a      	str	r2, [r3, #40]	; 0x28
 8004b6a:	e02e      	b.n	8004bca <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d103      	bne.n	8004b8e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0c1b      	lsrs	r3, r3, #16
 8004b96:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004b9a:	1f1a      	subs	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e010      	b.n	8004bec <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db02      	blt.n	8004bda <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d99c      	bls.n	8004b14 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c08:	4413      	add	r3, r2
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d112      	bne.n	8004c3a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f004 fc7f 	bl	8009518 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c22:	4413      	add	r3, r2
 8004c24:	2240      	movs	r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c38:	e01b      	b.n	8004c72 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c42:	4413      	add	r3, r2
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d111      	bne.n	8004c72 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f839 	bl	8004cc6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c5c:	4413      	add	r3, r2
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c80:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c8a:	4413      	add	r3, r2
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c96:	d112      	bne.n	8004cbe <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f81e 	bl	8004cda <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cac:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b086      	sub	sp, #24
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b82      	cmp	r3, #130	; 0x82
 8004d0e:	d101      	bne.n	8004d14 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	e050      	b.n	8004db6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2282      	movs	r2, #130	; 0x82
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f003 031c 	and.w	r3, r3, #28
 8004d2a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8a1b      	ldrh	r3, [r3, #16]
 8004d30:	02db      	lsls	r3, r3, #11
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004d3a:	897b      	ldrh	r3, [r7, #10]
 8004d3c:	019b      	lsls	r3, r3, #6
 8004d3e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 0302 	bic.w	r3, r3, #2
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d60:	f7ff f9c4 	bl	80040ec <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d66:	e015      	b.n	8004d94 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004d68:	f7ff f9c0 	bl	80040ec <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d76:	d309      	bcc.n	8004d8c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e014      	b.n	8004db6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e4      	bne.n	8004d68 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b42      	cmp	r3, #66	; 0x42
 8004dde:	d101      	bne.n	8004de4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
 8004de2:	e04e      	b.n	8004e82 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2242      	movs	r2, #66	; 0x42
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 031c 	and.w	r3, r3, #28
 8004dfa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8a1b      	ldrh	r3, [r3, #16]
 8004e00:	02db      	lsls	r3, r3, #11
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004e0a:	897b      	ldrh	r3, [r7, #10]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f043 0302 	orr.w	r3, r3, #2
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e3a:	f7ff f957 	bl	80040ec <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e40:	e015      	b.n	8004e6e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004e42:	f7ff f953 	bl	80040ec <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d309      	bcc.n	8004e66 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00d      	b.n	8004e82 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e4      	bne.n	8004e42 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ETH_Start+0x16>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e01f      	b.n	8004ee0 <HAL_ETH_Start+0x56>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa1b 	bl	80052ec <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa35 	bl	8005326 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fa7f 	bl	80053c0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa4c 	bl	8005360 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa61 	bl	8005390 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b0b0      	sub	sp, #192	; 0xc0
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f04:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004f16:	2300      	movs	r3, #0
 8004f18:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f32:	663b      	str	r3, [r7, #96]	; 0x60
 8004f34:	e001      	b.n	8004f3a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f44:	2300      	movs	r3, #0
 8004f46:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004f54:	2340      	movs	r3, #64	; 0x40
 8004f56:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004fbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004fc0:	4bab      	ldr	r3, [pc, #684]	; (8005270 <ETH_MACDMAConfig+0x388>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004fcc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004fd0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004fd4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004fda:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004fde:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004fe2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004fe8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004fec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004ff0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004ff4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004ff8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004ffc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004ffe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005010:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800501c:	2001      	movs	r0, #1
 800501e:	f7ff f871 	bl	8004104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800502a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800502c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800502e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005030:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005034:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800503a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800503c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005040:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005042:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005046:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800504c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005050:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005058:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800505a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005066:	2001      	movs	r0, #1
 8005068:	f7ff f84c 	bl	8004104 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005074:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800507e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005088:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005094:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005098:	f64f 7341 	movw	r3, #65345	; 0xff41
 800509c:	4013      	ands	r3, r2
 800509e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80050a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80050a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80050ac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80050ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80050b2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80050b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80050b8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80050ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80050be:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80050c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80050c4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80050c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050d8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80050e4:	2001      	movs	r0, #1
 80050e6:	f7ff f80d 	bl	8004104 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80050f2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80050f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80050f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800510e:	2001      	movs	r0, #1
 8005110:	f7fe fff8 	bl	8004104 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800511c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005126:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800512c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005130:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800513a:	2300      	movs	r3, #0
 800513c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800513e:	2300      	movs	r3, #0
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005142:	2304      	movs	r3, #4
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800514c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005150:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800515c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005162:	2300      	movs	r3, #0
 8005164:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005166:	2300      	movs	r3, #0
 8005168:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	f241 0318 	movw	r3, #4120	; 0x1018
 8005172:	4413      	add	r3, r2
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800517a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800517e:	4b3d      	ldr	r3, [pc, #244]	; (8005274 <ETH_MACDMAConfig+0x38c>)
 8005180:	4013      	ands	r3, r2
 8005182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005186:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005188:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800518a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800518c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800518e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005190:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005192:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005194:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005196:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005198:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800519a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800519c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800519e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80051a2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80051a6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80051a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	f241 0318 	movw	r3, #4120	; 0x1018
 80051ba:	4413      	add	r3, r2
 80051bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051c0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80051ca:	4413      	add	r3, r2
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80051d2:	2001      	movs	r0, #1
 80051d4:	f7fe ff96 	bl	8004104 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80051e0:	4413      	add	r3, r2
 80051e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051e6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80051e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80051ec:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80051f0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80051f4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80051f8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80051fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80051fe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8005202:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800520c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005210:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005220:	2001      	movs	r0, #1
 8005222:	f7fe ff6f 	bl	8004104 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005232:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10d      	bne.n	8005258 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	f241 031c 	movw	r3, #4124	; 0x101c
 8005244:	4413      	add	r3, r2
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6811      	ldr	r1, [r2, #0]
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <ETH_MACDMAConfig+0x390>)
 800524e:	431a      	orrs	r2, r3
 8005250:	f241 031c 	movw	r3, #4124	; 0x101c
 8005254:	440b      	add	r3, r1
 8005256:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	461a      	mov	r2, r3
 800525e:	2100      	movs	r1, #0
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f80b 	bl	800527c <ETH_MACAddressConfig>
}
 8005266:	bf00      	nop
 8005268:	37c0      	adds	r7, #192	; 0xc0
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	ff20810f 	.word	0xff20810f
 8005274:	f8de3f23 	.word	0xf8de3f23
 8005278:	00010040 	.word	0x00010040

0800527c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3305      	adds	r3, #5
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	3204      	adds	r2, #4
 8005294:	7812      	ldrb	r2, [r2, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <ETH_MACAddressConfig+0x68>)
 800529e:	4413      	add	r3, r2
 80052a0:	461a      	mov	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3303      	adds	r3, #3
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	061a      	lsls	r2, r3, #24
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3302      	adds	r3, #2
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3301      	adds	r3, #1
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	4313      	orrs	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	7812      	ldrb	r2, [r2, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <ETH_MACAddressConfig+0x6c>)
 80052ce:	4413      	add	r3, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	6013      	str	r3, [r2, #0]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40028040 	.word	0x40028040
 80052e8:	40028044 	.word	0x40028044

080052ec <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005310:	2001      	movs	r0, #1
 8005312:	f7fe fef7 	bl	8004104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0204 	orr.w	r2, r2, #4
 8005340:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800534a:	2001      	movs	r0, #1
 800534c:	f7fe feda 	bl	8004104 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005370:	4413      	add	r3, r2
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6811      	ldr	r1, [r2, #0]
 8005378:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800537c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005380:	440b      	add	r3, r1
 8005382:	601a      	str	r2, [r3, #0]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f241 0318 	movw	r3, #4120	; 0x1018
 80053a0:	4413      	add	r3, r2
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6811      	ldr	r1, [r2, #0]
 80053a8:	f043 0202 	orr.w	r2, r3, #2
 80053ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80053b0:	440b      	add	r3, r1
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80053d4:	4413      	add	r3, r2
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6811      	ldr	r1, [r2, #0]
 80053dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80053e4:	440b      	add	r3, r1
 80053e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80053f0:	4413      	add	r3, r2
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80053f6:	2001      	movs	r0, #1
 80053f8:	f7fe fe84 	bl	8004104 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	f241 0318 	movw	r3, #4120	; 0x1018
 8005406:	440b      	add	r3, r1
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_FLASH_Program+0xb0>)
 8005428:	7d1b      	ldrb	r3, [r3, #20]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_FLASH_Program+0x1e>
 800542e:	2302      	movs	r3, #2
 8005430:	e043      	b.n	80054ba <HAL_FLASH_Program+0xa6>
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_FLASH_Program+0xb0>)
 8005434:	2201      	movs	r2, #1
 8005436:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005438:	f24c 3050 	movw	r0, #50000	; 0xc350
 800543c:	f000 f878 	bl	8005530 <FLASH_WaitForLastOperation>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d133      	bne.n	80054b2 <HAL_FLASH_Program+0x9e>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d823      	bhi.n	8005498 <HAL_FLASH_Program+0x84>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <HAL_FLASH_Program+0x44>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	08005469 	.word	0x08005469
 800545c:	08005475 	.word	0x08005475
 8005460:	08005481 	.word	0x08005481
 8005464:	0800548d 	.word	0x0800548d
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8005468:	783b      	ldrb	r3, [r7, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	68b8      	ldr	r0, [r7, #8]
 800546e:	f000 f921 	bl	80056b4 <FLASH_Program_Byte>
        break;
 8005472:	e012      	b.n	800549a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005474:	883b      	ldrh	r3, [r7, #0]
 8005476:	4619      	mov	r1, r3
 8005478:	68b8      	ldr	r0, [r7, #8]
 800547a:	f000 f8f5 	bl	8005668 <FLASH_Program_HalfWord>
        break;
 800547e:	e00c      	b.n	800549a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4619      	mov	r1, r3
 8005484:	68b8      	ldr	r0, [r7, #8]
 8005486:	f000 f8c9 	bl	800561c <FLASH_Program_Word>
        break;
 800548a:	e006      	b.n	800549a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800548c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005490:	68b8      	ldr	r0, [r7, #8]
 8005492:	f000 f88d 	bl	80055b0 <FLASH_Program_DoubleWord>
        break;
 8005496:	e000      	b.n	800549a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8005498:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800549a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800549e:	f000 f847 	bl	8005530 <FLASH_WaitForLastOperation>
 80054a2:	4603      	mov	r3, r0
 80054a4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <HAL_FLASH_Program+0xb4>)
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <HAL_FLASH_Program+0xb4>)
 80054ac:	f023 0301 	bic.w	r3, r3, #1
 80054b0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_FLASH_Program+0xb0>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	751a      	strb	r2, [r3, #20]

  return status;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	2000552c 	.word	0x2000552c
 80054c8:	40023c00 	.word	0x40023c00

080054cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_FLASH_Unlock+0x38>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da0b      	bge.n	80054f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_FLASH_Unlock+0x38>)
 80054e0:	4a09      	ldr	r2, [pc, #36]	; (8005508 <HAL_FLASH_Unlock+0x3c>)
 80054e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80054e4:	4b07      	ldr	r3, [pc, #28]	; (8005504 <HAL_FLASH_Unlock+0x38>)
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <HAL_FLASH_Unlock+0x40>)
 80054e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_FLASH_Unlock+0x38>)
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da01      	bge.n	80054f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80054f6:	79fb      	ldrb	r3, [r7, #7]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	40023c00 	.word	0x40023c00
 8005508:	45670123 	.word	0x45670123
 800550c:	cdef89ab 	.word	0xcdef89ab

08005510 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_FLASH_Lock+0x1c>)
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <HAL_FLASH_Lock+0x1c>)
 800551a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800551e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40023c00 	.word	0x40023c00

08005530 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800553c:	4b1a      	ldr	r3, [pc, #104]	; (80055a8 <FLASH_WaitForLastOperation+0x78>)
 800553e:	2200      	movs	r2, #0
 8005540:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005542:	f7fe fdd3 	bl	80040ec <HAL_GetTick>
 8005546:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005548:	e010      	b.n	800556c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d00c      	beq.n	800556c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <FLASH_WaitForLastOperation+0x38>
 8005558:	f7fe fdc8 	bl	80040ec <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d201      	bcs.n	800556c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e019      	b.n	80055a0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800556c:	4b0f      	ldr	r3, [pc, #60]	; (80055ac <FLASH_WaitForLastOperation+0x7c>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e8      	bne.n	800554a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <FLASH_WaitForLastOperation+0x7c>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005584:	f000 f8ba 	bl	80056fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e009      	b.n	80055a0 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <FLASH_WaitForLastOperation+0x7c>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <FLASH_WaitForLastOperation+0x7c>)
 800559a:	2201      	movs	r2, #1
 800559c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
  
}  
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2000552c 	.word	0x2000552c
 80055ac:	40023c00 	.word	0x40023c00

080055b0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80055bc:	4b16      	ldr	r3, [pc, #88]	; (8005618 <FLASH_Program_DoubleWord+0x68>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <FLASH_Program_DoubleWord+0x68>)
 80055c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <FLASH_Program_DoubleWord+0x68>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4a12      	ldr	r2, [pc, #72]	; (8005618 <FLASH_Program_DoubleWord+0x68>)
 80055ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80055d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80055d4:	4b10      	ldr	r3, [pc, #64]	; (8005618 <FLASH_Program_DoubleWord+0x68>)
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	4a0f      	ldr	r2, [pc, #60]	; (8005618 <FLASH_Program_DoubleWord+0x68>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80055e6:	f3bf 8f6f 	isb	sy
}
 80055ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80055ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	000a      	movs	r2, r1
 80055fa:	2300      	movs	r3, #0
 80055fc:	68f9      	ldr	r1, [r7, #12]
 80055fe:	3104      	adds	r1, #4
 8005600:	4613      	mov	r3, r2
 8005602:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005604:	f3bf 8f4f 	dsb	sy
}
 8005608:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023c00 	.word	0x40023c00

0800561c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005626:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <FLASH_Program_Word+0x48>)
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <FLASH_Program_Word+0x48>)
 800562c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005630:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005632:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <FLASH_Program_Word+0x48>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	4a0b      	ldr	r2, [pc, #44]	; (8005664 <FLASH_Program_Word+0x48>)
 8005638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800563c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <FLASH_Program_Word+0x48>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	4a08      	ldr	r2, [pc, #32]	; (8005664 <FLASH_Program_Word+0x48>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005650:	f3bf 8f4f 	dsb	sy
}
 8005654:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40023c00 	.word	0x40023c00

08005668 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <FLASH_Program_HalfWord+0x48>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	4a0d      	ldr	r2, [pc, #52]	; (80056b0 <FLASH_Program_HalfWord+0x48>)
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <FLASH_Program_HalfWord+0x48>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4a0a      	ldr	r2, [pc, #40]	; (80056b0 <FLASH_Program_HalfWord+0x48>)
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800568c:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <FLASH_Program_HalfWord+0x48>)
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	4a07      	ldr	r2, [pc, #28]	; (80056b0 <FLASH_Program_HalfWord+0x48>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	887a      	ldrh	r2, [r7, #2]
 800569c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800569e:	f3bf 8f4f 	dsb	sy
}
 80056a2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40023c00 	.word	0x40023c00

080056b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <FLASH_Program_Byte+0x44>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <FLASH_Program_Byte+0x44>)
 80056c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80056cc:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <FLASH_Program_Byte+0x44>)
 80056ce:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <FLASH_Program_Byte+0x44>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <FLASH_Program_Byte+0x44>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	4a07      	ldr	r2, [pc, #28]	; (80056f8 <FLASH_Program_Byte+0x44>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80056e6:	f3bf 8f4f 	dsb	sy
}
 80056ea:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40023c00 	.word	0x40023c00

080056fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005700:	4b21      	ldr	r3, [pc, #132]	; (8005788 <FLASH_SetErrorCode+0x8c>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800570c:	4b1f      	ldr	r3, [pc, #124]	; (800578c <FLASH_SetErrorCode+0x90>)
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f043 0320 	orr.w	r3, r3, #32
 8005714:	4a1d      	ldr	r2, [pc, #116]	; (800578c <FLASH_SetErrorCode+0x90>)
 8005716:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <FLASH_SetErrorCode+0x8c>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <FLASH_SetErrorCode+0x90>)
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f043 0310 	orr.w	r3, r3, #16
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <FLASH_SetErrorCode+0x90>)
 800572e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005730:	4b15      	ldr	r3, [pc, #84]	; (8005788 <FLASH_SetErrorCode+0x8c>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800573c:	4b13      	ldr	r3, [pc, #76]	; (800578c <FLASH_SetErrorCode+0x90>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f043 0308 	orr.w	r3, r3, #8
 8005744:	4a11      	ldr	r2, [pc, #68]	; (800578c <FLASH_SetErrorCode+0x90>)
 8005746:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <FLASH_SetErrorCode+0x8c>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <FLASH_SetErrorCode+0x90>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f043 0304 	orr.w	r3, r3, #4
 800575c:	4a0b      	ldr	r2, [pc, #44]	; (800578c <FLASH_SetErrorCode+0x90>)
 800575e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <FLASH_SetErrorCode+0x8c>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <FLASH_SetErrorCode+0x90>)
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	4a05      	ldr	r2, [pc, #20]	; (800578c <FLASH_SetErrorCode+0x90>)
 8005776:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <FLASH_SetErrorCode+0x8c>)
 800577a:	22f2      	movs	r2, #242	; 0xf2
 800577c:	60da      	str	r2, [r3, #12]
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40023c00 	.word	0x40023c00
 800578c:	2000552c 	.word	0x2000552c

08005790 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057a2:	4b2f      	ldr	r3, [pc, #188]	; (8005860 <HAL_FLASHEx_Erase+0xd0>)
 80057a4:	7d1b      	ldrb	r3, [r3, #20]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_FLASHEx_Erase+0x1e>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e053      	b.n	8005856 <HAL_FLASHEx_Erase+0xc6>
 80057ae:	4b2c      	ldr	r3, [pc, #176]	; (8005860 <HAL_FLASHEx_Erase+0xd0>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057b8:	f7ff feba 	bl	8005530 <FLASH_WaitForLastOperation>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d143      	bne.n	800584e <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d112      	bne.n	80057fc <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f843 	bl	8005868 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80057e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80057e6:	f7ff fea3 	bl	8005530 <FLASH_WaitForLastOperation>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_FLASHEx_Erase+0xd4>)
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_FLASHEx_Erase+0xd4>)
 80057f4:	f023 0304 	bic.w	r3, r3, #4
 80057f8:	6113      	str	r3, [r2, #16]
 80057fa:	e028      	b.n	800584e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	e01c      	b.n	800583e <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	4619      	mov	r1, r3
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f000 f851 	bl	80058b4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005812:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005816:	f7ff fe8b 	bl	8005530 <FLASH_WaitForLastOperation>
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <HAL_FLASHEx_Erase+0xd4>)
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <HAL_FLASHEx_Erase+0xd4>)
 8005824:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8005828:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	601a      	str	r2, [r3, #0]
          break;
 8005836:	e00a      	b.n	800584e <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	3301      	adds	r3, #1
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4413      	add	r3, r2
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d3da      	bcc.n	8005804 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800584e:	4b04      	ldr	r3, [pc, #16]	; (8005860 <HAL_FLASHEx_Erase+0xd0>)
 8005850:	2200      	movs	r2, #0
 8005852:	751a      	strb	r2, [r3, #20]

  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	2000552c 	.word	0x2000552c
 8005864:	40023c00 	.word	0x40023c00

08005868 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8005872:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <FLASH_MassErase+0x48>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	4a0e      	ldr	r2, [pc, #56]	; (80058b0 <FLASH_MassErase+0x48>)
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800587e:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <FLASH_MassErase+0x48>)
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	4a0b      	ldr	r2, [pc, #44]	; (80058b0 <FLASH_MassErase+0x48>)
 8005884:	f043 0304 	orr.w	r3, r3, #4
 8005888:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <FLASH_MassErase+0x48>)
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	4313      	orrs	r3, r2
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <FLASH_MassErase+0x48>)
 8005896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800589c:	f3bf 8f4f 	dsb	sy
}
 80058a0:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40023c00 	.word	0x40023c00

080058b4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	e010      	b.n	80058f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d103      	bne.n	80058de <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80058d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	e009      	b.n	80058f2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d103      	bne.n	80058ec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80058e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e002      	b.n	80058f2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80058ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <FLASH_Erase_Sector+0x94>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <FLASH_Erase_Sector+0x94>)
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <FLASH_Erase_Sector+0x94>)
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	4911      	ldr	r1, [pc, #68]	; (8005948 <FLASH_Erase_Sector+0x94>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <FLASH_Erase_Sector+0x94>)
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <FLASH_Erase_Sector+0x94>)
 8005910:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005914:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <FLASH_Erase_Sector+0x94>)
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	4313      	orrs	r3, r2
 8005920:	4a09      	ldr	r2, [pc, #36]	; (8005948 <FLASH_Erase_Sector+0x94>)
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <FLASH_Erase_Sector+0x94>)
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	4a06      	ldr	r2, [pc, #24]	; (8005948 <FLASH_Erase_Sector+0x94>)
 800592e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005932:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005934:	f3bf 8f4f 	dsb	sy
}
 8005938:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40023c00 	.word	0x40023c00

0800594c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800594c:	b480      	push	{r7}
 800594e:	b089      	sub	sp, #36	; 0x24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800595e:	2300      	movs	r3, #0
 8005960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	e175      	b.n	8005c58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800596c:	2201      	movs	r2, #1
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	f040 8164 	bne.w	8005c52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d005      	beq.n	80059a2 <HAL_GPIO_Init+0x56>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d130      	bne.n	8005a04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	2203      	movs	r2, #3
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	43db      	mvns	r3, r3
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	4013      	ands	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059d8:	2201      	movs	r2, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43db      	mvns	r3, r3
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 0201 	and.w	r2, r3, #1
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d017      	beq.n	8005a40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d123      	bne.n	8005a94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	08da      	lsrs	r2, r3, #3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3208      	adds	r2, #8
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	220f      	movs	r2, #15
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	08da      	lsrs	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3208      	adds	r2, #8
 8005a8e:	69b9      	ldr	r1, [r7, #24]
 8005a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0203 	and.w	r2, r3, #3
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80be 	beq.w	8005c52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad6:	4b66      	ldr	r3, [pc, #408]	; (8005c70 <HAL_GPIO_Init+0x324>)
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	4a65      	ldr	r2, [pc, #404]	; (8005c70 <HAL_GPIO_Init+0x324>)
 8005adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8005ae2:	4b63      	ldr	r3, [pc, #396]	; (8005c70 <HAL_GPIO_Init+0x324>)
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005aee:	4a61      	ldr	r2, [pc, #388]	; (8005c74 <HAL_GPIO_Init+0x328>)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	3302      	adds	r3, #2
 8005af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	220f      	movs	r2, #15
 8005b06:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4013      	ands	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a58      	ldr	r2, [pc, #352]	; (8005c78 <HAL_GPIO_Init+0x32c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d037      	beq.n	8005b8a <HAL_GPIO_Init+0x23e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a57      	ldr	r2, [pc, #348]	; (8005c7c <HAL_GPIO_Init+0x330>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d031      	beq.n	8005b86 <HAL_GPIO_Init+0x23a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a56      	ldr	r2, [pc, #344]	; (8005c80 <HAL_GPIO_Init+0x334>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02b      	beq.n	8005b82 <HAL_GPIO_Init+0x236>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a55      	ldr	r2, [pc, #340]	; (8005c84 <HAL_GPIO_Init+0x338>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d025      	beq.n	8005b7e <HAL_GPIO_Init+0x232>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a54      	ldr	r2, [pc, #336]	; (8005c88 <HAL_GPIO_Init+0x33c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01f      	beq.n	8005b7a <HAL_GPIO_Init+0x22e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a53      	ldr	r2, [pc, #332]	; (8005c8c <HAL_GPIO_Init+0x340>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d019      	beq.n	8005b76 <HAL_GPIO_Init+0x22a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a52      	ldr	r2, [pc, #328]	; (8005c90 <HAL_GPIO_Init+0x344>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_GPIO_Init+0x226>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a51      	ldr	r2, [pc, #324]	; (8005c94 <HAL_GPIO_Init+0x348>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00d      	beq.n	8005b6e <HAL_GPIO_Init+0x222>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a50      	ldr	r2, [pc, #320]	; (8005c98 <HAL_GPIO_Init+0x34c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <HAL_GPIO_Init+0x21e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a4f      	ldr	r2, [pc, #316]	; (8005c9c <HAL_GPIO_Init+0x350>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d101      	bne.n	8005b66 <HAL_GPIO_Init+0x21a>
 8005b62:	2309      	movs	r3, #9
 8005b64:	e012      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b66:	230a      	movs	r3, #10
 8005b68:	e010      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	e00e      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b6e:	2307      	movs	r3, #7
 8005b70:	e00c      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b72:	2306      	movs	r3, #6
 8005b74:	e00a      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b76:	2305      	movs	r3, #5
 8005b78:	e008      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	e006      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e004      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e002      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <HAL_GPIO_Init+0x240>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	f002 0203 	and.w	r2, r2, #3
 8005b92:	0092      	lsls	r2, r2, #2
 8005b94:	4093      	lsls	r3, r2
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b9c:	4935      	ldr	r1, [pc, #212]	; (8005c74 <HAL_GPIO_Init+0x328>)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	089b      	lsrs	r3, r3, #2
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005baa:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bce:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bd4:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bfe:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	43db      	mvns	r3, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c22:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c28:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <HAL_GPIO_Init+0x354>)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	f67f ae86 	bls.w	800596c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40023800 	.word	0x40023800
 8005c74:	40013800 	.word	0x40013800
 8005c78:	40020000 	.word	0x40020000
 8005c7c:	40020400 	.word	0x40020400
 8005c80:	40020800 	.word	0x40020800
 8005c84:	40020c00 	.word	0x40020c00
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40021400 	.word	0x40021400
 8005c90:	40021800 	.word	0x40021800
 8005c94:	40021c00 	.word	0x40021c00
 8005c98:	40022000 	.word	0x40022000
 8005c9c:	40022400 	.word	0x40022400
 8005ca0:	40013c00 	.word	0x40013c00

08005ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]
 8005cc0:	e001      	b.n	8005cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ce4:	787b      	ldrb	r3, [r7, #1]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cf0:	e003      	b.n	8005cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cf2:	887b      	ldrh	r3, [r7, #2]
 8005cf4:	041a      	lsls	r2, r3, #16
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	619a      	str	r2, [r3, #24]
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d18:	887a      	ldrh	r2, [r7, #2]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	041a      	lsls	r2, r3, #16
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	43d9      	mvns	r1, r3
 8005d24:	887b      	ldrh	r3, [r7, #2]
 8005d26:	400b      	ands	r3, r1
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	619a      	str	r2, [r3, #24]
}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d40:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40007000 	.word	0x40007000

08005d5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d66:	4b23      	ldr	r3, [pc, #140]	; (8005df4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d70:	6413      	str	r3, [r2, #64]	; 0x40
 8005d72:	4b20      	ldr	r3, [pc, #128]	; (8005df4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d8a:	f7fe f9af 	bl	80040ec <HAL_GetTick>
 8005d8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d90:	e009      	b.n	8005da6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d92:	f7fe f9ab 	bl	80040ec <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005da0:	d901      	bls.n	8005da6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e022      	b.n	8005dec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005da6:	4b14      	ldr	r3, [pc, #80]	; (8005df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d1ee      	bne.n	8005d92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a0f      	ldr	r2, [pc, #60]	; (8005df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005dc0:	f7fe f994 	bl	80040ec <HAL_GetTick>
 8005dc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005dc6:	e009      	b.n	8005ddc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005dc8:	f7fe f990 	bl	80040ec <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd6:	d901      	bls.n	8005ddc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e007      	b.n	8005dec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005de8:	d1ee      	bne.n	8005dc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40007000 	.word	0x40007000

08005dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005e04:	2300      	movs	r3, #0
 8005e06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e291      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8087 	beq.w	8005f2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e20:	4b96      	ldr	r3, [pc, #600]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 030c 	and.w	r3, r3, #12
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d00c      	beq.n	8005e46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2c:	4b93      	ldr	r3, [pc, #588]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 030c 	and.w	r3, r3, #12
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d112      	bne.n	8005e5e <HAL_RCC_OscConfig+0x62>
 8005e38:	4b90      	ldr	r3, [pc, #576]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e44:	d10b      	bne.n	8005e5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e46:	4b8d      	ldr	r3, [pc, #564]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d06c      	beq.n	8005f2c <HAL_RCC_OscConfig+0x130>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d168      	bne.n	8005f2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e26b      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e66:	d106      	bne.n	8005e76 <HAL_RCC_OscConfig+0x7a>
 8005e68:	4b84      	ldr	r3, [pc, #528]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a83      	ldr	r2, [pc, #524]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e02e      	b.n	8005ed4 <HAL_RCC_OscConfig+0xd8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x9c>
 8005e7e:	4b7f      	ldr	r3, [pc, #508]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a7e      	ldr	r2, [pc, #504]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4b7c      	ldr	r3, [pc, #496]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a7b      	ldr	r2, [pc, #492]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e01d      	b.n	8005ed4 <HAL_RCC_OscConfig+0xd8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0xc0>
 8005ea2:	4b76      	ldr	r3, [pc, #472]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a75      	ldr	r2, [pc, #468]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b73      	ldr	r3, [pc, #460]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a72      	ldr	r2, [pc, #456]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0xd8>
 8005ebc:	4b6f      	ldr	r3, [pc, #444]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a6e      	ldr	r2, [pc, #440]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b6c      	ldr	r3, [pc, #432]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a6b      	ldr	r2, [pc, #428]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fe f906 	bl	80040ec <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee4:	f7fe f902 	bl	80040ec <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	; 0x64
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e21f      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b61      	ldr	r3, [pc, #388]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xe8>
 8005f02:	e014      	b.n	8005f2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f04:	f7fe f8f2 	bl	80040ec <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fe f8ee 	bl	80040ec <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	; 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e20b      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f1e:	4b57      	ldr	r3, [pc, #348]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0x110>
 8005f2a:	e000      	b.n	8005f2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d069      	beq.n	800600e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f3a:	4b50      	ldr	r3, [pc, #320]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f46:	4b4d      	ldr	r3, [pc, #308]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d11c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x190>
 8005f52:	4b4a      	ldr	r3, [pc, #296]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5e:	4b47      	ldr	r3, [pc, #284]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_RCC_OscConfig+0x17a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e1df      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f76:	4b41      	ldr	r3, [pc, #260]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	493d      	ldr	r1, [pc, #244]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8a:	e040      	b.n	800600e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d023      	beq.n	8005fdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a38      	ldr	r2, [pc, #224]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fe f8a4 	bl	80040ec <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fa8:	f7fe f8a0 	bl	80040ec <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e1bd      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fba:	4b30      	ldr	r3, [pc, #192]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f0      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4929      	ldr	r1, [pc, #164]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]
 8005fda:	e018      	b.n	800600e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fdc:	4b27      	ldr	r3, [pc, #156]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a26      	ldr	r2, [pc, #152]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
 8005fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fe f880 	bl	80040ec <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fe f87c 	bl	80040ec <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e199      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d038      	beq.n	800608c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d019      	beq.n	8006056 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006022:	4b16      	ldr	r3, [pc, #88]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8006024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006026:	4a15      	ldr	r2, [pc, #84]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602e:	f7fe f85d 	bl	80040ec <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006036:	f7fe f859 	bl	80040ec <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e176      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <HAL_RCC_OscConfig+0x280>)
 800604a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCC_OscConfig+0x23a>
 8006054:	e01a      	b.n	800608c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <HAL_RCC_OscConfig+0x280>)
 8006058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605a:	4a08      	ldr	r2, [pc, #32]	; (800607c <HAL_RCC_OscConfig+0x280>)
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006062:	f7fe f843 	bl	80040ec <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006068:	e00a      	b.n	8006080 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800606a:	f7fe f83f 	bl	80040ec <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d903      	bls.n	8006080 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e15c      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
 800607c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006080:	4b91      	ldr	r3, [pc, #580]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1ee      	bne.n	800606a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80a4 	beq.w	80061e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609a:	4b8b      	ldr	r3, [pc, #556]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10d      	bne.n	80060c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	4b88      	ldr	r3, [pc, #544]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	4a87      	ldr	r2, [pc, #540]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80060ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6413      	str	r3, [r2, #64]	; 0x40
 80060b2:	4b85      	ldr	r3, [pc, #532]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c2:	4b82      	ldr	r3, [pc, #520]	; (80062cc <HAL_RCC_OscConfig+0x4d0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d118      	bne.n	8006100 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80060ce:	4b7f      	ldr	r3, [pc, #508]	; (80062cc <HAL_RCC_OscConfig+0x4d0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a7e      	ldr	r2, [pc, #504]	; (80062cc <HAL_RCC_OscConfig+0x4d0>)
 80060d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060da:	f7fe f807 	bl	80040ec <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e2:	f7fe f803 	bl	80040ec <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b64      	cmp	r3, #100	; 0x64
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e120      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060f4:	4b75      	ldr	r3, [pc, #468]	; (80062cc <HAL_RCC_OscConfig+0x4d0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0f0      	beq.n	80060e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x31a>
 8006108:	4b6f      	ldr	r3, [pc, #444]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a6e      	ldr	r2, [pc, #440]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	6713      	str	r3, [r2, #112]	; 0x70
 8006114:	e02d      	b.n	8006172 <HAL_RCC_OscConfig+0x376>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x33c>
 800611e:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	4a69      	ldr	r2, [pc, #420]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	6713      	str	r3, [r2, #112]	; 0x70
 800612a:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a66      	ldr	r2, [pc, #408]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006130:	f023 0304 	bic.w	r3, r3, #4
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
 8006136:	e01c      	b.n	8006172 <HAL_RCC_OscConfig+0x376>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b05      	cmp	r3, #5
 800613e:	d10c      	bne.n	800615a <HAL_RCC_OscConfig+0x35e>
 8006140:	4b61      	ldr	r3, [pc, #388]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a60      	ldr	r2, [pc, #384]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006146:	f043 0304 	orr.w	r3, r3, #4
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
 800614c:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006150:	4a5d      	ldr	r2, [pc, #372]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6713      	str	r3, [r2, #112]	; 0x70
 8006158:	e00b      	b.n	8006172 <HAL_RCC_OscConfig+0x376>
 800615a:	4b5b      	ldr	r3, [pc, #364]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a5a      	ldr	r2, [pc, #360]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
 8006166:	4b58      	ldr	r3, [pc, #352]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	4a57      	ldr	r2, [pc, #348]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800616c:	f023 0304 	bic.w	r3, r3, #4
 8006170:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d015      	beq.n	80061a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7fd ffb7 	bl	80040ec <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006180:	e00a      	b.n	8006198 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7fd ffb3 	bl	80040ec <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e0ce      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006198:	4b4b      	ldr	r3, [pc, #300]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0ee      	beq.n	8006182 <HAL_RCC_OscConfig+0x386>
 80061a4:	e014      	b.n	80061d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a6:	f7fd ffa1 	bl	80040ec <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ae:	f7fd ff9d 	bl	80040ec <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e0b8      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c4:	4b40      	ldr	r3, [pc, #256]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ee      	bne.n	80061ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061d0:	7dfb      	ldrb	r3, [r7, #23]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d105      	bne.n	80061e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d6:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a3b      	ldr	r2, [pc, #236]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80061dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80a4 	beq.w	8006334 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061ec:	4b36      	ldr	r3, [pc, #216]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d06b      	beq.n	80062d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d149      	bne.n	8006294 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006200:	4b31      	ldr	r3, [pc, #196]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800620a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620c:	f7fd ff6e 	bl	80040ec <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006214:	f7fd ff6a 	bl	80040ec <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e087      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006226:	4b28      	ldr	r3, [pc, #160]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	019b      	lsls	r3, r3, #6
 8006242:	431a      	orrs	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	3b01      	subs	r3, #1
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	061b      	lsls	r3, r3, #24
 8006256:	4313      	orrs	r3, r2
 8006258:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800625a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800625e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800626a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fd ff3e 	bl	80040ec <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006274:	f7fd ff3a 	bl	80040ec <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e057      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0f0      	beq.n	8006274 <HAL_RCC_OscConfig+0x478>
 8006292:	e04f      	b.n	8006334 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a0b      	ldr	r2, [pc, #44]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 800629a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a0:	f7fd ff24 	bl	80040ec <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fd ff20 	bl	80040ec <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e03d      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_RCC_OscConfig+0x4cc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x4ac>
 80062c6:	e035      	b.n	8006334 <HAL_RCC_OscConfig+0x538>
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_RCC_OscConfig+0x544>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d028      	beq.n	8006330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d121      	bne.n	8006330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d11a      	bne.n	8006330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006300:	4013      	ands	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006306:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006308:	4293      	cmp	r3, r2
 800630a:	d111      	bne.n	8006330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	3b01      	subs	r3, #1
 800631a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800631c:	429a      	cmp	r2, r3
 800631e:	d107      	bne.n	8006330 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800632c:	429a      	cmp	r2, r3
 800632e:	d001      	beq.n	8006334 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40023800 	.word	0x40023800

08006344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0d0      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800635c:	4b6a      	ldr	r3, [pc, #424]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d910      	bls.n	800638c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636a:	4b67      	ldr	r3, [pc, #412]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 020f 	bic.w	r2, r3, #15
 8006372:	4965      	ldr	r1, [pc, #404]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637a:	4b63      	ldr	r3, [pc, #396]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d001      	beq.n	800638c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0b8      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d020      	beq.n	80063da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a4:	4b59      	ldr	r3, [pc, #356]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	4a58      	ldr	r2, [pc, #352]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063bc:	4b53      	ldr	r3, [pc, #332]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a52      	ldr	r2, [pc, #328]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c8:	4b50      	ldr	r3, [pc, #320]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	494d      	ldr	r1, [pc, #308]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d040      	beq.n	8006468 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	4b47      	ldr	r3, [pc, #284]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d115      	bne.n	8006426 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e07f      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006406:	4b41      	ldr	r3, [pc, #260]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e073      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006416:	4b3d      	ldr	r3, [pc, #244]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e06b      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 0203 	bic.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4936      	ldr	r1, [pc, #216]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006438:	f7fd fe58 	bl	80040ec <HAL_GetTick>
 800643c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	e00a      	b.n	8006456 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006440:	f7fd fe54 	bl	80040ec <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	; 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e053      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	4b2d      	ldr	r3, [pc, #180]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 020c 	and.w	r2, r3, #12
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	429a      	cmp	r2, r3
 8006466:	d1eb      	bne.n	8006440 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006468:	4b27      	ldr	r3, [pc, #156]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d210      	bcs.n	8006498 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006476:	4b24      	ldr	r3, [pc, #144]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 020f 	bic.w	r2, r3, #15
 800647e:	4922      	ldr	r1, [pc, #136]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006486:	4b20      	ldr	r3, [pc, #128]	; (8006508 <HAL_RCC_ClockConfig+0x1c4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e032      	b.n	80064fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064a4:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4916      	ldr	r1, [pc, #88]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	490e      	ldr	r1, [pc, #56]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064d6:	f000 f821 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80064da:	4602      	mov	r2, r0
 80064dc:	4b0b      	ldr	r3, [pc, #44]	; (800650c <HAL_RCC_ClockConfig+0x1c8>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	490a      	ldr	r1, [pc, #40]	; (8006510 <HAL_RCC_ClockConfig+0x1cc>)
 80064e8:	5ccb      	ldrb	r3, [r1, r3]
 80064ea:	fa22 f303 	lsr.w	r3, r2, r3
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <HAL_RCC_ClockConfig+0x1d0>)
 80064f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <HAL_RCC_ClockConfig+0x1d4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fd fc62 	bl	8003dc0 <HAL_InitTick>

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40023c00 	.word	0x40023c00
 800650c:	40023800 	.word	0x40023800
 8006510:	080280ec 	.word	0x080280ec
 8006514:	2000001c 	.word	0x2000001c
 8006518:	20000020 	.word	0x20000020

0800651c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800651c:	b5b0      	push	{r4, r5, r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006522:	2100      	movs	r1, #0
 8006524:	6079      	str	r1, [r7, #4]
 8006526:	2100      	movs	r1, #0
 8006528:	60f9      	str	r1, [r7, #12]
 800652a:	2100      	movs	r1, #0
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800652e:	2100      	movs	r1, #0
 8006530:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006532:	4952      	ldr	r1, [pc, #328]	; (800667c <HAL_RCC_GetSysClockFreq+0x160>)
 8006534:	6889      	ldr	r1, [r1, #8]
 8006536:	f001 010c 	and.w	r1, r1, #12
 800653a:	2908      	cmp	r1, #8
 800653c:	d00d      	beq.n	800655a <HAL_RCC_GetSysClockFreq+0x3e>
 800653e:	2908      	cmp	r1, #8
 8006540:	f200 8094 	bhi.w	800666c <HAL_RCC_GetSysClockFreq+0x150>
 8006544:	2900      	cmp	r1, #0
 8006546:	d002      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0x32>
 8006548:	2904      	cmp	r1, #4
 800654a:	d003      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0x38>
 800654c:	e08e      	b.n	800666c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800654e:	4b4c      	ldr	r3, [pc, #304]	; (8006680 <HAL_RCC_GetSysClockFreq+0x164>)
 8006550:	60bb      	str	r3, [r7, #8]
      break;
 8006552:	e08e      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006554:	4b4b      	ldr	r3, [pc, #300]	; (8006684 <HAL_RCC_GetSysClockFreq+0x168>)
 8006556:	60bb      	str	r3, [r7, #8]
      break;
 8006558:	e08b      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800655a:	4948      	ldr	r1, [pc, #288]	; (800667c <HAL_RCC_GetSysClockFreq+0x160>)
 800655c:	6849      	ldr	r1, [r1, #4]
 800655e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006562:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006564:	4945      	ldr	r1, [pc, #276]	; (800667c <HAL_RCC_GetSysClockFreq+0x160>)
 8006566:	6849      	ldr	r1, [r1, #4]
 8006568:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800656c:	2900      	cmp	r1, #0
 800656e:	d024      	beq.n	80065ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006570:	4942      	ldr	r1, [pc, #264]	; (800667c <HAL_RCC_GetSysClockFreq+0x160>)
 8006572:	6849      	ldr	r1, [r1, #4]
 8006574:	0989      	lsrs	r1, r1, #6
 8006576:	4608      	mov	r0, r1
 8006578:	f04f 0100 	mov.w	r1, #0
 800657c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006580:	f04f 0500 	mov.w	r5, #0
 8006584:	ea00 0204 	and.w	r2, r0, r4
 8006588:	ea01 0305 	and.w	r3, r1, r5
 800658c:	493d      	ldr	r1, [pc, #244]	; (8006684 <HAL_RCC_GetSysClockFreq+0x168>)
 800658e:	fb01 f003 	mul.w	r0, r1, r3
 8006592:	2100      	movs	r1, #0
 8006594:	fb01 f102 	mul.w	r1, r1, r2
 8006598:	1844      	adds	r4, r0, r1
 800659a:	493a      	ldr	r1, [pc, #232]	; (8006684 <HAL_RCC_GetSysClockFreq+0x168>)
 800659c:	fba2 0101 	umull	r0, r1, r2, r1
 80065a0:	1863      	adds	r3, r4, r1
 80065a2:	4619      	mov	r1, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	f7fa fb7c 	bl	8000ca8 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4613      	mov	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	e04a      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_RCC_GetSysClockFreq+0x160>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	099b      	lsrs	r3, r3, #6
 80065c0:	461a      	mov	r2, r3
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	ea02 0400 	and.w	r4, r2, r0
 80065d2:	ea03 0501 	and.w	r5, r3, r1
 80065d6:	4620      	mov	r0, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	014b      	lsls	r3, r1, #5
 80065e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065e8:	0142      	lsls	r2, r0, #5
 80065ea:	4610      	mov	r0, r2
 80065ec:	4619      	mov	r1, r3
 80065ee:	1b00      	subs	r0, r0, r4
 80065f0:	eb61 0105 	sbc.w	r1, r1, r5
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	018b      	lsls	r3, r1, #6
 80065fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006602:	0182      	lsls	r2, r0, #6
 8006604:	1a12      	subs	r2, r2, r0
 8006606:	eb63 0301 	sbc.w	r3, r3, r1
 800660a:	f04f 0000 	mov.w	r0, #0
 800660e:	f04f 0100 	mov.w	r1, #0
 8006612:	00d9      	lsls	r1, r3, #3
 8006614:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006618:	00d0      	lsls	r0, r2, #3
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	1912      	adds	r2, r2, r4
 8006620:	eb45 0303 	adc.w	r3, r5, r3
 8006624:	f04f 0000 	mov.w	r0, #0
 8006628:	f04f 0100 	mov.w	r1, #0
 800662c:	0299      	lsls	r1, r3, #10
 800662e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006632:	0290      	lsls	r0, r2, #10
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4610      	mov	r0, r2
 800663a:	4619      	mov	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	f7fa fb30 	bl	8000ca8 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4613      	mov	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_RCC_GetSysClockFreq+0x160>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	3301      	adds	r3, #1
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	fbb2 f3f3 	udiv	r3, r2, r3
 8006668:	60bb      	str	r3, [r7, #8]
      break;
 800666a:	e002      	b.n	8006672 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <HAL_RCC_GetSysClockFreq+0x164>)
 800666e:	60bb      	str	r3, [r7, #8]
      break;
 8006670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006672:	68bb      	ldr	r3, [r7, #8]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bdb0      	pop	{r4, r5, r7, pc}
 800667c:	40023800 	.word	0x40023800
 8006680:	00f42400 	.word	0x00f42400
 8006684:	017d7840 	.word	0x017d7840

08006688 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <HAL_RCC_GetHCLKFreq+0x14>)
 800668e:	681b      	ldr	r3, [r3, #0]
}
 8006690:	4618      	mov	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2000001c 	.word	0x2000001c

080066a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066a4:	f7ff fff0 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	0a9b      	lsrs	r3, r3, #10
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4903      	ldr	r1, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40023800 	.word	0x40023800
 80066c4:	080280fc 	.word	0x080280fc

080066c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066cc:	f7ff ffdc 	bl	8006688 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0b5b      	lsrs	r3, r3, #13
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	; (80066ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	080280fc 	.word	0x080280fc

080066f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	220f      	movs	r2, #15
 80066fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <HAL_RCC_GetClockConfig+0x5c>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0203 	and.w	r2, r3, #3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <HAL_RCC_GetClockConfig+0x5c>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <HAL_RCC_GetClockConfig+0x5c>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <HAL_RCC_GetClockConfig+0x5c>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006732:	4b07      	ldr	r3, [pc, #28]	; (8006750 <HAL_RCC_GetClockConfig+0x60>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 020f 	and.w	r2, r3, #15
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	601a      	str	r2, [r3, #0]
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40023800 	.word	0x40023800
 8006750:	40023c00 	.word	0x40023c00

08006754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d012      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800677c:	4b69      	ldr	r3, [pc, #420]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	4a68      	ldr	r2, [pc, #416]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006782:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006786:	6093      	str	r3, [r2, #8]
 8006788:	4b66      	ldr	r3, [pc, #408]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006790:	4964      	ldr	r1, [pc, #400]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800679e:	2301      	movs	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d017      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067ae:	4b5d      	ldr	r3, [pc, #372]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	4959      	ldr	r1, [pc, #356]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067cc:	d101      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d017      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80067ea:	4b4e      	ldr	r3, [pc, #312]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f8:	494a      	ldr	r1, [pc, #296]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006808:	d101      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800680a:	2301      	movs	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006816:	2301      	movs	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006826:	2301      	movs	r3, #1
 8006828:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 808b 	beq.w	800694e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006838:	4b3a      	ldr	r3, [pc, #232]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	4a39      	ldr	r2, [pc, #228]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800683e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006842:	6413      	str	r3, [r2, #64]	; 0x40
 8006844:	4b37      	ldr	r3, [pc, #220]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684c:	60bb      	str	r3, [r7, #8]
 800684e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006850:	4b35      	ldr	r3, [pc, #212]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a34      	ldr	r2, [pc, #208]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800685c:	f7fd fc46 	bl	80040ec <HAL_GetTick>
 8006860:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006864:	f7fd fc42 	bl	80040ec <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b64      	cmp	r3, #100	; 0x64
 8006870:	d901      	bls.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e357      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006876:	4b2c      	ldr	r3, [pc, #176]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006882:	4b28      	ldr	r3, [pc, #160]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d035      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	429a      	cmp	r2, r3
 800689e:	d02e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068a0:	4b20      	ldr	r3, [pc, #128]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068aa:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4a1d      	ldr	r2, [pc, #116]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068b6:	4b1b      	ldr	r3, [pc, #108]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	4a1a      	ldr	r2, [pc, #104]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80068c2:	4a18      	ldr	r2, [pc, #96]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068c8:	4b16      	ldr	r3, [pc, #88]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d114      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fd fc0a 	bl	80040ec <HAL_GetTick>
 80068d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068da:	e00a      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068dc:	f7fd fc06 	bl	80040ec <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e319      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f2:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0ee      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690a:	d111      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800691a:	400b      	ands	r3, r1
 800691c:	4901      	ldr	r1, [pc, #4]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800691e:	4313      	orrs	r3, r2
 8006920:	608b      	str	r3, [r1, #8]
 8006922:	e00b      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006924:	40023800 	.word	0x40023800
 8006928:	40007000 	.word	0x40007000
 800692c:	0ffffcff 	.word	0x0ffffcff
 8006930:	4bb1      	ldr	r3, [pc, #708]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4ab0      	ldr	r2, [pc, #704]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006936:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800693a:	6093      	str	r3, [r2, #8]
 800693c:	4bae      	ldr	r3, [pc, #696]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800693e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006948:	49ab      	ldr	r1, [pc, #684]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800694a:	4313      	orrs	r3, r2
 800694c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800695a:	4ba7      	ldr	r3, [pc, #668]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800695c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006960:	4aa5      	ldr	r2, [pc, #660]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006966:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800696a:	4ba3      	ldr	r3, [pc, #652]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800696c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	49a0      	ldr	r1, [pc, #640]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006988:	4b9b      	ldr	r3, [pc, #620]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800698a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006996:	4998      	ldr	r1, [pc, #608]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069aa:	4b93      	ldr	r3, [pc, #588]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b8:	498f      	ldr	r1, [pc, #572]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069cc:	4b8a      	ldr	r3, [pc, #552]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069da:	4987      	ldr	r1, [pc, #540]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069ee:	4b82      	ldr	r3, [pc, #520]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fc:	497e      	ldr	r1, [pc, #504]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a10:	4b79      	ldr	r3, [pc, #484]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a16:	f023 0203 	bic.w	r2, r3, #3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	4976      	ldr	r1, [pc, #472]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a32:	4b71      	ldr	r3, [pc, #452]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a38:	f023 020c 	bic.w	r2, r3, #12
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a40:	496d      	ldr	r1, [pc, #436]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a54:	4b68      	ldr	r3, [pc, #416]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	4965      	ldr	r1, [pc, #404]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a76:	4b60      	ldr	r3, [pc, #384]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a84:	495c      	ldr	r1, [pc, #368]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a98:	4b57      	ldr	r3, [pc, #348]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	4954      	ldr	r1, [pc, #336]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006aba:	4b4f      	ldr	r3, [pc, #316]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac8:	494b      	ldr	r1, [pc, #300]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00a      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006adc:	4b46      	ldr	r3, [pc, #280]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aea:	4943      	ldr	r1, [pc, #268]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00a      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006afe:	4b3e      	ldr	r3, [pc, #248]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0c:	493a      	ldr	r1, [pc, #232]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b20:	4b35      	ldr	r3, [pc, #212]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2e:	4932      	ldr	r1, [pc, #200]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d011      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b42:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b50:	4929      	ldr	r1, [pc, #164]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b60:	d101      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006b62:	2301      	movs	r3, #1
 8006b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b82:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b90:	4919      	ldr	r1, [pc, #100]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ba4:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb4:	4910      	ldr	r1, [pc, #64]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d006      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80d9 	beq.w	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bdc:	f7fd fa86 	bl	80040ec <HAL_GetTick>
 8006be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006be2:	e00b      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006be4:	f7fd fa82 	bl	80040ec <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	d904      	bls.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e197      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bfc:	4b6c      	ldr	r3, [pc, #432]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ed      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d021      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11d      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c1c:	4b64      	ldr	r3, [pc, #400]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	f003 0303 	and.w	r3, r3, #3
 8006c28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c2a:	4b61      	ldr	r3, [pc, #388]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c30:	0e1b      	lsrs	r3, r3, #24
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	019a      	lsls	r2, r3, #6
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	041b      	lsls	r3, r3, #16
 8006c42:	431a      	orrs	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	061b      	lsls	r3, r3, #24
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	071b      	lsls	r3, r3, #28
 8006c50:	4957      	ldr	r1, [pc, #348]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c6c:	d00a      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d02e      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c82:	d129      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c84:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c92:	4b47      	ldr	r3, [pc, #284]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c98:	0f1b      	lsrs	r3, r3, #28
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	019a      	lsls	r2, r3, #6
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	041b      	lsls	r3, r3, #16
 8006caa:	431a      	orrs	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	061b      	lsls	r3, r3, #24
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	071b      	lsls	r3, r3, #28
 8006cb8:	493d      	ldr	r1, [pc, #244]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006cc0:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc6:	f023 021f 	bic.w	r2, r3, #31
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	4937      	ldr	r1, [pc, #220]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01d      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ce4:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cf2:	4b2f      	ldr	r3, [pc, #188]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf8:	0f1b      	lsrs	r3, r3, #28
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	019a      	lsls	r2, r3, #6
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	061b      	lsls	r3, r3, #24
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	071b      	lsls	r3, r3, #28
 8006d18:	4925      	ldr	r1, [pc, #148]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	019a      	lsls	r2, r3, #6
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	071b      	lsls	r3, r3, #28
 8006d48:	4919      	ldr	r1, [pc, #100]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d50:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5c:	f7fd f9c6 	bl	80040ec <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d64:	f7fd f9c2 	bl	80040ec <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	; 0x64
 8006d70:	d901      	bls.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e0d7      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d76:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f0      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	f040 80cd 	bne.w	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d8a:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d96:	f7fd f9a9 	bl	80040ec <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d9e:	f7fd f9a5 	bl	80040ec <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b64      	cmp	r3, #100	; 0x64
 8006daa:	d903      	bls.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e0ba      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006db4:	4b5e      	ldr	r3, [pc, #376]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc0:	d0ed      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d02e      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d12a      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006dea:	4b51      	ldr	r3, [pc, #324]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006df8:	4b4d      	ldr	r3, [pc, #308]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	0f1b      	lsrs	r3, r3, #28
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	019a      	lsls	r2, r3, #6
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	061b      	lsls	r3, r3, #24
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	071b      	lsls	r3, r3, #28
 8006e1e:	4944      	ldr	r1, [pc, #272]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e26:	4b42      	ldr	r3, [pc, #264]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	3b01      	subs	r3, #1
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	493d      	ldr	r1, [pc, #244]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d022      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e54:	d11d      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e56:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5c:	0e1b      	lsrs	r3, r3, #24
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e64:	4b32      	ldr	r3, [pc, #200]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6a:	0f1b      	lsrs	r3, r3, #28
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	019a      	lsls	r2, r3, #6
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	431a      	orrs	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	071b      	lsls	r3, r3, #28
 8006e8a:	4929      	ldr	r1, [pc, #164]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d028      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e9e:	4b24      	ldr	r3, [pc, #144]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea4:	0e1b      	lsrs	r3, r3, #24
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006eac:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	019a      	lsls	r2, r3, #6
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	071b      	lsls	r3, r3, #28
 8006ed2:	4917      	ldr	r1, [pc, #92]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	4911      	ldr	r1, [pc, #68]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a0e      	ldr	r2, [pc, #56]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006efc:	f7fd f8f6 	bl	80040ec <HAL_GetTick>
 8006f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f04:	f7fd f8f2 	bl	80040ec <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b64      	cmp	r3, #100	; 0x64
 8006f10:	d901      	bls.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e007      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f22:	d1ef      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3720      	adds	r7, #32
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800

08006f34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e081      	b.n	800704a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	7f5b      	ldrb	r3, [r3, #29]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fc fecc 	bl	8003cf4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	22ca      	movs	r2, #202	; 0xca
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2253      	movs	r2, #83	; 0x53
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 faac 	bl	80074d0 <RTC_EnterInitMode>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	22ff      	movs	r2, #255	; 0xff
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e05c      	b.n	800704a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6899      	ldr	r1, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b2e      	ldr	r3, [pc, #184]	; (8007054 <HAL_RTC_Init+0x120>)
 8006f9c:	400b      	ands	r3, r1
 8006f9e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6899      	ldr	r1, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	68d2      	ldr	r2, [r2, #12]
 8006fc6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6919      	ldr	r1, [r3, #16]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	041a      	lsls	r2, r3, #16
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fea:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10e      	bne.n	8007018 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa40 	bl	8007480 <HAL_RTC_WaitForSynchro>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	22ff      	movs	r2, #255	; 0xff
 800700c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2204      	movs	r2, #4
 8007012:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e018      	b.n	800704a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0208 	bic.w	r2, r2, #8
 8007026:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	22ff      	movs	r2, #255	; 0xff
 8007040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	ff8fffbf 	.word	0xff8fffbf

08007058 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	7f1b      	ldrb	r3, [r3, #28]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_RTC_SetTime+0x1c>
 8007070:	2302      	movs	r3, #2
 8007072:	e0a8      	b.n	80071c6 <HAL_RTC_SetTime+0x16e>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2201      	movs	r2, #1
 8007078:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2202      	movs	r2, #2
 800707e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d126      	bne.n	80070d4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fa42 	bl	8007528 <RTC_ByteToBcd2>
 80070a4:	4603      	mov	r3, r0
 80070a6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fa3b 	bl	8007528 <RTC_ByteToBcd2>
 80070b2:	4603      	mov	r3, r0
 80070b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80070b6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	789b      	ldrb	r3, [r3, #2]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fa33 	bl	8007528 <RTC_ByteToBcd2>
 80070c2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80070c4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	7b1b      	ldrb	r3, [r3, #12]
 80070cc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	e018      	b.n	8007106 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2200      	movs	r2, #0
 80070e6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070f4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070fa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	7b1b      	ldrb	r3, [r3, #12]
 8007100:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	22ca      	movs	r2, #202	; 0xca
 800710c:	625a      	str	r2, [r3, #36]	; 0x24
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2253      	movs	r2, #83	; 0x53
 8007114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f9da 	bl	80074d0 <RTC_EnterInitMode>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	22ff      	movs	r2, #255	; 0xff
 8007128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2204      	movs	r2, #4
 800712e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e045      	b.n	80071c6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	6979      	ldr	r1, [r7, #20]
 8007140:	4b23      	ldr	r3, [pc, #140]	; (80071d0 <HAL_RTC_SetTime+0x178>)
 8007142:	400b      	ands	r3, r1
 8007144:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007154:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6899      	ldr	r1, [r3, #8]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	431a      	orrs	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800717c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d111      	bne.n	80071b0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f977 	bl	8007480 <HAL_RTC_WaitForSynchro>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2204      	movs	r2, #4
 80071a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e00a      	b.n	80071c6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80071c4:	2300      	movs	r3, #0
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd90      	pop	{r4, r7, pc}
 80071ce:	bf00      	nop
 80071d0:	007f7f7f 	.word	0x007f7f7f

080071d4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b22      	ldr	r3, [pc, #136]	; (800728c <HAL_RTC_GetTime+0xb8>)
 8007204:	4013      	ands	r3, r2
 8007206:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007222:	b2da      	uxtb	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007230:	b2da      	uxtb	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	b2db      	uxtb	r3, r3
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	b2da      	uxtb	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11a      	bne.n	8007282 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f987 	bl	8007564 <RTC_Bcd2ToByte>
 8007256:	4603      	mov	r3, r0
 8007258:	461a      	mov	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f97e 	bl	8007564 <RTC_Bcd2ToByte>
 8007268:	4603      	mov	r3, r0
 800726a:	461a      	mov	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	789b      	ldrb	r3, [r3, #2]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 f975 	bl	8007564 <RTC_Bcd2ToByte>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	007f7f7f 	.word	0x007f7f7f

08007290 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007290:	b590      	push	{r4, r7, lr}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	7f1b      	ldrb	r3, [r3, #28]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_RTC_SetDate+0x1c>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e092      	b.n	80073d2 <HAL_RTC_SetDate+0x142>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2201      	movs	r2, #1
 80072b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2202      	movs	r2, #2
 80072b6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10e      	bne.n	80072dc <HAL_RTC_SetDate+0x4c>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	f023 0310 	bic.w	r3, r3, #16
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	330a      	adds	r3, #10
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d11c      	bne.n	800731c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	78db      	ldrb	r3, [r3, #3]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 f91e 	bl	8007528 <RTC_ByteToBcd2>
 80072ec:	4603      	mov	r3, r0
 80072ee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f917 	bl	8007528 <RTC_ByteToBcd2>
 80072fa:	4603      	mov	r3, r0
 80072fc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80072fe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	789b      	ldrb	r3, [r3, #2]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 f90f 	bl	8007528 <RTC_ByteToBcd2>
 800730a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800730c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	e00e      	b.n	800733a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	78db      	ldrb	r3, [r3, #3]
 8007320:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007328:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800732e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	22ca      	movs	r2, #202	; 0xca
 8007340:	625a      	str	r2, [r3, #36]	; 0x24
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2253      	movs	r2, #83	; 0x53
 8007348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 f8c0 	bl	80074d0 <RTC_EnterInitMode>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	22ff      	movs	r2, #255	; 0xff
 800735c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2204      	movs	r2, #4
 8007362:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e031      	b.n	80073d2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	6979      	ldr	r1, [r7, #20]
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <HAL_RTC_SetDate+0x14c>)
 8007376:	400b      	ands	r3, r1
 8007378:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007388:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d111      	bne.n	80073bc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f871 	bl	8007480 <HAL_RTC_WaitForSynchro>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2204      	movs	r2, #4
 80073b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e00a      	b.n	80073d2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}
 80073da:	bf00      	nop
 80073dc:	00ffff3f 	.word	0x00ffff3f

080073e0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	4b21      	ldr	r3, [pc, #132]	; (800747c <HAL_RTC_GetDate+0x9c>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	0c1b      	lsrs	r3, r3, #16
 8007400:	b2da      	uxtb	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	0a1b      	lsrs	r3, r3, #8
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	b2da      	uxtb	r2, r3
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800741e:	b2da      	uxtb	r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	0b5b      	lsrs	r3, r3, #13
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11a      	bne.n	8007470 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	78db      	ldrb	r3, [r3, #3]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f890 	bl	8007564 <RTC_Bcd2ToByte>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f887 	bl	8007564 <RTC_Bcd2ToByte>
 8007456:	4603      	mov	r3, r0
 8007458:	461a      	mov	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	789b      	ldrb	r3, [r3, #2]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 f87e 	bl	8007564 <RTC_Bcd2ToByte>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	00ffff3f 	.word	0x00ffff3f

08007480 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800749a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800749c:	f7fc fe26 	bl	80040ec <HAL_GetTick>
 80074a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074a2:	e009      	b.n	80074b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074a4:	f7fc fe22 	bl	80040ec <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b2:	d901      	bls.n	80074b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e007      	b.n	80074c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ee      	beq.n	80074a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d119      	bne.n	800751e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074f4:	f7fc fdfa 	bl	80040ec <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80074fa:	e009      	b.n	8007510 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074fc:	f7fc fdf6 	bl	80040ec <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800750a:	d901      	bls.n	8007510 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e007      	b.n	8007520 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0ee      	beq.n	80074fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007536:	e005      	b.n	8007544 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	3b0a      	subs	r3, #10
 8007542:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b09      	cmp	r3, #9
 8007548:	d8f6      	bhi.n	8007538 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	b2da      	uxtb	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	4313      	orrs	r3, r2
 8007556:	b2db      	uxtb	r3, r3
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	b2da      	uxtb	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4413      	add	r3, r2
 8007592:	b2db      	uxtb	r3, r3
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e049      	b.n	8007646 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f841 	bl	800764e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f000 fa00 	bl	80079e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d001      	beq.n	800767c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e054      	b.n	8007726 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a26      	ldr	r2, [pc, #152]	; (8007734 <HAL_TIM_Base_Start_IT+0xd0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d022      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d01d      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a22      	ldr	r2, [pc, #136]	; (8007738 <HAL_TIM_Base_Start_IT+0xd4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d018      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <HAL_TIM_Base_Start_IT+0xd8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d013      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_TIM_Base_Start_IT+0xdc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_TIM_Base_Start_IT+0xe0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d009      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <HAL_TIM_Base_Start_IT+0xe4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <HAL_TIM_Base_Start_IT+0x80>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_TIM_Base_Start_IT+0xe8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d115      	bne.n	8007710 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_TIM_Base_Start_IT+0xec>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b06      	cmp	r3, #6
 80076f4:	d015      	beq.n	8007722 <HAL_TIM_Base_Start_IT+0xbe>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	d011      	beq.n	8007722 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0201 	orr.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770e:	e008      	b.n	8007722 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	e000      	b.n	8007724 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40010000 	.word	0x40010000
 8007738:	40000400 	.word	0x40000400
 800773c:	40000800 	.word	0x40000800
 8007740:	40000c00 	.word	0x40000c00
 8007744:	40010400 	.word	0x40010400
 8007748:	40014000 	.word	0x40014000
 800774c:	40001800 	.word	0x40001800
 8007750:	00010007 	.word	0x00010007

08007754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b02      	cmp	r3, #2
 8007768:	d122      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	d11b      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0202 	mvn.w	r2, #2
 8007780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f905 	bl	80079a6 <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f8f7 	bl	8007992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f908 	bl	80079ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d122      	bne.n	8007804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0304 	and.w	r3, r3, #4
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d11b      	bne.n	8007804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0204 	mvn.w	r2, #4
 80077d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f8db 	bl	80079a6 <HAL_TIM_IC_CaptureCallback>
 80077f0:	e005      	b.n	80077fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f8cd 	bl	8007992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f8de 	bl	80079ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b08      	cmp	r3, #8
 8007810:	d122      	bne.n	8007858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b08      	cmp	r3, #8
 800781e:	d11b      	bne.n	8007858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0208 	mvn.w	r2, #8
 8007828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2204      	movs	r2, #4
 800782e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8b1 	bl	80079a6 <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8a3 	bl	8007992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f8b4 	bl	80079ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b10      	cmp	r3, #16
 8007864:	d122      	bne.n	80078ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	2b10      	cmp	r3, #16
 8007872:	d11b      	bne.n	80078ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0210 	mvn.w	r2, #16
 800787c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2208      	movs	r2, #8
 8007882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f887 	bl	80079a6 <HAL_TIM_IC_CaptureCallback>
 8007898:	e005      	b.n	80078a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f879 	bl	8007992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f88a 	bl	80079ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10e      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d107      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0201 	mvn.w	r2, #1
 80078d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7fb f882 	bl	80029dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d10e      	bne.n	8007904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f0:	2b80      	cmp	r3, #128	; 0x80
 80078f2:	d107      	bne.n	8007904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f91a 	bl	8007b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007912:	d10e      	bne.n	8007932 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800791e:	2b80      	cmp	r3, #128	; 0x80
 8007920:	d107      	bne.n	8007932 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800792a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f90d 	bl	8007b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d10e      	bne.n	800795e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794a:	2b40      	cmp	r3, #64	; 0x40
 800794c:	d107      	bne.n	800795e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f838 	bl	80079ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b20      	cmp	r3, #32
 800796a:	d10e      	bne.n	800798a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b20      	cmp	r3, #32
 8007978:	d107      	bne.n	800798a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f06f 0220 	mvn.w	r2, #32
 8007982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f8cd 	bl	8007b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a40      	ldr	r2, [pc, #256]	; (8007af8 <TIM_Base_SetConfig+0x114>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d013      	beq.n	8007a24 <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a02:	d00f      	beq.n	8007a24 <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a3d      	ldr	r2, [pc, #244]	; (8007afc <TIM_Base_SetConfig+0x118>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00b      	beq.n	8007a24 <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a3c      	ldr	r2, [pc, #240]	; (8007b00 <TIM_Base_SetConfig+0x11c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d007      	beq.n	8007a24 <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a3b      	ldr	r2, [pc, #236]	; (8007b04 <TIM_Base_SetConfig+0x120>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d003      	beq.n	8007a24 <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a3a      	ldr	r2, [pc, #232]	; (8007b08 <TIM_Base_SetConfig+0x124>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d108      	bne.n	8007a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2f      	ldr	r2, [pc, #188]	; (8007af8 <TIM_Base_SetConfig+0x114>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d02b      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a44:	d027      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2c      	ldr	r2, [pc, #176]	; (8007afc <TIM_Base_SetConfig+0x118>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d023      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2b      	ldr	r2, [pc, #172]	; (8007b00 <TIM_Base_SetConfig+0x11c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d01f      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2a      	ldr	r2, [pc, #168]	; (8007b04 <TIM_Base_SetConfig+0x120>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01b      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a29      	ldr	r2, [pc, #164]	; (8007b08 <TIM_Base_SetConfig+0x124>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d017      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a28      	ldr	r2, [pc, #160]	; (8007b0c <TIM_Base_SetConfig+0x128>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a27      	ldr	r2, [pc, #156]	; (8007b10 <TIM_Base_SetConfig+0x12c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00f      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a26      	ldr	r2, [pc, #152]	; (8007b14 <TIM_Base_SetConfig+0x130>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00b      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a25      	ldr	r2, [pc, #148]	; (8007b18 <TIM_Base_SetConfig+0x134>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a24      	ldr	r2, [pc, #144]	; (8007b1c <TIM_Base_SetConfig+0x138>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a23      	ldr	r2, [pc, #140]	; (8007b20 <TIM_Base_SetConfig+0x13c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d108      	bne.n	8007aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a0a      	ldr	r2, [pc, #40]	; (8007af8 <TIM_Base_SetConfig+0x114>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d003      	beq.n	8007adc <TIM_Base_SetConfig+0xf8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	; (8007b08 <TIM_Base_SetConfig+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d103      	bne.n	8007ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	615a      	str	r2, [r3, #20]
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40010400 	.word	0x40010400
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	40014400 	.word	0x40014400
 8007b14:	40014800 	.word	0x40014800
 8007b18:	40001800 	.word	0x40001800
 8007b1c:	40001c00 	.word	0x40001c00
 8007b20:	40002000 	.word	0x40002000

08007b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e040      	b.n	8007bf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fc f8d0 	bl	8003d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2224      	movs	r2, #36	; 0x24
 8007b8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fbee 	bl	8008380 <UART_SetConfig>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e022      	b.n	8007bf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fe44 	bl	8008844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fecb 	bl	8008988 <UART_CheckIdleState>
 8007bf2:	4603      	mov	r3, r0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	; 0x28
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	f040 8081 	bne.w	8007d18 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <HAL_UART_Transmit+0x26>
 8007c1c:	88fb      	ldrh	r3, [r7, #6]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e079      	b.n	8007d1a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_UART_Transmit+0x38>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e072      	b.n	8007d1a <HAL_UART_Transmit+0x11e>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2221      	movs	r2, #33	; 0x21
 8007c48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c4a:	f7fc fa4f 	bl	80040ec <HAL_GetTick>
 8007c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	88fa      	ldrh	r2, [r7, #6]
 8007c54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c68:	d108      	bne.n	8007c7c <HAL_UART_Transmit+0x80>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	e003      	b.n	8007c84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007c8c:	e02c      	b.n	8007ce8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2200      	movs	r2, #0
 8007c96:	2180      	movs	r1, #128	; 0x80
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 fea8 	bl	80089ee <UART_WaitOnFlagUntilTimeout>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e038      	b.n	8007d1a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	e007      	b.n	8007cd6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	781a      	ldrb	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1cc      	bne.n	8007c8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 fe75 	bl	80089ee <UART_WaitOnFlagUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e005      	b.n	8007d1a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e000      	b.n	8007d1a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007d18:	2302      	movs	r3, #2
  }
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3720      	adds	r7, #32
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b08a      	sub	sp, #40	; 0x28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d34:	2b20      	cmp	r3, #32
 8007d36:	d13d      	bne.n	8007db4 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_UART_Receive_IT+0x22>
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e036      	b.n	8007db6 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_UART_Receive_IT+0x34>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e02f      	b.n	8007db6 <HAL_UART_Receive_IT+0x94>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d018      	beq.n	8007da4 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	623b      	str	r3, [r7, #32]
 8007d92:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	6a3a      	ldr	r2, [r7, #32]
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	461a      	mov	r2, r3
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fee4 	bl	8008b78 <UART_Start_Receive_IT>
 8007db0:	4603      	mov	r3, r0
 8007db2:	e000      	b.n	8007db6 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007db4:	2302      	movs	r3, #2
  }
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3728      	adds	r7, #40	; 0x28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b0ba      	sub	sp, #232	; 0xe8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007dea:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dee:	4013      	ands	r3, r2
 8007df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007df4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d115      	bne.n	8007e28 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00f      	beq.n	8007e28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 828f 	beq.w	800833c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
      }
      return;
 8007e26:	e289      	b.n	800833c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8117 	beq.w	8008060 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e42:	4b85      	ldr	r3, [pc, #532]	; (8008058 <HAL_UART_IRQHandler+0x298>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 810a 	beq.w	8008060 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d011      	beq.n	8007e7c <HAL_UART_IRQHandler+0xbc>
 8007e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e72:	f043 0201 	orr.w	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d011      	beq.n	8007eac <HAL_UART_IRQHandler+0xec>
 8007e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea2:	f043 0204 	orr.w	r2, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d011      	beq.n	8007edc <HAL_UART_IRQHandler+0x11c>
 8007eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2204      	movs	r2, #4
 8007eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed2:	f043 0202 	orr.w	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d017      	beq.n	8007f18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eec:	f003 0320 	and.w	r3, r3, #32
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d105      	bne.n	8007f00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00b      	beq.n	8007f18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2208      	movs	r2, #8
 8007f06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f0e:	f043 0208 	orr.w	r2, r3, #8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <HAL_UART_IRQHandler+0x18a>
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f40:	f043 0220 	orr.w	r2, r3, #32
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 81f5 	beq.w	8008340 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f92:	2b40      	cmp	r3, #64	; 0x40
 8007f94:	d005      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04f      	beq.n	8008042 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 feb2 	bl	8008d0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d141      	bne.n	800803a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1d9      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	2b00      	cmp	r3, #0
 8008008:	d013      	beq.n	8008032 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	4a13      	ldr	r2, [pc, #76]	; (800805c <HAL_UART_IRQHandler+0x29c>)
 8008010:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	4618      	mov	r0, r3
 8008018:	f7fc f9ea 	bl	80043f0 <HAL_DMA_Abort_IT>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d017      	beq.n	8008052 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800802c:	4610      	mov	r0, r2
 800802e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008030:	e00f      	b.n	8008052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f98e 	bl	8008354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008038:	e00b      	b.n	8008052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f98a 	bl	8008354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008040:	e007      	b.n	8008052 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f986 	bl	8008354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008050:	e176      	b.n	8008340 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008052:	bf00      	nop
    return;
 8008054:	e174      	b.n	8008340 <HAL_UART_IRQHandler+0x580>
 8008056:	bf00      	nop
 8008058:	04000120 	.word	0x04000120
 800805c:	08008dd3 	.word	0x08008dd3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008064:	2b01      	cmp	r3, #1
 8008066:	f040 8144 	bne.w	80082f2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800806a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 813d 	beq.w	80082f2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8136 	beq.w	80082f2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2210      	movs	r2, #16
 800808c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	f040 80b2 	bne.w	8008202 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8148 	beq.w	8008344 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80080ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080be:	429a      	cmp	r2, r3
 80080c0:	f080 8140 	bcs.w	8008344 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d8:	f000 8085 	beq.w	80081e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800810a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800811e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1da      	bne.n	80080dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3308      	adds	r3, #8
 8008146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800814a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800814e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800815c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e1      	bne.n	8008126 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3308      	adds	r3, #8
 8008182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800818c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e3      	bne.n	8008162 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b6:	f023 0310 	bic.w	r3, r3, #16
 80081ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e4      	bne.n	80081a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fc f895 	bl	8004310 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f8b4 	bl	8008368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008200:	e0a0      	b.n	8008344 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800820e:	b29b      	uxth	r3, r3
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8092 	beq.w	8008348 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 808d 	beq.w	8008348 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800823c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800823e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008250:	647b      	str	r3, [r7, #68]	; 0x44
 8008252:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800825e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e4      	bne.n	800822e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	623b      	str	r3, [r7, #32]
   return(result);
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	f023 0301 	bic.w	r3, r3, #1
 800827a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3308      	adds	r3, #8
 8008284:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008288:	633a      	str	r2, [r7, #48]	; 0x30
 800828a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800828e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e3      	bne.n	8008264 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	69b9      	ldr	r1, [r7, #24]
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	e841 2300 	strex	r3, r2, [r1]
 80082dc:	617b      	str	r3, [r7, #20]
   return(result);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e4      	bne.n	80082ae <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f83c 	bl	8008368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082f0:	e02a      	b.n	8008348 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00e      	beq.n	800831c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01c      	beq.n	800834c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
    }
    return;
 800831a:	e017      	b.n	800834c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d012      	beq.n	800834e <HAL_UART_IRQHandler+0x58e>
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fd62 	bl	8008dfe <UART_EndTransmit_IT>
    return;
 800833a:	e008      	b.n	800834e <HAL_UART_IRQHandler+0x58e>
      return;
 800833c:	bf00      	nop
 800833e:	e006      	b.n	800834e <HAL_UART_IRQHandler+0x58e>
    return;
 8008340:	bf00      	nop
 8008342:	e004      	b.n	800834e <HAL_UART_IRQHandler+0x58e>
      return;
 8008344:	bf00      	nop
 8008346:	e002      	b.n	800834e <HAL_UART_IRQHandler+0x58e>
      return;
 8008348:	bf00      	nop
 800834a:	e000      	b.n	800834e <HAL_UART_IRQHandler+0x58e>
    return;
 800834c:	bf00      	nop
  }

}
 800834e:	37e8      	adds	r7, #232	; 0xe8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008388:	2300      	movs	r3, #0
 800838a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4ba7      	ldr	r3, [pc, #668]	; (8008648 <UART_SetConfig+0x2c8>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	6979      	ldr	r1, [r7, #20]
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a95      	ldr	r2, [pc, #596]	; (800864c <UART_SetConfig+0x2cc>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d120      	bne.n	800843e <UART_SetConfig+0xbe>
 80083fc:	4b94      	ldr	r3, [pc, #592]	; (8008650 <UART_SetConfig+0x2d0>)
 80083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	2b03      	cmp	r3, #3
 8008408:	d816      	bhi.n	8008438 <UART_SetConfig+0xb8>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0x90>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008421 	.word	0x08008421
 8008414:	0800842d 	.word	0x0800842d
 8008418:	08008427 	.word	0x08008427
 800841c:	08008433 	.word	0x08008433
 8008420:	2301      	movs	r3, #1
 8008422:	77fb      	strb	r3, [r7, #31]
 8008424:	e14f      	b.n	80086c6 <UART_SetConfig+0x346>
 8008426:	2302      	movs	r3, #2
 8008428:	77fb      	strb	r3, [r7, #31]
 800842a:	e14c      	b.n	80086c6 <UART_SetConfig+0x346>
 800842c:	2304      	movs	r3, #4
 800842e:	77fb      	strb	r3, [r7, #31]
 8008430:	e149      	b.n	80086c6 <UART_SetConfig+0x346>
 8008432:	2308      	movs	r3, #8
 8008434:	77fb      	strb	r3, [r7, #31]
 8008436:	e146      	b.n	80086c6 <UART_SetConfig+0x346>
 8008438:	2310      	movs	r3, #16
 800843a:	77fb      	strb	r3, [r7, #31]
 800843c:	e143      	b.n	80086c6 <UART_SetConfig+0x346>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a84      	ldr	r2, [pc, #528]	; (8008654 <UART_SetConfig+0x2d4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d132      	bne.n	80084ae <UART_SetConfig+0x12e>
 8008448:	4b81      	ldr	r3, [pc, #516]	; (8008650 <UART_SetConfig+0x2d0>)
 800844a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844e:	f003 030c 	and.w	r3, r3, #12
 8008452:	2b0c      	cmp	r3, #12
 8008454:	d828      	bhi.n	80084a8 <UART_SetConfig+0x128>
 8008456:	a201      	add	r2, pc, #4	; (adr r2, 800845c <UART_SetConfig+0xdc>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	08008491 	.word	0x08008491
 8008460:	080084a9 	.word	0x080084a9
 8008464:	080084a9 	.word	0x080084a9
 8008468:	080084a9 	.word	0x080084a9
 800846c:	0800849d 	.word	0x0800849d
 8008470:	080084a9 	.word	0x080084a9
 8008474:	080084a9 	.word	0x080084a9
 8008478:	080084a9 	.word	0x080084a9
 800847c:	08008497 	.word	0x08008497
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084a9 	.word	0x080084a9
 8008488:	080084a9 	.word	0x080084a9
 800848c:	080084a3 	.word	0x080084a3
 8008490:	2300      	movs	r3, #0
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e117      	b.n	80086c6 <UART_SetConfig+0x346>
 8008496:	2302      	movs	r3, #2
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e114      	b.n	80086c6 <UART_SetConfig+0x346>
 800849c:	2304      	movs	r3, #4
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e111      	b.n	80086c6 <UART_SetConfig+0x346>
 80084a2:	2308      	movs	r3, #8
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	e10e      	b.n	80086c6 <UART_SetConfig+0x346>
 80084a8:	2310      	movs	r3, #16
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e10b      	b.n	80086c6 <UART_SetConfig+0x346>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a69      	ldr	r2, [pc, #420]	; (8008658 <UART_SetConfig+0x2d8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d120      	bne.n	80084fa <UART_SetConfig+0x17a>
 80084b8:	4b65      	ldr	r3, [pc, #404]	; (8008650 <UART_SetConfig+0x2d0>)
 80084ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084c2:	2b30      	cmp	r3, #48	; 0x30
 80084c4:	d013      	beq.n	80084ee <UART_SetConfig+0x16e>
 80084c6:	2b30      	cmp	r3, #48	; 0x30
 80084c8:	d814      	bhi.n	80084f4 <UART_SetConfig+0x174>
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d009      	beq.n	80084e2 <UART_SetConfig+0x162>
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d810      	bhi.n	80084f4 <UART_SetConfig+0x174>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <UART_SetConfig+0x15c>
 80084d6:	2b10      	cmp	r3, #16
 80084d8:	d006      	beq.n	80084e8 <UART_SetConfig+0x168>
 80084da:	e00b      	b.n	80084f4 <UART_SetConfig+0x174>
 80084dc:	2300      	movs	r3, #0
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e0f1      	b.n	80086c6 <UART_SetConfig+0x346>
 80084e2:	2302      	movs	r3, #2
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e0ee      	b.n	80086c6 <UART_SetConfig+0x346>
 80084e8:	2304      	movs	r3, #4
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e0eb      	b.n	80086c6 <UART_SetConfig+0x346>
 80084ee:	2308      	movs	r3, #8
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e0e8      	b.n	80086c6 <UART_SetConfig+0x346>
 80084f4:	2310      	movs	r3, #16
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	e0e5      	b.n	80086c6 <UART_SetConfig+0x346>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a57      	ldr	r2, [pc, #348]	; (800865c <UART_SetConfig+0x2dc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d120      	bne.n	8008546 <UART_SetConfig+0x1c6>
 8008504:	4b52      	ldr	r3, [pc, #328]	; (8008650 <UART_SetConfig+0x2d0>)
 8008506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800850e:	2bc0      	cmp	r3, #192	; 0xc0
 8008510:	d013      	beq.n	800853a <UART_SetConfig+0x1ba>
 8008512:	2bc0      	cmp	r3, #192	; 0xc0
 8008514:	d814      	bhi.n	8008540 <UART_SetConfig+0x1c0>
 8008516:	2b80      	cmp	r3, #128	; 0x80
 8008518:	d009      	beq.n	800852e <UART_SetConfig+0x1ae>
 800851a:	2b80      	cmp	r3, #128	; 0x80
 800851c:	d810      	bhi.n	8008540 <UART_SetConfig+0x1c0>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <UART_SetConfig+0x1a8>
 8008522:	2b40      	cmp	r3, #64	; 0x40
 8008524:	d006      	beq.n	8008534 <UART_SetConfig+0x1b4>
 8008526:	e00b      	b.n	8008540 <UART_SetConfig+0x1c0>
 8008528:	2300      	movs	r3, #0
 800852a:	77fb      	strb	r3, [r7, #31]
 800852c:	e0cb      	b.n	80086c6 <UART_SetConfig+0x346>
 800852e:	2302      	movs	r3, #2
 8008530:	77fb      	strb	r3, [r7, #31]
 8008532:	e0c8      	b.n	80086c6 <UART_SetConfig+0x346>
 8008534:	2304      	movs	r3, #4
 8008536:	77fb      	strb	r3, [r7, #31]
 8008538:	e0c5      	b.n	80086c6 <UART_SetConfig+0x346>
 800853a:	2308      	movs	r3, #8
 800853c:	77fb      	strb	r3, [r7, #31]
 800853e:	e0c2      	b.n	80086c6 <UART_SetConfig+0x346>
 8008540:	2310      	movs	r3, #16
 8008542:	77fb      	strb	r3, [r7, #31]
 8008544:	e0bf      	b.n	80086c6 <UART_SetConfig+0x346>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a45      	ldr	r2, [pc, #276]	; (8008660 <UART_SetConfig+0x2e0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d125      	bne.n	800859c <UART_SetConfig+0x21c>
 8008550:	4b3f      	ldr	r3, [pc, #252]	; (8008650 <UART_SetConfig+0x2d0>)
 8008552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800855a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855e:	d017      	beq.n	8008590 <UART_SetConfig+0x210>
 8008560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008564:	d817      	bhi.n	8008596 <UART_SetConfig+0x216>
 8008566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800856a:	d00b      	beq.n	8008584 <UART_SetConfig+0x204>
 800856c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008570:	d811      	bhi.n	8008596 <UART_SetConfig+0x216>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <UART_SetConfig+0x1fe>
 8008576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857a:	d006      	beq.n	800858a <UART_SetConfig+0x20a>
 800857c:	e00b      	b.n	8008596 <UART_SetConfig+0x216>
 800857e:	2300      	movs	r3, #0
 8008580:	77fb      	strb	r3, [r7, #31]
 8008582:	e0a0      	b.n	80086c6 <UART_SetConfig+0x346>
 8008584:	2302      	movs	r3, #2
 8008586:	77fb      	strb	r3, [r7, #31]
 8008588:	e09d      	b.n	80086c6 <UART_SetConfig+0x346>
 800858a:	2304      	movs	r3, #4
 800858c:	77fb      	strb	r3, [r7, #31]
 800858e:	e09a      	b.n	80086c6 <UART_SetConfig+0x346>
 8008590:	2308      	movs	r3, #8
 8008592:	77fb      	strb	r3, [r7, #31]
 8008594:	e097      	b.n	80086c6 <UART_SetConfig+0x346>
 8008596:	2310      	movs	r3, #16
 8008598:	77fb      	strb	r3, [r7, #31]
 800859a:	e094      	b.n	80086c6 <UART_SetConfig+0x346>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a30      	ldr	r2, [pc, #192]	; (8008664 <UART_SetConfig+0x2e4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d125      	bne.n	80085f2 <UART_SetConfig+0x272>
 80085a6:	4b2a      	ldr	r3, [pc, #168]	; (8008650 <UART_SetConfig+0x2d0>)
 80085a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085b4:	d017      	beq.n	80085e6 <UART_SetConfig+0x266>
 80085b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085ba:	d817      	bhi.n	80085ec <UART_SetConfig+0x26c>
 80085bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c0:	d00b      	beq.n	80085da <UART_SetConfig+0x25a>
 80085c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c6:	d811      	bhi.n	80085ec <UART_SetConfig+0x26c>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <UART_SetConfig+0x254>
 80085cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d0:	d006      	beq.n	80085e0 <UART_SetConfig+0x260>
 80085d2:	e00b      	b.n	80085ec <UART_SetConfig+0x26c>
 80085d4:	2301      	movs	r3, #1
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e075      	b.n	80086c6 <UART_SetConfig+0x346>
 80085da:	2302      	movs	r3, #2
 80085dc:	77fb      	strb	r3, [r7, #31]
 80085de:	e072      	b.n	80086c6 <UART_SetConfig+0x346>
 80085e0:	2304      	movs	r3, #4
 80085e2:	77fb      	strb	r3, [r7, #31]
 80085e4:	e06f      	b.n	80086c6 <UART_SetConfig+0x346>
 80085e6:	2308      	movs	r3, #8
 80085e8:	77fb      	strb	r3, [r7, #31]
 80085ea:	e06c      	b.n	80086c6 <UART_SetConfig+0x346>
 80085ec:	2310      	movs	r3, #16
 80085ee:	77fb      	strb	r3, [r7, #31]
 80085f0:	e069      	b.n	80086c6 <UART_SetConfig+0x346>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a1c      	ldr	r2, [pc, #112]	; (8008668 <UART_SetConfig+0x2e8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d137      	bne.n	800866c <UART_SetConfig+0x2ec>
 80085fc:	4b14      	ldr	r3, [pc, #80]	; (8008650 <UART_SetConfig+0x2d0>)
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008602:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800860a:	d017      	beq.n	800863c <UART_SetConfig+0x2bc>
 800860c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008610:	d817      	bhi.n	8008642 <UART_SetConfig+0x2c2>
 8008612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008616:	d00b      	beq.n	8008630 <UART_SetConfig+0x2b0>
 8008618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800861c:	d811      	bhi.n	8008642 <UART_SetConfig+0x2c2>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <UART_SetConfig+0x2aa>
 8008622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008626:	d006      	beq.n	8008636 <UART_SetConfig+0x2b6>
 8008628:	e00b      	b.n	8008642 <UART_SetConfig+0x2c2>
 800862a:	2300      	movs	r3, #0
 800862c:	77fb      	strb	r3, [r7, #31]
 800862e:	e04a      	b.n	80086c6 <UART_SetConfig+0x346>
 8008630:	2302      	movs	r3, #2
 8008632:	77fb      	strb	r3, [r7, #31]
 8008634:	e047      	b.n	80086c6 <UART_SetConfig+0x346>
 8008636:	2304      	movs	r3, #4
 8008638:	77fb      	strb	r3, [r7, #31]
 800863a:	e044      	b.n	80086c6 <UART_SetConfig+0x346>
 800863c:	2308      	movs	r3, #8
 800863e:	77fb      	strb	r3, [r7, #31]
 8008640:	e041      	b.n	80086c6 <UART_SetConfig+0x346>
 8008642:	2310      	movs	r3, #16
 8008644:	77fb      	strb	r3, [r7, #31]
 8008646:	e03e      	b.n	80086c6 <UART_SetConfig+0x346>
 8008648:	efff69f3 	.word	0xefff69f3
 800864c:	40011000 	.word	0x40011000
 8008650:	40023800 	.word	0x40023800
 8008654:	40004400 	.word	0x40004400
 8008658:	40004800 	.word	0x40004800
 800865c:	40004c00 	.word	0x40004c00
 8008660:	40005000 	.word	0x40005000
 8008664:	40011400 	.word	0x40011400
 8008668:	40007800 	.word	0x40007800
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a71      	ldr	r2, [pc, #452]	; (8008838 <UART_SetConfig+0x4b8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d125      	bne.n	80086c2 <UART_SetConfig+0x342>
 8008676:	4b71      	ldr	r3, [pc, #452]	; (800883c <UART_SetConfig+0x4bc>)
 8008678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008680:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008684:	d017      	beq.n	80086b6 <UART_SetConfig+0x336>
 8008686:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800868a:	d817      	bhi.n	80086bc <UART_SetConfig+0x33c>
 800868c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008690:	d00b      	beq.n	80086aa <UART_SetConfig+0x32a>
 8008692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008696:	d811      	bhi.n	80086bc <UART_SetConfig+0x33c>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <UART_SetConfig+0x324>
 800869c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086a0:	d006      	beq.n	80086b0 <UART_SetConfig+0x330>
 80086a2:	e00b      	b.n	80086bc <UART_SetConfig+0x33c>
 80086a4:	2300      	movs	r3, #0
 80086a6:	77fb      	strb	r3, [r7, #31]
 80086a8:	e00d      	b.n	80086c6 <UART_SetConfig+0x346>
 80086aa:	2302      	movs	r3, #2
 80086ac:	77fb      	strb	r3, [r7, #31]
 80086ae:	e00a      	b.n	80086c6 <UART_SetConfig+0x346>
 80086b0:	2304      	movs	r3, #4
 80086b2:	77fb      	strb	r3, [r7, #31]
 80086b4:	e007      	b.n	80086c6 <UART_SetConfig+0x346>
 80086b6:	2308      	movs	r3, #8
 80086b8:	77fb      	strb	r3, [r7, #31]
 80086ba:	e004      	b.n	80086c6 <UART_SetConfig+0x346>
 80086bc:	2310      	movs	r3, #16
 80086be:	77fb      	strb	r3, [r7, #31]
 80086c0:	e001      	b.n	80086c6 <UART_SetConfig+0x346>
 80086c2:	2310      	movs	r3, #16
 80086c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086ce:	d15a      	bne.n	8008786 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80086d0:	7ffb      	ldrb	r3, [r7, #31]
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	d827      	bhi.n	8008726 <UART_SetConfig+0x3a6>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <UART_SetConfig+0x35c>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008709 	.word	0x08008709
 80086e4:	08008711 	.word	0x08008711
 80086e8:	08008727 	.word	0x08008727
 80086ec:	08008717 	.word	0x08008717
 80086f0:	08008727 	.word	0x08008727
 80086f4:	08008727 	.word	0x08008727
 80086f8:	08008727 	.word	0x08008727
 80086fc:	0800871f 	.word	0x0800871f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008700:	f7fd ffce 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 8008704:	61b8      	str	r0, [r7, #24]
        break;
 8008706:	e013      	b.n	8008730 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008708:	f7fd ffde 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 800870c:	61b8      	str	r0, [r7, #24]
        break;
 800870e:	e00f      	b.n	8008730 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008710:	4b4b      	ldr	r3, [pc, #300]	; (8008840 <UART_SetConfig+0x4c0>)
 8008712:	61bb      	str	r3, [r7, #24]
        break;
 8008714:	e00c      	b.n	8008730 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008716:	f7fd ff01 	bl	800651c <HAL_RCC_GetSysClockFreq>
 800871a:	61b8      	str	r0, [r7, #24]
        break;
 800871c:	e008      	b.n	8008730 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800871e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008722:	61bb      	str	r3, [r7, #24]
        break;
 8008724:	e004      	b.n	8008730 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	77bb      	strb	r3, [r7, #30]
        break;
 800872e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d074      	beq.n	8008820 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	005a      	lsls	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	085b      	lsrs	r3, r3, #1
 8008740:	441a      	add	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	fbb2 f3f3 	udiv	r3, r2, r3
 800874a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	2b0f      	cmp	r3, #15
 8008750:	d916      	bls.n	8008780 <UART_SetConfig+0x400>
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008758:	d212      	bcs.n	8008780 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	b29b      	uxth	r3, r3
 800875e:	f023 030f 	bic.w	r3, r3, #15
 8008762:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	085b      	lsrs	r3, r3, #1
 8008768:	b29b      	uxth	r3, r3
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	b29a      	uxth	r2, r3
 8008770:	89fb      	ldrh	r3, [r7, #14]
 8008772:	4313      	orrs	r3, r2
 8008774:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	89fa      	ldrh	r2, [r7, #14]
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	e04f      	b.n	8008820 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	77bb      	strb	r3, [r7, #30]
 8008784:	e04c      	b.n	8008820 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008786:	7ffb      	ldrb	r3, [r7, #31]
 8008788:	2b08      	cmp	r3, #8
 800878a:	d828      	bhi.n	80087de <UART_SetConfig+0x45e>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <UART_SetConfig+0x414>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087b9 	.word	0x080087b9
 8008798:	080087c1 	.word	0x080087c1
 800879c:	080087c9 	.word	0x080087c9
 80087a0:	080087df 	.word	0x080087df
 80087a4:	080087cf 	.word	0x080087cf
 80087a8:	080087df 	.word	0x080087df
 80087ac:	080087df 	.word	0x080087df
 80087b0:	080087df 	.word	0x080087df
 80087b4:	080087d7 	.word	0x080087d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b8:	f7fd ff72 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 80087bc:	61b8      	str	r0, [r7, #24]
        break;
 80087be:	e013      	b.n	80087e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087c0:	f7fd ff82 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 80087c4:	61b8      	str	r0, [r7, #24]
        break;
 80087c6:	e00f      	b.n	80087e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087c8:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <UART_SetConfig+0x4c0>)
 80087ca:	61bb      	str	r3, [r7, #24]
        break;
 80087cc:	e00c      	b.n	80087e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ce:	f7fd fea5 	bl	800651c <HAL_RCC_GetSysClockFreq>
 80087d2:	61b8      	str	r0, [r7, #24]
        break;
 80087d4:	e008      	b.n	80087e8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087da:	61bb      	str	r3, [r7, #24]
        break;
 80087dc:	e004      	b.n	80087e8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	77bb      	strb	r3, [r7, #30]
        break;
 80087e6:	bf00      	nop
    }

    if (pclk != 0U)
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d018      	beq.n	8008820 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	085a      	lsrs	r2, r3, #1
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	441a      	add	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008800:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b0f      	cmp	r3, #15
 8008806:	d909      	bls.n	800881c <UART_SetConfig+0x49c>
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880e:	d205      	bcs.n	800881c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	b29a      	uxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	e001      	b.n	8008820 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800882c:	7fbb      	ldrb	r3, [r7, #30]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3720      	adds	r7, #32
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	40007c00 	.word	0x40007c00
 800883c:	40023800 	.word	0x40023800
 8008840:	00f42400 	.word	0x00f42400

08008844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	f003 0310 	and.w	r3, r3, #16
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d01a      	beq.n	800895a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008942:	d10a      	bne.n	800895a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	605a      	str	r2, [r3, #4]
  }
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af02      	add	r7, sp, #8
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008998:	f7fb fba8 	bl	80040ec <HAL_GetTick>
 800899c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d10e      	bne.n	80089ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f817 	bl	80089ee <UART_WaitOnFlagUntilTimeout>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e00d      	b.n	80089e6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2220      	movs	r2, #32
 80089ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b09c      	sub	sp, #112	; 0x70
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	603b      	str	r3, [r7, #0]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089fe:	e0a5      	b.n	8008b4c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a06:	f000 80a1 	beq.w	8008b4c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a0a:	f7fb fb6f 	bl	80040ec <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d302      	bcc.n	8008a20 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d13e      	bne.n	8008a9e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a34:	667b      	str	r3, [r7, #100]	; 0x64
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e6      	bne.n	8008a20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a64:	f023 0301 	bic.w	r3, r3, #1
 8008a68:	663b      	str	r3, [r7, #96]	; 0x60
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a72:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e5      	bne.n	8008a52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e067      	b.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d04f      	beq.n	8008b4c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aba:	d147      	bne.n	8008b4c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ac4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e6      	bne.n	8008ac6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	613b      	str	r3, [r7, #16]
   return(result);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f023 0301 	bic.w	r3, r3, #1
 8008b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b18:	623a      	str	r2, [r7, #32]
 8008b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	69f9      	ldr	r1, [r7, #28]
 8008b1e:	6a3a      	ldr	r2, [r7, #32]
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2220      	movs	r2, #32
 8008b36:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e010      	b.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69da      	ldr	r2, [r3, #28]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4013      	ands	r3, r2
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2301      	moveq	r3, #1
 8008b5e:	2300      	movne	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	461a      	mov	r2, r3
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	f43f af4a 	beq.w	8008a00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3770      	adds	r7, #112	; 0x70
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b097      	sub	sp, #92	; 0x5c
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	88fa      	ldrh	r2, [r7, #6]
 8008b98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008baa:	d10e      	bne.n	8008bca <UART_Start_Receive_IT+0x52>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d105      	bne.n	8008bc0 <UART_Start_Receive_IT+0x48>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bbe:	e02d      	b.n	8008c1c <UART_Start_Receive_IT+0xa4>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	22ff      	movs	r2, #255	; 0xff
 8008bc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bc8:	e028      	b.n	8008c1c <UART_Start_Receive_IT+0xa4>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10d      	bne.n	8008bee <UART_Start_Receive_IT+0x76>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <UART_Start_Receive_IT+0x6c>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	22ff      	movs	r2, #255	; 0xff
 8008bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008be2:	e01b      	b.n	8008c1c <UART_Start_Receive_IT+0xa4>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	227f      	movs	r2, #127	; 0x7f
 8008be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bec:	e016      	b.n	8008c1c <UART_Start_Receive_IT+0xa4>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bf6:	d10d      	bne.n	8008c14 <UART_Start_Receive_IT+0x9c>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <UART_Start_Receive_IT+0x92>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	227f      	movs	r2, #127	; 0x7f
 8008c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c08:	e008      	b.n	8008c1c <UART_Start_Receive_IT+0xa4>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	223f      	movs	r2, #63	; 0x3f
 8008c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c12:	e003      	b.n	8008c1c <UART_Start_Receive_IT+0xa4>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2222      	movs	r2, #34	; 0x22
 8008c28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c34:	e853 3f00 	ldrex	r3, [r3]
 8008c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	657b      	str	r3, [r7, #84]	; 0x54
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c52:	e841 2300 	strex	r3, r2, [r1]
 8008c56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1e5      	bne.n	8008c2a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c66:	d107      	bne.n	8008c78 <UART_Start_Receive_IT+0x100>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d103      	bne.n	8008c78 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a24      	ldr	r2, [pc, #144]	; (8008d04 <UART_Start_Receive_IT+0x18c>)
 8008c74:	665a      	str	r2, [r3, #100]	; 0x64
 8008c76:	e002      	b.n	8008c7e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <UART_Start_Receive_IT+0x190>)
 8008c7c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d019      	beq.n	8008cc2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
 8008cae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e6      	bne.n	8008c8e <UART_Start_Receive_IT+0x116>
 8008cc0:	e018      	b.n	8008cf4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f043 0320 	orr.w	r3, r3, #32
 8008cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce0:	623b      	str	r3, [r7, #32]
 8008ce2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	69f9      	ldr	r1, [r7, #28]
 8008ce6:	6a3a      	ldr	r2, [r7, #32]
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e6      	bne.n	8008cc2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	375c      	adds	r7, #92	; 0x5c
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	08008faf 	.word	0x08008faf
 8008d08:	08008e53 	.word	0x08008e53

08008d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b095      	sub	sp, #84	; 0x54
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d32:	643b      	str	r3, [r7, #64]	; 0x40
 8008d34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e6      	bne.n	8008d14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	e853 3f00 	ldrex	r3, [r3]
 8008d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	f023 0301 	bic.w	r3, r3, #1
 8008d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3308      	adds	r3, #8
 8008d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e5      	bne.n	8008d46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d118      	bne.n	8008db4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f023 0310 	bic.w	r3, r3, #16
 8008d96:	647b      	str	r3, [r7, #68]	; 0x44
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6979      	ldr	r1, [r7, #20]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	613b      	str	r3, [r7, #16]
   return(result);
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e6      	bne.n	8008d82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2220      	movs	r2, #32
 8008db8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008dc6:	bf00      	nop
 8008dc8:	3754      	adds	r7, #84	; 0x54
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff faaf 	bl	8008354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b088      	sub	sp, #32
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e1a:	61fb      	str	r3, [r7, #28]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	6979      	ldr	r1, [r7, #20]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	613b      	str	r3, [r7, #16]
   return(result);
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7f9 fb4b 	bl	80024e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e4a:	bf00      	nop
 8008e4c:	3720      	adds	r7, #32
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b096      	sub	sp, #88	; 0x58
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e68:	2b22      	cmp	r3, #34	; 0x22
 8008e6a:	f040 8094 	bne.w	8008f96 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e78:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008e7c:	b2d9      	uxtb	r1, r3
 8008e7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e88:	400a      	ands	r2, r1
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d177      	bne.n	8008fa6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eca:	653b      	str	r3, [r7, #80]	; 0x50
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3308      	adds	r3, #8
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	f023 0301 	bic.w	r3, r3, #1
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	3308      	adds	r3, #8
 8008f06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f08:	633a      	str	r2, [r7, #48]	; 0x30
 8008f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e5      	bne.n	8008ee8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d12e      	bne.n	8008f8e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0310 	bic.w	r3, r3, #16
 8008f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	69b9      	ldr	r1, [r7, #24]
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	617b      	str	r3, [r7, #20]
   return(result);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f003 0310 	and.w	r3, r3, #16
 8008f72:	2b10      	cmp	r3, #16
 8008f74:	d103      	bne.n	8008f7e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2210      	movs	r2, #16
 8008f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff f9ee 	bl	8008368 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f8c:	e00b      	b.n	8008fa6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7f8 ffc4 	bl	8001f1c <HAL_UART_RxCpltCallback>
}
 8008f94:	e007      	b.n	8008fa6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699a      	ldr	r2, [r3, #24]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0208 	orr.w	r2, r2, #8
 8008fa4:	619a      	str	r2, [r3, #24]
}
 8008fa6:	bf00      	nop
 8008fa8:	3758      	adds	r7, #88	; 0x58
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b096      	sub	sp, #88	; 0x58
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fc4:	2b22      	cmp	r3, #34	; 0x22
 8008fc6:	f040 8094 	bne.w	80090f2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fda:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008fde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fe8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	1c9a      	adds	r2, r3, #2
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800900c:	b29b      	uxth	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d177      	bne.n	8009102 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	461a      	mov	r2, r3
 800902e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009030:	643b      	str	r3, [r7, #64]	; 0x40
 8009032:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009038:	e841 2300 	strex	r3, r2, [r1]
 800903c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e6      	bne.n	8009012 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3308      	adds	r3, #8
 800904a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	61fb      	str	r3, [r7, #28]
   return(result);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f023 0301 	bic.w	r3, r3, #1
 800905a:	64bb      	str	r3, [r7, #72]	; 0x48
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	3308      	adds	r3, #8
 8009062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800906a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e5      	bne.n	8009044 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009088:	2b01      	cmp	r3, #1
 800908a:	d12e      	bne.n	80090ea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f023 0310 	bic.w	r3, r3, #16
 80090a6:	647b      	str	r3, [r7, #68]	; 0x44
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6979      	ldr	r1, [r7, #20]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	613b      	str	r3, [r7, #16]
   return(result);
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e6      	bne.n	8009092 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f003 0310 	and.w	r3, r3, #16
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d103      	bne.n	80090da <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2210      	movs	r2, #16
 80090d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff f940 	bl	8008368 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090e8:	e00b      	b.n	8009102 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7f8 ff16 	bl	8001f1c <HAL_UART_RxCpltCallback>
}
 80090f0:	e007      	b.n	8009102 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699a      	ldr	r2, [r3, #24]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0208 	orr.w	r2, r2, #8
 8009100:	619a      	str	r2, [r3, #24]
}
 8009102:	bf00      	nop
 8009104:	3758      	adds	r7, #88	; 0x58
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <getMAC>:
uint8_t IP_ADDRESS[4];
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
uint8_t getMAC(int n){
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	/* get MAC hardware address */
	return gnetif.hwaddr[n];
 8009114:	4a05      	ldr	r2, [pc, #20]	; (800912c <getMAC+0x20>)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	3322      	adds	r3, #34	; 0x22
 800911c:	781b      	ldrb	r3, [r3, #0]
}
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	2000554c 	.word	0x2000554c

08009130 <setIP>:

const ip4_addr_t* getIPAddr(){
	return netif_ip4_addr(&gnetif);
}

void setIP(u32_t addr){
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	60fb      	str	r3, [r7, #12]
	netif_set_ipaddr(&gnetif,&temp);
 800913c:	f107 030c 	add.w	r3, r7, #12
 8009140:	4619      	mov	r1, r3
 8009142:	4803      	ldr	r0, [pc, #12]	; (8009150 <setIP+0x20>)
 8009144:	f007 fb48 	bl	80107d8 <netif_set_ipaddr>
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	2000554c 	.word	0x2000554c

08009154 <setNetmask>:
	ip4_addr_t temp;
	temp.addr = addr;
	netif_set_gw(&gnetif,&temp);
}

void setNetmask(u32_t addr){
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	ip4_addr_t temp;
	temp.addr = addr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	60fb      	str	r3, [r7, #12]
	netif_set_netmask(&gnetif,&temp);
 8009160:	f107 030c 	add.w	r3, r7, #12
 8009164:	4619      	mov	r1, r3
 8009166:	4803      	ldr	r0, [pc, #12]	; (8009174 <setNetmask+0x20>)
 8009168:	f007 fb7e 	bl	8010868 <netif_set_netmask>
}
 800916c:	bf00      	nop
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	2000554c 	.word	0x2000554c

08009178 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800917e:	4b8c      	ldr	r3, [pc, #560]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009180:	22c0      	movs	r2, #192	; 0xc0
 8009182:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009184:	4b8a      	ldr	r3, [pc, #552]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009186:	22a8      	movs	r2, #168	; 0xa8
 8009188:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800918a:	4b89      	ldr	r3, [pc, #548]	; (80093b0 <MX_LWIP_Init+0x238>)
 800918c:	2200      	movs	r2, #0
 800918e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 8009190:	4b87      	ldr	r3, [pc, #540]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009192:	2237      	movs	r2, #55	; 0x37
 8009194:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009196:	4b87      	ldr	r3, [pc, #540]	; (80093b4 <MX_LWIP_Init+0x23c>)
 8009198:	22ff      	movs	r2, #255	; 0xff
 800919a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800919c:	4b85      	ldr	r3, [pc, #532]	; (80093b4 <MX_LWIP_Init+0x23c>)
 800919e:	22ff      	movs	r2, #255	; 0xff
 80091a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80091a2:	4b84      	ldr	r3, [pc, #528]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80091a8:	4b82      	ldr	r3, [pc, #520]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80091ae:	4b82      	ldr	r3, [pc, #520]	; (80093b8 <MX_LWIP_Init+0x240>)
 80091b0:	22c0      	movs	r2, #192	; 0xc0
 80091b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80091b4:	4b80      	ldr	r3, [pc, #512]	; (80093b8 <MX_LWIP_Init+0x240>)
 80091b6:	22a8      	movs	r2, #168	; 0xa8
 80091b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80091ba:	4b7f      	ldr	r3, [pc, #508]	; (80093b8 <MX_LWIP_Init+0x240>)
 80091bc:	2200      	movs	r2, #0
 80091be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80091c0:	4b7d      	ldr	r3, [pc, #500]	; (80093b8 <MX_LWIP_Init+0x240>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80091c6:	2100      	movs	r1, #0
 80091c8:	2000      	movs	r0, #0
 80091ca:	f005 fc45 	bl	800ea58 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80091ce:	4b78      	ldr	r3, [pc, #480]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	061a      	lsls	r2, r3, #24
 80091d4:	4b76      	ldr	r3, [pc, #472]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	431a      	orrs	r2, r3
 80091dc:	4b74      	ldr	r3, [pc, #464]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091de:	789b      	ldrb	r3, [r3, #2]
 80091e0:	021b      	lsls	r3, r3, #8
 80091e2:	4313      	orrs	r3, r2
 80091e4:	4a72      	ldr	r2, [pc, #456]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091e6:	78d2      	ldrb	r2, [r2, #3]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	061a      	lsls	r2, r3, #24
 80091ec:	4b70      	ldr	r3, [pc, #448]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	0619      	lsls	r1, r3, #24
 80091f2:	4b6f      	ldr	r3, [pc, #444]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091f4:	785b      	ldrb	r3, [r3, #1]
 80091f6:	041b      	lsls	r3, r3, #16
 80091f8:	4319      	orrs	r1, r3
 80091fa:	4b6d      	ldr	r3, [pc, #436]	; (80093b0 <MX_LWIP_Init+0x238>)
 80091fc:	789b      	ldrb	r3, [r3, #2]
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	430b      	orrs	r3, r1
 8009202:	496b      	ldr	r1, [pc, #428]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009204:	78c9      	ldrb	r1, [r1, #3]
 8009206:	430b      	orrs	r3, r1
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800920e:	431a      	orrs	r2, r3
 8009210:	4b67      	ldr	r3, [pc, #412]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	0619      	lsls	r1, r3, #24
 8009216:	4b66      	ldr	r3, [pc, #408]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009218:	785b      	ldrb	r3, [r3, #1]
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	4319      	orrs	r1, r3
 800921e:	4b64      	ldr	r3, [pc, #400]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009220:	789b      	ldrb	r3, [r3, #2]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	430b      	orrs	r3, r1
 8009226:	4962      	ldr	r1, [pc, #392]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009228:	78c9      	ldrb	r1, [r1, #3]
 800922a:	430b      	orrs	r3, r1
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009232:	431a      	orrs	r2, r3
 8009234:	4b5e      	ldr	r3, [pc, #376]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	0619      	lsls	r1, r3, #24
 800923a:	4b5d      	ldr	r3, [pc, #372]	; (80093b0 <MX_LWIP_Init+0x238>)
 800923c:	785b      	ldrb	r3, [r3, #1]
 800923e:	041b      	lsls	r3, r3, #16
 8009240:	4319      	orrs	r1, r3
 8009242:	4b5b      	ldr	r3, [pc, #364]	; (80093b0 <MX_LWIP_Init+0x238>)
 8009244:	789b      	ldrb	r3, [r3, #2]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	430b      	orrs	r3, r1
 800924a:	4959      	ldr	r1, [pc, #356]	; (80093b0 <MX_LWIP_Init+0x238>)
 800924c:	78c9      	ldrb	r1, [r1, #3]
 800924e:	430b      	orrs	r3, r1
 8009250:	0e1b      	lsrs	r3, r3, #24
 8009252:	4313      	orrs	r3, r2
 8009254:	4a59      	ldr	r2, [pc, #356]	; (80093bc <MX_LWIP_Init+0x244>)
 8009256:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009258:	4b56      	ldr	r3, [pc, #344]	; (80093b4 <MX_LWIP_Init+0x23c>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	061a      	lsls	r2, r3, #24
 800925e:	4b55      	ldr	r3, [pc, #340]	; (80093b4 <MX_LWIP_Init+0x23c>)
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	431a      	orrs	r2, r3
 8009266:	4b53      	ldr	r3, [pc, #332]	; (80093b4 <MX_LWIP_Init+0x23c>)
 8009268:	789b      	ldrb	r3, [r3, #2]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	4313      	orrs	r3, r2
 800926e:	4a51      	ldr	r2, [pc, #324]	; (80093b4 <MX_LWIP_Init+0x23c>)
 8009270:	78d2      	ldrb	r2, [r2, #3]
 8009272:	4313      	orrs	r3, r2
 8009274:	061a      	lsls	r2, r3, #24
 8009276:	4b4f      	ldr	r3, [pc, #316]	; (80093b4 <MX_LWIP_Init+0x23c>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	0619      	lsls	r1, r3, #24
 800927c:	4b4d      	ldr	r3, [pc, #308]	; (80093b4 <MX_LWIP_Init+0x23c>)
 800927e:	785b      	ldrb	r3, [r3, #1]
 8009280:	041b      	lsls	r3, r3, #16
 8009282:	4319      	orrs	r1, r3
 8009284:	4b4b      	ldr	r3, [pc, #300]	; (80093b4 <MX_LWIP_Init+0x23c>)
 8009286:	789b      	ldrb	r3, [r3, #2]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	430b      	orrs	r3, r1
 800928c:	4949      	ldr	r1, [pc, #292]	; (80093b4 <MX_LWIP_Init+0x23c>)
 800928e:	78c9      	ldrb	r1, [r1, #3]
 8009290:	430b      	orrs	r3, r1
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009298:	431a      	orrs	r2, r3
 800929a:	4b46      	ldr	r3, [pc, #280]	; (80093b4 <MX_LWIP_Init+0x23c>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	0619      	lsls	r1, r3, #24
 80092a0:	4b44      	ldr	r3, [pc, #272]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	041b      	lsls	r3, r3, #16
 80092a6:	4319      	orrs	r1, r3
 80092a8:	4b42      	ldr	r3, [pc, #264]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092aa:	789b      	ldrb	r3, [r3, #2]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	430b      	orrs	r3, r1
 80092b0:	4940      	ldr	r1, [pc, #256]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092b2:	78c9      	ldrb	r1, [r1, #3]
 80092b4:	430b      	orrs	r3, r1
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092bc:	431a      	orrs	r2, r3
 80092be:	4b3d      	ldr	r3, [pc, #244]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	0619      	lsls	r1, r3, #24
 80092c4:	4b3b      	ldr	r3, [pc, #236]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092c6:	785b      	ldrb	r3, [r3, #1]
 80092c8:	041b      	lsls	r3, r3, #16
 80092ca:	4319      	orrs	r1, r3
 80092cc:	4b39      	ldr	r3, [pc, #228]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092ce:	789b      	ldrb	r3, [r3, #2]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	430b      	orrs	r3, r1
 80092d4:	4937      	ldr	r1, [pc, #220]	; (80093b4 <MX_LWIP_Init+0x23c>)
 80092d6:	78c9      	ldrb	r1, [r1, #3]
 80092d8:	430b      	orrs	r3, r1
 80092da:	0e1b      	lsrs	r3, r3, #24
 80092dc:	4313      	orrs	r3, r2
 80092de:	4a38      	ldr	r2, [pc, #224]	; (80093c0 <MX_LWIP_Init+0x248>)
 80092e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80092e2:	4b35      	ldr	r3, [pc, #212]	; (80093b8 <MX_LWIP_Init+0x240>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	061a      	lsls	r2, r3, #24
 80092e8:	4b33      	ldr	r3, [pc, #204]	; (80093b8 <MX_LWIP_Init+0x240>)
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	041b      	lsls	r3, r3, #16
 80092ee:	431a      	orrs	r2, r3
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <MX_LWIP_Init+0x240>)
 80092f2:	789b      	ldrb	r3, [r3, #2]
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	4313      	orrs	r3, r2
 80092f8:	4a2f      	ldr	r2, [pc, #188]	; (80093b8 <MX_LWIP_Init+0x240>)
 80092fa:	78d2      	ldrb	r2, [r2, #3]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	061a      	lsls	r2, r3, #24
 8009300:	4b2d      	ldr	r3, [pc, #180]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	0619      	lsls	r1, r3, #24
 8009306:	4b2c      	ldr	r3, [pc, #176]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009308:	785b      	ldrb	r3, [r3, #1]
 800930a:	041b      	lsls	r3, r3, #16
 800930c:	4319      	orrs	r1, r3
 800930e:	4b2a      	ldr	r3, [pc, #168]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009310:	789b      	ldrb	r3, [r3, #2]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	430b      	orrs	r3, r1
 8009316:	4928      	ldr	r1, [pc, #160]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009318:	78c9      	ldrb	r1, [r1, #3]
 800931a:	430b      	orrs	r3, r1
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009322:	431a      	orrs	r2, r3
 8009324:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	0619      	lsls	r1, r3, #24
 800932a:	4b23      	ldr	r3, [pc, #140]	; (80093b8 <MX_LWIP_Init+0x240>)
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	041b      	lsls	r3, r3, #16
 8009330:	4319      	orrs	r1, r3
 8009332:	4b21      	ldr	r3, [pc, #132]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009334:	789b      	ldrb	r3, [r3, #2]
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	430b      	orrs	r3, r1
 800933a:	491f      	ldr	r1, [pc, #124]	; (80093b8 <MX_LWIP_Init+0x240>)
 800933c:	78c9      	ldrb	r1, [r1, #3]
 800933e:	430b      	orrs	r3, r1
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009346:	431a      	orrs	r2, r3
 8009348:	4b1b      	ldr	r3, [pc, #108]	; (80093b8 <MX_LWIP_Init+0x240>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	0619      	lsls	r1, r3, #24
 800934e:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	041b      	lsls	r3, r3, #16
 8009354:	4319      	orrs	r1, r3
 8009356:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009358:	789b      	ldrb	r3, [r3, #2]
 800935a:	021b      	lsls	r3, r3, #8
 800935c:	430b      	orrs	r3, r1
 800935e:	4916      	ldr	r1, [pc, #88]	; (80093b8 <MX_LWIP_Init+0x240>)
 8009360:	78c9      	ldrb	r1, [r1, #3]
 8009362:	430b      	orrs	r3, r1
 8009364:	0e1b      	lsrs	r3, r3, #24
 8009366:	4313      	orrs	r3, r2
 8009368:	4a16      	ldr	r2, [pc, #88]	; (80093c4 <MX_LWIP_Init+0x24c>)
 800936a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800936c:	4b16      	ldr	r3, [pc, #88]	; (80093c8 <MX_LWIP_Init+0x250>)
 800936e:	9302      	str	r3, [sp, #8]
 8009370:	4b16      	ldr	r3, [pc, #88]	; (80093cc <MX_LWIP_Init+0x254>)
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	2300      	movs	r3, #0
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <MX_LWIP_Init+0x24c>)
 800937a:	4a11      	ldr	r2, [pc, #68]	; (80093c0 <MX_LWIP_Init+0x248>)
 800937c:	490f      	ldr	r1, [pc, #60]	; (80093bc <MX_LWIP_Init+0x244>)
 800937e:	4814      	ldr	r0, [pc, #80]	; (80093d0 <MX_LWIP_Init+0x258>)
 8009380:	f007 f902 	bl	8010588 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009384:	4812      	ldr	r0, [pc, #72]	; (80093d0 <MX_LWIP_Init+0x258>)
 8009386:	f007 fb01 	bl	801098c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800938a:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <MX_LWIP_Init+0x258>)
 800938c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009390:	089b      	lsrs	r3, r3, #2
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800939c:	480c      	ldr	r0, [pc, #48]	; (80093d0 <MX_LWIP_Init+0x258>)
 800939e:	f007 fb05 	bl	80109ac <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80093a2:	e002      	b.n	80093aa <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80093a4:	480a      	ldr	r0, [pc, #40]	; (80093d0 <MX_LWIP_Init+0x258>)
 80093a6:	f007 fb6d 	bl	8010a84 <netif_set_down>
}
 80093aa:	bf00      	nop
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20005584 	.word	0x20005584
 80093b4:	20005580 	.word	0x20005580
 80093b8:	20005548 	.word	0x20005548
 80093bc:	2000557c 	.word	0x2000557c
 80093c0:	20005588 	.word	0x20005588
 80093c4:	2000558c 	.word	0x2000558c
 80093c8:	0800e969 	.word	0x0800e969
 80093cc:	08009a95 	.word	0x08009a95
 80093d0:	2000554c 	.word	0x2000554c

080093d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08e      	sub	sp, #56	; 0x38
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093e0:	2200      	movs	r2, #0
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	605a      	str	r2, [r3, #4]
 80093e6:	609a      	str	r2, [r3, #8]
 80093e8:	60da      	str	r2, [r3, #12]
 80093ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a44      	ldr	r2, [pc, #272]	; (8009504 <HAL_ETH_MspInit+0x130>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	f040 8081 	bne.w	80094fa <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80093f8:	4b43      	ldr	r3, [pc, #268]	; (8009508 <HAL_ETH_MspInit+0x134>)
 80093fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fc:	4a42      	ldr	r2, [pc, #264]	; (8009508 <HAL_ETH_MspInit+0x134>)
 80093fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009402:	6313      	str	r3, [r2, #48]	; 0x30
 8009404:	4b40      	ldr	r3, [pc, #256]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800940c:	623b      	str	r3, [r7, #32]
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	4b3d      	ldr	r3, [pc, #244]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	4a3c      	ldr	r2, [pc, #240]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800941a:	6313      	str	r3, [r2, #48]	; 0x30
 800941c:	4b3a      	ldr	r3, [pc, #232]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	4b37      	ldr	r3, [pc, #220]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800942a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942c:	4a36      	ldr	r2, [pc, #216]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800942e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009432:	6313      	str	r3, [r2, #48]	; 0x30
 8009434:	4b34      	ldr	r3, [pc, #208]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009440:	4b31      	ldr	r3, [pc, #196]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	4a30      	ldr	r2, [pc, #192]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944a:	6313      	str	r3, [r2, #48]	; 0x30
 800944c:	4b2e      	ldr	r3, [pc, #184]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800944e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009458:	4b2b      	ldr	r3, [pc, #172]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800945a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945c:	4a2a      	ldr	r2, [pc, #168]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800945e:	f043 0304 	orr.w	r3, r3, #4
 8009462:	6313      	str	r3, [r2, #48]	; 0x30
 8009464:	4b28      	ldr	r3, [pc, #160]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009470:	4b25      	ldr	r3, [pc, #148]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	4a24      	ldr	r2, [pc, #144]	; (8009508 <HAL_ETH_MspInit+0x134>)
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	6313      	str	r3, [r2, #48]	; 0x30
 800947c:	4b22      	ldr	r3, [pc, #136]	; (8009508 <HAL_ETH_MspInit+0x134>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8009488:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800948e:	2302      	movs	r3, #2
 8009490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009492:	2300      	movs	r3, #0
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009496:	2303      	movs	r3, #3
 8009498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800949a:	230b      	movs	r3, #11
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800949e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094a2:	4619      	mov	r1, r3
 80094a4:	4819      	ldr	r0, [pc, #100]	; (800950c <HAL_ETH_MspInit+0x138>)
 80094a6:	f7fc fa51 	bl	800594c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80094aa:	2332      	movs	r3, #50	; 0x32
 80094ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ae:	2302      	movs	r3, #2
 80094b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094b6:	2303      	movs	r3, #3
 80094b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80094ba:	230b      	movs	r3, #11
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c2:	4619      	mov	r1, r3
 80094c4:	4812      	ldr	r0, [pc, #72]	; (8009510 <HAL_ETH_MspInit+0x13c>)
 80094c6:	f7fc fa41 	bl	800594c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80094ca:	2386      	movs	r3, #134	; 0x86
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ce:	2302      	movs	r3, #2
 80094d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d6:	2303      	movs	r3, #3
 80094d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80094da:	230b      	movs	r3, #11
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094e2:	4619      	mov	r1, r3
 80094e4:	480b      	ldr	r0, [pc, #44]	; (8009514 <HAL_ETH_MspInit+0x140>)
 80094e6:	f7fc fa31 	bl	800594c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80094ea:	2200      	movs	r2, #0
 80094ec:	2105      	movs	r1, #5
 80094ee:	203d      	movs	r0, #61	; 0x3d
 80094f0:	f7fa fee4 	bl	80042bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80094f4:	203d      	movs	r0, #61	; 0x3d
 80094f6:	f7fa fefd 	bl	80042f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80094fa:	bf00      	nop
 80094fc:	3738      	adds	r7, #56	; 0x38
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40028000 	.word	0x40028000
 8009508:	40023800 	.word	0x40023800
 800950c:	40021800 	.word	0x40021800
 8009510:	40020800 	.word	0x40020800
 8009514:	40020000 	.word	0x40020000

08009518 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <HAL_ETH_RxCpltCallback+0x1c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fc93 	bl	8009e50 <osSemaphoreRelease>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20000d28 	.word	0x20000d28

08009538 <crc32b>:

/* USER CODE BEGIN 4 */
uint32_t crc32b(uint8_t *message, size_t size) {
 8009538:	b480      	push	{r7}
 800953a:	b089      	sub	sp, #36	; 0x24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	int i, j;
	uint32_t byte, crc, mask;

	i = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]
	crc = 0xFFFFFFFF;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295
 800954a:	617b      	str	r3, [r7, #20]
	for(int k = 0; k<size;k++) {
 800954c:	2300      	movs	r3, #0
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	e023      	b.n	800959a <crc32b+0x62>
		byte = message[k]; // Get next byte.
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	60fb      	str	r3, [r7, #12]
		crc = crc ^ byte;
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4053      	eors	r3, r2
 8009562:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) { // Do eight times.
 8009564:	2307      	movs	r3, #7
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	e00e      	b.n	8009588 <crc32b+0x50>
			mask = -(crc & 1);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	425b      	negs	r3, r3
 8009572:	60bb      	str	r3, [r7, #8]
			crc = (crc >> 1) ^ (0xEDB88320 & mask);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	085a      	lsrs	r2, r3, #1
 8009578:	68b9      	ldr	r1, [r7, #8]
 800957a:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <crc32b+0x7c>)
 800957c:	400b      	ands	r3, r1
 800957e:	4053      	eors	r3, r2
 8009580:	617b      	str	r3, [r7, #20]
		for (j = 7; j >= 0; j--) { // Do eight times.
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	3b01      	subs	r3, #1
 8009586:	61bb      	str	r3, [r7, #24]
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	daed      	bge.n	800956a <crc32b+0x32>
		}
		i = i + 1;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3301      	adds	r3, #1
 8009592:	61fb      	str	r3, [r7, #28]
	for(int k = 0; k<size;k++) {
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	3301      	adds	r3, #1
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d8d7      	bhi.n	8009552 <crc32b+0x1a>
	}
	return ~crc;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	43db      	mvns	r3, r3
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3724      	adds	r7, #36	; 0x24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	edb88320 	.word	0xedb88320

080095b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80095b8:	b5b0      	push	{r4, r5, r7, lr}
 80095ba:	b090      	sub	sp, #64	; 0x40
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80095c4:	4b69      	ldr	r3, [pc, #420]	; (800976c <low_level_init+0x1b4>)
 80095c6:	4a6a      	ldr	r2, [pc, #424]	; (8009770 <low_level_init+0x1b8>)
 80095c8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80095ca:	4b68      	ldr	r3, [pc, #416]	; (800976c <low_level_init+0x1b4>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80095d0:	4b66      	ldr	r3, [pc, #408]	; (800976c <low_level_init+0x1b4>)
 80095d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80095d6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80095d8:	4b64      	ldr	r3, [pc, #400]	; (800976c <low_level_init+0x1b4>)
 80095da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095de:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80095e0:	4b62      	ldr	r3, [pc, #392]	; (800976c <low_level_init+0x1b4>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80095e6:	2300      	movs	r3, #0
 80095e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[1] = 0x80;
 80095ec:	2380      	movs	r3, #128	; 0x80
 80095ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  MACAddr[2] = 0xE1;
 80095f2:	23e1      	movs	r3, #225	; 0xe1
 80095f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  MACAddr[3] = 0x00;
 80095f8:	2300      	movs	r3, #0
 80095fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  MACAddr[4] = 0x00;
 80095fe:	2300      	movs	r3, #0
 8009600:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[5] = 0x00;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  heth.Init.MACAddr = &MACAddr[0];
 800960a:	4a58      	ldr	r2, [pc, #352]	; (800976c <low_level_init+0x1b4>)
 800960c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009610:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009612:	4b56      	ldr	r3, [pc, #344]	; (800976c <low_level_init+0x1b4>)
 8009614:	2201      	movs	r2, #1
 8009616:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009618:	4b54      	ldr	r3, [pc, #336]	; (800976c <low_level_init+0x1b4>)
 800961a:	2200      	movs	r2, #0
 800961c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800961e:	4b53      	ldr	r3, [pc, #332]	; (800976c <low_level_init+0x1b4>)
 8009620:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009624:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  u32_t id = crc32b((uint8_t *)UID_BASE, 8);
 8009626:	2108      	movs	r1, #8
 8009628:	4852      	ldr	r0, [pc, #328]	; (8009774 <low_level_init+0x1bc>)
 800962a:	f7ff ff85 	bl	8009538 <crc32b>
 800962e:	63f8      	str	r0, [r7, #60]	; 0x3c

    MACAddr[3] = (id>>16)&0xFF;
 8009630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    MACAddr[4] =(id>>8)&0xFF;
 800963a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963c:	0a1b      	lsrs	r3, r3, #8
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    MACAddr[5] = id&0xFF;
 8009644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009646:	b2db      	uxtb	r3, r3
 8009648:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800964c:	4847      	ldr	r0, [pc, #284]	; (800976c <low_level_init+0x1b4>)
 800964e:	f7fa fef1 	bl	8004434 <HAL_ETH_Init>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  if (hal_eth_init_status == HAL_OK)
 8009658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800965c:	2b00      	cmp	r3, #0
 800965e:	d108      	bne.n	8009672 <low_level_init+0xba>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009666:	f043 0304 	orr.w	r3, r3, #4
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009672:	2304      	movs	r3, #4
 8009674:	4a40      	ldr	r2, [pc, #256]	; (8009778 <low_level_init+0x1c0>)
 8009676:	4941      	ldr	r1, [pc, #260]	; (800977c <low_level_init+0x1c4>)
 8009678:	483c      	ldr	r0, [pc, #240]	; (800976c <low_level_init+0x1b4>)
 800967a:	f7fb f875 	bl	8004768 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800967e:	2304      	movs	r3, #4
 8009680:	4a3f      	ldr	r2, [pc, #252]	; (8009780 <low_level_init+0x1c8>)
 8009682:	4940      	ldr	r1, [pc, #256]	; (8009784 <low_level_init+0x1cc>)
 8009684:	4839      	ldr	r0, [pc, #228]	; (800976c <low_level_init+0x1b4>)
 8009686:	f7fb f8d8 	bl	800483a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2206      	movs	r2, #6
 800968e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009692:	4b36      	ldr	r3, [pc, #216]	; (800976c <low_level_init+0x1b4>)
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	781a      	ldrb	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800969e:	4b33      	ldr	r3, [pc, #204]	; (800976c <low_level_init+0x1b4>)
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	785a      	ldrb	r2, [r3, #1]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80096aa:	4b30      	ldr	r3, [pc, #192]	; (800976c <low_level_init+0x1b4>)
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	789a      	ldrb	r2, [r3, #2]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80096b6:	4b2d      	ldr	r3, [pc, #180]	; (800976c <low_level_init+0x1b4>)
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	78da      	ldrb	r2, [r3, #3]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80096c2:	4b2a      	ldr	r3, [pc, #168]	; (800976c <low_level_init+0x1b4>)
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	791a      	ldrb	r2, [r3, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80096ce:	4b27      	ldr	r3, [pc, #156]	; (800976c <low_level_init+0x1b4>)
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	795a      	ldrb	r2, [r3, #5]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  /* maximum transfer unit */
  netif->mtu = 1500;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80096e0:	841a      	strh	r2, [r3, #32]

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80096e8:	f043 030a 	orr.w	r3, r3, #10
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80096f4:	2300      	movs	r3, #0
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
 80096f8:	2300      	movs	r3, #0
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80096fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009700:	2101      	movs	r1, #1
 8009702:	4618      	mov	r0, r3
 8009704:	f000 fb24 	bl	8009d50 <osSemaphoreCreate>
 8009708:	4603      	mov	r3, r0
 800970a:	4a1f      	ldr	r2, [pc, #124]	; (8009788 <low_level_init+0x1d0>)
 800970c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800970e:	4b1f      	ldr	r3, [pc, #124]	; (800978c <low_level_init+0x1d4>)
 8009710:	f107 0408 	add.w	r4, r7, #8
 8009714:	461d      	mov	r5, r3
 8009716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800971a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800971e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009722:	f107 0308 	add.w	r3, r7, #8
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fa29 	bl	8009b80 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800972e:	480f      	ldr	r0, [pc, #60]	; (800976c <low_level_init+0x1b4>)
 8009730:	f7fb fbab 	bl	8004e8a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009738:	461a      	mov	r2, r3
 800973a:	211d      	movs	r1, #29
 800973c:	480b      	ldr	r0, [pc, #44]	; (800976c <low_level_init+0x1b4>)
 800973e:	f7fb fad6 	bl	8004cee <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009744:	f043 030b 	orr.w	r3, r3, #11
 8009748:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974c:	461a      	mov	r2, r3
 800974e:	211d      	movs	r1, #29
 8009750:	4806      	ldr	r0, [pc, #24]	; (800976c <low_level_init+0x1b4>)
 8009752:	f7fb fb34 	bl	8004dbe <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800975a:	461a      	mov	r2, r3
 800975c:	211d      	movs	r1, #29
 800975e:	4803      	ldr	r0, [pc, #12]	; (800976c <low_level_init+0x1b4>)
 8009760:	f7fb fac5 	bl	8004cee <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009764:	bf00      	nop
 8009766:	3740      	adds	r7, #64	; 0x40
 8009768:	46bd      	mov	sp, r7
 800976a:	bdb0      	pop	{r4, r5, r7, pc}
 800976c:	20006e60 	.word	0x20006e60
 8009770:	40028000 	.word	0x40028000
 8009774:	1ff0f420 	.word	0x1ff0f420
 8009778:	20006ea8 	.word	0x20006ea8
 800977c:	20005590 	.word	0x20005590
 8009780:	20005610 	.word	0x20005610
 8009784:	20006de0 	.word	0x20006de0
 8009788:	20000d28 	.word	0x20000d28
 800978c:	08024860 	.word	0x08024860

08009790 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08a      	sub	sp, #40	; 0x28
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800979a:	4b4b      	ldr	r3, [pc, #300]	; (80098c8 <low_level_output+0x138>)
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80097b2:	4b45      	ldr	r3, [pc, #276]	; (80098c8 <low_level_output+0x138>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	623b      	str	r3, [r7, #32]
 80097c0:	e05a      	b.n	8009878 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da03      	bge.n	80097d2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80097ca:	23f8      	movs	r3, #248	; 0xf8
 80097cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80097d0:	e05c      	b.n	800988c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	895b      	ldrh	r3, [r3, #10]
 80097d6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80097dc:	e02f      	b.n	800983e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80097de:	69fa      	ldr	r2, [r7, #28]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	18d0      	adds	r0, r2, r3
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	18d1      	adds	r1, r2, r3
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	f011 fdcb 	bl	801b390 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	da03      	bge.n	8009810 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009808:	23f8      	movs	r3, #248	; 0xf8
 800980a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800980e:	e03d      	b.n	800988c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009820:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800982c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009838:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	4413      	add	r3, r2
 8009844:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009848:	4293      	cmp	r3, r2
 800984a:	d8c8      	bhi.n	80097de <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800984c:	69fa      	ldr	r2, [r7, #28]
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	18d0      	adds	r0, r2, r3
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	4413      	add	r3, r2
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	4619      	mov	r1, r3
 800985e:	f011 fd97 	bl	801b390 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	623b      	str	r3, [r7, #32]
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1a1      	bne.n	80097c2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800987e:	6979      	ldr	r1, [r7, #20]
 8009880:	4811      	ldr	r0, [pc, #68]	; (80098c8 <low_level_output+0x138>)
 8009882:	f7fb f847 	bl	8004914 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800988c:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <low_level_output+0x138>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	f241 0314 	movw	r3, #4116	; 0x1014
 8009894:	4413      	add	r3, r2
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0320 	and.w	r3, r3, #32
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00d      	beq.n	80098bc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80098a0:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <low_level_output+0x138>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80098a8:	4413      	add	r3, r2
 80098aa:	2220      	movs	r2, #32
 80098ac:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80098ae:	4b06      	ldr	r3, [pc, #24]	; (80098c8 <low_level_output+0x138>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80098b6:	4413      	add	r3, r2
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80098bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3728      	adds	r7, #40	; 0x28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	20006e60 	.word	0x20006e60

080098cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08c      	sub	sp, #48	; 0x30
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80098d4:	2300      	movs	r3, #0
 80098d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80098d8:	2300      	movs	r3, #0
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80098f0:	484f      	ldr	r0, [pc, #316]	; (8009a30 <low_level_input+0x164>)
 80098f2:	f7fb f8f9 	bl	8004ae8 <HAL_ETH_GetReceivedFrame_IT>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <low_level_input+0x34>

    return NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	e092      	b.n	8009a26 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009900:	4b4b      	ldr	r3, [pc, #300]	; (8009a30 <low_level_input+0x164>)
 8009902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009904:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009906:	4b4a      	ldr	r3, [pc, #296]	; (8009a30 <low_level_input+0x164>)
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800990c:	89fb      	ldrh	r3, [r7, #14]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009912:	89fb      	ldrh	r3, [r7, #14]
 8009914:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009918:	4619      	mov	r1, r3
 800991a:	2000      	movs	r0, #0
 800991c:	f007 f99c 	bl	8010c58 <pbuf_alloc>
 8009920:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	2b00      	cmp	r3, #0
 8009926:	d04b      	beq.n	80099c0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009928:	4b41      	ldr	r3, [pc, #260]	; (8009a30 <low_level_input+0x164>)
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	62bb      	str	r3, [r7, #40]	; 0x28
 8009936:	e040      	b.n	80099ba <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	895b      	ldrh	r3, [r3, #10]
 800993c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009942:	e021      	b.n	8009988 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	18d0      	adds	r0, r2, r3
 800994c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	18d1      	adds	r1, r2, r3
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	461a      	mov	r2, r3
 800995c:	f011 fd18 	bl	801b390 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009976:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009982:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009992:	4293      	cmp	r3, r2
 8009994:	d8d6      	bhi.n	8009944 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	18d0      	adds	r0, r2, r3
 800999e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	4413      	add	r3, r2
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	4619      	mov	r1, r3
 80099a8:	f011 fcf2 	bl	801b390 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1bb      	bne.n	8009938 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80099c0:	4b1b      	ldr	r3, [pc, #108]	; (8009a30 <low_level_input+0x164>)
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	e00b      	b.n	80099e4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	3301      	adds	r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	4b12      	ldr	r3, [pc, #72]	; (8009a30 <low_level_input+0x164>)
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d3ee      	bcc.n	80099cc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80099ee:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <low_level_input+0x164>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80099f4:	4b0e      	ldr	r3, [pc, #56]	; (8009a30 <low_level_input+0x164>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80099fc:	4413      	add	r3, r2
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00d      	beq.n	8009a24 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009a08:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <low_level_input+0x164>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8009a10:	4413      	add	r3, r2
 8009a12:	2280      	movs	r2, #128	; 0x80
 8009a14:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009a16:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <low_level_input+0x164>)
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	f241 0308 	movw	r3, #4104	; 0x1008
 8009a1e:	4413      	add	r3, r2
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3730      	adds	r7, #48	; 0x30
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20006e60 	.word	0x20006e60

08009a34 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a40:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <ethernetif_input+0x58>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f04f 31ff 	mov.w	r1, #4294967295
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 f9b3 	bl	8009db4 <osSemaphoreWait>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f5      	bne.n	8009a40 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009a54:	480e      	ldr	r0, [pc, #56]	; (8009a90 <ethernetif_input+0x5c>)
 8009a56:	f011 fb0f 	bl	801b078 <sys_mutex_lock>
        p = low_level_input( netif );
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff ff36 	bl	80098cc <low_level_input>
 8009a60:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	68f9      	ldr	r1, [r7, #12]
 8009a6e:	68b8      	ldr	r0, [r7, #8]
 8009a70:	4798      	blx	r3
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009a78:	68b8      	ldr	r0, [r7, #8]
 8009a7a:	f007 fbd1 	bl	8011220 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009a7e:	4804      	ldr	r0, [pc, #16]	; (8009a90 <ethernetif_input+0x5c>)
 8009a80:	f011 fb09 	bl	801b096 <sys_mutex_unlock>
      } while(p!=NULL);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e4      	bne.n	8009a54 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a8a:	e7d9      	b.n	8009a40 <ethernetif_input+0xc>
 8009a8c:	20000d28 	.word	0x20000d28
 8009a90:	200086b8 	.word	0x200086b8

08009a94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <ethernetif_init+0x1c>
 8009aa2:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <ethernetif_init+0x48>)
 8009aa4:	f240 223f 	movw	r2, #575	; 0x23f
 8009aa8:	490d      	ldr	r1, [pc, #52]	; (8009ae0 <ethernetif_init+0x4c>)
 8009aaa:	480e      	ldr	r0, [pc, #56]	; (8009ae4 <ethernetif_init+0x50>)
 8009aac:	f011 ff1e 	bl	801b8ec <printf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2273      	movs	r2, #115	; 0x73
 8009ab4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2274      	movs	r2, #116	; 0x74
 8009abc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a09      	ldr	r2, [pc, #36]	; (8009ae8 <ethernetif_init+0x54>)
 8009ac4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a08      	ldr	r2, [pc, #32]	; (8009aec <ethernetif_init+0x58>)
 8009aca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fd73 	bl	80095b8 <low_level_init>

  return ERR_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	0802487c 	.word	0x0802487c
 8009ae0:	08024898 	.word	0x08024898
 8009ae4:	080248a8 	.word	0x080248a8
 8009ae8:	08018e39 	.word	0x08018e39
 8009aec:	08009791 	.word	0x08009791

08009af0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009af4:	f7fa fafa 	bl	80040ec <HAL_GetTick>
 8009af8:	4603      	mov	r3, r0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	bd80      	pop	{r7, pc}

08009afe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	4603      	mov	r3, r0
 8009b06:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b10:	2b84      	cmp	r3, #132	; 0x84
 8009b12:	d005      	beq.n	8009b20 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	3303      	adds	r3, #3
 8009b1e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b20:	68fb      	ldr	r3, [r7, #12]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b34:	f3ef 8305 	mrs	r3, IPSR
 8009b38:	607b      	str	r3, [r7, #4]
  return(result);
 8009b3a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bf14      	ite	ne
 8009b40:	2301      	movne	r3, #1
 8009b42:	2300      	moveq	r3, #0
 8009b44:	b2db      	uxtb	r3, r3
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009b56:	f001 fd29 	bl	800b5ac <vTaskStartScheduler>
  
  return osOK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009b64:	f7ff ffe3 	bl	8009b2e <inHandlerMode>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009b6e:	f001 fe3d 	bl	800b7ec <xTaskGetTickCountFromISR>
 8009b72:	4603      	mov	r3, r0
 8009b74:	e002      	b.n	8009b7c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009b76:	f001 fe29 	bl	800b7cc <xTaskGetTickCount>
 8009b7a:	4603      	mov	r3, r0
  }
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b82:	b089      	sub	sp, #36	; 0x24
 8009b84:	af04      	add	r7, sp, #16
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d020      	beq.n	8009bd4 <osThreadCreate+0x54>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01c      	beq.n	8009bd4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685c      	ldr	r4, [r3, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681d      	ldr	r5, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	691e      	ldr	r6, [r3, #16]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff ffa6 	bl	8009afe <makeFreeRtosPriority>
 8009bb2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bbc:	9202      	str	r2, [sp, #8]
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	9100      	str	r1, [sp, #0]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f001 fb53 	bl	800b274 <xTaskCreateStatic>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	e01c      	b.n	8009c0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685c      	ldr	r4, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009be0:	b29e      	uxth	r6, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff ff88 	bl	8009afe <makeFreeRtosPriority>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	f107 030c 	add.w	r3, r7, #12
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	9200      	str	r2, [sp, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f001 fb9b 	bl	800b33a <xTaskCreate>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d001      	beq.n	8009c0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e000      	b.n	8009c10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c18 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d007      	beq.n	8009c38 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	2001      	movs	r0, #1
 8009c30:	f000 fc91 	bl	800a556 <xQueueCreateMutexStatic>
 8009c34:	4603      	mov	r3, r0
 8009c36:	e003      	b.n	8009c40 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f000 fc74 	bl	800a526 <xQueueCreateMutex>
 8009c3e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c52:	2300      	movs	r3, #0
 8009c54:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <osMutexWait+0x18>
    return osErrorParameter;
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	e03a      	b.n	8009cd6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d103      	bne.n	8009c74 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e009      	b.n	8009c88 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d006      	beq.n	8009c88 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <osMutexWait+0x40>
      ticks = 1;
 8009c84:	2301      	movs	r3, #1
 8009c86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009c88:	f7ff ff51 	bl	8009b2e <inHandlerMode>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d017      	beq.n	8009cc2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009c92:	f107 0308 	add.w	r3, r7, #8
 8009c96:	461a      	mov	r2, r3
 8009c98:	2100      	movs	r1, #0
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 f8ac 	bl	800adf8 <xQueueReceiveFromISR>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d001      	beq.n	8009caa <osMutexWait+0x62>
      return osErrorOS;
 8009ca6:	23ff      	movs	r3, #255	; 0xff
 8009ca8:	e015      	b.n	8009cd6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d011      	beq.n	8009cd4 <osMutexWait+0x8c>
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <osMutexWait+0x98>)
 8009cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	e008      	b.n	8009cd4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009cc2:	68f9      	ldr	r1, [r7, #12]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff83 	bl	800abd0 <xQueueSemaphoreTake>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d001      	beq.n	8009cd4 <osMutexWait+0x8c>
    return osErrorOS;
 8009cd0:	23ff      	movs	r3, #255	; 0xff
 8009cd2:	e000      	b.n	8009cd6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	e000ed04 	.word	0xe000ed04

08009ce4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009cf4:	f7ff ff1b 	bl	8009b2e <inHandlerMode>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d016      	beq.n	8009d2c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009cfe:	f107 0308 	add.w	r3, r7, #8
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fde7 	bl	800a8d8 <xQueueGiveFromISR>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d001      	beq.n	8009d14 <osMutexRelease+0x30>
      return osErrorOS;
 8009d10:	23ff      	movs	r3, #255	; 0xff
 8009d12:	e017      	b.n	8009d44 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d013      	beq.n	8009d42 <osMutexRelease+0x5e>
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <osMutexRelease+0x68>)
 8009d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	e00a      	b.n	8009d42 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2100      	movs	r1, #0
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fc2a 	bl	800a58c <xQueueGenericSend>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d001      	beq.n	8009d42 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009d3e:	23ff      	movs	r3, #255	; 0xff
 8009d40:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009d42:	68fb      	ldr	r3, [r7, #12]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	e000ed04 	.word	0xe000ed04

08009d50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00f      	beq.n	8009d82 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d10a      	bne.n	8009d7e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	2203      	movs	r2, #3
 8009d6e:	9200      	str	r2, [sp, #0]
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	2001      	movs	r0, #1
 8009d76:	f000 fad9 	bl	800a32c <xQueueGenericCreateStatic>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	e016      	b.n	8009dac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	e014      	b.n	8009dac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d110      	bne.n	8009daa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009d88:	2203      	movs	r2, #3
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	f000 fb4f 	bl	800a430 <xQueueGenericCreate>
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d005      	beq.n	8009da6 <osSemaphoreCreate+0x56>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fbf3 	bl	800a58c <xQueueGenericSend>
      return sema;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	e000      	b.n	8009dac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009daa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	e03a      	b.n	8009e42 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d103      	bne.n	8009de0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ddc:	60fb      	str	r3, [r7, #12]
 8009dde:	e009      	b.n	8009df4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d006      	beq.n	8009df4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <osSemaphoreWait+0x40>
      ticks = 1;
 8009df0:	2301      	movs	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009df4:	f7ff fe9b 	bl	8009b2e <inHandlerMode>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d017      	beq.n	8009e2e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009dfe:	f107 0308 	add.w	r3, r7, #8
 8009e02:	461a      	mov	r2, r3
 8009e04:	2100      	movs	r1, #0
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fff6 	bl	800adf8 <xQueueReceiveFromISR>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d001      	beq.n	8009e16 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009e12:	23ff      	movs	r3, #255	; 0xff
 8009e14:	e015      	b.n	8009e42 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d011      	beq.n	8009e40 <osSemaphoreWait+0x8c>
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <osSemaphoreWait+0x98>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	e008      	b.n	8009e40 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009e2e:	68f9      	ldr	r1, [r7, #12]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fecd 	bl	800abd0 <xQueueSemaphoreTake>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d001      	beq.n	8009e40 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009e3c:	23ff      	movs	r3, #255	; 0xff
 8009e3e:	e000      	b.n	8009e42 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	e000ed04 	.word	0xe000ed04

08009e50 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009e60:	f7ff fe65 	bl	8009b2e <inHandlerMode>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d016      	beq.n	8009e98 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009e6a:	f107 0308 	add.w	r3, r7, #8
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fd31 	bl	800a8d8 <xQueueGiveFromISR>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d001      	beq.n	8009e80 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009e7c:	23ff      	movs	r3, #255	; 0xff
 8009e7e:	e017      	b.n	8009eb0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d013      	beq.n	8009eae <osSemaphoreRelease+0x5e>
 8009e86:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <osSemaphoreRelease+0x68>)
 8009e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	e00a      	b.n	8009eae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009e98:	2300      	movs	r3, #0
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fb74 	bl	800a58c <xQueueGenericSend>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d001      	beq.n	8009eae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009eaa:	23ff      	movs	r3, #255	; 0xff
 8009eac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009eae:	68fb      	ldr	r3, [r7, #12]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	e000ed04 	.word	0xe000ed04

08009ebc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009ec4:	f7ff fe33 	bl	8009b2e <inHandlerMode>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009ece:	2382      	movs	r3, #130	; 0x82
 8009ed0:	e003      	b.n	8009eda <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 f856 	bl	800af84 <vQueueDelete>

  return osOK; 
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009ee2:	b590      	push	{r4, r7, lr}
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	af02      	add	r7, sp, #8
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d011      	beq.n	8009f18 <osMessageCreate+0x36>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689a      	ldr	r2, [r3, #8]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	2400      	movs	r4, #0
 8009f0e:	9400      	str	r4, [sp, #0]
 8009f10:	f000 fa0c 	bl	800a32c <xQueueGenericCreateStatic>
 8009f14:	4603      	mov	r3, r0
 8009f16:	e008      	b.n	8009f2a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	4619      	mov	r1, r3
 8009f24:	f000 fa84 	bl	800a430 <xQueueGenericCreate>
 8009f28:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd90      	pop	{r4, r7, pc}
	...

08009f34 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <osMessagePut+0x1e>
    ticks = 1;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009f52:	f7ff fdec 	bl	8009b2e <inHandlerMode>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d018      	beq.n	8009f8e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009f5c:	f107 0210 	add.w	r2, r7, #16
 8009f60:	f107 0108 	add.w	r1, r7, #8
 8009f64:	2300      	movs	r3, #0
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 fc16 	bl	800a798 <xQueueGenericSendFromISR>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d001      	beq.n	8009f76 <osMessagePut+0x42>
      return osErrorOS;
 8009f72:	23ff      	movs	r3, #255	; 0xff
 8009f74:	e018      	b.n	8009fa8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d014      	beq.n	8009fa6 <osMessagePut+0x72>
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <osMessagePut+0x7c>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	e00b      	b.n	8009fa6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009f8e:	f107 0108 	add.w	r1, r7, #8
 8009f92:	2300      	movs	r3, #0
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 faf8 	bl	800a58c <xQueueGenericSend>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d001      	beq.n	8009fa6 <osMessagePut+0x72>
      return osErrorOS;
 8009fa2:	23ff      	movs	r3, #255	; 0xff
 8009fa4:	e000      	b.n	8009fa8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3718      	adds	r7, #24
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009fb4:	b590      	push	{r4, r7, lr}
 8009fb6:	b08b      	sub	sp, #44	; 0x2c
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10a      	bne.n	8009fe4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009fce:	2380      	movs	r3, #128	; 0x80
 8009fd0:	617b      	str	r3, [r7, #20]
    return event;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	461c      	mov	r4, r3
 8009fd6:	f107 0314 	add.w	r3, r7, #20
 8009fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009fe2:	e054      	b.n	800a08e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff2:	d103      	bne.n	8009ffc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ffa:	e009      	b.n	800a010 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d006      	beq.n	800a010 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <osMessageGet+0x5c>
      ticks = 1;
 800a00c:	2301      	movs	r3, #1
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a010:	f7ff fd8d 	bl	8009b2e <inHandlerMode>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d01c      	beq.n	800a054 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a01a:	f107 0220 	add.w	r2, r7, #32
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	3304      	adds	r3, #4
 800a024:	4619      	mov	r1, r3
 800a026:	68b8      	ldr	r0, [r7, #8]
 800a028:	f000 fee6 	bl	800adf8 <xQueueReceiveFromISR>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d102      	bne.n	800a038 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a032:	2310      	movs	r3, #16
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	e001      	b.n	800a03c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d01d      	beq.n	800a07e <osMessageGet+0xca>
 800a042:	4b15      	ldr	r3, [pc, #84]	; (800a098 <osMessageGet+0xe4>)
 800a044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	e014      	b.n	800a07e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	3304      	adds	r3, #4
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	4619      	mov	r1, r3
 800a05e:	68b8      	ldr	r0, [r7, #8]
 800a060:	f000 fcd0 	bl	800aa04 <xQueueReceive>
 800a064:	4603      	mov	r3, r0
 800a066:	2b01      	cmp	r3, #1
 800a068:	d102      	bne.n	800a070 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a06a:	2310      	movs	r3, #16
 800a06c:	617b      	str	r3, [r7, #20]
 800a06e:	e006      	b.n	800a07e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <osMessageGet+0xc6>
 800a076:	2300      	movs	r3, #0
 800a078:	e000      	b.n	800a07c <osMessageGet+0xc8>
 800a07a:	2340      	movs	r3, #64	; 0x40
 800a07c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	461c      	mov	r4, r3
 800a082:	f107 0314 	add.w	r3, r7, #20
 800a086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a08a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	372c      	adds	r7, #44	; 0x2c
 800a092:	46bd      	mov	sp, r7
 800a094:	bd90      	pop	{r4, r7, pc}
 800a096:	bf00      	nop
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a0a4:	f7ff fd43 	bl	8009b2e <inHandlerMode>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d004      	beq.n	800a0b8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 ff48 	bl	800af44 <uxQueueMessagesWaitingFromISR>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	e003      	b.n	800a0c0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 ff23 	bl	800af04 <uxQueueMessagesWaiting>
 800a0be:	4603      	mov	r3, r0
  }
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a0d0:	f7ff fd2d 	bl	8009b2e <inHandlerMode>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <osMessageDelete+0x16>
    return osErrorISR;
 800a0da:	2382      	movs	r3, #130	; 0x82
 800a0dc:	e003      	b.n	800a0e6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 ff50 	bl	800af84 <vQueueDelete>

  return osOK; 
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f103 0208 	add.w	r2, r3, #8
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f04f 32ff 	mov.w	r2, #4294967295
 800a106:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f103 0208 	add.w	r2, r3, #8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f103 0208 	add.w	r2, r3, #8
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	601a      	str	r2, [r3, #0]
}
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d103      	bne.n	800a1b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	e00c      	b.n	800a1ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	e002      	b.n	800a1be <vListInsert+0x2e>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d2f6      	bcs.n	800a1b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6892      	ldr	r2, [r2, #8]
 800a218:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6852      	ldr	r2, [r2, #4]
 800a222:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d103      	bne.n	800a236 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	1e5a      	subs	r2, r3, #1
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
	...

0800a258 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10c      	bne.n	800a286 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	b672      	cpsid	i
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	b662      	cpsie	i
 800a280:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a286:	f002 f911 	bl	800c4ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a292:	68f9      	ldr	r1, [r7, #12]
 800a294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a296:	fb01 f303 	mul.w	r3, r1, r3
 800a29a:	441a      	add	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	68f9      	ldr	r1, [r7, #12]
 800a2ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2bc:	fb01 f303 	mul.w	r3, r1, r3
 800a2c0:	441a      	add	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	22ff      	movs	r2, #255	; 0xff
 800a2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	22ff      	movs	r2, #255	; 0xff
 800a2d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d114      	bne.n	800a306 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d01a      	beq.n	800a31a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	3310      	adds	r3, #16
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fbcf 	bl	800ba8c <xTaskRemoveFromEventList>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d012      	beq.n	800a31a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <xQueueGenericReset+0xd0>)
 800a2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	e009      	b.n	800a31a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3310      	adds	r3, #16
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff feef 	bl	800a0ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3324      	adds	r3, #36	; 0x24
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff feea 	bl	800a0ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a31a:	f002 f8fb 	bl	800c514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a31e:	2301      	movs	r3, #1
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	e000ed04 	.word	0xe000ed04

0800a32c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08e      	sub	sp, #56	; 0x38
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10c      	bne.n	800a35a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	b672      	cpsid	i
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	b662      	cpsie	i
 800a354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10c      	bne.n	800a37a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	b672      	cpsid	i
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	b662      	cpsie	i
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <xQueueGenericCreateStatic+0x5a>
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <xQueueGenericCreateStatic+0x5e>
 800a386:	2301      	movs	r3, #1
 800a388:	e000      	b.n	800a38c <xQueueGenericCreateStatic+0x60>
 800a38a:	2300      	movs	r3, #0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10c      	bne.n	800a3aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	b672      	cpsid	i
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	b662      	cpsie	i
 800a3a4:	623b      	str	r3, [r7, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	e7fe      	b.n	800a3a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <xQueueGenericCreateStatic+0x8a>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <xQueueGenericCreateStatic+0x8e>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e000      	b.n	800a3bc <xQueueGenericCreateStatic+0x90>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10c      	bne.n	800a3da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	b672      	cpsid	i
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	b662      	cpsie	i
 800a3d4:	61fb      	str	r3, [r7, #28]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3da:	2348      	movs	r3, #72	; 0x48
 800a3dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	2b48      	cmp	r3, #72	; 0x48
 800a3e2:	d00c      	beq.n	800a3fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	b672      	cpsid	i
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	b662      	cpsie	i
 800a3f8:	61bb      	str	r3, [r7, #24]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00d      	beq.n	800a426 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a412:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	4613      	mov	r3, r2
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	68b9      	ldr	r1, [r7, #8]
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 f847 	bl	800a4b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a428:	4618      	mov	r0, r3
 800a42a:	3730      	adds	r7, #48	; 0x30
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08a      	sub	sp, #40	; 0x28
 800a434:	af02      	add	r7, sp, #8
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10c      	bne.n	800a45e <xQueueGenericCreate+0x2e>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	b672      	cpsid	i
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	b662      	cpsie	i
 800a458:	613b      	str	r3, [r7, #16]
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d102      	bne.n	800a46a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a464:	2300      	movs	r3, #0
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	e004      	b.n	800a474 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	3348      	adds	r3, #72	; 0x48
 800a478:	4618      	mov	r0, r3
 800a47a:	f002 f943 	bl	800c704 <pvPortMalloc>
 800a47e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d011      	beq.n	800a4aa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	3348      	adds	r3, #72	; 0x48
 800a48e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a498:	79fa      	ldrb	r2, [r7, #7]
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f805 	bl	800a4b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
	}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3720      	adds	r7, #32
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	e002      	b.n	800a4d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	69b8      	ldr	r0, [r7, #24]
 800a4e6:	f7ff feb7 	bl	800a258 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00e      	beq.n	800a51e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a512:	2300      	movs	r3, #0
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f837 	bl	800a58c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a526:	b580      	push	{r7, lr}
 800a528:	b086      	sub	sp, #24
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	4603      	mov	r3, r0
 800a52e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a530:	2301      	movs	r3, #1
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	2300      	movs	r3, #0
 800a536:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	461a      	mov	r2, r3
 800a53c:	6939      	ldr	r1, [r7, #16]
 800a53e:	6978      	ldr	r0, [r7, #20]
 800a540:	f7ff ff76 	bl	800a430 <xQueueGenericCreate>
 800a544:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff ffd3 	bl	800a4f2 <prvInitialiseMutex>

		return xNewQueue;
 800a54c:	68fb      	ldr	r3, [r7, #12]
	}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a556:	b580      	push	{r7, lr}
 800a558:	b088      	sub	sp, #32
 800a55a:	af02      	add	r7, sp, #8
 800a55c:	4603      	mov	r3, r0
 800a55e:	6039      	str	r1, [r7, #0]
 800a560:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a562:	2301      	movs	r3, #1
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	2300      	movs	r3, #0
 800a568:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2200      	movs	r2, #0
 800a572:	6939      	ldr	r1, [r7, #16]
 800a574:	6978      	ldr	r0, [r7, #20]
 800a576:	f7ff fed9 	bl	800a32c <xQueueGenericCreateStatic>
 800a57a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff ffb8 	bl	800a4f2 <prvInitialiseMutex>

		return xNewQueue;
 800a582:	68fb      	ldr	r3, [r7, #12]
	}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08e      	sub	sp, #56	; 0x38
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a59a:	2300      	movs	r3, #0
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10c      	bne.n	800a5c2 <xQueueGenericSend+0x36>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ac:	b672      	cpsid	i
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	b662      	cpsie	i
 800a5bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d103      	bne.n	800a5d0 <xQueueGenericSend+0x44>
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <xQueueGenericSend+0x48>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <xQueueGenericSend+0x4a>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10c      	bne.n	800a5f4 <xQueueGenericSend+0x68>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	b672      	cpsid	i
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	b662      	cpsie	i
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d103      	bne.n	800a602 <xQueueGenericSend+0x76>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d101      	bne.n	800a606 <xQueueGenericSend+0x7a>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <xQueueGenericSend+0x7c>
 800a606:	2300      	movs	r3, #0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10c      	bne.n	800a626 <xQueueGenericSend+0x9a>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	b672      	cpsid	i
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	b662      	cpsie	i
 800a620:	623b      	str	r3, [r7, #32]
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a626:	f001 fbf5 	bl	800be14 <xTaskGetSchedulerState>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <xQueueGenericSend+0xaa>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <xQueueGenericSend+0xae>
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <xQueueGenericSend+0xb0>
 800a63a:	2300      	movs	r3, #0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10c      	bne.n	800a65a <xQueueGenericSend+0xce>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	b672      	cpsid	i
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	b662      	cpsie	i
 800a654:	61fb      	str	r3, [r7, #28]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a65a:	f001 ff27 	bl	800c4ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <xQueueGenericSend+0xe4>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d129      	bne.n	800a6c4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a676:	f000 fcc2 	bl	800affe <prvCopyDataToQueue>
 800a67a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	d010      	beq.n	800a6a6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	3324      	adds	r3, #36	; 0x24
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 f9ff 	bl	800ba8c <xTaskRemoveFromEventList>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d013      	beq.n	800a6bc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a694:	4b3f      	ldr	r3, [pc, #252]	; (800a794 <xQueueGenericSend+0x208>)
 800a696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	e00a      	b.n	800a6bc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d007      	beq.n	800a6bc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b39      	ldr	r3, [pc, #228]	; (800a794 <xQueueGenericSend+0x208>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6bc:	f001 ff2a 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e063      	b.n	800a78c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ca:	f001 ff23 	bl	800c514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e05c      	b.n	800a78c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d106      	bne.n	800a6e6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 fa39 	bl	800bb54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e6:	f001 ff15 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ea:	f000 ffc3 	bl	800b674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ee:	f001 fedd 	bl	800c4ac <vPortEnterCritical>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f8:	b25b      	sxtb	r3, r3
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d103      	bne.n	800a708 <xQueueGenericSend+0x17c>
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d103      	bne.n	800a71e <xQueueGenericSend+0x192>
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71e:	f001 fef9 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a722:	1d3a      	adds	r2, r7, #4
 800a724:	f107 0314 	add.w	r3, r7, #20
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 fa28 	bl	800bb80 <xTaskCheckForTimeOut>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d124      	bne.n	800a780 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a738:	f000 fd59 	bl	800b1ee <prvIsQueueFull>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d018      	beq.n	800a774 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	3310      	adds	r3, #16
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	4611      	mov	r1, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 f978 	bl	800ba40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a752:	f000 fce4 	bl	800b11e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a756:	f000 ff9b 	bl	800b690 <xTaskResumeAll>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f47f af7c 	bne.w	800a65a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a762:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <xQueueGenericSend+0x208>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	e772      	b.n	800a65a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a776:	f000 fcd2 	bl	800b11e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77a:	f000 ff89 	bl	800b690 <xTaskResumeAll>
 800a77e:	e76c      	b.n	800a65a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a782:	f000 fccc 	bl	800b11e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a786:	f000 ff83 	bl	800b690 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a78a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3738      	adds	r7, #56	; 0x38
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	e000ed04 	.word	0xe000ed04

0800a798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08e      	sub	sp, #56	; 0x38
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10c      	bne.n	800a7ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	b672      	cpsid	i
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	b662      	cpsie	i
 800a7c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d103      	bne.n	800a7d8 <xQueueGenericSendFromISR+0x40>
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <xQueueGenericSendFromISR+0x44>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e000      	b.n	800a7de <xQueueGenericSendFromISR+0x46>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10c      	bne.n	800a7fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	b672      	cpsid	i
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	b662      	cpsie	i
 800a7f6:	623b      	str	r3, [r7, #32]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d103      	bne.n	800a80a <xQueueGenericSendFromISR+0x72>
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a806:	2b01      	cmp	r3, #1
 800a808:	d101      	bne.n	800a80e <xQueueGenericSendFromISR+0x76>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <xQueueGenericSendFromISR+0x78>
 800a80e:	2300      	movs	r3, #0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10c      	bne.n	800a82e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	b672      	cpsid	i
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	b662      	cpsie	i
 800a828:	61fb      	str	r3, [r7, #28]
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a82e:	f001 ff25 	bl	800c67c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a832:	f3ef 8211 	mrs	r2, BASEPRI
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	b672      	cpsid	i
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	b662      	cpsie	i
 800a84a:	61ba      	str	r2, [r7, #24]
 800a84c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a84e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d302      	bcc.n	800a864 <xQueueGenericSendFromISR+0xcc>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b02      	cmp	r3, #2
 800a862:	d12c      	bne.n	800a8be <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a86a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a874:	f000 fbc3 	bl	800affe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a878:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d112      	bne.n	800a8a8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	d016      	beq.n	800a8b8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	3324      	adds	r3, #36	; 0x24
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 f8fc 	bl	800ba8c <xTaskRemoveFromEventList>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00e      	beq.n	800a8b8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	e007      	b.n	800a8b8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	b25a      	sxtb	r2, r3
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a8bc:	e001      	b.n	800a8c2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3738      	adds	r7, #56	; 0x38
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08e      	sub	sp, #56	; 0x38
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10c      	bne.n	800a906 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	b672      	cpsid	i
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	b662      	cpsie	i
 800a900:	623b      	str	r3, [r7, #32]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	b672      	cpsid	i
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	b662      	cpsie	i
 800a922:	61fb      	str	r3, [r7, #28]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d103      	bne.n	800a938 <xQueueGiveFromISR+0x60>
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <xQueueGiveFromISR+0x64>
 800a938:	2301      	movs	r3, #1
 800a93a:	e000      	b.n	800a93e <xQueueGiveFromISR+0x66>
 800a93c:	2300      	movs	r3, #0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10c      	bne.n	800a95c <xQueueGiveFromISR+0x84>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	b672      	cpsid	i
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	b662      	cpsie	i
 800a956:	61bb      	str	r3, [r7, #24]
}
 800a958:	bf00      	nop
 800a95a:	e7fe      	b.n	800a95a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a95c:	f001 fe8e 	bl	800c67c <vPortValidateInterruptPriority>
	__asm volatile
 800a960:	f3ef 8211 	mrs	r2, BASEPRI
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	b672      	cpsid	i
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	b662      	cpsie	i
 800a978:	617a      	str	r2, [r7, #20]
 800a97a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a97c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a97e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d22b      	bcs.n	800a9e8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	1c5a      	adds	r2, r3, #1
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9aa:	d112      	bne.n	800a9d2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d016      	beq.n	800a9e2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	3324      	adds	r3, #36	; 0x24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f001 f867 	bl	800ba8c <xTaskRemoveFromEventList>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00e      	beq.n	800a9e2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	e007      	b.n	800a9e2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	b25a      	sxtb	r2, r3
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e6:	e001      	b.n	800a9ec <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f383 8811 	msr	BASEPRI, r3
}
 800a9f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3738      	adds	r7, #56	; 0x38
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08c      	sub	sp, #48	; 0x30
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa10:	2300      	movs	r3, #0
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10c      	bne.n	800aa38 <xQueueReceive+0x34>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	b672      	cpsid	i
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	b662      	cpsie	i
 800aa32:	623b      	str	r3, [r7, #32]
}
 800aa34:	bf00      	nop
 800aa36:	e7fe      	b.n	800aa36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d103      	bne.n	800aa46 <xQueueReceive+0x42>
 800aa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <xQueueReceive+0x46>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <xQueueReceive+0x48>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10c      	bne.n	800aa6a <xQueueReceive+0x66>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	b672      	cpsid	i
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	b662      	cpsie	i
 800aa64:	61fb      	str	r3, [r7, #28]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa6a:	f001 f9d3 	bl	800be14 <xTaskGetSchedulerState>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d102      	bne.n	800aa7a <xQueueReceive+0x76>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <xQueueReceive+0x7a>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <xQueueReceive+0x7c>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10c      	bne.n	800aa9e <xQueueReceive+0x9a>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	b672      	cpsid	i
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	b662      	cpsie	i
 800aa98:	61bb      	str	r3, [r7, #24]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa9e:	f001 fd05 	bl	800c4ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01f      	beq.n	800aaee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab2:	f000 fb0e 	bl	800b0d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	1e5a      	subs	r2, r3, #1
 800aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00f      	beq.n	800aae6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	3310      	adds	r3, #16
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 ffde 	bl	800ba8c <xTaskRemoveFromEventList>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aad6:	4b3d      	ldr	r3, [pc, #244]	; (800abcc <xQueueReceive+0x1c8>)
 800aad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aae6:	f001 fd15 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e069      	b.n	800abc2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d103      	bne.n	800aafc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaf4:	f001 fd0e 	bl	800c514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	e062      	b.n	800abc2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab02:	f107 0310 	add.w	r3, r7, #16
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 f824 	bl	800bb54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab10:	f001 fd00 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab14:	f000 fdae 	bl	800b674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab18:	f001 fcc8 	bl	800c4ac <vPortEnterCritical>
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab22:	b25b      	sxtb	r3, r3
 800ab24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab28:	d103      	bne.n	800ab32 <xQueueReceive+0x12e>
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab38:	b25b      	sxtb	r3, r3
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d103      	bne.n	800ab48 <xQueueReceive+0x144>
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab48:	f001 fce4 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab4c:	1d3a      	adds	r2, r7, #4
 800ab4e:	f107 0310 	add.w	r3, r7, #16
 800ab52:	4611      	mov	r1, r2
 800ab54:	4618      	mov	r0, r3
 800ab56:	f001 f813 	bl	800bb80 <xTaskCheckForTimeOut>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d123      	bne.n	800aba8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab62:	f000 fb2e 	bl	800b1c2 <prvIsQueueEmpty>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d017      	beq.n	800ab9c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	3324      	adds	r3, #36	; 0x24
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4611      	mov	r1, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 ff63 	bl	800ba40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab7c:	f000 facf 	bl	800b11e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab80:	f000 fd86 	bl	800b690 <xTaskResumeAll>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d189      	bne.n	800aa9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ab8a:	4b10      	ldr	r3, [pc, #64]	; (800abcc <xQueueReceive+0x1c8>)
 800ab8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	e780      	b.n	800aa9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9e:	f000 fabe 	bl	800b11e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aba2:	f000 fd75 	bl	800b690 <xTaskResumeAll>
 800aba6:	e77a      	b.n	800aa9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abaa:	f000 fab8 	bl	800b11e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abae:	f000 fd6f 	bl	800b690 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb4:	f000 fb05 	bl	800b1c2 <prvIsQueueEmpty>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f43f af6f 	beq.w	800aa9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3730      	adds	r7, #48	; 0x30
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	e000ed04 	.word	0xe000ed04

0800abd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08e      	sub	sp, #56	; 0x38
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800abda:	2300      	movs	r3, #0
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10c      	bne.n	800ac06 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	b672      	cpsid	i
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	b662      	cpsie	i
 800ac00:	623b      	str	r3, [r7, #32]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00c      	beq.n	800ac28 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	b672      	cpsid	i
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	b662      	cpsie	i
 800ac22:	61fb      	str	r3, [r7, #28]
}
 800ac24:	bf00      	nop
 800ac26:	e7fe      	b.n	800ac26 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac28:	f001 f8f4 	bl	800be14 <xTaskGetSchedulerState>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d102      	bne.n	800ac38 <xQueueSemaphoreTake+0x68>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <xQueueSemaphoreTake+0x6c>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e000      	b.n	800ac3e <xQueueSemaphoreTake+0x6e>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10c      	bne.n	800ac5c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	b672      	cpsid	i
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	b662      	cpsie	i
 800ac56:	61bb      	str	r3, [r7, #24]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac5c:	f001 fc26 	bl	800c4ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d024      	beq.n	800acb6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	1e5a      	subs	r2, r3, #1
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac7c:	f001 fa90 	bl	800c1a0 <pvTaskIncrementMutexHeldCount>
 800ac80:	4602      	mov	r2, r0
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00f      	beq.n	800acae <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	3310      	adds	r3, #16
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fefa 	bl	800ba8c <xTaskRemoveFromEventList>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d007      	beq.n	800acae <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac9e:	4b55      	ldr	r3, [pc, #340]	; (800adf4 <xQueueSemaphoreTake+0x224>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acae:	f001 fc31 	bl	800c514 <vPortExitCritical>
				return pdPASS;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e099      	b.n	800adea <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d113      	bne.n	800ace4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00c      	beq.n	800acdc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	b672      	cpsid	i
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	b662      	cpsie	i
 800acd6:	617b      	str	r3, [r7, #20]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800acdc:	f001 fc1a 	bl	800c514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ace0:	2300      	movs	r3, #0
 800ace2:	e082      	b.n	800adea <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acea:	f107 030c 	add.w	r3, r7, #12
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 ff30 	bl	800bb54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acf8:	f001 fc0c 	bl	800c514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acfc:	f000 fcba 	bl	800b674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad00:	f001 fbd4 	bl	800c4ac <vPortEnterCritical>
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad0a:	b25b      	sxtb	r3, r3
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d103      	bne.n	800ad1a <xQueueSemaphoreTake+0x14a>
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad20:	b25b      	sxtb	r3, r3
 800ad22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad26:	d103      	bne.n	800ad30 <xQueueSemaphoreTake+0x160>
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad30:	f001 fbf0 	bl	800c514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad34:	463a      	mov	r2, r7
 800ad36:	f107 030c 	add.w	r3, r7, #12
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 ff1f 	bl	800bb80 <xTaskCheckForTimeOut>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d132      	bne.n	800adae <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad4a:	f000 fa3a 	bl	800b1c2 <prvIsQueueEmpty>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d026      	beq.n	800ada2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d109      	bne.n	800ad70 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ad5c:	f001 fba6 	bl	800c4ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f001 f873 	bl	800be50 <xTaskPriorityInherit>
 800ad6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad6c:	f001 fbd2 	bl	800c514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad72:	3324      	adds	r3, #36	; 0x24
 800ad74:	683a      	ldr	r2, [r7, #0]
 800ad76:	4611      	mov	r1, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fe61 	bl	800ba40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad80:	f000 f9cd 	bl	800b11e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad84:	f000 fc84 	bl	800b690 <xTaskResumeAll>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f47f af66 	bne.w	800ac5c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ad90:	4b18      	ldr	r3, [pc, #96]	; (800adf4 <xQueueSemaphoreTake+0x224>)
 800ad92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	e75c      	b.n	800ac5c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ada2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ada4:	f000 f9bb 	bl	800b11e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ada8:	f000 fc72 	bl	800b690 <xTaskResumeAll>
 800adac:	e756      	b.n	800ac5c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adb0:	f000 f9b5 	bl	800b11e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adb4:	f000 fc6c 	bl	800b690 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adba:	f000 fa02 	bl	800b1c2 <prvIsQueueEmpty>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f43f af4b 	beq.w	800ac5c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00d      	beq.n	800ade8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800adcc:	f001 fb6e 	bl	800c4ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800add0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800add2:	f000 f8fc 	bl	800afce <prvGetDisinheritPriorityAfterTimeout>
 800add6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 f940 	bl	800c064 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ade4:	f001 fb96 	bl	800c514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ade8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adea:	4618      	mov	r0, r3
 800adec:	3738      	adds	r7, #56	; 0x38
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08e      	sub	sp, #56	; 0x38
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10c      	bne.n	800ae28 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae12:	b672      	cpsid	i
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	b662      	cpsie	i
 800ae22:	623b      	str	r3, [r7, #32]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d103      	bne.n	800ae36 <xQueueReceiveFromISR+0x3e>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <xQueueReceiveFromISR+0x42>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <xQueueReceiveFromISR+0x44>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10c      	bne.n	800ae5a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	b672      	cpsid	i
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	b662      	cpsie	i
 800ae54:	61fb      	str	r3, [r7, #28]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae5a:	f001 fc0f 	bl	800c67c <vPortValidateInterruptPriority>
	__asm volatile
 800ae5e:	f3ef 8211 	mrs	r2, BASEPRI
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	b672      	cpsid	i
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	b662      	cpsie	i
 800ae76:	61ba      	str	r2, [r7, #24]
 800ae78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d02f      	beq.n	800aeea <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae94:	68b9      	ldr	r1, [r7, #8]
 800ae96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae98:	f000 f91b 	bl	800b0d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	1e5a      	subs	r2, r3, #1
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d112      	bne.n	800aed4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d016      	beq.n	800aee4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb8:	3310      	adds	r3, #16
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 fde6 	bl	800ba8c <xTaskRemoveFromEventList>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	e007      	b.n	800aee4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aed8:	3301      	adds	r3, #1
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	b25a      	sxtb	r2, r3
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aee4:	2301      	movs	r3, #1
 800aee6:	637b      	str	r3, [r7, #52]	; 0x34
 800aee8:	e001      	b.n	800aeee <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	637b      	str	r3, [r7, #52]	; 0x34
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f383 8811 	msr	BASEPRI, r3
}
 800aef8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3738      	adds	r7, #56	; 0x38
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10c      	bne.n	800af2c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	b672      	cpsid	i
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	b662      	cpsie	i
 800af26:	60bb      	str	r3, [r7, #8]
}
 800af28:	bf00      	nop
 800af2a:	e7fe      	b.n	800af2a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800af2c:	f001 fabe 	bl	800c4ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af34:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800af36:	f001 faed 	bl	800c514 <vPortExitCritical>

	return uxReturn;
 800af3a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10c      	bne.n	800af70 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5a:	b672      	cpsid	i
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	b662      	cpsie	i
 800af6a:	60fb      	str	r3, [r7, #12]
}
 800af6c:	bf00      	nop
 800af6e:	e7fe      	b.n	800af6e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af74:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800af76:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800af78:	4618      	mov	r0, r3
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10c      	bne.n	800afb0 <vQueueDelete+0x2c>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	b672      	cpsid	i
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	b662      	cpsie	i
 800afaa:	60bb      	str	r3, [r7, #8]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f000 f935 	bl	800b220 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d102      	bne.n	800afc6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f001 fc69 	bl	800c898 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afce:	b480      	push	{r7}
 800afd0:	b085      	sub	sp, #20
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d006      	beq.n	800afec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f1c3 0307 	rsb	r3, r3, #7
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	e001      	b.n	800aff0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aff0:	68fb      	ldr	r3, [r7, #12]
	}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b012:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10d      	bne.n	800b038 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d14d      	bne.n	800b0c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 ff91 	bl	800bf50 <xTaskPriorityDisinherit>
 800b02e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	609a      	str	r2, [r3, #8]
 800b036:	e043      	b.n	800b0c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d119      	bne.n	800b072 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6858      	ldr	r0, [r3, #4]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	461a      	mov	r2, r3
 800b048:	68b9      	ldr	r1, [r7, #8]
 800b04a:	f010 f9a1 	bl	801b390 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b056:	441a      	add	r2, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	685a      	ldr	r2, [r3, #4]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	429a      	cmp	r2, r3
 800b066:	d32b      	bcc.n	800b0c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	605a      	str	r2, [r3, #4]
 800b070:	e026      	b.n	800b0c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	68d8      	ldr	r0, [r3, #12]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	461a      	mov	r2, r3
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	f010 f987 	bl	801b390 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68da      	ldr	r2, [r3, #12]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	425b      	negs	r3, r3
 800b08c:	441a      	add	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d207      	bcs.n	800b0ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	689a      	ldr	r2, [r3, #8]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	425b      	negs	r3, r3
 800b0a8:	441a      	add	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d105      	bne.n	800b0c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d002      	beq.n	800b0c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0c8:	697b      	ldr	r3, [r7, #20]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d018      	beq.n	800b116 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ec:	441a      	add	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d303      	bcc.n	800b106 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68d9      	ldr	r1, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	461a      	mov	r2, r3
 800b110:	6838      	ldr	r0, [r7, #0]
 800b112:	f010 f93d 	bl	801b390 <memcpy>
	}
}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b126:	f001 f9c1 	bl	800c4ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b130:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b132:	e011      	b.n	800b158 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d012      	beq.n	800b162 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3324      	adds	r3, #36	; 0x24
 800b140:	4618      	mov	r0, r3
 800b142:	f000 fca3 	bl	800ba8c <xTaskRemoveFromEventList>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b14c:	f000 fd7e 	bl	800bc4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	3b01      	subs	r3, #1
 800b154:	b2db      	uxtb	r3, r3
 800b156:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dce9      	bgt.n	800b134 <prvUnlockQueue+0x16>
 800b160:	e000      	b.n	800b164 <prvUnlockQueue+0x46>
					break;
 800b162:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	22ff      	movs	r2, #255	; 0xff
 800b168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b16c:	f001 f9d2 	bl	800c514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b170:	f001 f99c 	bl	800c4ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b17a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b17c:	e011      	b.n	800b1a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d012      	beq.n	800b1ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3310      	adds	r3, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fc7e 	bl	800ba8c <xTaskRemoveFromEventList>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b196:	f000 fd59 	bl	800bc4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	dce9      	bgt.n	800b17e <prvUnlockQueue+0x60>
 800b1aa:	e000      	b.n	800b1ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	22ff      	movs	r2, #255	; 0xff
 800b1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1b6:	f001 f9ad 	bl	800c514 <vPortExitCritical>
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ca:	f001 f96f 	bl	800c4ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	e001      	b.n	800b1e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1e0:	f001 f998 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1f6:	f001 f959 	bl	800c4ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b202:	429a      	cmp	r2, r3
 800b204:	d102      	bne.n	800b20c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	e001      	b.n	800b210 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b210:	f001 f980 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800b214:	68fb      	ldr	r3, [r7, #12]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
	...

0800b220 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	e016      	b.n	800b25c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b22e:	4a10      	ldr	r2, [pc, #64]	; (800b270 <vQueueUnregisterQueue+0x50>)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	4413      	add	r3, r2
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d10b      	bne.n	800b256 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b23e:	4a0c      	ldr	r2, [pc, #48]	; (800b270 <vQueueUnregisterQueue+0x50>)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2100      	movs	r1, #0
 800b244:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b248:	4a09      	ldr	r2, [pc, #36]	; (800b270 <vQueueUnregisterQueue+0x50>)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	4413      	add	r3, r2
 800b250:	2200      	movs	r2, #0
 800b252:	605a      	str	r2, [r3, #4]
				break;
 800b254:	e006      	b.n	800b264 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3301      	adds	r3, #1
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b07      	cmp	r3, #7
 800b260:	d9e5      	bls.n	800b22e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b262:	bf00      	nop
 800b264:	bf00      	nop
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	20008678 	.word	0x20008678

0800b274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08e      	sub	sp, #56	; 0x38
 800b278:	af04      	add	r7, sp, #16
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10c      	bne.n	800b2a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	b672      	cpsid	i
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	b662      	cpsie	i
 800b29c:	623b      	str	r3, [r7, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10c      	bne.n	800b2c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	b672      	cpsid	i
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	b662      	cpsie	i
 800b2bc:	61fb      	str	r3, [r7, #28]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2c2:	2354      	movs	r3, #84	; 0x54
 800b2c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	2b54      	cmp	r3, #84	; 0x54
 800b2ca:	d00c      	beq.n	800b2e6 <xTaskCreateStatic+0x72>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	b672      	cpsid	i
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	b662      	cpsie	i
 800b2e0:	61bb      	str	r3, [r7, #24]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d01e      	beq.n	800b32c <xTaskCreateStatic+0xb8>
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d01b      	beq.n	800b32c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	2202      	movs	r2, #2
 800b302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b306:	2300      	movs	r3, #0
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	9302      	str	r3, [sp, #8]
 800b30e:	f107 0314 	add.w	r3, r7, #20
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	68b9      	ldr	r1, [r7, #8]
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f000 f850 	bl	800b3c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b326:	f000 f8d7 	bl	800b4d8 <prvAddNewTaskToReadyList>
 800b32a:	e001      	b.n	800b330 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b330:	697b      	ldr	r3, [r7, #20]
	}
 800b332:	4618      	mov	r0, r3
 800b334:	3728      	adds	r7, #40	; 0x28
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b08c      	sub	sp, #48	; 0x30
 800b33e:	af04      	add	r7, sp, #16
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	603b      	str	r3, [r7, #0]
 800b346:	4613      	mov	r3, r2
 800b348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b34a:	88fb      	ldrh	r3, [r7, #6]
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 f9d8 	bl	800c704 <pvPortMalloc>
 800b354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00e      	beq.n	800b37a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b35c:	2054      	movs	r0, #84	; 0x54
 800b35e:	f001 f9d1 	bl	800c704 <pvPortMalloc>
 800b362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	631a      	str	r2, [r3, #48]	; 0x30
 800b370:	e005      	b.n	800b37e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b372:	6978      	ldr	r0, [r7, #20]
 800b374:	f001 fa90 	bl	800c898 <vPortFree>
 800b378:	e001      	b.n	800b37e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b37a:	2300      	movs	r3, #0
 800b37c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d017      	beq.n	800b3b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b38c:	88fa      	ldrh	r2, [r7, #6]
 800b38e:	2300      	movs	r3, #0
 800b390:	9303      	str	r3, [sp, #12]
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	9302      	str	r3, [sp, #8]
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	68b9      	ldr	r1, [r7, #8]
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f000 f80e 	bl	800b3c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3a8:	69f8      	ldr	r0, [r7, #28]
 800b3aa:	f000 f895 	bl	800b4d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	61bb      	str	r3, [r7, #24]
 800b3b2:	e002      	b.n	800b3ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b088      	sub	sp, #32
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b3dc:	440b      	add	r3, r1
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	f023 0307 	bic.w	r3, r3, #7
 800b3ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00c      	beq.n	800b410 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	b672      	cpsid	i
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	b662      	cpsie	i
 800b40a:	617b      	str	r3, [r7, #20]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01f      	beq.n	800b456 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b416:	2300      	movs	r3, #0
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	e012      	b.n	800b442 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	4413      	add	r3, r2
 800b422:	7819      	ldrb	r1, [r3, #0]
 800b424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	3334      	adds	r3, #52	; 0x34
 800b42c:	460a      	mov	r2, r1
 800b42e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	4413      	add	r3, r2
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d006      	beq.n	800b44a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	3301      	adds	r3, #1
 800b440:	61fb      	str	r3, [r7, #28]
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	2b0f      	cmp	r3, #15
 800b446:	d9e9      	bls.n	800b41c <prvInitialiseNewTask+0x58>
 800b448:	e000      	b.n	800b44c <prvInitialiseNewTask+0x88>
			{
				break;
 800b44a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b454:	e003      	b.n	800b45e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	2b06      	cmp	r3, #6
 800b462:	d901      	bls.n	800b468 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b464:	2306      	movs	r3, #6
 800b466:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b46c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b472:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	2200      	movs	r2, #0
 800b478:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	3304      	adds	r3, #4
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fe55 	bl	800a12e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	3318      	adds	r3, #24
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fe fe50 	bl	800a12e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b492:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b496:	f1c3 0207 	rsb	r2, r3, #7
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	68f9      	ldr	r1, [r7, #12]
 800b4b6:	69b8      	ldr	r0, [r7, #24]
 800b4b8:	f000 feec 	bl	800c294 <pxPortInitialiseStack>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4ce:	bf00      	nop
 800b4d0:	3720      	adds	r7, #32
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4e0:	f000 ffe4 	bl	800c4ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4e4:	4b2a      	ldr	r3, [pc, #168]	; (800b590 <prvAddNewTaskToReadyList+0xb8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	4a29      	ldr	r2, [pc, #164]	; (800b590 <prvAddNewTaskToReadyList+0xb8>)
 800b4ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4ee:	4b29      	ldr	r3, [pc, #164]	; (800b594 <prvAddNewTaskToReadyList+0xbc>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d109      	bne.n	800b50a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4f6:	4a27      	ldr	r2, [pc, #156]	; (800b594 <prvAddNewTaskToReadyList+0xbc>)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4fc:	4b24      	ldr	r3, [pc, #144]	; (800b590 <prvAddNewTaskToReadyList+0xb8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d110      	bne.n	800b526 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b504:	f000 fbc6 	bl	800bc94 <prvInitialiseTaskLists>
 800b508:	e00d      	b.n	800b526 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <prvAddNewTaskToReadyList+0xc0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d109      	bne.n	800b526 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b512:	4b20      	ldr	r3, [pc, #128]	; (800b594 <prvAddNewTaskToReadyList+0xbc>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d802      	bhi.n	800b526 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b520:	4a1c      	ldr	r2, [pc, #112]	; (800b594 <prvAddNewTaskToReadyList+0xbc>)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b526:	4b1d      	ldr	r3, [pc, #116]	; (800b59c <prvAddNewTaskToReadyList+0xc4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3301      	adds	r3, #1
 800b52c:	4a1b      	ldr	r2, [pc, #108]	; (800b59c <prvAddNewTaskToReadyList+0xc4>)
 800b52e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b534:	2201      	movs	r2, #1
 800b536:	409a      	lsls	r2, r3
 800b538:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <prvAddNewTaskToReadyList+0xc8>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	4a18      	ldr	r2, [pc, #96]	; (800b5a0 <prvAddNewTaskToReadyList+0xc8>)
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b546:	4613      	mov	r3, r2
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	4413      	add	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <prvAddNewTaskToReadyList+0xcc>)
 800b550:	441a      	add	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3304      	adds	r3, #4
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f7fe fdf5 	bl	800a148 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b55e:	f000 ffd9 	bl	800c514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b562:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <prvAddNewTaskToReadyList+0xc0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00e      	beq.n	800b588 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b56a:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <prvAddNewTaskToReadyList+0xbc>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	429a      	cmp	r2, r3
 800b576:	d207      	bcs.n	800b588 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b578:	4b0b      	ldr	r3, [pc, #44]	; (800b5a8 <prvAddNewTaskToReadyList+0xd0>)
 800b57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000e2c 	.word	0x20000e2c
 800b594:	20000d2c 	.word	0x20000d2c
 800b598:	20000e38 	.word	0x20000e38
 800b59c:	20000e48 	.word	0x20000e48
 800b5a0:	20000e34 	.word	0x20000e34
 800b5a4:	20000d30 	.word	0x20000d30
 800b5a8:	e000ed04 	.word	0xe000ed04

0800b5ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	; 0x28
 800b5b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5ba:	463a      	mov	r2, r7
 800b5bc:	1d39      	adds	r1, r7, #4
 800b5be:	f107 0308 	add.w	r3, r7, #8
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7f5 fd68 	bl	8001098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	9202      	str	r2, [sp, #8]
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	460a      	mov	r2, r1
 800b5da:	4920      	ldr	r1, [pc, #128]	; (800b65c <vTaskStartScheduler+0xb0>)
 800b5dc:	4820      	ldr	r0, [pc, #128]	; (800b660 <vTaskStartScheduler+0xb4>)
 800b5de:	f7ff fe49 	bl	800b274 <xTaskCreateStatic>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	4a1f      	ldr	r2, [pc, #124]	; (800b664 <vTaskStartScheduler+0xb8>)
 800b5e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b5e8:	4b1e      	ldr	r3, [pc, #120]	; (800b664 <vTaskStartScheduler+0xb8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	e001      	b.n	800b5fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d118      	bne.n	800b632 <vTaskStartScheduler+0x86>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	b672      	cpsid	i
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	b662      	cpsie	i
 800b614:	613b      	str	r3, [r7, #16]
}
 800b616:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b618:	4b13      	ldr	r3, [pc, #76]	; (800b668 <vTaskStartScheduler+0xbc>)
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295
 800b61e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b620:	4b12      	ldr	r3, [pc, #72]	; (800b66c <vTaskStartScheduler+0xc0>)
 800b622:	2201      	movs	r2, #1
 800b624:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b626:	4b12      	ldr	r3, [pc, #72]	; (800b670 <vTaskStartScheduler+0xc4>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b62c:	f000 fec0 	bl	800c3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b630:	e010      	b.n	800b654 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b638:	d10c      	bne.n	800b654 <vTaskStartScheduler+0xa8>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	b672      	cpsid	i
 800b640:	f383 8811 	msr	BASEPRI, r3
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	b662      	cpsie	i
 800b64e:	60fb      	str	r3, [r7, #12]
}
 800b650:	bf00      	nop
 800b652:	e7fe      	b.n	800b652 <vTaskStartScheduler+0xa6>
}
 800b654:	bf00      	nop
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	080248d0 	.word	0x080248d0
 800b660:	0800bc65 	.word	0x0800bc65
 800b664:	20000e50 	.word	0x20000e50
 800b668:	20000e4c 	.word	0x20000e4c
 800b66c:	20000e38 	.word	0x20000e38
 800b670:	20000e30 	.word	0x20000e30

0800b674 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b678:	4b04      	ldr	r3, [pc, #16]	; (800b68c <vTaskSuspendAll+0x18>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a03      	ldr	r2, [pc, #12]	; (800b68c <vTaskSuspendAll+0x18>)
 800b680:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b682:	bf00      	nop
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20000e54 	.word	0x20000e54

0800b690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b69e:	4b42      	ldr	r3, [pc, #264]	; (800b7a8 <xTaskResumeAll+0x118>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10c      	bne.n	800b6c0 <xTaskResumeAll+0x30>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	b672      	cpsid	i
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	b662      	cpsie	i
 800b6ba:	603b      	str	r3, [r7, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6c0:	f000 fef4 	bl	800c4ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b6c4:	4b38      	ldr	r3, [pc, #224]	; (800b7a8 <xTaskResumeAll+0x118>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	4a37      	ldr	r2, [pc, #220]	; (800b7a8 <xTaskResumeAll+0x118>)
 800b6cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ce:	4b36      	ldr	r3, [pc, #216]	; (800b7a8 <xTaskResumeAll+0x118>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d161      	bne.n	800b79a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6d6:	4b35      	ldr	r3, [pc, #212]	; (800b7ac <xTaskResumeAll+0x11c>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d05d      	beq.n	800b79a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6de:	e02e      	b.n	800b73e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e0:	4b33      	ldr	r3, [pc, #204]	; (800b7b0 <xTaskResumeAll+0x120>)
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3318      	adds	r3, #24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fe fd88 	bl	800a202 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fe fd83 	bl	800a202 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	2201      	movs	r2, #1
 800b702:	409a      	lsls	r2, r3
 800b704:	4b2b      	ldr	r3, [pc, #172]	; (800b7b4 <xTaskResumeAll+0x124>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4313      	orrs	r3, r2
 800b70a:	4a2a      	ldr	r2, [pc, #168]	; (800b7b4 <xTaskResumeAll+0x124>)
 800b70c:	6013      	str	r3, [r2, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4a27      	ldr	r2, [pc, #156]	; (800b7b8 <xTaskResumeAll+0x128>)
 800b71c:	441a      	add	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3304      	adds	r3, #4
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f7fe fd0f 	bl	800a148 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4b23      	ldr	r3, [pc, #140]	; (800b7bc <xTaskResumeAll+0x12c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	429a      	cmp	r2, r3
 800b736:	d302      	bcc.n	800b73e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b738:	4b21      	ldr	r3, [pc, #132]	; (800b7c0 <xTaskResumeAll+0x130>)
 800b73a:	2201      	movs	r2, #1
 800b73c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b73e:	4b1c      	ldr	r3, [pc, #112]	; (800b7b0 <xTaskResumeAll+0x120>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1cc      	bne.n	800b6e0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d001      	beq.n	800b750 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b74c:	f000 fb42 	bl	800bdd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b750:	4b1c      	ldr	r3, [pc, #112]	; (800b7c4 <xTaskResumeAll+0x134>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d010      	beq.n	800b77e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b75c:	f000 f858 	bl	800b810 <xTaskIncrementTick>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d002      	beq.n	800b76c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b766:	4b16      	ldr	r3, [pc, #88]	; (800b7c0 <xTaskResumeAll+0x130>)
 800b768:	2201      	movs	r2, #1
 800b76a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3b01      	subs	r3, #1
 800b770:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1f1      	bne.n	800b75c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b778:	4b12      	ldr	r3, [pc, #72]	; (800b7c4 <xTaskResumeAll+0x134>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b77e:	4b10      	ldr	r3, [pc, #64]	; (800b7c0 <xTaskResumeAll+0x130>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d009      	beq.n	800b79a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b786:	2301      	movs	r3, #1
 800b788:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b78a:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <xTaskResumeAll+0x138>)
 800b78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b79a:	f000 febb 	bl	800c514 <vPortExitCritical>

	return xAlreadyYielded;
 800b79e:	68bb      	ldr	r3, [r7, #8]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20000e54 	.word	0x20000e54
 800b7ac:	20000e2c 	.word	0x20000e2c
 800b7b0:	20000dec 	.word	0x20000dec
 800b7b4:	20000e34 	.word	0x20000e34
 800b7b8:	20000d30 	.word	0x20000d30
 800b7bc:	20000d2c 	.word	0x20000d2c
 800b7c0:	20000e40 	.word	0x20000e40
 800b7c4:	20000e3c 	.word	0x20000e3c
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b7d2:	4b05      	ldr	r3, [pc, #20]	; (800b7e8 <xTaskGetTickCount+0x1c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b7d8:	687b      	ldr	r3, [r7, #4]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20000e30 	.word	0x20000e30

0800b7ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7f2:	f000 ff43 	bl	800c67c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b7fa:	4b04      	ldr	r3, [pc, #16]	; (800b80c <xTaskGetTickCountFromISR+0x20>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b800:	683b      	ldr	r3, [r7, #0]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000e30 	.word	0x20000e30

0800b810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b81a:	4b4f      	ldr	r3, [pc, #316]	; (800b958 <xTaskIncrementTick+0x148>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f040 808a 	bne.w	800b938 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b824:	4b4d      	ldr	r3, [pc, #308]	; (800b95c <xTaskIncrementTick+0x14c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b82c:	4a4b      	ldr	r2, [pc, #300]	; (800b95c <xTaskIncrementTick+0x14c>)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d122      	bne.n	800b87e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b838:	4b49      	ldr	r3, [pc, #292]	; (800b960 <xTaskIncrementTick+0x150>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00c      	beq.n	800b85c <xTaskIncrementTick+0x4c>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	b672      	cpsid	i
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	b662      	cpsie	i
 800b856:	603b      	str	r3, [r7, #0]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <xTaskIncrementTick+0x4a>
 800b85c:	4b40      	ldr	r3, [pc, #256]	; (800b960 <xTaskIncrementTick+0x150>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	4b40      	ldr	r3, [pc, #256]	; (800b964 <xTaskIncrementTick+0x154>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a3e      	ldr	r2, [pc, #248]	; (800b960 <xTaskIncrementTick+0x150>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	4a3e      	ldr	r2, [pc, #248]	; (800b964 <xTaskIncrementTick+0x154>)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	4b3d      	ldr	r3, [pc, #244]	; (800b968 <xTaskIncrementTick+0x158>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	4a3c      	ldr	r2, [pc, #240]	; (800b968 <xTaskIncrementTick+0x158>)
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	f000 faab 	bl	800bdd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b87e:	4b3b      	ldr	r3, [pc, #236]	; (800b96c <xTaskIncrementTick+0x15c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	429a      	cmp	r2, r3
 800b886:	d348      	bcc.n	800b91a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b888:	4b35      	ldr	r3, [pc, #212]	; (800b960 <xTaskIncrementTick+0x150>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d104      	bne.n	800b89c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b892:	4b36      	ldr	r3, [pc, #216]	; (800b96c <xTaskIncrementTick+0x15c>)
 800b894:	f04f 32ff 	mov.w	r2, #4294967295
 800b898:	601a      	str	r2, [r3, #0]
					break;
 800b89a:	e03e      	b.n	800b91a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89c:	4b30      	ldr	r3, [pc, #192]	; (800b960 <xTaskIncrementTick+0x150>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d203      	bcs.n	800b8bc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8b4:	4a2d      	ldr	r2, [pc, #180]	; (800b96c <xTaskIncrementTick+0x15c>)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8ba:	e02e      	b.n	800b91a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fe fc9e 	bl	800a202 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d004      	beq.n	800b8d8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	3318      	adds	r3, #24
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe fc95 	bl	800a202 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	2201      	movs	r2, #1
 800b8de:	409a      	lsls	r2, r3
 800b8e0:	4b23      	ldr	r3, [pc, #140]	; (800b970 <xTaskIncrementTick+0x160>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	4a22      	ldr	r2, [pc, #136]	; (800b970 <xTaskIncrementTick+0x160>)
 800b8e8:	6013      	str	r3, [r2, #0]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4a1f      	ldr	r2, [pc, #124]	; (800b974 <xTaskIncrementTick+0x164>)
 800b8f8:	441a      	add	r2, r3
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	4619      	mov	r1, r3
 800b900:	4610      	mov	r0, r2
 800b902:	f7fe fc21 	bl	800a148 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90a:	4b1b      	ldr	r3, [pc, #108]	; (800b978 <xTaskIncrementTick+0x168>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	429a      	cmp	r2, r3
 800b912:	d3b9      	bcc.n	800b888 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b914:	2301      	movs	r3, #1
 800b916:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b918:	e7b6      	b.n	800b888 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b91a:	4b17      	ldr	r3, [pc, #92]	; (800b978 <xTaskIncrementTick+0x168>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	4914      	ldr	r1, [pc, #80]	; (800b974 <xTaskIncrementTick+0x164>)
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	440b      	add	r3, r1
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d907      	bls.n	800b942 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800b932:	2301      	movs	r3, #1
 800b934:	617b      	str	r3, [r7, #20]
 800b936:	e004      	b.n	800b942 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b938:	4b10      	ldr	r3, [pc, #64]	; (800b97c <xTaskIncrementTick+0x16c>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	3301      	adds	r3, #1
 800b93e:	4a0f      	ldr	r2, [pc, #60]	; (800b97c <xTaskIncrementTick+0x16c>)
 800b940:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b942:	4b0f      	ldr	r3, [pc, #60]	; (800b980 <xTaskIncrementTick+0x170>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800b94a:	2301      	movs	r3, #1
 800b94c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b94e:	697b      	ldr	r3, [r7, #20]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000e54 	.word	0x20000e54
 800b95c:	20000e30 	.word	0x20000e30
 800b960:	20000de4 	.word	0x20000de4
 800b964:	20000de8 	.word	0x20000de8
 800b968:	20000e44 	.word	0x20000e44
 800b96c:	20000e4c 	.word	0x20000e4c
 800b970:	20000e34 	.word	0x20000e34
 800b974:	20000d30 	.word	0x20000d30
 800b978:	20000d2c 	.word	0x20000d2c
 800b97c:	20000e3c 	.word	0x20000e3c
 800b980:	20000e40 	.word	0x20000e40

0800b984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b98a:	4b28      	ldr	r3, [pc, #160]	; (800ba2c <vTaskSwitchContext+0xa8>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b992:	4b27      	ldr	r3, [pc, #156]	; (800ba30 <vTaskSwitchContext+0xac>)
 800b994:	2201      	movs	r2, #1
 800b996:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b998:	e041      	b.n	800ba1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b99a:	4b25      	ldr	r3, [pc, #148]	; (800ba30 <vTaskSwitchContext+0xac>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a0:	4b24      	ldr	r3, [pc, #144]	; (800ba34 <vTaskSwitchContext+0xb0>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	fab3 f383 	clz	r3, r3
 800b9ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b9ae:	7afb      	ldrb	r3, [r7, #11]
 800b9b0:	f1c3 031f 	rsb	r3, r3, #31
 800b9b4:	617b      	str	r3, [r7, #20]
 800b9b6:	4920      	ldr	r1, [pc, #128]	; (800ba38 <vTaskSwitchContext+0xb4>)
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	440b      	add	r3, r1
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10c      	bne.n	800b9e4 <vTaskSwitchContext+0x60>
	__asm volatile
 800b9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ce:	b672      	cpsid	i
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	b662      	cpsie	i
 800b9de:	607b      	str	r3, [r7, #4]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <vTaskSwitchContext+0x5e>
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4a12      	ldr	r2, [pc, #72]	; (800ba38 <vTaskSwitchContext+0xb4>)
 800b9f0:	4413      	add	r3, r2
 800b9f2:	613b      	str	r3, [r7, #16]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	685a      	ldr	r2, [r3, #4]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	3308      	adds	r3, #8
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d104      	bne.n	800ba14 <vTaskSwitchContext+0x90>
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	685a      	ldr	r2, [r3, #4]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	605a      	str	r2, [r3, #4]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	4a08      	ldr	r2, [pc, #32]	; (800ba3c <vTaskSwitchContext+0xb8>)
 800ba1c:	6013      	str	r3, [r2, #0]
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	20000e54 	.word	0x20000e54
 800ba30:	20000e40 	.word	0x20000e40
 800ba34:	20000e34 	.word	0x20000e34
 800ba38:	20000d30 	.word	0x20000d30
 800ba3c:	20000d2c 	.word	0x20000d2c

0800ba40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10c      	bne.n	800ba6a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	b672      	cpsid	i
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	b662      	cpsie	i
 800ba64:	60fb      	str	r3, [r7, #12]
}
 800ba66:	bf00      	nop
 800ba68:	e7fe      	b.n	800ba68 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba6a:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <vTaskPlaceOnEventList+0x48>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3318      	adds	r3, #24
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7fe fb8c 	bl	800a190 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba78:	2101      	movs	r1, #1
 800ba7a:	6838      	ldr	r0, [r7, #0]
 800ba7c:	f000 fba4 	bl	800c1c8 <prvAddCurrentTaskToDelayedList>
}
 800ba80:	bf00      	nop
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	20000d2c 	.word	0x20000d2c

0800ba8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10c      	bne.n	800babc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	b672      	cpsid	i
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	b662      	cpsie	i
 800bab6:	60fb      	str	r3, [r7, #12]
}
 800bab8:	bf00      	nop
 800baba:	e7fe      	b.n	800baba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3318      	adds	r3, #24
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fb9e 	bl	800a202 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac6:	4b1d      	ldr	r3, [pc, #116]	; (800bb3c <xTaskRemoveFromEventList+0xb0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d11c      	bne.n	800bb08 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fb95 	bl	800a202 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	2201      	movs	r2, #1
 800bade:	409a      	lsls	r2, r3
 800bae0:	4b17      	ldr	r3, [pc, #92]	; (800bb40 <xTaskRemoveFromEventList+0xb4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	4a16      	ldr	r2, [pc, #88]	; (800bb40 <xTaskRemoveFromEventList+0xb4>)
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4a13      	ldr	r2, [pc, #76]	; (800bb44 <xTaskRemoveFromEventList+0xb8>)
 800baf8:	441a      	add	r2, r3
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	3304      	adds	r3, #4
 800bafe:	4619      	mov	r1, r3
 800bb00:	4610      	mov	r0, r2
 800bb02:	f7fe fb21 	bl	800a148 <vListInsertEnd>
 800bb06:	e005      	b.n	800bb14 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3318      	adds	r3, #24
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	480e      	ldr	r0, [pc, #56]	; (800bb48 <xTaskRemoveFromEventList+0xbc>)
 800bb10:	f7fe fb1a 	bl	800a148 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb18:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <xTaskRemoveFromEventList+0xc0>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d905      	bls.n	800bb2e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb22:	2301      	movs	r3, #1
 800bb24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb26:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <xTaskRemoveFromEventList+0xc4>)
 800bb28:	2201      	movs	r2, #1
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	e001      	b.n	800bb32 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb32:	697b      	ldr	r3, [r7, #20]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	20000e54 	.word	0x20000e54
 800bb40:	20000e34 	.word	0x20000e34
 800bb44:	20000d30 	.word	0x20000d30
 800bb48:	20000dec 	.word	0x20000dec
 800bb4c:	20000d2c 	.word	0x20000d2c
 800bb50:	20000e40 	.word	0x20000e40

0800bb54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <vTaskInternalSetTimeOutState+0x24>)
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb64:	4b05      	ldr	r3, [pc, #20]	; (800bb7c <vTaskInternalSetTimeOutState+0x28>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	605a      	str	r2, [r3, #4]
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	20000e44 	.word	0x20000e44
 800bb7c:	20000e30 	.word	0x20000e30

0800bb80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b088      	sub	sp, #32
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10c      	bne.n	800bbaa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	b672      	cpsid	i
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	b662      	cpsie	i
 800bba4:	613b      	str	r3, [r7, #16]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10c      	bne.n	800bbca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	b672      	cpsid	i
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	b662      	cpsie	i
 800bbc4:	60fb      	str	r3, [r7, #12]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bbca:	f000 fc6f 	bl	800c4ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbce:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <xTaskCheckForTimeOut+0xc4>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	d102      	bne.n	800bbee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	61fb      	str	r3, [r7, #28]
 800bbec:	e023      	b.n	800bc36 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <xTaskCheckForTimeOut+0xc8>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d007      	beq.n	800bc0a <xTaskCheckForTimeOut+0x8a>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d302      	bcc.n	800bc0a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	e015      	b.n	800bc36 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d20b      	bcs.n	800bc2c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	1ad2      	subs	r2, r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ff97 	bl	800bb54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	61fb      	str	r3, [r7, #28]
 800bc2a:	e004      	b.n	800bc36 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc32:	2301      	movs	r3, #1
 800bc34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc36:	f000 fc6d 	bl	800c514 <vPortExitCritical>

	return xReturn;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20000e30 	.word	0x20000e30
 800bc48:	20000e44 	.word	0x20000e44

0800bc4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc50:	4b03      	ldr	r3, [pc, #12]	; (800bc60 <vTaskMissedYield+0x14>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	601a      	str	r2, [r3, #0]
}
 800bc56:	bf00      	nop
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	20000e40 	.word	0x20000e40

0800bc64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc6c:	f000 f852 	bl	800bd14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc70:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <prvIdleTask+0x28>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d9f9      	bls.n	800bc6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc78:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <prvIdleTask+0x2c>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc88:	e7f0      	b.n	800bc6c <prvIdleTask+0x8>
 800bc8a:	bf00      	nop
 800bc8c:	20000d30 	.word	0x20000d30
 800bc90:	e000ed04 	.word	0xe000ed04

0800bc94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	607b      	str	r3, [r7, #4]
 800bc9e:	e00c      	b.n	800bcba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	4613      	mov	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4a12      	ldr	r2, [pc, #72]	; (800bcf4 <prvInitialiseTaskLists+0x60>)
 800bcac:	4413      	add	r3, r2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe fa1d 	bl	800a0ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b06      	cmp	r3, #6
 800bcbe:	d9ef      	bls.n	800bca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcc0:	480d      	ldr	r0, [pc, #52]	; (800bcf8 <prvInitialiseTaskLists+0x64>)
 800bcc2:	f7fe fa14 	bl	800a0ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcc6:	480d      	ldr	r0, [pc, #52]	; (800bcfc <prvInitialiseTaskLists+0x68>)
 800bcc8:	f7fe fa11 	bl	800a0ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bccc:	480c      	ldr	r0, [pc, #48]	; (800bd00 <prvInitialiseTaskLists+0x6c>)
 800bcce:	f7fe fa0e 	bl	800a0ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcd2:	480c      	ldr	r0, [pc, #48]	; (800bd04 <prvInitialiseTaskLists+0x70>)
 800bcd4:	f7fe fa0b 	bl	800a0ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcd8:	480b      	ldr	r0, [pc, #44]	; (800bd08 <prvInitialiseTaskLists+0x74>)
 800bcda:	f7fe fa08 	bl	800a0ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcde:	4b0b      	ldr	r3, [pc, #44]	; (800bd0c <prvInitialiseTaskLists+0x78>)
 800bce0:	4a05      	ldr	r2, [pc, #20]	; (800bcf8 <prvInitialiseTaskLists+0x64>)
 800bce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bce4:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <prvInitialiseTaskLists+0x7c>)
 800bce6:	4a05      	ldr	r2, [pc, #20]	; (800bcfc <prvInitialiseTaskLists+0x68>)
 800bce8:	601a      	str	r2, [r3, #0]
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20000d30 	.word	0x20000d30
 800bcf8:	20000dbc 	.word	0x20000dbc
 800bcfc:	20000dd0 	.word	0x20000dd0
 800bd00:	20000dec 	.word	0x20000dec
 800bd04:	20000e00 	.word	0x20000e00
 800bd08:	20000e18 	.word	0x20000e18
 800bd0c:	20000de4 	.word	0x20000de4
 800bd10:	20000de8 	.word	0x20000de8

0800bd14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd1a:	e019      	b.n	800bd50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd1c:	f000 fbc6 	bl	800c4ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd20:	4b10      	ldr	r3, [pc, #64]	; (800bd64 <prvCheckTasksWaitingTermination+0x50>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe fa68 	bl	800a202 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd32:	4b0d      	ldr	r3, [pc, #52]	; (800bd68 <prvCheckTasksWaitingTermination+0x54>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4a0b      	ldr	r2, [pc, #44]	; (800bd68 <prvCheckTasksWaitingTermination+0x54>)
 800bd3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <prvCheckTasksWaitingTermination+0x58>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	4a0a      	ldr	r2, [pc, #40]	; (800bd6c <prvCheckTasksWaitingTermination+0x58>)
 800bd44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd46:	f000 fbe5 	bl	800c514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f810 	bl	800bd70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd50:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <prvCheckTasksWaitingTermination+0x58>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1e1      	bne.n	800bd1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd58:	bf00      	nop
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000e00 	.word	0x20000e00
 800bd68:	20000e2c 	.word	0x20000e2c
 800bd6c:	20000e14 	.word	0x20000e14

0800bd70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d108      	bne.n	800bd94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fd86 	bl	800c898 <vPortFree>
				vPortFree( pxTCB );
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fd83 	bl	800c898 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd92:	e01a      	b.n	800bdca <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d103      	bne.n	800bda6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fd7a 	bl	800c898 <vPortFree>
	}
 800bda4:	e011      	b.n	800bdca <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d00c      	beq.n	800bdca <prvDeleteTCB+0x5a>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	b672      	cpsid	i
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	b662      	cpsie	i
 800bdc4:	60fb      	str	r3, [r7, #12]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <prvDeleteTCB+0x58>
	}
 800bdca:	bf00      	nop
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
	...

0800bdd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <prvResetNextTaskUnblockTime+0x38>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d104      	bne.n	800bdee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <prvResetNextTaskUnblockTime+0x3c>)
 800bde6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdec:	e008      	b.n	800be00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdee:	4b07      	ldr	r3, [pc, #28]	; (800be0c <prvResetNextTaskUnblockTime+0x38>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	4a04      	ldr	r2, [pc, #16]	; (800be10 <prvResetNextTaskUnblockTime+0x3c>)
 800bdfe:	6013      	str	r3, [r2, #0]
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	20000de4 	.word	0x20000de4
 800be10:	20000e4c 	.word	0x20000e4c

0800be14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be1a:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <xTaskGetSchedulerState+0x34>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d102      	bne.n	800be28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be22:	2301      	movs	r3, #1
 800be24:	607b      	str	r3, [r7, #4]
 800be26:	e008      	b.n	800be3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be28:	4b08      	ldr	r3, [pc, #32]	; (800be4c <xTaskGetSchedulerState+0x38>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be30:	2302      	movs	r3, #2
 800be32:	607b      	str	r3, [r7, #4]
 800be34:	e001      	b.n	800be3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be36:	2300      	movs	r3, #0
 800be38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be3a:	687b      	ldr	r3, [r7, #4]
	}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	20000e38 	.word	0x20000e38
 800be4c:	20000e54 	.word	0x20000e54

0800be50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d069      	beq.n	800bf3a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6a:	4b36      	ldr	r3, [pc, #216]	; (800bf44 <xTaskPriorityInherit+0xf4>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	429a      	cmp	r2, r3
 800be72:	d259      	bcs.n	800bf28 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	db06      	blt.n	800be8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be7c:	4b31      	ldr	r3, [pc, #196]	; (800bf44 <xTaskPriorityInherit+0xf4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	f1c3 0207 	rsb	r2, r3, #7
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	6959      	ldr	r1, [r3, #20]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4a2b      	ldr	r2, [pc, #172]	; (800bf48 <xTaskPriorityInherit+0xf8>)
 800be9c:	4413      	add	r3, r2
 800be9e:	4299      	cmp	r1, r3
 800bea0:	d13a      	bne.n	800bf18 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe f9ab 	bl	800a202 <uxListRemove>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d115      	bne.n	800bede <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb6:	4924      	ldr	r1, [pc, #144]	; (800bf48 <xTaskPriorityInherit+0xf8>)
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	440b      	add	r3, r1
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xTaskPriorityInherit+0x8e>
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	2201      	movs	r2, #1
 800bece:	fa02 f303 	lsl.w	r3, r2, r3
 800bed2:	43da      	mvns	r2, r3
 800bed4:	4b1d      	ldr	r3, [pc, #116]	; (800bf4c <xTaskPriorityInherit+0xfc>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4013      	ands	r3, r2
 800beda:	4a1c      	ldr	r2, [pc, #112]	; (800bf4c <xTaskPriorityInherit+0xfc>)
 800bedc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bede:	4b19      	ldr	r3, [pc, #100]	; (800bf44 <xTaskPriorityInherit+0xf4>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	2201      	movs	r2, #1
 800beee:	409a      	lsls	r2, r3
 800bef0:	4b16      	ldr	r3, [pc, #88]	; (800bf4c <xTaskPriorityInherit+0xfc>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	4a15      	ldr	r2, [pc, #84]	; (800bf4c <xTaskPriorityInherit+0xfc>)
 800bef8:	6013      	str	r3, [r2, #0]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befe:	4613      	mov	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4a10      	ldr	r2, [pc, #64]	; (800bf48 <xTaskPriorityInherit+0xf8>)
 800bf08:	441a      	add	r2, r3
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	4619      	mov	r1, r3
 800bf10:	4610      	mov	r0, r2
 800bf12:	f7fe f919 	bl	800a148 <vListInsertEnd>
 800bf16:	e004      	b.n	800bf22 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf18:	4b0a      	ldr	r3, [pc, #40]	; (800bf44 <xTaskPriorityInherit+0xf4>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf22:	2301      	movs	r3, #1
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	e008      	b.n	800bf3a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf2c:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <xTaskPriorityInherit+0xf4>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d201      	bcs.n	800bf3a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf36:	2301      	movs	r3, #1
 800bf38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
	}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	20000d2c 	.word	0x20000d2c
 800bf48:	20000d30 	.word	0x20000d30
 800bf4c:	20000e34 	.word	0x20000e34

0800bf50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d072      	beq.n	800c04c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf66:	4b3c      	ldr	r3, [pc, #240]	; (800c058 <xTaskPriorityDisinherit+0x108>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d00c      	beq.n	800bf8a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf74:	b672      	cpsid	i
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	b662      	cpsie	i
 800bf84:	60fb      	str	r3, [r7, #12]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10c      	bne.n	800bfac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	b672      	cpsid	i
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	b662      	cpsie	i
 800bfa6:	60bb      	str	r3, [r7, #8]
}
 800bfa8:	bf00      	nop
 800bfaa:	e7fe      	b.n	800bfaa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfb0:	1e5a      	subs	r2, r3, #1
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d044      	beq.n	800c04c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d140      	bne.n	800c04c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe f917 	bl	800a202 <uxListRemove>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d115      	bne.n	800c006 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfde:	491f      	ldr	r1, [pc, #124]	; (800c05c <xTaskPriorityDisinherit+0x10c>)
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10a      	bne.n	800c006 <xTaskPriorityDisinherit+0xb6>
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	2201      	movs	r2, #1
 800bff6:	fa02 f303 	lsl.w	r3, r2, r3
 800bffa:	43da      	mvns	r2, r3
 800bffc:	4b18      	ldr	r3, [pc, #96]	; (800c060 <xTaskPriorityDisinherit+0x110>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4013      	ands	r3, r2
 800c002:	4a17      	ldr	r2, [pc, #92]	; (800c060 <xTaskPriorityDisinherit+0x110>)
 800c004:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c012:	f1c3 0207 	rsb	r2, r3, #7
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	2201      	movs	r2, #1
 800c020:	409a      	lsls	r2, r3
 800c022:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <xTaskPriorityDisinherit+0x110>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4313      	orrs	r3, r2
 800c028:	4a0d      	ldr	r2, [pc, #52]	; (800c060 <xTaskPriorityDisinherit+0x110>)
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <xTaskPriorityDisinherit+0x10c>)
 800c03a:	441a      	add	r2, r3
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	3304      	adds	r3, #4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe f880 	bl	800a148 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c048:	2301      	movs	r3, #1
 800c04a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c04c:	697b      	ldr	r3, [r7, #20]
	}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20000d2c 	.word	0x20000d2c
 800c05c:	20000d30 	.word	0x20000d30
 800c060:	20000e34 	.word	0x20000e34

0800c064 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c064:	b580      	push	{r7, lr}
 800c066:	b088      	sub	sp, #32
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c072:	2301      	movs	r3, #1
 800c074:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8087 	beq.w	800c18c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10c      	bne.n	800c0a0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08a:	b672      	cpsid	i
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	b662      	cpsie	i
 800c09a:	60fb      	str	r3, [r7, #12]
}
 800c09c:	bf00      	nop
 800c09e:	e7fe      	b.n	800c09e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d902      	bls.n	800c0b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	61fb      	str	r3, [r7, #28]
 800c0ae:	e002      	b.n	800c0b6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ba:	69fa      	ldr	r2, [r7, #28]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d065      	beq.n	800c18c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d160      	bne.n	800c18c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c0ca:	4b32      	ldr	r3, [pc, #200]	; (800c194 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d10c      	bne.n	800c0ee <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	b672      	cpsid	i
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	b662      	cpsie	i
 800c0e8:	60bb      	str	r3, [r7, #8]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	69fa      	ldr	r2, [r7, #28]
 800c0f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	db04      	blt.n	800c10c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	f1c3 0207 	rsb	r2, r3, #7
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	6959      	ldr	r1, [r3, #20]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4a1f      	ldr	r2, [pc, #124]	; (800c198 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c11c:	4413      	add	r3, r2
 800c11e:	4299      	cmp	r1, r3
 800c120:	d134      	bne.n	800c18c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	3304      	adds	r3, #4
 800c126:	4618      	mov	r0, r3
 800c128:	f7fe f86b 	bl	800a202 <uxListRemove>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d115      	bne.n	800c15e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c136:	4918      	ldr	r1, [pc, #96]	; (800c198 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	440b      	add	r3, r1
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14c:	2201      	movs	r2, #1
 800c14e:	fa02 f303 	lsl.w	r3, r2, r3
 800c152:	43da      	mvns	r2, r3
 800c154:	4b11      	ldr	r3, [pc, #68]	; (800c19c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4013      	ands	r3, r2
 800c15a:	4a10      	ldr	r2, [pc, #64]	; (800c19c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c15c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	2201      	movs	r2, #1
 800c164:	409a      	lsls	r2, r3
 800c166:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	4a0b      	ldr	r2, [pc, #44]	; (800c19c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4a06      	ldr	r2, [pc, #24]	; (800c198 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c17e:	441a      	add	r2, r3
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	3304      	adds	r3, #4
 800c184:	4619      	mov	r1, r3
 800c186:	4610      	mov	r0, r2
 800c188:	f7fd ffde 	bl	800a148 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c18c:	bf00      	nop
 800c18e:	3720      	adds	r7, #32
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20000d2c 	.word	0x20000d2c
 800c198:	20000d30 	.word	0x20000d30
 800c19c:	20000e34 	.word	0x20000e34

0800c1a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1a0:	b480      	push	{r7}
 800c1a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1a4:	4b07      	ldr	r3, [pc, #28]	; (800c1c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1b2:	3201      	adds	r2, #1
 800c1b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c1b6:	4b03      	ldr	r3, [pc, #12]	; (800c1c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
	}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	20000d2c 	.word	0x20000d2c

0800c1c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1d2:	4b29      	ldr	r3, [pc, #164]	; (800c278 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1d8:	4b28      	ldr	r3, [pc, #160]	; (800c27c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe f80f 	bl	800a202 <uxListRemove>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10b      	bne.n	800c202 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c1ea:	4b24      	ldr	r3, [pc, #144]	; (800c27c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f6:	43da      	mvns	r2, r3
 800c1f8:	4b21      	ldr	r3, [pc, #132]	; (800c280 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	4a20      	ldr	r2, [pc, #128]	; (800c280 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c200:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c208:	d10a      	bne.n	800c220 <prvAddCurrentTaskToDelayedList+0x58>
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d007      	beq.n	800c220 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c210:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3304      	adds	r3, #4
 800c216:	4619      	mov	r1, r3
 800c218:	481a      	ldr	r0, [pc, #104]	; (800c284 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c21a:	f7fd ff95 	bl	800a148 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c21e:	e026      	b.n	800c26e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4413      	add	r3, r2
 800c226:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c228:	4b14      	ldr	r3, [pc, #80]	; (800c27c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	429a      	cmp	r2, r3
 800c236:	d209      	bcs.n	800c24c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c238:	4b13      	ldr	r3, [pc, #76]	; (800c288 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3304      	adds	r3, #4
 800c242:	4619      	mov	r1, r3
 800c244:	4610      	mov	r0, r2
 800c246:	f7fd ffa3 	bl	800a190 <vListInsert>
}
 800c24a:	e010      	b.n	800c26e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c24c:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	4b0a      	ldr	r3, [pc, #40]	; (800c27c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3304      	adds	r3, #4
 800c256:	4619      	mov	r1, r3
 800c258:	4610      	mov	r0, r2
 800c25a:	f7fd ff99 	bl	800a190 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	429a      	cmp	r2, r3
 800c266:	d202      	bcs.n	800c26e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c268:	4a09      	ldr	r2, [pc, #36]	; (800c290 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	6013      	str	r3, [r2, #0]
}
 800c26e:	bf00      	nop
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20000e30 	.word	0x20000e30
 800c27c:	20000d2c 	.word	0x20000d2c
 800c280:	20000e34 	.word	0x20000e34
 800c284:	20000e18 	.word	0x20000e18
 800c288:	20000de8 	.word	0x20000de8
 800c28c:	20000de4 	.word	0x20000de4
 800c290:	20000e4c 	.word	0x20000e4c

0800c294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3b04      	subs	r3, #4
 800c2a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3b04      	subs	r3, #4
 800c2b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f023 0201 	bic.w	r2, r3, #1
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3b04      	subs	r3, #4
 800c2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2c4:	4a0c      	ldr	r2, [pc, #48]	; (800c2f8 <pxPortInitialiseStack+0x64>)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3b14      	subs	r3, #20
 800c2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3b04      	subs	r3, #4
 800c2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f06f 0202 	mvn.w	r2, #2
 800c2e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3b20      	subs	r3, #32
 800c2e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3714      	adds	r7, #20
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	0800c2fd 	.word	0x0800c2fd

0800c2fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c306:	4b14      	ldr	r3, [pc, #80]	; (800c358 <prvTaskExitError+0x5c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30e:	d00c      	beq.n	800c32a <prvTaskExitError+0x2e>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	b672      	cpsid	i
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	b662      	cpsie	i
 800c324:	60fb      	str	r3, [r7, #12]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <prvTaskExitError+0x2c>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	b672      	cpsid	i
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	b662      	cpsie	i
 800c33e:	60bb      	str	r3, [r7, #8]
}
 800c340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c342:	bf00      	nop
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d0fc      	beq.n	800c344 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c34a:	bf00      	nop
 800c34c:	bf00      	nop
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	20000028 	.word	0x20000028
 800c35c:	00000000 	.word	0x00000000

0800c360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c360:	4b07      	ldr	r3, [pc, #28]	; (800c380 <pxCurrentTCBConst2>)
 800c362:	6819      	ldr	r1, [r3, #0]
 800c364:	6808      	ldr	r0, [r1, #0]
 800c366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36a:	f380 8809 	msr	PSP, r0
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f04f 0000 	mov.w	r0, #0
 800c376:	f380 8811 	msr	BASEPRI, r0
 800c37a:	4770      	bx	lr
 800c37c:	f3af 8000 	nop.w

0800c380 <pxCurrentTCBConst2>:
 800c380:	20000d2c 	.word	0x20000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop

0800c388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c388:	4808      	ldr	r0, [pc, #32]	; (800c3ac <prvPortStartFirstTask+0x24>)
 800c38a:	6800      	ldr	r0, [r0, #0]
 800c38c:	6800      	ldr	r0, [r0, #0]
 800c38e:	f380 8808 	msr	MSP, r0
 800c392:	f04f 0000 	mov.w	r0, #0
 800c396:	f380 8814 	msr	CONTROL, r0
 800c39a:	b662      	cpsie	i
 800c39c:	b661      	cpsie	f
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	df00      	svc	0
 800c3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3aa:	bf00      	nop
 800c3ac:	e000ed08 	.word	0xe000ed08

0800c3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3b6:	4b37      	ldr	r3, [pc, #220]	; (800c494 <xPortStartScheduler+0xe4>)
 800c3b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	22ff      	movs	r2, #255	; 0xff
 800c3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	4b2f      	ldr	r3, [pc, #188]	; (800c498 <xPortStartScheduler+0xe8>)
 800c3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3de:	4b2f      	ldr	r3, [pc, #188]	; (800c49c <xPortStartScheduler+0xec>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3e4:	e009      	b.n	800c3fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c3e6:	4b2d      	ldr	r3, [pc, #180]	; (800c49c <xPortStartScheduler+0xec>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	4a2b      	ldr	r2, [pc, #172]	; (800c49c <xPortStartScheduler+0xec>)
 800c3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3fa:	78fb      	ldrb	r3, [r7, #3]
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c402:	2b80      	cmp	r3, #128	; 0x80
 800c404:	d0ef      	beq.n	800c3e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c406:	4b25      	ldr	r3, [pc, #148]	; (800c49c <xPortStartScheduler+0xec>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f1c3 0307 	rsb	r3, r3, #7
 800c40e:	2b04      	cmp	r3, #4
 800c410:	d00c      	beq.n	800c42c <xPortStartScheduler+0x7c>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	b672      	cpsid	i
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	b662      	cpsie	i
 800c426:	60bb      	str	r3, [r7, #8]
}
 800c428:	bf00      	nop
 800c42a:	e7fe      	b.n	800c42a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c42c:	4b1b      	ldr	r3, [pc, #108]	; (800c49c <xPortStartScheduler+0xec>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	021b      	lsls	r3, r3, #8
 800c432:	4a1a      	ldr	r2, [pc, #104]	; (800c49c <xPortStartScheduler+0xec>)
 800c434:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c436:	4b19      	ldr	r3, [pc, #100]	; (800c49c <xPortStartScheduler+0xec>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c43e:	4a17      	ldr	r2, [pc, #92]	; (800c49c <xPortStartScheduler+0xec>)
 800c440:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	b2da      	uxtb	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c44a:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <xPortStartScheduler+0xf0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a14      	ldr	r2, [pc, #80]	; (800c4a0 <xPortStartScheduler+0xf0>)
 800c450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c454:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c456:	4b12      	ldr	r3, [pc, #72]	; (800c4a0 <xPortStartScheduler+0xf0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a11      	ldr	r2, [pc, #68]	; (800c4a0 <xPortStartScheduler+0xf0>)
 800c45c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c460:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c462:	f000 f8dd 	bl	800c620 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c466:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <xPortStartScheduler+0xf4>)
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c46c:	f000 f8fc 	bl	800c668 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c470:	4b0d      	ldr	r3, [pc, #52]	; (800c4a8 <xPortStartScheduler+0xf8>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a0c      	ldr	r2, [pc, #48]	; (800c4a8 <xPortStartScheduler+0xf8>)
 800c476:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c47a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c47c:	f7ff ff84 	bl	800c388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c480:	f7ff fa80 	bl	800b984 <vTaskSwitchContext>
	prvTaskExitError();
 800c484:	f7ff ff3a 	bl	800c2fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	e000e400 	.word	0xe000e400
 800c498:	20000e58 	.word	0x20000e58
 800c49c:	20000e5c 	.word	0x20000e5c
 800c4a0:	e000ed20 	.word	0xe000ed20
 800c4a4:	20000028 	.word	0x20000028
 800c4a8:	e000ef34 	.word	0xe000ef34

0800c4ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	b672      	cpsid	i
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	b662      	cpsie	i
 800c4c6:	607b      	str	r3, [r7, #4]
}
 800c4c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4ca:	4b10      	ldr	r3, [pc, #64]	; (800c50c <vPortEnterCritical+0x60>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	4a0e      	ldr	r2, [pc, #56]	; (800c50c <vPortEnterCritical+0x60>)
 800c4d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <vPortEnterCritical+0x60>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d111      	bne.n	800c500 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4dc:	4b0c      	ldr	r3, [pc, #48]	; (800c510 <vPortEnterCritical+0x64>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00c      	beq.n	800c500 <vPortEnterCritical+0x54>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	b672      	cpsid	i
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	b662      	cpsie	i
 800c4fa:	603b      	str	r3, [r7, #0]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <vPortEnterCritical+0x52>
	}
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	20000028 	.word	0x20000028
 800c510:	e000ed04 	.word	0xe000ed04

0800c514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c51a:	4b13      	ldr	r3, [pc, #76]	; (800c568 <vPortExitCritical+0x54>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10c      	bne.n	800c53c <vPortExitCritical+0x28>
	__asm volatile
 800c522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c526:	b672      	cpsid	i
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	b662      	cpsie	i
 800c536:	607b      	str	r3, [r7, #4]
}
 800c538:	bf00      	nop
 800c53a:	e7fe      	b.n	800c53a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c53c:	4b0a      	ldr	r3, [pc, #40]	; (800c568 <vPortExitCritical+0x54>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3b01      	subs	r3, #1
 800c542:	4a09      	ldr	r2, [pc, #36]	; (800c568 <vPortExitCritical+0x54>)
 800c544:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c546:	4b08      	ldr	r3, [pc, #32]	; (800c568 <vPortExitCritical+0x54>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d105      	bne.n	800c55a <vPortExitCritical+0x46>
 800c54e:	2300      	movs	r3, #0
 800c550:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	f383 8811 	msr	BASEPRI, r3
}
 800c558:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c55a:	bf00      	nop
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	20000028 	.word	0x20000028
 800c56c:	00000000 	.word	0x00000000

0800c570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c570:	f3ef 8009 	mrs	r0, PSP
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	4b15      	ldr	r3, [pc, #84]	; (800c5d0 <pxCurrentTCBConst>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	f01e 0f10 	tst.w	lr, #16
 800c580:	bf08      	it	eq
 800c582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58a:	6010      	str	r0, [r2, #0]
 800c58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c594:	b672      	cpsid	i
 800c596:	f380 8811 	msr	BASEPRI, r0
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	b662      	cpsie	i
 800c5a4:	f7ff f9ee 	bl	800b984 <vTaskSwitchContext>
 800c5a8:	f04f 0000 	mov.w	r0, #0
 800c5ac:	f380 8811 	msr	BASEPRI, r0
 800c5b0:	bc09      	pop	{r0, r3}
 800c5b2:	6819      	ldr	r1, [r3, #0]
 800c5b4:	6808      	ldr	r0, [r1, #0]
 800c5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ba:	f01e 0f10 	tst.w	lr, #16
 800c5be:	bf08      	it	eq
 800c5c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5c4:	f380 8809 	msr	PSP, r0
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop

0800c5d0 <pxCurrentTCBConst>:
 800c5d0:	20000d2c 	.word	0x20000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop

0800c5d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	b672      	cpsid	i
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	b662      	cpsie	i
 800c5f2:	607b      	str	r3, [r7, #4]
}
 800c5f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5f6:	f7ff f90b 	bl	800b810 <xTaskIncrementTick>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d003      	beq.n	800c608 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c600:	4b06      	ldr	r3, [pc, #24]	; (800c61c <SysTick_Handler+0x44>)
 800c602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c606:	601a      	str	r2, [r3, #0]
 800c608:	2300      	movs	r3, #0
 800c60a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	f383 8811 	msr	BASEPRI, r3
}
 800c612:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c620:	b480      	push	{r7}
 800c622:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c624:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <vPortSetupTimerInterrupt+0x34>)
 800c626:	2200      	movs	r2, #0
 800c628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c62a:	4b0b      	ldr	r3, [pc, #44]	; (800c658 <vPortSetupTimerInterrupt+0x38>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c630:	4b0a      	ldr	r3, [pc, #40]	; (800c65c <vPortSetupTimerInterrupt+0x3c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a0a      	ldr	r2, [pc, #40]	; (800c660 <vPortSetupTimerInterrupt+0x40>)
 800c636:	fba2 2303 	umull	r2, r3, r2, r3
 800c63a:	099b      	lsrs	r3, r3, #6
 800c63c:	4a09      	ldr	r2, [pc, #36]	; (800c664 <vPortSetupTimerInterrupt+0x44>)
 800c63e:	3b01      	subs	r3, #1
 800c640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c642:	4b04      	ldr	r3, [pc, #16]	; (800c654 <vPortSetupTimerInterrupt+0x34>)
 800c644:	2207      	movs	r2, #7
 800c646:	601a      	str	r2, [r3, #0]
}
 800c648:	bf00      	nop
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	e000e010 	.word	0xe000e010
 800c658:	e000e018 	.word	0xe000e018
 800c65c:	2000001c 	.word	0x2000001c
 800c660:	10624dd3 	.word	0x10624dd3
 800c664:	e000e014 	.word	0xe000e014

0800c668 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c668:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c678 <vPortEnableVFP+0x10>
 800c66c:	6801      	ldr	r1, [r0, #0]
 800c66e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c672:	6001      	str	r1, [r0, #0]
 800c674:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c676:	bf00      	nop
 800c678:	e000ed88 	.word	0xe000ed88

0800c67c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c682:	f3ef 8305 	mrs	r3, IPSR
 800c686:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b0f      	cmp	r3, #15
 800c68c:	d916      	bls.n	800c6bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c68e:	4a19      	ldr	r2, [pc, #100]	; (800c6f4 <vPortValidateInterruptPriority+0x78>)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4413      	add	r3, r2
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c698:	4b17      	ldr	r3, [pc, #92]	; (800c6f8 <vPortValidateInterruptPriority+0x7c>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	7afa      	ldrb	r2, [r7, #11]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d20c      	bcs.n	800c6bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	b672      	cpsid	i
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	b662      	cpsie	i
 800c6b6:	607b      	str	r3, [r7, #4]
}
 800c6b8:	bf00      	nop
 800c6ba:	e7fe      	b.n	800c6ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <vPortValidateInterruptPriority+0x80>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c6c4:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <vPortValidateInterruptPriority+0x84>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d90c      	bls.n	800c6e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d0:	b672      	cpsid	i
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	b662      	cpsie	i
 800c6e0:	603b      	str	r3, [r7, #0]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <vPortValidateInterruptPriority+0x68>
	}
 800c6e6:	bf00      	nop
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	e000e3f0 	.word	0xe000e3f0
 800c6f8:	20000e58 	.word	0x20000e58
 800c6fc:	e000ed0c 	.word	0xe000ed0c
 800c700:	20000e5c 	.word	0x20000e5c

0800c704 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	; 0x28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c710:	f7fe ffb0 	bl	800b674 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c714:	4b5b      	ldr	r3, [pc, #364]	; (800c884 <pvPortMalloc+0x180>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c71c:	f000 f91a 	bl	800c954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c720:	4b59      	ldr	r3, [pc, #356]	; (800c888 <pvPortMalloc+0x184>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4013      	ands	r3, r2
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f040 8092 	bne.w	800c852 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01f      	beq.n	800c774 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c734:	2208      	movs	r2, #8
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4413      	add	r3, r2
 800c73a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	2b00      	cmp	r3, #0
 800c744:	d016      	beq.n	800c774 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f023 0307 	bic.w	r3, r3, #7
 800c74c:	3308      	adds	r3, #8
 800c74e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00c      	beq.n	800c774 <pvPortMalloc+0x70>
	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c75e:	b672      	cpsid	i
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	b662      	cpsie	i
 800c76e:	617b      	str	r3, [r7, #20]
}
 800c770:	bf00      	nop
 800c772:	e7fe      	b.n	800c772 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d06b      	beq.n	800c852 <pvPortMalloc+0x14e>
 800c77a:	4b44      	ldr	r3, [pc, #272]	; (800c88c <pvPortMalloc+0x188>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	429a      	cmp	r2, r3
 800c782:	d866      	bhi.n	800c852 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c784:	4b42      	ldr	r3, [pc, #264]	; (800c890 <pvPortMalloc+0x18c>)
 800c786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c788:	4b41      	ldr	r3, [pc, #260]	; (800c890 <pvPortMalloc+0x18c>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c78e:	e004      	b.n	800c79a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d903      	bls.n	800c7ac <pvPortMalloc+0xa8>
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1f1      	bne.n	800c790 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7ac:	4b35      	ldr	r3, [pc, #212]	; (800c884 <pvPortMalloc+0x180>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d04d      	beq.n	800c852 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7b6:	6a3b      	ldr	r3, [r7, #32]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2208      	movs	r2, #8
 800c7bc:	4413      	add	r3, r2
 800c7be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	1ad2      	subs	r2, r2, r3
 800c7d0:	2308      	movs	r3, #8
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d921      	bls.n	800c81c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4413      	add	r3, r2
 800c7de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e0:	69bb      	ldr	r3, [r7, #24]
 800c7e2:	f003 0307 	and.w	r3, r3, #7
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00c      	beq.n	800c804 <pvPortMalloc+0x100>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	b672      	cpsid	i
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	b662      	cpsie	i
 800c7fe:	613b      	str	r3, [r7, #16]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	1ad2      	subs	r2, r2, r3
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c816:	69b8      	ldr	r0, [r7, #24]
 800c818:	f000 f8fe 	bl	800ca18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c81c:	4b1b      	ldr	r3, [pc, #108]	; (800c88c <pvPortMalloc+0x188>)
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	4a19      	ldr	r2, [pc, #100]	; (800c88c <pvPortMalloc+0x188>)
 800c828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c82a:	4b18      	ldr	r3, [pc, #96]	; (800c88c <pvPortMalloc+0x188>)
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	4b19      	ldr	r3, [pc, #100]	; (800c894 <pvPortMalloc+0x190>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d203      	bcs.n	800c83e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c836:	4b15      	ldr	r3, [pc, #84]	; (800c88c <pvPortMalloc+0x188>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a16      	ldr	r2, [pc, #88]	; (800c894 <pvPortMalloc+0x190>)
 800c83c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	4b11      	ldr	r3, [pc, #68]	; (800c888 <pvPortMalloc+0x184>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	431a      	orrs	r2, r3
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c852:	f7fe ff1d 	bl	800b690 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00c      	beq.n	800c87a <pvPortMalloc+0x176>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	b672      	cpsid	i
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	b662      	cpsie	i
 800c874:	60fb      	str	r3, [r7, #12]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <pvPortMalloc+0x174>
	return pvReturn;
 800c87a:	69fb      	ldr	r3, [r7, #28]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3728      	adds	r7, #40	; 0x28
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20004a68 	.word	0x20004a68
 800c888:	20004a74 	.word	0x20004a74
 800c88c:	20004a6c 	.word	0x20004a6c
 800c890:	20004a60 	.word	0x20004a60
 800c894:	20004a70 	.word	0x20004a70

0800c898 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d04c      	beq.n	800c944 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8aa:	2308      	movs	r3, #8
 800c8ac:	425b      	negs	r3, r3
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	4b23      	ldr	r3, [pc, #140]	; (800c94c <vPortFree+0xb4>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d10c      	bne.n	800c8e0 <vPortFree+0x48>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ca:	b672      	cpsid	i
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	b662      	cpsie	i
 800c8da:	60fb      	str	r3, [r7, #12]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00c      	beq.n	800c902 <vPortFree+0x6a>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ec:	b672      	cpsid	i
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	b662      	cpsie	i
 800c8fc:	60bb      	str	r3, [r7, #8]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <vPortFree+0xb4>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4013      	ands	r3, r2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d019      	beq.n	800c944 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d115      	bne.n	800c944 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	4b0b      	ldr	r3, [pc, #44]	; (800c94c <vPortFree+0xb4>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	43db      	mvns	r3, r3
 800c922:	401a      	ands	r2, r3
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c928:	f7fe fea4 	bl	800b674 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <vPortFree+0xb8>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4413      	add	r3, r2
 800c936:	4a06      	ldr	r2, [pc, #24]	; (800c950 <vPortFree+0xb8>)
 800c938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c93a:	6938      	ldr	r0, [r7, #16]
 800c93c:	f000 f86c 	bl	800ca18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c940:	f7fe fea6 	bl	800b690 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c944:	bf00      	nop
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	20004a74 	.word	0x20004a74
 800c950:	20004a6c 	.word	0x20004a6c

0800c954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c95a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c95e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c960:	4b27      	ldr	r3, [pc, #156]	; (800ca00 <prvHeapInit+0xac>)
 800c962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00c      	beq.n	800c988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3307      	adds	r3, #7
 800c972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 0307 	bic.w	r3, r3, #7
 800c97a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	4a1f      	ldr	r2, [pc, #124]	; (800ca00 <prvHeapInit+0xac>)
 800c984:	4413      	add	r3, r2
 800c986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c98c:	4a1d      	ldr	r2, [pc, #116]	; (800ca04 <prvHeapInit+0xb0>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c992:	4b1c      	ldr	r3, [pc, #112]	; (800ca04 <prvHeapInit+0xb0>)
 800c994:	2200      	movs	r2, #0
 800c996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9a0:	2208      	movs	r2, #8
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0307 	bic.w	r3, r3, #7
 800c9ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <prvHeapInit+0xb4>)
 800c9b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9b6:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <prvHeapInit+0xb4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9be:	4b12      	ldr	r3, [pc, #72]	; (800ca08 <prvHeapInit+0xb4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	1ad2      	subs	r2, r2, r3
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <prvHeapInit+0xb4>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ca0c <prvHeapInit+0xb8>)
 800c9e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a09      	ldr	r2, [pc, #36]	; (800ca10 <prvHeapInit+0xbc>)
 800c9ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9ec:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <prvHeapInit+0xc0>)
 800c9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c9f2:	601a      	str	r2, [r3, #0]
}
 800c9f4:	bf00      	nop
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000e60 	.word	0x20000e60
 800ca04:	20004a60 	.word	0x20004a60
 800ca08:	20004a68 	.word	0x20004a68
 800ca0c:	20004a70 	.word	0x20004a70
 800ca10:	20004a6c 	.word	0x20004a6c
 800ca14:	20004a74 	.word	0x20004a74

0800ca18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca20:	4b28      	ldr	r3, [pc, #160]	; (800cac4 <prvInsertBlockIntoFreeList+0xac>)
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	e002      	b.n	800ca2c <prvInsertBlockIntoFreeList+0x14>
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	60fb      	str	r3, [r7, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d8f7      	bhi.n	800ca26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	4413      	add	r3, r2
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d108      	bne.n	800ca5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	441a      	add	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	441a      	add	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d118      	bne.n	800caa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d00d      	beq.n	800ca96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	441a      	add	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	e008      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca96:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	e003      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d002      	beq.n	800cab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cab6:	bf00      	nop
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20004a60 	.word	0x20004a60
 800cac8:	20004a68 	.word	0x20004a68

0800cacc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	330c      	adds	r3, #12
 800cadc:	461a      	mov	r2, r3
 800cade:	6839      	ldr	r1, [r7, #0]
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 ffa3 	bl	800ea2c <tcpip_send_msg_wait_sem>
 800cae6:	4603      	mov	r3, r0
 800cae8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800caea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d103      	bne.n	800cafa <netconn_apimsg+0x2e>
    return apimsg->err;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800caf8:	e001      	b.n	800cafe <netconn_apimsg+0x32>
  }
  return err;
 800cafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08c      	sub	sp, #48	; 0x30
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	603a      	str	r2, [r7, #0]
 800cb12:	71fb      	strb	r3, [r7, #7]
 800cb14:	460b      	mov	r3, r1
 800cb16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 feff 	bl	800d920 <netconn_alloc>
 800cb22:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800cb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d054      	beq.n	800cbd4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cb2a:	79bb      	ldrb	r3, [r7, #6]
 800cb2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cb32:	f107 0308 	add.w	r3, r7, #8
 800cb36:	4619      	mov	r1, r3
 800cb38:	4829      	ldr	r0, [pc, #164]	; (800cbe0 <netconn_new_with_proto_and_callback+0xd8>)
 800cb3a:	f7ff ffc7 	bl	800cacc <netconn_apimsg>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800cb44:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d043      	beq.n	800cbd4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <netconn_new_with_proto_and_callback+0x58>
 800cb54:	4b23      	ldr	r3, [pc, #140]	; (800cbe4 <netconn_new_with_proto_and_callback+0xdc>)
 800cb56:	22a3      	movs	r2, #163	; 0xa3
 800cb58:	4923      	ldr	r1, [pc, #140]	; (800cbe8 <netconn_new_with_proto_and_callback+0xe0>)
 800cb5a:	4824      	ldr	r0, [pc, #144]	; (800cbec <netconn_new_with_proto_and_callback+0xe4>)
 800cb5c:	f00e fec6 	bl	801b8ec <printf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800cb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb62:	3310      	adds	r3, #16
 800cb64:	4618      	mov	r0, r3
 800cb66:	f00e f9ae 	bl	801aec6 <sys_mbox_valid>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d105      	bne.n	800cb7c <netconn_new_with_proto_and_callback+0x74>
 800cb70:	4b1c      	ldr	r3, [pc, #112]	; (800cbe4 <netconn_new_with_proto_and_callback+0xdc>)
 800cb72:	22a4      	movs	r2, #164	; 0xa4
 800cb74:	491e      	ldr	r1, [pc, #120]	; (800cbf0 <netconn_new_with_proto_and_callback+0xe8>)
 800cb76:	481d      	ldr	r0, [pc, #116]	; (800cbec <netconn_new_with_proto_and_callback+0xe4>)
 800cb78:	f00e feb8 	bl	801b8ec <printf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	3314      	adds	r3, #20
 800cb80:	4618      	mov	r0, r3
 800cb82:	f00e f9a0 	bl	801aec6 <sys_mbox_valid>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d005      	beq.n	800cb98 <netconn_new_with_proto_and_callback+0x90>
 800cb8c:	4b15      	ldr	r3, [pc, #84]	; (800cbe4 <netconn_new_with_proto_and_callback+0xdc>)
 800cb8e:	22a6      	movs	r2, #166	; 0xa6
 800cb90:	4918      	ldr	r1, [pc, #96]	; (800cbf4 <netconn_new_with_proto_and_callback+0xec>)
 800cb92:	4816      	ldr	r0, [pc, #88]	; (800cbec <netconn_new_with_proto_and_callback+0xe4>)
 800cb94:	f00e feaa 	bl	801b8ec <printf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	330c      	adds	r3, #12
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f00e fa23 	bl	801afe8 <sys_sem_valid>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d105      	bne.n	800cbb4 <netconn_new_with_proto_and_callback+0xac>
 800cba8:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <netconn_new_with_proto_and_callback+0xdc>)
 800cbaa:	22a9      	movs	r2, #169	; 0xa9
 800cbac:	4912      	ldr	r1, [pc, #72]	; (800cbf8 <netconn_new_with_proto_and_callback+0xf0>)
 800cbae:	480f      	ldr	r0, [pc, #60]	; (800cbec <netconn_new_with_proto_and_callback+0xe4>)
 800cbb0:	f00e fe9c 	bl	801b8ec <printf>
      sys_sem_free(&conn->op_completed);
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	330c      	adds	r3, #12
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f00e fa08 	bl	801afce <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	3310      	adds	r3, #16
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f00e f8f8 	bl	801adb8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cbc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbca:	2007      	movs	r0, #7
 800cbcc:	f003 fcaa 	bl	8010524 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	e000      	b.n	800cbd6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3730      	adds	r7, #48	; 0x30
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	0800d8f5 	.word	0x0800d8f5
 800cbe4:	080248d8 	.word	0x080248d8
 800cbe8:	0802490c 	.word	0x0802490c
 800cbec:	08024930 	.word	0x08024930
 800cbf0:	08024958 	.word	0x08024958
 800cbf4:	08024970 	.word	0x08024970
 800cbf8:	08024994 	.word	0x08024994

0800cbfc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08c      	sub	sp, #48	; 0x30
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d101      	bne.n	800cc0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e014      	b.n	800cc38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cc12:	2329      	movs	r3, #41	; 0x29
 800cc14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800cc16:	f107 030c 	add.w	r3, r7, #12
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	4808      	ldr	r0, [pc, #32]	; (800cc40 <netconn_prepare_delete+0x44>)
 800cc1e:	f7ff ff55 	bl	800cacc <netconn_apimsg>
 800cc22:	4603      	mov	r3, r0
 800cc24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800cc28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <netconn_prepare_delete+0x3a>
    return err;
 800cc30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cc34:	e000      	b.n	800cc38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3730      	adds	r7, #48	; 0x30
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	0800de59 	.word	0x0800de59

0800cc44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <netconn_delete+0x12>
    return ERR_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	e00d      	b.n	800cc72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff ffd0 	bl	800cbfc <netconn_prepare_delete>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800cc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d102      	bne.n	800cc6e <netconn_delete+0x2a>
    netconn_free(conn);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fec7 	bl	800d9fc <netconn_free>
  }
  return err;
 800cc6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b08e      	sub	sp, #56	; 0x38
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	4613      	mov	r3, r2
 800cc88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d109      	bne.n	800cca4 <netconn_bind+0x28>
 800cc90:	4b11      	ldr	r3, [pc, #68]	; (800ccd8 <netconn_bind+0x5c>)
 800cc92:	f44f 729c 	mov.w	r2, #312	; 0x138
 800cc96:	4911      	ldr	r1, [pc, #68]	; (800ccdc <netconn_bind+0x60>)
 800cc98:	4811      	ldr	r0, [pc, #68]	; (800cce0 <netconn_bind+0x64>)
 800cc9a:	f00e fe27 	bl	801b8ec <printf>
 800cc9e:	f06f 030f 	mvn.w	r3, #15
 800cca2:	e015      	b.n	800ccd0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ccaa:	4b0e      	ldr	r3, [pc, #56]	; (800cce4 <netconn_bind+0x68>)
 800ccac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ccb6:	88fb      	ldrh	r3, [r7, #6]
 800ccb8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ccba:	f107 0314 	add.w	r3, r7, #20
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	4809      	ldr	r0, [pc, #36]	; (800cce8 <netconn_bind+0x6c>)
 800ccc2:	f7ff ff03 	bl	800cacc <netconn_apimsg>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800cccc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3738      	adds	r7, #56	; 0x38
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	080248d8 	.word	0x080248d8
 800ccdc:	08024a10 	.word	0x08024a10
 800cce0:	08024930 	.word	0x08024930
 800cce4:	08029f14 	.word	0x08029f14
 800cce8:	0800e021 	.word	0x0800e021

0800ccec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d109      	bne.n	800cd18 <netconn_recv_data+0x2c>
 800cd04:	4b58      	ldr	r3, [pc, #352]	; (800ce68 <netconn_recv_data+0x17c>)
 800cd06:	f44f 7212 	mov.w	r2, #584	; 0x248
 800cd0a:	4958      	ldr	r1, [pc, #352]	; (800ce6c <netconn_recv_data+0x180>)
 800cd0c:	4858      	ldr	r0, [pc, #352]	; (800ce70 <netconn_recv_data+0x184>)
 800cd0e:	f00e fded 	bl	801b8ec <printf>
 800cd12:	f06f 030f 	mvn.w	r3, #15
 800cd16:	e0a2      	b.n	800ce5e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d109      	bne.n	800cd38 <netconn_recv_data+0x4c>
 800cd24:	4b50      	ldr	r3, [pc, #320]	; (800ce68 <netconn_recv_data+0x17c>)
 800cd26:	f240 224a 	movw	r2, #586	; 0x24a
 800cd2a:	4952      	ldr	r1, [pc, #328]	; (800ce74 <netconn_recv_data+0x188>)
 800cd2c:	4850      	ldr	r0, [pc, #320]	; (800ce70 <netconn_recv_data+0x184>)
 800cd2e:	f00e fddd 	bl	801b8ec <printf>
 800cd32:	f06f 030f 	mvn.w	r3, #15
 800cd36:	e092      	b.n	800ce5e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	3310      	adds	r3, #16
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f00e f8c2 	bl	801aec6 <sys_mbox_valid>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10e      	bne.n	800cd66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 fa23 	bl	800d194 <netconn_err>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800cd52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d002      	beq.n	800cd60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800cd5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cd5e:	e07e      	b.n	800ce5e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800cd60:	f06f 030a 	mvn.w	r3, #10
 800cd64:	e07b      	b.n	800ce5e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	7f1b      	ldrb	r3, [r3, #28]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10f      	bne.n	800cd92 <netconn_recv_data+0xa6>
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10a      	bne.n	800cd92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	7f1b      	ldrb	r3, [r3, #28]
 800cd80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d104      	bne.n	800cd92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d023      	beq.n	800cdda <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3310      	adds	r3, #16
 800cd96:	f107 0218 	add.w	r2, r7, #24
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f00e f876 	bl	801ae8e <sys_arch_mbox_tryfetch>
 800cda2:	4603      	mov	r3, r0
 800cda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda8:	d11f      	bne.n	800cdea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 f9f2 	bl	800d194 <netconn_err>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800cdb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800cdbc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cdc0:	e04d      	b.n	800ce5e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	7f1b      	ldrb	r3, [r3, #28]
 800cdc6:	f003 0301 	and.w	r3, r3, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d002      	beq.n	800cdd4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800cdce:	f06f 030a 	mvn.w	r3, #10
 800cdd2:	e044      	b.n	800ce5e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800cdd4:	f06f 0306 	mvn.w	r3, #6
 800cdd8:	e041      	b.n	800ce5e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3310      	adds	r3, #16
 800cdde:	f107 0118 	add.w	r1, r7, #24
 800cde2:	2200      	movs	r2, #0
 800cde4:	4618      	mov	r0, r3
 800cde6:	f00e f813 	bl	801ae10 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdf2:	2b10      	cmp	r3, #16
 800cdf4:	d117      	bne.n	800ce26 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	f107 0217 	add.w	r2, r7, #23
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 fa1a 	bl	800d238 <lwip_netconn_is_err_msg>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d009      	beq.n	800ce1e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ce0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce0e:	f113 0f0f 	cmn.w	r3, #15
 800ce12:	d101      	bne.n	800ce18 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	e022      	b.n	800ce5e <netconn_recv_data+0x172>
      }
      return err;
 800ce18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce1c:	e01f      	b.n	800ce5e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	891b      	ldrh	r3, [r3, #8]
 800ce22:	83fb      	strh	r3, [r7, #30]
 800ce24:	e00d      	b.n	800ce42 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <netconn_recv_data+0x14e>
 800ce2c:	4b0e      	ldr	r3, [pc, #56]	; (800ce68 <netconn_recv_data+0x17c>)
 800ce2e:	f240 2291 	movw	r2, #657	; 0x291
 800ce32:	4911      	ldr	r1, [pc, #68]	; (800ce78 <netconn_recv_data+0x18c>)
 800ce34:	480e      	ldr	r0, [pc, #56]	; (800ce70 <netconn_recv_data+0x184>)
 800ce36:	f00e fd59 	bl	801b8ec <printf>
    len = netbuf_len((struct netbuf *)buf);
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	891b      	ldrh	r3, [r3, #8]
 800ce40:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d005      	beq.n	800ce56 <netconn_recv_data+0x16a>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4e:	8bfa      	ldrh	r2, [r7, #30]
 800ce50:	2101      	movs	r1, #1
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3720      	adds	r7, #32
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	080248d8 	.word	0x080248d8
 800ce6c:	08024af0 	.word	0x08024af0
 800ce70:	08024930 	.word	0x08024930
 800ce74:	08024b10 	.word	0x08024b10
 800ce78:	08024b2c 	.word	0x08024b2c

0800ce7c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <netconn_tcp_recvd_msg+0x1e>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce96:	2b10      	cmp	r3, #16
 800ce98:	d009      	beq.n	800ceae <netconn_tcp_recvd_msg+0x32>
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <netconn_tcp_recvd_msg+0x50>)
 800ce9c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800cea0:	490b      	ldr	r1, [pc, #44]	; (800ced0 <netconn_tcp_recvd_msg+0x54>)
 800cea2:	480c      	ldr	r0, [pc, #48]	; (800ced4 <netconn_tcp_recvd_msg+0x58>)
 800cea4:	f00e fd22 	bl	801b8ec <printf>
 800cea8:	f06f 030f 	mvn.w	r3, #15
 800ceac:	e00a      	b.n	800cec4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	4806      	ldr	r0, [pc, #24]	; (800ced8 <netconn_tcp_recvd_msg+0x5c>)
 800cebe:	f7ff fe05 	bl	800cacc <netconn_apimsg>
 800cec2:	4603      	mov	r3, r0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	080248d8 	.word	0x080248d8
 800ced0:	08024b38 	.word	0x08024b38
 800ced4:	08024930 	.word	0x08024930
 800ced8:	0800e12f 	.word	0x0800e12f

0800cedc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b090      	sub	sp, #64	; 0x40
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3310      	adds	r3, #16
 800ceee:	4618      	mov	r0, r3
 800cef0:	f00d ffe9 	bl	801aec6 <sys_mbox_valid>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d102      	bne.n	800cf00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800cefa:	f06f 030a 	mvn.w	r3, #10
 800cefe:	e06d      	b.n	800cfdc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	7f1b      	ldrb	r3, [r3, #28]
 800cf04:	b25b      	sxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	da07      	bge.n	800cf1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	7f1b      	ldrb	r3, [r3, #28]
 800cf0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800cf18:	e039      	b.n	800cf8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f7ff fee3 	bl	800ccec <netconn_recv_data>
 800cf26:	4603      	mov	r3, r0
 800cf28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800cf2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800cf34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cf38:	e050      	b.n	800cfdc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	f003 0308 	and.w	r3, r3, #8
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10e      	bne.n	800cf68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d002      	beq.n	800cf56 <netconn_recv_data_tcp+0x7a>
 800cf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf52:	891b      	ldrh	r3, [r3, #8]
 800cf54:	e000      	b.n	800cf58 <netconn_recv_data_tcp+0x7c>
 800cf56:	2301      	movs	r3, #1
 800cf58:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800cf5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf5c:	f107 0214 	add.w	r2, r7, #20
 800cf60:	4619      	mov	r1, r3
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f7ff ff8a 	bl	800ce7c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d134      	bne.n	800cfd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	f003 0310 	and.w	r3, r3, #16
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d009      	beq.n	800cf8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	7f1b      	ldrb	r3, [r3, #28]
 800cf7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800cf86:	f06f 0306 	mvn.w	r3, #6
 800cf8a:	e027      	b.n	800cfdc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800cf8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d005      	beq.n	800cfa2 <netconn_recv_data_tcp+0xc6>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10f      	bne.n	800cfca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f000 f8f2 	bl	800d194 <netconn_err>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800cfb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d002      	beq.n	800cfc4 <netconn_recv_data_tcp+0xe8>
          return err;
 800cfbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cfc2:	e00b      	b.n	800cfdc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800cfc4:	f06f 030d 	mvn.w	r3, #13
 800cfc8:	e008      	b.n	800cfdc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800cfca:	2101      	movs	r1, #1
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 f8b1 	bl	800d134 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800cfd2:	f06f 030e 	mvn.w	r3, #14
 800cfd6:	e001      	b.n	800cfdc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800cfd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3740      	adds	r7, #64	; 0x40
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d109      	bne.n	800d00c <netconn_recv+0x28>
 800cff8:	4b32      	ldr	r3, [pc, #200]	; (800d0c4 <netconn_recv+0xe0>)
 800cffa:	f240 3263 	movw	r2, #867	; 0x363
 800cffe:	4932      	ldr	r1, [pc, #200]	; (800d0c8 <netconn_recv+0xe4>)
 800d000:	4832      	ldr	r0, [pc, #200]	; (800d0cc <netconn_recv+0xe8>)
 800d002:	f00e fc73 	bl	801b8ec <printf>
 800d006:	f06f 030f 	mvn.w	r3, #15
 800d00a:	e056      	b.n	800d0ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2200      	movs	r2, #0
 800d010:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d109      	bne.n	800d02c <netconn_recv+0x48>
 800d018:	4b2a      	ldr	r3, [pc, #168]	; (800d0c4 <netconn_recv+0xe0>)
 800d01a:	f240 3265 	movw	r2, #869	; 0x365
 800d01e:	492c      	ldr	r1, [pc, #176]	; (800d0d0 <netconn_recv+0xec>)
 800d020:	482a      	ldr	r0, [pc, #168]	; (800d0cc <netconn_recv+0xe8>)
 800d022:	f00e fc63 	bl	801b8ec <printf>
 800d026:	f06f 030f 	mvn.w	r3, #15
 800d02a:	e046      	b.n	800d0ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d034:	2b10      	cmp	r3, #16
 800d036:	d13a      	bne.n	800d0ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d03c:	2006      	movs	r0, #6
 800d03e:	f003 fa1f 	bl	8010480 <memp_malloc>
 800d042:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d102      	bne.n	800d050 <netconn_recv+0x6c>
      return ERR_MEM;
 800d04a:	f04f 33ff 	mov.w	r3, #4294967295
 800d04e:	e034      	b.n	800d0ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800d050:	f107 030c 	add.w	r3, r7, #12
 800d054:	2200      	movs	r2, #0
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff ff3f 	bl	800cedc <netconn_recv_data_tcp>
 800d05e:	4603      	mov	r3, r0
 800d060:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800d06a:	6979      	ldr	r1, [r7, #20]
 800d06c:	2006      	movs	r0, #6
 800d06e:	f003 fa59 	bl	8010524 <memp_free>
      return err;
 800d072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d076:	e020      	b.n	800d0ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d106      	bne.n	800d08c <netconn_recv+0xa8>
 800d07e:	4b11      	ldr	r3, [pc, #68]	; (800d0c4 <netconn_recv+0xe0>)
 800d080:	f240 3279 	movw	r2, #889	; 0x379
 800d084:	4913      	ldr	r1, [pc, #76]	; (800d0d4 <netconn_recv+0xf0>)
 800d086:	4811      	ldr	r0, [pc, #68]	; (800d0cc <netconn_recv+0xe8>)
 800d088:	f00e fc30 	bl	801b8ec <printf>

    buf->p = p;
 800d08c:	68fa      	ldr	r2, [r7, #12]
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2200      	movs	r2, #0
 800d09c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e005      	b.n	800d0ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7ff fe1a 	bl	800ccec <netconn_recv_data>
 800d0b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	080248d8 	.word	0x080248d8
 800d0c8:	08024af0 	.word	0x08024af0
 800d0cc:	08024930 	.word	0x08024930
 800d0d0:	08024b10 	.word	0x08024b10
 800d0d4:	08024b88 	.word	0x08024b88

0800d0d8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08c      	sub	sp, #48	; 0x30
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d109      	bne.n	800d0fc <netconn_send+0x24>
 800d0e8:	4b0e      	ldr	r3, [pc, #56]	; (800d124 <netconn_send+0x4c>)
 800d0ea:	f240 32b2 	movw	r2, #946	; 0x3b2
 800d0ee:	490e      	ldr	r1, [pc, #56]	; (800d128 <netconn_send+0x50>)
 800d0f0:	480e      	ldr	r0, [pc, #56]	; (800d12c <netconn_send+0x54>)
 800d0f2:	f00e fbfb 	bl	801b8ec <printf>
 800d0f6:	f06f 030f 	mvn.w	r3, #15
 800d0fa:	e00e      	b.n	800d11a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800d104:	f107 030c 	add.w	r3, r7, #12
 800d108:	4619      	mov	r1, r3
 800d10a:	4809      	ldr	r0, [pc, #36]	; (800d130 <netconn_send+0x58>)
 800d10c:	f7ff fcde 	bl	800cacc <netconn_apimsg>
 800d110:	4603      	mov	r3, r0
 800d112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d116:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3730      	adds	r7, #48	; 0x30
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	080248d8 	.word	0x080248d8
 800d128:	08024b94 	.word	0x08024b94
 800d12c:	08024930 	.word	0x08024930
 800d130:	0800e095 	.word	0x0800e095

0800d134 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08c      	sub	sp, #48	; 0x30
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	460b      	mov	r3, r1
 800d13e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d109      	bne.n	800d15a <netconn_close_shutdown+0x26>
 800d146:	4b0f      	ldr	r3, [pc, #60]	; (800d184 <netconn_close_shutdown+0x50>)
 800d148:	f240 4247 	movw	r2, #1095	; 0x447
 800d14c:	490e      	ldr	r1, [pc, #56]	; (800d188 <netconn_close_shutdown+0x54>)
 800d14e:	480f      	ldr	r0, [pc, #60]	; (800d18c <netconn_close_shutdown+0x58>)
 800d150:	f00e fbcc 	bl	801b8ec <printf>
 800d154:	f06f 030f 	mvn.w	r3, #15
 800d158:	e010      	b.n	800d17c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d15e:	78fb      	ldrb	r3, [r7, #3]
 800d160:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d162:	2329      	movs	r3, #41	; 0x29
 800d164:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d166:	f107 030c 	add.w	r3, r7, #12
 800d16a:	4619      	mov	r1, r3
 800d16c:	4808      	ldr	r0, [pc, #32]	; (800d190 <netconn_close_shutdown+0x5c>)
 800d16e:	f7ff fcad 	bl	800cacc <netconn_apimsg>
 800d172:	4603      	mov	r3, r0
 800d174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d178:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3730      	adds	r7, #48	; 0x30
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	080248d8 	.word	0x080248d8
 800d188:	08024c14 	.word	0x08024c14
 800d18c:	08024930 	.word	0x08024930
 800d190:	0800e531 	.word	0x0800e531

0800d194 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <netconn_err+0x12>
    return ERR_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e00d      	b.n	800d1c2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d1a6:	f00d ffa9 	bl	801b0fc <sys_arch_protect>
 800d1aa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7a1b      	ldrb	r3, [r3, #8]
 800d1b0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f00d ffad 	bl	801b118 <sys_arch_unprotect>
  return err;
 800d1be:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d1d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1da:	f113 0f0d 	cmn.w	r3, #13
 800d1de:	d009      	beq.n	800d1f4 <lwip_netconn_err_to_msg+0x28>
 800d1e0:	f113 0f0d 	cmn.w	r3, #13
 800d1e4:	dc0c      	bgt.n	800d200 <lwip_netconn_err_to_msg+0x34>
 800d1e6:	f113 0f0f 	cmn.w	r3, #15
 800d1ea:	d007      	beq.n	800d1fc <lwip_netconn_err_to_msg+0x30>
 800d1ec:	f113 0f0e 	cmn.w	r3, #14
 800d1f0:	d002      	beq.n	800d1f8 <lwip_netconn_err_to_msg+0x2c>
 800d1f2:	e005      	b.n	800d200 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <lwip_netconn_err_to_msg+0x54>)
 800d1f6:	e00e      	b.n	800d216 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d1f8:	4b0a      	ldr	r3, [pc, #40]	; (800d224 <lwip_netconn_err_to_msg+0x58>)
 800d1fa:	e00c      	b.n	800d216 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d1fc:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <lwip_netconn_err_to_msg+0x5c>)
 800d1fe:	e00a      	b.n	800d216 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d005      	beq.n	800d214 <lwip_netconn_err_to_msg+0x48>
 800d208:	4b08      	ldr	r3, [pc, #32]	; (800d22c <lwip_netconn_err_to_msg+0x60>)
 800d20a:	227d      	movs	r2, #125	; 0x7d
 800d20c:	4908      	ldr	r1, [pc, #32]	; (800d230 <lwip_netconn_err_to_msg+0x64>)
 800d20e:	4809      	ldr	r0, [pc, #36]	; (800d234 <lwip_netconn_err_to_msg+0x68>)
 800d210:	f00e fb6c 	bl	801b8ec <printf>
      return NULL;
 800d214:	2300      	movs	r3, #0
  }
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	08028104 	.word	0x08028104
 800d224:	08028105 	.word	0x08028105
 800d228:	08028106 	.word	0x08028106
 800d22c:	08024c30 	.word	0x08024c30
 800d230:	08024c64 	.word	0x08024c64
 800d234:	08024c74 	.word	0x08024c74

0800d238 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d105      	bne.n	800d254 <lwip_netconn_is_err_msg+0x1c>
 800d248:	4b12      	ldr	r3, [pc, #72]	; (800d294 <lwip_netconn_is_err_msg+0x5c>)
 800d24a:	2285      	movs	r2, #133	; 0x85
 800d24c:	4912      	ldr	r1, [pc, #72]	; (800d298 <lwip_netconn_is_err_msg+0x60>)
 800d24e:	4813      	ldr	r0, [pc, #76]	; (800d29c <lwip_netconn_is_err_msg+0x64>)
 800d250:	f00e fb4c 	bl	801b8ec <printf>

  if (msg == &netconn_aborted) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a12      	ldr	r2, [pc, #72]	; (800d2a0 <lwip_netconn_is_err_msg+0x68>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d104      	bne.n	800d266 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	22f3      	movs	r2, #243	; 0xf3
 800d260:	701a      	strb	r2, [r3, #0]
    return 1;
 800d262:	2301      	movs	r3, #1
 800d264:	e012      	b.n	800d28c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a0e      	ldr	r2, [pc, #56]	; (800d2a4 <lwip_netconn_is_err_msg+0x6c>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d104      	bne.n	800d278 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	22f2      	movs	r2, #242	; 0xf2
 800d272:	701a      	strb	r2, [r3, #0]
    return 1;
 800d274:	2301      	movs	r3, #1
 800d276:	e009      	b.n	800d28c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <lwip_netconn_is_err_msg+0x70>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d104      	bne.n	800d28a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	22f1      	movs	r2, #241	; 0xf1
 800d284:	701a      	strb	r2, [r3, #0]
    return 1;
 800d286:	2301      	movs	r3, #1
 800d288:	e000      	b.n	800d28c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	08024c30 	.word	0x08024c30
 800d298:	08024c9c 	.word	0x08024c9c
 800d29c:	08024c74 	.word	0x08024c74
 800d2a0:	08028104 	.word	0x08028104
 800d2a4:	08028105 	.word	0x08028105
 800d2a8:	08028106 	.word	0x08028106

0800d2ac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d105      	bne.n	800d2cc <recv_udp+0x20>
 800d2c0:	4b34      	ldr	r3, [pc, #208]	; (800d394 <recv_udp+0xe8>)
 800d2c2:	22e5      	movs	r2, #229	; 0xe5
 800d2c4:	4934      	ldr	r1, [pc, #208]	; (800d398 <recv_udp+0xec>)
 800d2c6:	4835      	ldr	r0, [pc, #212]	; (800d39c <recv_udp+0xf0>)
 800d2c8:	f00e fb10 	bl	801b8ec <printf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d105      	bne.n	800d2de <recv_udp+0x32>
 800d2d2:	4b30      	ldr	r3, [pc, #192]	; (800d394 <recv_udp+0xe8>)
 800d2d4:	22e6      	movs	r2, #230	; 0xe6
 800d2d6:	4932      	ldr	r1, [pc, #200]	; (800d3a0 <recv_udp+0xf4>)
 800d2d8:	4830      	ldr	r0, [pc, #192]	; (800d39c <recv_udp+0xf0>)
 800d2da:	f00e fb07 	bl	801b8ec <printf>
  conn = (struct netconn *)arg;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d103      	bne.n	800d2f0 <recv_udp+0x44>
    pbuf_free(p);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f003 ff99 	bl	8011220 <pbuf_free>
    return;
 800d2ee:	e04d      	b.n	800d38c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d005      	beq.n	800d306 <recv_udp+0x5a>
 800d2fa:	4b26      	ldr	r3, [pc, #152]	; (800d394 <recv_udp+0xe8>)
 800d2fc:	22ee      	movs	r2, #238	; 0xee
 800d2fe:	4929      	ldr	r1, [pc, #164]	; (800d3a4 <recv_udp+0xf8>)
 800d300:	4826      	ldr	r0, [pc, #152]	; (800d39c <recv_udp+0xf0>)
 800d302:	f00e faf3 	bl	801b8ec <printf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	3310      	adds	r3, #16
 800d30a:	4618      	mov	r0, r3
 800d30c:	f00d fddb 	bl	801aec6 <sys_mbox_valid>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d103      	bne.n	800d31e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f003 ff82 	bl	8011220 <pbuf_free>
    return;
 800d31c:	e036      	b.n	800d38c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d31e:	2006      	movs	r0, #6
 800d320:	f003 f8ae 	bl	8010480 <memp_malloc>
 800d324:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d103      	bne.n	800d334 <recv_udp+0x88>
    pbuf_free(p);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f003 ff77 	bl	8011220 <pbuf_free>
    return;
 800d332:	e02b      	b.n	800d38c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <recv_udp+0xa0>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	e000      	b.n	800d34e <recv_udp+0xa2>
 800d34c:	2300      	movs	r3, #0
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d356:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	891b      	ldrh	r3, [r3, #8]
 800d35c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	3310      	adds	r3, #16
 800d362:	69b9      	ldr	r1, [r7, #24]
 800d364:	4618      	mov	r0, r3
 800d366:	f00d fd39 	bl	801addc <sys_mbox_trypost>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d003      	beq.n	800d378 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d370:	69b8      	ldr	r0, [r7, #24]
 800d372:	f001 f969 	bl	800e648 <netbuf_delete>
    return;
 800d376:	e009      	b.n	800d38c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d005      	beq.n	800d38c <recv_udp+0xe0>
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d384:	8afa      	ldrh	r2, [r7, #22]
 800d386:	2100      	movs	r1, #0
 800d388:	69f8      	ldr	r0, [r7, #28]
 800d38a:	4798      	blx	r3
  }
}
 800d38c:	3720      	adds	r7, #32
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	08024c30 	.word	0x08024c30
 800d398:	08024ca8 	.word	0x08024ca8
 800d39c:	08024c74 	.word	0x08024c74
 800d3a0:	08024ccc 	.word	0x08024ccc
 800d3a4:	08024cec 	.word	0x08024cec

0800d3a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b088      	sub	sp, #32
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <recv_tcp+0x22>
 800d3bc:	4b36      	ldr	r3, [pc, #216]	; (800d498 <recv_tcp+0xf0>)
 800d3be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d3c2:	4936      	ldr	r1, [pc, #216]	; (800d49c <recv_tcp+0xf4>)
 800d3c4:	4836      	ldr	r0, [pc, #216]	; (800d4a0 <recv_tcp+0xf8>)
 800d3c6:	f00e fa91 	bl	801b8ec <printf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d106      	bne.n	800d3de <recv_tcp+0x36>
 800d3d0:	4b31      	ldr	r3, [pc, #196]	; (800d498 <recv_tcp+0xf0>)
 800d3d2:	f240 122d 	movw	r2, #301	; 0x12d
 800d3d6:	4933      	ldr	r1, [pc, #204]	; (800d4a4 <recv_tcp+0xfc>)
 800d3d8:	4831      	ldr	r0, [pc, #196]	; (800d4a0 <recv_tcp+0xf8>)
 800d3da:	f00e fa87 	bl	801b8ec <printf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d3de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d006      	beq.n	800d3f4 <recv_tcp+0x4c>
 800d3e6:	4b2c      	ldr	r3, [pc, #176]	; (800d498 <recv_tcp+0xf0>)
 800d3e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d3ec:	492e      	ldr	r1, [pc, #184]	; (800d4a8 <recv_tcp+0x100>)
 800d3ee:	482c      	ldr	r0, [pc, #176]	; (800d4a0 <recv_tcp+0xf8>)
 800d3f0:	f00e fa7c 	bl	801b8ec <printf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d102      	bne.n	800d404 <recv_tcp+0x5c>
    return ERR_VAL;
 800d3fe:	f06f 0305 	mvn.w	r3, #5
 800d402:	e045      	b.n	800d490 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d006      	beq.n	800d41c <recv_tcp+0x74>
 800d40e:	4b22      	ldr	r3, [pc, #136]	; (800d498 <recv_tcp+0xf0>)
 800d410:	f240 1235 	movw	r2, #309	; 0x135
 800d414:	4925      	ldr	r1, [pc, #148]	; (800d4ac <recv_tcp+0x104>)
 800d416:	4822      	ldr	r0, [pc, #136]	; (800d4a0 <recv_tcp+0xf8>)
 800d418:	f00e fa68 	bl	801b8ec <printf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	3310      	adds	r3, #16
 800d420:	4618      	mov	r0, r3
 800d422:	f00d fd50 	bl	801aec6 <sys_mbox_valid>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10d      	bne.n	800d448 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d008      	beq.n	800d444 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	891b      	ldrh	r3, [r3, #8]
 800d436:	4619      	mov	r1, r3
 800d438:	68b8      	ldr	r0, [r7, #8]
 800d43a:	f004 fecb 	bl	80121d4 <tcp_recved>
      pbuf_free(p);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f003 feee 	bl	8011220 <pbuf_free>
    }
    return ERR_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	e023      	b.n	800d490 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d005      	beq.n	800d45a <recv_tcp+0xb2>
    msg = p;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	891b      	ldrh	r3, [r3, #8]
 800d456:	83fb      	strh	r3, [r7, #30]
 800d458:	e003      	b.n	800d462 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d45a:	4b15      	ldr	r3, [pc, #84]	; (800d4b0 <recv_tcp+0x108>)
 800d45c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	3310      	adds	r3, #16
 800d466:	69b9      	ldr	r1, [r7, #24]
 800d468:	4618      	mov	r0, r3
 800d46a:	f00d fcb7 	bl	801addc <sys_mbox_trypost>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d474:	f04f 33ff 	mov.w	r3, #4294967295
 800d478:	e00a      	b.n	800d490 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d005      	beq.n	800d48e <recv_tcp+0xe6>
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d486:	8bfa      	ldrh	r2, [r7, #30]
 800d488:	2100      	movs	r1, #0
 800d48a:	6978      	ldr	r0, [r7, #20]
 800d48c:	4798      	blx	r3
  }

  return ERR_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	08024c30 	.word	0x08024c30
 800d49c:	08024d0c 	.word	0x08024d0c
 800d4a0:	08024c74 	.word	0x08024c74
 800d4a4:	08024d30 	.word	0x08024d30
 800d4a8:	08024d50 	.word	0x08024d50
 800d4ac:	08024d68 	.word	0x08024d68
 800d4b0:	08028106 	.word	0x08028106

0800d4b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d106      	bne.n	800d4d6 <poll_tcp+0x22>
 800d4c8:	4b29      	ldr	r3, [pc, #164]	; (800d570 <poll_tcp+0xbc>)
 800d4ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d4ce:	4929      	ldr	r1, [pc, #164]	; (800d574 <poll_tcp+0xc0>)
 800d4d0:	4829      	ldr	r0, [pc, #164]	; (800d578 <poll_tcp+0xc4>)
 800d4d2:	f00e fa0b 	bl	801b8ec <printf>

  if (conn->state == NETCONN_WRITE) {
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	785b      	ldrb	r3, [r3, #1]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d104      	bne.n	800d4e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d4de:	2101      	movs	r1, #1
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 fe59 	bl	800e198 <lwip_netconn_do_writemore>
 800d4e6:	e016      	b.n	800d516 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	785b      	ldrb	r3, [r3, #1]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d112      	bne.n	800d516 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00a      	beq.n	800d50e <poll_tcp+0x5a>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	6a1b      	ldr	r3, [r3, #32]
 800d4fc:	7a5b      	ldrb	r3, [r3, #9]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d005      	beq.n	800d50e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	7a5a      	ldrb	r2, [r3, #9]
 800d508:	3a01      	subs	r2, #1
 800d50a:	b2d2      	uxtb	r2, r2
 800d50c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d50e:	2101      	movs	r1, #1
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fb3b 	bl	800db8c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	7f1b      	ldrb	r3, [r3, #28]
 800d51a:	f003 0310 	and.w	r3, r3, #16
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d021      	beq.n	800d566 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d01d      	beq.n	800d566 <poll_tcp+0xb2>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d532:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d536:	d316      	bcc.n	800d566 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d540:	2b04      	cmp	r3, #4
 800d542:	d810      	bhi.n	800d566 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	7f1b      	ldrb	r3, [r3, #28]
 800d548:	f023 0310 	bic.w	r3, r3, #16
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d556:	2b00      	cmp	r3, #0
 800d558:	d005      	beq.n	800d566 <poll_tcp+0xb2>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55e:	2200      	movs	r2, #0
 800d560:	2102      	movs	r1, #2
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	08024c30 	.word	0x08024c30
 800d574:	08024d88 	.word	0x08024d88
 800d578:	08024c74 	.word	0x08024c74

0800d57c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	4613      	mov	r3, r2
 800d588:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d106      	bne.n	800d5a2 <sent_tcp+0x26>
 800d594:	4b20      	ldr	r3, [pc, #128]	; (800d618 <sent_tcp+0x9c>)
 800d596:	f240 1293 	movw	r2, #403	; 0x193
 800d59a:	4920      	ldr	r1, [pc, #128]	; (800d61c <sent_tcp+0xa0>)
 800d59c:	4820      	ldr	r0, [pc, #128]	; (800d620 <sent_tcp+0xa4>)
 800d59e:	f00e f9a5 	bl	801b8ec <printf>

  if (conn) {
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d032      	beq.n	800d60e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	785b      	ldrb	r3, [r3, #1]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d104      	bne.n	800d5ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	6978      	ldr	r0, [r7, #20]
 800d5b4:	f000 fdf0 	bl	800e198 <lwip_netconn_do_writemore>
 800d5b8:	e007      	b.n	800d5ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	d103      	bne.n	800d5ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d5c2:	2101      	movs	r1, #1
 800d5c4:	6978      	ldr	r0, [r7, #20]
 800d5c6:	f000 fae1 	bl	800db8c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d01d      	beq.n	800d60e <sent_tcp+0x92>
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d5de:	d316      	bcc.n	800d60e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	d810      	bhi.n	800d60e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	7f1b      	ldrb	r3, [r3, #28]
 800d5f0:	f023 0310 	bic.w	r3, r3, #16
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d005      	beq.n	800d60e <sent_tcp+0x92>
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	88fa      	ldrh	r2, [r7, #6]
 800d608:	2102      	movs	r1, #2
 800d60a:	6978      	ldr	r0, [r7, #20]
 800d60c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	08024c30 	.word	0x08024c30
 800d61c:	08024d88 	.word	0x08024d88
 800d620:	08024c74 	.word	0x08024c74

0800d624 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b088      	sub	sp, #32
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d106      	bne.n	800d648 <err_tcp+0x24>
 800d63a:	4b5f      	ldr	r3, [pc, #380]	; (800d7b8 <err_tcp+0x194>)
 800d63c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d640:	495e      	ldr	r1, [pc, #376]	; (800d7bc <err_tcp+0x198>)
 800d642:	485f      	ldr	r0, [pc, #380]	; (800d7c0 <err_tcp+0x19c>)
 800d644:	f00e f952 	bl	801b8ec <printf>

  SYS_ARCH_PROTECT(lev);
 800d648:	f00d fd58 	bl	801b0fc <sys_arch_protect>
 800d64c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	2200      	movs	r2, #0
 800d652:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	78fa      	ldrb	r2, [r7, #3]
 800d658:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	7f1b      	ldrb	r3, [r3, #28]
 800d65e:	f043 0301 	orr.w	r3, r3, #1
 800d662:	b2da      	uxtb	r2, r3
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	785b      	ldrb	r3, [r3, #1]
 800d66c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	2200      	movs	r2, #0
 800d672:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d674:	69b8      	ldr	r0, [r7, #24]
 800d676:	f00d fd4f 	bl	801b118 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d005      	beq.n	800d68e <err_tcp+0x6a>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d686:	2200      	movs	r2, #0
 800d688:	2104      	movs	r1, #4
 800d68a:	69f8      	ldr	r0, [r7, #28]
 800d68c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d692:	2b00      	cmp	r3, #0
 800d694:	d005      	beq.n	800d6a2 <err_tcp+0x7e>
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	69f8      	ldr	r0, [r7, #28]
 800d6a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d005      	beq.n	800d6b6 <err_tcp+0x92>
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	2102      	movs	r1, #2
 800d6b2:	69f8      	ldr	r0, [r7, #28]
 800d6b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d6b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff fd86 	bl	800d1cc <lwip_netconn_err_to_msg>
 800d6c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	3310      	adds	r3, #16
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f00d fbfd 	bl	801aec6 <sys_mbox_valid>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d005      	beq.n	800d6de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	3310      	adds	r3, #16
 800d6d6:	6939      	ldr	r1, [r7, #16]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f00d fb7f 	bl	801addc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	3314      	adds	r3, #20
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f00d fbef 	bl	801aec6 <sys_mbox_valid>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	3314      	adds	r3, #20
 800d6f2:	6939      	ldr	r1, [r7, #16]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f00d fb71 	bl	801addc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d005      	beq.n	800d70c <err_tcp+0xe8>
 800d700:	7dfb      	ldrb	r3, [r7, #23]
 800d702:	2b04      	cmp	r3, #4
 800d704:	d002      	beq.n	800d70c <err_tcp+0xe8>
 800d706:	7dfb      	ldrb	r3, [r7, #23]
 800d708:	2b03      	cmp	r3, #3
 800d70a:	d143      	bne.n	800d794 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	7f1b      	ldrb	r3, [r3, #28]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	bf14      	ite	ne
 800d718:	2301      	movne	r3, #1
 800d71a:	2300      	moveq	r3, #0
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	7f1b      	ldrb	r3, [r3, #28]
 800d724:	f023 0304 	bic.w	r3, r3, #4
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d13b      	bne.n	800d7ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	6a1b      	ldr	r3, [r3, #32]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d106      	bne.n	800d74a <err_tcp+0x126>
 800d73c:	4b1e      	ldr	r3, [pc, #120]	; (800d7b8 <err_tcp+0x194>)
 800d73e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d742:	4920      	ldr	r1, [pc, #128]	; (800d7c4 <err_tcp+0x1a0>)
 800d744:	481e      	ldr	r0, [pc, #120]	; (800d7c0 <err_tcp+0x19c>)
 800d746:	f00e f8d1 	bl	801b8ec <printf>
      if (old_state == NETCONN_CLOSE) {
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
 800d74c:	2b04      	cmp	r3, #4
 800d74e:	d104      	bne.n	800d75a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	6a1b      	ldr	r3, [r3, #32]
 800d754:	2200      	movs	r2, #0
 800d756:	711a      	strb	r2, [r3, #4]
 800d758:	e003      	b.n	800d762 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	78fa      	ldrb	r2, [r7, #3]
 800d760:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	6a1b      	ldr	r3, [r3, #32]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	330c      	adds	r3, #12
 800d76a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d76c:	68b8      	ldr	r0, [r7, #8]
 800d76e:	f00d fc3b 	bl	801afe8 <sys_sem_valid>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d106      	bne.n	800d786 <err_tcp+0x162>
 800d778:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <err_tcp+0x194>)
 800d77a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d77e:	4912      	ldr	r1, [pc, #72]	; (800d7c8 <err_tcp+0x1a4>)
 800d780:	480f      	ldr	r0, [pc, #60]	; (800d7c0 <err_tcp+0x19c>)
 800d782:	f00e f8b3 	bl	801b8ec <printf>
      conn->current_msg = NULL;
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	2200      	movs	r2, #0
 800d78a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d78c:	68b8      	ldr	r0, [r7, #8]
 800d78e:	f00d fc11 	bl	801afb4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d792:	e00b      	b.n	800d7ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	6a1b      	ldr	r3, [r3, #32]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d008      	beq.n	800d7ae <err_tcp+0x18a>
 800d79c:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <err_tcp+0x194>)
 800d79e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d7a2:	490a      	ldr	r1, [pc, #40]	; (800d7cc <err_tcp+0x1a8>)
 800d7a4:	4806      	ldr	r0, [pc, #24]	; (800d7c0 <err_tcp+0x19c>)
 800d7a6:	f00e f8a1 	bl	801b8ec <printf>
  }
}
 800d7aa:	e000      	b.n	800d7ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d7ac:	bf00      	nop
}
 800d7ae:	bf00      	nop
 800d7b0:	3720      	adds	r7, #32
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	08024c30 	.word	0x08024c30
 800d7bc:	08024d88 	.word	0x08024d88
 800d7c0:	08024c74 	.word	0x08024c74
 800d7c4:	08024d98 	.word	0x08024d98
 800d7c8:	08024db4 	.word	0x08024db4
 800d7cc:	08024dd0 	.word	0x08024dd0

0800d7d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d7de:	6879      	ldr	r1, [r7, #4]
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f005 fbdb 	bl	8012f9c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d7e6:	490a      	ldr	r1, [pc, #40]	; (800d810 <setup_tcp+0x40>)
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f005 fbe9 	bl	8012fc0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d7ee:	4909      	ldr	r1, [pc, #36]	; (800d814 <setup_tcp+0x44>)
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f005 fc07 	bl	8013004 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	4907      	ldr	r1, [pc, #28]	; (800d818 <setup_tcp+0x48>)
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f005 fc5e 	bl	80130bc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d800:	4906      	ldr	r1, [pc, #24]	; (800d81c <setup_tcp+0x4c>)
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	f005 fc20 	bl	8013048 <tcp_err>
}
 800d808:	bf00      	nop
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	0800d3a9 	.word	0x0800d3a9
 800d814:	0800d57d 	.word	0x0800d57d
 800d818:	0800d4b5 	.word	0x0800d4b5
 800d81c:	0800d625 	.word	0x0800d625

0800d820 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d820:	b590      	push	{r4, r7, lr}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d006      	beq.n	800d844 <pcb_new+0x24>
 800d836:	4b2b      	ldr	r3, [pc, #172]	; (800d8e4 <pcb_new+0xc4>)
 800d838:	f240 2265 	movw	r2, #613	; 0x265
 800d83c:	492a      	ldr	r1, [pc, #168]	; (800d8e8 <pcb_new+0xc8>)
 800d83e:	482b      	ldr	r0, [pc, #172]	; (800d8ec <pcb_new+0xcc>)
 800d840:	f00e f854 	bl	801b8ec <printf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d84e:	2b10      	cmp	r3, #16
 800d850:	d022      	beq.n	800d898 <pcb_new+0x78>
 800d852:	2b20      	cmp	r3, #32
 800d854:	d133      	bne.n	800d8be <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681c      	ldr	r4, [r3, #0]
 800d85a:	7bfb      	ldrb	r3, [r7, #15]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f00a fe62 	bl	8018526 <udp_new_ip_type>
 800d862:	4603      	mov	r3, r0
 800d864:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d02a      	beq.n	800d8c6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b22      	cmp	r3, #34	; 0x22
 800d878:	d104      	bne.n	800d884 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6858      	ldr	r0, [r3, #4]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	4917      	ldr	r1, [pc, #92]	; (800d8f0 <pcb_new+0xd0>)
 800d892:	f00a fdcf 	bl	8018434 <udp_recv>
      }
      break;
 800d896:	e016      	b.n	800d8c6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681c      	ldr	r4, [r3, #0]
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f005 fb6e 	bl	8012f80 <tcp_new_ip_type>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00b      	beq.n	800d8ca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff ff8a 	bl	800d7d0 <setup_tcp>
      }
      break;
 800d8bc:	e005      	b.n	800d8ca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	22fa      	movs	r2, #250	; 0xfa
 800d8c2:	711a      	strb	r2, [r3, #4]
      return;
 800d8c4:	e00a      	b.n	800d8dc <pcb_new+0xbc>
      break;
 800d8c6:	bf00      	nop
 800d8c8:	e000      	b.n	800d8cc <pcb_new+0xac>
      break;
 800d8ca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d102      	bne.n	800d8dc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	22ff      	movs	r2, #255	; 0xff
 800d8da:	711a      	strb	r2, [r3, #4]
  }
}
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd90      	pop	{r4, r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	08024c30 	.word	0x08024c30
 800d8e8:	08024e14 	.word	0x08024e14
 800d8ec:	08024c74 	.word	0x08024c74
 800d8f0:	0800d2ad 	.word	0x0800d2ad

0800d8f4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2200      	movs	r2, #0
 800d904:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d102      	bne.n	800d916 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff ff85 	bl	800d820 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
	...

0800d920 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	4603      	mov	r3, r0
 800d928:	6039      	str	r1, [r7, #0]
 800d92a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d930:	2007      	movs	r0, #7
 800d932:	f002 fda5 	bl	8010480 <memp_malloc>
 800d936:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <netconn_alloc+0x22>
    return NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	e052      	b.n	800d9e8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	79fa      	ldrb	r2, [r7, #7]
 800d94c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2200      	movs	r2, #0
 800d952:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d95a:	2b10      	cmp	r3, #16
 800d95c:	d004      	beq.n	800d968 <netconn_alloc+0x48>
 800d95e:	2b20      	cmp	r3, #32
 800d960:	d105      	bne.n	800d96e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d962:	2306      	movs	r3, #6
 800d964:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d966:	e00a      	b.n	800d97e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d968:	2306      	movs	r3, #6
 800d96a:	617b      	str	r3, [r7, #20]
      break;
 800d96c:	e007      	b.n	800d97e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d96e:	4b20      	ldr	r3, [pc, #128]	; (800d9f0 <netconn_alloc+0xd0>)
 800d970:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d974:	491f      	ldr	r1, [pc, #124]	; (800d9f4 <netconn_alloc+0xd4>)
 800d976:	4820      	ldr	r0, [pc, #128]	; (800d9f8 <netconn_alloc+0xd8>)
 800d978:	f00d ffb8 	bl	801b8ec <printf>
      goto free_and_return;
 800d97c:	e02f      	b.n	800d9de <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3310      	adds	r3, #16
 800d982:	6979      	ldr	r1, [r7, #20]
 800d984:	4618      	mov	r0, r3
 800d986:	f00d f9f5 	bl	801ad74 <sys_mbox_new>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d125      	bne.n	800d9dc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	330c      	adds	r3, #12
 800d994:	2100      	movs	r1, #0
 800d996:	4618      	mov	r0, r3
 800d998:	f00d fab3 	bl	801af02 <sys_sem_new>
 800d99c:	4603      	mov	r3, r0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d005      	beq.n	800d9ae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3310      	adds	r3, #16
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f00d fa06 	bl	801adb8 <sys_mbox_free>
    goto free_and_return;
 800d9ac:	e017      	b.n	800d9de <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3314      	adds	r3, #20
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f00d fa98 	bl	801aee8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	683a      	ldr	r2, [r7, #0]
 800d9ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	7cfa      	ldrb	r2, [r7, #19]
 800d9d6:	771a      	strb	r2, [r3, #28]
  return conn;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	e005      	b.n	800d9e8 <netconn_alloc+0xc8>
    goto free_and_return;
 800d9dc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d9de:	68f9      	ldr	r1, [r7, #12]
 800d9e0:	2007      	movs	r0, #7
 800d9e2:	f002 fd9f 	bl	8010524 <memp_free>
  return NULL;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	08024c30 	.word	0x08024c30
 800d9f4:	08024e34 	.word	0x08024e34
 800d9f8:	08024c74 	.word	0x08024c74

0800d9fc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d006      	beq.n	800da1a <netconn_free+0x1e>
 800da0c:	4b1b      	ldr	r3, [pc, #108]	; (800da7c <netconn_free+0x80>)
 800da0e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800da12:	491b      	ldr	r1, [pc, #108]	; (800da80 <netconn_free+0x84>)
 800da14:	481b      	ldr	r0, [pc, #108]	; (800da84 <netconn_free+0x88>)
 800da16:	f00d ff69 	bl	801b8ec <printf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	3310      	adds	r3, #16
 800da1e:	4618      	mov	r0, r3
 800da20:	f00d fa51 	bl	801aec6 <sys_mbox_valid>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d006      	beq.n	800da38 <netconn_free+0x3c>
 800da2a:	4b14      	ldr	r3, [pc, #80]	; (800da7c <netconn_free+0x80>)
 800da2c:	f240 3223 	movw	r2, #803	; 0x323
 800da30:	4915      	ldr	r1, [pc, #84]	; (800da88 <netconn_free+0x8c>)
 800da32:	4814      	ldr	r0, [pc, #80]	; (800da84 <netconn_free+0x88>)
 800da34:	f00d ff5a 	bl	801b8ec <printf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3314      	adds	r3, #20
 800da3c:	4618      	mov	r0, r3
 800da3e:	f00d fa42 	bl	801aec6 <sys_mbox_valid>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d006      	beq.n	800da56 <netconn_free+0x5a>
 800da48:	4b0c      	ldr	r3, [pc, #48]	; (800da7c <netconn_free+0x80>)
 800da4a:	f240 3226 	movw	r2, #806	; 0x326
 800da4e:	490f      	ldr	r1, [pc, #60]	; (800da8c <netconn_free+0x90>)
 800da50:	480c      	ldr	r0, [pc, #48]	; (800da84 <netconn_free+0x88>)
 800da52:	f00d ff4b 	bl	801b8ec <printf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	330c      	adds	r3, #12
 800da5a:	4618      	mov	r0, r3
 800da5c:	f00d fab7 	bl	801afce <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	330c      	adds	r3, #12
 800da64:	4618      	mov	r0, r3
 800da66:	f00d fad0 	bl	801b00a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	2007      	movs	r0, #7
 800da6e:	f002 fd59 	bl	8010524 <memp_free>
}
 800da72:	bf00      	nop
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	08024c30 	.word	0x08024c30
 800da80:	08024e5c 	.word	0x08024e5c
 800da84:	08024c74 	.word	0x08024c74
 800da88:	08024e8c 	.word	0x08024e8c
 800da8c:	08024ec8 	.word	0x08024ec8

0800da90 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	3310      	adds	r3, #16
 800da9c:	4618      	mov	r0, r3
 800da9e:	f00d fa12 	bl	801aec6 <sys_mbox_valid>
 800daa2:	4603      	mov	r3, r0
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d02f      	beq.n	800db08 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800daa8:	e018      	b.n	800dadc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dab2:	2b10      	cmp	r3, #16
 800dab4:	d10e      	bne.n	800dad4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	f107 020f 	add.w	r2, r7, #15
 800dabc:	4611      	mov	r1, r2
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fbba 	bl	800d238 <lwip_netconn_is_err_msg>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d108      	bne.n	800dadc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	4618      	mov	r0, r3
 800dace:	f003 fba7 	bl	8011220 <pbuf_free>
 800dad2:	e003      	b.n	800dadc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 fdb6 	bl	800e648 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	3310      	adds	r3, #16
 800dae0:	f107 0210 	add.w	r2, r7, #16
 800dae4:	4611      	mov	r1, r2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f00d f9d1 	bl	801ae8e <sys_arch_mbox_tryfetch>
 800daec:	4603      	mov	r3, r0
 800daee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf2:	d1da      	bne.n	800daaa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	3310      	adds	r3, #16
 800daf8:	4618      	mov	r0, r3
 800dafa:	f00d f95d 	bl	801adb8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	3310      	adds	r3, #16
 800db02:	4618      	mov	r0, r3
 800db04:	f00d f9f0 	bl	801aee8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3314      	adds	r3, #20
 800db0c:	4618      	mov	r0, r3
 800db0e:	f00d f9da 	bl	801aec6 <sys_mbox_valid>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d034      	beq.n	800db82 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800db18:	e01d      	b.n	800db56 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f107 020e 	add.w	r2, r7, #14
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f7ff fb88 	bl	800d238 <lwip_netconn_is_err_msg>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d113      	bne.n	800db56 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800db32:	6978      	ldr	r0, [r7, #20]
 800db34:	f7ff ffac 	bl	800da90 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d007      	beq.n	800db50 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	f004 f96b 	bl	8011e20 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2200      	movs	r2, #0
 800db4e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800db50:	6978      	ldr	r0, [r7, #20]
 800db52:	f7ff ff53 	bl	800d9fc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	3314      	adds	r3, #20
 800db5a:	f107 0210 	add.w	r2, r7, #16
 800db5e:	4611      	mov	r1, r2
 800db60:	4618      	mov	r0, r3
 800db62:	f00d f994 	bl	801ae8e <sys_arch_mbox_tryfetch>
 800db66:	4603      	mov	r3, r0
 800db68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db6c:	d1d5      	bne.n	800db1a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	3314      	adds	r3, #20
 800db72:	4618      	mov	r0, r3
 800db74:	f00d f920 	bl	801adb8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3314      	adds	r3, #20
 800db7c:	4618      	mov	r0, r3
 800db7e:	f00d f9b3 	bl	801aee8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800db82:	bf00      	nop
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
	...

0800db8c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	460b      	mov	r3, r1
 800db96:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800db98:	2300      	movs	r3, #0
 800db9a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <lwip_netconn_do_close_internal+0x24>
 800dba2:	4ba1      	ldr	r3, [pc, #644]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800dba4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800dba8:	49a0      	ldr	r1, [pc, #640]	; (800de2c <lwip_netconn_do_close_internal+0x2a0>)
 800dbaa:	48a1      	ldr	r0, [pc, #644]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800dbac:	f00d fe9e 	bl	801b8ec <printf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbb8:	2b10      	cmp	r3, #16
 800dbba:	d006      	beq.n	800dbca <lwip_netconn_do_close_internal+0x3e>
 800dbbc:	4b9a      	ldr	r3, [pc, #616]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800dbbe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800dbc2:	499c      	ldr	r1, [pc, #624]	; (800de34 <lwip_netconn_do_close_internal+0x2a8>)
 800dbc4:	489a      	ldr	r0, [pc, #616]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800dbc6:	f00d fe91 	bl	801b8ec <printf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	785b      	ldrb	r3, [r3, #1]
 800dbce:	2b04      	cmp	r3, #4
 800dbd0:	d006      	beq.n	800dbe0 <lwip_netconn_do_close_internal+0x54>
 800dbd2:	4b95      	ldr	r3, [pc, #596]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800dbd4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800dbd8:	4997      	ldr	r1, [pc, #604]	; (800de38 <lwip_netconn_do_close_internal+0x2ac>)
 800dbda:	4895      	ldr	r0, [pc, #596]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800dbdc:	f00d fe86 	bl	801b8ec <printf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d106      	bne.n	800dbf6 <lwip_netconn_do_close_internal+0x6a>
 800dbe8:	4b8f      	ldr	r3, [pc, #572]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800dbea:	f240 32a5 	movw	r2, #933	; 0x3a5
 800dbee:	4993      	ldr	r1, [pc, #588]	; (800de3c <lwip_netconn_do_close_internal+0x2b0>)
 800dbf0:	488f      	ldr	r0, [pc, #572]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800dbf2:	f00d fe7b 	bl	801b8ec <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6a1b      	ldr	r3, [r3, #32]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <lwip_netconn_do_close_internal+0x80>
 800dbfe:	4b8a      	ldr	r3, [pc, #552]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800dc00:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dc04:	498e      	ldr	r1, [pc, #568]	; (800de40 <lwip_netconn_do_close_internal+0x2b4>)
 800dc06:	488a      	ldr	r0, [pc, #552]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800dc08:	f00d fe70 	bl	801b8ec <printf>

  tpcb = conn->pcb.tcp;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	7a1b      	ldrb	r3, [r3, #8]
 800dc18:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	f003 0301 	and.w	r3, r3, #1
 800dc20:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
 800dc24:	f003 0302 	and.w	r3, r3, #2
 800dc28:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	2b03      	cmp	r3, #3
 800dc2e:	d102      	bne.n	800dc36 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800dc30:	2301      	movs	r3, #1
 800dc32:	75bb      	strb	r3, [r7, #22]
 800dc34:	e01f      	b.n	800dc76 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800dc36:	7bbb      	ldrb	r3, [r7, #14]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00e      	beq.n	800dc5a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800dc40:	2b05      	cmp	r3, #5
 800dc42:	d007      	beq.n	800dc54 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800dc48:	2b06      	cmp	r3, #6
 800dc4a:	d003      	beq.n	800dc54 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800dc50:	2b08      	cmp	r3, #8
 800dc52:	d102      	bne.n	800dc5a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800dc54:	2301      	movs	r3, #1
 800dc56:	75bb      	strb	r3, [r7, #22]
 800dc58:	e00d      	b.n	800dc76 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800dc5a:	7b7b      	ldrb	r3, [r7, #13]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <lwip_netconn_do_close_internal+0xe6>
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	8b5b      	ldrh	r3, [r3, #26]
 800dc64:	f003 0310 	and.w	r3, r3, #16
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	75bb      	strb	r3, [r7, #22]
 800dc70:	e001      	b.n	800dc76 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800dc76:	7dbb      	ldrb	r3, [r7, #22]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d003      	beq.n	800dc84 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	6938      	ldr	r0, [r7, #16]
 800dc80:	f005 f98c 	bl	8012f9c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	7d1b      	ldrb	r3, [r3, #20]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d104      	bne.n	800dc96 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	6938      	ldr	r0, [r7, #16]
 800dc90:	f005 f9fc 	bl	801308c <tcp_accept>
 800dc94:	e01d      	b.n	800dcd2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800dc96:	7bbb      	ldrb	r3, [r7, #14]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d007      	beq.n	800dcac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	6938      	ldr	r0, [r7, #16]
 800dca0:	f005 f98e 	bl	8012fc0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800dca4:	2100      	movs	r1, #0
 800dca6:	6938      	ldr	r0, [r7, #16]
 800dca8:	f005 f9f0 	bl	801308c <tcp_accept>
    }
    if (shut_tx) {
 800dcac:	7b7b      	ldrb	r3, [r7, #13]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	6938      	ldr	r0, [r7, #16]
 800dcb6:	f005 f9a5 	bl	8013004 <tcp_sent>
    }
    if (shut_close) {
 800dcba:	7dbb      	ldrb	r3, [r7, #22]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d008      	beq.n	800dcd2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	6938      	ldr	r0, [r7, #16]
 800dcc6:	f005 f9f9 	bl	80130bc <tcp_poll>
      tcp_err(tpcb, NULL);
 800dcca:	2100      	movs	r1, #0
 800dccc:	6938      	ldr	r0, [r7, #16]
 800dcce:	f005 f9bb 	bl	8013048 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800dcd2:	7dbb      	ldrb	r3, [r7, #22]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d005      	beq.n	800dce4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800dcd8:	6938      	ldr	r0, [r7, #16]
 800dcda:	f003 ff5b 	bl	8011b94 <tcp_close>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]
 800dce2:	e007      	b.n	800dcf4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800dce4:	7bbb      	ldrb	r3, [r7, #14]
 800dce6:	7b7a      	ldrb	r2, [r7, #13]
 800dce8:	4619      	mov	r1, r3
 800dcea:	6938      	ldr	r0, [r7, #16]
 800dcec:	f003 ff7e 	bl	8011bec <tcp_shutdown>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800dcf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d102      	bne.n	800dd02 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	757b      	strb	r3, [r7, #21]
 800dd00:	e016      	b.n	800dd30 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800dd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0a:	d10f      	bne.n	800dd2c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6a1b      	ldr	r3, [r3, #32]
 800dd10:	7a5b      	ldrb	r3, [r3, #9]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d10c      	bne.n	800dd30 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800dd16:	2301      	movs	r3, #1
 800dd18:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800dd1a:	7dbb      	ldrb	r3, [r7, #22]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d007      	beq.n	800dd30 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800dd20:	6938      	ldr	r0, [r7, #16]
 800dd22:	f004 f87d 	bl	8011e20 <tcp_abort>
          err = ERR_OK;
 800dd26:	2300      	movs	r3, #0
 800dd28:	75fb      	strb	r3, [r7, #23]
 800dd2a:	e001      	b.n	800dd30 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800dd30:	7d7b      	ldrb	r3, [r7, #21]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d044      	beq.n	800ddc0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a1b      	ldr	r3, [r3, #32]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	330c      	adds	r3, #12
 800dd3e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	7dfa      	ldrb	r2, [r7, #23]
 800dd46:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d129      	bne.n	800ddb0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800dd5c:	7dbb      	ldrb	r3, [r7, #22]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00c      	beq.n	800dd7c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d005      	beq.n	800dd7c <lwip_netconn_do_close_internal+0x1f0>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd74:	2200      	movs	r2, #0
 800dd76:	2104      	movs	r1, #4
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	4798      	blx	r3
      }
      if (shut_rx) {
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d009      	beq.n	800dd96 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d005      	beq.n	800dd96 <lwip_netconn_do_close_internal+0x20a>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8e:	2200      	movs	r2, #0
 800dd90:	2100      	movs	r1, #0
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	4798      	blx	r3
      }
      if (shut_tx) {
 800dd96:	7b7b      	ldrb	r3, [r7, #13]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d009      	beq.n	800ddb0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d005      	beq.n	800ddb0 <lwip_netconn_do_close_internal+0x224>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda8:	2200      	movs	r2, #0
 800ddaa:	2102      	movs	r1, #2
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ddb0:	78fb      	ldrb	r3, [r7, #3]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ddb6:	68b8      	ldr	r0, [r7, #8]
 800ddb8:	f00d f8fc 	bl	801afb4 <sys_sem_signal>
    }
    return ERR_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e02e      	b.n	800de1e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800ddc0:	7d7b      	ldrb	r3, [r7, #21]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d11e      	bne.n	800de04 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	7d1b      	ldrb	r3, [r3, #20]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d106      	bne.n	800dddc <lwip_netconn_do_close_internal+0x250>
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800ddd0:	f240 4241 	movw	r2, #1089	; 0x441
 800ddd4:	491b      	ldr	r1, [pc, #108]	; (800de44 <lwip_netconn_do_close_internal+0x2b8>)
 800ddd6:	4816      	ldr	r0, [pc, #88]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800ddd8:	f00d fd88 	bl	801b8ec <printf>
    if (shut_tx) {
 800dddc:	7b7b      	ldrb	r3, [r7, #13]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d003      	beq.n	800ddea <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800dde2:	4919      	ldr	r1, [pc, #100]	; (800de48 <lwip_netconn_do_close_internal+0x2bc>)
 800dde4:	6938      	ldr	r0, [r7, #16]
 800dde6:	f005 f90d 	bl	8013004 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ddea:	2201      	movs	r2, #1
 800ddec:	4917      	ldr	r1, [pc, #92]	; (800de4c <lwip_netconn_do_close_internal+0x2c0>)
 800ddee:	6938      	ldr	r0, [r7, #16]
 800ddf0:	f005 f964 	bl	80130bc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ddf4:	4916      	ldr	r1, [pc, #88]	; (800de50 <lwip_netconn_do_close_internal+0x2c4>)
 800ddf6:	6938      	ldr	r0, [r7, #16]
 800ddf8:	f005 f926 	bl	8013048 <tcp_err>
    tcp_arg(tpcb, conn);
 800ddfc:	6879      	ldr	r1, [r7, #4]
 800ddfe:	6938      	ldr	r0, [r7, #16]
 800de00:	f005 f8cc 	bl	8012f9c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800de04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <lwip_netconn_do_close_internal+0x28e>
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <lwip_netconn_do_close_internal+0x29c>)
 800de0e:	f240 424d 	movw	r2, #1101	; 0x44d
 800de12:	4910      	ldr	r1, [pc, #64]	; (800de54 <lwip_netconn_do_close_internal+0x2c8>)
 800de14:	4806      	ldr	r0, [pc, #24]	; (800de30 <lwip_netconn_do_close_internal+0x2a4>)
 800de16:	f00d fd69 	bl	801b8ec <printf>
  return err;
 800de1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	08024c30 	.word	0x08024c30
 800de2c:	08024f04 	.word	0x08024f04
 800de30:	08024c74 	.word	0x08024c74
 800de34:	08024f14 	.word	0x08024f14
 800de38:	08024f34 	.word	0x08024f34
 800de3c:	08024f58 	.word	0x08024f58
 800de40:	08024d98 	.word	0x08024d98
 800de44:	08024f6c 	.word	0x08024f6c
 800de48:	0800d57d 	.word	0x0800d57d
 800de4c:	0800d4b5 	.word	0x0800d4b5
 800de50:	0800d625 	.word	0x0800d625
 800de54:	08024f90 	.word	0x08024f90

0800de58 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	785b      	ldrb	r3, [r3, #1]
 800de6a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800de6c:	7afb      	ldrb	r3, [r7, #11]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00d      	beq.n	800de8e <lwip_netconn_do_delconn+0x36>
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de7c:	2b10      	cmp	r3, #16
 800de7e:	d006      	beq.n	800de8e <lwip_netconn_do_delconn+0x36>
 800de80:	4b60      	ldr	r3, [pc, #384]	; (800e004 <lwip_netconn_do_delconn+0x1ac>)
 800de82:	f240 425e 	movw	r2, #1118	; 0x45e
 800de86:	4960      	ldr	r1, [pc, #384]	; (800e008 <lwip_netconn_do_delconn+0x1b0>)
 800de88:	4860      	ldr	r0, [pc, #384]	; (800e00c <lwip_netconn_do_delconn+0x1b4>)
 800de8a:	f00d fd2f 	bl	801b8ec <printf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800de8e:	7afb      	ldrb	r3, [r7, #11]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d005      	beq.n	800dea0 <lwip_netconn_do_delconn+0x48>
 800de94:	7afb      	ldrb	r3, [r7, #11]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d002      	beq.n	800dea0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800de9a:	7afb      	ldrb	r3, [r7, #11]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d109      	bne.n	800deb4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dea0:	7afb      	ldrb	r3, [r7, #11]
 800dea2:	2b03      	cmp	r3, #3
 800dea4:	d10a      	bne.n	800debc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	7f1b      	ldrb	r3, [r3, #28]
 800deac:	f003 0304 	and.w	r3, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d103      	bne.n	800debc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	22fb      	movs	r2, #251	; 0xfb
 800deb8:	711a      	strb	r2, [r3, #4]
 800deba:	e097      	b.n	800dfec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800debc:	7afb      	ldrb	r3, [r7, #11]
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d10d      	bne.n	800dede <lwip_netconn_do_delconn+0x86>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	7f1b      	ldrb	r3, [r3, #28]
 800dec8:	f003 0304 	and.w	r3, r3, #4
 800decc:	2b00      	cmp	r3, #0
 800dece:	d106      	bne.n	800dede <lwip_netconn_do_delconn+0x86>
 800ded0:	4b4c      	ldr	r3, [pc, #304]	; (800e004 <lwip_netconn_do_delconn+0x1ac>)
 800ded2:	f240 427a 	movw	r2, #1146	; 0x47a
 800ded6:	494e      	ldr	r1, [pc, #312]	; (800e010 <lwip_netconn_do_delconn+0x1b8>)
 800ded8:	484c      	ldr	r0, [pc, #304]	; (800e00c <lwip_netconn_do_delconn+0x1b4>)
 800deda:	f00d fd07 	bl	801b8ec <printf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fdd1 	bl	800da90 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d05f      	beq.n	800dfb8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df02:	2b10      	cmp	r3, #16
 800df04:	d00d      	beq.n	800df22 <lwip_netconn_do_delconn+0xca>
 800df06:	2b20      	cmp	r3, #32
 800df08:	d151      	bne.n	800dfae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f00a faaa 	bl	8018474 <udp_remove>
          break;
 800df20:	e046      	b.n	800dfb0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d006      	beq.n	800df3a <lwip_netconn_do_delconn+0xe2>
 800df2c:	4b35      	ldr	r3, [pc, #212]	; (800e004 <lwip_netconn_do_delconn+0x1ac>)
 800df2e:	f240 4294 	movw	r2, #1172	; 0x494
 800df32:	4938      	ldr	r1, [pc, #224]	; (800e014 <lwip_netconn_do_delconn+0x1bc>)
 800df34:	4835      	ldr	r0, [pc, #212]	; (800e00c <lwip_netconn_do_delconn+0x1b4>)
 800df36:	f00d fcd9 	bl	801b8ec <printf>
          msg->conn->state = NETCONN_CLOSE;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2204      	movs	r2, #4
 800df40:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2203      	movs	r2, #3
 800df46:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2100      	movs	r1, #0
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff fe18 	bl	800db8c <lwip_netconn_do_close_internal>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d04b      	beq.n	800dffa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	785b      	ldrb	r3, [r3, #1]
 800df68:	2b04      	cmp	r3, #4
 800df6a:	d006      	beq.n	800df7a <lwip_netconn_do_delconn+0x122>
 800df6c:	4b25      	ldr	r3, [pc, #148]	; (800e004 <lwip_netconn_do_delconn+0x1ac>)
 800df6e:	f240 429a 	movw	r2, #1178	; 0x49a
 800df72:	4929      	ldr	r1, [pc, #164]	; (800e018 <lwip_netconn_do_delconn+0x1c0>)
 800df74:	4825      	ldr	r0, [pc, #148]	; (800e00c <lwip_netconn_do_delconn+0x1b4>)
 800df76:	f00d fcb9 	bl	801b8ec <printf>
            UNLOCK_TCPIP_CORE();
 800df7a:	4828      	ldr	r0, [pc, #160]	; (800e01c <lwip_netconn_do_delconn+0x1c4>)
 800df7c:	f00d f88b 	bl	801b096 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	330c      	adds	r3, #12
 800df86:	2100      	movs	r1, #0
 800df88:	4618      	mov	r0, r3
 800df8a:	f00c ffe2 	bl	801af52 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800df8e:	4823      	ldr	r0, [pc, #140]	; (800e01c <lwip_netconn_do_delconn+0x1c4>)
 800df90:	f00d f872 	bl	801b078 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	785b      	ldrb	r3, [r3, #1]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d02d      	beq.n	800dffa <lwip_netconn_do_delconn+0x1a2>
 800df9e:	4b19      	ldr	r3, [pc, #100]	; (800e004 <lwip_netconn_do_delconn+0x1ac>)
 800dfa0:	f240 429e 	movw	r2, #1182	; 0x49e
 800dfa4:	491c      	ldr	r1, [pc, #112]	; (800e018 <lwip_netconn_do_delconn+0x1c0>)
 800dfa6:	4819      	ldr	r0, [pc, #100]	; (800e00c <lwip_netconn_do_delconn+0x1b4>)
 800dfa8:	f00d fca0 	bl	801b8ec <printf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800dfac:	e025      	b.n	800dffa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800dfae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d007      	beq.n	800dfd2 <lwip_netconn_do_delconn+0x17a>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	6810      	ldr	r0, [r2, #0]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d007      	beq.n	800dfec <lwip_netconn_do_delconn+0x194>
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	6810      	ldr	r0, [r2, #0]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	2102      	movs	r1, #2
 800dfea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	330c      	adds	r3, #12
 800dff2:	4618      	mov	r0, r3
 800dff4:	f00c fff8 	bl	801afe8 <sys_sem_valid>
 800dff8:	e000      	b.n	800dffc <lwip_netconn_do_delconn+0x1a4>
          return;
 800dffa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	08024c30 	.word	0x08024c30
 800e008:	08024fa0 	.word	0x08024fa0
 800e00c:	08024c74 	.word	0x08024c74
 800e010:	08024fb4 	.word	0x08024fb4
 800e014:	08024fd4 	.word	0x08024fd4
 800e018:	08024ff0 	.word	0x08024ff0
 800e01c:	200086b8 	.word	0x200086b8

0800e020 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d025      	beq.n	800e082 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e040:	2b10      	cmp	r3, #16
 800e042:	d00e      	beq.n	800e062 <lwip_netconn_do_bind+0x42>
 800e044:	2b20      	cmp	r3, #32
 800e046:	d119      	bne.n	800e07c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6858      	ldr	r0, [r3, #4]
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	6899      	ldr	r1, [r3, #8]
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	899b      	ldrh	r3, [r3, #12]
 800e056:	461a      	mov	r2, r3
 800e058:	f00a f964 	bl	8018324 <udp_bind>
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
        break;
 800e060:	e011      	b.n	800e086 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6858      	ldr	r0, [r3, #4]
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	6899      	ldr	r1, [r3, #8]
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	899b      	ldrh	r3, [r3, #12]
 800e070:	461a      	mov	r2, r3
 800e072:	f003 fee1 	bl	8011e38 <tcp_bind>
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]
        break;
 800e07a:	e004      	b.n	800e086 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e07c:	23fa      	movs	r3, #250	; 0xfa
 800e07e:	73fb      	strb	r3, [r7, #15]
        break;
 800e080:	e001      	b.n	800e086 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e082:	23fa      	movs	r3, #250	; 0xfa
 800e084:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	7bfa      	ldrb	r2, [r7, #15]
 800e08a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e08c:	bf00      	nop
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff f875 	bl	800d194 <netconn_err>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d134      	bne.n	800e120 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d02d      	beq.n	800e11c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0ca:	2b20      	cmp	r3, #32
 800e0cc:	d123      	bne.n	800e116 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10c      	bne.n	800e0f2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	689b      	ldr	r3, [r3, #8]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	f009 ff32 	bl	8017f50 <udp_send>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e0f0:	e016      	b.n	800e120 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6858      	ldr	r0, [r3, #4]
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	6819      	ldr	r1, [r3, #0]
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	f103 0208 	add.w	r2, r3, #8
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	899b      	ldrh	r3, [r3, #12]
 800e10c:	f009 ff54 	bl	8017fb8 <udp_sendto>
 800e110:	4603      	mov	r3, r0
 800e112:	73fb      	strb	r3, [r7, #15]
          break;
 800e114:	e004      	b.n	800e120 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e116:	23f5      	movs	r3, #245	; 0xf5
 800e118:	73fb      	strb	r3, [r7, #15]
          break;
 800e11a:	e001      	b.n	800e120 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800e11c:	23f5      	movs	r3, #245	; 0xf5
 800e11e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	7bfa      	ldrb	r2, [r7, #15]
 800e124:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b086      	sub	sp, #24
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	2200      	movs	r2, #0
 800e13e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d022      	beq.n	800e190 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e154:	2b10      	cmp	r3, #16
 800e156:	d11b      	bne.n	800e190 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e164:	d202      	bcs.n	800e16c <lwip_netconn_do_recv+0x3e>
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	e001      	b.n	800e170 <lwip_netconn_do_recv+0x42>
 800e16c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e170:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	89fa      	ldrh	r2, [r7, #14]
 800e17a:	4611      	mov	r1, r2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f004 f829 	bl	80121d4 <tcp_recved>
        remaining -= recved;
 800e182:	89fb      	ldrh	r3, [r7, #14]
 800e184:	697a      	ldr	r2, [r7, #20]
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1e6      	bne.n	800e15e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e190:	bf00      	nop
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <lwip_netconn_do_writemore+0x24>
 800e1ae:	4b96      	ldr	r3, [pc, #600]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e1b0:	f240 6273 	movw	r2, #1651	; 0x673
 800e1b4:	4995      	ldr	r1, [pc, #596]	; (800e40c <lwip_netconn_do_writemore+0x274>)
 800e1b6:	4896      	ldr	r0, [pc, #600]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e1b8:	f00d fb98 	bl	801b8ec <printf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d006      	beq.n	800e1d2 <lwip_netconn_do_writemore+0x3a>
 800e1c4:	4b90      	ldr	r3, [pc, #576]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e1c6:	f240 6274 	movw	r2, #1652	; 0x674
 800e1ca:	4992      	ldr	r1, [pc, #584]	; (800e414 <lwip_netconn_do_writemore+0x27c>)
 800e1cc:	4890      	ldr	r0, [pc, #576]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e1ce:	f00d fb8d 	bl	801b8ec <printf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a1b      	ldr	r3, [r3, #32]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d106      	bne.n	800e1e8 <lwip_netconn_do_writemore+0x50>
 800e1da:	4b8b      	ldr	r3, [pc, #556]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e1dc:	f240 6275 	movw	r2, #1653	; 0x675
 800e1e0:	498d      	ldr	r1, [pc, #564]	; (800e418 <lwip_netconn_do_writemore+0x280>)
 800e1e2:	488b      	ldr	r0, [pc, #556]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e1e4:	f00d fb82 	bl	801b8ec <printf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <lwip_netconn_do_writemore+0x66>
 800e1f0:	4b85      	ldr	r3, [pc, #532]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e1f2:	f240 6276 	movw	r2, #1654	; 0x676
 800e1f6:	4989      	ldr	r1, [pc, #548]	; (800e41c <lwip_netconn_do_writemore+0x284>)
 800e1f8:	4885      	ldr	r0, [pc, #532]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e1fa:	f00d fb77 	bl	801b8ec <printf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a1b      	ldr	r3, [r3, #32]
 800e202:	699a      	ldr	r2, [r3, #24]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d306      	bcc.n	800e21c <lwip_netconn_do_writemore+0x84>
 800e20e:	4b7e      	ldr	r3, [pc, #504]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e210:	f240 6277 	movw	r2, #1655	; 0x677
 800e214:	4982      	ldr	r1, [pc, #520]	; (800e420 <lwip_netconn_do_writemore+0x288>)
 800e216:	487e      	ldr	r0, [pc, #504]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e218:	f00d fb68 	bl	801b8ec <printf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	899b      	ldrh	r3, [r3, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <lwip_netconn_do_writemore+0x9c>
 800e226:	4b78      	ldr	r3, [pc, #480]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e228:	f240 6279 	movw	r2, #1657	; 0x679
 800e22c:	497d      	ldr	r1, [pc, #500]	; (800e424 <lwip_netconn_do_writemore+0x28c>)
 800e22e:	4878      	ldr	r0, [pc, #480]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e230:	f00d fb5c 	bl	801b8ec <printf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	7f1b      	ldrb	r3, [r3, #28]
 800e23a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7f1b      	ldrb	r3, [r3, #28]
 800e240:	f003 0302 	and.w	r3, r3, #2
 800e244:	2b00      	cmp	r3, #0
 800e246:	d104      	bne.n	800e252 <lwip_netconn_do_writemore+0xba>
 800e248:	7ebb      	ldrb	r3, [r7, #26]
 800e24a:	f003 0304 	and.w	r3, r3, #4
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <lwip_netconn_do_writemore+0xbe>
 800e252:	2301      	movs	r3, #1
 800e254:	e000      	b.n	800e258 <lwip_netconn_do_writemore+0xc0>
 800e256:	2300      	movs	r3, #0
 800e258:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	4413      	add	r3, r2
 800e26a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6a1b      	ldr	r3, [r3, #32]
 800e270:	689b      	ldr	r3, [r3, #8]
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a1b      	ldr	r3, [r3, #32]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e284:	d307      	bcc.n	800e296 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e28a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e28c:	7ebb      	ldrb	r3, [r7, #26]
 800e28e:	f043 0302 	orr.w	r3, r3, #2
 800e292:	76bb      	strb	r3, [r7, #26]
 800e294:	e001      	b.n	800e29a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e2a2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e2a4:	89fa      	ldrh	r2, [r7, #14]
 800e2a6:	8bbb      	ldrh	r3, [r7, #28]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d216      	bcs.n	800e2da <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e2ac:	89fb      	ldrh	r3, [r7, #14]
 800e2ae:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e2b0:	7e3b      	ldrb	r3, [r7, #24]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00d      	beq.n	800e2d2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e2b6:	8bbb      	ldrh	r3, [r7, #28]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10e      	bne.n	800e2da <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6a1b      	ldr	r3, [r3, #32]
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <lwip_netconn_do_writemore+0x134>
 800e2c6:	f06f 0306 	mvn.w	r3, #6
 800e2ca:	e000      	b.n	800e2ce <lwip_netconn_do_writemore+0x136>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e2d0:	e07d      	b.n	800e3ce <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e2d2:	7ebb      	ldrb	r3, [r7, #26]
 800e2d4:	f043 0302 	orr.w	r3, r3, #2
 800e2d8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6a1b      	ldr	r3, [r3, #32]
 800e2de:	691a      	ldr	r2, [r3, #16]
 800e2e0:	8bbb      	ldrh	r3, [r7, #28]
 800e2e2:	441a      	add	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6a1b      	ldr	r3, [r3, #32]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d906      	bls.n	800e2fe <lwip_netconn_do_writemore+0x166>
 800e2f0:	4b45      	ldr	r3, [pc, #276]	; (800e408 <lwip_netconn_do_writemore+0x270>)
 800e2f2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e2f6:	494c      	ldr	r1, [pc, #304]	; (800e428 <lwip_netconn_do_writemore+0x290>)
 800e2f8:	4845      	ldr	r0, [pc, #276]	; (800e410 <lwip_netconn_do_writemore+0x278>)
 800e2fa:	f00d faf7 	bl	801b8ec <printf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e2fe:	8bbb      	ldrh	r3, [r7, #28]
 800e300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e304:	4293      	cmp	r3, r2
 800e306:	d103      	bne.n	800e310 <lwip_netconn_do_writemore+0x178>
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e30e:	d209      	bcs.n	800e324 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e314:	8bba      	ldrh	r2, [r7, #28]
 800e316:	429a      	cmp	r2, r3
 800e318:	d10b      	bne.n	800e332 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	899b      	ldrh	r3, [r3, #12]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d906      	bls.n	800e332 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e324:	2301      	movs	r3, #1
 800e326:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e328:	7ebb      	ldrb	r3, [r7, #26]
 800e32a:	f043 0302 	orr.w	r3, r3, #2
 800e32e:	76bb      	strb	r3, [r7, #26]
 800e330:	e001      	b.n	800e336 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6858      	ldr	r0, [r3, #4]
 800e33a:	7ebb      	ldrb	r3, [r7, #26]
 800e33c:	8bba      	ldrh	r2, [r7, #28]
 800e33e:	6979      	ldr	r1, [r7, #20]
 800e340:	f007 fd6a 	bl	8015e18 <tcp_write>
 800e344:	4603      	mov	r3, r0
 800e346:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e348:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d12c      	bne.n	800e3aa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a1b      	ldr	r3, [r3, #32]
 800e354:	6999      	ldr	r1, [r3, #24]
 800e356:	8bba      	ldrh	r2, [r7, #28]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a1b      	ldr	r3, [r3, #32]
 800e35c:	440a      	add	r2, r1
 800e35e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a1b      	ldr	r3, [r3, #32]
 800e364:	6919      	ldr	r1, [r3, #16]
 800e366:	8bba      	ldrh	r2, [r7, #28]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6a1b      	ldr	r3, [r3, #32]
 800e36c:	440a      	add	r2, r1
 800e36e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	691a      	ldr	r2, [r3, #16]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d113      	bne.n	800e3aa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a1b      	ldr	r3, [r3, #32]
 800e386:	899a      	ldrh	r2, [r3, #12]
 800e388:	3a01      	subs	r2, #1
 800e38a:	b292      	uxth	r2, r2
 800e38c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	899b      	ldrh	r3, [r3, #12]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d008      	beq.n	800e3aa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6a1b      	ldr	r3, [r3, #32]
 800e39c:	689a      	ldr	r2, [r3, #8]
 800e39e:	3208      	adds	r2, #8
 800e3a0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a1b      	ldr	r3, [r3, #32]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e3aa:	7e7b      	ldrb	r3, [r7, #25]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d004      	beq.n	800e3ba <lwip_netconn_do_writemore+0x222>
 800e3b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f43f af50 	beq.w	800e25a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e3ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d004      	beq.n	800e3cc <lwip_netconn_do_writemore+0x234>
 800e3c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ca:	d146      	bne.n	800e45a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e3cc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e3ce:	7e3b      	ldrb	r3, [r7, #24]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d02b      	beq.n	800e42c <lwip_netconn_do_writemore+0x294>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a1b      	ldr	r3, [r3, #32]
 800e3d8:	699a      	ldr	r2, [r3, #24]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	695b      	ldr	r3, [r3, #20]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d223      	bcs.n	800e42c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d005      	beq.n	800e3f8 <lwip_netconn_do_writemore+0x260>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	2103      	movs	r1, #3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	7f1b      	ldrb	r3, [r3, #28]
 800e3fc:	f043 0310 	orr.w	r3, r3, #16
 800e400:	b2da      	uxtb	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	771a      	strb	r2, [r3, #28]
 800e406:	e028      	b.n	800e45a <lwip_netconn_do_writemore+0x2c2>
 800e408:	08024c30 	.word	0x08024c30
 800e40c:	08024d88 	.word	0x08024d88
 800e410:	08024c74 	.word	0x08024c74
 800e414:	08025090 	.word	0x08025090
 800e418:	08024d98 	.word	0x08024d98
 800e41c:	080250b0 	.word	0x080250b0
 800e420:	080250c8 	.word	0x080250c8
 800e424:	08025108 	.word	0x08025108
 800e428:	08025130 	.word	0x08025130
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e434:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e438:	d305      	bcc.n	800e446 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e442:	2b04      	cmp	r3, #4
 800e444:	d909      	bls.n	800e45a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d005      	beq.n	800e45a <lwip_netconn_do_writemore+0x2c2>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e452:	2200      	movs	r2, #0
 800e454:	2103      	movs	r1, #3
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e45a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d11d      	bne.n	800e49e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	699a      	ldr	r2, [r3, #24]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a1b      	ldr	r3, [r3, #32]
 800e46c:	695b      	ldr	r3, [r3, #20]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d002      	beq.n	800e478 <lwip_netconn_do_writemore+0x2e0>
 800e472:	7e3b      	ldrb	r3, [r7, #24]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d001      	beq.n	800e47c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e478:	2301      	movs	r3, #1
 800e47a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	4618      	mov	r0, r3
 800e482:	f008 fab3 	bl	80169ec <tcp_output>
 800e486:	4603      	mov	r3, r0
 800e488:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e48a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e48e:	f113 0f04 	cmn.w	r3, #4
 800e492:	d12c      	bne.n	800e4ee <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e494:	7b3b      	ldrb	r3, [r7, #12]
 800e496:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e498:	2301      	movs	r3, #1
 800e49a:	76fb      	strb	r3, [r7, #27]
 800e49c:	e027      	b.n	800e4ee <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e49e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a6:	d120      	bne.n	800e4ea <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f008 fa9d 	bl	80169ec <tcp_output>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e4b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e4ba:	f113 0f04 	cmn.w	r3, #4
 800e4be:	d104      	bne.n	800e4ca <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e4c0:	7b7b      	ldrb	r3, [r7, #13]
 800e4c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	76fb      	strb	r3, [r7, #27]
 800e4c8:	e011      	b.n	800e4ee <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e4ca:	7e3b      	ldrb	r3, [r7, #24]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00e      	beq.n	800e4ee <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a1b      	ldr	r3, [r3, #32]
 800e4d4:	699b      	ldr	r3, [r3, #24]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d102      	bne.n	800e4e0 <lwip_netconn_do_writemore+0x348>
 800e4da:	f06f 0306 	mvn.w	r3, #6
 800e4de:	e000      	b.n	800e4e2 <lwip_netconn_do_writemore+0x34a>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	76fb      	strb	r3, [r7, #27]
 800e4e8:	e001      	b.n	800e4ee <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e4ee:	7efb      	ldrb	r3, [r7, #27]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d015      	beq.n	800e520 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a1b      	ldr	r3, [r3, #32]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	330c      	adds	r3, #12
 800e4fc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	7ffa      	ldrb	r2, [r7, #31]
 800e504:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e512:	78fb      	ldrb	r3, [r7, #3]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d006      	beq.n	800e526 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e518:	68b8      	ldr	r0, [r7, #8]
 800e51a:	f00c fd4b 	bl	801afb4 <sys_sem_signal>
 800e51e:	e002      	b.n	800e526 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e520:	f04f 33ff 	mov.w	r3, #4294967295
 800e524:	e000      	b.n	800e528 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3720      	adds	r7, #32
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	785b      	ldrb	r3, [r3, #1]
 800e542:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d069      	beq.n	800e622 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d162      	bne.n	800e622 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e560:	2b03      	cmp	r3, #3
 800e562:	d002      	beq.n	800e56a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e564:	7afb      	ldrb	r3, [r7, #11]
 800e566:	2b02      	cmp	r3, #2
 800e568:	d05b      	beq.n	800e622 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e56a:	7afb      	ldrb	r3, [r7, #11]
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	d103      	bne.n	800e578 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	22f5      	movs	r2, #245	; 0xf5
 800e574:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e576:	e059      	b.n	800e62c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e578:	7afb      	ldrb	r3, [r7, #11]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d103      	bne.n	800e586 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	22fb      	movs	r2, #251	; 0xfb
 800e582:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e584:	e052      	b.n	800e62c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	7a1b      	ldrb	r3, [r3, #8]
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d004      	beq.n	800e59c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4618      	mov	r0, r3
 800e598:	f7ff fa7a 	bl	800da90 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d006      	beq.n	800e5b4 <lwip_netconn_do_close+0x84>
 800e5a6:	4b23      	ldr	r3, [pc, #140]	; (800e634 <lwip_netconn_do_close+0x104>)
 800e5a8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e5ac:	4922      	ldr	r1, [pc, #136]	; (800e638 <lwip_netconn_do_close+0x108>)
 800e5ae:	4823      	ldr	r0, [pc, #140]	; (800e63c <lwip_netconn_do_close+0x10c>)
 800e5b0:	f00d f99c 	bl	801b8ec <printf>
      msg->conn->state = NETCONN_CLOSE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2204      	movs	r2, #4
 800e5ba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fade 	bl	800db8c <lwip_netconn_do_close_internal>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d029      	beq.n	800e62a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	785b      	ldrb	r3, [r3, #1]
 800e5dc:	2b04      	cmp	r3, #4
 800e5de:	d006      	beq.n	800e5ee <lwip_netconn_do_close+0xbe>
 800e5e0:	4b14      	ldr	r3, [pc, #80]	; (800e634 <lwip_netconn_do_close+0x104>)
 800e5e2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e5e6:	4916      	ldr	r1, [pc, #88]	; (800e640 <lwip_netconn_do_close+0x110>)
 800e5e8:	4814      	ldr	r0, [pc, #80]	; (800e63c <lwip_netconn_do_close+0x10c>)
 800e5ea:	f00d f97f 	bl	801b8ec <printf>
        UNLOCK_TCPIP_CORE();
 800e5ee:	4815      	ldr	r0, [pc, #84]	; (800e644 <lwip_netconn_do_close+0x114>)
 800e5f0:	f00c fd51 	bl	801b096 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	330c      	adds	r3, #12
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f00c fca8 	bl	801af52 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e602:	4810      	ldr	r0, [pc, #64]	; (800e644 <lwip_netconn_do_close+0x114>)
 800e604:	f00c fd38 	bl	801b078 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	785b      	ldrb	r3, [r3, #1]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00b      	beq.n	800e62a <lwip_netconn_do_close+0xfa>
 800e612:	4b08      	ldr	r3, [pc, #32]	; (800e634 <lwip_netconn_do_close+0x104>)
 800e614:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e618:	4909      	ldr	r1, [pc, #36]	; (800e640 <lwip_netconn_do_close+0x110>)
 800e61a:	4808      	ldr	r0, [pc, #32]	; (800e63c <lwip_netconn_do_close+0x10c>)
 800e61c:	f00d f966 	bl	801b8ec <printf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e620:	e003      	b.n	800e62a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	22f5      	movs	r2, #245	; 0xf5
 800e626:	711a      	strb	r2, [r3, #4]
 800e628:	e000      	b.n	800e62c <lwip_netconn_do_close+0xfc>
      return;
 800e62a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	08024c30 	.word	0x08024c30
 800e638:	08024fd4 	.word	0x08024fd4
 800e63c:	08024c74 	.word	0x08024c74
 800e640:	08024ff0 	.word	0x08024ff0
 800e644:	200086b8 	.word	0x200086b8

0800e648 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d013      	beq.n	800e67e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00b      	beq.n	800e676 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4618      	mov	r0, r3
 800e664:	f002 fddc 	bl	8011220 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	605a      	str	r2, [r3, #4]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	2006      	movs	r0, #6
 800e67a:	f001 ff53 	bl	8010524 <memp_free>
  }
}
 800e67e:	bf00      	nop
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
	...

0800e688 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d108      	bne.n	800e6ac <netbuf_data+0x24>
 800e69a:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <netbuf_data+0x80>)
 800e69c:	22c6      	movs	r2, #198	; 0xc6
 800e69e:	491b      	ldr	r1, [pc, #108]	; (800e70c <netbuf_data+0x84>)
 800e6a0:	481b      	ldr	r0, [pc, #108]	; (800e710 <netbuf_data+0x88>)
 800e6a2:	f00d f923 	bl	801b8ec <printf>
 800e6a6:	f06f 030f 	mvn.w	r3, #15
 800e6aa:	e029      	b.n	800e700 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d108      	bne.n	800e6c4 <netbuf_data+0x3c>
 800e6b2:	4b15      	ldr	r3, [pc, #84]	; (800e708 <netbuf_data+0x80>)
 800e6b4:	22c7      	movs	r2, #199	; 0xc7
 800e6b6:	4917      	ldr	r1, [pc, #92]	; (800e714 <netbuf_data+0x8c>)
 800e6b8:	4815      	ldr	r0, [pc, #84]	; (800e710 <netbuf_data+0x88>)
 800e6ba:	f00d f917 	bl	801b8ec <printf>
 800e6be:	f06f 030f 	mvn.w	r3, #15
 800e6c2:	e01d      	b.n	800e700 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d108      	bne.n	800e6dc <netbuf_data+0x54>
 800e6ca:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <netbuf_data+0x80>)
 800e6cc:	22c8      	movs	r2, #200	; 0xc8
 800e6ce:	4912      	ldr	r1, [pc, #72]	; (800e718 <netbuf_data+0x90>)
 800e6d0:	480f      	ldr	r0, [pc, #60]	; (800e710 <netbuf_data+0x88>)
 800e6d2:	f00d f90b 	bl	801b8ec <printf>
 800e6d6:	f06f 030f 	mvn.w	r3, #15
 800e6da:	e011      	b.n	800e700 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d102      	bne.n	800e6ea <netbuf_data+0x62>
    return ERR_BUF;
 800e6e4:	f06f 0301 	mvn.w	r3, #1
 800e6e8:	e00a      	b.n	800e700 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	685a      	ldr	r2, [r3, #4]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	895a      	ldrh	r2, [r3, #10]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	08025188 	.word	0x08025188
 800e70c:	08025290 	.word	0x08025290
 800e710:	080251d8 	.word	0x080251d8
 800e714:	080252ac 	.word	0x080252ac
 800e718:	080252cc 	.word	0x080252cc

0800e71c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d108      	bne.n	800e73c <netbuf_next+0x20>
 800e72a:	4b11      	ldr	r3, [pc, #68]	; (800e770 <netbuf_next+0x54>)
 800e72c:	22e0      	movs	r2, #224	; 0xe0
 800e72e:	4911      	ldr	r1, [pc, #68]	; (800e774 <netbuf_next+0x58>)
 800e730:	4811      	ldr	r0, [pc, #68]	; (800e778 <netbuf_next+0x5c>)
 800e732:	f00d f8db 	bl	801b8ec <printf>
 800e736:	f04f 33ff 	mov.w	r3, #4294967295
 800e73a:	e014      	b.n	800e766 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d102      	bne.n	800e74c <netbuf_next+0x30>
    return -1;
 800e746:	f04f 33ff 	mov.w	r3, #4294967295
 800e74a:	e00c      	b.n	800e766 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <netbuf_next+0x48>
    return 1;
 800e760:	2301      	movs	r3, #1
 800e762:	e000      	b.n	800e766 <netbuf_next+0x4a>
  }
  return 0;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	08025188 	.word	0x08025188
 800e774:	080252e8 	.word	0x080252e8
 800e778:	080251d8 	.word	0x080251d8

0800e77c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e786:	f009 f9e9 	bl	8017b5c <sys_timeouts_sleeptime>
 800e78a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e792:	d10b      	bne.n	800e7ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e794:	4813      	ldr	r0, [pc, #76]	; (800e7e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e796:	f00c fc7e 	bl	801b096 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e79a:	2200      	movs	r2, #0
 800e79c:	6839      	ldr	r1, [r7, #0]
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f00c fb36 	bl	801ae10 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e7a4:	480f      	ldr	r0, [pc, #60]	; (800e7e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7a6:	f00c fc67 	bl	801b078 <sys_mutex_lock>
    return;
 800e7aa:	e018      	b.n	800e7de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d102      	bne.n	800e7b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e7b2:	f009 f999 	bl	8017ae8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e7b6:	e7e6      	b.n	800e786 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e7b8:	480a      	ldr	r0, [pc, #40]	; (800e7e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7ba:	f00c fc6c 	bl	801b096 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f00c fb24 	bl	801ae10 <sys_arch_mbox_fetch>
 800e7c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e7ca:	4806      	ldr	r0, [pc, #24]	; (800e7e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7cc:	f00c fc54 	bl	801b078 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d6:	d102      	bne.n	800e7de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e7d8:	f009 f986 	bl	8017ae8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e7dc:	e7d3      	b.n	800e786 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	200086b8 	.word	0x200086b8

0800e7e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e7f0:	4810      	ldr	r0, [pc, #64]	; (800e834 <tcpip_thread+0x4c>)
 800e7f2:	f00c fc41 	bl	801b078 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e7f6:	4b10      	ldr	r3, [pc, #64]	; (800e838 <tcpip_thread+0x50>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d005      	beq.n	800e80a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <tcpip_thread+0x50>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a0e      	ldr	r2, [pc, #56]	; (800e83c <tcpip_thread+0x54>)
 800e804:	6812      	ldr	r2, [r2, #0]
 800e806:	4610      	mov	r0, r2
 800e808:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e80a:	f107 030c 	add.w	r3, r7, #12
 800e80e:	4619      	mov	r1, r3
 800e810:	480b      	ldr	r0, [pc, #44]	; (800e840 <tcpip_thread+0x58>)
 800e812:	f7ff ffb3 	bl	800e77c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d106      	bne.n	800e82a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e81c:	4b09      	ldr	r3, [pc, #36]	; (800e844 <tcpip_thread+0x5c>)
 800e81e:	2291      	movs	r2, #145	; 0x91
 800e820:	4909      	ldr	r1, [pc, #36]	; (800e848 <tcpip_thread+0x60>)
 800e822:	480a      	ldr	r0, [pc, #40]	; (800e84c <tcpip_thread+0x64>)
 800e824:	f00d f862 	bl	801b8ec <printf>
      continue;
 800e828:	e003      	b.n	800e832 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 f80f 	bl	800e850 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e832:	e7ea      	b.n	800e80a <tcpip_thread+0x22>
 800e834:	200086b8 	.word	0x200086b8
 800e838:	20004a78 	.word	0x20004a78
 800e83c:	20004a7c 	.word	0x20004a7c
 800e840:	20004a80 	.word	0x20004a80
 800e844:	08025320 	.word	0x08025320
 800e848:	08025350 	.word	0x08025350
 800e84c:	08025370 	.word	0x08025370

0800e850 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	2b02      	cmp	r3, #2
 800e85e:	d026      	beq.n	800e8ae <tcpip_thread_handle_msg+0x5e>
 800e860:	2b02      	cmp	r3, #2
 800e862:	dc2b      	bgt.n	800e8bc <tcpip_thread_handle_msg+0x6c>
 800e864:	2b00      	cmp	r3, #0
 800e866:	d002      	beq.n	800e86e <tcpip_thread_handle_msg+0x1e>
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d015      	beq.n	800e898 <tcpip_thread_handle_msg+0x48>
 800e86c:	e026      	b.n	800e8bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	6850      	ldr	r0, [r2, #4]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6892      	ldr	r2, [r2, #8]
 800e87a:	4611      	mov	r1, r2
 800e87c:	4798      	blx	r3
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d004      	beq.n	800e88e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	4618      	mov	r0, r3
 800e88a:	f002 fcc9 	bl	8011220 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e88e:	6879      	ldr	r1, [r7, #4]
 800e890:	2009      	movs	r0, #9
 800e892:	f001 fe47 	bl	8010524 <memp_free>
      break;
 800e896:	e018      	b.n	800e8ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	6892      	ldr	r2, [r2, #8]
 800e8a0:	4610      	mov	r0, r2
 800e8a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e8a4:	6879      	ldr	r1, [r7, #4]
 800e8a6:	2008      	movs	r0, #8
 800e8a8:	f001 fe3c 	bl	8010524 <memp_free>
      break;
 800e8ac:	e00d      	b.n	800e8ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	6892      	ldr	r2, [r2, #8]
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	4798      	blx	r3
      break;
 800e8ba:	e006      	b.n	800e8ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e8bc:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <tcpip_thread_handle_msg+0x84>)
 800e8be:	22cf      	movs	r2, #207	; 0xcf
 800e8c0:	4905      	ldr	r1, [pc, #20]	; (800e8d8 <tcpip_thread_handle_msg+0x88>)
 800e8c2:	4806      	ldr	r0, [pc, #24]	; (800e8dc <tcpip_thread_handle_msg+0x8c>)
 800e8c4:	f00d f812 	bl	801b8ec <printf>
      break;
 800e8c8:	bf00      	nop
  }
}
 800e8ca:	bf00      	nop
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	08025320 	.word	0x08025320
 800e8d8:	08025350 	.word	0x08025350
 800e8dc:	08025370 	.word	0x08025370

0800e8e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b086      	sub	sp, #24
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e8ec:	481a      	ldr	r0, [pc, #104]	; (800e958 <tcpip_inpkt+0x78>)
 800e8ee:	f00c faea 	bl	801aec6 <sys_mbox_valid>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d105      	bne.n	800e904 <tcpip_inpkt+0x24>
 800e8f8:	4b18      	ldr	r3, [pc, #96]	; (800e95c <tcpip_inpkt+0x7c>)
 800e8fa:	22fc      	movs	r2, #252	; 0xfc
 800e8fc:	4918      	ldr	r1, [pc, #96]	; (800e960 <tcpip_inpkt+0x80>)
 800e8fe:	4819      	ldr	r0, [pc, #100]	; (800e964 <tcpip_inpkt+0x84>)
 800e900:	f00c fff4 	bl	801b8ec <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e904:	2009      	movs	r0, #9
 800e906:	f001 fdbb 	bl	8010480 <memp_malloc>
 800e90a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d102      	bne.n	800e918 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e912:	f04f 33ff 	mov.w	r3, #4294967295
 800e916:	e01a      	b.n	800e94e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2200      	movs	r2, #0
 800e91c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e930:	6979      	ldr	r1, [r7, #20]
 800e932:	4809      	ldr	r0, [pc, #36]	; (800e958 <tcpip_inpkt+0x78>)
 800e934:	f00c fa52 	bl	801addc <sys_mbox_trypost>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d006      	beq.n	800e94c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e93e:	6979      	ldr	r1, [r7, #20]
 800e940:	2009      	movs	r0, #9
 800e942:	f001 fdef 	bl	8010524 <memp_free>
    return ERR_MEM;
 800e946:	f04f 33ff 	mov.w	r3, #4294967295
 800e94a:	e000      	b.n	800e94e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e94c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	20004a80 	.word	0x20004a80
 800e95c:	08025320 	.word	0x08025320
 800e960:	08025398 	.word	0x08025398
 800e964:	08025370 	.word	0x08025370

0800e968 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e978:	f003 0318 	and.w	r3, r3, #24
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e980:	4a08      	ldr	r2, [pc, #32]	; (800e9a4 <tcpip_input+0x3c>)
 800e982:	6839      	ldr	r1, [r7, #0]
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f7ff ffab 	bl	800e8e0 <tcpip_inpkt>
 800e98a:	4603      	mov	r3, r0
 800e98c:	e005      	b.n	800e99a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e98e:	4a06      	ldr	r2, [pc, #24]	; (800e9a8 <tcpip_input+0x40>)
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff ffa4 	bl	800e8e0 <tcpip_inpkt>
 800e998:	4603      	mov	r3, r0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	0801abc9 	.word	0x0801abc9
 800e9a8:	08019889 	.word	0x08019889

0800e9ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e9b6:	4819      	ldr	r0, [pc, #100]	; (800ea1c <tcpip_try_callback+0x70>)
 800e9b8:	f00c fa85 	bl	801aec6 <sys_mbox_valid>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d106      	bne.n	800e9d0 <tcpip_try_callback+0x24>
 800e9c2:	4b17      	ldr	r3, [pc, #92]	; (800ea20 <tcpip_try_callback+0x74>)
 800e9c4:	f240 125d 	movw	r2, #349	; 0x15d
 800e9c8:	4916      	ldr	r1, [pc, #88]	; (800ea24 <tcpip_try_callback+0x78>)
 800e9ca:	4817      	ldr	r0, [pc, #92]	; (800ea28 <tcpip_try_callback+0x7c>)
 800e9cc:	f00c ff8e 	bl	801b8ec <printf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e9d0:	2008      	movs	r0, #8
 800e9d2:	f001 fd55 	bl	8010480 <memp_malloc>
 800e9d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e2:	e017      	b.n	800ea14 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e9f6:	68f9      	ldr	r1, [r7, #12]
 800e9f8:	4808      	ldr	r0, [pc, #32]	; (800ea1c <tcpip_try_callback+0x70>)
 800e9fa:	f00c f9ef 	bl	801addc <sys_mbox_trypost>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d006      	beq.n	800ea12 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea04:	68f9      	ldr	r1, [r7, #12]
 800ea06:	2008      	movs	r0, #8
 800ea08:	f001 fd8c 	bl	8010524 <memp_free>
    return ERR_MEM;
 800ea0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea10:	e000      	b.n	800ea14 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ea12:	2300      	movs	r3, #0
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20004a80 	.word	0x20004a80
 800ea20:	08025320 	.word	0x08025320
 800ea24:	08025398 	.word	0x08025398
 800ea28:	08025370 	.word	0x08025370

0800ea2c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ea38:	4806      	ldr	r0, [pc, #24]	; (800ea54 <tcpip_send_msg_wait_sem+0x28>)
 800ea3a:	f00c fb1d 	bl	801b078 <sys_mutex_lock>
  fn(apimsg);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	68b8      	ldr	r0, [r7, #8]
 800ea42:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ea44:	4803      	ldr	r0, [pc, #12]	; (800ea54 <tcpip_send_msg_wait_sem+0x28>)
 800ea46:	f00c fb26 	bl	801b096 <sys_mutex_unlock>
  return ERR_OK;
 800ea4a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	200086b8 	.word	0x200086b8

0800ea58 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af02      	add	r7, sp, #8
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ea62:	f001 f885 	bl	800fb70 <lwip_init>

  tcpip_init_done = initfunc;
 800ea66:	4a17      	ldr	r2, [pc, #92]	; (800eac4 <tcpip_init+0x6c>)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ea6c:	4a16      	ldr	r2, [pc, #88]	; (800eac8 <tcpip_init+0x70>)
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ea72:	2106      	movs	r1, #6
 800ea74:	4815      	ldr	r0, [pc, #84]	; (800eacc <tcpip_init+0x74>)
 800ea76:	f00c f97d 	bl	801ad74 <sys_mbox_new>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d006      	beq.n	800ea8e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ea80:	4b13      	ldr	r3, [pc, #76]	; (800ead0 <tcpip_init+0x78>)
 800ea82:	f240 2261 	movw	r2, #609	; 0x261
 800ea86:	4913      	ldr	r1, [pc, #76]	; (800ead4 <tcpip_init+0x7c>)
 800ea88:	4813      	ldr	r0, [pc, #76]	; (800ead8 <tcpip_init+0x80>)
 800ea8a:	f00c ff2f 	bl	801b8ec <printf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ea8e:	4813      	ldr	r0, [pc, #76]	; (800eadc <tcpip_init+0x84>)
 800ea90:	f00c fad6 	bl	801b040 <sys_mutex_new>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d006      	beq.n	800eaa8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ea9a:	4b0d      	ldr	r3, [pc, #52]	; (800ead0 <tcpip_init+0x78>)
 800ea9c:	f240 2265 	movw	r2, #613	; 0x265
 800eaa0:	490f      	ldr	r1, [pc, #60]	; (800eae0 <tcpip_init+0x88>)
 800eaa2:	480d      	ldr	r0, [pc, #52]	; (800ead8 <tcpip_init+0x80>)
 800eaa4:	f00c ff22 	bl	801b8ec <printf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eab0:	2200      	movs	r2, #0
 800eab2:	490c      	ldr	r1, [pc, #48]	; (800eae4 <tcpip_init+0x8c>)
 800eab4:	480c      	ldr	r0, [pc, #48]	; (800eae8 <tcpip_init+0x90>)
 800eab6:	f00c fafb 	bl	801b0b0 <sys_thread_new>
}
 800eaba:	bf00      	nop
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20004a78 	.word	0x20004a78
 800eac8:	20004a7c 	.word	0x20004a7c
 800eacc:	20004a80 	.word	0x20004a80
 800ead0:	08025320 	.word	0x08025320
 800ead4:	080253a8 	.word	0x080253a8
 800ead8:	08025370 	.word	0x08025370
 800eadc:	200086b8 	.word	0x200086b8
 800eae0:	080253cc 	.word	0x080253cc
 800eae4:	0800e7e9 	.word	0x0800e7e9
 800eae8:	080253f0 	.word	0x080253f0

0800eaec <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d002      	beq.n	800eb02 <fs_open+0x16>
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <fs_open+0x1c>
    return ERR_ARG;
 800eb02:	f06f 030f 	mvn.w	r3, #15
 800eb06:	e037      	b.n	800eb78 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7f3 ff7e 	bl	8002a0c <fs_open_custom>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d004      	beq.n	800eb20 <fs_open+0x34>
    file->is_custom_file = 1;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	e02b      	b.n	800eb78 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800eb26:	4b16      	ldr	r3, [pc, #88]	; (800eb80 <fs_open+0x94>)
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	e020      	b.n	800eb6e <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	4619      	mov	r1, r3
 800eb32:	6838      	ldr	r0, [r7, #0]
 800eb34:	f7f1 fb6c 	bl	8000210 <strcmp>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d114      	bne.n	800eb68 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	689a      	ldr	r2, [r3, #8]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	68da      	ldr	r2, [r3, #12]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	68da      	ldr	r2, [r3, #12]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	7c1a      	ldrb	r2, [r3, #16]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	e007      	b.n	800eb78 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	60fb      	str	r3, [r7, #12]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1db      	bne.n	800eb2c <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800eb74:	f06f 0305 	mvn.w	r3, #5
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3710      	adds	r7, #16
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	08029dc8 	.word	0x08029dc8

0800eb84 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7c5b      	ldrb	r3, [r3, #17]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d002      	beq.n	800eb9a <fs_close+0x16>
    fs_close_custom(file);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7f4 f8a9 	bl	8002cec <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800eb9a:	bf00      	nop
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b083      	sub	sp, #12
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	1ad3      	subs	r3, r2, r3
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ebc8:	2230      	movs	r2, #48	; 0x30
 800ebca:	2100      	movs	r1, #0
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f00c fc07 	bl	801b3e0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ebd2:	bf00      	nop
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b082      	sub	sp, #8
 800ebde:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ebe0:	2030      	movs	r0, #48	; 0x30
 800ebe2:	f001 facb 	bl	801017c <mem_malloc>
 800ebe6:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7ff ffe6 	bl	800ebc0 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ebf4:	687b      	ldr	r3, [r7, #4]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b082      	sub	sp, #8
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	695b      	ldr	r3, [r3, #20]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	695b      	ldr	r3, [r3, #20]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff ffb6 	bl	800eb84 <fs_close>
    hs->handle = NULL;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d007      	beq.n	800ec36 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f002 faf8 	bl	8011220 <pbuf_free>
    hs->req = NULL;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d005      	beq.n	800ec58 <http_state_free+0x1a>
    http_state_eof(hs);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff ffd6 	bl	800ebfe <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f001 f8f8 	bl	800fe48 <mem_free>
  }
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
 800ec6c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d106      	bne.n	800ec82 <http_write+0x22>
 800ec74:	4b2c      	ldr	r3, [pc, #176]	; (800ed28 <http_write+0xc8>)
 800ec76:	f240 2219 	movw	r2, #537	; 0x219
 800ec7a:	492c      	ldr	r1, [pc, #176]	; (800ed2c <http_write+0xcc>)
 800ec7c:	482c      	ldr	r0, [pc, #176]	; (800ed30 <http_write+0xd0>)
 800ec7e:	f00c fe35 	bl	801b8ec <printf>
  len = *length;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	881b      	ldrh	r3, [r3, #0]
 800ec86:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800ec88:	8afb      	ldrh	r3, [r7, #22]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d101      	bne.n	800ec92 <http_write+0x32>
    return ERR_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e045      	b.n	800ed1e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ec98:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800ec9a:	8aba      	ldrh	r2, [r7, #20]
 800ec9c:	8afb      	ldrh	r3, [r7, #22]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d201      	bcs.n	800eca6 <http_write+0x46>
    len = max_len;
 800eca2:	8abb      	ldrh	r3, [r7, #20]
 800eca4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecaa:	005b      	lsls	r3, r3, #1
 800ecac:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800ecae:	8afa      	ldrh	r2, [r7, #22]
 800ecb0:	8abb      	ldrh	r3, [r7, #20]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d901      	bls.n	800ecba <http_write+0x5a>
    len = max_len;
 800ecb6:	8abb      	ldrh	r3, [r7, #20]
 800ecb8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800ecba:	78fb      	ldrb	r3, [r7, #3]
 800ecbc:	8afa      	ldrh	r2, [r7, #22]
 800ecbe:	68b9      	ldr	r1, [r7, #8]
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f007 f8a9 	bl	8015e18 <tcp_write>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800ecca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecd2:	d10f      	bne.n	800ecf4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d004      	beq.n	800ece8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ece4:	2b08      	cmp	r3, #8
 800ece6:	d902      	bls.n	800ecee <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ece8:	2301      	movs	r3, #1
 800ecea:	82fb      	strh	r3, [r7, #22]
 800ecec:	e002      	b.n	800ecf4 <http_write+0x94>
      } else {
        len /= 2;
 800ecee:	8afb      	ldrh	r3, [r7, #22]
 800ecf0:	085b      	lsrs	r3, r3, #1
 800ecf2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ecf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecfc:	d102      	bne.n	800ed04 <http_write+0xa4>
 800ecfe:	8afb      	ldrh	r3, [r7, #22]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d8da      	bhi.n	800ecba <http_write+0x5a>

  if (err == ERR_OK) {
 800ed04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d103      	bne.n	800ed14 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	8afa      	ldrh	r2, [r7, #22]
 800ed10:	801a      	strh	r2, [r3, #0]
 800ed12:	e002      	b.n	800ed1a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ed1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3718      	adds	r7, #24
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	08025440 	.word	0x08025440
 800ed2c:	08025478 	.word	0x08025478
 800ed30:	08025488 	.word	0x08025488

0800ed34 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b086      	sub	sp, #24
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	4613      	mov	r3, r2
 800ed40:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00b      	beq.n	800ed60 <http_close_or_abort_conn+0x2c>
    if ((hs->post_content_len_left != 0)
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d007      	beq.n	800ed60 <http_close_or_abort_conn+0x2c>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800ed50:	4b1f      	ldr	r3, [pc, #124]	; (800edd0 <http_close_or_abort_conn+0x9c>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800ed56:	223f      	movs	r2, #63	; 0x3f
 800ed58:	491d      	ldr	r1, [pc, #116]	; (800edd0 <http_close_or_abort_conn+0x9c>)
 800ed5a:	68b8      	ldr	r0, [r7, #8]
 800ed5c:	f7f4 ff72 	bl	8003c44 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ed60:	2100      	movs	r1, #0
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f004 f91a 	bl	8012f9c <tcp_arg>
  altcp_recv(pcb, NULL);
 800ed68:	2100      	movs	r1, #0
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f004 f928 	bl	8012fc0 <tcp_recv>
  altcp_err(pcb, NULL);
 800ed70:	2100      	movs	r1, #0
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f004 f968 	bl	8013048 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ed78:	2200      	movs	r2, #0
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f004 f99d 	bl	80130bc <tcp_poll>
  altcp_sent(pcb, NULL);
 800ed82:	2100      	movs	r1, #0
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f004 f93d 	bl	8013004 <tcp_sent>
  if (hs != NULL) {
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <http_close_or_abort_conn+0x62>
    http_state_free(hs);
 800ed90:	68b8      	ldr	r0, [r7, #8]
 800ed92:	f7ff ff54 	bl	800ec3e <http_state_free>
  }

  if (abort_conn) {
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d004      	beq.n	800eda6 <http_close_or_abort_conn+0x72>
    altcp_abort(pcb);
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f003 f83f 	bl	8011e20 <tcp_abort>
    return ERR_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	e00f      	b.n	800edc6 <http_close_or_abort_conn+0x92>
  }
  err = altcp_close(pcb);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f002 fef4 	bl	8011b94 <tcp_close>
 800edac:	4603      	mov	r3, r0
 800edae:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800edb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d004      	beq.n	800edc2 <http_close_or_abort_conn+0x8e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800edb8:	2204      	movs	r2, #4
 800edba:	4906      	ldr	r1, [pc, #24]	; (800edd4 <http_close_or_abort_conn+0xa0>)
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f004 f97d 	bl	80130bc <tcp_poll>
  }
  return err;
 800edc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20004e84 	.word	0x20004e84
 800edd4:	0800f7a7 	.word	0x0800f7a7

0800edd8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ede2:	2200      	movs	r2, #0
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f7ff ffa4 	bl	800ed34 <http_close_or_abort_conn>
 800edec:	4603      	mov	r3, r0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800edf6:	b580      	push	{r7, lr}
 800edf8:	b082      	sub	sp, #8
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f7ff ffe8 	bl	800edd8 <http_close_conn>
  }
}
 800ee08:	bf00      	nop
 800ee0a:	3708      	adds	r7, #8
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	695b      	ldr	r3, [r3, #20]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d105      	bne.n	800ee2e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff ffe6 	bl	800edf6 <http_eof>
    return 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	e016      	b.n	800ee5c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff feb5 	bl	800eba2 <fs_bytes_left>
 800ee38:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	dc05      	bgt.n	800ee4c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7ff ffd7 	bl	800edf6 <http_eof>
    return 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e007      	b.n	800ee5c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ee4c:	4b05      	ldr	r3, [pc, #20]	; (800ee64 <http_check_eof+0x54>)
 800ee4e:	f240 429d 	movw	r2, #1181	; 0x49d
 800ee52:	4905      	ldr	r1, [pc, #20]	; (800ee68 <http_check_eof+0x58>)
 800ee54:	4805      	ldr	r0, [pc, #20]	; (800ee6c <http_check_eof+0x5c>)
 800ee56:	f00c fd49 	bl	801b8ec <printf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ee5a:	2301      	movs	r3, #1
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	08025440 	.word	0x08025440
 800ee68:	080254b0 	.word	0x080254b0
 800ee6c:	08025488 	.word	0x08025488

0800ee70 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d803      	bhi.n	800ee92 <http_send_data_nonssi+0x22>
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	e001      	b.n	800ee96 <http_send_data_nonssi+0x26>
 800ee92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee96:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	6999      	ldr	r1, [r3, #24]
 800ee9c:	f107 020c 	add.w	r2, r7, #12
 800eea0:	2300      	movs	r3, #0
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff fedc 	bl	800ec60 <http_write>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800eeac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10d      	bne.n	800eed0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	699b      	ldr	r3, [r3, #24]
 800eebc:	89ba      	ldrh	r2, [r7, #12]
 800eebe:	441a      	add	r2, r3
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec8:	89ba      	ldrh	r2, [r7, #12]
 800eeca:	1a9a      	subs	r2, r3, r2
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800eed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b084      	sub	sp, #16
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800eee4:	2300      	movs	r3, #0
 800eee6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <http_send+0x18>
    return 0;
 800eeee:	2300      	movs	r3, #0
 800eef0:	e025      	b.n	800ef3e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d108      	bne.n	800ef0c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800eefa:	6839      	ldr	r1, [r7, #0]
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7ff ff87 	bl	800ee10 <http_check_eof>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d101      	bne.n	800ef0c <http_send+0x32>
      return 0;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e018      	b.n	800ef3e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ef0c:	6839      	ldr	r1, [r7, #0]
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7ff ffae 	bl	800ee70 <http_send_data_nonssi>
 800ef14:	4603      	mov	r3, r0
 800ef16:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10d      	bne.n	800ef3c <http_send+0x62>
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	695b      	ldr	r3, [r3, #20]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7ff fe3c 	bl	800eba2 <fs_bytes_left>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dc05      	bgt.n	800ef3c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ef30:	6839      	ldr	r1, [r7, #0]
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff ff5f 	bl	800edf6 <http_eof>
    return 0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	e000      	b.n	800ef3e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ef3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
	...

0800ef48 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	4a1c      	ldr	r2, [pc, #112]	; (800efc8 <http_get_404_file+0x80>)
 800ef56:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	4610      	mov	r0, r2
 800ef62:	f7ff fdc3 	bl	800eaec <fs_open>
 800ef66:	4603      	mov	r3, r0
 800ef68:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ef6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d024      	beq.n	800efbc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	4a15      	ldr	r2, [pc, #84]	; (800efcc <http_get_404_file+0x84>)
 800ef76:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4610      	mov	r0, r2
 800ef82:	f7ff fdb3 	bl	800eaec <fs_open>
 800ef86:	4603      	mov	r3, r0
 800ef88:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ef8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d014      	beq.n	800efbc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	4a0e      	ldr	r2, [pc, #56]	; (800efd0 <http_get_404_file+0x88>)
 800ef96:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4610      	mov	r0, r2
 800efa2:	f7ff fda3 	bl	800eaec <fs_open>
 800efa6:	4603      	mov	r3, r0
 800efa8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800efaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d004      	beq.n	800efbc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	2200      	movs	r2, #0
 800efb6:	601a      	str	r2, [r3, #0]
        return NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	e000      	b.n	800efbe <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800efbc:	687b      	ldr	r3, [r7, #4]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
 800efc6:	bf00      	nop
 800efc8:	080254e8 	.word	0x080254e8
 800efcc:	080254f4 	.word	0x080254f4
 800efd0:	08025500 	.word	0x08025500

0800efd4 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800efdc:	4b08      	ldr	r3, [pc, #32]	; (800f000 <http_handle_post_finished+0x2c>)
 800efde:	2200      	movs	r2, #0
 800efe0:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800efe2:	223f      	movs	r2, #63	; 0x3f
 800efe4:	4906      	ldr	r1, [pc, #24]	; (800f000 <http_handle_post_finished+0x2c>)
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f4 fe2c 	bl	8003c44 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800efec:	2200      	movs	r2, #0
 800efee:	4904      	ldr	r1, [pc, #16]	; (800f000 <http_handle_post_finished+0x2c>)
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fa51 	bl	800f498 <http_find_file>
 800eff6:	4603      	mov	r3, r0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3708      	adds	r7, #8
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	20004e84 	.word	0x20004e84

0800f004 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d010      	beq.n	800f036 <http_post_rxpbuf+0x32>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	8912      	ldrh	r2, [r2, #8]
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d203      	bcs.n	800f028 <http_post_rxpbuf+0x24>
      hs->post_content_len_left = 0;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	62da      	str	r2, [r3, #44]	; 0x2c
 800f026:	e006      	b.n	800f036 <http_post_rxpbuf+0x32>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	8912      	ldrh	r2, [r2, #8]
 800f030:	1a9a      	subs	r2, r3, r2
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d006      	beq.n	800f04a <http_post_rxpbuf+0x46>
    err = httpd_post_receive_data(hs, p);
 800f03c:	6839      	ldr	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f7f4 fb00 	bl	8003644 <httpd_post_receive_data>
 800f044:	4603      	mov	r3, r0
 800f046:	73fb      	strb	r3, [r7, #15]
 800f048:	e001      	b.n	800f04e <http_post_rxpbuf+0x4a>
  } else {
    err = ERR_OK;
 800f04a:	2300      	movs	r3, #0
 800f04c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800f04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d002      	beq.n	800f05c <http_post_rxpbuf+0x58>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  if (hs->post_content_len_left == 0) {
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f060:	2b00      	cmp	r3, #0
 800f062:	d104      	bne.n	800f06e <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7ff ffb5 	bl	800efd4 <http_handle_post_finished>
 800f06a:	4603      	mov	r3, r0
 800f06c:	e000      	b.n	800f070 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b092      	sub	sp, #72	; 0x48
 800f07c:	af04      	add	r7, sp, #16
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
 800f084:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800f086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f088:	1c58      	adds	r0, r3, #1
 800f08a:	887a      	ldrh	r2, [r7, #2]
 800f08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f08e:	1c59      	adds	r1, r3, #1
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	1acb      	subs	r3, r1, r3
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	461a      	mov	r2, r3
 800f098:	4964      	ldr	r1, [pc, #400]	; (800f22c <http_post_request+0x1b4>)
 800f09a:	f000 fd33 	bl	800fb04 <lwip_strnstr>
 800f09e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800f0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	f000 80bc 	beq.w	800f220 <http_post_request+0x1a8>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800f0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0aa:	1c58      	adds	r0, r3, #1
 800f0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	495e      	ldr	r1, [pc, #376]	; (800f230 <http_post_request+0x1b8>)
 800f0b8:	f000 fd24 	bl	800fb04 <lwip_strnstr>
 800f0bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800f0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 80aa 	beq.w	800f21a <http_post_request+0x1a2>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	3310      	adds	r3, #16
 800f0ca:	220a      	movs	r2, #10
 800f0cc:	4959      	ldr	r1, [pc, #356]	; (800f234 <http_post_request+0x1bc>)
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fd18 	bl	800fb04 <lwip_strnstr>
 800f0d4:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 809e 	beq.w	800f21a <http_post_request+0x1a2>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800f0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800f0e4:	69f8      	ldr	r0, [r7, #28]
 800f0e6:	f00c f827 	bl	801b138 <atoi>
 800f0ea:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800f0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d10b      	bne.n	800f10a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b30      	cmp	r3, #48	; 0x30
 800f0f8:	d104      	bne.n	800f104 <http_post_request+0x8c>
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b0d      	cmp	r3, #13
 800f102:	d002      	beq.n	800f10a <http_post_request+0x92>
            content_len = -1;
 800f104:	f04f 33ff 	mov.w	r3, #4294967295
 800f108:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800f10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f2c0 8081 	blt.w	800f214 <http_post_request+0x19c>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800f112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f114:	3301      	adds	r3, #1
 800f116:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800f118:	887a      	ldrh	r2, [r7, #2]
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	1d19      	adds	r1, r3, #4
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	1acb      	subs	r3, r1, r3
 800f122:	429a      	cmp	r2, r3
 800f124:	db05      	blt.n	800f132 <http_post_request+0xba>
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	1d1a      	adds	r2, r3, #4
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	b29b      	uxth	r3, r3
 800f130:	e000      	b.n	800f134 <http_post_request+0xbc>
 800f132:	887b      	ldrh	r3, [r7, #2]
 800f134:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800f136:	887a      	ldrh	r2, [r7, #2]
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	1d19      	adds	r1, r3, #4
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	1acb      	subs	r3, r1, r3
 800f140:	429a      	cmp	r2, r3
 800f142:	db05      	blt.n	800f150 <http_post_request+0xd8>
 800f144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f146:	1d1a      	adds	r2, r3, #4
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	1ad3      	subs	r3, r2, r3
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	e000      	b.n	800f152 <http_post_request+0xda>
 800f150:	887b      	ldrh	r3, [r7, #2]
 800f152:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800f154:	2301      	movs	r3, #1
 800f156:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800f158:	4b37      	ldr	r3, [pc, #220]	; (800f238 <http_post_request+0x1c0>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800f15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f160:	2200      	movs	r2, #0
 800f162:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800f164:	8aba      	ldrh	r2, [r7, #20]
 800f166:	f107 0312 	add.w	r3, r7, #18
 800f16a:	9303      	str	r3, [sp, #12]
 800f16c:	233f      	movs	r3, #63	; 0x3f
 800f16e:	9302      	str	r3, [sp, #8]
 800f170:	4b31      	ldr	r3, [pc, #196]	; (800f238 <http_post_request+0x1c0>)
 800f172:	9301      	str	r3, [sp, #4]
 800f174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	4613      	mov	r3, r2
 800f17a:	69ba      	ldr	r2, [r7, #24]
 800f17c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f17e:	68b8      	ldr	r0, [r7, #8]
 800f180:	f7f4 fa22 	bl	80035c8 <httpd_post_begin>
 800f184:	4603      	mov	r3, r0
 800f186:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800f188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d13a      	bne.n	800f206 <http_post_request+0x18e>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800f194:	8afb      	ldrh	r3, [r7, #22]
 800f196:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800f198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800f19e:	e007      	b.n	800f1b0 <http_post_request+0x138>
              start_offset -= q->len;
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	895b      	ldrh	r3, [r3, #10]
 800f1a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d004      	beq.n	800f1c0 <http_post_request+0x148>
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	895b      	ldrh	r3, [r3, #10]
 800f1ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d2ef      	bcs.n	800f1a0 <http_post_request+0x128>
            }
            if (q != NULL) {
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00d      	beq.n	800f1e2 <http_post_request+0x16a>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800f1c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1cc:	f001 ffa2 	bl	8011114 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800f1d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1d2:	f002 f8cb 	bl	801136c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800f1d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1d8:	68b8      	ldr	r0, [r7, #8]
 800f1da:	f7ff ff13 	bl	800f004 <http_post_rxpbuf>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	e020      	b.n	800f224 <http_post_request+0x1ac>
            } else if (hs->post_content_len_left == 0) {
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10b      	bne.n	800f202 <http_post_request+0x18a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800f1ea:	2241      	movs	r2, #65	; 0x41
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	f001 fd32 	bl	8010c58 <pbuf_alloc>
 800f1f4:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800f1f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1f8:	68b8      	ldr	r0, [r7, #8]
 800f1fa:	f7ff ff03 	bl	800f004 <http_post_rxpbuf>
 800f1fe:	4603      	mov	r3, r0
 800f200:	e010      	b.n	800f224 <http_post_request+0x1ac>
            } else {
              return ERR_OK;
 800f202:	2300      	movs	r3, #0
 800f204:	e00e      	b.n	800f224 <http_post_request+0x1ac>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800f206:	2200      	movs	r2, #0
 800f208:	490b      	ldr	r1, [pc, #44]	; (800f238 <http_post_request+0x1c0>)
 800f20a:	68b8      	ldr	r0, [r7, #8]
 800f20c:	f000 f944 	bl	800f498 <http_find_file>
 800f210:	4603      	mov	r3, r0
 800f212:	e007      	b.n	800f224 <http_post_request+0x1ac>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800f214:	f06f 030f 	mvn.w	r3, #15
 800f218:	e004      	b.n	800f224 <http_post_request+0x1ac>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800f21a:	f06f 030f 	mvn.w	r3, #15
 800f21e:	e001      	b.n	800f224 <http_post_request+0x1ac>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800f220:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800f224:	4618      	mov	r0, r3
 800f226:	3738      	adds	r7, #56	; 0x38
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	0802550c 	.word	0x0802550c
 800f230:	08025514 	.word	0x08025514
 800f234:	08025528 	.word	0x08025528
 800f238:	20004e84 	.word	0x20004e84

0800f23c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b092      	sub	sp, #72	; 0x48
 800f240:	af02      	add	r7, sp, #8
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d106      	bne.n	800f260 <http_parse_request+0x24>
 800f252:	4b87      	ldr	r3, [pc, #540]	; (800f470 <http_parse_request+0x234>)
 800f254:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800f258:	4986      	ldr	r1, [pc, #536]	; (800f474 <http_parse_request+0x238>)
 800f25a:	4887      	ldr	r0, [pc, #540]	; (800f478 <http_parse_request+0x23c>)
 800f25c:	f00c fb46 	bl	801b8ec <printf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d106      	bne.n	800f274 <http_parse_request+0x38>
 800f266:	4b82      	ldr	r3, [pc, #520]	; (800f470 <http_parse_request+0x234>)
 800f268:	f240 72af 	movw	r2, #1967	; 0x7af
 800f26c:	4983      	ldr	r1, [pc, #524]	; (800f47c <http_parse_request+0x240>)
 800f26e:	4882      	ldr	r0, [pc, #520]	; (800f478 <http_parse_request+0x23c>)
 800f270:	f00c fb3c 	bl	801b8ec <printf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d103      	bne.n	800f284 <http_parse_request+0x48>
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	699b      	ldr	r3, [r3, #24]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800f284:	f06f 0307 	mvn.w	r3, #7
 800f288:	e0ed      	b.n	800f466 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d103      	bne.n	800f29a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f296:	621a      	str	r2, [r3, #32]
 800f298:	e005      	b.n	800f2a6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f002 f88b 	bl	80113bc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800f2a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2a8:	f002 f860 	bl	801136c <pbuf_ref>

  if (hs->req->next != NULL) {
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	6a1b      	ldr	r3, [r3, #32]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d012      	beq.n	800f2dc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	891b      	ldrh	r3, [r3, #8]
 800f2bc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	bf28      	it	cs
 800f2c4:	4613      	movcs	r3, r2
 800f2c6:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	6a18      	ldr	r0, [r3, #32]
 800f2cc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	496b      	ldr	r1, [pc, #428]	; (800f480 <http_parse_request+0x244>)
 800f2d2:	f002 f9ab 	bl	801162c <pbuf_copy_partial>
    data = httpd_req_buf;
 800f2d6:	4b6a      	ldr	r3, [pc, #424]	; (800f480 <http_parse_request+0x244>)
 800f2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2da:	e005      	b.n	800f2e8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e4:	895b      	ldrh	r3, [r3, #10]
 800f2e6:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800f2e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f2ea:	2b06      	cmp	r3, #6
 800f2ec:	f240 80a1 	bls.w	800f432 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800f2f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	4963      	ldr	r1, [pc, #396]	; (800f484 <http_parse_request+0x248>)
 800f2f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f2f8:	f000 fc04 	bl	800fb04 <lwip_strnstr>
 800f2fc:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	2b00      	cmp	r3, #0
 800f302:	f000 8096 	beq.w	800f432 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800f306:	2300      	movs	r3, #0
 800f308:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800f30e:	2204      	movs	r2, #4
 800f310:	495d      	ldr	r1, [pc, #372]	; (800f488 <http_parse_request+0x24c>)
 800f312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f314:	f00c fb7b 	bl	801ba0e <strncmp>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d103      	bne.n	800f326 <http_parse_request+0xea>
        sp1 = data + 3;
 800f31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f320:	3303      	adds	r3, #3
 800f322:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f324:	e014      	b.n	800f350 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800f326:	2205      	movs	r2, #5
 800f328:	4958      	ldr	r1, [pc, #352]	; (800f48c <http_parse_request+0x250>)
 800f32a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f32c:	f00c fb6f 	bl	801ba0e <strncmp>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d105      	bne.n	800f342 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800f336:	2301      	movs	r3, #1
 800f338:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800f33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f33c:	3304      	adds	r3, #4
 800f33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f340:	e006      	b.n	800f350 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800f342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f344:	3304      	adds	r3, #4
 800f346:	2200      	movs	r2, #0
 800f348:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800f34a:	f06f 030f 	mvn.w	r3, #15
 800f34e:	e08a      	b.n	800f466 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	1c5a      	adds	r2, r3, #1
 800f354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	b29b      	uxth	r3, r3
 800f35a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	3301      	adds	r3, #1
 800f364:	8bfa      	ldrh	r2, [r7, #30]
 800f366:	494a      	ldr	r1, [pc, #296]	; (800f490 <http_parse_request+0x254>)
 800f368:	4618      	mov	r0, r3
 800f36a:	f000 fbcb 	bl	800fb04 <lwip_strnstr>
 800f36e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	2b00      	cmp	r3, #0
 800f374:	d10c      	bne.n	800f390 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800f376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f378:	3301      	adds	r3, #1
 800f37a:	8bfa      	ldrh	r2, [r7, #30]
 800f37c:	4941      	ldr	r1, [pc, #260]	; (800f484 <http_parse_request+0x248>)
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 fbc0 	bl	800fb04 <lwip_strnstr>
 800f384:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800f386:	2301      	movs	r3, #1
 800f388:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800f38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d163      	bne.n	800f458 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	3301      	adds	r3, #1
 800f394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f396:	1ad3      	subs	r3, r2, r3
 800f398:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800f39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d048      	beq.n	800f432 <http_parse_request+0x1f6>
 800f3a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d944      	bls.n	800f432 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800f3a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	4939      	ldr	r1, [pc, #228]	; (800f494 <http_parse_request+0x258>)
 800f3ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f3b0:	f000 fba8 	bl	800fb04 <lwip_strnstr>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d03b      	beq.n	800f432 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	3301      	adds	r3, #1
 800f3be:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800f3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800f3c6:	8bbb      	ldrh	r3, [r7, #28]
 800f3c8:	69ba      	ldr	r2, [r7, #24]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800f3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d026      	beq.n	800f424 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	6a1b      	ldr	r3, [r3, #32]
 800f3da:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800f3dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	9301      	str	r3, [sp, #4]
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3ea:	68b9      	ldr	r1, [r7, #8]
 800f3ec:	6978      	ldr	r0, [r7, #20]
 800f3ee:	f7ff fe43 	bl	800f078 <http_post_request>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800f3f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00a      	beq.n	800f414 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800f3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f400:	2220      	movs	r2, #32
 800f402:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800f404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f406:	2220      	movs	r2, #32
 800f408:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800f40a:	8bbb      	ldrh	r3, [r7, #28]
 800f40c:	69ba      	ldr	r2, [r7, #24]
 800f40e:	4413      	add	r3, r2
 800f410:	2220      	movs	r2, #32
 800f412:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800f414:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f418:	f113 0f10 	cmn.w	r3, #16
 800f41c:	d01e      	beq.n	800f45c <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800f41e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f422:	e020      	b.n	800f466 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800f424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f426:	69b9      	ldr	r1, [r7, #24]
 800f428:	68b8      	ldr	r0, [r7, #8]
 800f42a:	f000 f835 	bl	800f498 <http_find_file>
 800f42e:	4603      	mov	r3, r0
 800f430:	e019      	b.n	800f466 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	6a1b      	ldr	r3, [r3, #32]
 800f436:	4618      	mov	r0, r3
 800f438:	f001 ff80 	bl	801133c <pbuf_clen>
 800f43c:	4603      	mov	r3, r0
 800f43e:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	6a1b      	ldr	r3, [r3, #32]
 800f444:	891b      	ldrh	r3, [r3, #8]
 800f446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f44a:	d209      	bcs.n	800f460 <http_parse_request+0x224>
 800f44c:	8a3b      	ldrh	r3, [r7, #16]
 800f44e:	2b05      	cmp	r3, #5
 800f450:	d806      	bhi.n	800f460 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800f452:	f06f 0304 	mvn.w	r3, #4
 800f456:	e006      	b.n	800f466 <http_parse_request+0x22a>
          goto badrequest;
 800f458:	bf00      	nop
 800f45a:	e002      	b.n	800f462 <http_parse_request+0x226>
              goto badrequest;
 800f45c:	bf00      	nop
 800f45e:	e000      	b.n	800f462 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800f460:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800f462:	f06f 030f 	mvn.w	r3, #15
  }
}
 800f466:	4618      	mov	r0, r3
 800f468:	3740      	adds	r7, #64	; 0x40
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	08025440 	.word	0x08025440
 800f474:	0802552c 	.word	0x0802552c
 800f478:	08025488 	.word	0x08025488
 800f47c:	08025538 	.word	0x08025538
 800f480:	20004a84 	.word	0x20004a84
 800f484:	08025528 	.word	0x08025528
 800f488:	08025544 	.word	0x08025544
 800f48c:	0802554c 	.word	0x0802554c
 800f490:	08025554 	.word	0x08025554
 800f494:	0802550c 	.word	0x0802550c

0800f498 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b092      	sub	sp, #72	; 0x48
 800f49c:	af02      	add	r7, sp, #8
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7f0 feb5 	bl	8000224 <strlen>
 800f4ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d06b      	beq.n	800f59a <http_find_file+0x102>
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	4413      	add	r3, r2
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b2f      	cmp	r3, #47	; 0x2f
 800f4ce:	d164      	bne.n	800f59a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f4d0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f4d2:	4a53      	ldr	r2, [pc, #332]	; (800f620 <http_find_file+0x188>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d102      	bne.n	800f4de <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d15d      	bne.n	800f59a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800f4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	2b3f      	cmp	r3, #63	; 0x3f
 800f4e4:	bf28      	it	cs
 800f4e6:	233f      	movcs	r3, #63	; 0x3f
 800f4e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00a      	beq.n	800f506 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	484a      	ldr	r0, [pc, #296]	; (800f620 <http_find_file+0x188>)
 800f4f8:	f00b ff4a 	bl	801b390 <memcpy>
      http_uri_buf[copy_len] = 0;
 800f4fc:	4a48      	ldr	r2, [pc, #288]	; (800f620 <http_find_file+0x188>)
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	4413      	add	r3, r2
 800f502:	2200      	movs	r2, #0
 800f504:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f506:	2300      	movs	r3, #0
 800f508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f50a:	e043      	b.n	800f594 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d028      	beq.n	800f564 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800f518:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800f51a:	6a3b      	ldr	r3, [r7, #32]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d01e      	beq.n	800f55e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800f520:	4a40      	ldr	r2, [pc, #256]	; (800f624 <http_find_file+0x18c>)
 800f522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f524:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7f0 fe7b 	bl	8000224 <strlen>
 800f52e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800f530:	69fa      	ldr	r2, [r7, #28]
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	4293      	cmp	r3, r2
 800f536:	bf28      	it	cs
 800f538:	4613      	movcs	r3, r2
 800f53a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53e:	4a38      	ldr	r2, [pc, #224]	; (800f620 <http_find_file+0x188>)
 800f540:	1898      	adds	r0, r3, r2
 800f542:	4a38      	ldr	r2, [pc, #224]	; (800f624 <http_find_file+0x18c>)
 800f544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f546:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f54a:	69ba      	ldr	r2, [r7, #24]
 800f54c:	4619      	mov	r1, r3
 800f54e:	f00b ff1f 	bl	801b390 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800f552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	4413      	add	r3, r2
 800f558:	4a31      	ldr	r2, [pc, #196]	; (800f620 <http_find_file+0x188>)
 800f55a:	2100      	movs	r1, #0
 800f55c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800f55e:	4b30      	ldr	r3, [pc, #192]	; (800f620 <http_find_file+0x188>)
 800f560:	633b      	str	r3, [r7, #48]	; 0x30
 800f562:	e004      	b.n	800f56e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800f564:	4a2f      	ldr	r2, [pc, #188]	; (800f624 <http_find_file+0x18c>)
 800f566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f56c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f572:	4618      	mov	r0, r3
 800f574:	f7ff faba 	bl	800eaec <fs_open>
 800f578:	4603      	mov	r3, r0
 800f57a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800f57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d104      	bne.n	800f58e <http_find_file+0xf6>
        uri = file_name;
 800f584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f586:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800f58c:	e005      	b.n	800f59a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f590:	3301      	adds	r3, #1
 800f592:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f596:	2b04      	cmp	r3, #4
 800f598:	d9b8      	bls.n	800f50c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800f59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d124      	bne.n	800f5ea <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	213f      	movs	r1, #63	; 0x3f
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f00c fa25 	bl	801b9f4 <strchr>
 800f5aa:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800f5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d005      	beq.n	800f5be <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800f5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	701a      	strb	r2, [r3, #0]
      params++;
 800f5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	4611      	mov	r1, r2
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7ff fa91 	bl	800eaec <fs_open>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800f5ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d102      	bne.n	800f5dc <http_find_file+0x144>
      file = &hs->file_handle;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5da:	e006      	b.n	800f5ea <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800f5dc:	f107 0308 	add.w	r3, r7, #8
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	f7ff fcb0 	bl	800ef48 <http_get_404_file>
 800f5e8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d106      	bne.n	800f5fe <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800f5f0:	f107 0308 	add.w	r3, r7, #8
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f7ff fca6 	bl	800ef48 <http_get_404_file>
 800f5fc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	4613      	mov	r3, r2
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 f809 	bl	800f628 <http_init_file>
 800f616:	4603      	mov	r3, r0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3740      	adds	r7, #64	; 0x40
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	20004e84 	.word	0x20004e84
 800f624:	08029ddc 	.word	0x08029ddc

0800f628 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b086      	sub	sp, #24
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	60f8      	str	r0, [r7, #12]
 800f630:	60b9      	str	r1, [r7, #8]
 800f632:	607a      	str	r2, [r7, #4]
 800f634:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d068      	beq.n	800f70e <http_init_file+0xe6>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d106      	bne.n	800f652 <http_init_file+0x2a>
 800f644:	4b3b      	ldr	r3, [pc, #236]	; (800f734 <http_init_file+0x10c>)
 800f646:	f640 120b 	movw	r2, #2315	; 0x90b
 800f64a:	493b      	ldr	r1, [pc, #236]	; (800f738 <http_init_file+0x110>)
 800f64c:	483b      	ldr	r0, [pc, #236]	; (800f73c <http_init_file+0x114>)
 800f64e:	f00c f94d 	bl	801b8ec <printf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	da06      	bge.n	800f676 <http_init_file+0x4e>
 800f668:	4b32      	ldr	r3, [pc, #200]	; (800f734 <http_init_file+0x10c>)
 800f66a:	f640 1234 	movw	r2, #2356	; 0x934
 800f66e:	4934      	ldr	r1, [pc, #208]	; (800f740 <http_init_file+0x118>)
 800f670:	4832      	ldr	r0, [pc, #200]	; (800f73c <http_init_file+0x114>)
 800f672:	f00c f93b 	bl	801b8ec <printf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	7c5b      	ldrb	r3, [r3, #17]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d007      	beq.n	800f68e <http_init_file+0x66>
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d103      	bne.n	800f68e <http_init_file+0x66>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2200      	movs	r2, #0
 800f68a:	625a      	str	r2, [r3, #36]	; 0x24
 800f68c:	e004      	b.n	800f698 <http_init_file+0x70>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	461a      	mov	r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	7c1b      	ldrb	r3, [r3, #16]
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <http_init_file+0x94>
 800f6ae:	4b21      	ldr	r3, [pc, #132]	; (800f734 <http_init_file+0x10c>)
 800f6b0:	f640 1243 	movw	r2, #2371	; 0x943
 800f6b4:	4923      	ldr	r1, [pc, #140]	; (800f744 <http_init_file+0x11c>)
 800f6b6:	4821      	ldr	r0, [pc, #132]	; (800f73c <http_init_file+0x114>)
 800f6b8:	f00c f918 	bl	801b8ec <printf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d032      	beq.n	800f728 <http_init_file+0x100>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	695b      	ldr	r3, [r3, #20]
 800f6c6:	7c1b      	ldrb	r3, [r3, #16]
 800f6c8:	f003 0301 	and.w	r3, r3, #1
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d02b      	beq.n	800f728 <http_init_file+0x100>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6998      	ldr	r0, [r3, #24]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d8:	461a      	mov	r2, r3
 800f6da:	491b      	ldr	r1, [pc, #108]	; (800f748 <http_init_file+0x120>)
 800f6dc:	f000 fa12 	bl	800fb04 <lwip_strnstr>
 800f6e0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d01f      	beq.n	800f728 <http_init_file+0x100>
        int diff = file_start + 4 - hs->file;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	1d1a      	adds	r2, r3, #4
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	699a      	ldr	r2, [r3, #24]
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	441a      	add	r2, r3
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	1ad2      	subs	r2, r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	625a      	str	r2, [r3, #36]	; 0x24
 800f70c:	e00c      	b.n	800f728 <http_init_file+0x100>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	2200      	movs	r2, #0
 800f712:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2200      	movs	r2, #0
 800f718:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3718      	adds	r7, #24
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	08025440 	.word	0x08025440
 800f738:	08025558 	.word	0x08025558
 800f73c:	08025488 	.word	0x08025488
 800f740:	0802556c 	.word	0x0802556c
 800f744:	0802558c 	.word	0x0802558c
 800f748:	0802550c 	.word	0x0802550c

0800f74c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <http_err+0x1c>
    http_state_free(hs);
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f7ff fa6b 	bl	800ec3e <http_state_free>
  }
}
 800f768:	bf00      	nop
 800f76a:	3710      	adds	r7, #16
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b086      	sub	sp, #24
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	4613      	mov	r3, r2
 800f77c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d101      	bne.n	800f78c <http_sent+0x1c>
    return ERR_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	e008      	b.n	800f79e <http_sent+0x2e>
  }

  hs->retries = 0;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	2200      	movs	r2, #0
 800f790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800f794:	6979      	ldr	r1, [r7, #20]
 800f796:	68b8      	ldr	r0, [r7, #8]
 800f798:	f7ff fb9f 	bl	800eeda <http_send>

  return ERR_OK;
 800f79c:	2300      	movs	r3, #0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3718      	adds	r7, #24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b084      	sub	sp, #16
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d107      	bne.n	800f7ca <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	6838      	ldr	r0, [r7, #0]
 800f7be:	f7ff fb0b 	bl	800edd8 <http_close_conn>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e021      	b.n	800f80e <http_poll+0x68>
  } else {
    hs->retries++;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	d105      	bne.n	800f7f0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800f7e4:	68f9      	ldr	r1, [r7, #12]
 800f7e6:	6838      	ldr	r0, [r7, #0]
 800f7e8:	f7ff faf6 	bl	800edd8 <http_close_conn>
      return ERR_OK;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	e00e      	b.n	800f80e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d009      	beq.n	800f80c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800f7f8:	68f9      	ldr	r1, [r7, #12]
 800f7fa:	6838      	ldr	r0, [r7, #0]
 800f7fc:	f7ff fb6d 	bl	800eeda <http_send>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800f806:	6838      	ldr	r0, [r7, #0]
 800f808:	f007 f8f0 	bl	80169ec <tcp_output>
      }
    }
  }

  return ERR_OK;
 800f80c:	2300      	movs	r3, #0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b086      	sub	sp, #24
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
 800f824:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800f82a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d105      	bne.n	800f83e <http_recv+0x26>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d002      	beq.n	800f83e <http_recv+0x26>
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d111      	bne.n	800f862 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d008      	beq.n	800f856 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	891b      	ldrh	r3, [r3, #8]
 800f848:	4619      	mov	r1, r3
 800f84a:	68b8      	ldr	r0, [r7, #8]
 800f84c:	f002 fcc2 	bl	80121d4 <tcp_recved>
      pbuf_free(p);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f001 fce5 	bl	8011220 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800f856:	6979      	ldr	r1, [r7, #20]
 800f858:	68b8      	ldr	r0, [r7, #8]
 800f85a:	f7ff fabd 	bl	800edd8 <http_close_conn>
    return ERR_OK;
 800f85e:	2300      	movs	r3, #0
 800f860:	e06f      	b.n	800f942 <http_recv+0x12a>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	891b      	ldrh	r3, [r3, #8]
 800f866:	4619      	mov	r1, r3
 800f868:	68b8      	ldr	r0, [r7, #8]
 800f86a:	f002 fcb3 	bl	80121d4 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f872:	2b00      	cmp	r3, #0
 800f874:	d011      	beq.n	800f89a <http_recv+0x82>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800f87e:	6879      	ldr	r1, [r7, #4]
 800f880:	6978      	ldr	r0, [r7, #20]
 800f882:	f7ff fbbf 	bl	800f004 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d103      	bne.n	800f896 <http_recv+0x7e>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800f88e:	6979      	ldr	r1, [r7, #20]
 800f890:	68b8      	ldr	r0, [r7, #8]
 800f892:	f7ff fb22 	bl	800eeda <http_send>
    }
    return ERR_OK;
 800f896:	2300      	movs	r3, #0
 800f898:	e053      	b.n	800f942 <http_recv+0x12a>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d14b      	bne.n	800f93a <http_recv+0x122>
      err_t parsed = http_parse_request(p, hs, pcb);
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	6979      	ldr	r1, [r7, #20]
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7ff fcc8 	bl	800f23c <http_parse_request>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800f8b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d015      	beq.n	800f8e4 <http_recv+0xcc>
 800f8b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8bc:	f113 0f05 	cmn.w	r3, #5
 800f8c0:	d010      	beq.n	800f8e4 <http_recv+0xcc>
 800f8c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8c6:	f113 0f10 	cmn.w	r3, #16
 800f8ca:	d00b      	beq.n	800f8e4 <http_recv+0xcc>
 800f8cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8d0:	f113 0f08 	cmn.w	r3, #8
 800f8d4:	d006      	beq.n	800f8e4 <http_recv+0xcc>
 800f8d6:	4b1d      	ldr	r3, [pc, #116]	; (800f94c <http_recv+0x134>)
 800f8d8:	f640 2204 	movw	r2, #2564	; 0xa04
 800f8dc:	491c      	ldr	r1, [pc, #112]	; (800f950 <http_recv+0x138>)
 800f8de:	481d      	ldr	r0, [pc, #116]	; (800f954 <http_recv+0x13c>)
 800f8e0:	f00c f804 	bl	801b8ec <printf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800f8e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8e8:	f113 0f05 	cmn.w	r3, #5
 800f8ec:	d00b      	beq.n	800f906 <http_recv+0xee>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	6a1b      	ldr	r3, [r3, #32]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d007      	beq.n	800f906 <http_recv+0xee>
          pbuf_free(hs->req);
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f001 fc90 	bl	8011220 <pbuf_free>
          hs->req = NULL;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2200      	movs	r2, #0
 800f904:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f001 fc8a 	bl	8011220 <pbuf_free>
      if (parsed == ERR_OK) {
 800f90c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d108      	bne.n	800f926 <http_recv+0x10e>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d111      	bne.n	800f940 <http_recv+0x128>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800f91c:	6979      	ldr	r1, [r7, #20]
 800f91e:	68b8      	ldr	r0, [r7, #8]
 800f920:	f7ff fadb 	bl	800eeda <http_send>
 800f924:	e00c      	b.n	800f940 <http_recv+0x128>
        }
      } else if (parsed == ERR_ARG) {
 800f926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f92a:	f113 0f10 	cmn.w	r3, #16
 800f92e:	d107      	bne.n	800f940 <http_recv+0x128>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800f930:	6979      	ldr	r1, [r7, #20]
 800f932:	68b8      	ldr	r0, [r7, #8]
 800f934:	f7ff fa50 	bl	800edd8 <http_close_conn>
 800f938:	e002      	b.n	800f940 <http_recv+0x128>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f001 fc70 	bl	8011220 <pbuf_free>
    }
  }
  return ERR_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3718      	adds	r7, #24
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	08025440 	.word	0x08025440
 800f950:	080255b8 	.word	0x080255b8
 800f954:	08025488 	.word	0x08025488

0800f958 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	4613      	mov	r3, r2
 800f964:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800f966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d102      	bne.n	800f974 <http_accept+0x1c>
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d102      	bne.n	800f97a <http_accept+0x22>
    return ERR_VAL;
 800f974:	f06f 0305 	mvn.w	r3, #5
 800f978:	e025      	b.n	800f9c6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f97a:	2101      	movs	r1, #1
 800f97c:	68b8      	ldr	r0, [r7, #8]
 800f97e:	f003 f90d 	bl	8012b9c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800f982:	f7ff f92a 	bl	800ebda <http_state_alloc>
 800f986:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d102      	bne.n	800f994 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800f98e:	f04f 33ff 	mov.w	r3, #4294967295
 800f992:	e018      	b.n	800f9c6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800f99a:	6979      	ldr	r1, [r7, #20]
 800f99c:	68b8      	ldr	r0, [r7, #8]
 800f99e:	f003 fafd 	bl	8012f9c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800f9a2:	490b      	ldr	r1, [pc, #44]	; (800f9d0 <http_accept+0x78>)
 800f9a4:	68b8      	ldr	r0, [r7, #8]
 800f9a6:	f003 fb0b 	bl	8012fc0 <tcp_recv>
  altcp_err(pcb, http_err);
 800f9aa:	490a      	ldr	r1, [pc, #40]	; (800f9d4 <http_accept+0x7c>)
 800f9ac:	68b8      	ldr	r0, [r7, #8]
 800f9ae:	f003 fb4b 	bl	8013048 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f9b2:	2204      	movs	r2, #4
 800f9b4:	4908      	ldr	r1, [pc, #32]	; (800f9d8 <http_accept+0x80>)
 800f9b6:	68b8      	ldr	r0, [r7, #8]
 800f9b8:	f003 fb80 	bl	80130bc <tcp_poll>
  altcp_sent(pcb, http_sent);
 800f9bc:	4907      	ldr	r1, [pc, #28]	; (800f9dc <http_accept+0x84>)
 800f9be:	68b8      	ldr	r0, [r7, #8]
 800f9c0:	f003 fb20 	bl	8013004 <tcp_sent>

  return ERR_OK;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3718      	adds	r7, #24
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	0800f819 	.word	0x0800f819
 800f9d4:	0800f74d 	.word	0x0800f74d
 800f9d8:	0800f7a7 	.word	0x0800f7a7
 800f9dc:	0800f771 	.word	0x0800f771

0800f9e0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d029      	beq.n	800fa46 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f9f2:	2101      	movs	r1, #1
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f003 f8d1 	bl	8012b9c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800f9fa:	887b      	ldrh	r3, [r7, #2]
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	4914      	ldr	r1, [pc, #80]	; (800fa50 <httpd_init_pcb+0x70>)
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f002 fa19 	bl	8011e38 <tcp_bind>
 800fa06:	4603      	mov	r3, r0
 800fa08:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800fa0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d006      	beq.n	800fa20 <httpd_init_pcb+0x40>
 800fa12:	4b10      	ldr	r3, [pc, #64]	; (800fa54 <httpd_init_pcb+0x74>)
 800fa14:	f640 2257 	movw	r2, #2647	; 0xa57
 800fa18:	490f      	ldr	r1, [pc, #60]	; (800fa58 <httpd_init_pcb+0x78>)
 800fa1a:	4810      	ldr	r0, [pc, #64]	; (800fa5c <httpd_init_pcb+0x7c>)
 800fa1c:	f00b ff66 	bl	801b8ec <printf>
    pcb = altcp_listen(pcb);
 800fa20:	21ff      	movs	r1, #255	; 0xff
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f002 fac0 	bl	8011fa8 <tcp_listen_with_backlog>
 800fa28:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d106      	bne.n	800fa3e <httpd_init_pcb+0x5e>
 800fa30:	4b08      	ldr	r3, [pc, #32]	; (800fa54 <httpd_init_pcb+0x74>)
 800fa32:	f640 2259 	movw	r2, #2649	; 0xa59
 800fa36:	490a      	ldr	r1, [pc, #40]	; (800fa60 <httpd_init_pcb+0x80>)
 800fa38:	4808      	ldr	r0, [pc, #32]	; (800fa5c <httpd_init_pcb+0x7c>)
 800fa3a:	f00b ff57 	bl	801b8ec <printf>
    altcp_accept(pcb, http_accept);
 800fa3e:	4909      	ldr	r1, [pc, #36]	; (800fa64 <httpd_init_pcb+0x84>)
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f003 fb23 	bl	801308c <tcp_accept>
  }
}
 800fa46:	bf00      	nop
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	08029f14 	.word	0x08029f14
 800fa54:	08025440 	.word	0x08025440
 800fa58:	080255e4 	.word	0x080255e4
 800fa5c:	08025488 	.word	0x08025488
 800fa60:	08025600 	.word	0x08025600
 800fa64:	0800f959 	.word	0x0800f959

0800fa68 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800fa6e:	202e      	movs	r0, #46	; 0x2e
 800fa70:	f003 fa86 	bl	8012f80 <tcp_new_ip_type>
 800fa74:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d106      	bne.n	800fa8a <httpd_init+0x22>
 800fa7c:	4b07      	ldr	r3, [pc, #28]	; (800fa9c <httpd_init+0x34>)
 800fa7e:	f640 2272 	movw	r2, #2674	; 0xa72
 800fa82:	4907      	ldr	r1, [pc, #28]	; (800faa0 <httpd_init+0x38>)
 800fa84:	4807      	ldr	r0, [pc, #28]	; (800faa4 <httpd_init+0x3c>)
 800fa86:	f00b ff31 	bl	801b8ec <printf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800fa8a:	2150      	movs	r1, #80	; 0x50
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff ffa7 	bl	800f9e0 <httpd_init_pcb>
}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	08025440 	.word	0x08025440
 800faa0:	08025620 	.word	0x08025620
 800faa4:	08025488 	.word	0x08025488

0800faa8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fab2:	88fb      	ldrh	r3, [r7, #6]
 800fab4:	021b      	lsls	r3, r3, #8
 800fab6:	b21a      	sxth	r2, r3
 800fab8:	88fb      	ldrh	r3, [r7, #6]
 800faba:	0a1b      	lsrs	r3, r3, #8
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	b21b      	sxth	r3, r3
 800fac0:	4313      	orrs	r3, r2
 800fac2:	b21b      	sxth	r3, r3
 800fac4:	b29b      	uxth	r3, r3
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fad2:	b480      	push	{r7}
 800fad4:	b083      	sub	sp, #12
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	061a      	lsls	r2, r3, #24
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	021b      	lsls	r3, r3, #8
 800fae2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fae6:	431a      	orrs	r2, r3
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	0a1b      	lsrs	r3, r3, #8
 800faec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800faf0:	431a      	orrs	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	0e1b      	lsrs	r3, r3, #24
 800faf6:	4313      	orrs	r3, r2
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	370c      	adds	r7, #12
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800fb10:	68b8      	ldr	r0, [r7, #8]
 800fb12:	f7f0 fb87 	bl	8000224 <strlen>
 800fb16:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d101      	bne.n	800fb22 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	e022      	b.n	800fb68 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	617b      	str	r3, [r7, #20]
 800fb26:	e012      	b.n	800fb4e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	781a      	ldrb	r2, [r3, #0]
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d109      	bne.n	800fb48 <lwip_strnstr+0x44>
 800fb34:	693a      	ldr	r2, [r7, #16]
 800fb36:	68b9      	ldr	r1, [r7, #8]
 800fb38:	6978      	ldr	r0, [r7, #20]
 800fb3a:	f00b ff68 	bl	801ba0e <strncmp>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d101      	bne.n	800fb48 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	e00f      	b.n	800fb68 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	617b      	str	r3, [r7, #20]
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d007      	beq.n	800fb66 <lwip_strnstr+0x62>
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	441a      	add	r2, r3
 800fb5c:	68f9      	ldr	r1, [r7, #12]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	440b      	add	r3, r1
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d9e0      	bls.n	800fb28 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800fb66:	2300      	movs	r3, #0
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3718      	adds	r7, #24
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fb76:	2300      	movs	r3, #0
 800fb78:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fb7a:	f00b fa53 	bl	801b024 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fb7e:	f000 f8d5 	bl	800fd2c <mem_init>
  memp_init();
 800fb82:	f000 fc31 	bl	80103e8 <memp_init>
  pbuf_init();
  netif_init();
 800fb86:	f000 fcf7 	bl	8010578 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fb8a:	f008 f81f 	bl	8017bcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fb8e:	f001 fdf1 	bl	8011774 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fb92:	f007 ff61 	bl	8017a58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fb96:	bf00      	nop
 800fb98:	3708      	adds	r7, #8
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
	...

0800fba0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fbaa:	4b05      	ldr	r3, [pc, #20]	; (800fbc0 <ptr_to_mem+0x20>)
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	88fb      	ldrh	r3, [r7, #6]
 800fbb0:	4413      	add	r3, r2
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	370c      	adds	r7, #12
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	20004ec4 	.word	0x20004ec4

0800fbc4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fbcc:	4b05      	ldr	r3, [pc, #20]	; (800fbe4 <mem_to_ptr+0x20>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	1ad3      	subs	r3, r2, r3
 800fbd4:	b29b      	uxth	r3, r3
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	20004ec4 	.word	0x20004ec4

0800fbe8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fbe8:	b590      	push	{r4, r7, lr}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fbf0:	4b45      	ldr	r3, [pc, #276]	; (800fd08 <plug_holes+0x120>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d206      	bcs.n	800fc08 <plug_holes+0x20>
 800fbfa:	4b44      	ldr	r3, [pc, #272]	; (800fd0c <plug_holes+0x124>)
 800fbfc:	f240 12df 	movw	r2, #479	; 0x1df
 800fc00:	4943      	ldr	r1, [pc, #268]	; (800fd10 <plug_holes+0x128>)
 800fc02:	4844      	ldr	r0, [pc, #272]	; (800fd14 <plug_holes+0x12c>)
 800fc04:	f00b fe72 	bl	801b8ec <printf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fc08:	4b43      	ldr	r3, [pc, #268]	; (800fd18 <plug_holes+0x130>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d306      	bcc.n	800fc20 <plug_holes+0x38>
 800fc12:	4b3e      	ldr	r3, [pc, #248]	; (800fd0c <plug_holes+0x124>)
 800fc14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fc18:	4940      	ldr	r1, [pc, #256]	; (800fd1c <plug_holes+0x134>)
 800fc1a:	483e      	ldr	r0, [pc, #248]	; (800fd14 <plug_holes+0x12c>)
 800fc1c:	f00b fe66 	bl	801b8ec <printf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	791b      	ldrb	r3, [r3, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d006      	beq.n	800fc36 <plug_holes+0x4e>
 800fc28:	4b38      	ldr	r3, [pc, #224]	; (800fd0c <plug_holes+0x124>)
 800fc2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fc2e:	493c      	ldr	r1, [pc, #240]	; (800fd20 <plug_holes+0x138>)
 800fc30:	4838      	ldr	r0, [pc, #224]	; (800fd14 <plug_holes+0x12c>)
 800fc32:	f00b fe5b 	bl	801b8ec <printf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc3e:	d906      	bls.n	800fc4e <plug_holes+0x66>
 800fc40:	4b32      	ldr	r3, [pc, #200]	; (800fd0c <plug_holes+0x124>)
 800fc42:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fc46:	4937      	ldr	r1, [pc, #220]	; (800fd24 <plug_holes+0x13c>)
 800fc48:	4832      	ldr	r0, [pc, #200]	; (800fd14 <plug_holes+0x12c>)
 800fc4a:	f00b fe4f 	bl	801b8ec <printf>

  nmem = ptr_to_mem(mem->next);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	881b      	ldrh	r3, [r3, #0]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff ffa4 	bl	800fba0 <ptr_to_mem>
 800fc58:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d024      	beq.n	800fcac <plug_holes+0xc4>
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	791b      	ldrb	r3, [r3, #4]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d120      	bne.n	800fcac <plug_holes+0xc4>
 800fc6a:	4b2b      	ldr	r3, [pc, #172]	; (800fd18 <plug_holes+0x130>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d01b      	beq.n	800fcac <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fc74:	4b2c      	ldr	r3, [pc, #176]	; (800fd28 <plug_holes+0x140>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d102      	bne.n	800fc84 <plug_holes+0x9c>
      lfree = mem;
 800fc7e:	4a2a      	ldr	r2, [pc, #168]	; (800fd28 <plug_holes+0x140>)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	881a      	ldrh	r2, [r3, #0]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	881b      	ldrh	r3, [r3, #0]
 800fc90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fc94:	d00a      	beq.n	800fcac <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff ff80 	bl	800fba0 <ptr_to_mem>
 800fca0:	4604      	mov	r4, r0
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7ff ff8e 	bl	800fbc4 <mem_to_ptr>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	885b      	ldrh	r3, [r3, #2]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff ff75 	bl	800fba0 <ptr_to_mem>
 800fcb6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d01f      	beq.n	800fd00 <plug_holes+0x118>
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	791b      	ldrb	r3, [r3, #4]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d11b      	bne.n	800fd00 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fcc8:	4b17      	ldr	r3, [pc, #92]	; (800fd28 <plug_holes+0x140>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d102      	bne.n	800fcd8 <plug_holes+0xf0>
      lfree = pmem;
 800fcd2:	4a15      	ldr	r2, [pc, #84]	; (800fd28 <plug_holes+0x140>)
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	881a      	ldrh	r2, [r3, #0]
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fce8:	d00a      	beq.n	800fd00 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7ff ff56 	bl	800fba0 <ptr_to_mem>
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	68b8      	ldr	r0, [r7, #8]
 800fcf8:	f7ff ff64 	bl	800fbc4 <mem_to_ptr>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fd00:	bf00      	nop
 800fd02:	3714      	adds	r7, #20
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd90      	pop	{r4, r7, pc}
 800fd08:	20004ec4 	.word	0x20004ec4
 800fd0c:	0802563c 	.word	0x0802563c
 800fd10:	0802566c 	.word	0x0802566c
 800fd14:	08025684 	.word	0x08025684
 800fd18:	20004ec8 	.word	0x20004ec8
 800fd1c:	080256ac 	.word	0x080256ac
 800fd20:	080256c8 	.word	0x080256c8
 800fd24:	080256e4 	.word	0x080256e4
 800fd28:	20004ed0 	.word	0x20004ed0

0800fd2c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fd32:	4b1f      	ldr	r3, [pc, #124]	; (800fdb0 <mem_init+0x84>)
 800fd34:	3303      	adds	r3, #3
 800fd36:	f023 0303 	bic.w	r3, r3, #3
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	4b1d      	ldr	r3, [pc, #116]	; (800fdb4 <mem_init+0x88>)
 800fd3e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fd40:	4b1c      	ldr	r3, [pc, #112]	; (800fdb4 <mem_init+0x88>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fd4c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fd5a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800fd5e:	f7ff ff1f 	bl	800fba0 <ptr_to_mem>
 800fd62:	4603      	mov	r3, r0
 800fd64:	4a14      	ldr	r2, [pc, #80]	; (800fdb8 <mem_init+0x8c>)
 800fd66:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fd68:	4b13      	ldr	r3, [pc, #76]	; (800fdb8 <mem_init+0x8c>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fd70:	4b11      	ldr	r3, [pc, #68]	; (800fdb8 <mem_init+0x8c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fd78:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fd7a:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <mem_init+0x8c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fd82:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fd84:	4b0b      	ldr	r3, [pc, #44]	; (800fdb4 <mem_init+0x88>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4a0c      	ldr	r2, [pc, #48]	; (800fdbc <mem_init+0x90>)
 800fd8a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fd8c:	480c      	ldr	r0, [pc, #48]	; (800fdc0 <mem_init+0x94>)
 800fd8e:	f00b f957 	bl	801b040 <sys_mutex_new>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d006      	beq.n	800fda6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fd98:	4b0a      	ldr	r3, [pc, #40]	; (800fdc4 <mem_init+0x98>)
 800fd9a:	f240 221f 	movw	r2, #543	; 0x21f
 800fd9e:	490a      	ldr	r1, [pc, #40]	; (800fdc8 <mem_init+0x9c>)
 800fda0:	480a      	ldr	r0, [pc, #40]	; (800fdcc <mem_init+0xa0>)
 800fda2:	f00b fda3 	bl	801b8ec <printf>
  }
}
 800fda6:	bf00      	nop
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	200086d4 	.word	0x200086d4
 800fdb4:	20004ec4 	.word	0x20004ec4
 800fdb8:	20004ec8 	.word	0x20004ec8
 800fdbc:	20004ed0 	.word	0x20004ed0
 800fdc0:	20004ecc 	.word	0x20004ecc
 800fdc4:	0802563c 	.word	0x0802563c
 800fdc8:	08025710 	.word	0x08025710
 800fdcc:	08025684 	.word	0x08025684

0800fdd0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7ff fef3 	bl	800fbc4 <mem_to_ptr>
 800fdde:	4603      	mov	r3, r0
 800fde0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	881b      	ldrh	r3, [r3, #0]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7ff feda 	bl	800fba0 <ptr_to_mem>
 800fdec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	885b      	ldrh	r3, [r3, #2]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7ff fed4 	bl	800fba0 <ptr_to_mem>
 800fdf8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe02:	d818      	bhi.n	800fe36 <mem_link_valid+0x66>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	885b      	ldrh	r3, [r3, #2]
 800fe08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe0c:	d813      	bhi.n	800fe36 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fe12:	8afa      	ldrh	r2, [r7, #22]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d004      	beq.n	800fe22 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	8afa      	ldrh	r2, [r7, #22]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d109      	bne.n	800fe36 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fe22:	4b08      	ldr	r3, [pc, #32]	; (800fe44 <mem_link_valid+0x74>)
 800fe24:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fe26:	693a      	ldr	r2, [r7, #16]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d006      	beq.n	800fe3a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	885b      	ldrh	r3, [r3, #2]
 800fe30:	8afa      	ldrh	r2, [r7, #22]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d001      	beq.n	800fe3a <mem_link_valid+0x6a>
    return 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	e000      	b.n	800fe3c <mem_link_valid+0x6c>
  }
  return 1;
 800fe3a:	2301      	movs	r3, #1
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3718      	adds	r7, #24
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	20004ec8 	.word	0x20004ec8

0800fe48 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b088      	sub	sp, #32
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d070      	beq.n	800ff38 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f003 0303 	and.w	r3, r3, #3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00d      	beq.n	800fe7c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fe60:	4b37      	ldr	r3, [pc, #220]	; (800ff40 <mem_free+0xf8>)
 800fe62:	f240 2273 	movw	r2, #627	; 0x273
 800fe66:	4937      	ldr	r1, [pc, #220]	; (800ff44 <mem_free+0xfc>)
 800fe68:	4837      	ldr	r0, [pc, #220]	; (800ff48 <mem_free+0x100>)
 800fe6a:	f00b fd3f 	bl	801b8ec <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fe6e:	f00b f945 	bl	801b0fc <sys_arch_protect>
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f00b f94f 	bl	801b118 <sys_arch_unprotect>
    return;
 800fe7a:	e05e      	b.n	800ff3a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	3b08      	subs	r3, #8
 800fe80:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fe82:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <mem_free+0x104>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	69fa      	ldr	r2, [r7, #28]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d306      	bcc.n	800fe9a <mem_free+0x52>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	f103 020c 	add.w	r2, r3, #12
 800fe92:	4b2f      	ldr	r3, [pc, #188]	; (800ff50 <mem_free+0x108>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d90d      	bls.n	800feb6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fe9a:	4b29      	ldr	r3, [pc, #164]	; (800ff40 <mem_free+0xf8>)
 800fe9c:	f240 227f 	movw	r2, #639	; 0x27f
 800fea0:	492c      	ldr	r1, [pc, #176]	; (800ff54 <mem_free+0x10c>)
 800fea2:	4829      	ldr	r0, [pc, #164]	; (800ff48 <mem_free+0x100>)
 800fea4:	f00b fd22 	bl	801b8ec <printf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fea8:	f00b f928 	bl	801b0fc <sys_arch_protect>
 800feac:	6138      	str	r0, [r7, #16]
 800feae:	6938      	ldr	r0, [r7, #16]
 800feb0:	f00b f932 	bl	801b118 <sys_arch_unprotect>
    return;
 800feb4:	e041      	b.n	800ff3a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800feb6:	4828      	ldr	r0, [pc, #160]	; (800ff58 <mem_free+0x110>)
 800feb8:	f00b f8de 	bl	801b078 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	791b      	ldrb	r3, [r3, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d110      	bne.n	800fee6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fec4:	4b1e      	ldr	r3, [pc, #120]	; (800ff40 <mem_free+0xf8>)
 800fec6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800feca:	4924      	ldr	r1, [pc, #144]	; (800ff5c <mem_free+0x114>)
 800fecc:	481e      	ldr	r0, [pc, #120]	; (800ff48 <mem_free+0x100>)
 800fece:	f00b fd0d 	bl	801b8ec <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800fed2:	4821      	ldr	r0, [pc, #132]	; (800ff58 <mem_free+0x110>)
 800fed4:	f00b f8df 	bl	801b096 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fed8:	f00b f910 	bl	801b0fc <sys_arch_protect>
 800fedc:	6178      	str	r0, [r7, #20]
 800fede:	6978      	ldr	r0, [r7, #20]
 800fee0:	f00b f91a 	bl	801b118 <sys_arch_unprotect>
    return;
 800fee4:	e029      	b.n	800ff3a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fee6:	69f8      	ldr	r0, [r7, #28]
 800fee8:	f7ff ff72 	bl	800fdd0 <mem_link_valid>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d110      	bne.n	800ff14 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fef2:	4b13      	ldr	r3, [pc, #76]	; (800ff40 <mem_free+0xf8>)
 800fef4:	f240 2295 	movw	r2, #661	; 0x295
 800fef8:	4919      	ldr	r1, [pc, #100]	; (800ff60 <mem_free+0x118>)
 800fefa:	4813      	ldr	r0, [pc, #76]	; (800ff48 <mem_free+0x100>)
 800fefc:	f00b fcf6 	bl	801b8ec <printf>
    LWIP_MEM_FREE_UNPROTECT();
 800ff00:	4815      	ldr	r0, [pc, #84]	; (800ff58 <mem_free+0x110>)
 800ff02:	f00b f8c8 	bl	801b096 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ff06:	f00b f8f9 	bl	801b0fc <sys_arch_protect>
 800ff0a:	61b8      	str	r0, [r7, #24]
 800ff0c:	69b8      	ldr	r0, [r7, #24]
 800ff0e:	f00b f903 	bl	801b118 <sys_arch_unprotect>
    return;
 800ff12:	e012      	b.n	800ff3a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	2200      	movs	r2, #0
 800ff18:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ff1a:	4b12      	ldr	r3, [pc, #72]	; (800ff64 <mem_free+0x11c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	69fa      	ldr	r2, [r7, #28]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d202      	bcs.n	800ff2a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ff24:	4a0f      	ldr	r2, [pc, #60]	; (800ff64 <mem_free+0x11c>)
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ff2a:	69f8      	ldr	r0, [r7, #28]
 800ff2c:	f7ff fe5c 	bl	800fbe8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ff30:	4809      	ldr	r0, [pc, #36]	; (800ff58 <mem_free+0x110>)
 800ff32:	f00b f8b0 	bl	801b096 <sys_mutex_unlock>
 800ff36:	e000      	b.n	800ff3a <mem_free+0xf2>
    return;
 800ff38:	bf00      	nop
}
 800ff3a:	3720      	adds	r7, #32
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	0802563c 	.word	0x0802563c
 800ff44:	0802572c 	.word	0x0802572c
 800ff48:	08025684 	.word	0x08025684
 800ff4c:	20004ec4 	.word	0x20004ec4
 800ff50:	20004ec8 	.word	0x20004ec8
 800ff54:	08025750 	.word	0x08025750
 800ff58:	20004ecc 	.word	0x20004ecc
 800ff5c:	0802576c 	.word	0x0802576c
 800ff60:	08025794 	.word	0x08025794
 800ff64:	20004ed0 	.word	0x20004ed0

0800ff68 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b088      	sub	sp, #32
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	460b      	mov	r3, r1
 800ff72:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ff74:	887b      	ldrh	r3, [r7, #2]
 800ff76:	3303      	adds	r3, #3
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	f023 0303 	bic.w	r3, r3, #3
 800ff7e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ff80:	8bfb      	ldrh	r3, [r7, #30]
 800ff82:	2b0b      	cmp	r3, #11
 800ff84:	d801      	bhi.n	800ff8a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ff86:	230c      	movs	r3, #12
 800ff88:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ff8a:	8bfb      	ldrh	r3, [r7, #30]
 800ff8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff90:	d803      	bhi.n	800ff9a <mem_trim+0x32>
 800ff92:	8bfa      	ldrh	r2, [r7, #30]
 800ff94:	887b      	ldrh	r3, [r7, #2]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d201      	bcs.n	800ff9e <mem_trim+0x36>
    return NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e0d8      	b.n	8010150 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ff9e:	4b6e      	ldr	r3, [pc, #440]	; (8010158 <mem_trim+0x1f0>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d304      	bcc.n	800ffb2 <mem_trim+0x4a>
 800ffa8:	4b6c      	ldr	r3, [pc, #432]	; (801015c <mem_trim+0x1f4>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d306      	bcc.n	800ffc0 <mem_trim+0x58>
 800ffb2:	4b6b      	ldr	r3, [pc, #428]	; (8010160 <mem_trim+0x1f8>)
 800ffb4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ffb8:	496a      	ldr	r1, [pc, #424]	; (8010164 <mem_trim+0x1fc>)
 800ffba:	486b      	ldr	r0, [pc, #428]	; (8010168 <mem_trim+0x200>)
 800ffbc:	f00b fc96 	bl	801b8ec <printf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ffc0:	4b65      	ldr	r3, [pc, #404]	; (8010158 <mem_trim+0x1f0>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d304      	bcc.n	800ffd4 <mem_trim+0x6c>
 800ffca:	4b64      	ldr	r3, [pc, #400]	; (801015c <mem_trim+0x1f4>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d307      	bcc.n	800ffe4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ffd4:	f00b f892 	bl	801b0fc <sys_arch_protect>
 800ffd8:	60b8      	str	r0, [r7, #8]
 800ffda:	68b8      	ldr	r0, [r7, #8]
 800ffdc:	f00b f89c 	bl	801b118 <sys_arch_unprotect>
    return rmem;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	e0b5      	b.n	8010150 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	3b08      	subs	r3, #8
 800ffe8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ffea:	69b8      	ldr	r0, [r7, #24]
 800ffec:	f7ff fdea 	bl	800fbc4 <mem_to_ptr>
 800fff0:	4603      	mov	r3, r0
 800fff2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	881a      	ldrh	r2, [r3, #0]
 800fff8:	8afb      	ldrh	r3, [r7, #22]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	3b08      	subs	r3, #8
 8010000:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010002:	8bfa      	ldrh	r2, [r7, #30]
 8010004:	8abb      	ldrh	r3, [r7, #20]
 8010006:	429a      	cmp	r2, r3
 8010008:	d906      	bls.n	8010018 <mem_trim+0xb0>
 801000a:	4b55      	ldr	r3, [pc, #340]	; (8010160 <mem_trim+0x1f8>)
 801000c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010010:	4956      	ldr	r1, [pc, #344]	; (801016c <mem_trim+0x204>)
 8010012:	4855      	ldr	r0, [pc, #340]	; (8010168 <mem_trim+0x200>)
 8010014:	f00b fc6a 	bl	801b8ec <printf>
  if (newsize > size) {
 8010018:	8bfa      	ldrh	r2, [r7, #30]
 801001a:	8abb      	ldrh	r3, [r7, #20]
 801001c:	429a      	cmp	r2, r3
 801001e:	d901      	bls.n	8010024 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010020:	2300      	movs	r3, #0
 8010022:	e095      	b.n	8010150 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010024:	8bfa      	ldrh	r2, [r7, #30]
 8010026:	8abb      	ldrh	r3, [r7, #20]
 8010028:	429a      	cmp	r2, r3
 801002a:	d101      	bne.n	8010030 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	e08f      	b.n	8010150 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010030:	484f      	ldr	r0, [pc, #316]	; (8010170 <mem_trim+0x208>)
 8010032:	f00b f821 	bl	801b078 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	4618      	mov	r0, r3
 801003c:	f7ff fdb0 	bl	800fba0 <ptr_to_mem>
 8010040:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	791b      	ldrb	r3, [r3, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d13f      	bne.n	80100ca <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010052:	d106      	bne.n	8010062 <mem_trim+0xfa>
 8010054:	4b42      	ldr	r3, [pc, #264]	; (8010160 <mem_trim+0x1f8>)
 8010056:	f240 22f5 	movw	r2, #757	; 0x2f5
 801005a:	4946      	ldr	r1, [pc, #280]	; (8010174 <mem_trim+0x20c>)
 801005c:	4842      	ldr	r0, [pc, #264]	; (8010168 <mem_trim+0x200>)
 801005e:	f00b fc45 	bl	801b8ec <printf>
    /* remember the old next pointer */
    next = mem2->next;
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010068:	8afa      	ldrh	r2, [r7, #22]
 801006a:	8bfb      	ldrh	r3, [r7, #30]
 801006c:	4413      	add	r3, r2
 801006e:	b29b      	uxth	r3, r3
 8010070:	3308      	adds	r3, #8
 8010072:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010074:	4b40      	ldr	r3, [pc, #256]	; (8010178 <mem_trim+0x210>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	693a      	ldr	r2, [r7, #16]
 801007a:	429a      	cmp	r2, r3
 801007c:	d106      	bne.n	801008c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801007e:	89fb      	ldrh	r3, [r7, #14]
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff fd8d 	bl	800fba0 <ptr_to_mem>
 8010086:	4603      	mov	r3, r0
 8010088:	4a3b      	ldr	r2, [pc, #236]	; (8010178 <mem_trim+0x210>)
 801008a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801008c:	89fb      	ldrh	r3, [r7, #14]
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff fd86 	bl	800fba0 <ptr_to_mem>
 8010094:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	2200      	movs	r2, #0
 801009a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	89ba      	ldrh	r2, [r7, #12]
 80100a0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	8afa      	ldrh	r2, [r7, #22]
 80100a6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	89fa      	ldrh	r2, [r7, #14]
 80100ac:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	881b      	ldrh	r3, [r3, #0]
 80100b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100b6:	d047      	beq.n	8010148 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	881b      	ldrh	r3, [r3, #0]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7ff fd6f 	bl	800fba0 <ptr_to_mem>
 80100c2:	4602      	mov	r2, r0
 80100c4:	89fb      	ldrh	r3, [r7, #14]
 80100c6:	8053      	strh	r3, [r2, #2]
 80100c8:	e03e      	b.n	8010148 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80100ca:	8bfb      	ldrh	r3, [r7, #30]
 80100cc:	f103 0214 	add.w	r2, r3, #20
 80100d0:	8abb      	ldrh	r3, [r7, #20]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d838      	bhi.n	8010148 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80100d6:	8afa      	ldrh	r2, [r7, #22]
 80100d8:	8bfb      	ldrh	r3, [r7, #30]
 80100da:	4413      	add	r3, r2
 80100dc:	b29b      	uxth	r3, r3
 80100de:	3308      	adds	r3, #8
 80100e0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100ea:	d106      	bne.n	80100fa <mem_trim+0x192>
 80100ec:	4b1c      	ldr	r3, [pc, #112]	; (8010160 <mem_trim+0x1f8>)
 80100ee:	f240 3216 	movw	r2, #790	; 0x316
 80100f2:	4920      	ldr	r1, [pc, #128]	; (8010174 <mem_trim+0x20c>)
 80100f4:	481c      	ldr	r0, [pc, #112]	; (8010168 <mem_trim+0x200>)
 80100f6:	f00b fbf9 	bl	801b8ec <printf>
    mem2 = ptr_to_mem(ptr2);
 80100fa:	89fb      	ldrh	r3, [r7, #14]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7ff fd4f 	bl	800fba0 <ptr_to_mem>
 8010102:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010104:	4b1c      	ldr	r3, [pc, #112]	; (8010178 <mem_trim+0x210>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	693a      	ldr	r2, [r7, #16]
 801010a:	429a      	cmp	r2, r3
 801010c:	d202      	bcs.n	8010114 <mem_trim+0x1ac>
      lfree = mem2;
 801010e:	4a1a      	ldr	r2, [pc, #104]	; (8010178 <mem_trim+0x210>)
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	2200      	movs	r2, #0
 8010118:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	881a      	ldrh	r2, [r3, #0]
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	8afa      	ldrh	r2, [r7, #22]
 8010126:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	89fa      	ldrh	r2, [r7, #14]
 801012c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010136:	d007      	beq.n	8010148 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fd2f 	bl	800fba0 <ptr_to_mem>
 8010142:	4602      	mov	r2, r0
 8010144:	89fb      	ldrh	r3, [r7, #14]
 8010146:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010148:	4809      	ldr	r0, [pc, #36]	; (8010170 <mem_trim+0x208>)
 801014a:	f00a ffa4 	bl	801b096 <sys_mutex_unlock>
  return rmem;
 801014e:	687b      	ldr	r3, [r7, #4]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3720      	adds	r7, #32
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	20004ec4 	.word	0x20004ec4
 801015c:	20004ec8 	.word	0x20004ec8
 8010160:	0802563c 	.word	0x0802563c
 8010164:	080257c8 	.word	0x080257c8
 8010168:	08025684 	.word	0x08025684
 801016c:	080257e0 	.word	0x080257e0
 8010170:	20004ecc 	.word	0x20004ecc
 8010174:	08025800 	.word	0x08025800
 8010178:	20004ed0 	.word	0x20004ed0

0801017c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b088      	sub	sp, #32
 8010180:	af00      	add	r7, sp, #0
 8010182:	4603      	mov	r3, r0
 8010184:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010186:	88fb      	ldrh	r3, [r7, #6]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d101      	bne.n	8010190 <mem_malloc+0x14>
    return NULL;
 801018c:	2300      	movs	r3, #0
 801018e:	e0e2      	b.n	8010356 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010190:	88fb      	ldrh	r3, [r7, #6]
 8010192:	3303      	adds	r3, #3
 8010194:	b29b      	uxth	r3, r3
 8010196:	f023 0303 	bic.w	r3, r3, #3
 801019a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801019c:	8bbb      	ldrh	r3, [r7, #28]
 801019e:	2b0b      	cmp	r3, #11
 80101a0:	d801      	bhi.n	80101a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80101a2:	230c      	movs	r3, #12
 80101a4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80101a6:	8bbb      	ldrh	r3, [r7, #28]
 80101a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80101ac:	d803      	bhi.n	80101b6 <mem_malloc+0x3a>
 80101ae:	8bba      	ldrh	r2, [r7, #28]
 80101b0:	88fb      	ldrh	r3, [r7, #6]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d201      	bcs.n	80101ba <mem_malloc+0x3e>
    return NULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e0cd      	b.n	8010356 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80101ba:	4869      	ldr	r0, [pc, #420]	; (8010360 <mem_malloc+0x1e4>)
 80101bc:	f00a ff5c 	bl	801b078 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80101c0:	4b68      	ldr	r3, [pc, #416]	; (8010364 <mem_malloc+0x1e8>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7ff fcfd 	bl	800fbc4 <mem_to_ptr>
 80101ca:	4603      	mov	r3, r0
 80101cc:	83fb      	strh	r3, [r7, #30]
 80101ce:	e0b7      	b.n	8010340 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80101d0:	8bfb      	ldrh	r3, [r7, #30]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7ff fce4 	bl	800fba0 <ptr_to_mem>
 80101d8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	791b      	ldrb	r3, [r3, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f040 80a7 	bne.w	8010332 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	881b      	ldrh	r3, [r3, #0]
 80101e8:	461a      	mov	r2, r3
 80101ea:	8bfb      	ldrh	r3, [r7, #30]
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	f1a3 0208 	sub.w	r2, r3, #8
 80101f2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80101f4:	429a      	cmp	r2, r3
 80101f6:	f0c0 809c 	bcc.w	8010332 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	461a      	mov	r2, r3
 8010200:	8bfb      	ldrh	r3, [r7, #30]
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	f1a3 0208 	sub.w	r2, r3, #8
 8010208:	8bbb      	ldrh	r3, [r7, #28]
 801020a:	3314      	adds	r3, #20
 801020c:	429a      	cmp	r2, r3
 801020e:	d333      	bcc.n	8010278 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010210:	8bfa      	ldrh	r2, [r7, #30]
 8010212:	8bbb      	ldrh	r3, [r7, #28]
 8010214:	4413      	add	r3, r2
 8010216:	b29b      	uxth	r3, r3
 8010218:	3308      	adds	r3, #8
 801021a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801021c:	8a7b      	ldrh	r3, [r7, #18]
 801021e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010222:	d106      	bne.n	8010232 <mem_malloc+0xb6>
 8010224:	4b50      	ldr	r3, [pc, #320]	; (8010368 <mem_malloc+0x1ec>)
 8010226:	f240 3287 	movw	r2, #903	; 0x387
 801022a:	4950      	ldr	r1, [pc, #320]	; (801036c <mem_malloc+0x1f0>)
 801022c:	4850      	ldr	r0, [pc, #320]	; (8010370 <mem_malloc+0x1f4>)
 801022e:	f00b fb5d 	bl	801b8ec <printf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010232:	8a7b      	ldrh	r3, [r7, #18]
 8010234:	4618      	mov	r0, r3
 8010236:	f7ff fcb3 	bl	800fba0 <ptr_to_mem>
 801023a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	881a      	ldrh	r2, [r3, #0]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	8bfa      	ldrh	r2, [r7, #30]
 801024e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	8a7a      	ldrh	r2, [r7, #18]
 8010254:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	2201      	movs	r2, #1
 801025a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010264:	d00b      	beq.n	801027e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	881b      	ldrh	r3, [r3, #0]
 801026a:	4618      	mov	r0, r3
 801026c:	f7ff fc98 	bl	800fba0 <ptr_to_mem>
 8010270:	4602      	mov	r2, r0
 8010272:	8a7b      	ldrh	r3, [r7, #18]
 8010274:	8053      	strh	r3, [r2, #2]
 8010276:	e002      	b.n	801027e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	2201      	movs	r2, #1
 801027c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801027e:	4b39      	ldr	r3, [pc, #228]	; (8010364 <mem_malloc+0x1e8>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	697a      	ldr	r2, [r7, #20]
 8010284:	429a      	cmp	r2, r3
 8010286:	d127      	bne.n	80102d8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010288:	4b36      	ldr	r3, [pc, #216]	; (8010364 <mem_malloc+0x1e8>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801028e:	e005      	b.n	801029c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	881b      	ldrh	r3, [r3, #0]
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fc83 	bl	800fba0 <ptr_to_mem>
 801029a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	791b      	ldrb	r3, [r3, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d004      	beq.n	80102ae <mem_malloc+0x132>
 80102a4:	4b33      	ldr	r3, [pc, #204]	; (8010374 <mem_malloc+0x1f8>)
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	69ba      	ldr	r2, [r7, #24]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d1f0      	bne.n	8010290 <mem_malloc+0x114>
          }
          lfree = cur;
 80102ae:	4a2d      	ldr	r2, [pc, #180]	; (8010364 <mem_malloc+0x1e8>)
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80102b4:	4b2b      	ldr	r3, [pc, #172]	; (8010364 <mem_malloc+0x1e8>)
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	4b2e      	ldr	r3, [pc, #184]	; (8010374 <mem_malloc+0x1f8>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d00b      	beq.n	80102d8 <mem_malloc+0x15c>
 80102c0:	4b28      	ldr	r3, [pc, #160]	; (8010364 <mem_malloc+0x1e8>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	791b      	ldrb	r3, [r3, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d006      	beq.n	80102d8 <mem_malloc+0x15c>
 80102ca:	4b27      	ldr	r3, [pc, #156]	; (8010368 <mem_malloc+0x1ec>)
 80102cc:	f240 32b5 	movw	r2, #949	; 0x3b5
 80102d0:	4929      	ldr	r1, [pc, #164]	; (8010378 <mem_malloc+0x1fc>)
 80102d2:	4827      	ldr	r0, [pc, #156]	; (8010370 <mem_malloc+0x1f4>)
 80102d4:	f00b fb0a 	bl	801b8ec <printf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80102d8:	4821      	ldr	r0, [pc, #132]	; (8010360 <mem_malloc+0x1e4>)
 80102da:	f00a fedc 	bl	801b096 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80102de:	8bba      	ldrh	r2, [r7, #28]
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	4413      	add	r3, r2
 80102e4:	3308      	adds	r3, #8
 80102e6:	4a23      	ldr	r2, [pc, #140]	; (8010374 <mem_malloc+0x1f8>)
 80102e8:	6812      	ldr	r2, [r2, #0]
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d906      	bls.n	80102fc <mem_malloc+0x180>
 80102ee:	4b1e      	ldr	r3, [pc, #120]	; (8010368 <mem_malloc+0x1ec>)
 80102f0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80102f4:	4921      	ldr	r1, [pc, #132]	; (801037c <mem_malloc+0x200>)
 80102f6:	481e      	ldr	r0, [pc, #120]	; (8010370 <mem_malloc+0x1f4>)
 80102f8:	f00b faf8 	bl	801b8ec <printf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	f003 0303 	and.w	r3, r3, #3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d006      	beq.n	8010314 <mem_malloc+0x198>
 8010306:	4b18      	ldr	r3, [pc, #96]	; (8010368 <mem_malloc+0x1ec>)
 8010308:	f240 32bb 	movw	r2, #955	; 0x3bb
 801030c:	491c      	ldr	r1, [pc, #112]	; (8010380 <mem_malloc+0x204>)
 801030e:	4818      	ldr	r0, [pc, #96]	; (8010370 <mem_malloc+0x1f4>)
 8010310:	f00b faec 	bl	801b8ec <printf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	f003 0303 	and.w	r3, r3, #3
 801031a:	2b00      	cmp	r3, #0
 801031c:	d006      	beq.n	801032c <mem_malloc+0x1b0>
 801031e:	4b12      	ldr	r3, [pc, #72]	; (8010368 <mem_malloc+0x1ec>)
 8010320:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010324:	4917      	ldr	r1, [pc, #92]	; (8010384 <mem_malloc+0x208>)
 8010326:	4812      	ldr	r0, [pc, #72]	; (8010370 <mem_malloc+0x1f4>)
 8010328:	f00b fae0 	bl	801b8ec <printf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	3308      	adds	r3, #8
 8010330:	e011      	b.n	8010356 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010332:	8bfb      	ldrh	r3, [r7, #30]
 8010334:	4618      	mov	r0, r3
 8010336:	f7ff fc33 	bl	800fba0 <ptr_to_mem>
 801033a:	4603      	mov	r3, r0
 801033c:	881b      	ldrh	r3, [r3, #0]
 801033e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010340:	8bfa      	ldrh	r2, [r7, #30]
 8010342:	8bbb      	ldrh	r3, [r7, #28]
 8010344:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010348:	429a      	cmp	r2, r3
 801034a:	f4ff af41 	bcc.w	80101d0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801034e:	4804      	ldr	r0, [pc, #16]	; (8010360 <mem_malloc+0x1e4>)
 8010350:	f00a fea1 	bl	801b096 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3720      	adds	r7, #32
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	20004ecc 	.word	0x20004ecc
 8010364:	20004ed0 	.word	0x20004ed0
 8010368:	0802563c 	.word	0x0802563c
 801036c:	08025800 	.word	0x08025800
 8010370:	08025684 	.word	0x08025684
 8010374:	20004ec8 	.word	0x20004ec8
 8010378:	08025814 	.word	0x08025814
 801037c:	08025830 	.word	0x08025830
 8010380:	08025860 	.word	0x08025860
 8010384:	08025890 	.word	0x08025890

08010388 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010388:	b480      	push	{r7}
 801038a:	b085      	sub	sp, #20
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	689b      	ldr	r3, [r3, #8]
 8010394:	2200      	movs	r2, #0
 8010396:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	3303      	adds	r3, #3
 801039e:	f023 0303 	bic.w	r3, r3, #3
 80103a2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e011      	b.n	80103ce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	689b      	ldr	r3, [r3, #8]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	461a      	mov	r2, r3
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	4413      	add	r3, r2
 80103c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3301      	adds	r3, #1
 80103cc:	60fb      	str	r3, [r7, #12]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	885b      	ldrh	r3, [r3, #2]
 80103d2:	461a      	mov	r2, r3
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4293      	cmp	r3, r2
 80103d8:	dbe7      	blt.n	80103aa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80103da:	bf00      	nop
 80103dc:	bf00      	nop
 80103de:	3714      	adds	r7, #20
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80103ee:	2300      	movs	r3, #0
 80103f0:	80fb      	strh	r3, [r7, #6]
 80103f2:	e009      	b.n	8010408 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	4a08      	ldr	r2, [pc, #32]	; (8010418 <memp_init+0x30>)
 80103f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff ffc3 	bl	8010388 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010402:	88fb      	ldrh	r3, [r7, #6]
 8010404:	3301      	adds	r3, #1
 8010406:	80fb      	strh	r3, [r7, #6]
 8010408:	88fb      	ldrh	r3, [r7, #6]
 801040a:	2b0c      	cmp	r3, #12
 801040c:	d9f2      	bls.n	80103f4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801040e:	bf00      	nop
 8010410:	bf00      	nop
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}
 8010418:	08029ea0 	.word	0x08029ea0

0801041c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010424:	f00a fe6a 	bl	801b0fc <sys_arch_protect>
 8010428:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d015      	beq.n	8010464 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	689b      	ldr	r3, [r3, #8]
 801043c:	68ba      	ldr	r2, [r7, #8]
 801043e:	6812      	ldr	r2, [r2, #0]
 8010440:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	f003 0303 	and.w	r3, r3, #3
 8010448:	2b00      	cmp	r3, #0
 801044a:	d006      	beq.n	801045a <do_memp_malloc_pool+0x3e>
 801044c:	4b09      	ldr	r3, [pc, #36]	; (8010474 <do_memp_malloc_pool+0x58>)
 801044e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010452:	4909      	ldr	r1, [pc, #36]	; (8010478 <do_memp_malloc_pool+0x5c>)
 8010454:	4809      	ldr	r0, [pc, #36]	; (801047c <do_memp_malloc_pool+0x60>)
 8010456:	f00b fa49 	bl	801b8ec <printf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801045a:	68f8      	ldr	r0, [r7, #12]
 801045c:	f00a fe5c 	bl	801b118 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	e003      	b.n	801046c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f00a fe57 	bl	801b118 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801046a:	2300      	movs	r3, #0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3710      	adds	r7, #16
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	080258b4 	.word	0x080258b4
 8010478:	080258e4 	.word	0x080258e4
 801047c:	08025908 	.word	0x08025908

08010480 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	4603      	mov	r3, r0
 8010488:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	2b0c      	cmp	r3, #12
 801048e:	d908      	bls.n	80104a2 <memp_malloc+0x22>
 8010490:	4b0a      	ldr	r3, [pc, #40]	; (80104bc <memp_malloc+0x3c>)
 8010492:	f240 1257 	movw	r2, #343	; 0x157
 8010496:	490a      	ldr	r1, [pc, #40]	; (80104c0 <memp_malloc+0x40>)
 8010498:	480a      	ldr	r0, [pc, #40]	; (80104c4 <memp_malloc+0x44>)
 801049a:	f00b fa27 	bl	801b8ec <printf>
 801049e:	2300      	movs	r3, #0
 80104a0:	e008      	b.n	80104b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80104a2:	79fb      	ldrb	r3, [r7, #7]
 80104a4:	4a08      	ldr	r2, [pc, #32]	; (80104c8 <memp_malloc+0x48>)
 80104a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff ffb6 	bl	801041c <do_memp_malloc_pool>
 80104b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80104b2:	68fb      	ldr	r3, [r7, #12]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	080258b4 	.word	0x080258b4
 80104c0:	08025944 	.word	0x08025944
 80104c4:	08025908 	.word	0x08025908
 80104c8:	08029ea0 	.word	0x08029ea0

080104cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	f003 0303 	and.w	r3, r3, #3
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d006      	beq.n	80104ee <do_memp_free_pool+0x22>
 80104e0:	4b0d      	ldr	r3, [pc, #52]	; (8010518 <do_memp_free_pool+0x4c>)
 80104e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80104e6:	490d      	ldr	r1, [pc, #52]	; (801051c <do_memp_free_pool+0x50>)
 80104e8:	480d      	ldr	r0, [pc, #52]	; (8010520 <do_memp_free_pool+0x54>)
 80104ea:	f00b f9ff 	bl	801b8ec <printf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80104f2:	f00a fe03 	bl	801b0fc <sys_arch_protect>
 80104f6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	689b      	ldr	r3, [r3, #8]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801050a:	68b8      	ldr	r0, [r7, #8]
 801050c:	f00a fe04 	bl	801b118 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010510:	bf00      	nop
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	080258b4 	.word	0x080258b4
 801051c:	08025964 	.word	0x08025964
 8010520:	08025908 	.word	0x08025908

08010524 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	4603      	mov	r3, r0
 801052c:	6039      	str	r1, [r7, #0]
 801052e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010530:	79fb      	ldrb	r3, [r7, #7]
 8010532:	2b0c      	cmp	r3, #12
 8010534:	d907      	bls.n	8010546 <memp_free+0x22>
 8010536:	4b0c      	ldr	r3, [pc, #48]	; (8010568 <memp_free+0x44>)
 8010538:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801053c:	490b      	ldr	r1, [pc, #44]	; (801056c <memp_free+0x48>)
 801053e:	480c      	ldr	r0, [pc, #48]	; (8010570 <memp_free+0x4c>)
 8010540:	f00b f9d4 	bl	801b8ec <printf>
 8010544:	e00c      	b.n	8010560 <memp_free+0x3c>

  if (mem == NULL) {
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d008      	beq.n	801055e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801054c:	79fb      	ldrb	r3, [r7, #7]
 801054e:	4a09      	ldr	r2, [pc, #36]	; (8010574 <memp_free+0x50>)
 8010550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff ffb8 	bl	80104cc <do_memp_free_pool>
 801055c:	e000      	b.n	8010560 <memp_free+0x3c>
    return;
 801055e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010560:	3708      	adds	r7, #8
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	080258b4 	.word	0x080258b4
 801056c:	08025984 	.word	0x08025984
 8010570:	08025908 	.word	0x08025908
 8010574:	08029ea0 	.word	0x08029ea0

08010578 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010578:	b480      	push	{r7}
 801057a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801057c:	bf00      	nop
 801057e:	46bd      	mov	sp, r7
 8010580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010584:	4770      	bx	lr
	...

08010588 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d108      	bne.n	80105ae <netif_add+0x26>
 801059c:	4b56      	ldr	r3, [pc, #344]	; (80106f8 <netif_add+0x170>)
 801059e:	f240 1227 	movw	r2, #295	; 0x127
 80105a2:	4956      	ldr	r1, [pc, #344]	; (80106fc <netif_add+0x174>)
 80105a4:	4856      	ldr	r0, [pc, #344]	; (8010700 <netif_add+0x178>)
 80105a6:	f00b f9a1 	bl	801b8ec <printf>
 80105aa:	2300      	movs	r3, #0
 80105ac:	e09f      	b.n	80106ee <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80105ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d108      	bne.n	80105c6 <netif_add+0x3e>
 80105b4:	4b50      	ldr	r3, [pc, #320]	; (80106f8 <netif_add+0x170>)
 80105b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80105ba:	4952      	ldr	r1, [pc, #328]	; (8010704 <netif_add+0x17c>)
 80105bc:	4850      	ldr	r0, [pc, #320]	; (8010700 <netif_add+0x178>)
 80105be:	f00b f995 	bl	801b8ec <printf>
 80105c2:	2300      	movs	r3, #0
 80105c4:	e093      	b.n	80106ee <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d101      	bne.n	80105d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80105cc:	4b4e      	ldr	r3, [pc, #312]	; (8010708 <netif_add+0x180>)
 80105ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d101      	bne.n	80105da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80105d6:	4b4c      	ldr	r3, [pc, #304]	; (8010708 <netif_add+0x180>)
 80105d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d101      	bne.n	80105e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80105e0:	4b49      	ldr	r3, [pc, #292]	; (8010708 <netif_add+0x180>)
 80105e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2200      	movs	r2, #0
 80105ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	2200      	movs	r2, #0
 80105f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	4a44      	ldr	r2, [pc, #272]	; (801070c <netif_add+0x184>)
 80105fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2200      	movs	r2, #0
 8010600:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2200      	movs	r2, #0
 8010606:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6a3a      	ldr	r2, [r7, #32]
 801060e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8010610:	4b3f      	ldr	r3, [pc, #252]	; (8010710 <netif_add+0x188>)
 8010612:	781a      	ldrb	r2, [r3, #0]
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801061e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	68b9      	ldr	r1, [r7, #8]
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f000 f966 	bl	80108f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	4798      	blx	r3
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <netif_add+0xb4>
    return NULL;
 8010638:	2300      	movs	r3, #0
 801063a:	e058      	b.n	80106ee <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010642:	2bff      	cmp	r3, #255	; 0xff
 8010644:	d103      	bne.n	801064e <netif_add+0xc6>
        netif->num = 0;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	2200      	movs	r2, #0
 801064a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 801064e:	2300      	movs	r3, #0
 8010650:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010652:	4b30      	ldr	r3, [pc, #192]	; (8010714 <netif_add+0x18c>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	617b      	str	r3, [r7, #20]
 8010658:	e02b      	b.n	80106b2 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	429a      	cmp	r2, r3
 8010660:	d106      	bne.n	8010670 <netif_add+0xe8>
 8010662:	4b25      	ldr	r3, [pc, #148]	; (80106f8 <netif_add+0x170>)
 8010664:	f240 128b 	movw	r2, #395	; 0x18b
 8010668:	492b      	ldr	r1, [pc, #172]	; (8010718 <netif_add+0x190>)
 801066a:	4825      	ldr	r0, [pc, #148]	; (8010700 <netif_add+0x178>)
 801066c:	f00b f93e 	bl	801b8ec <printf>
        num_netifs++;
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	3301      	adds	r3, #1
 8010674:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	2bff      	cmp	r3, #255	; 0xff
 801067a:	dd06      	ble.n	801068a <netif_add+0x102>
 801067c:	4b1e      	ldr	r3, [pc, #120]	; (80106f8 <netif_add+0x170>)
 801067e:	f240 128d 	movw	r2, #397	; 0x18d
 8010682:	4926      	ldr	r1, [pc, #152]	; (801071c <netif_add+0x194>)
 8010684:	481e      	ldr	r0, [pc, #120]	; (8010700 <netif_add+0x178>)
 8010686:	f00b f931 	bl	801b8ec <printf>
        if (netif2->num == netif->num) {
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010696:	429a      	cmp	r2, r3
 8010698:	d108      	bne.n	80106ac <netif_add+0x124>
          netif->num++;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106a0:	3301      	adds	r3, #1
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 80106aa:	e005      	b.n	80106b8 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	617b      	str	r3, [r7, #20]
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d1d0      	bne.n	801065a <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1be      	bne.n	801063c <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106c4:	2bfe      	cmp	r3, #254	; 0xfe
 80106c6:	d103      	bne.n	80106d0 <netif_add+0x148>
    netif_num = 0;
 80106c8:	4b11      	ldr	r3, [pc, #68]	; (8010710 <netif_add+0x188>)
 80106ca:	2200      	movs	r2, #0
 80106cc:	701a      	strb	r2, [r3, #0]
 80106ce:	e006      	b.n	80106de <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106d6:	3301      	adds	r3, #1
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	4b0d      	ldr	r3, [pc, #52]	; (8010710 <netif_add+0x188>)
 80106dc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80106de:	4b0d      	ldr	r3, [pc, #52]	; (8010714 <netif_add+0x18c>)
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80106e6:	4a0b      	ldr	r2, [pc, #44]	; (8010714 <netif_add+0x18c>)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80106ec:	68fb      	ldr	r3, [r7, #12]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3718      	adds	r7, #24
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	080259a0 	.word	0x080259a0
 80106fc:	08025a34 	.word	0x08025a34
 8010700:	080259f0 	.word	0x080259f0
 8010704:	08025a50 	.word	0x08025a50
 8010708:	08029f14 	.word	0x08029f14
 801070c:	08010ae9 	.word	0x08010ae9
 8010710:	20004f08 	.word	0x20004f08
 8010714:	2000bdc0 	.word	0x2000bdc0
 8010718:	08025a74 	.word	0x08025a74
 801071c:	08025a88 	.word	0x08025a88

08010720 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801072a:	6839      	ldr	r1, [r7, #0]
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f002 fe6b 	bl	8013408 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f007 ff03 	bl	8018540 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801073a:	bf00      	nop
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
	...

08010744 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b086      	sub	sp, #24
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d106      	bne.n	8010764 <netif_do_set_ipaddr+0x20>
 8010756:	4b1d      	ldr	r3, [pc, #116]	; (80107cc <netif_do_set_ipaddr+0x88>)
 8010758:	f240 12cb 	movw	r2, #459	; 0x1cb
 801075c:	491c      	ldr	r1, [pc, #112]	; (80107d0 <netif_do_set_ipaddr+0x8c>)
 801075e:	481d      	ldr	r0, [pc, #116]	; (80107d4 <netif_do_set_ipaddr+0x90>)
 8010760:	f00b f8c4 	bl	801b8ec <printf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d106      	bne.n	8010778 <netif_do_set_ipaddr+0x34>
 801076a:	4b18      	ldr	r3, [pc, #96]	; (80107cc <netif_do_set_ipaddr+0x88>)
 801076c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010770:	4917      	ldr	r1, [pc, #92]	; (80107d0 <netif_do_set_ipaddr+0x8c>)
 8010772:	4818      	ldr	r0, [pc, #96]	; (80107d4 <netif_do_set_ipaddr+0x90>)
 8010774:	f00b f8ba 	bl	801b8ec <printf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	3304      	adds	r3, #4
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	429a      	cmp	r2, r3
 8010784:	d01c      	beq.n	80107c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	3304      	adds	r3, #4
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010796:	f107 0314 	add.w	r3, r7, #20
 801079a:	4619      	mov	r1, r3
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff ffbf 	bl	8010720 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d002      	beq.n	80107ae <netif_do_set_ipaddr+0x6a>
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	e000      	b.n	80107b0 <netif_do_set_ipaddr+0x6c>
 80107ae:	2300      	movs	r3, #0
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80107b4:	2101      	movs	r1, #1
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f000 f924 	bl	8010a04 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80107bc:	2301      	movs	r3, #1
 80107be:	e000      	b.n	80107c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3718      	adds	r7, #24
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	080259a0 	.word	0x080259a0
 80107d0:	08025ab8 	.word	0x08025ab8
 80107d4:	080259f0 	.word	0x080259f0

080107d8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  ip_addr_t old_addr;

  LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d107      	bne.n	80107f8 <netif_set_ipaddr+0x20>
 80107e8:	4b0b      	ldr	r3, [pc, #44]	; (8010818 <netif_set_ipaddr+0x40>)
 80107ea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80107ee:	490b      	ldr	r1, [pc, #44]	; (801081c <netif_set_ipaddr+0x44>)
 80107f0:	480b      	ldr	r0, [pc, #44]	; (8010820 <netif_set_ipaddr+0x48>)
 80107f2:	f00b f87b 	bl	801b8ec <printf>
 80107f6:	e00b      	b.n	8010810 <netif_set_ipaddr+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <netif_set_ipaddr+0x2a>
    ipaddr = IP4_ADDR_ANY4;
 80107fe:	4b09      	ldr	r3, [pc, #36]	; (8010824 <netif_set_ipaddr+0x4c>)
 8010800:	603b      	str	r3, [r7, #0]
  }

  LWIP_ASSERT_CORE_LOCKED();

  if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010802:	f107 030c 	add.w	r3, r7, #12
 8010806:	461a      	mov	r2, r3
 8010808:	6839      	ldr	r1, [r7, #0]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff ff9a 	bl	8010744 <netif_do_set_ipaddr>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_address = &old_addr;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
#endif
  }
}
 8010810:	3710      	adds	r7, #16
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	080259a0 	.word	0x080259a0
 801081c:	08025ac8 	.word	0x08025ac8
 8010820:	080259f0 	.word	0x080259f0
 8010824:	08029f14 	.word	0x08029f14

08010828 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	3308      	adds	r3, #8
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	429a      	cmp	r2, r3
 8010840:	d00a      	beq.n	8010858 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d002      	beq.n	801084e <netif_do_set_netmask+0x26>
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	e000      	b.n	8010850 <netif_do_set_netmask+0x28>
 801084e:	2300      	movs	r3, #0
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010854:	2301      	movs	r3, #1
 8010856:	e000      	b.n	801085a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3714      	adds	r7, #20
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
	...

08010868 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  ip_addr_t old_nm_val;
  ip_addr_t *old_nm = &old_nm_val;
#else
  ip_addr_t *old_nm = NULL;
 8010872:	2300      	movs	r3, #0
 8010874:	60fb      	str	r3, [r7, #12]
#endif
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d107      	bne.n	801088c <netif_set_netmask+0x24>
 801087c:	4b0a      	ldr	r3, [pc, #40]	; (80108a8 <netif_set_netmask+0x40>)
 801087e:	f240 223a 	movw	r2, #570	; 0x23a
 8010882:	490a      	ldr	r1, [pc, #40]	; (80108ac <netif_set_netmask+0x44>)
 8010884:	480a      	ldr	r0, [pc, #40]	; (80108b0 <netif_set_netmask+0x48>)
 8010886:	f00b f831 	bl	801b8ec <printf>
 801088a:	e009      	b.n	80108a0 <netif_set_netmask+0x38>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (netmask == NULL) {
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d101      	bne.n	8010896 <netif_set_netmask+0x2e>
    netmask = IP4_ADDR_ANY4;
 8010892:	4b08      	ldr	r3, [pc, #32]	; (80108b4 <netif_set_netmask+0x4c>)
 8010894:	603b      	str	r3, [r7, #0]
  }

  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010896:	68fa      	ldr	r2, [r7, #12]
 8010898:	6839      	ldr	r1, [r7, #0]
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f7ff ffc4 	bl	8010828 <netif_do_set_netmask>
    netif_ext_callback_args_t args;
    args.ipv4_changed.old_netmask = old_nm;
    netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
#endif
  }
}
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	080259a0 	.word	0x080259a0
 80108ac:	08025ae8 	.word	0x08025ae8
 80108b0:	080259f0 	.word	0x080259f0
 80108b4:	08029f14 	.word	0x08029f14

080108b8 <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	330c      	adds	r3, #12
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d00a      	beq.n	80108e8 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <netif_do_set_gw+0x26>
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	e000      	b.n	80108e0 <netif_do_set_gw+0x28>
 80108de:	2300      	movs	r3, #0
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80108e4:	2301      	movs	r3, #1
 80108e6:	e000      	b.n	80108ea <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80108e8:	2300      	movs	r3, #0
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3714      	adds	r7, #20
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr
	...

080108f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b088      	sub	sp, #32
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	607a      	str	r2, [r7, #4]
 8010904:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010906:	2300      	movs	r3, #0
 8010908:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801090a:	2300      	movs	r3, #0
 801090c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d101      	bne.n	8010918 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010914:	4b1c      	ldr	r3, [pc, #112]	; (8010988 <netif_set_addr+0x90>)
 8010916:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d101      	bne.n	8010922 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801091e:	4b1a      	ldr	r3, [pc, #104]	; (8010988 <netif_set_addr+0x90>)
 8010920:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010928:	4b17      	ldr	r3, [pc, #92]	; (8010988 <netif_set_addr+0x90>)
 801092a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d003      	beq.n	801093a <netif_set_addr+0x42>
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d101      	bne.n	801093e <netif_set_addr+0x46>
 801093a:	2301      	movs	r3, #1
 801093c:	e000      	b.n	8010940 <netif_set_addr+0x48>
 801093e:	2300      	movs	r3, #0
 8010940:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d006      	beq.n	8010956 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010948:	f107 0310 	add.w	r3, r7, #16
 801094c:	461a      	mov	r2, r3
 801094e:	68b9      	ldr	r1, [r7, #8]
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f7ff fef7 	bl	8010744 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010956:	69fa      	ldr	r2, [r7, #28]
 8010958:	6879      	ldr	r1, [r7, #4]
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	f7ff ff64 	bl	8010828 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010960:	69ba      	ldr	r2, [r7, #24]
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7ff ffa7 	bl	80108b8 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d106      	bne.n	801097e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010970:	f107 0310 	add.w	r3, r7, #16
 8010974:	461a      	mov	r2, r3
 8010976:	68b9      	ldr	r1, [r7, #8]
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f7ff fee3 	bl	8010744 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801097e:	bf00      	nop
 8010980:	3720      	adds	r7, #32
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	08029f14 	.word	0x08029f14

0801098c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010994:	4a04      	ldr	r2, [pc, #16]	; (80109a8 <netif_set_default+0x1c>)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801099a:	bf00      	nop
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	2000bdc4 	.word	0x2000bdc4

080109ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d107      	bne.n	80109ca <netif_set_up+0x1e>
 80109ba:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <netif_set_up+0x4c>)
 80109bc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80109c0:	490e      	ldr	r1, [pc, #56]	; (80109fc <netif_set_up+0x50>)
 80109c2:	480f      	ldr	r0, [pc, #60]	; (8010a00 <netif_set_up+0x54>)
 80109c4:	f00a ff92 	bl	801b8ec <printf>
 80109c8:	e013      	b.n	80109f2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80109d0:	f003 0301 	and.w	r3, r3, #1
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d10c      	bne.n	80109f2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80109de:	f043 0301 	orr.w	r3, r3, #1
 80109e2:	b2da      	uxtb	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80109ea:	2103      	movs	r1, #3
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f000 f809 	bl	8010a04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	080259a0 	.word	0x080259a0
 80109fc:	08025b28 	.word	0x08025b28
 8010a00:	080259f0 	.word	0x080259f0

08010a04 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d106      	bne.n	8010a24 <netif_issue_reports+0x20>
 8010a16:	4b18      	ldr	r3, [pc, #96]	; (8010a78 <netif_issue_reports+0x74>)
 8010a18:	f240 326d 	movw	r2, #877	; 0x36d
 8010a1c:	4917      	ldr	r1, [pc, #92]	; (8010a7c <netif_issue_reports+0x78>)
 8010a1e:	4818      	ldr	r0, [pc, #96]	; (8010a80 <netif_issue_reports+0x7c>)
 8010a20:	f00a ff64 	bl	801b8ec <printf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a2a:	f003 0304 	and.w	r3, r3, #4
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d01e      	beq.n	8010a70 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a38:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d017      	beq.n	8010a70 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d013      	beq.n	8010a72 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d00e      	beq.n	8010a72 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010a5a:	f003 0308 	and.w	r3, r3, #8
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d007      	beq.n	8010a72 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	3304      	adds	r3, #4
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f008 fcd3 	bl	8019414 <etharp_request>
 8010a6e:	e000      	b.n	8010a72 <netif_issue_reports+0x6e>
    return;
 8010a70:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	080259a0 	.word	0x080259a0
 8010a7c:	08025b44 	.word	0x08025b44
 8010a80:	080259f0 	.word	0x080259f0

08010a84 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d107      	bne.n	8010aa2 <netif_set_down+0x1e>
 8010a92:	4b12      	ldr	r3, [pc, #72]	; (8010adc <netif_set_down+0x58>)
 8010a94:	f240 329b 	movw	r2, #923	; 0x39b
 8010a98:	4911      	ldr	r1, [pc, #68]	; (8010ae0 <netif_set_down+0x5c>)
 8010a9a:	4812      	ldr	r0, [pc, #72]	; (8010ae4 <netif_set_down+0x60>)
 8010a9c:	f00a ff26 	bl	801b8ec <printf>
 8010aa0:	e019      	b.n	8010ad6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d012      	beq.n	8010ad6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010ab6:	f023 0301 	bic.w	r3, r3, #1
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010ac8:	f003 0308 	and.w	r3, r3, #8
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d002      	beq.n	8010ad6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	f008 f85d 	bl	8018b90 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	080259a0 	.word	0x080259a0
 8010ae0:	08025b68 	.word	0x08025b68
 8010ae4:	080259f0 	.word	0x080259f0

08010ae8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010af4:	f06f 030b 	mvn.w	r3, #11
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010b0e:	79fb      	ldrb	r3, [r7, #7]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d013      	beq.n	8010b3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010b14:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <netif_get_by_index+0x48>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60fb      	str	r3, [r7, #12]
 8010b1a:	e00c      	b.n	8010b36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b22:	3301      	adds	r3, #1
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	79fa      	ldrb	r2, [r7, #7]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d101      	bne.n	8010b30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	e006      	b.n	8010b3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	60fb      	str	r3, [r7, #12]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1ef      	bne.n	8010b1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3714      	adds	r7, #20
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop
 8010b4c:	2000bdc0 	.word	0x2000bdc0

08010b50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010b56:	f00a fad1 	bl	801b0fc <sys_arch_protect>
 8010b5a:	6038      	str	r0, [r7, #0]
 8010b5c:	4b0d      	ldr	r3, [pc, #52]	; (8010b94 <pbuf_free_ooseq+0x44>)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	701a      	strb	r2, [r3, #0]
 8010b62:	6838      	ldr	r0, [r7, #0]
 8010b64:	f00a fad8 	bl	801b118 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b68:	4b0b      	ldr	r3, [pc, #44]	; (8010b98 <pbuf_free_ooseq+0x48>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	607b      	str	r3, [r7, #4]
 8010b6e:	e00a      	b.n	8010b86 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d003      	beq.n	8010b80 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f002 fc83 	bl	8013484 <tcp_free_ooseq>
      return;
 8010b7e:	e005      	b.n	8010b8c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	68db      	ldr	r3, [r3, #12]
 8010b84:	607b      	str	r3, [r7, #4]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d1f1      	bne.n	8010b70 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	2000bdc8 	.word	0x2000bdc8
 8010b98:	2000bdd0 	.word	0x2000bdd0

08010b9c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010ba4:	f7ff ffd4 	bl	8010b50 <pbuf_free_ooseq>
}
 8010ba8:	bf00      	nop
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010bb6:	f00a faa1 	bl	801b0fc <sys_arch_protect>
 8010bba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010bbc:	4b0f      	ldr	r3, [pc, #60]	; (8010bfc <pbuf_pool_is_empty+0x4c>)
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010bc2:	4b0e      	ldr	r3, [pc, #56]	; (8010bfc <pbuf_pool_is_empty+0x4c>)
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f00a faa5 	bl	801b118 <sys_arch_unprotect>

  if (!queued) {
 8010bce:	78fb      	ldrb	r3, [r7, #3]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d10f      	bne.n	8010bf4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010bd4:	2100      	movs	r1, #0
 8010bd6:	480a      	ldr	r0, [pc, #40]	; (8010c00 <pbuf_pool_is_empty+0x50>)
 8010bd8:	f7fd fee8 	bl	800e9ac <tcpip_try_callback>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d008      	beq.n	8010bf4 <pbuf_pool_is_empty+0x44>
 8010be2:	f00a fa8b 	bl	801b0fc <sys_arch_protect>
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <pbuf_pool_is_empty+0x4c>)
 8010bea:	2200      	movs	r2, #0
 8010bec:	701a      	strb	r2, [r3, #0]
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f00a fa92 	bl	801b118 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010bf4:	bf00      	nop
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	2000bdc8 	.word	0x2000bdc8
 8010c00:	08010b9d 	.word	0x08010b9d

08010c04 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b085      	sub	sp, #20
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	4611      	mov	r1, r2
 8010c10:	461a      	mov	r2, r3
 8010c12:	460b      	mov	r3, r1
 8010c14:	80fb      	strh	r3, [r7, #6]
 8010c16:	4613      	mov	r3, r2
 8010c18:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	88fa      	ldrh	r2, [r7, #6]
 8010c2a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	88ba      	ldrh	r2, [r7, #4]
 8010c30:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010c32:	8b3b      	ldrh	r3, [r7, #24]
 8010c34:	b2da      	uxtb	r2, r3
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	7f3a      	ldrb	r2, [r7, #28]
 8010c3e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2201      	movs	r2, #1
 8010c44:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	73da      	strb	r2, [r3, #15]
}
 8010c4c:	bf00      	nop
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b08c      	sub	sp, #48	; 0x30
 8010c5c:	af02      	add	r7, sp, #8
 8010c5e:	4603      	mov	r3, r0
 8010c60:	71fb      	strb	r3, [r7, #7]
 8010c62:	460b      	mov	r3, r1
 8010c64:	80bb      	strh	r3, [r7, #4]
 8010c66:	4613      	mov	r3, r2
 8010c68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010c6a:	79fb      	ldrb	r3, [r7, #7]
 8010c6c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010c6e:	887b      	ldrh	r3, [r7, #2]
 8010c70:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010c74:	d07f      	beq.n	8010d76 <pbuf_alloc+0x11e>
 8010c76:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010c7a:	f300 80c8 	bgt.w	8010e0e <pbuf_alloc+0x1b6>
 8010c7e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010c82:	d010      	beq.n	8010ca6 <pbuf_alloc+0x4e>
 8010c84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010c88:	f300 80c1 	bgt.w	8010e0e <pbuf_alloc+0x1b6>
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d002      	beq.n	8010c96 <pbuf_alloc+0x3e>
 8010c90:	2b41      	cmp	r3, #65	; 0x41
 8010c92:	f040 80bc 	bne.w	8010e0e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010c96:	887a      	ldrh	r2, [r7, #2]
 8010c98:	88bb      	ldrh	r3, [r7, #4]
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	f000 f8d1 	bl	8010e44 <pbuf_alloc_reference>
 8010ca2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010ca4:	e0bd      	b.n	8010e22 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010caa:	2300      	movs	r3, #0
 8010cac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010cae:	88bb      	ldrh	r3, [r7, #4]
 8010cb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010cb2:	200c      	movs	r0, #12
 8010cb4:	f7ff fbe4 	bl	8010480 <memp_malloc>
 8010cb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d109      	bne.n	8010cd4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010cc0:	f7ff ff76 	bl	8010bb0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d002      	beq.n	8010cd0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ccc:	f000 faa8 	bl	8011220 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	e0a7      	b.n	8010e24 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cd6:	3303      	adds	r3, #3
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	f023 0303 	bic.w	r3, r3, #3
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	8b7a      	ldrh	r2, [r7, #26]
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	bf28      	it	cs
 8010cec:	4613      	movcs	r3, r2
 8010cee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010cf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cf2:	3310      	adds	r3, #16
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	3303      	adds	r3, #3
 8010cfa:	f023 0303 	bic.w	r3, r3, #3
 8010cfe:	4618      	mov	r0, r3
 8010d00:	89f9      	ldrh	r1, [r7, #14]
 8010d02:	8b7a      	ldrh	r2, [r7, #26]
 8010d04:	2300      	movs	r3, #0
 8010d06:	9301      	str	r3, [sp, #4]
 8010d08:	887b      	ldrh	r3, [r7, #2]
 8010d0a:	9300      	str	r3, [sp, #0]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	4601      	mov	r1, r0
 8010d10:	6938      	ldr	r0, [r7, #16]
 8010d12:	f7ff ff77 	bl	8010c04 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	f003 0303 	and.w	r3, r3, #3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d006      	beq.n	8010d30 <pbuf_alloc+0xd8>
 8010d22:	4b42      	ldr	r3, [pc, #264]	; (8010e2c <pbuf_alloc+0x1d4>)
 8010d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010d28:	4941      	ldr	r1, [pc, #260]	; (8010e30 <pbuf_alloc+0x1d8>)
 8010d2a:	4842      	ldr	r0, [pc, #264]	; (8010e34 <pbuf_alloc+0x1dc>)
 8010d2c:	f00a fdde 	bl	801b8ec <printf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d32:	3303      	adds	r3, #3
 8010d34:	f023 0303 	bic.w	r3, r3, #3
 8010d38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010d3c:	d106      	bne.n	8010d4c <pbuf_alloc+0xf4>
 8010d3e:	4b3b      	ldr	r3, [pc, #236]	; (8010e2c <pbuf_alloc+0x1d4>)
 8010d40:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010d44:	493c      	ldr	r1, [pc, #240]	; (8010e38 <pbuf_alloc+0x1e0>)
 8010d46:	483b      	ldr	r0, [pc, #236]	; (8010e34 <pbuf_alloc+0x1dc>)
 8010d48:	f00a fdd0 	bl	801b8ec <printf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	627b      	str	r3, [r7, #36]	; 0x24
 8010d56:	e002      	b.n	8010d5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	693a      	ldr	r2, [r7, #16]
 8010d5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010d62:	8b7a      	ldrh	r2, [r7, #26]
 8010d64:	89fb      	ldrh	r3, [r7, #14]
 8010d66:	1ad3      	subs	r3, r2, r3
 8010d68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010d6e:	8b7b      	ldrh	r3, [r7, #26]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d19e      	bne.n	8010cb2 <pbuf_alloc+0x5a>
      break;
 8010d74:	e055      	b.n	8010e22 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d78:	3303      	adds	r3, #3
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	f023 0303 	bic.w	r3, r3, #3
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	88bb      	ldrh	r3, [r7, #4]
 8010d84:	3303      	adds	r3, #3
 8010d86:	b29b      	uxth	r3, r3
 8010d88:	f023 0303 	bic.w	r3, r3, #3
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	4413      	add	r3, r2
 8010d90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010d92:	8b3b      	ldrh	r3, [r7, #24]
 8010d94:	3310      	adds	r3, #16
 8010d96:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010d98:	8b3a      	ldrh	r2, [r7, #24]
 8010d9a:	88bb      	ldrh	r3, [r7, #4]
 8010d9c:	3303      	adds	r3, #3
 8010d9e:	f023 0303 	bic.w	r3, r3, #3
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d306      	bcc.n	8010db4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010da6:	8afa      	ldrh	r2, [r7, #22]
 8010da8:	88bb      	ldrh	r3, [r7, #4]
 8010daa:	3303      	adds	r3, #3
 8010dac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d201      	bcs.n	8010db8 <pbuf_alloc+0x160>
        return NULL;
 8010db4:	2300      	movs	r3, #0
 8010db6:	e035      	b.n	8010e24 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010db8:	8afb      	ldrh	r3, [r7, #22]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff f9de 	bl	801017c <mem_malloc>
 8010dc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d101      	bne.n	8010dcc <pbuf_alloc+0x174>
        return NULL;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	e02b      	b.n	8010e24 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010dce:	3310      	adds	r3, #16
 8010dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd2:	4413      	add	r3, r2
 8010dd4:	3303      	adds	r3, #3
 8010dd6:	f023 0303 	bic.w	r3, r3, #3
 8010dda:	4618      	mov	r0, r3
 8010ddc:	88b9      	ldrh	r1, [r7, #4]
 8010dde:	88ba      	ldrh	r2, [r7, #4]
 8010de0:	2300      	movs	r3, #0
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	887b      	ldrh	r3, [r7, #2]
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	460b      	mov	r3, r1
 8010dea:	4601      	mov	r1, r0
 8010dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dee:	f7ff ff09 	bl	8010c04 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	f003 0303 	and.w	r3, r3, #3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d010      	beq.n	8010e20 <pbuf_alloc+0x1c8>
 8010dfe:	4b0b      	ldr	r3, [pc, #44]	; (8010e2c <pbuf_alloc+0x1d4>)
 8010e00:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010e04:	490d      	ldr	r1, [pc, #52]	; (8010e3c <pbuf_alloc+0x1e4>)
 8010e06:	480b      	ldr	r0, [pc, #44]	; (8010e34 <pbuf_alloc+0x1dc>)
 8010e08:	f00a fd70 	bl	801b8ec <printf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010e0c:	e008      	b.n	8010e20 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010e0e:	4b07      	ldr	r3, [pc, #28]	; (8010e2c <pbuf_alloc+0x1d4>)
 8010e10:	f240 1227 	movw	r2, #295	; 0x127
 8010e14:	490a      	ldr	r1, [pc, #40]	; (8010e40 <pbuf_alloc+0x1e8>)
 8010e16:	4807      	ldr	r0, [pc, #28]	; (8010e34 <pbuf_alloc+0x1dc>)
 8010e18:	f00a fd68 	bl	801b8ec <printf>
      return NULL;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	e001      	b.n	8010e24 <pbuf_alloc+0x1cc>
      break;
 8010e20:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3728      	adds	r7, #40	; 0x28
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	08025bd0 	.word	0x08025bd0
 8010e30:	08025c00 	.word	0x08025c00
 8010e34:	08025c30 	.word	0x08025c30
 8010e38:	08025c58 	.word	0x08025c58
 8010e3c:	08025c8c 	.word	0x08025c8c
 8010e40:	08025cb8 	.word	0x08025cb8

08010e44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af02      	add	r7, sp, #8
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	807b      	strh	r3, [r7, #2]
 8010e50:	4613      	mov	r3, r2
 8010e52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010e54:	883b      	ldrh	r3, [r7, #0]
 8010e56:	2b41      	cmp	r3, #65	; 0x41
 8010e58:	d009      	beq.n	8010e6e <pbuf_alloc_reference+0x2a>
 8010e5a:	883b      	ldrh	r3, [r7, #0]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	d006      	beq.n	8010e6e <pbuf_alloc_reference+0x2a>
 8010e60:	4b0f      	ldr	r3, [pc, #60]	; (8010ea0 <pbuf_alloc_reference+0x5c>)
 8010e62:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010e66:	490f      	ldr	r1, [pc, #60]	; (8010ea4 <pbuf_alloc_reference+0x60>)
 8010e68:	480f      	ldr	r0, [pc, #60]	; (8010ea8 <pbuf_alloc_reference+0x64>)
 8010e6a:	f00a fd3f 	bl	801b8ec <printf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010e6e:	200b      	movs	r0, #11
 8010e70:	f7ff fb06 	bl	8010480 <memp_malloc>
 8010e74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d101      	bne.n	8010e80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e00b      	b.n	8010e98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010e80:	8879      	ldrh	r1, [r7, #2]
 8010e82:	887a      	ldrh	r2, [r7, #2]
 8010e84:	2300      	movs	r3, #0
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	883b      	ldrh	r3, [r7, #0]
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	6879      	ldr	r1, [r7, #4]
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f7ff feb7 	bl	8010c04 <pbuf_init_alloced_pbuf>
  return p;
 8010e96:	68fb      	ldr	r3, [r7, #12]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	08025bd0 	.word	0x08025bd0
 8010ea4:	08025cd4 	.word	0x08025cd4
 8010ea8:	08025c30 	.word	0x08025c30

08010eac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b088      	sub	sp, #32
 8010eb0:	af02      	add	r7, sp, #8
 8010eb2:	607b      	str	r3, [r7, #4]
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	73fb      	strb	r3, [r7, #15]
 8010eb8:	460b      	mov	r3, r1
 8010eba:	81bb      	strh	r3, [r7, #12]
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010ec0:	7bfb      	ldrb	r3, [r7, #15]
 8010ec2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010ec4:	8a7b      	ldrh	r3, [r7, #18]
 8010ec6:	3303      	adds	r3, #3
 8010ec8:	f023 0203 	bic.w	r2, r3, #3
 8010ecc:	89bb      	ldrh	r3, [r7, #12]
 8010ece:	441a      	add	r2, r3
 8010ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d901      	bls.n	8010eda <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	e018      	b.n	8010f0c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010eda:	6a3b      	ldr	r3, [r7, #32]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010ee0:	8a7b      	ldrh	r3, [r7, #18]
 8010ee2:	3303      	adds	r3, #3
 8010ee4:	f023 0303 	bic.w	r3, r3, #3
 8010ee8:	6a3a      	ldr	r2, [r7, #32]
 8010eea:	4413      	add	r3, r2
 8010eec:	617b      	str	r3, [r7, #20]
 8010eee:	e001      	b.n	8010ef4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	89b9      	ldrh	r1, [r7, #12]
 8010ef8:	89ba      	ldrh	r2, [r7, #12]
 8010efa:	2302      	movs	r3, #2
 8010efc:	9301      	str	r3, [sp, #4]
 8010efe:	897b      	ldrh	r3, [r7, #10]
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	460b      	mov	r3, r1
 8010f04:	6979      	ldr	r1, [r7, #20]
 8010f06:	f7ff fe7d 	bl	8010c04 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010f0a:	687b      	ldr	r3, [r7, #4]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3718      	adds	r7, #24
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d106      	bne.n	8010f34 <pbuf_realloc+0x20>
 8010f26:	4b3a      	ldr	r3, [pc, #232]	; (8011010 <pbuf_realloc+0xfc>)
 8010f28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010f2c:	4939      	ldr	r1, [pc, #228]	; (8011014 <pbuf_realloc+0x100>)
 8010f2e:	483a      	ldr	r0, [pc, #232]	; (8011018 <pbuf_realloc+0x104>)
 8010f30:	f00a fcdc 	bl	801b8ec <printf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	891b      	ldrh	r3, [r3, #8]
 8010f38:	887a      	ldrh	r2, [r7, #2]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d263      	bcs.n	8011006 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	891a      	ldrh	r2, [r3, #8]
 8010f42:	887b      	ldrh	r3, [r7, #2]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010f48:	887b      	ldrh	r3, [r7, #2]
 8010f4a:	817b      	strh	r3, [r7, #10]
  q = p;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010f50:	e018      	b.n	8010f84 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	895b      	ldrh	r3, [r3, #10]
 8010f56:	897a      	ldrh	r2, [r7, #10]
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	891a      	ldrh	r2, [r3, #8]
 8010f60:	893b      	ldrh	r3, [r7, #8]
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d106      	bne.n	8010f84 <pbuf_realloc+0x70>
 8010f76:	4b26      	ldr	r3, [pc, #152]	; (8011010 <pbuf_realloc+0xfc>)
 8010f78:	f240 12af 	movw	r2, #431	; 0x1af
 8010f7c:	4927      	ldr	r1, [pc, #156]	; (801101c <pbuf_realloc+0x108>)
 8010f7e:	4826      	ldr	r0, [pc, #152]	; (8011018 <pbuf_realloc+0x104>)
 8010f80:	f00a fcb4 	bl	801b8ec <printf>
  while (rem_len > q->len) {
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	895b      	ldrh	r3, [r3, #10]
 8010f88:	897a      	ldrh	r2, [r7, #10]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d8e1      	bhi.n	8010f52 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	7b1b      	ldrb	r3, [r3, #12]
 8010f92:	f003 030f 	and.w	r3, r3, #15
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d121      	bne.n	8010fde <pbuf_realloc+0xca>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	895b      	ldrh	r3, [r3, #10]
 8010f9e:	897a      	ldrh	r2, [r7, #10]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d01c      	beq.n	8010fde <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	7b5b      	ldrb	r3, [r3, #13]
 8010fa8:	f003 0302 	and.w	r3, r3, #2
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d116      	bne.n	8010fde <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	685a      	ldr	r2, [r3, #4]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	b29a      	uxth	r2, r3
 8010fba:	897b      	ldrh	r3, [r7, #10]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	68f8      	ldr	r0, [r7, #12]
 8010fc4:	f7fe ffd0 	bl	800ff68 <mem_trim>
 8010fc8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d106      	bne.n	8010fde <pbuf_realloc+0xca>
 8010fd0:	4b0f      	ldr	r3, [pc, #60]	; (8011010 <pbuf_realloc+0xfc>)
 8010fd2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010fd6:	4912      	ldr	r1, [pc, #72]	; (8011020 <pbuf_realloc+0x10c>)
 8010fd8:	480f      	ldr	r0, [pc, #60]	; (8011018 <pbuf_realloc+0x104>)
 8010fda:	f00a fc87 	bl	801b8ec <printf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	897a      	ldrh	r2, [r7, #10]
 8010fe2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	895a      	ldrh	r2, [r3, #10]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d004      	beq.n	8010ffe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 f911 	bl	8011220 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2200      	movs	r2, #0
 8011002:	601a      	str	r2, [r3, #0]
 8011004:	e000      	b.n	8011008 <pbuf_realloc+0xf4>
    return;
 8011006:	bf00      	nop

}
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	08025bd0 	.word	0x08025bd0
 8011014:	08025ce8 	.word	0x08025ce8
 8011018:	08025c30 	.word	0x08025c30
 801101c:	08025d00 	.word	0x08025d00
 8011020:	08025d18 	.word	0x08025d18

08011024 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b086      	sub	sp, #24
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	4613      	mov	r3, r2
 8011030:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d106      	bne.n	8011046 <pbuf_add_header_impl+0x22>
 8011038:	4b2b      	ldr	r3, [pc, #172]	; (80110e8 <pbuf_add_header_impl+0xc4>)
 801103a:	f240 12df 	movw	r2, #479	; 0x1df
 801103e:	492b      	ldr	r1, [pc, #172]	; (80110ec <pbuf_add_header_impl+0xc8>)
 8011040:	482b      	ldr	r0, [pc, #172]	; (80110f0 <pbuf_add_header_impl+0xcc>)
 8011042:	f00a fc53 	bl	801b8ec <printf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d003      	beq.n	8011054 <pbuf_add_header_impl+0x30>
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011052:	d301      	bcc.n	8011058 <pbuf_add_header_impl+0x34>
    return 1;
 8011054:	2301      	movs	r3, #1
 8011056:	e043      	b.n	80110e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d101      	bne.n	8011062 <pbuf_add_header_impl+0x3e>
    return 0;
 801105e:	2300      	movs	r3, #0
 8011060:	e03e      	b.n	80110e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	891a      	ldrh	r2, [r3, #8]
 801106a:	8a7b      	ldrh	r3, [r7, #18]
 801106c:	4413      	add	r3, r2
 801106e:	b29b      	uxth	r3, r3
 8011070:	8a7a      	ldrh	r2, [r7, #18]
 8011072:	429a      	cmp	r2, r3
 8011074:	d901      	bls.n	801107a <pbuf_add_header_impl+0x56>
    return 1;
 8011076:	2301      	movs	r3, #1
 8011078:	e032      	b.n	80110e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	7b1b      	ldrb	r3, [r3, #12]
 801107e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011080:	8a3b      	ldrh	r3, [r7, #16]
 8011082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00c      	beq.n	80110a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	685a      	ldr	r2, [r3, #4]
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	425b      	negs	r3, r3
 8011092:	4413      	add	r3, r2
 8011094:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	3310      	adds	r3, #16
 801109a:	697a      	ldr	r2, [r7, #20]
 801109c:	429a      	cmp	r2, r3
 801109e:	d20d      	bcs.n	80110bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80110a0:	2301      	movs	r3, #1
 80110a2:	e01d      	b.n	80110e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80110a4:	79fb      	ldrb	r3, [r7, #7]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d006      	beq.n	80110b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	685a      	ldr	r2, [r3, #4]
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	425b      	negs	r3, r3
 80110b2:	4413      	add	r3, r2
 80110b4:	617b      	str	r3, [r7, #20]
 80110b6:	e001      	b.n	80110bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80110b8:	2301      	movs	r3, #1
 80110ba:	e011      	b.n	80110e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	697a      	ldr	r2, [r7, #20]
 80110c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	895a      	ldrh	r2, [r3, #10]
 80110c6:	8a7b      	ldrh	r3, [r7, #18]
 80110c8:	4413      	add	r3, r2
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	891a      	ldrh	r2, [r3, #8]
 80110d4:	8a7b      	ldrh	r3, [r7, #18]
 80110d6:	4413      	add	r3, r2
 80110d8:	b29a      	uxth	r2, r3
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	811a      	strh	r2, [r3, #8]


  return 0;
 80110de:	2300      	movs	r3, #0
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3718      	adds	r7, #24
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	08025bd0 	.word	0x08025bd0
 80110ec:	08025d34 	.word	0x08025d34
 80110f0:	08025c30 	.word	0x08025c30

080110f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80110fe:	2200      	movs	r2, #0
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7ff ff8e 	bl	8011024 <pbuf_add_header_impl>
 8011108:	4603      	mov	r3, r0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
	...

08011114 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d106      	bne.n	8011132 <pbuf_remove_header+0x1e>
 8011124:	4b20      	ldr	r3, [pc, #128]	; (80111a8 <pbuf_remove_header+0x94>)
 8011126:	f240 224b 	movw	r2, #587	; 0x24b
 801112a:	4920      	ldr	r1, [pc, #128]	; (80111ac <pbuf_remove_header+0x98>)
 801112c:	4820      	ldr	r0, [pc, #128]	; (80111b0 <pbuf_remove_header+0x9c>)
 801112e:	f00a fbdd 	bl	801b8ec <printf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d003      	beq.n	8011140 <pbuf_remove_header+0x2c>
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801113e:	d301      	bcc.n	8011144 <pbuf_remove_header+0x30>
    return 1;
 8011140:	2301      	movs	r3, #1
 8011142:	e02c      	b.n	801119e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d101      	bne.n	801114e <pbuf_remove_header+0x3a>
    return 0;
 801114a:	2300      	movs	r3, #0
 801114c:	e027      	b.n	801119e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	895b      	ldrh	r3, [r3, #10]
 8011156:	89fa      	ldrh	r2, [r7, #14]
 8011158:	429a      	cmp	r2, r3
 801115a:	d908      	bls.n	801116e <pbuf_remove_header+0x5a>
 801115c:	4b12      	ldr	r3, [pc, #72]	; (80111a8 <pbuf_remove_header+0x94>)
 801115e:	f240 2255 	movw	r2, #597	; 0x255
 8011162:	4914      	ldr	r1, [pc, #80]	; (80111b4 <pbuf_remove_header+0xa0>)
 8011164:	4812      	ldr	r0, [pc, #72]	; (80111b0 <pbuf_remove_header+0x9c>)
 8011166:	f00a fbc1 	bl	801b8ec <printf>
 801116a:	2301      	movs	r3, #1
 801116c:	e017      	b.n	801119e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	441a      	add	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	895a      	ldrh	r2, [r3, #10]
 8011184:	89fb      	ldrh	r3, [r7, #14]
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	b29a      	uxth	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	891a      	ldrh	r2, [r3, #8]
 8011192:	89fb      	ldrh	r3, [r7, #14]
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	b29a      	uxth	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	08025bd0 	.word	0x08025bd0
 80111ac:	08025d34 	.word	0x08025d34
 80111b0:	08025c30 	.word	0x08025c30
 80111b4:	08025d40 	.word	0x08025d40

080111b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	460b      	mov	r3, r1
 80111c2:	807b      	strh	r3, [r7, #2]
 80111c4:	4613      	mov	r3, r2
 80111c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80111c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	da08      	bge.n	80111e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80111d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111d4:	425b      	negs	r3, r3
 80111d6:	4619      	mov	r1, r3
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f7ff ff9b 	bl	8011114 <pbuf_remove_header>
 80111de:	4603      	mov	r3, r0
 80111e0:	e007      	b.n	80111f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80111e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111e6:	787a      	ldrb	r2, [r7, #1]
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7ff ff1a 	bl	8011024 <pbuf_add_header_impl>
 80111f0:	4603      	mov	r3, r0
  }
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b082      	sub	sp, #8
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	460b      	mov	r3, r1
 8011204:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011206:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801120a:	2201      	movs	r2, #1
 801120c:	4619      	mov	r1, r3
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7ff ffd2 	bl	80111b8 <pbuf_header_impl>
 8011214:	4603      	mov	r3, r0
}
 8011216:	4618      	mov	r0, r3
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
	...

08011220 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b088      	sub	sp, #32
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10b      	bne.n	8011246 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d106      	bne.n	8011242 <pbuf_free+0x22>
 8011234:	4b3b      	ldr	r3, [pc, #236]	; (8011324 <pbuf_free+0x104>)
 8011236:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801123a:	493b      	ldr	r1, [pc, #236]	; (8011328 <pbuf_free+0x108>)
 801123c:	483b      	ldr	r0, [pc, #236]	; (801132c <pbuf_free+0x10c>)
 801123e:	f00a fb55 	bl	801b8ec <printf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011242:	2300      	movs	r3, #0
 8011244:	e069      	b.n	801131a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011246:	2300      	movs	r3, #0
 8011248:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801124a:	e062      	b.n	8011312 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801124c:	f009 ff56 	bl	801b0fc <sys_arch_protect>
 8011250:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	7b9b      	ldrb	r3, [r3, #14]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d106      	bne.n	8011268 <pbuf_free+0x48>
 801125a:	4b32      	ldr	r3, [pc, #200]	; (8011324 <pbuf_free+0x104>)
 801125c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011260:	4933      	ldr	r1, [pc, #204]	; (8011330 <pbuf_free+0x110>)
 8011262:	4832      	ldr	r0, [pc, #200]	; (801132c <pbuf_free+0x10c>)
 8011264:	f00a fb42 	bl	801b8ec <printf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	7b9b      	ldrb	r3, [r3, #14]
 801126c:	3b01      	subs	r3, #1
 801126e:	b2da      	uxtb	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	739a      	strb	r2, [r3, #14]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	7b9b      	ldrb	r3, [r3, #14]
 8011278:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801127a:	69b8      	ldr	r0, [r7, #24]
 801127c:	f009 ff4c 	bl	801b118 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011280:	7dfb      	ldrb	r3, [r7, #23]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d143      	bne.n	801130e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	7b1b      	ldrb	r3, [r3, #12]
 8011290:	f003 030f 	and.w	r3, r3, #15
 8011294:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	7b5b      	ldrb	r3, [r3, #13]
 801129a:	f003 0302 	and.w	r3, r3, #2
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d011      	beq.n	80112c6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	691b      	ldr	r3, [r3, #16]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d106      	bne.n	80112bc <pbuf_free+0x9c>
 80112ae:	4b1d      	ldr	r3, [pc, #116]	; (8011324 <pbuf_free+0x104>)
 80112b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80112b4:	491f      	ldr	r1, [pc, #124]	; (8011334 <pbuf_free+0x114>)
 80112b6:	481d      	ldr	r0, [pc, #116]	; (801132c <pbuf_free+0x10c>)
 80112b8:	f00a fb18 	bl	801b8ec <printf>
        pc->custom_free_function(p);
 80112bc:	68bb      	ldr	r3, [r7, #8]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	4798      	blx	r3
 80112c4:	e01d      	b.n	8011302 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80112c6:	7bfb      	ldrb	r3, [r7, #15]
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d104      	bne.n	80112d6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80112cc:	6879      	ldr	r1, [r7, #4]
 80112ce:	200c      	movs	r0, #12
 80112d0:	f7ff f928 	bl	8010524 <memp_free>
 80112d4:	e015      	b.n	8011302 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80112d6:	7bfb      	ldrb	r3, [r7, #15]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d104      	bne.n	80112e6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80112dc:	6879      	ldr	r1, [r7, #4]
 80112de:	200b      	movs	r0, #11
 80112e0:	f7ff f920 	bl	8010524 <memp_free>
 80112e4:	e00d      	b.n	8011302 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80112e6:	7bfb      	ldrb	r3, [r7, #15]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d103      	bne.n	80112f4 <pbuf_free+0xd4>
          mem_free(p);
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7fe fdab 	bl	800fe48 <mem_free>
 80112f2:	e006      	b.n	8011302 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80112f4:	4b0b      	ldr	r3, [pc, #44]	; (8011324 <pbuf_free+0x104>)
 80112f6:	f240 320f 	movw	r2, #783	; 0x30f
 80112fa:	490f      	ldr	r1, [pc, #60]	; (8011338 <pbuf_free+0x118>)
 80112fc:	480b      	ldr	r0, [pc, #44]	; (801132c <pbuf_free+0x10c>)
 80112fe:	f00a faf5 	bl	801b8ec <printf>
        }
      }
      count++;
 8011302:	7ffb      	ldrb	r3, [r7, #31]
 8011304:	3301      	adds	r3, #1
 8011306:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	607b      	str	r3, [r7, #4]
 801130c:	e001      	b.n	8011312 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801130e:	2300      	movs	r3, #0
 8011310:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d199      	bne.n	801124c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011318:	7ffb      	ldrb	r3, [r7, #31]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3720      	adds	r7, #32
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	08025bd0 	.word	0x08025bd0
 8011328:	08025d34 	.word	0x08025d34
 801132c:	08025c30 	.word	0x08025c30
 8011330:	08025d60 	.word	0x08025d60
 8011334:	08025d78 	.word	0x08025d78
 8011338:	08025d9c 	.word	0x08025d9c

0801133c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011344:	2300      	movs	r3, #0
 8011346:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011348:	e005      	b.n	8011356 <pbuf_clen+0x1a>
    ++len;
 801134a:	89fb      	ldrh	r3, [r7, #14]
 801134c:	3301      	adds	r3, #1
 801134e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1f6      	bne.n	801134a <pbuf_clen+0xe>
  }
  return len;
 801135c:	89fb      	ldrh	r3, [r7, #14]
}
 801135e:	4618      	mov	r0, r3
 8011360:	3714      	adds	r7, #20
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
	...

0801136c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d016      	beq.n	80113a8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801137a:	f009 febf 	bl	801b0fc <sys_arch_protect>
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	7b9b      	ldrb	r3, [r3, #14]
 8011384:	3301      	adds	r3, #1
 8011386:	b2da      	uxtb	r2, r3
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	739a      	strb	r2, [r3, #14]
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f009 fec3 	bl	801b118 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7b9b      	ldrb	r3, [r3, #14]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <pbuf_ref+0x3c>
 801139a:	4b05      	ldr	r3, [pc, #20]	; (80113b0 <pbuf_ref+0x44>)
 801139c:	f240 3242 	movw	r2, #834	; 0x342
 80113a0:	4904      	ldr	r1, [pc, #16]	; (80113b4 <pbuf_ref+0x48>)
 80113a2:	4805      	ldr	r0, [pc, #20]	; (80113b8 <pbuf_ref+0x4c>)
 80113a4:	f00a faa2 	bl	801b8ec <printf>
  }
}
 80113a8:	bf00      	nop
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	08025bd0 	.word	0x08025bd0
 80113b4:	08025db0 	.word	0x08025db0
 80113b8:	08025c30 	.word	0x08025c30

080113bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d002      	beq.n	80113d2 <pbuf_cat+0x16>
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d107      	bne.n	80113e2 <pbuf_cat+0x26>
 80113d2:	4b20      	ldr	r3, [pc, #128]	; (8011454 <pbuf_cat+0x98>)
 80113d4:	f240 3259 	movw	r2, #857	; 0x359
 80113d8:	491f      	ldr	r1, [pc, #124]	; (8011458 <pbuf_cat+0x9c>)
 80113da:	4820      	ldr	r0, [pc, #128]	; (801145c <pbuf_cat+0xa0>)
 80113dc:	f00a fa86 	bl	801b8ec <printf>
 80113e0:	e034      	b.n	801144c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	60fb      	str	r3, [r7, #12]
 80113e6:	e00a      	b.n	80113fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	891a      	ldrh	r2, [r3, #8]
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	4413      	add	r3, r2
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	60fb      	str	r3, [r7, #12]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1f0      	bne.n	80113e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	891a      	ldrh	r2, [r3, #8]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	895b      	ldrh	r3, [r3, #10]
 801140e:	429a      	cmp	r2, r3
 8011410:	d006      	beq.n	8011420 <pbuf_cat+0x64>
 8011412:	4b10      	ldr	r3, [pc, #64]	; (8011454 <pbuf_cat+0x98>)
 8011414:	f240 3262 	movw	r2, #866	; 0x362
 8011418:	4911      	ldr	r1, [pc, #68]	; (8011460 <pbuf_cat+0xa4>)
 801141a:	4810      	ldr	r0, [pc, #64]	; (801145c <pbuf_cat+0xa0>)
 801141c:	f00a fa66 	bl	801b8ec <printf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d006      	beq.n	8011436 <pbuf_cat+0x7a>
 8011428:	4b0a      	ldr	r3, [pc, #40]	; (8011454 <pbuf_cat+0x98>)
 801142a:	f240 3263 	movw	r2, #867	; 0x363
 801142e:	490d      	ldr	r1, [pc, #52]	; (8011464 <pbuf_cat+0xa8>)
 8011430:	480a      	ldr	r0, [pc, #40]	; (801145c <pbuf_cat+0xa0>)
 8011432:	f00a fa5b 	bl	801b8ec <printf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	891a      	ldrh	r2, [r3, #8]
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	891b      	ldrh	r3, [r3, #8]
 801143e:	4413      	add	r3, r2
 8011440:	b29a      	uxth	r2, r3
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	683a      	ldr	r2, [r7, #0]
 801144a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801144c:	3710      	adds	r7, #16
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}
 8011452:	bf00      	nop
 8011454:	08025bd0 	.word	0x08025bd0
 8011458:	08025dc4 	.word	0x08025dc4
 801145c:	08025c30 	.word	0x08025c30
 8011460:	08025dfc 	.word	0x08025dfc
 8011464:	08025e2c 	.word	0x08025e2c

08011468 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011472:	6839      	ldr	r1, [r7, #0]
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff ffa1 	bl	80113bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801147a:	6838      	ldr	r0, [r7, #0]
 801147c:	f7ff ff76 	bl	801136c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011480:	bf00      	nop
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b086      	sub	sp, #24
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011492:	2300      	movs	r3, #0
 8011494:	617b      	str	r3, [r7, #20]
 8011496:	2300      	movs	r3, #0
 8011498:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d008      	beq.n	80114b2 <pbuf_copy+0x2a>
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d005      	beq.n	80114b2 <pbuf_copy+0x2a>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	891a      	ldrh	r2, [r3, #8]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	891b      	ldrh	r3, [r3, #8]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d209      	bcs.n	80114c6 <pbuf_copy+0x3e>
 80114b2:	4b57      	ldr	r3, [pc, #348]	; (8011610 <pbuf_copy+0x188>)
 80114b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80114b8:	4956      	ldr	r1, [pc, #344]	; (8011614 <pbuf_copy+0x18c>)
 80114ba:	4857      	ldr	r0, [pc, #348]	; (8011618 <pbuf_copy+0x190>)
 80114bc:	f00a fa16 	bl	801b8ec <printf>
 80114c0:	f06f 030f 	mvn.w	r3, #15
 80114c4:	e09f      	b.n	8011606 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	895b      	ldrh	r3, [r3, #10]
 80114ca:	461a      	mov	r2, r3
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	1ad2      	subs	r2, r2, r3
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	895b      	ldrh	r3, [r3, #10]
 80114d4:	4619      	mov	r1, r3
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	1acb      	subs	r3, r1, r3
 80114da:	429a      	cmp	r2, r3
 80114dc:	d306      	bcc.n	80114ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	895b      	ldrh	r3, [r3, #10]
 80114e2:	461a      	mov	r2, r3
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	60fb      	str	r3, [r7, #12]
 80114ea:	e005      	b.n	80114f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	895b      	ldrh	r3, [r3, #10]
 80114f0:	461a      	mov	r2, r3
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	1ad3      	subs	r3, r2, r3
 80114f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	18d0      	adds	r0, r2, r3
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	685a      	ldr	r2, [r3, #4]
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	4413      	add	r3, r2
 8011508:	68fa      	ldr	r2, [r7, #12]
 801150a:	4619      	mov	r1, r3
 801150c:	f009 ff40 	bl	801b390 <memcpy>
    offset_to += len;
 8011510:	697a      	ldr	r2, [r7, #20]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	4413      	add	r3, r2
 8011516:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011518:	693a      	ldr	r2, [r7, #16]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	4413      	add	r3, r2
 801151e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	895b      	ldrh	r3, [r3, #10]
 8011524:	461a      	mov	r2, r3
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	4293      	cmp	r3, r2
 801152a:	d906      	bls.n	801153a <pbuf_copy+0xb2>
 801152c:	4b38      	ldr	r3, [pc, #224]	; (8011610 <pbuf_copy+0x188>)
 801152e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011532:	493a      	ldr	r1, [pc, #232]	; (801161c <pbuf_copy+0x194>)
 8011534:	4838      	ldr	r0, [pc, #224]	; (8011618 <pbuf_copy+0x190>)
 8011536:	f00a f9d9 	bl	801b8ec <printf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	895b      	ldrh	r3, [r3, #10]
 801153e:	461a      	mov	r2, r3
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	4293      	cmp	r3, r2
 8011544:	d906      	bls.n	8011554 <pbuf_copy+0xcc>
 8011546:	4b32      	ldr	r3, [pc, #200]	; (8011610 <pbuf_copy+0x188>)
 8011548:	f240 32da 	movw	r2, #986	; 0x3da
 801154c:	4934      	ldr	r1, [pc, #208]	; (8011620 <pbuf_copy+0x198>)
 801154e:	4832      	ldr	r0, [pc, #200]	; (8011618 <pbuf_copy+0x190>)
 8011550:	f00a f9cc 	bl	801b8ec <printf>
    if (offset_from >= p_from->len) {
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	895b      	ldrh	r3, [r3, #10]
 8011558:	461a      	mov	r2, r3
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	4293      	cmp	r3, r2
 801155e:	d304      	bcc.n	801156a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011560:	2300      	movs	r3, #0
 8011562:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	895b      	ldrh	r3, [r3, #10]
 801156e:	461a      	mov	r2, r3
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	4293      	cmp	r3, r2
 8011574:	d114      	bne.n	80115a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011576:	2300      	movs	r3, #0
 8011578:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10c      	bne.n	80115a0 <pbuf_copy+0x118>
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d009      	beq.n	80115a0 <pbuf_copy+0x118>
 801158c:	4b20      	ldr	r3, [pc, #128]	; (8011610 <pbuf_copy+0x188>)
 801158e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011592:	4924      	ldr	r1, [pc, #144]	; (8011624 <pbuf_copy+0x19c>)
 8011594:	4820      	ldr	r0, [pc, #128]	; (8011618 <pbuf_copy+0x190>)
 8011596:	f00a f9a9 	bl	801b8ec <printf>
 801159a:	f06f 030f 	mvn.w	r3, #15
 801159e:	e032      	b.n	8011606 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d013      	beq.n	80115ce <pbuf_copy+0x146>
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	895a      	ldrh	r2, [r3, #10]
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	891b      	ldrh	r3, [r3, #8]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d10d      	bne.n	80115ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d009      	beq.n	80115ce <pbuf_copy+0x146>
 80115ba:	4b15      	ldr	r3, [pc, #84]	; (8011610 <pbuf_copy+0x188>)
 80115bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80115c0:	4919      	ldr	r1, [pc, #100]	; (8011628 <pbuf_copy+0x1a0>)
 80115c2:	4815      	ldr	r0, [pc, #84]	; (8011618 <pbuf_copy+0x190>)
 80115c4:	f00a f992 	bl	801b8ec <printf>
 80115c8:	f06f 0305 	mvn.w	r3, #5
 80115cc:	e01b      	b.n	8011606 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d013      	beq.n	80115fc <pbuf_copy+0x174>
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	895a      	ldrh	r2, [r3, #10]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	891b      	ldrh	r3, [r3, #8]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d10d      	bne.n	80115fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d009      	beq.n	80115fc <pbuf_copy+0x174>
 80115e8:	4b09      	ldr	r3, [pc, #36]	; (8011610 <pbuf_copy+0x188>)
 80115ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80115ee:	490e      	ldr	r1, [pc, #56]	; (8011628 <pbuf_copy+0x1a0>)
 80115f0:	4809      	ldr	r0, [pc, #36]	; (8011618 <pbuf_copy+0x190>)
 80115f2:	f00a f97b 	bl	801b8ec <printf>
 80115f6:	f06f 0305 	mvn.w	r3, #5
 80115fa:	e004      	b.n	8011606 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f47f af61 	bne.w	80114c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011604:	2300      	movs	r3, #0
}
 8011606:	4618      	mov	r0, r3
 8011608:	3718      	adds	r7, #24
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	08025bd0 	.word	0x08025bd0
 8011614:	08025e78 	.word	0x08025e78
 8011618:	08025c30 	.word	0x08025c30
 801161c:	08025ea8 	.word	0x08025ea8
 8011620:	08025ec0 	.word	0x08025ec0
 8011624:	08025edc 	.word	0x08025edc
 8011628:	08025eec 	.word	0x08025eec

0801162c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b088      	sub	sp, #32
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	4611      	mov	r1, r2
 8011638:	461a      	mov	r2, r3
 801163a:	460b      	mov	r3, r1
 801163c:	80fb      	strh	r3, [r7, #6]
 801163e:	4613      	mov	r3, r2
 8011640:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011646:	2300      	movs	r3, #0
 8011648:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d108      	bne.n	8011662 <pbuf_copy_partial+0x36>
 8011650:	4b2b      	ldr	r3, [pc, #172]	; (8011700 <pbuf_copy_partial+0xd4>)
 8011652:	f240 420a 	movw	r2, #1034	; 0x40a
 8011656:	492b      	ldr	r1, [pc, #172]	; (8011704 <pbuf_copy_partial+0xd8>)
 8011658:	482b      	ldr	r0, [pc, #172]	; (8011708 <pbuf_copy_partial+0xdc>)
 801165a:	f00a f947 	bl	801b8ec <printf>
 801165e:	2300      	movs	r3, #0
 8011660:	e04a      	b.n	80116f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d108      	bne.n	801167a <pbuf_copy_partial+0x4e>
 8011668:	4b25      	ldr	r3, [pc, #148]	; (8011700 <pbuf_copy_partial+0xd4>)
 801166a:	f240 420b 	movw	r2, #1035	; 0x40b
 801166e:	4927      	ldr	r1, [pc, #156]	; (801170c <pbuf_copy_partial+0xe0>)
 8011670:	4825      	ldr	r0, [pc, #148]	; (8011708 <pbuf_copy_partial+0xdc>)
 8011672:	f00a f93b 	bl	801b8ec <printf>
 8011676:	2300      	movs	r3, #0
 8011678:	e03e      	b.n	80116f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	61fb      	str	r3, [r7, #28]
 801167e:	e034      	b.n	80116ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011680:	88bb      	ldrh	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00a      	beq.n	801169c <pbuf_copy_partial+0x70>
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	895b      	ldrh	r3, [r3, #10]
 801168a:	88ba      	ldrh	r2, [r7, #4]
 801168c:	429a      	cmp	r2, r3
 801168e:	d305      	bcc.n	801169c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	895b      	ldrh	r3, [r3, #10]
 8011694:	88ba      	ldrh	r2, [r7, #4]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	80bb      	strh	r3, [r7, #4]
 801169a:	e023      	b.n	80116e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	895a      	ldrh	r2, [r3, #10]
 80116a0:	88bb      	ldrh	r3, [r7, #4]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80116a6:	8b3a      	ldrh	r2, [r7, #24]
 80116a8:	88fb      	ldrh	r3, [r7, #6]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d901      	bls.n	80116b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80116ae:	88fb      	ldrh	r3, [r7, #6]
 80116b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80116b2:	8b7b      	ldrh	r3, [r7, #26]
 80116b4:	68ba      	ldr	r2, [r7, #8]
 80116b6:	18d0      	adds	r0, r2, r3
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	88bb      	ldrh	r3, [r7, #4]
 80116be:	4413      	add	r3, r2
 80116c0:	8b3a      	ldrh	r2, [r7, #24]
 80116c2:	4619      	mov	r1, r3
 80116c4:	f009 fe64 	bl	801b390 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80116c8:	8afa      	ldrh	r2, [r7, #22]
 80116ca:	8b3b      	ldrh	r3, [r7, #24]
 80116cc:	4413      	add	r3, r2
 80116ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80116d0:	8b7a      	ldrh	r2, [r7, #26]
 80116d2:	8b3b      	ldrh	r3, [r7, #24]
 80116d4:	4413      	add	r3, r2
 80116d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80116d8:	88fa      	ldrh	r2, [r7, #6]
 80116da:	8b3b      	ldrh	r3, [r7, #24]
 80116dc:	1ad3      	subs	r3, r2, r3
 80116de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80116e0:	2300      	movs	r3, #0
 80116e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	61fb      	str	r3, [r7, #28]
 80116ea:	88fb      	ldrh	r3, [r7, #6]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <pbuf_copy_partial+0xca>
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1c4      	bne.n	8011680 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80116f6:	8afb      	ldrh	r3, [r7, #22]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3720      	adds	r7, #32
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	08025bd0 	.word	0x08025bd0
 8011704:	08025f18 	.word	0x08025f18
 8011708:	08025c30 	.word	0x08025c30
 801170c:	08025f38 	.word	0x08025f38

08011710 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	603a      	str	r2, [r7, #0]
 801171a:	71fb      	strb	r3, [r7, #7]
 801171c:	460b      	mov	r3, r1
 801171e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	8919      	ldrh	r1, [r3, #8]
 8011724:	88ba      	ldrh	r2, [r7, #4]
 8011726:	79fb      	ldrb	r3, [r7, #7]
 8011728:	4618      	mov	r0, r3
 801172a:	f7ff fa95 	bl	8010c58 <pbuf_alloc>
 801172e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d101      	bne.n	801173a <pbuf_clone+0x2a>
    return NULL;
 8011736:	2300      	movs	r3, #0
 8011738:	e011      	b.n	801175e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801173a:	6839      	ldr	r1, [r7, #0]
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7ff fea3 	bl	8011488 <pbuf_copy>
 8011742:	4603      	mov	r3, r0
 8011744:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011746:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d006      	beq.n	801175c <pbuf_clone+0x4c>
 801174e:	4b06      	ldr	r3, [pc, #24]	; (8011768 <pbuf_clone+0x58>)
 8011750:	f240 5224 	movw	r2, #1316	; 0x524
 8011754:	4905      	ldr	r1, [pc, #20]	; (801176c <pbuf_clone+0x5c>)
 8011756:	4806      	ldr	r0, [pc, #24]	; (8011770 <pbuf_clone+0x60>)
 8011758:	f00a f8c8 	bl	801b8ec <printf>
  return q;
 801175c:	68fb      	ldr	r3, [r7, #12]
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	08025bd0 	.word	0x08025bd0
 801176c:	08026044 	.word	0x08026044
 8011770:	08025c30 	.word	0x08025c30

08011774 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011778:	f00a f8ca 	bl	801b910 <rand>
 801177c:	4603      	mov	r3, r0
 801177e:	b29b      	uxth	r3, r3
 8011780:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011784:	b29b      	uxth	r3, r3
 8011786:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801178a:	b29a      	uxth	r2, r3
 801178c:	4b01      	ldr	r3, [pc, #4]	; (8011794 <tcp_init+0x20>)
 801178e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011790:	bf00      	nop
 8011792:	bd80      	pop	{r7, pc}
 8011794:	2000002c 	.word	0x2000002c

08011798 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	7d1b      	ldrb	r3, [r3, #20]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d105      	bne.n	80117b4 <tcp_free+0x1c>
 80117a8:	4b06      	ldr	r3, [pc, #24]	; (80117c4 <tcp_free+0x2c>)
 80117aa:	22d4      	movs	r2, #212	; 0xd4
 80117ac:	4906      	ldr	r1, [pc, #24]	; (80117c8 <tcp_free+0x30>)
 80117ae:	4807      	ldr	r0, [pc, #28]	; (80117cc <tcp_free+0x34>)
 80117b0:	f00a f89c 	bl	801b8ec <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80117b4:	6879      	ldr	r1, [r7, #4]
 80117b6:	2001      	movs	r0, #1
 80117b8:	f7fe feb4 	bl	8010524 <memp_free>
}
 80117bc:	bf00      	nop
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	080260d0 	.word	0x080260d0
 80117c8:	08026100 	.word	0x08026100
 80117cc:	08026114 	.word	0x08026114

080117d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	7d1b      	ldrb	r3, [r3, #20]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d105      	bne.n	80117ec <tcp_free_listen+0x1c>
 80117e0:	4b06      	ldr	r3, [pc, #24]	; (80117fc <tcp_free_listen+0x2c>)
 80117e2:	22df      	movs	r2, #223	; 0xdf
 80117e4:	4906      	ldr	r1, [pc, #24]	; (8011800 <tcp_free_listen+0x30>)
 80117e6:	4807      	ldr	r0, [pc, #28]	; (8011804 <tcp_free_listen+0x34>)
 80117e8:	f00a f880 	bl	801b8ec <printf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80117ec:	6879      	ldr	r1, [r7, #4]
 80117ee:	2002      	movs	r0, #2
 80117f0:	f7fe fe98 	bl	8010524 <memp_free>
}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	080260d0 	.word	0x080260d0
 8011800:	0802613c 	.word	0x0802613c
 8011804:	08026114 	.word	0x08026114

08011808 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801180c:	f001 f8b8 	bl	8012980 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011810:	4b07      	ldr	r3, [pc, #28]	; (8011830 <tcp_tmr+0x28>)
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	3301      	adds	r3, #1
 8011816:	b2da      	uxtb	r2, r3
 8011818:	4b05      	ldr	r3, [pc, #20]	; (8011830 <tcp_tmr+0x28>)
 801181a:	701a      	strb	r2, [r3, #0]
 801181c:	4b04      	ldr	r3, [pc, #16]	; (8011830 <tcp_tmr+0x28>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	f003 0301 	and.w	r3, r3, #1
 8011824:	2b00      	cmp	r3, #0
 8011826:	d001      	beq.n	801182c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011828:	f000 fd6a 	bl	8012300 <tcp_slowtmr>
  }
}
 801182c:	bf00      	nop
 801182e:	bd80      	pop	{r7, pc}
 8011830:	20004f09 	.word	0x20004f09

08011834 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d105      	bne.n	8011850 <tcp_remove_listener+0x1c>
 8011844:	4b0d      	ldr	r3, [pc, #52]	; (801187c <tcp_remove_listener+0x48>)
 8011846:	22ff      	movs	r2, #255	; 0xff
 8011848:	490d      	ldr	r1, [pc, #52]	; (8011880 <tcp_remove_listener+0x4c>)
 801184a:	480e      	ldr	r0, [pc, #56]	; (8011884 <tcp_remove_listener+0x50>)
 801184c:	f00a f84e 	bl	801b8ec <printf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	60fb      	str	r3, [r7, #12]
 8011854:	e00a      	b.n	801186c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801185a:	683a      	ldr	r2, [r7, #0]
 801185c:	429a      	cmp	r2, r3
 801185e:	d102      	bne.n	8011866 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2200      	movs	r2, #0
 8011864:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1f1      	bne.n	8011856 <tcp_remove_listener+0x22>
    }
  }
}
 8011872:	bf00      	nop
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}
 801187c:	080260d0 	.word	0x080260d0
 8011880:	08026158 	.word	0x08026158
 8011884:	08026114 	.word	0x08026114

08011888 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d106      	bne.n	80118a4 <tcp_listen_closed+0x1c>
 8011896:	4b14      	ldr	r3, [pc, #80]	; (80118e8 <tcp_listen_closed+0x60>)
 8011898:	f240 1211 	movw	r2, #273	; 0x111
 801189c:	4913      	ldr	r1, [pc, #76]	; (80118ec <tcp_listen_closed+0x64>)
 801189e:	4814      	ldr	r0, [pc, #80]	; (80118f0 <tcp_listen_closed+0x68>)
 80118a0:	f00a f824 	bl	801b8ec <printf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	7d1b      	ldrb	r3, [r3, #20]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d006      	beq.n	80118ba <tcp_listen_closed+0x32>
 80118ac:	4b0e      	ldr	r3, [pc, #56]	; (80118e8 <tcp_listen_closed+0x60>)
 80118ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80118b2:	4910      	ldr	r1, [pc, #64]	; (80118f4 <tcp_listen_closed+0x6c>)
 80118b4:	480e      	ldr	r0, [pc, #56]	; (80118f0 <tcp_listen_closed+0x68>)
 80118b6:	f00a f819 	bl	801b8ec <printf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80118ba:	2301      	movs	r3, #1
 80118bc:	60fb      	str	r3, [r7, #12]
 80118be:	e00b      	b.n	80118d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80118c0:	4a0d      	ldr	r2, [pc, #52]	; (80118f8 <tcp_listen_closed+0x70>)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	6879      	ldr	r1, [r7, #4]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff ffb1 	bl	8011834 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	3301      	adds	r3, #1
 80118d6:	60fb      	str	r3, [r7, #12]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2b03      	cmp	r3, #3
 80118dc:	d9f0      	bls.n	80118c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80118de:	bf00      	nop
 80118e0:	bf00      	nop
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	080260d0 	.word	0x080260d0
 80118ec:	08026180 	.word	0x08026180
 80118f0:	08026114 	.word	0x08026114
 80118f4:	0802618c 	.word	0x0802618c
 80118f8:	08029eec 	.word	0x08029eec

080118fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80118fc:	b5b0      	push	{r4, r5, r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af04      	add	r7, sp, #16
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <tcp_close_shutdown+0x20>
 801190e:	4b63      	ldr	r3, [pc, #396]	; (8011a9c <tcp_close_shutdown+0x1a0>)
 8011910:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011914:	4962      	ldr	r1, [pc, #392]	; (8011aa0 <tcp_close_shutdown+0x1a4>)
 8011916:	4863      	ldr	r0, [pc, #396]	; (8011aa4 <tcp_close_shutdown+0x1a8>)
 8011918:	f009 ffe8 	bl	801b8ec <printf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801191c:	78fb      	ldrb	r3, [r7, #3]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d066      	beq.n	80119f0 <tcp_close_shutdown+0xf4>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	7d1b      	ldrb	r3, [r3, #20]
 8011926:	2b04      	cmp	r3, #4
 8011928:	d003      	beq.n	8011932 <tcp_close_shutdown+0x36>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	7d1b      	ldrb	r3, [r3, #20]
 801192e:	2b07      	cmp	r3, #7
 8011930:	d15e      	bne.n	80119f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011936:	2b00      	cmp	r3, #0
 8011938:	d104      	bne.n	8011944 <tcp_close_shutdown+0x48>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801193e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011942:	d055      	beq.n	80119f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	8b5b      	ldrh	r3, [r3, #26]
 8011948:	f003 0310 	and.w	r3, r3, #16
 801194c:	2b00      	cmp	r3, #0
 801194e:	d106      	bne.n	801195e <tcp_close_shutdown+0x62>
 8011950:	4b52      	ldr	r3, [pc, #328]	; (8011a9c <tcp_close_shutdown+0x1a0>)
 8011952:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011956:	4954      	ldr	r1, [pc, #336]	; (8011aa8 <tcp_close_shutdown+0x1ac>)
 8011958:	4852      	ldr	r0, [pc, #328]	; (8011aa4 <tcp_close_shutdown+0x1a8>)
 801195a:	f009 ffc7 	bl	801b8ec <printf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011966:	687d      	ldr	r5, [r7, #4]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	3304      	adds	r3, #4
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	8ad2      	ldrh	r2, [r2, #22]
 8011970:	6879      	ldr	r1, [r7, #4]
 8011972:	8b09      	ldrh	r1, [r1, #24]
 8011974:	9102      	str	r1, [sp, #8]
 8011976:	9201      	str	r2, [sp, #4]
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	462b      	mov	r3, r5
 801197c:	4622      	mov	r2, r4
 801197e:	4601      	mov	r1, r0
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f005 fde7 	bl	8017554 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f001 fbc8 	bl	801311c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801198c:	4b47      	ldr	r3, [pc, #284]	; (8011aac <tcp_close_shutdown+0x1b0>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	429a      	cmp	r2, r3
 8011994:	d105      	bne.n	80119a2 <tcp_close_shutdown+0xa6>
 8011996:	4b45      	ldr	r3, [pc, #276]	; (8011aac <tcp_close_shutdown+0x1b0>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	68db      	ldr	r3, [r3, #12]
 801199c:	4a43      	ldr	r2, [pc, #268]	; (8011aac <tcp_close_shutdown+0x1b0>)
 801199e:	6013      	str	r3, [r2, #0]
 80119a0:	e013      	b.n	80119ca <tcp_close_shutdown+0xce>
 80119a2:	4b42      	ldr	r3, [pc, #264]	; (8011aac <tcp_close_shutdown+0x1b0>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	60fb      	str	r3, [r7, #12]
 80119a8:	e00c      	b.n	80119c4 <tcp_close_shutdown+0xc8>
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d104      	bne.n	80119be <tcp_close_shutdown+0xc2>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	68da      	ldr	r2, [r3, #12]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	60da      	str	r2, [r3, #12]
 80119bc:	e005      	b.n	80119ca <tcp_close_shutdown+0xce>
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	60fb      	str	r3, [r7, #12]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d1ef      	bne.n	80119aa <tcp_close_shutdown+0xae>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2200      	movs	r2, #0
 80119ce:	60da      	str	r2, [r3, #12]
 80119d0:	4b37      	ldr	r3, [pc, #220]	; (8011ab0 <tcp_close_shutdown+0x1b4>)
 80119d2:	2201      	movs	r2, #1
 80119d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80119d6:	4b37      	ldr	r3, [pc, #220]	; (8011ab4 <tcp_close_shutdown+0x1b8>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	687a      	ldr	r2, [r7, #4]
 80119dc:	429a      	cmp	r2, r3
 80119de:	d102      	bne.n	80119e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80119e0:	f004 f85c 	bl	8015a9c <tcp_trigger_input_pcb_close>
 80119e4:	e002      	b.n	80119ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f7ff fed6 	bl	8011798 <tcp_free>
      }
      return ERR_OK;
 80119ec:	2300      	movs	r3, #0
 80119ee:	e050      	b.n	8011a92 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	7d1b      	ldrb	r3, [r3, #20]
 80119f4:	2b02      	cmp	r3, #2
 80119f6:	d03b      	beq.n	8011a70 <tcp_close_shutdown+0x174>
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	dc44      	bgt.n	8011a86 <tcp_close_shutdown+0x18a>
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d002      	beq.n	8011a06 <tcp_close_shutdown+0x10a>
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d02a      	beq.n	8011a5a <tcp_close_shutdown+0x15e>
 8011a04:	e03f      	b.n	8011a86 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	8adb      	ldrh	r3, [r3, #22]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d021      	beq.n	8011a52 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011a0e:	4b2a      	ldr	r3, [pc, #168]	; (8011ab8 <tcp_close_shutdown+0x1bc>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	429a      	cmp	r2, r3
 8011a16:	d105      	bne.n	8011a24 <tcp_close_shutdown+0x128>
 8011a18:	4b27      	ldr	r3, [pc, #156]	; (8011ab8 <tcp_close_shutdown+0x1bc>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	4a26      	ldr	r2, [pc, #152]	; (8011ab8 <tcp_close_shutdown+0x1bc>)
 8011a20:	6013      	str	r3, [r2, #0]
 8011a22:	e013      	b.n	8011a4c <tcp_close_shutdown+0x150>
 8011a24:	4b24      	ldr	r3, [pc, #144]	; (8011ab8 <tcp_close_shutdown+0x1bc>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	60bb      	str	r3, [r7, #8]
 8011a2a:	e00c      	b.n	8011a46 <tcp_close_shutdown+0x14a>
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d104      	bne.n	8011a40 <tcp_close_shutdown+0x144>
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	68da      	ldr	r2, [r3, #12]
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	60da      	str	r2, [r3, #12]
 8011a3e:	e005      	b.n	8011a4c <tcp_close_shutdown+0x150>
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	60bb      	str	r3, [r7, #8]
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d1ef      	bne.n	8011a2c <tcp_close_shutdown+0x130>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7ff fea0 	bl	8011798 <tcp_free>
      break;
 8011a58:	e01a      	b.n	8011a90 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f7ff ff14 	bl	8011888 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011a60:	6879      	ldr	r1, [r7, #4]
 8011a62:	4816      	ldr	r0, [pc, #88]	; (8011abc <tcp_close_shutdown+0x1c0>)
 8011a64:	f001 fbaa 	bl	80131bc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7ff feb1 	bl	80117d0 <tcp_free_listen>
      break;
 8011a6e:	e00f      	b.n	8011a90 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011a70:	6879      	ldr	r1, [r7, #4]
 8011a72:	480e      	ldr	r0, [pc, #56]	; (8011aac <tcp_close_shutdown+0x1b0>)
 8011a74:	f001 fba2 	bl	80131bc <tcp_pcb_remove>
 8011a78:	4b0d      	ldr	r3, [pc, #52]	; (8011ab0 <tcp_close_shutdown+0x1b4>)
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f7ff fe8a 	bl	8011798 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011a84:	e004      	b.n	8011a90 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 f81a 	bl	8011ac0 <tcp_close_shutdown_fin>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	e000      	b.n	8011a92 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bdb0      	pop	{r4, r5, r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	080260d0 	.word	0x080260d0
 8011aa0:	080261a4 	.word	0x080261a4
 8011aa4:	08026114 	.word	0x08026114
 8011aa8:	080261c4 	.word	0x080261c4
 8011aac:	2000bdd0 	.word	0x2000bdd0
 8011ab0:	2000bdcc 	.word	0x2000bdcc
 8011ab4:	2000bde4 	.word	0x2000bde4
 8011ab8:	2000bddc 	.word	0x2000bddc
 8011abc:	2000bdd8 	.word	0x2000bdd8

08011ac0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b084      	sub	sp, #16
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d106      	bne.n	8011adc <tcp_close_shutdown_fin+0x1c>
 8011ace:	4b2e      	ldr	r3, [pc, #184]	; (8011b88 <tcp_close_shutdown_fin+0xc8>)
 8011ad0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011ad4:	492d      	ldr	r1, [pc, #180]	; (8011b8c <tcp_close_shutdown_fin+0xcc>)
 8011ad6:	482e      	ldr	r0, [pc, #184]	; (8011b90 <tcp_close_shutdown_fin+0xd0>)
 8011ad8:	f009 ff08 	bl	801b8ec <printf>

  switch (pcb->state) {
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	7d1b      	ldrb	r3, [r3, #20]
 8011ae0:	2b07      	cmp	r3, #7
 8011ae2:	d020      	beq.n	8011b26 <tcp_close_shutdown_fin+0x66>
 8011ae4:	2b07      	cmp	r3, #7
 8011ae6:	dc2b      	bgt.n	8011b40 <tcp_close_shutdown_fin+0x80>
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	d002      	beq.n	8011af2 <tcp_close_shutdown_fin+0x32>
 8011aec:	2b04      	cmp	r3, #4
 8011aee:	d00d      	beq.n	8011b0c <tcp_close_shutdown_fin+0x4c>
 8011af0:	e026      	b.n	8011b40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f004 fe3c 	bl	8016770 <tcp_send_fin>
 8011af8:	4603      	mov	r3, r0
 8011afa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d11f      	bne.n	8011b44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2205      	movs	r2, #5
 8011b08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b0a:	e01b      	b.n	8011b44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f004 fe2f 	bl	8016770 <tcp_send_fin>
 8011b12:	4603      	mov	r3, r0
 8011b14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d114      	bne.n	8011b48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2205      	movs	r2, #5
 8011b22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b24:	e010      	b.n	8011b48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f004 fe22 	bl	8016770 <tcp_send_fin>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d109      	bne.n	8011b4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2209      	movs	r2, #9
 8011b3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b3e:	e005      	b.n	8011b4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011b40:	2300      	movs	r3, #0
 8011b42:	e01c      	b.n	8011b7e <tcp_close_shutdown_fin+0xbe>
      break;
 8011b44:	bf00      	nop
 8011b46:	e002      	b.n	8011b4e <tcp_close_shutdown_fin+0x8e>
      break;
 8011b48:	bf00      	nop
 8011b4a:	e000      	b.n	8011b4e <tcp_close_shutdown_fin+0x8e>
      break;
 8011b4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d103      	bne.n	8011b5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f004 ff48 	bl	80169ec <tcp_output>
 8011b5c:	e00d      	b.n	8011b7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b66:	d108      	bne.n	8011b7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	8b5b      	ldrh	r3, [r3, #26]
 8011b6c:	f043 0308 	orr.w	r3, r3, #8
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	e001      	b.n	8011b7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
 8011b86:	bf00      	nop
 8011b88:	080260d0 	.word	0x080260d0
 8011b8c:	08026180 	.word	0x08026180
 8011b90:	08026114 	.word	0x08026114

08011b94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d109      	bne.n	8011bb6 <tcp_close+0x22>
 8011ba2:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <tcp_close+0x4c>)
 8011ba4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011ba8:	490e      	ldr	r1, [pc, #56]	; (8011be4 <tcp_close+0x50>)
 8011baa:	480f      	ldr	r0, [pc, #60]	; (8011be8 <tcp_close+0x54>)
 8011bac:	f009 fe9e 	bl	801b8ec <printf>
 8011bb0:	f06f 030f 	mvn.w	r3, #15
 8011bb4:	e00f      	b.n	8011bd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	7d1b      	ldrb	r3, [r3, #20]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d006      	beq.n	8011bcc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	8b5b      	ldrh	r3, [r3, #26]
 8011bc2:	f043 0310 	orr.w	r3, r3, #16
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011bcc:	2101      	movs	r1, #1
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7ff fe94 	bl	80118fc <tcp_close_shutdown>
 8011bd4:	4603      	mov	r3, r0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	080260d0 	.word	0x080260d0
 8011be4:	080261e0 	.word	0x080261e0
 8011be8:	08026114 	.word	0x08026114

08011bec <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d109      	bne.n	8011c12 <tcp_shutdown+0x26>
 8011bfe:	4b26      	ldr	r3, [pc, #152]	; (8011c98 <tcp_shutdown+0xac>)
 8011c00:	f240 2207 	movw	r2, #519	; 0x207
 8011c04:	4925      	ldr	r1, [pc, #148]	; (8011c9c <tcp_shutdown+0xb0>)
 8011c06:	4826      	ldr	r0, [pc, #152]	; (8011ca0 <tcp_shutdown+0xb4>)
 8011c08:	f009 fe70 	bl	801b8ec <printf>
 8011c0c:	f06f 030f 	mvn.w	r3, #15
 8011c10:	e03d      	b.n	8011c8e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	7d1b      	ldrb	r3, [r3, #20]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d102      	bne.n	8011c20 <tcp_shutdown+0x34>
    return ERR_CONN;
 8011c1a:	f06f 030a 	mvn.w	r3, #10
 8011c1e:	e036      	b.n	8011c8e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d01b      	beq.n	8011c5e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	8b5b      	ldrh	r3, [r3, #26]
 8011c2a:	f043 0310 	orr.w	r3, r3, #16
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d005      	beq.n	8011c46 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011c3a:	2101      	movs	r1, #1
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f7ff fe5d 	bl	80118fc <tcp_close_shutdown>
 8011c42:	4603      	mov	r3, r0
 8011c44:	e023      	b.n	8011c8e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d007      	beq.n	8011c5e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7ff fae4 	bl	8011220 <pbuf_free>
      pcb->refused_data = NULL;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d013      	beq.n	8011c8c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	7d1b      	ldrb	r3, [r3, #20]
 8011c68:	2b04      	cmp	r3, #4
 8011c6a:	dc02      	bgt.n	8011c72 <tcp_shutdown+0x86>
 8011c6c:	2b03      	cmp	r3, #3
 8011c6e:	da02      	bge.n	8011c76 <tcp_shutdown+0x8a>
 8011c70:	e009      	b.n	8011c86 <tcp_shutdown+0x9a>
 8011c72:	2b07      	cmp	r3, #7
 8011c74:	d107      	bne.n	8011c86 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f7ff fe3d 	bl	80118fc <tcp_close_shutdown>
 8011c82:	4603      	mov	r3, r0
 8011c84:	e003      	b.n	8011c8e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011c86:	f06f 030a 	mvn.w	r3, #10
 8011c8a:	e000      	b.n	8011c8e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3710      	adds	r7, #16
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	080260d0 	.word	0x080260d0
 8011c9c:	080261f8 	.word	0x080261f8
 8011ca0:	08026114 	.word	0x08026114

08011ca4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b08e      	sub	sp, #56	; 0x38
 8011ca8:	af04      	add	r7, sp, #16
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d107      	bne.n	8011cc4 <tcp_abandon+0x20>
 8011cb4:	4b52      	ldr	r3, [pc, #328]	; (8011e00 <tcp_abandon+0x15c>)
 8011cb6:	f240 223d 	movw	r2, #573	; 0x23d
 8011cba:	4952      	ldr	r1, [pc, #328]	; (8011e04 <tcp_abandon+0x160>)
 8011cbc:	4852      	ldr	r0, [pc, #328]	; (8011e08 <tcp_abandon+0x164>)
 8011cbe:	f009 fe15 	bl	801b8ec <printf>
 8011cc2:	e099      	b.n	8011df8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	7d1b      	ldrb	r3, [r3, #20]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d106      	bne.n	8011cda <tcp_abandon+0x36>
 8011ccc:	4b4c      	ldr	r3, [pc, #304]	; (8011e00 <tcp_abandon+0x15c>)
 8011cce:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011cd2:	494e      	ldr	r1, [pc, #312]	; (8011e0c <tcp_abandon+0x168>)
 8011cd4:	484c      	ldr	r0, [pc, #304]	; (8011e08 <tcp_abandon+0x164>)
 8011cd6:	f009 fe09 	bl	801b8ec <printf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	7d1b      	ldrb	r3, [r3, #20]
 8011cde:	2b0a      	cmp	r3, #10
 8011ce0:	d107      	bne.n	8011cf2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011ce2:	6879      	ldr	r1, [r7, #4]
 8011ce4:	484a      	ldr	r0, [pc, #296]	; (8011e10 <tcp_abandon+0x16c>)
 8011ce6:	f001 fa69 	bl	80131bc <tcp_pcb_remove>
    tcp_free(pcb);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7ff fd54 	bl	8011798 <tcp_free>
 8011cf0:	e082      	b.n	8011df8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cfe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d04:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d0c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	691b      	ldr	r3, [r3, #16]
 8011d12:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	7d1b      	ldrb	r3, [r3, #20]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d126      	bne.n	8011d6a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	8adb      	ldrh	r3, [r3, #22]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d02e      	beq.n	8011d82 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d24:	4b3b      	ldr	r3, [pc, #236]	; (8011e14 <tcp_abandon+0x170>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	687a      	ldr	r2, [r7, #4]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d105      	bne.n	8011d3a <tcp_abandon+0x96>
 8011d2e:	4b39      	ldr	r3, [pc, #228]	; (8011e14 <tcp_abandon+0x170>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	4a37      	ldr	r2, [pc, #220]	; (8011e14 <tcp_abandon+0x170>)
 8011d36:	6013      	str	r3, [r2, #0]
 8011d38:	e013      	b.n	8011d62 <tcp_abandon+0xbe>
 8011d3a:	4b36      	ldr	r3, [pc, #216]	; (8011e14 <tcp_abandon+0x170>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	61fb      	str	r3, [r7, #28]
 8011d40:	e00c      	b.n	8011d5c <tcp_abandon+0xb8>
 8011d42:	69fb      	ldr	r3, [r7, #28]
 8011d44:	68db      	ldr	r3, [r3, #12]
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d104      	bne.n	8011d56 <tcp_abandon+0xb2>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	68da      	ldr	r2, [r3, #12]
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	60da      	str	r2, [r3, #12]
 8011d54:	e005      	b.n	8011d62 <tcp_abandon+0xbe>
 8011d56:	69fb      	ldr	r3, [r7, #28]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	61fb      	str	r3, [r7, #28]
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d1ef      	bne.n	8011d42 <tcp_abandon+0x9e>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2200      	movs	r2, #0
 8011d66:	60da      	str	r2, [r3, #12]
 8011d68:	e00b      	b.n	8011d82 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	8adb      	ldrh	r3, [r3, #22]
 8011d72:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011d74:	6879      	ldr	r1, [r7, #4]
 8011d76:	4828      	ldr	r0, [pc, #160]	; (8011e18 <tcp_abandon+0x174>)
 8011d78:	f001 fa20 	bl	80131bc <tcp_pcb_remove>
 8011d7c:	4b27      	ldr	r3, [pc, #156]	; (8011e1c <tcp_abandon+0x178>)
 8011d7e:	2201      	movs	r2, #1
 8011d80:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d004      	beq.n	8011d94 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f000 fed6 	bl	8012b40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d004      	beq.n	8011da6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 fecd 	bl	8012b40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d004      	beq.n	8011db8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fec4 	bl	8012b40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d00e      	beq.n	8011ddc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011dbe:	6879      	ldr	r1, [r7, #4]
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	8b12      	ldrh	r2, [r2, #24]
 8011dc8:	9202      	str	r2, [sp, #8]
 8011dca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011dcc:	9201      	str	r2, [sp, #4]
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	697a      	ldr	r2, [r7, #20]
 8011dd4:	69b9      	ldr	r1, [r7, #24]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f005 fbbc 	bl	8017554 <tcp_rst>
    }
    last_state = pcb->state;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
 8011de0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff fcd8 	bl	8011798 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011de8:	693b      	ldr	r3, [r7, #16]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d004      	beq.n	8011df8 <tcp_abandon+0x154>
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	f06f 010c 	mvn.w	r1, #12
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	4798      	blx	r3
  }
}
 8011df8:	3728      	adds	r7, #40	; 0x28
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	080260d0 	.word	0x080260d0
 8011e04:	08026214 	.word	0x08026214
 8011e08:	08026114 	.word	0x08026114
 8011e0c:	08026230 	.word	0x08026230
 8011e10:	2000bde0 	.word	0x2000bde0
 8011e14:	2000bddc 	.word	0x2000bddc
 8011e18:	2000bdd0 	.word	0x2000bdd0
 8011e1c:	2000bdcc 	.word	0x2000bdcc

08011e20 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011e28:	2101      	movs	r1, #1
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff ff3a 	bl	8011ca4 <tcp_abandon>
}
 8011e30:	bf00      	nop
 8011e32:	3708      	adds	r7, #8
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b088      	sub	sp, #32
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	4613      	mov	r3, r2
 8011e44:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011e46:	2304      	movs	r3, #4
 8011e48:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d101      	bne.n	8011e54 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011e50:	4b3e      	ldr	r3, [pc, #248]	; (8011f4c <tcp_bind+0x114>)
 8011e52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d109      	bne.n	8011e6e <tcp_bind+0x36>
 8011e5a:	4b3d      	ldr	r3, [pc, #244]	; (8011f50 <tcp_bind+0x118>)
 8011e5c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011e60:	493c      	ldr	r1, [pc, #240]	; (8011f54 <tcp_bind+0x11c>)
 8011e62:	483d      	ldr	r0, [pc, #244]	; (8011f58 <tcp_bind+0x120>)
 8011e64:	f009 fd42 	bl	801b8ec <printf>
 8011e68:	f06f 030f 	mvn.w	r3, #15
 8011e6c:	e06a      	b.n	8011f44 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	7d1b      	ldrb	r3, [r3, #20]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d009      	beq.n	8011e8a <tcp_bind+0x52>
 8011e76:	4b36      	ldr	r3, [pc, #216]	; (8011f50 <tcp_bind+0x118>)
 8011e78:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e7c:	4937      	ldr	r1, [pc, #220]	; (8011f5c <tcp_bind+0x124>)
 8011e7e:	4836      	ldr	r0, [pc, #216]	; (8011f58 <tcp_bind+0x120>)
 8011e80:	f009 fd34 	bl	801b8ec <printf>
 8011e84:	f06f 0305 	mvn.w	r3, #5
 8011e88:	e05c      	b.n	8011f44 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011e8a:	88fb      	ldrh	r3, [r7, #6]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d109      	bne.n	8011ea4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011e90:	f000 f9f0 	bl	8012274 <tcp_new_port>
 8011e94:	4603      	mov	r3, r0
 8011e96:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011e98:	88fb      	ldrh	r3, [r7, #6]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d135      	bne.n	8011f0a <tcp_bind+0xd2>
      return ERR_BUF;
 8011e9e:	f06f 0301 	mvn.w	r3, #1
 8011ea2:	e04f      	b.n	8011f44 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	61fb      	str	r3, [r7, #28]
 8011ea8:	e02b      	b.n	8011f02 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011eaa:	4a2d      	ldr	r2, [pc, #180]	; (8011f60 <tcp_bind+0x128>)
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	61bb      	str	r3, [r7, #24]
 8011eb6:	e01e      	b.n	8011ef6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	8adb      	ldrh	r3, [r3, #22]
 8011ebc:	88fa      	ldrh	r2, [r7, #6]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d116      	bne.n	8011ef0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011ec2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d010      	beq.n	8011eea <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011ec8:	69bb      	ldr	r3, [r7, #24]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00c      	beq.n	8011eea <tcp_bind+0xb2>
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d009      	beq.n	8011eea <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d005      	beq.n	8011eea <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d102      	bne.n	8011ef0 <tcp_bind+0xb8>
              return ERR_USE;
 8011eea:	f06f 0307 	mvn.w	r3, #7
 8011eee:	e029      	b.n	8011f44 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	61bb      	str	r3, [r7, #24]
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d1dd      	bne.n	8011eb8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	3301      	adds	r3, #1
 8011f00:	61fb      	str	r3, [r7, #28]
 8011f02:	69fa      	ldr	r2, [r7, #28]
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	dbcf      	blt.n	8011eaa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00c      	beq.n	8011f2a <tcp_bind+0xf2>
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d008      	beq.n	8011f2a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d002      	beq.n	8011f24 <tcp_bind+0xec>
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	e000      	b.n	8011f26 <tcp_bind+0xee>
 8011f24:	2300      	movs	r3, #0
 8011f26:	68fa      	ldr	r2, [r7, #12]
 8011f28:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	88fa      	ldrh	r2, [r7, #6]
 8011f2e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011f30:	4b0c      	ldr	r3, [pc, #48]	; (8011f64 <tcp_bind+0x12c>)
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	60da      	str	r2, [r3, #12]
 8011f38:	4a0a      	ldr	r2, [pc, #40]	; (8011f64 <tcp_bind+0x12c>)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6013      	str	r3, [r2, #0]
 8011f3e:	f005 fccb 	bl	80178d8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011f42:	2300      	movs	r3, #0
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3720      	adds	r7, #32
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	08029f14 	.word	0x08029f14
 8011f50:	080260d0 	.word	0x080260d0
 8011f54:	08026264 	.word	0x08026264
 8011f58:	08026114 	.word	0x08026114
 8011f5c:	0802627c 	.word	0x0802627c
 8011f60:	08029eec 	.word	0x08029eec
 8011f64:	2000bddc 	.word	0x2000bddc

08011f68 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	4613      	mov	r3, r2
 8011f74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d106      	bne.n	8011f8a <tcp_accept_null+0x22>
 8011f7c:	4b07      	ldr	r3, [pc, #28]	; (8011f9c <tcp_accept_null+0x34>)
 8011f7e:	f240 320f 	movw	r2, #783	; 0x30f
 8011f82:	4907      	ldr	r1, [pc, #28]	; (8011fa0 <tcp_accept_null+0x38>)
 8011f84:	4807      	ldr	r0, [pc, #28]	; (8011fa4 <tcp_accept_null+0x3c>)
 8011f86:	f009 fcb1 	bl	801b8ec <printf>

  tcp_abort(pcb);
 8011f8a:	68b8      	ldr	r0, [r7, #8]
 8011f8c:	f7ff ff48 	bl	8011e20 <tcp_abort>

  return ERR_ABRT;
 8011f90:	f06f 030c 	mvn.w	r3, #12
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	080260d0 	.word	0x080260d0
 8011fa0:	080262a4 	.word	0x080262a4
 8011fa4:	08026114 	.word	0x08026114

08011fa8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b082      	sub	sp, #8
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8011fb4:	78fb      	ldrb	r3, [r7, #3]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	4619      	mov	r1, r3
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f806 	bl	8011fcc <tcp_listen_with_backlog_and_err>
 8011fc0:	4603      	mov	r3, r0
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3708      	adds	r7, #8
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
	...

08011fcc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b088      	sub	sp, #32
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	607a      	str	r2, [r7, #4]
 8011fd8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d109      	bne.n	8011ff8 <tcp_listen_with_backlog_and_err+0x2c>
 8011fe4:	4b47      	ldr	r3, [pc, #284]	; (8012104 <tcp_listen_with_backlog_and_err+0x138>)
 8011fe6:	f240 3259 	movw	r2, #857	; 0x359
 8011fea:	4947      	ldr	r1, [pc, #284]	; (8012108 <tcp_listen_with_backlog_and_err+0x13c>)
 8011fec:	4847      	ldr	r0, [pc, #284]	; (801210c <tcp_listen_with_backlog_and_err+0x140>)
 8011fee:	f009 fc7d 	bl	801b8ec <printf>
 8011ff2:	23f0      	movs	r3, #240	; 0xf0
 8011ff4:	76fb      	strb	r3, [r7, #27]
 8011ff6:	e079      	b.n	80120ec <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	7d1b      	ldrb	r3, [r3, #20]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d009      	beq.n	8012014 <tcp_listen_with_backlog_and_err+0x48>
 8012000:	4b40      	ldr	r3, [pc, #256]	; (8012104 <tcp_listen_with_backlog_and_err+0x138>)
 8012002:	f240 325a 	movw	r2, #858	; 0x35a
 8012006:	4942      	ldr	r1, [pc, #264]	; (8012110 <tcp_listen_with_backlog_and_err+0x144>)
 8012008:	4840      	ldr	r0, [pc, #256]	; (801210c <tcp_listen_with_backlog_and_err+0x140>)
 801200a:	f009 fc6f 	bl	801b8ec <printf>
 801200e:	23f1      	movs	r3, #241	; 0xf1
 8012010:	76fb      	strb	r3, [r7, #27]
 8012012:	e06b      	b.n	80120ec <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	7d1b      	ldrb	r3, [r3, #20]
 8012018:	2b01      	cmp	r3, #1
 801201a:	d104      	bne.n	8012026 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012020:	23f7      	movs	r3, #247	; 0xf7
 8012022:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012024:	e062      	b.n	80120ec <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012026:	2002      	movs	r0, #2
 8012028:	f7fe fa2a 	bl	8010480 <memp_malloc>
 801202c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d102      	bne.n	801203a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8012034:	23ff      	movs	r3, #255	; 0xff
 8012036:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012038:	e058      	b.n	80120ec <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	691a      	ldr	r2, [r3, #16]
 801203e:	69fb      	ldr	r3, [r7, #28]
 8012040:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	8ada      	ldrh	r2, [r3, #22]
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	2201      	movs	r2, #1
 801204e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	7d5a      	ldrb	r2, [r3, #21]
 8012054:	69fb      	ldr	r3, [r7, #28]
 8012056:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	7a5a      	ldrb	r2, [r3, #9]
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012060:	69fb      	ldr	r3, [r7, #28]
 8012062:	2200      	movs	r2, #0
 8012064:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	7ada      	ldrb	r2, [r3, #11]
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	7a9a      	ldrb	r2, [r3, #10]
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	8adb      	ldrh	r3, [r3, #22]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d021      	beq.n	80120ca <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8012086:	4b23      	ldr	r3, [pc, #140]	; (8012114 <tcp_listen_with_backlog_and_err+0x148>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	429a      	cmp	r2, r3
 801208e:	d105      	bne.n	801209c <tcp_listen_with_backlog_and_err+0xd0>
 8012090:	4b20      	ldr	r3, [pc, #128]	; (8012114 <tcp_listen_with_backlog_and_err+0x148>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	4a1f      	ldr	r2, [pc, #124]	; (8012114 <tcp_listen_with_backlog_and_err+0x148>)
 8012098:	6013      	str	r3, [r2, #0]
 801209a:	e013      	b.n	80120c4 <tcp_listen_with_backlog_and_err+0xf8>
 801209c:	4b1d      	ldr	r3, [pc, #116]	; (8012114 <tcp_listen_with_backlog_and_err+0x148>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	617b      	str	r3, [r7, #20]
 80120a2:	e00c      	b.n	80120be <tcp_listen_with_backlog_and_err+0xf2>
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	68fa      	ldr	r2, [r7, #12]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d104      	bne.n	80120b8 <tcp_listen_with_backlog_and_err+0xec>
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	68da      	ldr	r2, [r3, #12]
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	60da      	str	r2, [r3, #12]
 80120b6:	e005      	b.n	80120c4 <tcp_listen_with_backlog_and_err+0xf8>
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	617b      	str	r3, [r7, #20]
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1ef      	bne.n	80120a4 <tcp_listen_with_backlog_and_err+0xd8>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2200      	movs	r2, #0
 80120c8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7ff fb64 	bl	8011798 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	4a11      	ldr	r2, [pc, #68]	; (8012118 <tcp_listen_with_backlog_and_err+0x14c>)
 80120d4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80120d6:	4b11      	ldr	r3, [pc, #68]	; (801211c <tcp_listen_with_backlog_and_err+0x150>)
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	60da      	str	r2, [r3, #12]
 80120de:	4a0f      	ldr	r2, [pc, #60]	; (801211c <tcp_listen_with_backlog_and_err+0x150>)
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	6013      	str	r3, [r2, #0]
 80120e4:	f005 fbf8 	bl	80178d8 <tcp_timer_needed>
  res = ERR_OK;
 80120e8:	2300      	movs	r3, #0
 80120ea:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	7efa      	ldrb	r2, [r7, #27]
 80120f6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80120f8:	69fb      	ldr	r3, [r7, #28]
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3720      	adds	r7, #32
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	080260d0 	.word	0x080260d0
 8012108:	080262c4 	.word	0x080262c4
 801210c:	08026114 	.word	0x08026114
 8012110:	080262f4 	.word	0x080262f4
 8012114:	2000bddc 	.word	0x2000bddc
 8012118:	08011f69 	.word	0x08011f69
 801211c:	2000bdd8 	.word	0x2000bdd8

08012120 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d106      	bne.n	801213c <tcp_update_rcv_ann_wnd+0x1c>
 801212e:	4b25      	ldr	r3, [pc, #148]	; (80121c4 <tcp_update_rcv_ann_wnd+0xa4>)
 8012130:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012134:	4924      	ldr	r1, [pc, #144]	; (80121c8 <tcp_update_rcv_ann_wnd+0xa8>)
 8012136:	4825      	ldr	r0, [pc, #148]	; (80121cc <tcp_update_rcv_ann_wnd+0xac>)
 8012138:	f009 fbd8 	bl	801b8ec <printf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012144:	4413      	add	r3, r2
 8012146:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012150:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012154:	bf28      	it	cs
 8012156:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801215a:	b292      	uxth	r2, r2
 801215c:	4413      	add	r3, r2
 801215e:	68fa      	ldr	r2, [r7, #12]
 8012160:	1ad3      	subs	r3, r2, r3
 8012162:	2b00      	cmp	r3, #0
 8012164:	db08      	blt.n	8012178 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	e020      	b.n	80121ba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012180:	1ad3      	subs	r3, r2, r3
 8012182:	2b00      	cmp	r3, #0
 8012184:	dd03      	ble.n	801218e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2200      	movs	r2, #0
 801218a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801218c:	e014      	b.n	80121b8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121a0:	d306      	bcc.n	80121b0 <tcp_update_rcv_ann_wnd+0x90>
 80121a2:	4b08      	ldr	r3, [pc, #32]	; (80121c4 <tcp_update_rcv_ann_wnd+0xa4>)
 80121a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80121a8:	4909      	ldr	r1, [pc, #36]	; (80121d0 <tcp_update_rcv_ann_wnd+0xb0>)
 80121aa:	4808      	ldr	r0, [pc, #32]	; (80121cc <tcp_update_rcv_ann_wnd+0xac>)
 80121ac:	f009 fb9e 	bl	801b8ec <printf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80121b8:	2300      	movs	r3, #0
  }
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3710      	adds	r7, #16
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	080260d0 	.word	0x080260d0
 80121c8:	0802632c 	.word	0x0802632c
 80121cc:	08026114 	.word	0x08026114
 80121d0:	08026350 	.word	0x08026350

080121d4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	460b      	mov	r3, r1
 80121de:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d107      	bne.n	80121f6 <tcp_recved+0x22>
 80121e6:	4b1f      	ldr	r3, [pc, #124]	; (8012264 <tcp_recved+0x90>)
 80121e8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80121ec:	491e      	ldr	r1, [pc, #120]	; (8012268 <tcp_recved+0x94>)
 80121ee:	481f      	ldr	r0, [pc, #124]	; (801226c <tcp_recved+0x98>)
 80121f0:	f009 fb7c 	bl	801b8ec <printf>
 80121f4:	e032      	b.n	801225c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	7d1b      	ldrb	r3, [r3, #20]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d106      	bne.n	801220c <tcp_recved+0x38>
 80121fe:	4b19      	ldr	r3, [pc, #100]	; (8012264 <tcp_recved+0x90>)
 8012200:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012204:	491a      	ldr	r1, [pc, #104]	; (8012270 <tcp_recved+0x9c>)
 8012206:	4819      	ldr	r0, [pc, #100]	; (801226c <tcp_recved+0x98>)
 8012208:	f009 fb70 	bl	801b8ec <printf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012210:	887b      	ldrh	r3, [r7, #2]
 8012212:	4413      	add	r3, r2
 8012214:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012216:	89fb      	ldrh	r3, [r7, #14]
 8012218:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801221c:	d804      	bhi.n	8012228 <tcp_recved+0x54>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012222:	89fa      	ldrh	r2, [r7, #14]
 8012224:	429a      	cmp	r2, r3
 8012226:	d204      	bcs.n	8012232 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801222e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012230:	e002      	b.n	8012238 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	89fa      	ldrh	r2, [r7, #14]
 8012236:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7ff ff71 	bl	8012120 <tcp_update_rcv_ann_wnd>
 801223e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012246:	d309      	bcc.n	801225c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	8b5b      	ldrh	r3, [r3, #26]
 801224c:	f043 0302 	orr.w	r3, r3, #2
 8012250:	b29a      	uxth	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f004 fbc8 	bl	80169ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	080260d0 	.word	0x080260d0
 8012268:	0802636c 	.word	0x0802636c
 801226c:	08026114 	.word	0x08026114
 8012270:	08026384 	.word	0x08026384

08012274 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801227e:	4b1e      	ldr	r3, [pc, #120]	; (80122f8 <tcp_new_port+0x84>)
 8012280:	881b      	ldrh	r3, [r3, #0]
 8012282:	3301      	adds	r3, #1
 8012284:	b29a      	uxth	r2, r3
 8012286:	4b1c      	ldr	r3, [pc, #112]	; (80122f8 <tcp_new_port+0x84>)
 8012288:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801228a:	4b1b      	ldr	r3, [pc, #108]	; (80122f8 <tcp_new_port+0x84>)
 801228c:	881b      	ldrh	r3, [r3, #0]
 801228e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012292:	4293      	cmp	r3, r2
 8012294:	d103      	bne.n	801229e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012296:	4b18      	ldr	r3, [pc, #96]	; (80122f8 <tcp_new_port+0x84>)
 8012298:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801229c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801229e:	2300      	movs	r3, #0
 80122a0:	71fb      	strb	r3, [r7, #7]
 80122a2:	e01e      	b.n	80122e2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122a4:	79fb      	ldrb	r3, [r7, #7]
 80122a6:	4a15      	ldr	r2, [pc, #84]	; (80122fc <tcp_new_port+0x88>)
 80122a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	603b      	str	r3, [r7, #0]
 80122b0:	e011      	b.n	80122d6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	8ada      	ldrh	r2, [r3, #22]
 80122b6:	4b10      	ldr	r3, [pc, #64]	; (80122f8 <tcp_new_port+0x84>)
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d108      	bne.n	80122d0 <tcp_new_port+0x5c>
        n++;
 80122be:	88bb      	ldrh	r3, [r7, #4]
 80122c0:	3301      	adds	r3, #1
 80122c2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80122c4:	88bb      	ldrh	r3, [r7, #4]
 80122c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80122ca:	d3d8      	bcc.n	801227e <tcp_new_port+0xa>
          return 0;
 80122cc:	2300      	movs	r3, #0
 80122ce:	e00d      	b.n	80122ec <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	603b      	str	r3, [r7, #0]
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d1ea      	bne.n	80122b2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80122dc:	79fb      	ldrb	r3, [r7, #7]
 80122de:	3301      	adds	r3, #1
 80122e0:	71fb      	strb	r3, [r7, #7]
 80122e2:	79fb      	ldrb	r3, [r7, #7]
 80122e4:	2b03      	cmp	r3, #3
 80122e6:	d9dd      	bls.n	80122a4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80122e8:	4b03      	ldr	r3, [pc, #12]	; (80122f8 <tcp_new_port+0x84>)
 80122ea:	881b      	ldrh	r3, [r3, #0]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr
 80122f8:	2000002c 	.word	0x2000002c
 80122fc:	08029eec 	.word	0x08029eec

08012300 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012300:	b5b0      	push	{r4, r5, r7, lr}
 8012302:	b090      	sub	sp, #64	; 0x40
 8012304:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801230c:	4b94      	ldr	r3, [pc, #592]	; (8012560 <tcp_slowtmr+0x260>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	3301      	adds	r3, #1
 8012312:	4a93      	ldr	r2, [pc, #588]	; (8012560 <tcp_slowtmr+0x260>)
 8012314:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012316:	4b93      	ldr	r3, [pc, #588]	; (8012564 <tcp_slowtmr+0x264>)
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	3301      	adds	r3, #1
 801231c:	b2da      	uxtb	r2, r3
 801231e:	4b91      	ldr	r3, [pc, #580]	; (8012564 <tcp_slowtmr+0x264>)
 8012320:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012322:	2300      	movs	r3, #0
 8012324:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012326:	4b90      	ldr	r3, [pc, #576]	; (8012568 <tcp_slowtmr+0x268>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801232c:	e29d      	b.n	801286a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012330:	7d1b      	ldrb	r3, [r3, #20]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d106      	bne.n	8012344 <tcp_slowtmr+0x44>
 8012336:	4b8d      	ldr	r3, [pc, #564]	; (801256c <tcp_slowtmr+0x26c>)
 8012338:	f240 42be 	movw	r2, #1214	; 0x4be
 801233c:	498c      	ldr	r1, [pc, #560]	; (8012570 <tcp_slowtmr+0x270>)
 801233e:	488d      	ldr	r0, [pc, #564]	; (8012574 <tcp_slowtmr+0x274>)
 8012340:	f009 fad4 	bl	801b8ec <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012346:	7d1b      	ldrb	r3, [r3, #20]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d106      	bne.n	801235a <tcp_slowtmr+0x5a>
 801234c:	4b87      	ldr	r3, [pc, #540]	; (801256c <tcp_slowtmr+0x26c>)
 801234e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012352:	4989      	ldr	r1, [pc, #548]	; (8012578 <tcp_slowtmr+0x278>)
 8012354:	4887      	ldr	r0, [pc, #540]	; (8012574 <tcp_slowtmr+0x274>)
 8012356:	f009 fac9 	bl	801b8ec <printf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235c:	7d1b      	ldrb	r3, [r3, #20]
 801235e:	2b0a      	cmp	r3, #10
 8012360:	d106      	bne.n	8012370 <tcp_slowtmr+0x70>
 8012362:	4b82      	ldr	r3, [pc, #520]	; (801256c <tcp_slowtmr+0x26c>)
 8012364:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012368:	4984      	ldr	r1, [pc, #528]	; (801257c <tcp_slowtmr+0x27c>)
 801236a:	4882      	ldr	r0, [pc, #520]	; (8012574 <tcp_slowtmr+0x274>)
 801236c:	f009 fabe 	bl	801b8ec <printf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012372:	7f9a      	ldrb	r2, [r3, #30]
 8012374:	4b7b      	ldr	r3, [pc, #492]	; (8012564 <tcp_slowtmr+0x264>)
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	429a      	cmp	r2, r3
 801237a:	d105      	bne.n	8012388 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012386:	e270      	b.n	801286a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012388:	4b76      	ldr	r3, [pc, #472]	; (8012564 <tcp_slowtmr+0x264>)
 801238a:	781a      	ldrb	r2, [r3, #0]
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012390:	2300      	movs	r3, #0
 8012392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012396:	2300      	movs	r3, #0
 8012398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239e:	7d1b      	ldrb	r3, [r3, #20]
 80123a0:	2b02      	cmp	r3, #2
 80123a2:	d10a      	bne.n	80123ba <tcp_slowtmr+0xba>
 80123a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80123aa:	2b05      	cmp	r3, #5
 80123ac:	d905      	bls.n	80123ba <tcp_slowtmr+0xba>
      ++pcb_remove;
 80123ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b2:	3301      	adds	r3, #1
 80123b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123b8:	e11e      	b.n	80125f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80123ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80123c0:	2b0b      	cmp	r3, #11
 80123c2:	d905      	bls.n	80123d0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80123c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123c8:	3301      	adds	r3, #1
 80123ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123ce:	e113      	b.n	80125f8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80123d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d075      	beq.n	80124c6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80123da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d006      	beq.n	80123f0 <tcp_slowtmr+0xf0>
 80123e2:	4b62      	ldr	r3, [pc, #392]	; (801256c <tcp_slowtmr+0x26c>)
 80123e4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80123e8:	4965      	ldr	r1, [pc, #404]	; (8012580 <tcp_slowtmr+0x280>)
 80123ea:	4862      	ldr	r0, [pc, #392]	; (8012574 <tcp_slowtmr+0x274>)
 80123ec:	f009 fa7e 	bl	801b8ec <printf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80123f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d106      	bne.n	8012406 <tcp_slowtmr+0x106>
 80123f8:	4b5c      	ldr	r3, [pc, #368]	; (801256c <tcp_slowtmr+0x26c>)
 80123fa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80123fe:	4961      	ldr	r1, [pc, #388]	; (8012584 <tcp_slowtmr+0x284>)
 8012400:	485c      	ldr	r0, [pc, #368]	; (8012574 <tcp_slowtmr+0x274>)
 8012402:	f009 fa73 	bl	801b8ec <printf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801240c:	2b0b      	cmp	r3, #11
 801240e:	d905      	bls.n	801241c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012414:	3301      	adds	r3, #1
 8012416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801241a:	e0ed      	b.n	80125f8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012422:	3b01      	subs	r3, #1
 8012424:	4a58      	ldr	r2, [pc, #352]	; (8012588 <tcp_slowtmr+0x288>)
 8012426:	5cd3      	ldrb	r3, [r2, r3]
 8012428:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012430:	7c7a      	ldrb	r2, [r7, #17]
 8012432:	429a      	cmp	r2, r3
 8012434:	d907      	bls.n	8012446 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012438:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801243c:	3301      	adds	r3, #1
 801243e:	b2da      	uxtb	r2, r3
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012448:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801244c:	7c7a      	ldrb	r2, [r7, #17]
 801244e:	429a      	cmp	r2, r3
 8012450:	f200 80d2 	bhi.w	80125f8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012454:	2301      	movs	r3, #1
 8012456:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801245a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801245e:	2b00      	cmp	r3, #0
 8012460:	d108      	bne.n	8012474 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012464:	f005 f96a 	bl	801773c <tcp_zero_window_probe>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d014      	beq.n	8012498 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801246e:	2300      	movs	r3, #0
 8012470:	623b      	str	r3, [r7, #32]
 8012472:	e011      	b.n	8012498 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801247a:	4619      	mov	r1, r3
 801247c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801247e:	f004 f82f 	bl	80164e0 <tcp_split_unsent_seg>
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d107      	bne.n	8012498 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801248a:	f004 faaf 	bl	80169ec <tcp_output>
 801248e:	4603      	mov	r3, r0
 8012490:	2b00      	cmp	r3, #0
 8012492:	d101      	bne.n	8012498 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012498:	6a3b      	ldr	r3, [r7, #32]
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 80ac 	beq.w	80125f8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80124a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a2:	2200      	movs	r2, #0
 80124a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80124a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80124ae:	2b06      	cmp	r3, #6
 80124b0:	f200 80a2 	bhi.w	80125f8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80124b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80124ba:	3301      	adds	r3, #1
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80124c4:	e098      	b.n	80125f8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80124c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	db0f      	blt.n	80124f0 <tcp_slowtmr+0x1f0>
 80124d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80124d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80124da:	4293      	cmp	r3, r2
 80124dc:	d008      	beq.n	80124f0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80124de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80124e4:	b29b      	uxth	r3, r3
 80124e6:	3301      	adds	r3, #1
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	b21a      	sxth	r2, r3
 80124ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ee:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80124f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80124f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80124fc:	429a      	cmp	r2, r3
 80124fe:	db7b      	blt.n	80125f8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012502:	f004 fd65 	bl	8016fd0 <tcp_rexmit_rto_prepare>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d007      	beq.n	801251c <tcp_slowtmr+0x21c>
 801250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012510:	2b00      	cmp	r3, #0
 8012512:	d171      	bne.n	80125f8 <tcp_slowtmr+0x2f8>
 8012514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012518:	2b00      	cmp	r3, #0
 801251a:	d06d      	beq.n	80125f8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251e:	7d1b      	ldrb	r3, [r3, #20]
 8012520:	2b02      	cmp	r3, #2
 8012522:	d03a      	beq.n	801259a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012526:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801252a:	2b0c      	cmp	r3, #12
 801252c:	bf28      	it	cs
 801252e:	230c      	movcs	r3, #12
 8012530:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012534:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012538:	10db      	asrs	r3, r3, #3
 801253a:	b21b      	sxth	r3, r3
 801253c:	461a      	mov	r2, r3
 801253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012540:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012544:	4413      	add	r3, r2
 8012546:	7efa      	ldrb	r2, [r7, #27]
 8012548:	4910      	ldr	r1, [pc, #64]	; (801258c <tcp_slowtmr+0x28c>)
 801254a:	5c8a      	ldrb	r2, [r1, r2]
 801254c:	4093      	lsls	r3, r2
 801254e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012556:	4293      	cmp	r3, r2
 8012558:	dc1a      	bgt.n	8012590 <tcp_slowtmr+0x290>
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	b21a      	sxth	r2, r3
 801255e:	e019      	b.n	8012594 <tcp_slowtmr+0x294>
 8012560:	2000bdd4 	.word	0x2000bdd4
 8012564:	20004f0a 	.word	0x20004f0a
 8012568:	2000bdd0 	.word	0x2000bdd0
 801256c:	080260d0 	.word	0x080260d0
 8012570:	08026414 	.word	0x08026414
 8012574:	08026114 	.word	0x08026114
 8012578:	08026440 	.word	0x08026440
 801257c:	0802646c 	.word	0x0802646c
 8012580:	0802649c 	.word	0x0802649c
 8012584:	080264d0 	.word	0x080264d0
 8012588:	08029ee4 	.word	0x08029ee4
 801258c:	08029ed4 	.word	0x08029ed4
 8012590:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259c:	2200      	movs	r2, #0
 801259e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80125a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80125a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125ac:	4293      	cmp	r3, r2
 80125ae:	bf28      	it	cs
 80125b0:	4613      	movcs	r3, r2
 80125b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80125b4:	8a7b      	ldrh	r3, [r7, #18]
 80125b6:	085b      	lsrs	r3, r3, #1
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80125c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80125c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ca:	005b      	lsls	r3, r3, #1
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d206      	bcs.n	80125e0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80125d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125d6:	005b      	lsls	r3, r3, #1
 80125d8:	b29a      	uxth	r2, r3
 80125da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80125e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80125ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ec:	2200      	movs	r2, #0
 80125ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80125f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80125f4:	f004 fd5c 	bl	80170b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fa:	7d1b      	ldrb	r3, [r3, #20]
 80125fc:	2b06      	cmp	r3, #6
 80125fe:	d111      	bne.n	8012624 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	8b5b      	ldrh	r3, [r3, #26]
 8012604:	f003 0310 	and.w	r3, r3, #16
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00b      	beq.n	8012624 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801260c:	4b9c      	ldr	r3, [pc, #624]	; (8012880 <tcp_slowtmr+0x580>)
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	6a1b      	ldr	r3, [r3, #32]
 8012614:	1ad3      	subs	r3, r2, r3
 8012616:	2b28      	cmp	r3, #40	; 0x28
 8012618:	d904      	bls.n	8012624 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801261a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801261e:	3301      	adds	r3, #1
 8012620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	7a5b      	ldrb	r3, [r3, #9]
 8012628:	f003 0308 	and.w	r3, r3, #8
 801262c:	2b00      	cmp	r3, #0
 801262e:	d04a      	beq.n	80126c6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012632:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012634:	2b04      	cmp	r3, #4
 8012636:	d003      	beq.n	8012640 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801263c:	2b07      	cmp	r3, #7
 801263e:	d142      	bne.n	80126c6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012640:	4b8f      	ldr	r3, [pc, #572]	; (8012880 <tcp_slowtmr+0x580>)
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	6a1b      	ldr	r3, [r3, #32]
 8012648:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012650:	4b8c      	ldr	r3, [pc, #560]	; (8012884 <tcp_slowtmr+0x584>)
 8012652:	440b      	add	r3, r1
 8012654:	498c      	ldr	r1, [pc, #560]	; (8012888 <tcp_slowtmr+0x588>)
 8012656:	fba1 1303 	umull	r1, r3, r1, r3
 801265a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801265c:	429a      	cmp	r2, r3
 801265e:	d90a      	bls.n	8012676 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012664:	3301      	adds	r3, #1
 8012666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801266a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801266e:	3301      	adds	r3, #1
 8012670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012674:	e027      	b.n	80126c6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012676:	4b82      	ldr	r3, [pc, #520]	; (8012880 <tcp_slowtmr+0x580>)
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267c:	6a1b      	ldr	r3, [r3, #32]
 801267e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012682:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012688:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801268c:	4618      	mov	r0, r3
 801268e:	4b7f      	ldr	r3, [pc, #508]	; (801288c <tcp_slowtmr+0x58c>)
 8012690:	fb03 f300 	mul.w	r3, r3, r0
 8012694:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012696:	497c      	ldr	r1, [pc, #496]	; (8012888 <tcp_slowtmr+0x588>)
 8012698:	fba1 1303 	umull	r1, r3, r1, r3
 801269c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801269e:	429a      	cmp	r2, r3
 80126a0:	d911      	bls.n	80126c6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80126a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126a4:	f005 f80a 	bl	80176bc <tcp_keepalive>
 80126a8:	4603      	mov	r3, r0
 80126aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80126ae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d107      	bne.n	80126c6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80126b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80126bc:	3301      	adds	r3, #1
 80126be:	b2da      	uxtb	r2, r3
 80126c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80126c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d011      	beq.n	80126f2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80126ce:	4b6c      	ldr	r3, [pc, #432]	; (8012880 <tcp_slowtmr+0x580>)
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d4:	6a1b      	ldr	r3, [r3, #32]
 80126d6:	1ad2      	subs	r2, r2, r3
 80126d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80126de:	4619      	mov	r1, r3
 80126e0:	460b      	mov	r3, r1
 80126e2:	005b      	lsls	r3, r3, #1
 80126e4:	440b      	add	r3, r1
 80126e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d302      	bcc.n	80126f2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80126ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126ee:	f000 fec9 	bl	8013484 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80126f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f4:	7d1b      	ldrb	r3, [r3, #20]
 80126f6:	2b03      	cmp	r3, #3
 80126f8:	d10b      	bne.n	8012712 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80126fa:	4b61      	ldr	r3, [pc, #388]	; (8012880 <tcp_slowtmr+0x580>)
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012700:	6a1b      	ldr	r3, [r3, #32]
 8012702:	1ad3      	subs	r3, r2, r3
 8012704:	2b28      	cmp	r3, #40	; 0x28
 8012706:	d904      	bls.n	8012712 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801270c:	3301      	adds	r3, #1
 801270e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012714:	7d1b      	ldrb	r3, [r3, #20]
 8012716:	2b09      	cmp	r3, #9
 8012718:	d10b      	bne.n	8012732 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801271a:	4b59      	ldr	r3, [pc, #356]	; (8012880 <tcp_slowtmr+0x580>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012720:	6a1b      	ldr	r3, [r3, #32]
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	2bf0      	cmp	r3, #240	; 0xf0
 8012726:	d904      	bls.n	8012732 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801272c:	3301      	adds	r3, #1
 801272e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012736:	2b00      	cmp	r3, #0
 8012738:	d060      	beq.n	80127fc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012740:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012744:	f000 fcea 	bl	801311c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274a:	2b00      	cmp	r3, #0
 801274c:	d010      	beq.n	8012770 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801274e:	4b50      	ldr	r3, [pc, #320]	; (8012890 <tcp_slowtmr+0x590>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012754:	429a      	cmp	r2, r3
 8012756:	d106      	bne.n	8012766 <tcp_slowtmr+0x466>
 8012758:	4b4e      	ldr	r3, [pc, #312]	; (8012894 <tcp_slowtmr+0x594>)
 801275a:	f240 526d 	movw	r2, #1389	; 0x56d
 801275e:	494e      	ldr	r1, [pc, #312]	; (8012898 <tcp_slowtmr+0x598>)
 8012760:	484e      	ldr	r0, [pc, #312]	; (801289c <tcp_slowtmr+0x59c>)
 8012762:	f009 f8c3 	bl	801b8ec <printf>
        prev->next = pcb->next;
 8012766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012768:	68da      	ldr	r2, [r3, #12]
 801276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801276c:	60da      	str	r2, [r3, #12]
 801276e:	e00f      	b.n	8012790 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012770:	4b47      	ldr	r3, [pc, #284]	; (8012890 <tcp_slowtmr+0x590>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012776:	429a      	cmp	r2, r3
 8012778:	d006      	beq.n	8012788 <tcp_slowtmr+0x488>
 801277a:	4b46      	ldr	r3, [pc, #280]	; (8012894 <tcp_slowtmr+0x594>)
 801277c:	f240 5271 	movw	r2, #1393	; 0x571
 8012780:	4947      	ldr	r1, [pc, #284]	; (80128a0 <tcp_slowtmr+0x5a0>)
 8012782:	4846      	ldr	r0, [pc, #280]	; (801289c <tcp_slowtmr+0x59c>)
 8012784:	f009 f8b2 	bl	801b8ec <printf>
        tcp_active_pcbs = pcb->next;
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	4a40      	ldr	r2, [pc, #256]	; (8012890 <tcp_slowtmr+0x590>)
 801278e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012794:	2b00      	cmp	r3, #0
 8012796:	d013      	beq.n	80127c0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80127a0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	3304      	adds	r3, #4
 80127a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127a8:	8ad2      	ldrh	r2, [r2, #22]
 80127aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127ac:	8b09      	ldrh	r1, [r1, #24]
 80127ae:	9102      	str	r1, [sp, #8]
 80127b0:	9201      	str	r2, [sp, #4]
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	462b      	mov	r3, r5
 80127b6:	4622      	mov	r2, r4
 80127b8:	4601      	mov	r1, r0
 80127ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127bc:	f004 feca 	bl	8017554 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	691b      	ldr	r3, [r3, #16]
 80127c4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80127c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c8:	7d1b      	ldrb	r3, [r3, #20]
 80127ca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80127cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80127d6:	6838      	ldr	r0, [r7, #0]
 80127d8:	f7fe ffde 	bl	8011798 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80127dc:	4b31      	ldr	r3, [pc, #196]	; (80128a4 <tcp_slowtmr+0x5a4>)
 80127de:	2200      	movs	r2, #0
 80127e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d004      	beq.n	80127f2 <tcp_slowtmr+0x4f2>
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	f06f 010c 	mvn.w	r1, #12
 80127ee:	68b8      	ldr	r0, [r7, #8]
 80127f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80127f2:	4b2c      	ldr	r3, [pc, #176]	; (80128a4 <tcp_slowtmr+0x5a4>)
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d037      	beq.n	801286a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80127fa:	e592      	b.n	8012322 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80127fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012802:	68db      	ldr	r3, [r3, #12]
 8012804:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012808:	7f1b      	ldrb	r3, [r3, #28]
 801280a:	3301      	adds	r3, #1
 801280c:	b2da      	uxtb	r2, r3
 801280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012810:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012814:	7f1a      	ldrb	r2, [r3, #28]
 8012816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012818:	7f5b      	ldrb	r3, [r3, #29]
 801281a:	429a      	cmp	r2, r3
 801281c:	d325      	bcc.n	801286a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012820:	2200      	movs	r2, #0
 8012822:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012824:	4b1f      	ldr	r3, [pc, #124]	; (80128a4 <tcp_slowtmr+0x5a4>)
 8012826:	2200      	movs	r2, #0
 8012828:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00b      	beq.n	801284c <tcp_slowtmr+0x54c>
 8012834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801283a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801283c:	6912      	ldr	r2, [r2, #16]
 801283e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012840:	4610      	mov	r0, r2
 8012842:	4798      	blx	r3
 8012844:	4603      	mov	r3, r0
 8012846:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801284a:	e002      	b.n	8012852 <tcp_slowtmr+0x552>
 801284c:	2300      	movs	r3, #0
 801284e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012852:	4b14      	ldr	r3, [pc, #80]	; (80128a4 <tcp_slowtmr+0x5a4>)
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d000      	beq.n	801285c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801285a:	e562      	b.n	8012322 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801285c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012860:	2b00      	cmp	r3, #0
 8012862:	d102      	bne.n	801286a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012866:	f004 f8c1 	bl	80169ec <tcp_output>
  while (pcb != NULL) {
 801286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286c:	2b00      	cmp	r3, #0
 801286e:	f47f ad5e 	bne.w	801232e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012872:	2300      	movs	r3, #0
 8012874:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012876:	4b0c      	ldr	r3, [pc, #48]	; (80128a8 <tcp_slowtmr+0x5a8>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801287c:	e069      	b.n	8012952 <tcp_slowtmr+0x652>
 801287e:	bf00      	nop
 8012880:	2000bdd4 	.word	0x2000bdd4
 8012884:	000a4cb8 	.word	0x000a4cb8
 8012888:	10624dd3 	.word	0x10624dd3
 801288c:	000124f8 	.word	0x000124f8
 8012890:	2000bdd0 	.word	0x2000bdd0
 8012894:	080260d0 	.word	0x080260d0
 8012898:	08026508 	.word	0x08026508
 801289c:	08026114 	.word	0x08026114
 80128a0:	08026534 	.word	0x08026534
 80128a4:	2000bdcc 	.word	0x2000bdcc
 80128a8:	2000bde0 	.word	0x2000bde0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80128ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ae:	7d1b      	ldrb	r3, [r3, #20]
 80128b0:	2b0a      	cmp	r3, #10
 80128b2:	d006      	beq.n	80128c2 <tcp_slowtmr+0x5c2>
 80128b4:	4b2b      	ldr	r3, [pc, #172]	; (8012964 <tcp_slowtmr+0x664>)
 80128b6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80128ba:	492b      	ldr	r1, [pc, #172]	; (8012968 <tcp_slowtmr+0x668>)
 80128bc:	482b      	ldr	r0, [pc, #172]	; (801296c <tcp_slowtmr+0x66c>)
 80128be:	f009 f815 	bl	801b8ec <printf>
    pcb_remove = 0;
 80128c2:	2300      	movs	r3, #0
 80128c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80128c8:	4b29      	ldr	r3, [pc, #164]	; (8012970 <tcp_slowtmr+0x670>)
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ce:	6a1b      	ldr	r3, [r3, #32]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	2bf0      	cmp	r3, #240	; 0xf0
 80128d4:	d904      	bls.n	80128e0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80128d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128da:	3301      	adds	r3, #1
 80128dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80128e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d02f      	beq.n	8012948 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80128e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128ea:	f000 fc17 	bl	801311c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80128ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d010      	beq.n	8012916 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80128f4:	4b1f      	ldr	r3, [pc, #124]	; (8012974 <tcp_slowtmr+0x674>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128fa:	429a      	cmp	r2, r3
 80128fc:	d106      	bne.n	801290c <tcp_slowtmr+0x60c>
 80128fe:	4b19      	ldr	r3, [pc, #100]	; (8012964 <tcp_slowtmr+0x664>)
 8012900:	f240 52af 	movw	r2, #1455	; 0x5af
 8012904:	491c      	ldr	r1, [pc, #112]	; (8012978 <tcp_slowtmr+0x678>)
 8012906:	4819      	ldr	r0, [pc, #100]	; (801296c <tcp_slowtmr+0x66c>)
 8012908:	f008 fff0 	bl	801b8ec <printf>
        prev->next = pcb->next;
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	68da      	ldr	r2, [r3, #12]
 8012910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012912:	60da      	str	r2, [r3, #12]
 8012914:	e00f      	b.n	8012936 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012916:	4b17      	ldr	r3, [pc, #92]	; (8012974 <tcp_slowtmr+0x674>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801291c:	429a      	cmp	r2, r3
 801291e:	d006      	beq.n	801292e <tcp_slowtmr+0x62e>
 8012920:	4b10      	ldr	r3, [pc, #64]	; (8012964 <tcp_slowtmr+0x664>)
 8012922:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012926:	4915      	ldr	r1, [pc, #84]	; (801297c <tcp_slowtmr+0x67c>)
 8012928:	4810      	ldr	r0, [pc, #64]	; (801296c <tcp_slowtmr+0x66c>)
 801292a:	f008 ffdf 	bl	801b8ec <printf>
        tcp_tw_pcbs = pcb->next;
 801292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012930:	68db      	ldr	r3, [r3, #12]
 8012932:	4a10      	ldr	r2, [pc, #64]	; (8012974 <tcp_slowtmr+0x674>)
 8012934:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012938:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012940:	69f8      	ldr	r0, [r7, #28]
 8012942:	f7fe ff29 	bl	8011798 <tcp_free>
 8012946:	e004      	b.n	8012952 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801294c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1a9      	bne.n	80128ac <tcp_slowtmr+0x5ac>
    }
  }
}
 8012958:	bf00      	nop
 801295a:	bf00      	nop
 801295c:	3730      	adds	r7, #48	; 0x30
 801295e:	46bd      	mov	sp, r7
 8012960:	bdb0      	pop	{r4, r5, r7, pc}
 8012962:	bf00      	nop
 8012964:	080260d0 	.word	0x080260d0
 8012968:	08026560 	.word	0x08026560
 801296c:	08026114 	.word	0x08026114
 8012970:	2000bdd4 	.word	0x2000bdd4
 8012974:	2000bde0 	.word	0x2000bde0
 8012978:	08026590 	.word	0x08026590
 801297c:	080265b8 	.word	0x080265b8

08012980 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012986:	4b2d      	ldr	r3, [pc, #180]	; (8012a3c <tcp_fasttmr+0xbc>)
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	3301      	adds	r3, #1
 801298c:	b2da      	uxtb	r2, r3
 801298e:	4b2b      	ldr	r3, [pc, #172]	; (8012a3c <tcp_fasttmr+0xbc>)
 8012990:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012992:	4b2b      	ldr	r3, [pc, #172]	; (8012a40 <tcp_fasttmr+0xc0>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012998:	e048      	b.n	8012a2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	7f9a      	ldrb	r2, [r3, #30]
 801299e:	4b27      	ldr	r3, [pc, #156]	; (8012a3c <tcp_fasttmr+0xbc>)
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d03f      	beq.n	8012a26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80129a6:	4b25      	ldr	r3, [pc, #148]	; (8012a3c <tcp_fasttmr+0xbc>)
 80129a8:	781a      	ldrb	r2, [r3, #0]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	8b5b      	ldrh	r3, [r3, #26]
 80129b2:	f003 0301 	and.w	r3, r3, #1
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d010      	beq.n	80129dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	8b5b      	ldrh	r3, [r3, #26]
 80129be:	f043 0302 	orr.w	r3, r3, #2
 80129c2:	b29a      	uxth	r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f004 f80f 	bl	80169ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	8b5b      	ldrh	r3, [r3, #26]
 80129d2:	f023 0303 	bic.w	r3, r3, #3
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	8b5b      	ldrh	r3, [r3, #26]
 80129e0:	f003 0308 	and.w	r3, r3, #8
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d009      	beq.n	80129fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	8b5b      	ldrh	r3, [r3, #26]
 80129ec:	f023 0308 	bic.w	r3, r3, #8
 80129f0:	b29a      	uxth	r2, r3
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f7ff f862 	bl	8011ac0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00a      	beq.n	8012a20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012a0a:	4b0e      	ldr	r3, [pc, #56]	; (8012a44 <tcp_fasttmr+0xc4>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 f819 	bl	8012a48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012a16:	4b0b      	ldr	r3, [pc, #44]	; (8012a44 <tcp_fasttmr+0xc4>)
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d000      	beq.n	8012a20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012a1e:	e7b8      	b.n	8012992 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	607b      	str	r3, [r7, #4]
 8012a24:	e002      	b.n	8012a2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	68db      	ldr	r3, [r3, #12]
 8012a2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1b3      	bne.n	801299a <tcp_fasttmr+0x1a>
    }
  }
}
 8012a32:	bf00      	nop
 8012a34:	bf00      	nop
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	20004f0a 	.word	0x20004f0a
 8012a40:	2000bdd0 	.word	0x2000bdd0
 8012a44:	2000bdcc 	.word	0x2000bdcc

08012a48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012a48:	b590      	push	{r4, r7, lr}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d109      	bne.n	8012a6a <tcp_process_refused_data+0x22>
 8012a56:	4b37      	ldr	r3, [pc, #220]	; (8012b34 <tcp_process_refused_data+0xec>)
 8012a58:	f240 6209 	movw	r2, #1545	; 0x609
 8012a5c:	4936      	ldr	r1, [pc, #216]	; (8012b38 <tcp_process_refused_data+0xf0>)
 8012a5e:	4837      	ldr	r0, [pc, #220]	; (8012b3c <tcp_process_refused_data+0xf4>)
 8012a60:	f008 ff44 	bl	801b8ec <printf>
 8012a64:	f06f 030f 	mvn.w	r3, #15
 8012a68:	e060      	b.n	8012b2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a6e:	7b5b      	ldrb	r3, [r3, #13]
 8012a70:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a76:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d00b      	beq.n	8012aa0 <tcp_process_refused_data+0x58>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6918      	ldr	r0, [r3, #16]
 8012a92:	2300      	movs	r3, #0
 8012a94:	68ba      	ldr	r2, [r7, #8]
 8012a96:	6879      	ldr	r1, [r7, #4]
 8012a98:	47a0      	blx	r4
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	73fb      	strb	r3, [r7, #15]
 8012a9e:	e007      	b.n	8012ab0 <tcp_process_refused_data+0x68>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	68ba      	ldr	r2, [r7, #8]
 8012aa4:	6879      	ldr	r1, [r7, #4]
 8012aa6:	2000      	movs	r0, #0
 8012aa8:	f000 f8c2 	bl	8012c30 <tcp_recv_null>
 8012aac:	4603      	mov	r3, r0
 8012aae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d12a      	bne.n	8012b0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012ab8:	7bbb      	ldrb	r3, [r7, #14]
 8012aba:	f003 0320 	and.w	r3, r3, #32
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d033      	beq.n	8012b2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ac6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012aca:	d005      	beq.n	8012ad8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d00b      	beq.n	8012afa <tcp_process_refused_data+0xb2>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6918      	ldr	r0, [r3, #16]
 8012aec:	2300      	movs	r3, #0
 8012aee:	2200      	movs	r2, #0
 8012af0:	6879      	ldr	r1, [r7, #4]
 8012af2:	47a0      	blx	r4
 8012af4:	4603      	mov	r3, r0
 8012af6:	73fb      	strb	r3, [r7, #15]
 8012af8:	e001      	b.n	8012afe <tcp_process_refused_data+0xb6>
 8012afa:	2300      	movs	r3, #0
 8012afc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b02:	f113 0f0d 	cmn.w	r3, #13
 8012b06:	d110      	bne.n	8012b2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012b08:	f06f 030c 	mvn.w	r3, #12
 8012b0c:	e00e      	b.n	8012b2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b12:	f113 0f0d 	cmn.w	r3, #13
 8012b16:	d102      	bne.n	8012b1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012b18:	f06f 030c 	mvn.w	r3, #12
 8012b1c:	e006      	b.n	8012b2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	68ba      	ldr	r2, [r7, #8]
 8012b22:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012b24:	f06f 0304 	mvn.w	r3, #4
 8012b28:	e000      	b.n	8012b2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3714      	adds	r7, #20
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd90      	pop	{r4, r7, pc}
 8012b34:	080260d0 	.word	0x080260d0
 8012b38:	080265e0 	.word	0x080265e0
 8012b3c:	08026114 	.word	0x08026114

08012b40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012b48:	e007      	b.n	8012b5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f80a 	bl	8012b6a <tcp_seg_free>
    seg = next;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1f4      	bne.n	8012b4a <tcp_segs_free+0xa>
  }
}
 8012b60:	bf00      	nop
 8012b62:	bf00      	nop
 8012b64:	3710      	adds	r7, #16
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bd80      	pop	{r7, pc}

08012b6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b082      	sub	sp, #8
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00c      	beq.n	8012b92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d004      	beq.n	8012b8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fe fb4b 	bl	8011220 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012b8a:	6879      	ldr	r1, [r7, #4]
 8012b8c:	2003      	movs	r0, #3
 8012b8e:	f7fd fcc9 	bl	8010524 <memp_free>
  }
}
 8012b92:	bf00      	nop
 8012b94:	3708      	adds	r7, #8
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
	...

08012b9c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d107      	bne.n	8012bbe <tcp_setprio+0x22>
 8012bae:	4b07      	ldr	r3, [pc, #28]	; (8012bcc <tcp_setprio+0x30>)
 8012bb0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8012bb4:	4906      	ldr	r1, [pc, #24]	; (8012bd0 <tcp_setprio+0x34>)
 8012bb6:	4807      	ldr	r0, [pc, #28]	; (8012bd4 <tcp_setprio+0x38>)
 8012bb8:	f008 fe98 	bl	801b8ec <printf>
 8012bbc:	e002      	b.n	8012bc4 <tcp_setprio+0x28>

  pcb->prio = prio;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	78fa      	ldrb	r2, [r7, #3]
 8012bc2:	755a      	strb	r2, [r3, #21]
}
 8012bc4:	3708      	adds	r7, #8
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	080260d0 	.word	0x080260d0
 8012bd0:	08026608 	.word	0x08026608
 8012bd4:	08026114 	.word	0x08026114

08012bd8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d106      	bne.n	8012bf4 <tcp_seg_copy+0x1c>
 8012be6:	4b0f      	ldr	r3, [pc, #60]	; (8012c24 <tcp_seg_copy+0x4c>)
 8012be8:	f240 6282 	movw	r2, #1666	; 0x682
 8012bec:	490e      	ldr	r1, [pc, #56]	; (8012c28 <tcp_seg_copy+0x50>)
 8012bee:	480f      	ldr	r0, [pc, #60]	; (8012c2c <tcp_seg_copy+0x54>)
 8012bf0:	f008 fe7c 	bl	801b8ec <printf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012bf4:	2003      	movs	r0, #3
 8012bf6:	f7fd fc43 	bl	8010480 <memp_malloc>
 8012bfa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d101      	bne.n	8012c06 <tcp_seg_copy+0x2e>
    return NULL;
 8012c02:	2300      	movs	r3, #0
 8012c04:	e00a      	b.n	8012c1c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012c06:	2210      	movs	r2, #16
 8012c08:	6879      	ldr	r1, [r7, #4]
 8012c0a:	68f8      	ldr	r0, [r7, #12]
 8012c0c:	f008 fbc0 	bl	801b390 <memcpy>
  pbuf_ref(cseg->p);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fe fba9 	bl	801136c <pbuf_ref>
  return cseg;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
}
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3710      	adds	r7, #16
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}
 8012c24:	080260d0 	.word	0x080260d0
 8012c28:	08026624 	.word	0x08026624
 8012c2c:	08026114 	.word	0x08026114

08012c30 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
 8012c3c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d109      	bne.n	8012c58 <tcp_recv_null+0x28>
 8012c44:	4b12      	ldr	r3, [pc, #72]	; (8012c90 <tcp_recv_null+0x60>)
 8012c46:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012c4a:	4912      	ldr	r1, [pc, #72]	; (8012c94 <tcp_recv_null+0x64>)
 8012c4c:	4812      	ldr	r0, [pc, #72]	; (8012c98 <tcp_recv_null+0x68>)
 8012c4e:	f008 fe4d 	bl	801b8ec <printf>
 8012c52:	f06f 030f 	mvn.w	r3, #15
 8012c56:	e016      	b.n	8012c86 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d009      	beq.n	8012c72 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	891b      	ldrh	r3, [r3, #8]
 8012c62:	4619      	mov	r1, r3
 8012c64:	68b8      	ldr	r0, [r7, #8]
 8012c66:	f7ff fab5 	bl	80121d4 <tcp_recved>
    pbuf_free(p);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7fe fad8 	bl	8011220 <pbuf_free>
 8012c70:	e008      	b.n	8012c84 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d104      	bne.n	8012c84 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012c7a:	68b8      	ldr	r0, [r7, #8]
 8012c7c:	f7fe ff8a 	bl	8011b94 <tcp_close>
 8012c80:	4603      	mov	r3, r0
 8012c82:	e000      	b.n	8012c86 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	080260d0 	.word	0x080260d0
 8012c94:	08026640 	.word	0x08026640
 8012c98:	08026114 	.word	0x08026114

08012c9c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b086      	sub	sp, #24
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	db01      	blt.n	8012cb2 <tcp_kill_prio+0x16>
 8012cae:	79fb      	ldrb	r3, [r7, #7]
 8012cb0:	e000      	b.n	8012cb4 <tcp_kill_prio+0x18>
 8012cb2:	237f      	movs	r3, #127	; 0x7f
 8012cb4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012cb6:	7afb      	ldrb	r3, [r7, #11]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d034      	beq.n	8012d26 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012cbc:	7afb      	ldrb	r3, [r7, #11]
 8012cbe:	3b01      	subs	r3, #1
 8012cc0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cca:	4b19      	ldr	r3, [pc, #100]	; (8012d30 <tcp_kill_prio+0x94>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	617b      	str	r3, [r7, #20]
 8012cd0:	e01f      	b.n	8012d12 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	7d5b      	ldrb	r3, [r3, #21]
 8012cd6:	7afa      	ldrb	r2, [r7, #11]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d80c      	bhi.n	8012cf6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012ce0:	7afa      	ldrb	r2, [r7, #11]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d112      	bne.n	8012d0c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012ce6:	4b13      	ldr	r3, [pc, #76]	; (8012d34 <tcp_kill_prio+0x98>)
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	6a1b      	ldr	r3, [r3, #32]
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	68fa      	ldr	r2, [r7, #12]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d80a      	bhi.n	8012d0c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012cf6:	4b0f      	ldr	r3, [pc, #60]	; (8012d34 <tcp_kill_prio+0x98>)
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	6a1b      	ldr	r3, [r3, #32]
 8012cfe:	1ad3      	subs	r3, r2, r3
 8012d00:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	7d5b      	ldrb	r3, [r3, #21]
 8012d0a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	617b      	str	r3, [r7, #20]
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d1dc      	bne.n	8012cd2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d004      	beq.n	8012d28 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012d1e:	6938      	ldr	r0, [r7, #16]
 8012d20:	f7ff f87e 	bl	8011e20 <tcp_abort>
 8012d24:	e000      	b.n	8012d28 <tcp_kill_prio+0x8c>
    return;
 8012d26:	bf00      	nop
  }
}
 8012d28:	3718      	adds	r7, #24
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	2000bdd0 	.word	0x2000bdd0
 8012d34:	2000bdd4 	.word	0x2000bdd4

08012d38 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b086      	sub	sp, #24
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	4603      	mov	r3, r0
 8012d40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012d42:	79fb      	ldrb	r3, [r7, #7]
 8012d44:	2b08      	cmp	r3, #8
 8012d46:	d009      	beq.n	8012d5c <tcp_kill_state+0x24>
 8012d48:	79fb      	ldrb	r3, [r7, #7]
 8012d4a:	2b09      	cmp	r3, #9
 8012d4c:	d006      	beq.n	8012d5c <tcp_kill_state+0x24>
 8012d4e:	4b1a      	ldr	r3, [pc, #104]	; (8012db8 <tcp_kill_state+0x80>)
 8012d50:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012d54:	4919      	ldr	r1, [pc, #100]	; (8012dbc <tcp_kill_state+0x84>)
 8012d56:	481a      	ldr	r0, [pc, #104]	; (8012dc0 <tcp_kill_state+0x88>)
 8012d58:	f008 fdc8 	bl	801b8ec <printf>

  inactivity = 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012d60:	2300      	movs	r3, #0
 8012d62:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d64:	4b17      	ldr	r3, [pc, #92]	; (8012dc4 <tcp_kill_state+0x8c>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	617b      	str	r3, [r7, #20]
 8012d6a:	e017      	b.n	8012d9c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	7d1b      	ldrb	r3, [r3, #20]
 8012d70:	79fa      	ldrb	r2, [r7, #7]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d10f      	bne.n	8012d96 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012d76:	4b14      	ldr	r3, [pc, #80]	; (8012dc8 <tcp_kill_state+0x90>)
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	6a1b      	ldr	r3, [r3, #32]
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d807      	bhi.n	8012d96 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012d86:	4b10      	ldr	r3, [pc, #64]	; (8012dc8 <tcp_kill_state+0x90>)
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	6a1b      	ldr	r3, [r3, #32]
 8012d8e:	1ad3      	subs	r3, r2, r3
 8012d90:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	617b      	str	r3, [r7, #20]
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1e4      	bne.n	8012d6c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d003      	beq.n	8012db0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012da8:	2100      	movs	r1, #0
 8012daa:	6938      	ldr	r0, [r7, #16]
 8012dac:	f7fe ff7a 	bl	8011ca4 <tcp_abandon>
  }
}
 8012db0:	bf00      	nop
 8012db2:	3718      	adds	r7, #24
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	080260d0 	.word	0x080260d0
 8012dbc:	0802665c 	.word	0x0802665c
 8012dc0:	08026114 	.word	0x08026114
 8012dc4:	2000bdd0 	.word	0x2000bdd0
 8012dc8:	2000bdd4 	.word	0x2000bdd4

08012dcc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dda:	4b12      	ldr	r3, [pc, #72]	; (8012e24 <tcp_kill_timewait+0x58>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	60fb      	str	r3, [r7, #12]
 8012de0:	e012      	b.n	8012e08 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012de2:	4b11      	ldr	r3, [pc, #68]	; (8012e28 <tcp_kill_timewait+0x5c>)
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6a1b      	ldr	r3, [r3, #32]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d807      	bhi.n	8012e02 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012df2:	4b0d      	ldr	r3, [pc, #52]	; (8012e28 <tcp_kill_timewait+0x5c>)
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	6a1b      	ldr	r3, [r3, #32]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	60fb      	str	r3, [r7, #12]
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d1e9      	bne.n	8012de2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012e14:	68b8      	ldr	r0, [r7, #8]
 8012e16:	f7ff f803 	bl	8011e20 <tcp_abort>
  }
}
 8012e1a:	bf00      	nop
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	2000bde0 	.word	0x2000bde0
 8012e28:	2000bdd4 	.word	0x2000bdd4

08012e2c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012e32:	4b10      	ldr	r3, [pc, #64]	; (8012e74 <tcp_handle_closepend+0x48>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012e38:	e014      	b.n	8012e64 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	8b5b      	ldrh	r3, [r3, #26]
 8012e44:	f003 0308 	and.w	r3, r3, #8
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d009      	beq.n	8012e60 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	8b5b      	ldrh	r3, [r3, #26]
 8012e50:	f023 0308 	bic.w	r3, r3, #8
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7fe fe30 	bl	8011ac0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d1e7      	bne.n	8012e3a <tcp_handle_closepend+0xe>
  }
}
 8012e6a:	bf00      	nop
 8012e6c:	bf00      	nop
 8012e6e:	3708      	adds	r7, #8
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	2000bdd0 	.word	0x2000bdd0

08012e78 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e82:	2001      	movs	r0, #1
 8012e84:	f7fd fafc 	bl	8010480 <memp_malloc>
 8012e88:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d126      	bne.n	8012ede <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012e90:	f7ff ffcc 	bl	8012e2c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012e94:	f7ff ff9a 	bl	8012dcc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012e98:	2001      	movs	r0, #1
 8012e9a:	f7fd faf1 	bl	8010480 <memp_malloc>
 8012e9e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d11b      	bne.n	8012ede <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012ea6:	2009      	movs	r0, #9
 8012ea8:	f7ff ff46 	bl	8012d38 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012eac:	2001      	movs	r0, #1
 8012eae:	f7fd fae7 	bl	8010480 <memp_malloc>
 8012eb2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d111      	bne.n	8012ede <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012eba:	2008      	movs	r0, #8
 8012ebc:	f7ff ff3c 	bl	8012d38 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ec0:	2001      	movs	r0, #1
 8012ec2:	f7fd fadd 	bl	8010480 <memp_malloc>
 8012ec6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d107      	bne.n	8012ede <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012ece:	79fb      	ldrb	r3, [r7, #7]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7ff fee3 	bl	8012c9c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	f7fd fad2 	bl	8010480 <memp_malloc>
 8012edc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d03f      	beq.n	8012f64 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012ee4:	229c      	movs	r2, #156	; 0x9c
 8012ee6:	2100      	movs	r1, #0
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f008 fa79 	bl	801b3e0 <memset>
    pcb->prio = prio;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	79fa      	ldrb	r2, [r7, #7]
 8012ef2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012efa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	22ff      	movs	r2, #255	; 0xff
 8012f12:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012f1a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	2206      	movs	r2, #6
 8012f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2206      	movs	r2, #6
 8012f28:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f30:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2201      	movs	r2, #1
 8012f36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012f3a:	4b0d      	ldr	r3, [pc, #52]	; (8012f70 <tcp_alloc+0xf8>)
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012f42:	4b0c      	ldr	r3, [pc, #48]	; (8012f74 <tcp_alloc+0xfc>)
 8012f44:	781a      	ldrb	r2, [r3, #0]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012f50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	4a08      	ldr	r2, [pc, #32]	; (8012f78 <tcp_alloc+0x100>)
 8012f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	4a07      	ldr	r2, [pc, #28]	; (8012f7c <tcp_alloc+0x104>)
 8012f60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012f64:	68fb      	ldr	r3, [r7, #12]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	2000bdd4 	.word	0x2000bdd4
 8012f74:	20004f0a 	.word	0x20004f0a
 8012f78:	08012c31 	.word	0x08012c31
 8012f7c:	006ddd00 	.word	0x006ddd00

08012f80 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	4603      	mov	r3, r0
 8012f88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012f8a:	2040      	movs	r0, #64	; 0x40
 8012f8c:	f7ff ff74 	bl	8012e78 <tcp_alloc>
 8012f90:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012f92:	68fb      	ldr	r3, [r7, #12]
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3710      	adds	r7, #16
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d002      	beq.n	8012fb2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	683a      	ldr	r2, [r7, #0]
 8012fb0:	611a      	str	r2, [r3, #16]
  }
}
 8012fb2:	bf00      	nop
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
	...

08012fc0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d00e      	beq.n	8012fee <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	7d1b      	ldrb	r3, [r3, #20]
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	d106      	bne.n	8012fe6 <tcp_recv+0x26>
 8012fd8:	4b07      	ldr	r3, [pc, #28]	; (8012ff8 <tcp_recv+0x38>)
 8012fda:	f240 72df 	movw	r2, #2015	; 0x7df
 8012fde:	4907      	ldr	r1, [pc, #28]	; (8012ffc <tcp_recv+0x3c>)
 8012fe0:	4807      	ldr	r0, [pc, #28]	; (8013000 <tcp_recv+0x40>)
 8012fe2:	f008 fc83 	bl	801b8ec <printf>
    pcb->recv = recv;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	683a      	ldr	r2, [r7, #0]
 8012fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8012fee:	bf00      	nop
 8012ff0:	3708      	adds	r7, #8
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	080260d0 	.word	0x080260d0
 8012ffc:	0802666c 	.word	0x0802666c
 8013000:	08026114 	.word	0x08026114

08013004 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b082      	sub	sp, #8
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00e      	beq.n	8013032 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	7d1b      	ldrb	r3, [r3, #20]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d106      	bne.n	801302a <tcp_sent+0x26>
 801301c:	4b07      	ldr	r3, [pc, #28]	; (801303c <tcp_sent+0x38>)
 801301e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013022:	4907      	ldr	r1, [pc, #28]	; (8013040 <tcp_sent+0x3c>)
 8013024:	4807      	ldr	r0, [pc, #28]	; (8013044 <tcp_sent+0x40>)
 8013026:	f008 fc61 	bl	801b8ec <printf>
    pcb->sent = sent;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	683a      	ldr	r2, [r7, #0]
 801302e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013032:	bf00      	nop
 8013034:	3708      	adds	r7, #8
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	080260d0 	.word	0x080260d0
 8013040:	08026694 	.word	0x08026694
 8013044:	08026114 	.word	0x08026114

08013048 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d00e      	beq.n	8013076 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	7d1b      	ldrb	r3, [r3, #20]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d106      	bne.n	801306e <tcp_err+0x26>
 8013060:	4b07      	ldr	r3, [pc, #28]	; (8013080 <tcp_err+0x38>)
 8013062:	f640 020d 	movw	r2, #2061	; 0x80d
 8013066:	4907      	ldr	r1, [pc, #28]	; (8013084 <tcp_err+0x3c>)
 8013068:	4807      	ldr	r0, [pc, #28]	; (8013088 <tcp_err+0x40>)
 801306a:	f008 fc3f 	bl	801b8ec <printf>
    pcb->errf = err;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013076:	bf00      	nop
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	080260d0 	.word	0x080260d0
 8013084:	080266bc 	.word	0x080266bc
 8013088:	08026114 	.word	0x08026114

0801308c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801308c:	b480      	push	{r7}
 801308e:	b085      	sub	sp, #20
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d008      	beq.n	80130ae <tcp_accept+0x22>
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	7d1b      	ldrb	r3, [r3, #20]
 80130a0:	2b01      	cmp	r3, #1
 80130a2:	d104      	bne.n	80130ae <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	683a      	ldr	r2, [r7, #0]
 80130ac:	619a      	str	r2, [r3, #24]
  }
}
 80130ae:	bf00      	nop
 80130b0:	3714      	adds	r7, #20
 80130b2:	46bd      	mov	sp, r7
 80130b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b8:	4770      	bx	lr
	...

080130bc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	4613      	mov	r3, r2
 80130c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d107      	bne.n	80130e0 <tcp_poll+0x24>
 80130d0:	4b0e      	ldr	r3, [pc, #56]	; (801310c <tcp_poll+0x50>)
 80130d2:	f640 023d 	movw	r2, #2109	; 0x83d
 80130d6:	490e      	ldr	r1, [pc, #56]	; (8013110 <tcp_poll+0x54>)
 80130d8:	480e      	ldr	r0, [pc, #56]	; (8013114 <tcp_poll+0x58>)
 80130da:	f008 fc07 	bl	801b8ec <printf>
 80130de:	e011      	b.n	8013104 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	7d1b      	ldrb	r3, [r3, #20]
 80130e4:	2b01      	cmp	r3, #1
 80130e6:	d106      	bne.n	80130f6 <tcp_poll+0x3a>
 80130e8:	4b08      	ldr	r3, [pc, #32]	; (801310c <tcp_poll+0x50>)
 80130ea:	f640 023e 	movw	r2, #2110	; 0x83e
 80130ee:	490a      	ldr	r1, [pc, #40]	; (8013118 <tcp_poll+0x5c>)
 80130f0:	4808      	ldr	r0, [pc, #32]	; (8013114 <tcp_poll+0x58>)
 80130f2:	f008 fbfb 	bl	801b8ec <printf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	68ba      	ldr	r2, [r7, #8]
 80130fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	79fa      	ldrb	r2, [r7, #7]
 8013102:	775a      	strb	r2, [r3, #29]
}
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	080260d0 	.word	0x080260d0
 8013110:	080266e4 	.word	0x080266e4
 8013114:	08026114 	.word	0x08026114
 8013118:	080266fc 	.word	0x080266fc

0801311c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d107      	bne.n	801313a <tcp_pcb_purge+0x1e>
 801312a:	4b21      	ldr	r3, [pc, #132]	; (80131b0 <tcp_pcb_purge+0x94>)
 801312c:	f640 0251 	movw	r2, #2129	; 0x851
 8013130:	4920      	ldr	r1, [pc, #128]	; (80131b4 <tcp_pcb_purge+0x98>)
 8013132:	4821      	ldr	r0, [pc, #132]	; (80131b8 <tcp_pcb_purge+0x9c>)
 8013134:	f008 fbda 	bl	801b8ec <printf>
 8013138:	e037      	b.n	80131aa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	7d1b      	ldrb	r3, [r3, #20]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d033      	beq.n	80131aa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013146:	2b0a      	cmp	r3, #10
 8013148:	d02f      	beq.n	80131aa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801314e:	2b01      	cmp	r3, #1
 8013150:	d02b      	beq.n	80131aa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013156:	2b00      	cmp	r3, #0
 8013158:	d007      	beq.n	801316a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801315e:	4618      	mov	r0, r3
 8013160:	f7fe f85e 	bl	8011220 <pbuf_free>
      pcb->refused_data = NULL;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801316e:	2b00      	cmp	r3, #0
 8013170:	d002      	beq.n	8013178 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f000 f986 	bl	8013484 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801317e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013184:	4618      	mov	r0, r3
 8013186:	f7ff fcdb 	bl	8012b40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801318e:	4618      	mov	r0, r3
 8013190:	f7ff fcd6 	bl	8012b40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2200      	movs	r2, #0
 8013198:	66da      	str	r2, [r3, #108]	; 0x6c
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}
 80131b0:	080260d0 	.word	0x080260d0
 80131b4:	0802671c 	.word	0x0802671c
 80131b8:	08026114 	.word	0x08026114

080131bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d106      	bne.n	80131da <tcp_pcb_remove+0x1e>
 80131cc:	4b3e      	ldr	r3, [pc, #248]	; (80132c8 <tcp_pcb_remove+0x10c>)
 80131ce:	f640 0283 	movw	r2, #2179	; 0x883
 80131d2:	493e      	ldr	r1, [pc, #248]	; (80132cc <tcp_pcb_remove+0x110>)
 80131d4:	483e      	ldr	r0, [pc, #248]	; (80132d0 <tcp_pcb_remove+0x114>)
 80131d6:	f008 fb89 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d106      	bne.n	80131ee <tcp_pcb_remove+0x32>
 80131e0:	4b39      	ldr	r3, [pc, #228]	; (80132c8 <tcp_pcb_remove+0x10c>)
 80131e2:	f640 0284 	movw	r2, #2180	; 0x884
 80131e6:	493b      	ldr	r1, [pc, #236]	; (80132d4 <tcp_pcb_remove+0x118>)
 80131e8:	4839      	ldr	r0, [pc, #228]	; (80132d0 <tcp_pcb_remove+0x114>)
 80131ea:	f008 fb7f 	bl	801b8ec <printf>

  TCP_RMV(pcblist, pcb);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	683a      	ldr	r2, [r7, #0]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d105      	bne.n	8013204 <tcp_pcb_remove+0x48>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68da      	ldr	r2, [r3, #12]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	601a      	str	r2, [r3, #0]
 8013202:	e013      	b.n	801322c <tcp_pcb_remove+0x70>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	60fb      	str	r3, [r7, #12]
 801320a:	e00c      	b.n	8013226 <tcp_pcb_remove+0x6a>
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	683a      	ldr	r2, [r7, #0]
 8013212:	429a      	cmp	r2, r3
 8013214:	d104      	bne.n	8013220 <tcp_pcb_remove+0x64>
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	68da      	ldr	r2, [r3, #12]
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	60da      	str	r2, [r3, #12]
 801321e:	e005      	b.n	801322c <tcp_pcb_remove+0x70>
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	60fb      	str	r3, [r7, #12]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d1ef      	bne.n	801320c <tcp_pcb_remove+0x50>
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	2200      	movs	r2, #0
 8013230:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013232:	6838      	ldr	r0, [r7, #0]
 8013234:	f7ff ff72 	bl	801311c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	7d1b      	ldrb	r3, [r3, #20]
 801323c:	2b0a      	cmp	r3, #10
 801323e:	d013      	beq.n	8013268 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013244:	2b01      	cmp	r3, #1
 8013246:	d00f      	beq.n	8013268 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	8b5b      	ldrh	r3, [r3, #26]
 801324c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013250:	2b00      	cmp	r3, #0
 8013252:	d009      	beq.n	8013268 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	8b5b      	ldrh	r3, [r3, #26]
 8013258:	f043 0302 	orr.w	r3, r3, #2
 801325c:	b29a      	uxth	r2, r3
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013262:	6838      	ldr	r0, [r7, #0]
 8013264:	f003 fbc2 	bl	80169ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	7d1b      	ldrb	r3, [r3, #20]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d020      	beq.n	80132b2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013274:	2b00      	cmp	r3, #0
 8013276:	d006      	beq.n	8013286 <tcp_pcb_remove+0xca>
 8013278:	4b13      	ldr	r3, [pc, #76]	; (80132c8 <tcp_pcb_remove+0x10c>)
 801327a:	f640 0293 	movw	r2, #2195	; 0x893
 801327e:	4916      	ldr	r1, [pc, #88]	; (80132d8 <tcp_pcb_remove+0x11c>)
 8013280:	4813      	ldr	r0, [pc, #76]	; (80132d0 <tcp_pcb_remove+0x114>)
 8013282:	f008 fb33 	bl	801b8ec <printf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801328a:	2b00      	cmp	r3, #0
 801328c:	d006      	beq.n	801329c <tcp_pcb_remove+0xe0>
 801328e:	4b0e      	ldr	r3, [pc, #56]	; (80132c8 <tcp_pcb_remove+0x10c>)
 8013290:	f640 0294 	movw	r2, #2196	; 0x894
 8013294:	4911      	ldr	r1, [pc, #68]	; (80132dc <tcp_pcb_remove+0x120>)
 8013296:	480e      	ldr	r0, [pc, #56]	; (80132d0 <tcp_pcb_remove+0x114>)
 8013298:	f008 fb28 	bl	801b8ec <printf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d006      	beq.n	80132b2 <tcp_pcb_remove+0xf6>
 80132a4:	4b08      	ldr	r3, [pc, #32]	; (80132c8 <tcp_pcb_remove+0x10c>)
 80132a6:	f640 0296 	movw	r2, #2198	; 0x896
 80132aa:	490d      	ldr	r1, [pc, #52]	; (80132e0 <tcp_pcb_remove+0x124>)
 80132ac:	4808      	ldr	r0, [pc, #32]	; (80132d0 <tcp_pcb_remove+0x114>)
 80132ae:	f008 fb1d 	bl	801b8ec <printf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	2200      	movs	r2, #0
 80132b6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	2200      	movs	r2, #0
 80132bc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80132be:	bf00      	nop
 80132c0:	3710      	adds	r7, #16
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	080260d0 	.word	0x080260d0
 80132cc:	08026738 	.word	0x08026738
 80132d0:	08026114 	.word	0x08026114
 80132d4:	08026754 	.word	0x08026754
 80132d8:	08026774 	.word	0x08026774
 80132dc:	0802678c 	.word	0x0802678c
 80132e0:	080267a8 	.word	0x080267a8

080132e4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d106      	bne.n	8013300 <tcp_next_iss+0x1c>
 80132f2:	4b0a      	ldr	r3, [pc, #40]	; (801331c <tcp_next_iss+0x38>)
 80132f4:	f640 02af 	movw	r2, #2223	; 0x8af
 80132f8:	4909      	ldr	r1, [pc, #36]	; (8013320 <tcp_next_iss+0x3c>)
 80132fa:	480a      	ldr	r0, [pc, #40]	; (8013324 <tcp_next_iss+0x40>)
 80132fc:	f008 faf6 	bl	801b8ec <printf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013300:	4b09      	ldr	r3, [pc, #36]	; (8013328 <tcp_next_iss+0x44>)
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	4b09      	ldr	r3, [pc, #36]	; (801332c <tcp_next_iss+0x48>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4413      	add	r3, r2
 801330a:	4a07      	ldr	r2, [pc, #28]	; (8013328 <tcp_next_iss+0x44>)
 801330c:	6013      	str	r3, [r2, #0]
  return iss;
 801330e:	4b06      	ldr	r3, [pc, #24]	; (8013328 <tcp_next_iss+0x44>)
 8013310:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013312:	4618      	mov	r0, r3
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	080260d0 	.word	0x080260d0
 8013320:	080267c0 	.word	0x080267c0
 8013324:	08026114 	.word	0x08026114
 8013328:	20000030 	.word	0x20000030
 801332c:	2000bdd4 	.word	0x2000bdd4

08013330 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b086      	sub	sp, #24
 8013334:	af00      	add	r7, sp, #0
 8013336:	4603      	mov	r3, r0
 8013338:	60b9      	str	r1, [r7, #8]
 801333a:	607a      	str	r2, [r7, #4]
 801333c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d106      	bne.n	8013352 <tcp_eff_send_mss_netif+0x22>
 8013344:	4b14      	ldr	r3, [pc, #80]	; (8013398 <tcp_eff_send_mss_netif+0x68>)
 8013346:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801334a:	4914      	ldr	r1, [pc, #80]	; (801339c <tcp_eff_send_mss_netif+0x6c>)
 801334c:	4814      	ldr	r0, [pc, #80]	; (80133a0 <tcp_eff_send_mss_netif+0x70>)
 801334e:	f008 facd 	bl	801b8ec <printf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013358:	89fb      	ldrh	r3, [r7, #14]
 801335a:	e019      	b.n	8013390 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	8c1b      	ldrh	r3, [r3, #32]
 8013360:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013362:	8afb      	ldrh	r3, [r7, #22]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d012      	beq.n	801338e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013368:	2328      	movs	r3, #40	; 0x28
 801336a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801336c:	8afa      	ldrh	r2, [r7, #22]
 801336e:	8abb      	ldrh	r3, [r7, #20]
 8013370:	429a      	cmp	r2, r3
 8013372:	d904      	bls.n	801337e <tcp_eff_send_mss_netif+0x4e>
 8013374:	8afa      	ldrh	r2, [r7, #22]
 8013376:	8abb      	ldrh	r3, [r7, #20]
 8013378:	1ad3      	subs	r3, r2, r3
 801337a:	b29b      	uxth	r3, r3
 801337c:	e000      	b.n	8013380 <tcp_eff_send_mss_netif+0x50>
 801337e:	2300      	movs	r3, #0
 8013380:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013382:	8a7a      	ldrh	r2, [r7, #18]
 8013384:	89fb      	ldrh	r3, [r7, #14]
 8013386:	4293      	cmp	r3, r2
 8013388:	bf28      	it	cs
 801338a:	4613      	movcs	r3, r2
 801338c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801338e:	89fb      	ldrh	r3, [r7, #14]
}
 8013390:	4618      	mov	r0, r3
 8013392:	3718      	adds	r7, #24
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	080260d0 	.word	0x080260d0
 801339c:	080267dc 	.word	0x080267dc
 80133a0:	08026114 	.word	0x08026114

080133a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d119      	bne.n	80133ec <tcp_netif_ip_addr_changed_pcblist+0x48>
 80133b8:	4b10      	ldr	r3, [pc, #64]	; (80133fc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80133ba:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80133be:	4910      	ldr	r1, [pc, #64]	; (8013400 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80133c0:	4810      	ldr	r0, [pc, #64]	; (8013404 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80133c2:	f008 fa93 	bl	801b8ec <printf>

  while (pcb != NULL) {
 80133c6:	e011      	b.n	80133ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	681a      	ldr	r2, [r3, #0]
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d108      	bne.n	80133e6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	68db      	ldr	r3, [r3, #12]
 80133d8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80133da:	68f8      	ldr	r0, [r7, #12]
 80133dc:	f7fe fd20 	bl	8011e20 <tcp_abort>
      pcb = next;
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	60fb      	str	r3, [r7, #12]
 80133e4:	e002      	b.n	80133ec <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	68db      	ldr	r3, [r3, #12]
 80133ea:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d1ea      	bne.n	80133c8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80133f2:	bf00      	nop
 80133f4:	bf00      	nop
 80133f6:	3710      	adds	r7, #16
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	080260d0 	.word	0x080260d0
 8013400:	08026804 	.word	0x08026804
 8013404:	08026114 	.word	0x08026114

08013408 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d02a      	beq.n	801346e <tcp_netif_ip_addr_changed+0x66>
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d026      	beq.n	801346e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013420:	4b15      	ldr	r3, [pc, #84]	; (8013478 <tcp_netif_ip_addr_changed+0x70>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	4619      	mov	r1, r3
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f7ff ffbc 	bl	80133a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801342c:	4b13      	ldr	r3, [pc, #76]	; (801347c <tcp_netif_ip_addr_changed+0x74>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4619      	mov	r1, r3
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f7ff ffb6 	bl	80133a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d017      	beq.n	801346e <tcp_netif_ip_addr_changed+0x66>
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d013      	beq.n	801346e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013446:	4b0e      	ldr	r3, [pc, #56]	; (8013480 <tcp_netif_ip_addr_changed+0x78>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
 801344c:	e00c      	b.n	8013468 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	429a      	cmp	r2, r3
 8013458:	d103      	bne.n	8013462 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	60fb      	str	r3, [r7, #12]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1ef      	bne.n	801344e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801346e:	bf00      	nop
 8013470:	3710      	adds	r7, #16
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
 8013476:	bf00      	nop
 8013478:	2000bdd0 	.word	0x2000bdd0
 801347c:	2000bddc 	.word	0x2000bddc
 8013480:	2000bdd8 	.word	0x2000bdd8

08013484 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b082      	sub	sp, #8
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013490:	2b00      	cmp	r3, #0
 8013492:	d007      	beq.n	80134a4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff fb51 	bl	8012b40 <tcp_segs_free>
    pcb->ooseq = NULL;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2200      	movs	r2, #0
 80134a2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80134a4:	bf00      	nop
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80134ac:	b590      	push	{r4, r7, lr}
 80134ae:	b08d      	sub	sp, #52	; 0x34
 80134b0:	af04      	add	r7, sp, #16
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d105      	bne.n	80134c8 <tcp_input+0x1c>
 80134bc:	4b9b      	ldr	r3, [pc, #620]	; (801372c <tcp_input+0x280>)
 80134be:	2283      	movs	r2, #131	; 0x83
 80134c0:	499b      	ldr	r1, [pc, #620]	; (8013730 <tcp_input+0x284>)
 80134c2:	489c      	ldr	r0, [pc, #624]	; (8013734 <tcp_input+0x288>)
 80134c4:	f008 fa12 	bl	801b8ec <printf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	685b      	ldr	r3, [r3, #4]
 80134cc:	4a9a      	ldr	r2, [pc, #616]	; (8013738 <tcp_input+0x28c>)
 80134ce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	895b      	ldrh	r3, [r3, #10]
 80134d4:	2b13      	cmp	r3, #19
 80134d6:	f240 83c4 	bls.w	8013c62 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80134da:	4b98      	ldr	r3, [pc, #608]	; (801373c <tcp_input+0x290>)
 80134dc:	695b      	ldr	r3, [r3, #20]
 80134de:	4a97      	ldr	r2, [pc, #604]	; (801373c <tcp_input+0x290>)
 80134e0:	6812      	ldr	r2, [r2, #0]
 80134e2:	4611      	mov	r1, r2
 80134e4:	4618      	mov	r0, r3
 80134e6:	f006 fbcb 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	f040 83ba 	bne.w	8013c66 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80134f2:	4b92      	ldr	r3, [pc, #584]	; (801373c <tcp_input+0x290>)
 80134f4:	695b      	ldr	r3, [r3, #20]
 80134f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80134fa:	2be0      	cmp	r3, #224	; 0xe0
 80134fc:	f000 83b3 	beq.w	8013c66 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013500:	4b8d      	ldr	r3, [pc, #564]	; (8013738 <tcp_input+0x28c>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	899b      	ldrh	r3, [r3, #12]
 8013506:	b29b      	uxth	r3, r3
 8013508:	4618      	mov	r0, r3
 801350a:	f7fc facd 	bl	800faa8 <lwip_htons>
 801350e:	4603      	mov	r3, r0
 8013510:	0b1b      	lsrs	r3, r3, #12
 8013512:	b29b      	uxth	r3, r3
 8013514:	b2db      	uxtb	r3, r3
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801351a:	7cbb      	ldrb	r3, [r7, #18]
 801351c:	2b13      	cmp	r3, #19
 801351e:	f240 83a4 	bls.w	8013c6a <tcp_input+0x7be>
 8013522:	7cbb      	ldrb	r3, [r7, #18]
 8013524:	b29a      	uxth	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	891b      	ldrh	r3, [r3, #8]
 801352a:	429a      	cmp	r2, r3
 801352c:	f200 839d 	bhi.w	8013c6a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013530:	7cbb      	ldrb	r3, [r7, #18]
 8013532:	b29b      	uxth	r3, r3
 8013534:	3b14      	subs	r3, #20
 8013536:	b29a      	uxth	r2, r3
 8013538:	4b81      	ldr	r3, [pc, #516]	; (8013740 <tcp_input+0x294>)
 801353a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801353c:	4b81      	ldr	r3, [pc, #516]	; (8013744 <tcp_input+0x298>)
 801353e:	2200      	movs	r2, #0
 8013540:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	895a      	ldrh	r2, [r3, #10]
 8013546:	7cbb      	ldrb	r3, [r7, #18]
 8013548:	b29b      	uxth	r3, r3
 801354a:	429a      	cmp	r2, r3
 801354c:	d309      	bcc.n	8013562 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801354e:	4b7c      	ldr	r3, [pc, #496]	; (8013740 <tcp_input+0x294>)
 8013550:	881a      	ldrh	r2, [r3, #0]
 8013552:	4b7d      	ldr	r3, [pc, #500]	; (8013748 <tcp_input+0x29c>)
 8013554:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013556:	7cbb      	ldrb	r3, [r7, #18]
 8013558:	4619      	mov	r1, r3
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7fd fdda 	bl	8011114 <pbuf_remove_header>
 8013560:	e04e      	b.n	8013600 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d105      	bne.n	8013576 <tcp_input+0xca>
 801356a:	4b70      	ldr	r3, [pc, #448]	; (801372c <tcp_input+0x280>)
 801356c:	22c2      	movs	r2, #194	; 0xc2
 801356e:	4977      	ldr	r1, [pc, #476]	; (801374c <tcp_input+0x2a0>)
 8013570:	4870      	ldr	r0, [pc, #448]	; (8013734 <tcp_input+0x288>)
 8013572:	f008 f9bb 	bl	801b8ec <printf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013576:	2114      	movs	r1, #20
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7fd fdcb 	bl	8011114 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	895a      	ldrh	r2, [r3, #10]
 8013582:	4b71      	ldr	r3, [pc, #452]	; (8013748 <tcp_input+0x29c>)
 8013584:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013586:	4b6e      	ldr	r3, [pc, #440]	; (8013740 <tcp_input+0x294>)
 8013588:	881a      	ldrh	r2, [r3, #0]
 801358a:	4b6f      	ldr	r3, [pc, #444]	; (8013748 <tcp_input+0x29c>)
 801358c:	881b      	ldrh	r3, [r3, #0]
 801358e:	1ad3      	subs	r3, r2, r3
 8013590:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013592:	4b6d      	ldr	r3, [pc, #436]	; (8013748 <tcp_input+0x29c>)
 8013594:	881b      	ldrh	r3, [r3, #0]
 8013596:	4619      	mov	r1, r3
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f7fd fdbb 	bl	8011114 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	895b      	ldrh	r3, [r3, #10]
 80135a4:	8a3a      	ldrh	r2, [r7, #16]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	f200 8361 	bhi.w	8013c6e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	4a64      	ldr	r2, [pc, #400]	; (8013744 <tcp_input+0x298>)
 80135b4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	8a3a      	ldrh	r2, [r7, #16]
 80135bc:	4611      	mov	r1, r2
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fd fda8 	bl	8011114 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	891a      	ldrh	r2, [r3, #8]
 80135c8:	8a3b      	ldrh	r3, [r7, #16]
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	895b      	ldrh	r3, [r3, #10]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d005      	beq.n	80135e6 <tcp_input+0x13a>
 80135da:	4b54      	ldr	r3, [pc, #336]	; (801372c <tcp_input+0x280>)
 80135dc:	22df      	movs	r2, #223	; 0xdf
 80135de:	495c      	ldr	r1, [pc, #368]	; (8013750 <tcp_input+0x2a4>)
 80135e0:	4854      	ldr	r0, [pc, #336]	; (8013734 <tcp_input+0x288>)
 80135e2:	f008 f983 	bl	801b8ec <printf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	891a      	ldrh	r2, [r3, #8]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	891b      	ldrh	r3, [r3, #8]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d005      	beq.n	8013600 <tcp_input+0x154>
 80135f4:	4b4d      	ldr	r3, [pc, #308]	; (801372c <tcp_input+0x280>)
 80135f6:	22e0      	movs	r2, #224	; 0xe0
 80135f8:	4956      	ldr	r1, [pc, #344]	; (8013754 <tcp_input+0x2a8>)
 80135fa:	484e      	ldr	r0, [pc, #312]	; (8013734 <tcp_input+0x288>)
 80135fc:	f008 f976 	bl	801b8ec <printf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013600:	4b4d      	ldr	r3, [pc, #308]	; (8013738 <tcp_input+0x28c>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	b29b      	uxth	r3, r3
 8013608:	4a4b      	ldr	r2, [pc, #300]	; (8013738 <tcp_input+0x28c>)
 801360a:	6814      	ldr	r4, [r2, #0]
 801360c:	4618      	mov	r0, r3
 801360e:	f7fc fa4b 	bl	800faa8 <lwip_htons>
 8013612:	4603      	mov	r3, r0
 8013614:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013616:	4b48      	ldr	r3, [pc, #288]	; (8013738 <tcp_input+0x28c>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	885b      	ldrh	r3, [r3, #2]
 801361c:	b29b      	uxth	r3, r3
 801361e:	4a46      	ldr	r2, [pc, #280]	; (8013738 <tcp_input+0x28c>)
 8013620:	6814      	ldr	r4, [r2, #0]
 8013622:	4618      	mov	r0, r3
 8013624:	f7fc fa40 	bl	800faa8 <lwip_htons>
 8013628:	4603      	mov	r3, r0
 801362a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801362c:	4b42      	ldr	r3, [pc, #264]	; (8013738 <tcp_input+0x28c>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	685b      	ldr	r3, [r3, #4]
 8013632:	4a41      	ldr	r2, [pc, #260]	; (8013738 <tcp_input+0x28c>)
 8013634:	6814      	ldr	r4, [r2, #0]
 8013636:	4618      	mov	r0, r3
 8013638:	f7fc fa4b 	bl	800fad2 <lwip_htonl>
 801363c:	4603      	mov	r3, r0
 801363e:	6063      	str	r3, [r4, #4]
 8013640:	6863      	ldr	r3, [r4, #4]
 8013642:	4a45      	ldr	r2, [pc, #276]	; (8013758 <tcp_input+0x2ac>)
 8013644:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013646:	4b3c      	ldr	r3, [pc, #240]	; (8013738 <tcp_input+0x28c>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	689b      	ldr	r3, [r3, #8]
 801364c:	4a3a      	ldr	r2, [pc, #232]	; (8013738 <tcp_input+0x28c>)
 801364e:	6814      	ldr	r4, [r2, #0]
 8013650:	4618      	mov	r0, r3
 8013652:	f7fc fa3e 	bl	800fad2 <lwip_htonl>
 8013656:	4603      	mov	r3, r0
 8013658:	60a3      	str	r3, [r4, #8]
 801365a:	68a3      	ldr	r3, [r4, #8]
 801365c:	4a3f      	ldr	r2, [pc, #252]	; (801375c <tcp_input+0x2b0>)
 801365e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013660:	4b35      	ldr	r3, [pc, #212]	; (8013738 <tcp_input+0x28c>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	89db      	ldrh	r3, [r3, #14]
 8013666:	b29b      	uxth	r3, r3
 8013668:	4a33      	ldr	r2, [pc, #204]	; (8013738 <tcp_input+0x28c>)
 801366a:	6814      	ldr	r4, [r2, #0]
 801366c:	4618      	mov	r0, r3
 801366e:	f7fc fa1b 	bl	800faa8 <lwip_htons>
 8013672:	4603      	mov	r3, r0
 8013674:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013676:	4b30      	ldr	r3, [pc, #192]	; (8013738 <tcp_input+0x28c>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	899b      	ldrh	r3, [r3, #12]
 801367c:	b29b      	uxth	r3, r3
 801367e:	4618      	mov	r0, r3
 8013680:	f7fc fa12 	bl	800faa8 <lwip_htons>
 8013684:	4603      	mov	r3, r0
 8013686:	b2db      	uxtb	r3, r3
 8013688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801368c:	b2da      	uxtb	r2, r3
 801368e:	4b34      	ldr	r3, [pc, #208]	; (8013760 <tcp_input+0x2b4>)
 8013690:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	891a      	ldrh	r2, [r3, #8]
 8013696:	4b33      	ldr	r3, [pc, #204]	; (8013764 <tcp_input+0x2b8>)
 8013698:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801369a:	4b31      	ldr	r3, [pc, #196]	; (8013760 <tcp_input+0x2b4>)
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	f003 0303 	and.w	r3, r3, #3
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00c      	beq.n	80136c0 <tcp_input+0x214>
    tcplen++;
 80136a6:	4b2f      	ldr	r3, [pc, #188]	; (8013764 <tcp_input+0x2b8>)
 80136a8:	881b      	ldrh	r3, [r3, #0]
 80136aa:	3301      	adds	r3, #1
 80136ac:	b29a      	uxth	r2, r3
 80136ae:	4b2d      	ldr	r3, [pc, #180]	; (8013764 <tcp_input+0x2b8>)
 80136b0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	891a      	ldrh	r2, [r3, #8]
 80136b6:	4b2b      	ldr	r3, [pc, #172]	; (8013764 <tcp_input+0x2b8>)
 80136b8:	881b      	ldrh	r3, [r3, #0]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	f200 82d9 	bhi.w	8013c72 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80136c0:	2300      	movs	r3, #0
 80136c2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80136c4:	4b28      	ldr	r3, [pc, #160]	; (8013768 <tcp_input+0x2bc>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	61fb      	str	r3, [r7, #28]
 80136ca:	e09d      	b.n	8013808 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d105      	bne.n	80136e0 <tcp_input+0x234>
 80136d4:	4b15      	ldr	r3, [pc, #84]	; (801372c <tcp_input+0x280>)
 80136d6:	22fb      	movs	r2, #251	; 0xfb
 80136d8:	4924      	ldr	r1, [pc, #144]	; (801376c <tcp_input+0x2c0>)
 80136da:	4816      	ldr	r0, [pc, #88]	; (8013734 <tcp_input+0x288>)
 80136dc:	f008 f906 	bl	801b8ec <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80136e0:	69fb      	ldr	r3, [r7, #28]
 80136e2:	7d1b      	ldrb	r3, [r3, #20]
 80136e4:	2b0a      	cmp	r3, #10
 80136e6:	d105      	bne.n	80136f4 <tcp_input+0x248>
 80136e8:	4b10      	ldr	r3, [pc, #64]	; (801372c <tcp_input+0x280>)
 80136ea:	22fc      	movs	r2, #252	; 0xfc
 80136ec:	4920      	ldr	r1, [pc, #128]	; (8013770 <tcp_input+0x2c4>)
 80136ee:	4811      	ldr	r0, [pc, #68]	; (8013734 <tcp_input+0x288>)
 80136f0:	f008 f8fc 	bl	801b8ec <printf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80136f4:	69fb      	ldr	r3, [r7, #28]
 80136f6:	7d1b      	ldrb	r3, [r3, #20]
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d105      	bne.n	8013708 <tcp_input+0x25c>
 80136fc:	4b0b      	ldr	r3, [pc, #44]	; (801372c <tcp_input+0x280>)
 80136fe:	22fd      	movs	r2, #253	; 0xfd
 8013700:	491c      	ldr	r1, [pc, #112]	; (8013774 <tcp_input+0x2c8>)
 8013702:	480c      	ldr	r0, [pc, #48]	; (8013734 <tcp_input+0x288>)
 8013704:	f008 f8f2 	bl	801b8ec <printf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	7a1b      	ldrb	r3, [r3, #8]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d033      	beq.n	8013778 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	7a1a      	ldrb	r2, [r3, #8]
 8013714:	4b09      	ldr	r3, [pc, #36]	; (801373c <tcp_input+0x290>)
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801371c:	3301      	adds	r3, #1
 801371e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013720:	429a      	cmp	r2, r3
 8013722:	d029      	beq.n	8013778 <tcp_input+0x2cc>
      prev = pcb;
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	61bb      	str	r3, [r7, #24]
      continue;
 8013728:	e06b      	b.n	8013802 <tcp_input+0x356>
 801372a:	bf00      	nop
 801372c:	08026838 	.word	0x08026838
 8013730:	0802686c 	.word	0x0802686c
 8013734:	08026884 	.word	0x08026884
 8013738:	20004f1c 	.word	0x20004f1c
 801373c:	200086bc 	.word	0x200086bc
 8013740:	20004f20 	.word	0x20004f20
 8013744:	20004f24 	.word	0x20004f24
 8013748:	20004f22 	.word	0x20004f22
 801374c:	080268ac 	.word	0x080268ac
 8013750:	080268bc 	.word	0x080268bc
 8013754:	080268c8 	.word	0x080268c8
 8013758:	20004f2c 	.word	0x20004f2c
 801375c:	20004f30 	.word	0x20004f30
 8013760:	20004f38 	.word	0x20004f38
 8013764:	20004f36 	.word	0x20004f36
 8013768:	2000bdd0 	.word	0x2000bdd0
 801376c:	080268e8 	.word	0x080268e8
 8013770:	08026910 	.word	0x08026910
 8013774:	0802693c 	.word	0x0802693c
    }

    if (pcb->remote_port == tcphdr->src &&
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	8b1a      	ldrh	r2, [r3, #24]
 801377c:	4b94      	ldr	r3, [pc, #592]	; (80139d0 <tcp_input+0x524>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	b29b      	uxth	r3, r3
 8013784:	429a      	cmp	r2, r3
 8013786:	d13a      	bne.n	80137fe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	8ada      	ldrh	r2, [r3, #22]
 801378c:	4b90      	ldr	r3, [pc, #576]	; (80139d0 <tcp_input+0x524>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	885b      	ldrh	r3, [r3, #2]
 8013792:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013794:	429a      	cmp	r2, r3
 8013796:	d132      	bne.n	80137fe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	685a      	ldr	r2, [r3, #4]
 801379c:	4b8d      	ldr	r3, [pc, #564]	; (80139d4 <tcp_input+0x528>)
 801379e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d12c      	bne.n	80137fe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	4b8a      	ldr	r3, [pc, #552]	; (80139d4 <tcp_input+0x528>)
 80137aa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d126      	bne.n	80137fe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	69fa      	ldr	r2, [r7, #28]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d106      	bne.n	80137c8 <tcp_input+0x31c>
 80137ba:	4b87      	ldr	r3, [pc, #540]	; (80139d8 <tcp_input+0x52c>)
 80137bc:	f240 120d 	movw	r2, #269	; 0x10d
 80137c0:	4986      	ldr	r1, [pc, #536]	; (80139dc <tcp_input+0x530>)
 80137c2:	4887      	ldr	r0, [pc, #540]	; (80139e0 <tcp_input+0x534>)
 80137c4:	f008 f892 	bl	801b8ec <printf>
      if (prev != NULL) {
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00a      	beq.n	80137e4 <tcp_input+0x338>
        prev->next = pcb->next;
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	68da      	ldr	r2, [r3, #12]
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80137d6:	4b83      	ldr	r3, [pc, #524]	; (80139e4 <tcp_input+0x538>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	69fb      	ldr	r3, [r7, #28]
 80137dc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80137de:	4a81      	ldr	r2, [pc, #516]	; (80139e4 <tcp_input+0x538>)
 80137e0:	69fb      	ldr	r3, [r7, #28]
 80137e2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	69fa      	ldr	r2, [r7, #28]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d111      	bne.n	8013812 <tcp_input+0x366>
 80137ee:	4b7a      	ldr	r3, [pc, #488]	; (80139d8 <tcp_input+0x52c>)
 80137f0:	f240 1215 	movw	r2, #277	; 0x115
 80137f4:	497c      	ldr	r1, [pc, #496]	; (80139e8 <tcp_input+0x53c>)
 80137f6:	487a      	ldr	r0, [pc, #488]	; (80139e0 <tcp_input+0x534>)
 80137f8:	f008 f878 	bl	801b8ec <printf>
      break;
 80137fc:	e009      	b.n	8013812 <tcp_input+0x366>
    }
    prev = pcb;
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	61fb      	str	r3, [r7, #28]
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	2b00      	cmp	r3, #0
 801380c:	f47f af5e 	bne.w	80136cc <tcp_input+0x220>
 8013810:	e000      	b.n	8013814 <tcp_input+0x368>
      break;
 8013812:	bf00      	nop
  }

  if (pcb == NULL) {
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	2b00      	cmp	r3, #0
 8013818:	f040 8095 	bne.w	8013946 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801381c:	4b73      	ldr	r3, [pc, #460]	; (80139ec <tcp_input+0x540>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	61fb      	str	r3, [r7, #28]
 8013822:	e03f      	b.n	80138a4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	7d1b      	ldrb	r3, [r3, #20]
 8013828:	2b0a      	cmp	r3, #10
 801382a:	d006      	beq.n	801383a <tcp_input+0x38e>
 801382c:	4b6a      	ldr	r3, [pc, #424]	; (80139d8 <tcp_input+0x52c>)
 801382e:	f240 121f 	movw	r2, #287	; 0x11f
 8013832:	496f      	ldr	r1, [pc, #444]	; (80139f0 <tcp_input+0x544>)
 8013834:	486a      	ldr	r0, [pc, #424]	; (80139e0 <tcp_input+0x534>)
 8013836:	f008 f859 	bl	801b8ec <printf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	7a1b      	ldrb	r3, [r3, #8]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d009      	beq.n	8013856 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	7a1a      	ldrb	r2, [r3, #8]
 8013846:	4b63      	ldr	r3, [pc, #396]	; (80139d4 <tcp_input+0x528>)
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801384e:	3301      	adds	r3, #1
 8013850:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013852:	429a      	cmp	r2, r3
 8013854:	d122      	bne.n	801389c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	8b1a      	ldrh	r2, [r3, #24]
 801385a:	4b5d      	ldr	r3, [pc, #372]	; (80139d0 <tcp_input+0x524>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	881b      	ldrh	r3, [r3, #0]
 8013860:	b29b      	uxth	r3, r3
 8013862:	429a      	cmp	r2, r3
 8013864:	d11b      	bne.n	801389e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	8ada      	ldrh	r2, [r3, #22]
 801386a:	4b59      	ldr	r3, [pc, #356]	; (80139d0 <tcp_input+0x524>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	885b      	ldrh	r3, [r3, #2]
 8013870:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013872:	429a      	cmp	r2, r3
 8013874:	d113      	bne.n	801389e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013876:	69fb      	ldr	r3, [r7, #28]
 8013878:	685a      	ldr	r2, [r3, #4]
 801387a:	4b56      	ldr	r3, [pc, #344]	; (80139d4 <tcp_input+0x528>)
 801387c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801387e:	429a      	cmp	r2, r3
 8013880:	d10d      	bne.n	801389e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	4b53      	ldr	r3, [pc, #332]	; (80139d4 <tcp_input+0x528>)
 8013888:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801388a:	429a      	cmp	r2, r3
 801388c:	d107      	bne.n	801389e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801388e:	69f8      	ldr	r0, [r7, #28]
 8013890:	f000 fb54 	bl	8013f3c <tcp_timewait_input>
        }
        pbuf_free(p);
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7fd fcc3 	bl	8011220 <pbuf_free>
        return;
 801389a:	e1f0      	b.n	8013c7e <tcp_input+0x7d2>
        continue;
 801389c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	61fb      	str	r3, [r7, #28]
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d1bc      	bne.n	8013824 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80138aa:	2300      	movs	r3, #0
 80138ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80138ae:	4b51      	ldr	r3, [pc, #324]	; (80139f4 <tcp_input+0x548>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	617b      	str	r3, [r7, #20]
 80138b4:	e02a      	b.n	801390c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	7a1b      	ldrb	r3, [r3, #8]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00c      	beq.n	80138d8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	7a1a      	ldrb	r2, [r3, #8]
 80138c2:	4b44      	ldr	r3, [pc, #272]	; (80139d4 <tcp_input+0x528>)
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80138ca:	3301      	adds	r3, #1
 80138cc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d002      	beq.n	80138d8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	61bb      	str	r3, [r7, #24]
        continue;
 80138d6:	e016      	b.n	8013906 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	8ada      	ldrh	r2, [r3, #22]
 80138dc:	4b3c      	ldr	r3, [pc, #240]	; (80139d0 <tcp_input+0x524>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	885b      	ldrh	r3, [r3, #2]
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d10c      	bne.n	8013902 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	4b39      	ldr	r3, [pc, #228]	; (80139d4 <tcp_input+0x528>)
 80138ee:	695b      	ldr	r3, [r3, #20]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d00f      	beq.n	8013914 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00d      	beq.n	8013916 <tcp_input+0x46a>
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d009      	beq.n	8013916 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	617b      	str	r3, [r7, #20]
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d1d1      	bne.n	80138b6 <tcp_input+0x40a>
 8013912:	e000      	b.n	8013916 <tcp_input+0x46a>
            break;
 8013914:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d014      	beq.n	8013946 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00a      	beq.n	8013938 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	68da      	ldr	r2, [r3, #12]
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801392a:	4b32      	ldr	r3, [pc, #200]	; (80139f4 <tcp_input+0x548>)
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013932:	4a30      	ldr	r2, [pc, #192]	; (80139f4 <tcp_input+0x548>)
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013938:	6978      	ldr	r0, [r7, #20]
 801393a:	f000 fa01 	bl	8013d40 <tcp_listen_input>
      }
      pbuf_free(p);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f7fd fc6e 	bl	8011220 <pbuf_free>
      return;
 8013944:	e19b      	b.n	8013c7e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	2b00      	cmp	r3, #0
 801394a:	f000 8160 	beq.w	8013c0e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801394e:	4b2a      	ldr	r3, [pc, #168]	; (80139f8 <tcp_input+0x54c>)
 8013950:	2200      	movs	r2, #0
 8013952:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	891a      	ldrh	r2, [r3, #8]
 8013958:	4b27      	ldr	r3, [pc, #156]	; (80139f8 <tcp_input+0x54c>)
 801395a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801395c:	4a26      	ldr	r2, [pc, #152]	; (80139f8 <tcp_input+0x54c>)
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013962:	4b1b      	ldr	r3, [pc, #108]	; (80139d0 <tcp_input+0x524>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	4a24      	ldr	r2, [pc, #144]	; (80139f8 <tcp_input+0x54c>)
 8013968:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801396a:	4b24      	ldr	r3, [pc, #144]	; (80139fc <tcp_input+0x550>)
 801396c:	2200      	movs	r2, #0
 801396e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013970:	4b23      	ldr	r3, [pc, #140]	; (8013a00 <tcp_input+0x554>)
 8013972:	2200      	movs	r2, #0
 8013974:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013976:	4b23      	ldr	r3, [pc, #140]	; (8013a04 <tcp_input+0x558>)
 8013978:	2200      	movs	r2, #0
 801397a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801397c:	4b22      	ldr	r3, [pc, #136]	; (8013a08 <tcp_input+0x55c>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	f003 0308 	and.w	r3, r3, #8
 8013984:	2b00      	cmp	r3, #0
 8013986:	d006      	beq.n	8013996 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7b5b      	ldrb	r3, [r3, #13]
 801398c:	f043 0301 	orr.w	r3, r3, #1
 8013990:	b2da      	uxtb	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801399a:	2b00      	cmp	r3, #0
 801399c:	d038      	beq.n	8013a10 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801399e:	69f8      	ldr	r0, [r7, #28]
 80139a0:	f7ff f852 	bl	8012a48 <tcp_process_refused_data>
 80139a4:	4603      	mov	r3, r0
 80139a6:	f113 0f0d 	cmn.w	r3, #13
 80139aa:	d007      	beq.n	80139bc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d02d      	beq.n	8013a10 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80139b4:	4b15      	ldr	r3, [pc, #84]	; (8013a0c <tcp_input+0x560>)
 80139b6:	881b      	ldrh	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d029      	beq.n	8013a10 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f040 8104 	bne.w	8013bce <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80139c6:	69f8      	ldr	r0, [r7, #28]
 80139c8:	f003 fe16 	bl	80175f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80139cc:	e0ff      	b.n	8013bce <tcp_input+0x722>
 80139ce:	bf00      	nop
 80139d0:	20004f1c 	.word	0x20004f1c
 80139d4:	200086bc 	.word	0x200086bc
 80139d8:	08026838 	.word	0x08026838
 80139dc:	08026964 	.word	0x08026964
 80139e0:	08026884 	.word	0x08026884
 80139e4:	2000bdd0 	.word	0x2000bdd0
 80139e8:	08026990 	.word	0x08026990
 80139ec:	2000bde0 	.word	0x2000bde0
 80139f0:	080269bc 	.word	0x080269bc
 80139f4:	2000bdd8 	.word	0x2000bdd8
 80139f8:	20004f0c 	.word	0x20004f0c
 80139fc:	20004f3c 	.word	0x20004f3c
 8013a00:	20004f39 	.word	0x20004f39
 8013a04:	20004f34 	.word	0x20004f34
 8013a08:	20004f38 	.word	0x20004f38
 8013a0c:	20004f36 	.word	0x20004f36
      }
    }
    tcp_input_pcb = pcb;
 8013a10:	4a9c      	ldr	r2, [pc, #624]	; (8013c84 <tcp_input+0x7d8>)
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013a16:	69f8      	ldr	r0, [r7, #28]
 8013a18:	f000 fb0a 	bl	8014030 <tcp_process>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013a20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a24:	f113 0f0d 	cmn.w	r3, #13
 8013a28:	f000 80d3 	beq.w	8013bd2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013a2c:	4b96      	ldr	r3, [pc, #600]	; (8013c88 <tcp_input+0x7dc>)
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	f003 0308 	and.w	r3, r3, #8
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d015      	beq.n	8013a64 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d008      	beq.n	8013a54 <tcp_input+0x5a8>
 8013a42:	69fb      	ldr	r3, [r7, #28]
 8013a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a48:	69fa      	ldr	r2, [r7, #28]
 8013a4a:	6912      	ldr	r2, [r2, #16]
 8013a4c:	f06f 010d 	mvn.w	r1, #13
 8013a50:	4610      	mov	r0, r2
 8013a52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013a54:	69f9      	ldr	r1, [r7, #28]
 8013a56:	488d      	ldr	r0, [pc, #564]	; (8013c8c <tcp_input+0x7e0>)
 8013a58:	f7ff fbb0 	bl	80131bc <tcp_pcb_remove>
        tcp_free(pcb);
 8013a5c:	69f8      	ldr	r0, [r7, #28]
 8013a5e:	f7fd fe9b 	bl	8011798 <tcp_free>
 8013a62:	e0c1      	b.n	8013be8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013a64:	2300      	movs	r3, #0
 8013a66:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013a68:	4b89      	ldr	r3, [pc, #548]	; (8013c90 <tcp_input+0x7e4>)
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d01d      	beq.n	8013aac <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013a70:	4b87      	ldr	r3, [pc, #540]	; (8013c90 <tcp_input+0x7e4>)
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d00a      	beq.n	8013a96 <tcp_input+0x5ea>
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a86:	69fa      	ldr	r2, [r7, #28]
 8013a88:	6910      	ldr	r0, [r2, #16]
 8013a8a:	89fa      	ldrh	r2, [r7, #14]
 8013a8c:	69f9      	ldr	r1, [r7, #28]
 8013a8e:	4798      	blx	r3
 8013a90:	4603      	mov	r3, r0
 8013a92:	74fb      	strb	r3, [r7, #19]
 8013a94:	e001      	b.n	8013a9a <tcp_input+0x5ee>
 8013a96:	2300      	movs	r3, #0
 8013a98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013a9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013a9e:	f113 0f0d 	cmn.w	r3, #13
 8013aa2:	f000 8098 	beq.w	8013bd6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013aa6:	4b7a      	ldr	r3, [pc, #488]	; (8013c90 <tcp_input+0x7e4>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013aac:	69f8      	ldr	r0, [r7, #28]
 8013aae:	f000 f907 	bl	8013cc0 <tcp_input_delayed_close>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f040 8090 	bne.w	8013bda <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013aba:	4b76      	ldr	r3, [pc, #472]	; (8013c94 <tcp_input+0x7e8>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d041      	beq.n	8013b46 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d006      	beq.n	8013ad8 <tcp_input+0x62c>
 8013aca:	4b73      	ldr	r3, [pc, #460]	; (8013c98 <tcp_input+0x7ec>)
 8013acc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013ad0:	4972      	ldr	r1, [pc, #456]	; (8013c9c <tcp_input+0x7f0>)
 8013ad2:	4873      	ldr	r0, [pc, #460]	; (8013ca0 <tcp_input+0x7f4>)
 8013ad4:	f007 ff0a 	bl	801b8ec <printf>
          if (pcb->flags & TF_RXCLOSED) {
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	8b5b      	ldrh	r3, [r3, #26]
 8013adc:	f003 0310 	and.w	r3, r3, #16
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d008      	beq.n	8013af6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013ae4:	4b6b      	ldr	r3, [pc, #428]	; (8013c94 <tcp_input+0x7e8>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fd fb99 	bl	8011220 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013aee:	69f8      	ldr	r0, [r7, #28]
 8013af0:	f7fe f996 	bl	8011e20 <tcp_abort>
            goto aborted;
 8013af4:	e078      	b.n	8013be8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d00c      	beq.n	8013b1a <tcp_input+0x66e>
 8013b00:	69fb      	ldr	r3, [r7, #28]
 8013b02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	6918      	ldr	r0, [r3, #16]
 8013b0a:	4b62      	ldr	r3, [pc, #392]	; (8013c94 <tcp_input+0x7e8>)
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	2300      	movs	r3, #0
 8013b10:	69f9      	ldr	r1, [r7, #28]
 8013b12:	47a0      	blx	r4
 8013b14:	4603      	mov	r3, r0
 8013b16:	74fb      	strb	r3, [r7, #19]
 8013b18:	e008      	b.n	8013b2c <tcp_input+0x680>
 8013b1a:	4b5e      	ldr	r3, [pc, #376]	; (8013c94 <tcp_input+0x7e8>)
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	69f9      	ldr	r1, [r7, #28]
 8013b22:	2000      	movs	r0, #0
 8013b24:	f7ff f884 	bl	8012c30 <tcp_recv_null>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013b2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b30:	f113 0f0d 	cmn.w	r3, #13
 8013b34:	d053      	beq.n	8013bde <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013b36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d003      	beq.n	8013b46 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013b3e:	4b55      	ldr	r3, [pc, #340]	; (8013c94 <tcp_input+0x7e8>)
 8013b40:	681a      	ldr	r2, [r3, #0]
 8013b42:	69fb      	ldr	r3, [r7, #28]
 8013b44:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013b46:	4b50      	ldr	r3, [pc, #320]	; (8013c88 <tcp_input+0x7dc>)
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	f003 0320 	and.w	r3, r3, #32
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d030      	beq.n	8013bb4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d009      	beq.n	8013b6e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b5e:	7b5a      	ldrb	r2, [r3, #13]
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b64:	f042 0220 	orr.w	r2, r2, #32
 8013b68:	b2d2      	uxtb	r2, r2
 8013b6a:	735a      	strb	r2, [r3, #13]
 8013b6c:	e022      	b.n	8013bb4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013b76:	d005      	beq.n	8013b84 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	b29a      	uxth	r2, r3
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d00b      	beq.n	8013ba6 <tcp_input+0x6fa>
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	6918      	ldr	r0, [r3, #16]
 8013b98:	2300      	movs	r3, #0
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	69f9      	ldr	r1, [r7, #28]
 8013b9e:	47a0      	blx	r4
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	74fb      	strb	r3, [r7, #19]
 8013ba4:	e001      	b.n	8013baa <tcp_input+0x6fe>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013baa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013bae:	f113 0f0d 	cmn.w	r3, #13
 8013bb2:	d016      	beq.n	8013be2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013bb4:	4b33      	ldr	r3, [pc, #204]	; (8013c84 <tcp_input+0x7d8>)
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013bba:	69f8      	ldr	r0, [r7, #28]
 8013bbc:	f000 f880 	bl	8013cc0 <tcp_input_delayed_close>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d10f      	bne.n	8013be6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013bc6:	69f8      	ldr	r0, [r7, #28]
 8013bc8:	f002 ff10 	bl	80169ec <tcp_output>
 8013bcc:	e00c      	b.n	8013be8 <tcp_input+0x73c>
        goto aborted;
 8013bce:	bf00      	nop
 8013bd0:	e00a      	b.n	8013be8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013bd2:	bf00      	nop
 8013bd4:	e008      	b.n	8013be8 <tcp_input+0x73c>
              goto aborted;
 8013bd6:	bf00      	nop
 8013bd8:	e006      	b.n	8013be8 <tcp_input+0x73c>
          goto aborted;
 8013bda:	bf00      	nop
 8013bdc:	e004      	b.n	8013be8 <tcp_input+0x73c>
            goto aborted;
 8013bde:	bf00      	nop
 8013be0:	e002      	b.n	8013be8 <tcp_input+0x73c>
              goto aborted;
 8013be2:	bf00      	nop
 8013be4:	e000      	b.n	8013be8 <tcp_input+0x73c>
          goto aborted;
 8013be6:	bf00      	nop
    tcp_input_pcb = NULL;
 8013be8:	4b26      	ldr	r3, [pc, #152]	; (8013c84 <tcp_input+0x7d8>)
 8013bea:	2200      	movs	r2, #0
 8013bec:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013bee:	4b29      	ldr	r3, [pc, #164]	; (8013c94 <tcp_input+0x7e8>)
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013bf4:	4b2b      	ldr	r3, [pc, #172]	; (8013ca4 <tcp_input+0x7f8>)
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d03f      	beq.n	8013c7c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013bfc:	4b29      	ldr	r3, [pc, #164]	; (8013ca4 <tcp_input+0x7f8>)
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f7fd fb0d 	bl	8011220 <pbuf_free>
      inseg.p = NULL;
 8013c06:	4b27      	ldr	r3, [pc, #156]	; (8013ca4 <tcp_input+0x7f8>)
 8013c08:	2200      	movs	r2, #0
 8013c0a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013c0c:	e036      	b.n	8013c7c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013c0e:	4b26      	ldr	r3, [pc, #152]	; (8013ca8 <tcp_input+0x7fc>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	899b      	ldrh	r3, [r3, #12]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fb ff46 	bl	800faa8 <lwip_htons>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	f003 0304 	and.w	r3, r3, #4
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d118      	bne.n	8013c5a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c28:	4b20      	ldr	r3, [pc, #128]	; (8013cac <tcp_input+0x800>)
 8013c2a:	6819      	ldr	r1, [r3, #0]
 8013c2c:	4b20      	ldr	r3, [pc, #128]	; (8013cb0 <tcp_input+0x804>)
 8013c2e:	881b      	ldrh	r3, [r3, #0]
 8013c30:	461a      	mov	r2, r3
 8013c32:	4b20      	ldr	r3, [pc, #128]	; (8013cb4 <tcp_input+0x808>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c38:	4b1b      	ldr	r3, [pc, #108]	; (8013ca8 <tcp_input+0x7fc>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c3c:	885b      	ldrh	r3, [r3, #2]
 8013c3e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c40:	4a19      	ldr	r2, [pc, #100]	; (8013ca8 <tcp_input+0x7fc>)
 8013c42:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c44:	8812      	ldrh	r2, [r2, #0]
 8013c46:	b292      	uxth	r2, r2
 8013c48:	9202      	str	r2, [sp, #8]
 8013c4a:	9301      	str	r3, [sp, #4]
 8013c4c:	4b1a      	ldr	r3, [pc, #104]	; (8013cb8 <tcp_input+0x80c>)
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	4b1a      	ldr	r3, [pc, #104]	; (8013cbc <tcp_input+0x810>)
 8013c52:	4602      	mov	r2, r0
 8013c54:	2000      	movs	r0, #0
 8013c56:	f003 fc7d 	bl	8017554 <tcp_rst>
    pbuf_free(p);
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f7fd fae0 	bl	8011220 <pbuf_free>
  return;
 8013c60:	e00c      	b.n	8013c7c <tcp_input+0x7d0>
    goto dropped;
 8013c62:	bf00      	nop
 8013c64:	e006      	b.n	8013c74 <tcp_input+0x7c8>
    goto dropped;
 8013c66:	bf00      	nop
 8013c68:	e004      	b.n	8013c74 <tcp_input+0x7c8>
    goto dropped;
 8013c6a:	bf00      	nop
 8013c6c:	e002      	b.n	8013c74 <tcp_input+0x7c8>
      goto dropped;
 8013c6e:	bf00      	nop
 8013c70:	e000      	b.n	8013c74 <tcp_input+0x7c8>
      goto dropped;
 8013c72:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7fd fad3 	bl	8011220 <pbuf_free>
 8013c7a:	e000      	b.n	8013c7e <tcp_input+0x7d2>
  return;
 8013c7c:	bf00      	nop
}
 8013c7e:	3724      	adds	r7, #36	; 0x24
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd90      	pop	{r4, r7, pc}
 8013c84:	2000bde4 	.word	0x2000bde4
 8013c88:	20004f39 	.word	0x20004f39
 8013c8c:	2000bdd0 	.word	0x2000bdd0
 8013c90:	20004f34 	.word	0x20004f34
 8013c94:	20004f3c 	.word	0x20004f3c
 8013c98:	08026838 	.word	0x08026838
 8013c9c:	080269ec 	.word	0x080269ec
 8013ca0:	08026884 	.word	0x08026884
 8013ca4:	20004f0c 	.word	0x20004f0c
 8013ca8:	20004f1c 	.word	0x20004f1c
 8013cac:	20004f30 	.word	0x20004f30
 8013cb0:	20004f36 	.word	0x20004f36
 8013cb4:	20004f2c 	.word	0x20004f2c
 8013cb8:	200086cc 	.word	0x200086cc
 8013cbc:	200086d0 	.word	0x200086d0

08013cc0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d106      	bne.n	8013cdc <tcp_input_delayed_close+0x1c>
 8013cce:	4b17      	ldr	r3, [pc, #92]	; (8013d2c <tcp_input_delayed_close+0x6c>)
 8013cd0:	f240 225a 	movw	r2, #602	; 0x25a
 8013cd4:	4916      	ldr	r1, [pc, #88]	; (8013d30 <tcp_input_delayed_close+0x70>)
 8013cd6:	4817      	ldr	r0, [pc, #92]	; (8013d34 <tcp_input_delayed_close+0x74>)
 8013cd8:	f007 fe08 	bl	801b8ec <printf>

  if (recv_flags & TF_CLOSED) {
 8013cdc:	4b16      	ldr	r3, [pc, #88]	; (8013d38 <tcp_input_delayed_close+0x78>)
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	f003 0310 	and.w	r3, r3, #16
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d01c      	beq.n	8013d22 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	8b5b      	ldrh	r3, [r3, #26]
 8013cec:	f003 0310 	and.w	r3, r3, #16
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d10d      	bne.n	8013d10 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d008      	beq.n	8013d10 <tcp_input_delayed_close+0x50>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	6912      	ldr	r2, [r2, #16]
 8013d08:	f06f 010e 	mvn.w	r1, #14
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013d10:	6879      	ldr	r1, [r7, #4]
 8013d12:	480a      	ldr	r0, [pc, #40]	; (8013d3c <tcp_input_delayed_close+0x7c>)
 8013d14:	f7ff fa52 	bl	80131bc <tcp_pcb_remove>
    tcp_free(pcb);
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7fd fd3d 	bl	8011798 <tcp_free>
    return 1;
 8013d1e:	2301      	movs	r3, #1
 8013d20:	e000      	b.n	8013d24 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	08026838 	.word	0x08026838
 8013d30:	08026a08 	.word	0x08026a08
 8013d34:	08026884 	.word	0x08026884
 8013d38:	20004f39 	.word	0x20004f39
 8013d3c:	2000bdd0 	.word	0x2000bdd0

08013d40 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013d40:	b590      	push	{r4, r7, lr}
 8013d42:	b08b      	sub	sp, #44	; 0x2c
 8013d44:	af04      	add	r7, sp, #16
 8013d46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013d48:	4b6f      	ldr	r3, [pc, #444]	; (8013f08 <tcp_listen_input+0x1c8>)
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	f003 0304 	and.w	r3, r3, #4
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f040 80d2 	bne.w	8013efa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d106      	bne.n	8013d6a <tcp_listen_input+0x2a>
 8013d5c:	4b6b      	ldr	r3, [pc, #428]	; (8013f0c <tcp_listen_input+0x1cc>)
 8013d5e:	f240 2281 	movw	r2, #641	; 0x281
 8013d62:	496b      	ldr	r1, [pc, #428]	; (8013f10 <tcp_listen_input+0x1d0>)
 8013d64:	486b      	ldr	r0, [pc, #428]	; (8013f14 <tcp_listen_input+0x1d4>)
 8013d66:	f007 fdc1 	bl	801b8ec <printf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013d6a:	4b67      	ldr	r3, [pc, #412]	; (8013f08 <tcp_listen_input+0x1c8>)
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	f003 0310 	and.w	r3, r3, #16
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d019      	beq.n	8013daa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d76:	4b68      	ldr	r3, [pc, #416]	; (8013f18 <tcp_listen_input+0x1d8>)
 8013d78:	6819      	ldr	r1, [r3, #0]
 8013d7a:	4b68      	ldr	r3, [pc, #416]	; (8013f1c <tcp_listen_input+0x1dc>)
 8013d7c:	881b      	ldrh	r3, [r3, #0]
 8013d7e:	461a      	mov	r2, r3
 8013d80:	4b67      	ldr	r3, [pc, #412]	; (8013f20 <tcp_listen_input+0x1e0>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d86:	4b67      	ldr	r3, [pc, #412]	; (8013f24 <tcp_listen_input+0x1e4>)
 8013d88:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d8a:	885b      	ldrh	r3, [r3, #2]
 8013d8c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d8e:	4a65      	ldr	r2, [pc, #404]	; (8013f24 <tcp_listen_input+0x1e4>)
 8013d90:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d92:	8812      	ldrh	r2, [r2, #0]
 8013d94:	b292      	uxth	r2, r2
 8013d96:	9202      	str	r2, [sp, #8]
 8013d98:	9301      	str	r3, [sp, #4]
 8013d9a:	4b63      	ldr	r3, [pc, #396]	; (8013f28 <tcp_listen_input+0x1e8>)
 8013d9c:	9300      	str	r3, [sp, #0]
 8013d9e:	4b63      	ldr	r3, [pc, #396]	; (8013f2c <tcp_listen_input+0x1ec>)
 8013da0:	4602      	mov	r2, r0
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f003 fbd6 	bl	8017554 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013da8:	e0a9      	b.n	8013efe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013daa:	4b57      	ldr	r3, [pc, #348]	; (8013f08 <tcp_listen_input+0x1c8>)
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	f003 0302 	and.w	r3, r3, #2
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	f000 80a3 	beq.w	8013efe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	7d5b      	ldrb	r3, [r3, #21]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7ff f85b 	bl	8012e78 <tcp_alloc>
 8013dc2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d111      	bne.n	8013dee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	699b      	ldr	r3, [r3, #24]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d00a      	beq.n	8013de8 <tcp_listen_input+0xa8>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	699b      	ldr	r3, [r3, #24]
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	6910      	ldr	r0, [r2, #16]
 8013dda:	f04f 32ff 	mov.w	r2, #4294967295
 8013dde:	2100      	movs	r1, #0
 8013de0:	4798      	blx	r3
 8013de2:	4603      	mov	r3, r0
 8013de4:	73bb      	strb	r3, [r7, #14]
      return;
 8013de6:	e08b      	b.n	8013f00 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013de8:	23f0      	movs	r3, #240	; 0xf0
 8013dea:	73bb      	strb	r3, [r7, #14]
      return;
 8013dec:	e088      	b.n	8013f00 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013dee:	4b50      	ldr	r3, [pc, #320]	; (8013f30 <tcp_listen_input+0x1f0>)
 8013df0:	695a      	ldr	r2, [r3, #20]
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013df6:	4b4e      	ldr	r3, [pc, #312]	; (8013f30 <tcp_listen_input+0x1f0>)
 8013df8:	691a      	ldr	r2, [r3, #16]
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	8ada      	ldrh	r2, [r3, #22]
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013e06:	4b47      	ldr	r3, [pc, #284]	; (8013f24 <tcp_listen_input+0x1e4>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	881b      	ldrh	r3, [r3, #0]
 8013e0c:	b29a      	uxth	r2, r3
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2203      	movs	r2, #3
 8013e16:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013e18:	4b41      	ldr	r3, [pc, #260]	; (8013f20 <tcp_listen_input+0x1e0>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	1c5a      	adds	r2, r3, #1
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013e2a:	6978      	ldr	r0, [r7, #20]
 8013e2c:	f7ff fa5a 	bl	80132e4 <tcp_next_iss>
 8013e30:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	693a      	ldr	r2, [r7, #16]
 8013e36:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	693a      	ldr	r2, [r7, #16]
 8013e3c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	693a      	ldr	r2, [r7, #16]
 8013e42:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	693a      	ldr	r2, [r7, #16]
 8013e48:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013e4a:	4b35      	ldr	r3, [pc, #212]	; (8013f20 <tcp_listen_input+0x1e0>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	1e5a      	subs	r2, r3, #1
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	691a      	ldr	r2, [r3, #16]
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	7a5b      	ldrb	r3, [r3, #9]
 8013e66:	f003 030c 	and.w	r3, r3, #12
 8013e6a:	b2da      	uxtb	r2, r3
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	7a1a      	ldrb	r2, [r3, #8]
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013e78:	4b2e      	ldr	r3, [pc, #184]	; (8013f34 <tcp_listen_input+0x1f4>)
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	60da      	str	r2, [r3, #12]
 8013e80:	4a2c      	ldr	r2, [pc, #176]	; (8013f34 <tcp_listen_input+0x1f4>)
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	6013      	str	r3, [r2, #0]
 8013e86:	f003 fd27 	bl	80178d8 <tcp_timer_needed>
 8013e8a:	4b2b      	ldr	r3, [pc, #172]	; (8013f38 <tcp_listen_input+0x1f8>)
 8013e8c:	2201      	movs	r2, #1
 8013e8e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013e90:	6978      	ldr	r0, [r7, #20]
 8013e92:	f001 fd8d 	bl	80159b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013e96:	4b23      	ldr	r3, [pc, #140]	; (8013f24 <tcp_listen_input+0x1e4>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	89db      	ldrh	r3, [r3, #14]
 8013e9c:	b29a      	uxth	r2, r3
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	3304      	adds	r3, #4
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f005 fc4b 	bl	8019754 <ip4_route>
 8013ebe:	4601      	mov	r1, r0
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f7ff fa32 	bl	8013330 <tcp_eff_send_mss_netif>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	461a      	mov	r2, r3
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013ed4:	2112      	movs	r1, #18
 8013ed6:	6978      	ldr	r0, [r7, #20]
 8013ed8:	f002 fc9a 	bl	8016810 <tcp_enqueue_flags>
 8013edc:	4603      	mov	r3, r0
 8013ede:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d004      	beq.n	8013ef2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013ee8:	2100      	movs	r1, #0
 8013eea:	6978      	ldr	r0, [r7, #20]
 8013eec:	f7fd feda 	bl	8011ca4 <tcp_abandon>
      return;
 8013ef0:	e006      	b.n	8013f00 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013ef2:	6978      	ldr	r0, [r7, #20]
 8013ef4:	f002 fd7a 	bl	80169ec <tcp_output>
  return;
 8013ef8:	e001      	b.n	8013efe <tcp_listen_input+0x1be>
    return;
 8013efa:	bf00      	nop
 8013efc:	e000      	b.n	8013f00 <tcp_listen_input+0x1c0>
  return;
 8013efe:	bf00      	nop
}
 8013f00:	371c      	adds	r7, #28
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd90      	pop	{r4, r7, pc}
 8013f06:	bf00      	nop
 8013f08:	20004f38 	.word	0x20004f38
 8013f0c:	08026838 	.word	0x08026838
 8013f10:	08026a30 	.word	0x08026a30
 8013f14:	08026884 	.word	0x08026884
 8013f18:	20004f30 	.word	0x20004f30
 8013f1c:	20004f36 	.word	0x20004f36
 8013f20:	20004f2c 	.word	0x20004f2c
 8013f24:	20004f1c 	.word	0x20004f1c
 8013f28:	200086cc 	.word	0x200086cc
 8013f2c:	200086d0 	.word	0x200086d0
 8013f30:	200086bc 	.word	0x200086bc
 8013f34:	2000bdd0 	.word	0x2000bdd0
 8013f38:	2000bdcc 	.word	0x2000bdcc

08013f3c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b086      	sub	sp, #24
 8013f40:	af04      	add	r7, sp, #16
 8013f42:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013f44:	4b2f      	ldr	r3, [pc, #188]	; (8014004 <tcp_timewait_input+0xc8>)
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	f003 0304 	and.w	r3, r3, #4
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d153      	bne.n	8013ff8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d106      	bne.n	8013f64 <tcp_timewait_input+0x28>
 8013f56:	4b2c      	ldr	r3, [pc, #176]	; (8014008 <tcp_timewait_input+0xcc>)
 8013f58:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013f5c:	492b      	ldr	r1, [pc, #172]	; (801400c <tcp_timewait_input+0xd0>)
 8013f5e:	482c      	ldr	r0, [pc, #176]	; (8014010 <tcp_timewait_input+0xd4>)
 8013f60:	f007 fcc4 	bl	801b8ec <printf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013f64:	4b27      	ldr	r3, [pc, #156]	; (8014004 <tcp_timewait_input+0xc8>)
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	f003 0302 	and.w	r3, r3, #2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d02a      	beq.n	8013fc6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013f70:	4b28      	ldr	r3, [pc, #160]	; (8014014 <tcp_timewait_input+0xd8>)
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f78:	1ad3      	subs	r3, r2, r3
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	db2d      	blt.n	8013fda <tcp_timewait_input+0x9e>
 8013f7e:	4b25      	ldr	r3, [pc, #148]	; (8014014 <tcp_timewait_input+0xd8>)
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f8a:	440b      	add	r3, r1
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	dc23      	bgt.n	8013fda <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f92:	4b21      	ldr	r3, [pc, #132]	; (8014018 <tcp_timewait_input+0xdc>)
 8013f94:	6819      	ldr	r1, [r3, #0]
 8013f96:	4b21      	ldr	r3, [pc, #132]	; (801401c <tcp_timewait_input+0xe0>)
 8013f98:	881b      	ldrh	r3, [r3, #0]
 8013f9a:	461a      	mov	r2, r3
 8013f9c:	4b1d      	ldr	r3, [pc, #116]	; (8014014 <tcp_timewait_input+0xd8>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fa2:	4b1f      	ldr	r3, [pc, #124]	; (8014020 <tcp_timewait_input+0xe4>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fa6:	885b      	ldrh	r3, [r3, #2]
 8013fa8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013faa:	4a1d      	ldr	r2, [pc, #116]	; (8014020 <tcp_timewait_input+0xe4>)
 8013fac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fae:	8812      	ldrh	r2, [r2, #0]
 8013fb0:	b292      	uxth	r2, r2
 8013fb2:	9202      	str	r2, [sp, #8]
 8013fb4:	9301      	str	r3, [sp, #4]
 8013fb6:	4b1b      	ldr	r3, [pc, #108]	; (8014024 <tcp_timewait_input+0xe8>)
 8013fb8:	9300      	str	r3, [sp, #0]
 8013fba:	4b1b      	ldr	r3, [pc, #108]	; (8014028 <tcp_timewait_input+0xec>)
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f003 fac8 	bl	8017554 <tcp_rst>
      return;
 8013fc4:	e01b      	b.n	8013ffe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013fc6:	4b0f      	ldr	r3, [pc, #60]	; (8014004 <tcp_timewait_input+0xc8>)
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	f003 0301 	and.w	r3, r3, #1
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d003      	beq.n	8013fda <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013fd2:	4b16      	ldr	r3, [pc, #88]	; (801402c <tcp_timewait_input+0xf0>)
 8013fd4:	681a      	ldr	r2, [r3, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013fda:	4b10      	ldr	r3, [pc, #64]	; (801401c <tcp_timewait_input+0xe0>)
 8013fdc:	881b      	ldrh	r3, [r3, #0]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d00c      	beq.n	8013ffc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	8b5b      	ldrh	r3, [r3, #26]
 8013fe6:	f043 0302 	orr.w	r3, r3, #2
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	f002 fcfb 	bl	80169ec <tcp_output>
  }
  return;
 8013ff6:	e001      	b.n	8013ffc <tcp_timewait_input+0xc0>
    return;
 8013ff8:	bf00      	nop
 8013ffa:	e000      	b.n	8013ffe <tcp_timewait_input+0xc2>
  return;
 8013ffc:	bf00      	nop
}
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	20004f38 	.word	0x20004f38
 8014008:	08026838 	.word	0x08026838
 801400c:	08026a50 	.word	0x08026a50
 8014010:	08026884 	.word	0x08026884
 8014014:	20004f2c 	.word	0x20004f2c
 8014018:	20004f30 	.word	0x20004f30
 801401c:	20004f36 	.word	0x20004f36
 8014020:	20004f1c 	.word	0x20004f1c
 8014024:	200086cc 	.word	0x200086cc
 8014028:	200086d0 	.word	0x200086d0
 801402c:	2000bdd4 	.word	0x2000bdd4

08014030 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014030:	b590      	push	{r4, r7, lr}
 8014032:	b08d      	sub	sp, #52	; 0x34
 8014034:	af04      	add	r7, sp, #16
 8014036:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014038:	2300      	movs	r3, #0
 801403a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801403c:	2300      	movs	r3, #0
 801403e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d106      	bne.n	8014054 <tcp_process+0x24>
 8014046:	4ba5      	ldr	r3, [pc, #660]	; (80142dc <tcp_process+0x2ac>)
 8014048:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801404c:	49a4      	ldr	r1, [pc, #656]	; (80142e0 <tcp_process+0x2b0>)
 801404e:	48a5      	ldr	r0, [pc, #660]	; (80142e4 <tcp_process+0x2b4>)
 8014050:	f007 fc4c 	bl	801b8ec <printf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014054:	4ba4      	ldr	r3, [pc, #656]	; (80142e8 <tcp_process+0x2b8>)
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	f003 0304 	and.w	r3, r3, #4
 801405c:	2b00      	cmp	r3, #0
 801405e:	d04e      	beq.n	80140fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	7d1b      	ldrb	r3, [r3, #20]
 8014064:	2b02      	cmp	r3, #2
 8014066:	d108      	bne.n	801407a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801406c:	4b9f      	ldr	r3, [pc, #636]	; (80142ec <tcp_process+0x2bc>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	429a      	cmp	r2, r3
 8014072:	d123      	bne.n	80140bc <tcp_process+0x8c>
        acceptable = 1;
 8014074:	2301      	movs	r3, #1
 8014076:	76fb      	strb	r3, [r7, #27]
 8014078:	e020      	b.n	80140bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801407e:	4b9c      	ldr	r3, [pc, #624]	; (80142f0 <tcp_process+0x2c0>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	429a      	cmp	r2, r3
 8014084:	d102      	bne.n	801408c <tcp_process+0x5c>
        acceptable = 1;
 8014086:	2301      	movs	r3, #1
 8014088:	76fb      	strb	r3, [r7, #27]
 801408a:	e017      	b.n	80140bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801408c:	4b98      	ldr	r3, [pc, #608]	; (80142f0 <tcp_process+0x2c0>)
 801408e:	681a      	ldr	r2, [r3, #0]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014094:	1ad3      	subs	r3, r2, r3
 8014096:	2b00      	cmp	r3, #0
 8014098:	db10      	blt.n	80140bc <tcp_process+0x8c>
 801409a:	4b95      	ldr	r3, [pc, #596]	; (80142f0 <tcp_process+0x2c0>)
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a2:	6879      	ldr	r1, [r7, #4]
 80140a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140a6:	440b      	add	r3, r1
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	dc06      	bgt.n	80140bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	8b5b      	ldrh	r3, [r3, #26]
 80140b2:	f043 0302 	orr.w	r3, r3, #2
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80140bc:	7efb      	ldrb	r3, [r7, #27]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d01b      	beq.n	80140fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	7d1b      	ldrb	r3, [r3, #20]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d106      	bne.n	80140d8 <tcp_process+0xa8>
 80140ca:	4b84      	ldr	r3, [pc, #528]	; (80142dc <tcp_process+0x2ac>)
 80140cc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80140d0:	4988      	ldr	r1, [pc, #544]	; (80142f4 <tcp_process+0x2c4>)
 80140d2:	4884      	ldr	r0, [pc, #528]	; (80142e4 <tcp_process+0x2b4>)
 80140d4:	f007 fc0a 	bl	801b8ec <printf>
      recv_flags |= TF_RESET;
 80140d8:	4b87      	ldr	r3, [pc, #540]	; (80142f8 <tcp_process+0x2c8>)
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	f043 0308 	orr.w	r3, r3, #8
 80140e0:	b2da      	uxtb	r2, r3
 80140e2:	4b85      	ldr	r3, [pc, #532]	; (80142f8 <tcp_process+0x2c8>)
 80140e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	8b5b      	ldrh	r3, [r3, #26]
 80140ea:	f023 0301 	bic.w	r3, r3, #1
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80140f4:	f06f 030d 	mvn.w	r3, #13
 80140f8:	e37a      	b.n	80147f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80140fa:	2300      	movs	r3, #0
 80140fc:	e378      	b.n	80147f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80140fe:	4b7a      	ldr	r3, [pc, #488]	; (80142e8 <tcp_process+0x2b8>)
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	f003 0302 	and.w	r3, r3, #2
 8014106:	2b00      	cmp	r3, #0
 8014108:	d010      	beq.n	801412c <tcp_process+0xfc>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	7d1b      	ldrb	r3, [r3, #20]
 801410e:	2b02      	cmp	r3, #2
 8014110:	d00c      	beq.n	801412c <tcp_process+0xfc>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	7d1b      	ldrb	r3, [r3, #20]
 8014116:	2b03      	cmp	r3, #3
 8014118:	d008      	beq.n	801412c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	8b5b      	ldrh	r3, [r3, #26]
 801411e:	f043 0302 	orr.w	r3, r3, #2
 8014122:	b29a      	uxth	r2, r3
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014128:	2300      	movs	r3, #0
 801412a:	e361      	b.n	80147f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	8b5b      	ldrh	r3, [r3, #26]
 8014130:	f003 0310 	and.w	r3, r3, #16
 8014134:	2b00      	cmp	r3, #0
 8014136:	d103      	bne.n	8014140 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014138:	4b70      	ldr	r3, [pc, #448]	; (80142fc <tcp_process+0x2cc>)
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2200      	movs	r2, #0
 8014144:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2200      	movs	r2, #0
 801414c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f001 fc2d 	bl	80159b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	7d1b      	ldrb	r3, [r3, #20]
 801415a:	3b02      	subs	r3, #2
 801415c:	2b07      	cmp	r3, #7
 801415e:	f200 8337 	bhi.w	80147d0 <tcp_process+0x7a0>
 8014162:	a201      	add	r2, pc, #4	; (adr r2, 8014168 <tcp_process+0x138>)
 8014164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014168:	08014189 	.word	0x08014189
 801416c:	080143b9 	.word	0x080143b9
 8014170:	08014531 	.word	0x08014531
 8014174:	0801455b 	.word	0x0801455b
 8014178:	0801467f 	.word	0x0801467f
 801417c:	08014531 	.word	0x08014531
 8014180:	0801470b 	.word	0x0801470b
 8014184:	0801479b 	.word	0x0801479b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014188:	4b57      	ldr	r3, [pc, #348]	; (80142e8 <tcp_process+0x2b8>)
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	f003 0310 	and.w	r3, r3, #16
 8014190:	2b00      	cmp	r3, #0
 8014192:	f000 80e4 	beq.w	801435e <tcp_process+0x32e>
 8014196:	4b54      	ldr	r3, [pc, #336]	; (80142e8 <tcp_process+0x2b8>)
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	f003 0302 	and.w	r3, r3, #2
 801419e:	2b00      	cmp	r3, #0
 80141a0:	f000 80dd 	beq.w	801435e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141a8:	1c5a      	adds	r2, r3, #1
 80141aa:	4b50      	ldr	r3, [pc, #320]	; (80142ec <tcp_process+0x2bc>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	f040 80d5 	bne.w	801435e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80141b4:	4b4e      	ldr	r3, [pc, #312]	; (80142f0 <tcp_process+0x2c0>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	1c5a      	adds	r2, r3, #1
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80141c6:	4b49      	ldr	r3, [pc, #292]	; (80142ec <tcp_process+0x2bc>)
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80141ce:	4b4c      	ldr	r3, [pc, #304]	; (8014300 <tcp_process+0x2d0>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	89db      	ldrh	r3, [r3, #14]
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80141e8:	4b41      	ldr	r3, [pc, #260]	; (80142f0 <tcp_process+0x2c0>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	1e5a      	subs	r2, r3, #1
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2204      	movs	r2, #4
 80141f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	3304      	adds	r3, #4
 8014200:	4618      	mov	r0, r3
 8014202:	f005 faa7 	bl	8019754 <ip4_route>
 8014206:	4601      	mov	r1, r0
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3304      	adds	r3, #4
 801420c:	461a      	mov	r2, r3
 801420e:	4620      	mov	r0, r4
 8014210:	f7ff f88e 	bl	8013330 <tcp_eff_send_mss_netif>
 8014214:	4603      	mov	r3, r0
 8014216:	461a      	mov	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014220:	009a      	lsls	r2, r3, #2
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014226:	005b      	lsls	r3, r3, #1
 8014228:	f241 111c 	movw	r1, #4380	; 0x111c
 801422c:	428b      	cmp	r3, r1
 801422e:	bf38      	it	cc
 8014230:	460b      	movcc	r3, r1
 8014232:	429a      	cmp	r2, r3
 8014234:	d204      	bcs.n	8014240 <tcp_process+0x210>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	b29b      	uxth	r3, r3
 801423e:	e00d      	b.n	801425c <tcp_process+0x22c>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014244:	005b      	lsls	r3, r3, #1
 8014246:	f241 121c 	movw	r2, #4380	; 0x111c
 801424a:	4293      	cmp	r3, r2
 801424c:	d904      	bls.n	8014258 <tcp_process+0x228>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	b29b      	uxth	r3, r3
 8014256:	e001      	b.n	801425c <tcp_process+0x22c>
 8014258:	f241 131c 	movw	r3, #4380	; 0x111c
 801425c:	687a      	ldr	r2, [r7, #4]
 801425e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014268:	2b00      	cmp	r3, #0
 801426a:	d106      	bne.n	801427a <tcp_process+0x24a>
 801426c:	4b1b      	ldr	r3, [pc, #108]	; (80142dc <tcp_process+0x2ac>)
 801426e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014272:	4924      	ldr	r1, [pc, #144]	; (8014304 <tcp_process+0x2d4>)
 8014274:	481b      	ldr	r0, [pc, #108]	; (80142e4 <tcp_process+0x2b4>)
 8014276:	f007 fb39 	bl	801b8ec <printf>
        --pcb->snd_queuelen;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014280:	3b01      	subs	r3, #1
 8014282:	b29a      	uxth	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801428e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d111      	bne.n	80142ba <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801429a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801429c:	69fb      	ldr	r3, [r7, #28]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d106      	bne.n	80142b0 <tcp_process+0x280>
 80142a2:	4b0e      	ldr	r3, [pc, #56]	; (80142dc <tcp_process+0x2ac>)
 80142a4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80142a8:	4917      	ldr	r1, [pc, #92]	; (8014308 <tcp_process+0x2d8>)
 80142aa:	480e      	ldr	r0, [pc, #56]	; (80142e4 <tcp_process+0x2b4>)
 80142ac:	f007 fb1e 	bl	801b8ec <printf>
          pcb->unsent = rseg->next;
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80142b8:	e003      	b.n	80142c2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80142ba:	69fb      	ldr	r3, [r7, #28]
 80142bc:	681a      	ldr	r2, [r3, #0]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80142c2:	69f8      	ldr	r0, [r7, #28]
 80142c4:	f7fe fc51 	bl	8012b6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d11d      	bne.n	801430c <tcp_process+0x2dc>
          pcb->rtime = -1;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142d6:	861a      	strh	r2, [r3, #48]	; 0x30
 80142d8:	e01f      	b.n	801431a <tcp_process+0x2ea>
 80142da:	bf00      	nop
 80142dc:	08026838 	.word	0x08026838
 80142e0:	08026a70 	.word	0x08026a70
 80142e4:	08026884 	.word	0x08026884
 80142e8:	20004f38 	.word	0x20004f38
 80142ec:	20004f30 	.word	0x20004f30
 80142f0:	20004f2c 	.word	0x20004f2c
 80142f4:	08026a8c 	.word	0x08026a8c
 80142f8:	20004f39 	.word	0x20004f39
 80142fc:	2000bdd4 	.word	0x2000bdd4
 8014300:	20004f1c 	.word	0x20004f1c
 8014304:	08026aac 	.word	0x08026aac
 8014308:	08026ac4 	.word	0x08026ac4
        } else {
          pcb->rtime = 0;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2200      	movs	r2, #0
 8014310:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2200      	movs	r2, #0
 8014316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014320:	2b00      	cmp	r3, #0
 8014322:	d00a      	beq.n	801433a <tcp_process+0x30a>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	6910      	ldr	r0, [r2, #16]
 801432e:	2200      	movs	r2, #0
 8014330:	6879      	ldr	r1, [r7, #4]
 8014332:	4798      	blx	r3
 8014334:	4603      	mov	r3, r0
 8014336:	76bb      	strb	r3, [r7, #26]
 8014338:	e001      	b.n	801433e <tcp_process+0x30e>
 801433a:	2300      	movs	r3, #0
 801433c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801433e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014342:	f113 0f0d 	cmn.w	r3, #13
 8014346:	d102      	bne.n	801434e <tcp_process+0x31e>
          return ERR_ABRT;
 8014348:	f06f 030c 	mvn.w	r3, #12
 801434c:	e250      	b.n	80147f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	8b5b      	ldrh	r3, [r3, #26]
 8014352:	f043 0302 	orr.w	r3, r3, #2
 8014356:	b29a      	uxth	r2, r3
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801435c:	e23a      	b.n	80147d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801435e:	4b9d      	ldr	r3, [pc, #628]	; (80145d4 <tcp_process+0x5a4>)
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	f003 0310 	and.w	r3, r3, #16
 8014366:	2b00      	cmp	r3, #0
 8014368:	f000 8234 	beq.w	80147d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801436c:	4b9a      	ldr	r3, [pc, #616]	; (80145d8 <tcp_process+0x5a8>)
 801436e:	6819      	ldr	r1, [r3, #0]
 8014370:	4b9a      	ldr	r3, [pc, #616]	; (80145dc <tcp_process+0x5ac>)
 8014372:	881b      	ldrh	r3, [r3, #0]
 8014374:	461a      	mov	r2, r3
 8014376:	4b9a      	ldr	r3, [pc, #616]	; (80145e0 <tcp_process+0x5b0>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801437c:	4b99      	ldr	r3, [pc, #612]	; (80145e4 <tcp_process+0x5b4>)
 801437e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014380:	885b      	ldrh	r3, [r3, #2]
 8014382:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014384:	4a97      	ldr	r2, [pc, #604]	; (80145e4 <tcp_process+0x5b4>)
 8014386:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014388:	8812      	ldrh	r2, [r2, #0]
 801438a:	b292      	uxth	r2, r2
 801438c:	9202      	str	r2, [sp, #8]
 801438e:	9301      	str	r3, [sp, #4]
 8014390:	4b95      	ldr	r3, [pc, #596]	; (80145e8 <tcp_process+0x5b8>)
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	4b95      	ldr	r3, [pc, #596]	; (80145ec <tcp_process+0x5bc>)
 8014396:	4602      	mov	r2, r0
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f003 f8db 	bl	8017554 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143a4:	2b05      	cmp	r3, #5
 80143a6:	f200 8215 	bhi.w	80147d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2200      	movs	r2, #0
 80143ae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f002 fea5 	bl	8017100 <tcp_rexmit_rto>
      break;
 80143b6:	e20d      	b.n	80147d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80143b8:	4b86      	ldr	r3, [pc, #536]	; (80145d4 <tcp_process+0x5a4>)
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	f003 0310 	and.w	r3, r3, #16
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 80a1 	beq.w	8014508 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143c6:	4b84      	ldr	r3, [pc, #528]	; (80145d8 <tcp_process+0x5a8>)
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	3b01      	subs	r3, #1
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	db7e      	blt.n	80144d4 <tcp_process+0x4a4>
 80143d6:	4b80      	ldr	r3, [pc, #512]	; (80145d8 <tcp_process+0x5a8>)
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80143de:	1ad3      	subs	r3, r2, r3
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	dc77      	bgt.n	80144d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2204      	movs	r2, #4
 80143e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d102      	bne.n	80143f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80143f2:	23fa      	movs	r3, #250	; 0xfa
 80143f4:	76bb      	strb	r3, [r7, #26]
 80143f6:	e01d      	b.n	8014434 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143fc:	699b      	ldr	r3, [r3, #24]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d106      	bne.n	8014410 <tcp_process+0x3e0>
 8014402:	4b7b      	ldr	r3, [pc, #492]	; (80145f0 <tcp_process+0x5c0>)
 8014404:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014408:	497a      	ldr	r1, [pc, #488]	; (80145f4 <tcp_process+0x5c4>)
 801440a:	487b      	ldr	r0, [pc, #492]	; (80145f8 <tcp_process+0x5c8>)
 801440c:	f007 fa6e 	bl	801b8ec <printf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014414:	699b      	ldr	r3, [r3, #24]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d00a      	beq.n	8014430 <tcp_process+0x400>
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801441e:	699b      	ldr	r3, [r3, #24]
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	6910      	ldr	r0, [r2, #16]
 8014424:	2200      	movs	r2, #0
 8014426:	6879      	ldr	r1, [r7, #4]
 8014428:	4798      	blx	r3
 801442a:	4603      	mov	r3, r0
 801442c:	76bb      	strb	r3, [r7, #26]
 801442e:	e001      	b.n	8014434 <tcp_process+0x404>
 8014430:	23f0      	movs	r3, #240	; 0xf0
 8014432:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014434:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d00a      	beq.n	8014452 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801443c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014440:	f113 0f0d 	cmn.w	r3, #13
 8014444:	d002      	beq.n	801444c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f7fd fcea 	bl	8011e20 <tcp_abort>
            }
            return ERR_ABRT;
 801444c:	f06f 030c 	mvn.w	r3, #12
 8014450:	e1ce      	b.n	80147f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 fae0 	bl	8014a18 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014458:	4b68      	ldr	r3, [pc, #416]	; (80145fc <tcp_process+0x5cc>)
 801445a:	881b      	ldrh	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d005      	beq.n	801446c <tcp_process+0x43c>
            recv_acked--;
 8014460:	4b66      	ldr	r3, [pc, #408]	; (80145fc <tcp_process+0x5cc>)
 8014462:	881b      	ldrh	r3, [r3, #0]
 8014464:	3b01      	subs	r3, #1
 8014466:	b29a      	uxth	r2, r3
 8014468:	4b64      	ldr	r3, [pc, #400]	; (80145fc <tcp_process+0x5cc>)
 801446a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014470:	009a      	lsls	r2, r3, #2
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014476:	005b      	lsls	r3, r3, #1
 8014478:	f241 111c 	movw	r1, #4380	; 0x111c
 801447c:	428b      	cmp	r3, r1
 801447e:	bf38      	it	cc
 8014480:	460b      	movcc	r3, r1
 8014482:	429a      	cmp	r2, r3
 8014484:	d204      	bcs.n	8014490 <tcp_process+0x460>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	b29b      	uxth	r3, r3
 801448e:	e00d      	b.n	80144ac <tcp_process+0x47c>
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014494:	005b      	lsls	r3, r3, #1
 8014496:	f241 121c 	movw	r2, #4380	; 0x111c
 801449a:	4293      	cmp	r3, r2
 801449c:	d904      	bls.n	80144a8 <tcp_process+0x478>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	e001      	b.n	80144ac <tcp_process+0x47c>
 80144a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80144b2:	4b53      	ldr	r3, [pc, #332]	; (8014600 <tcp_process+0x5d0>)
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	f003 0320 	and.w	r3, r3, #32
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d037      	beq.n	801452e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8b5b      	ldrh	r3, [r3, #26]
 80144c2:	f043 0302 	orr.w	r3, r3, #2
 80144c6:	b29a      	uxth	r2, r3
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2207      	movs	r2, #7
 80144d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80144d2:	e02c      	b.n	801452e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144d4:	4b40      	ldr	r3, [pc, #256]	; (80145d8 <tcp_process+0x5a8>)
 80144d6:	6819      	ldr	r1, [r3, #0]
 80144d8:	4b40      	ldr	r3, [pc, #256]	; (80145dc <tcp_process+0x5ac>)
 80144da:	881b      	ldrh	r3, [r3, #0]
 80144dc:	461a      	mov	r2, r3
 80144de:	4b40      	ldr	r3, [pc, #256]	; (80145e0 <tcp_process+0x5b0>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144e4:	4b3f      	ldr	r3, [pc, #252]	; (80145e4 <tcp_process+0x5b4>)
 80144e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144e8:	885b      	ldrh	r3, [r3, #2]
 80144ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144ec:	4a3d      	ldr	r2, [pc, #244]	; (80145e4 <tcp_process+0x5b4>)
 80144ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144f0:	8812      	ldrh	r2, [r2, #0]
 80144f2:	b292      	uxth	r2, r2
 80144f4:	9202      	str	r2, [sp, #8]
 80144f6:	9301      	str	r3, [sp, #4]
 80144f8:	4b3b      	ldr	r3, [pc, #236]	; (80145e8 <tcp_process+0x5b8>)
 80144fa:	9300      	str	r3, [sp, #0]
 80144fc:	4b3b      	ldr	r3, [pc, #236]	; (80145ec <tcp_process+0x5bc>)
 80144fe:	4602      	mov	r2, r0
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f003 f827 	bl	8017554 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014506:	e167      	b.n	80147d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014508:	4b32      	ldr	r3, [pc, #200]	; (80145d4 <tcp_process+0x5a4>)
 801450a:	781b      	ldrb	r3, [r3, #0]
 801450c:	f003 0302 	and.w	r3, r3, #2
 8014510:	2b00      	cmp	r3, #0
 8014512:	f000 8161 	beq.w	80147d8 <tcp_process+0x7a8>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801451a:	1e5a      	subs	r2, r3, #1
 801451c:	4b30      	ldr	r3, [pc, #192]	; (80145e0 <tcp_process+0x5b0>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	429a      	cmp	r2, r3
 8014522:	f040 8159 	bne.w	80147d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f002 fe0c 	bl	8017144 <tcp_rexmit>
      break;
 801452c:	e154      	b.n	80147d8 <tcp_process+0x7a8>
 801452e:	e153      	b.n	80147d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f000 fa71 	bl	8014a18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014536:	4b32      	ldr	r3, [pc, #200]	; (8014600 <tcp_process+0x5d0>)
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	f003 0320 	and.w	r3, r3, #32
 801453e:	2b00      	cmp	r3, #0
 8014540:	f000 814c 	beq.w	80147dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	8b5b      	ldrh	r3, [r3, #26]
 8014548:	f043 0302 	orr.w	r3, r3, #2
 801454c:	b29a      	uxth	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2207      	movs	r2, #7
 8014556:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014558:	e140      	b.n	80147dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 fa5c 	bl	8014a18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014560:	4b27      	ldr	r3, [pc, #156]	; (8014600 <tcp_process+0x5d0>)
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	f003 0320 	and.w	r3, r3, #32
 8014568:	2b00      	cmp	r3, #0
 801456a:	d071      	beq.n	8014650 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801456c:	4b19      	ldr	r3, [pc, #100]	; (80145d4 <tcp_process+0x5a4>)
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	f003 0310 	and.w	r3, r3, #16
 8014574:	2b00      	cmp	r3, #0
 8014576:	d060      	beq.n	801463a <tcp_process+0x60a>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801457c:	4b16      	ldr	r3, [pc, #88]	; (80145d8 <tcp_process+0x5a8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	429a      	cmp	r2, r3
 8014582:	d15a      	bne.n	801463a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014588:	2b00      	cmp	r3, #0
 801458a:	d156      	bne.n	801463a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	8b5b      	ldrh	r3, [r3, #26]
 8014590:	f043 0302 	orr.w	r3, r3, #2
 8014594:	b29a      	uxth	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f7fe fdbe 	bl	801311c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80145a0:	4b18      	ldr	r3, [pc, #96]	; (8014604 <tcp_process+0x5d4>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	687a      	ldr	r2, [r7, #4]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d105      	bne.n	80145b6 <tcp_process+0x586>
 80145aa:	4b16      	ldr	r3, [pc, #88]	; (8014604 <tcp_process+0x5d4>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	4a14      	ldr	r2, [pc, #80]	; (8014604 <tcp_process+0x5d4>)
 80145b2:	6013      	str	r3, [r2, #0]
 80145b4:	e02e      	b.n	8014614 <tcp_process+0x5e4>
 80145b6:	4b13      	ldr	r3, [pc, #76]	; (8014604 <tcp_process+0x5d4>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	617b      	str	r3, [r7, #20]
 80145bc:	e027      	b.n	801460e <tcp_process+0x5de>
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	68db      	ldr	r3, [r3, #12]
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d11f      	bne.n	8014608 <tcp_process+0x5d8>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	68da      	ldr	r2, [r3, #12]
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	60da      	str	r2, [r3, #12]
 80145d0:	e020      	b.n	8014614 <tcp_process+0x5e4>
 80145d2:	bf00      	nop
 80145d4:	20004f38 	.word	0x20004f38
 80145d8:	20004f30 	.word	0x20004f30
 80145dc:	20004f36 	.word	0x20004f36
 80145e0:	20004f2c 	.word	0x20004f2c
 80145e4:	20004f1c 	.word	0x20004f1c
 80145e8:	200086cc 	.word	0x200086cc
 80145ec:	200086d0 	.word	0x200086d0
 80145f0:	08026838 	.word	0x08026838
 80145f4:	08026ad8 	.word	0x08026ad8
 80145f8:	08026884 	.word	0x08026884
 80145fc:	20004f34 	.word	0x20004f34
 8014600:	20004f39 	.word	0x20004f39
 8014604:	2000bdd0 	.word	0x2000bdd0
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	617b      	str	r3, [r7, #20]
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d1d4      	bne.n	80145be <tcp_process+0x58e>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2200      	movs	r2, #0
 8014618:	60da      	str	r2, [r3, #12]
 801461a:	4b77      	ldr	r3, [pc, #476]	; (80147f8 <tcp_process+0x7c8>)
 801461c:	2201      	movs	r2, #1
 801461e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	220a      	movs	r2, #10
 8014624:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014626:	4b75      	ldr	r3, [pc, #468]	; (80147fc <tcp_process+0x7cc>)
 8014628:	681a      	ldr	r2, [r3, #0]
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	60da      	str	r2, [r3, #12]
 801462e:	4a73      	ldr	r2, [pc, #460]	; (80147fc <tcp_process+0x7cc>)
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6013      	str	r3, [r2, #0]
 8014634:	f003 f950 	bl	80178d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014638:	e0d2      	b.n	80147e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	8b5b      	ldrh	r3, [r3, #26]
 801463e:	f043 0302 	orr.w	r3, r3, #2
 8014642:	b29a      	uxth	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2208      	movs	r2, #8
 801464c:	751a      	strb	r2, [r3, #20]
      break;
 801464e:	e0c7      	b.n	80147e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014650:	4b6b      	ldr	r3, [pc, #428]	; (8014800 <tcp_process+0x7d0>)
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	f003 0310 	and.w	r3, r3, #16
 8014658:	2b00      	cmp	r3, #0
 801465a:	f000 80c1 	beq.w	80147e0 <tcp_process+0x7b0>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014662:	4b68      	ldr	r3, [pc, #416]	; (8014804 <tcp_process+0x7d4>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	429a      	cmp	r2, r3
 8014668:	f040 80ba 	bne.w	80147e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014670:	2b00      	cmp	r3, #0
 8014672:	f040 80b5 	bne.w	80147e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2206      	movs	r2, #6
 801467a:	751a      	strb	r2, [r3, #20]
      break;
 801467c:	e0b0      	b.n	80147e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801467e:	6878      	ldr	r0, [r7, #4]
 8014680:	f000 f9ca 	bl	8014a18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014684:	4b60      	ldr	r3, [pc, #384]	; (8014808 <tcp_process+0x7d8>)
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	f003 0320 	and.w	r3, r3, #32
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 80a9 	beq.w	80147e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	8b5b      	ldrh	r3, [r3, #26]
 8014696:	f043 0302 	orr.w	r3, r3, #2
 801469a:	b29a      	uxth	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7fe fd3b 	bl	801311c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80146a6:	4b59      	ldr	r3, [pc, #356]	; (801480c <tcp_process+0x7dc>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d105      	bne.n	80146bc <tcp_process+0x68c>
 80146b0:	4b56      	ldr	r3, [pc, #344]	; (801480c <tcp_process+0x7dc>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	4a55      	ldr	r2, [pc, #340]	; (801480c <tcp_process+0x7dc>)
 80146b8:	6013      	str	r3, [r2, #0]
 80146ba:	e013      	b.n	80146e4 <tcp_process+0x6b4>
 80146bc:	4b53      	ldr	r3, [pc, #332]	; (801480c <tcp_process+0x7dc>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	613b      	str	r3, [r7, #16]
 80146c2:	e00c      	b.n	80146de <tcp_process+0x6ae>
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d104      	bne.n	80146d8 <tcp_process+0x6a8>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	68da      	ldr	r2, [r3, #12]
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	60da      	str	r2, [r3, #12]
 80146d6:	e005      	b.n	80146e4 <tcp_process+0x6b4>
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	613b      	str	r3, [r7, #16]
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1ef      	bne.n	80146c4 <tcp_process+0x694>
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2200      	movs	r2, #0
 80146e8:	60da      	str	r2, [r3, #12]
 80146ea:	4b43      	ldr	r3, [pc, #268]	; (80147f8 <tcp_process+0x7c8>)
 80146ec:	2201      	movs	r2, #1
 80146ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	220a      	movs	r2, #10
 80146f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80146f6:	4b41      	ldr	r3, [pc, #260]	; (80147fc <tcp_process+0x7cc>)
 80146f8:	681a      	ldr	r2, [r3, #0]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	60da      	str	r2, [r3, #12]
 80146fe:	4a3f      	ldr	r2, [pc, #252]	; (80147fc <tcp_process+0x7cc>)
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6013      	str	r3, [r2, #0]
 8014704:	f003 f8e8 	bl	80178d8 <tcp_timer_needed>
      }
      break;
 8014708:	e06c      	b.n	80147e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 f984 	bl	8014a18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014710:	4b3b      	ldr	r3, [pc, #236]	; (8014800 <tcp_process+0x7d0>)
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	f003 0310 	and.w	r3, r3, #16
 8014718:	2b00      	cmp	r3, #0
 801471a:	d065      	beq.n	80147e8 <tcp_process+0x7b8>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014720:	4b38      	ldr	r3, [pc, #224]	; (8014804 <tcp_process+0x7d4>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	429a      	cmp	r2, r3
 8014726:	d15f      	bne.n	80147e8 <tcp_process+0x7b8>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801472c:	2b00      	cmp	r3, #0
 801472e:	d15b      	bne.n	80147e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7fe fcf3 	bl	801311c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014736:	4b35      	ldr	r3, [pc, #212]	; (801480c <tcp_process+0x7dc>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	687a      	ldr	r2, [r7, #4]
 801473c:	429a      	cmp	r2, r3
 801473e:	d105      	bne.n	801474c <tcp_process+0x71c>
 8014740:	4b32      	ldr	r3, [pc, #200]	; (801480c <tcp_process+0x7dc>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	4a31      	ldr	r2, [pc, #196]	; (801480c <tcp_process+0x7dc>)
 8014748:	6013      	str	r3, [r2, #0]
 801474a:	e013      	b.n	8014774 <tcp_process+0x744>
 801474c:	4b2f      	ldr	r3, [pc, #188]	; (801480c <tcp_process+0x7dc>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	60fb      	str	r3, [r7, #12]
 8014752:	e00c      	b.n	801476e <tcp_process+0x73e>
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	429a      	cmp	r2, r3
 801475c:	d104      	bne.n	8014768 <tcp_process+0x738>
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	68da      	ldr	r2, [r3, #12]
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	60da      	str	r2, [r3, #12]
 8014766:	e005      	b.n	8014774 <tcp_process+0x744>
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	60fb      	str	r3, [r7, #12]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d1ef      	bne.n	8014754 <tcp_process+0x724>
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	60da      	str	r2, [r3, #12]
 801477a:	4b1f      	ldr	r3, [pc, #124]	; (80147f8 <tcp_process+0x7c8>)
 801477c:	2201      	movs	r2, #1
 801477e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	220a      	movs	r2, #10
 8014784:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014786:	4b1d      	ldr	r3, [pc, #116]	; (80147fc <tcp_process+0x7cc>)
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	60da      	str	r2, [r3, #12]
 801478e:	4a1b      	ldr	r2, [pc, #108]	; (80147fc <tcp_process+0x7cc>)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6013      	str	r3, [r2, #0]
 8014794:	f003 f8a0 	bl	80178d8 <tcp_timer_needed>
      }
      break;
 8014798:	e026      	b.n	80147e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 f93c 	bl	8014a18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80147a0:	4b17      	ldr	r3, [pc, #92]	; (8014800 <tcp_process+0x7d0>)
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	f003 0310 	and.w	r3, r3, #16
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d01f      	beq.n	80147ec <tcp_process+0x7bc>
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80147b0:	4b14      	ldr	r3, [pc, #80]	; (8014804 <tcp_process+0x7d4>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d119      	bne.n	80147ec <tcp_process+0x7bc>
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d115      	bne.n	80147ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80147c0:	4b11      	ldr	r3, [pc, #68]	; (8014808 <tcp_process+0x7d8>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	f043 0310 	orr.w	r3, r3, #16
 80147c8:	b2da      	uxtb	r2, r3
 80147ca:	4b0f      	ldr	r3, [pc, #60]	; (8014808 <tcp_process+0x7d8>)
 80147cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80147ce:	e00d      	b.n	80147ec <tcp_process+0x7bc>
    default:
      break;
 80147d0:	bf00      	nop
 80147d2:	e00c      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147d4:	bf00      	nop
 80147d6:	e00a      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147d8:	bf00      	nop
 80147da:	e008      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147dc:	bf00      	nop
 80147de:	e006      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147e0:	bf00      	nop
 80147e2:	e004      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147e4:	bf00      	nop
 80147e6:	e002      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147e8:	bf00      	nop
 80147ea:	e000      	b.n	80147ee <tcp_process+0x7be>
      break;
 80147ec:	bf00      	nop
  }
  return ERR_OK;
 80147ee:	2300      	movs	r3, #0
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	3724      	adds	r7, #36	; 0x24
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd90      	pop	{r4, r7, pc}
 80147f8:	2000bdcc 	.word	0x2000bdcc
 80147fc:	2000bde0 	.word	0x2000bde0
 8014800:	20004f38 	.word	0x20004f38
 8014804:	20004f30 	.word	0x20004f30
 8014808:	20004f39 	.word	0x20004f39
 801480c:	2000bdd0 	.word	0x2000bdd0

08014810 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014810:	b590      	push	{r4, r7, lr}
 8014812:	b085      	sub	sp, #20
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d106      	bne.n	801482e <tcp_oos_insert_segment+0x1e>
 8014820:	4b3b      	ldr	r3, [pc, #236]	; (8014910 <tcp_oos_insert_segment+0x100>)
 8014822:	f240 421f 	movw	r2, #1055	; 0x41f
 8014826:	493b      	ldr	r1, [pc, #236]	; (8014914 <tcp_oos_insert_segment+0x104>)
 8014828:	483b      	ldr	r0, [pc, #236]	; (8014918 <tcp_oos_insert_segment+0x108>)
 801482a:	f007 f85f 	bl	801b8ec <printf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	68db      	ldr	r3, [r3, #12]
 8014832:	899b      	ldrh	r3, [r3, #12]
 8014834:	b29b      	uxth	r3, r3
 8014836:	4618      	mov	r0, r3
 8014838:	f7fb f936 	bl	800faa8 <lwip_htons>
 801483c:	4603      	mov	r3, r0
 801483e:	b2db      	uxtb	r3, r3
 8014840:	f003 0301 	and.w	r3, r3, #1
 8014844:	2b00      	cmp	r3, #0
 8014846:	d028      	beq.n	801489a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014848:	6838      	ldr	r0, [r7, #0]
 801484a:	f7fe f979 	bl	8012b40 <tcp_segs_free>
    next = NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	603b      	str	r3, [r7, #0]
 8014852:	e056      	b.n	8014902 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	899b      	ldrh	r3, [r3, #12]
 801485a:	b29b      	uxth	r3, r3
 801485c:	4618      	mov	r0, r3
 801485e:	f7fb f923 	bl	800faa8 <lwip_htons>
 8014862:	4603      	mov	r3, r0
 8014864:	b2db      	uxtb	r3, r3
 8014866:	f003 0301 	and.w	r3, r3, #1
 801486a:	2b00      	cmp	r3, #0
 801486c:	d00d      	beq.n	801488a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	68db      	ldr	r3, [r3, #12]
 8014872:	899b      	ldrh	r3, [r3, #12]
 8014874:	b29c      	uxth	r4, r3
 8014876:	2001      	movs	r0, #1
 8014878:	f7fb f916 	bl	800faa8 <lwip_htons>
 801487c:	4603      	mov	r3, r0
 801487e:	461a      	mov	r2, r3
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	68db      	ldr	r3, [r3, #12]
 8014884:	4322      	orrs	r2, r4
 8014886:	b292      	uxth	r2, r2
 8014888:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014894:	68f8      	ldr	r0, [r7, #12]
 8014896:	f7fe f968 	bl	8012b6a <tcp_seg_free>
    while (next &&
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d00e      	beq.n	80148be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	891b      	ldrh	r3, [r3, #8]
 80148a4:	461a      	mov	r2, r3
 80148a6:	4b1d      	ldr	r3, [pc, #116]	; (801491c <tcp_oos_insert_segment+0x10c>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	441a      	add	r2, r3
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	68db      	ldr	r3, [r3, #12]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	8909      	ldrh	r1, [r1, #8]
 80148b6:	440b      	add	r3, r1
 80148b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	daca      	bge.n	8014854 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d01e      	beq.n	8014902 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	891b      	ldrh	r3, [r3, #8]
 80148c8:	461a      	mov	r2, r3
 80148ca:	4b14      	ldr	r3, [pc, #80]	; (801491c <tcp_oos_insert_segment+0x10c>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	441a      	add	r2, r3
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80148d8:	2b00      	cmp	r3, #0
 80148da:	dd12      	ble.n	8014902 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	68db      	ldr	r3, [r3, #12]
 80148e0:	685b      	ldr	r3, [r3, #4]
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	4b0d      	ldr	r3, [pc, #52]	; (801491c <tcp_oos_insert_segment+0x10c>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	b29b      	uxth	r3, r3
 80148ea:	1ad3      	subs	r3, r2, r3
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	685a      	ldr	r2, [r3, #4]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	891b      	ldrh	r3, [r3, #8]
 80148fa:	4619      	mov	r1, r3
 80148fc:	4610      	mov	r0, r2
 80148fe:	f7fc fb09 	bl	8010f14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	683a      	ldr	r2, [r7, #0]
 8014906:	601a      	str	r2, [r3, #0]
}
 8014908:	bf00      	nop
 801490a:	3714      	adds	r7, #20
 801490c:	46bd      	mov	sp, r7
 801490e:	bd90      	pop	{r4, r7, pc}
 8014910:	08026838 	.word	0x08026838
 8014914:	08026af8 	.word	0x08026af8
 8014918:	08026884 	.word	0x08026884
 801491c:	20004f2c 	.word	0x20004f2c

08014920 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014920:	b5b0      	push	{r4, r5, r7, lr}
 8014922:	b086      	sub	sp, #24
 8014924:	af00      	add	r7, sp, #0
 8014926:	60f8      	str	r0, [r7, #12]
 8014928:	60b9      	str	r1, [r7, #8]
 801492a:	607a      	str	r2, [r7, #4]
 801492c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801492e:	e03e      	b.n	80149ae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801493a:	697b      	ldr	r3, [r7, #20]
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	4618      	mov	r0, r3
 8014940:	f7fc fcfc 	bl	801133c <pbuf_clen>
 8014944:	4603      	mov	r3, r0
 8014946:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801494e:	8a7a      	ldrh	r2, [r7, #18]
 8014950:	429a      	cmp	r2, r3
 8014952:	d906      	bls.n	8014962 <tcp_free_acked_segments+0x42>
 8014954:	4b2a      	ldr	r3, [pc, #168]	; (8014a00 <tcp_free_acked_segments+0xe0>)
 8014956:	f240 4257 	movw	r2, #1111	; 0x457
 801495a:	492a      	ldr	r1, [pc, #168]	; (8014a04 <tcp_free_acked_segments+0xe4>)
 801495c:	482a      	ldr	r0, [pc, #168]	; (8014a08 <tcp_free_acked_segments+0xe8>)
 801495e:	f006 ffc5 	bl	801b8ec <printf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014968:	8a7b      	ldrh	r3, [r7, #18]
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	b29a      	uxth	r2, r3
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	891a      	ldrh	r2, [r3, #8]
 8014978:	4b24      	ldr	r3, [pc, #144]	; (8014a0c <tcp_free_acked_segments+0xec>)
 801497a:	881b      	ldrh	r3, [r3, #0]
 801497c:	4413      	add	r3, r2
 801497e:	b29a      	uxth	r2, r3
 8014980:	4b22      	ldr	r3, [pc, #136]	; (8014a0c <tcp_free_acked_segments+0xec>)
 8014982:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014984:	6978      	ldr	r0, [r7, #20]
 8014986:	f7fe f8f0 	bl	8012b6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00c      	beq.n	80149ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d109      	bne.n	80149ae <tcp_free_acked_segments+0x8e>
 801499a:	683b      	ldr	r3, [r7, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d106      	bne.n	80149ae <tcp_free_acked_segments+0x8e>
 80149a0:	4b17      	ldr	r3, [pc, #92]	; (8014a00 <tcp_free_acked_segments+0xe0>)
 80149a2:	f240 4261 	movw	r2, #1121	; 0x461
 80149a6:	491a      	ldr	r1, [pc, #104]	; (8014a10 <tcp_free_acked_segments+0xf0>)
 80149a8:	4817      	ldr	r0, [pc, #92]	; (8014a08 <tcp_free_acked_segments+0xe8>)
 80149aa:	f006 ff9f 	bl	801b8ec <printf>
  while (seg_list != NULL &&
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d020      	beq.n	80149f6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f7fb f889 	bl	800fad2 <lwip_htonl>
 80149c0:	4604      	mov	r4, r0
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	891b      	ldrh	r3, [r3, #8]
 80149c6:	461d      	mov	r5, r3
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	899b      	ldrh	r3, [r3, #12]
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fb f869 	bl	800faa8 <lwip_htons>
 80149d6:	4603      	mov	r3, r0
 80149d8:	b2db      	uxtb	r3, r3
 80149da:	f003 0303 	and.w	r3, r3, #3
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d001      	beq.n	80149e6 <tcp_free_acked_segments+0xc6>
 80149e2:	2301      	movs	r3, #1
 80149e4:	e000      	b.n	80149e8 <tcp_free_acked_segments+0xc8>
 80149e6:	2300      	movs	r3, #0
 80149e8:	442b      	add	r3, r5
 80149ea:	18e2      	adds	r2, r4, r3
 80149ec:	4b09      	ldr	r3, [pc, #36]	; (8014a14 <tcp_free_acked_segments+0xf4>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	dd9c      	ble.n	8014930 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80149f6:	68bb      	ldr	r3, [r7, #8]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	3718      	adds	r7, #24
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bdb0      	pop	{r4, r5, r7, pc}
 8014a00:	08026838 	.word	0x08026838
 8014a04:	08026b20 	.word	0x08026b20
 8014a08:	08026884 	.word	0x08026884
 8014a0c:	20004f34 	.word	0x20004f34
 8014a10:	08026b48 	.word	0x08026b48
 8014a14:	20004f30 	.word	0x20004f30

08014a18 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014a18:	b5b0      	push	{r4, r5, r7, lr}
 8014a1a:	b094      	sub	sp, #80	; 0x50
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014a20:	2300      	movs	r3, #0
 8014a22:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d106      	bne.n	8014a38 <tcp_receive+0x20>
 8014a2a:	4ba6      	ldr	r3, [pc, #664]	; (8014cc4 <tcp_receive+0x2ac>)
 8014a2c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014a30:	49a5      	ldr	r1, [pc, #660]	; (8014cc8 <tcp_receive+0x2b0>)
 8014a32:	48a6      	ldr	r0, [pc, #664]	; (8014ccc <tcp_receive+0x2b4>)
 8014a34:	f006 ff5a 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	2b03      	cmp	r3, #3
 8014a3e:	d806      	bhi.n	8014a4e <tcp_receive+0x36>
 8014a40:	4ba0      	ldr	r3, [pc, #640]	; (8014cc4 <tcp_receive+0x2ac>)
 8014a42:	f240 427c 	movw	r2, #1148	; 0x47c
 8014a46:	49a2      	ldr	r1, [pc, #648]	; (8014cd0 <tcp_receive+0x2b8>)
 8014a48:	48a0      	ldr	r0, [pc, #640]	; (8014ccc <tcp_receive+0x2b4>)
 8014a4a:	f006 ff4f 	bl	801b8ec <printf>

  if (flags & TCP_ACK) {
 8014a4e:	4ba1      	ldr	r3, [pc, #644]	; (8014cd4 <tcp_receive+0x2bc>)
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	f003 0310 	and.w	r3, r3, #16
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f000 8263 	beq.w	8014f22 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a62:	461a      	mov	r2, r3
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a68:	4413      	add	r3, r2
 8014a6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a70:	4b99      	ldr	r3, [pc, #612]	; (8014cd8 <tcp_receive+0x2c0>)
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	db1b      	blt.n	8014ab2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014a7e:	4b96      	ldr	r3, [pc, #600]	; (8014cd8 <tcp_receive+0x2c0>)
 8014a80:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d106      	bne.n	8014a94 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014a8a:	4b94      	ldr	r3, [pc, #592]	; (8014cdc <tcp_receive+0x2c4>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	1ad3      	subs	r3, r2, r3
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	db0e      	blt.n	8014ab2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014a98:	4b90      	ldr	r3, [pc, #576]	; (8014cdc <tcp_receive+0x2c4>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d125      	bne.n	8014aec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014aa0:	4b8f      	ldr	r3, [pc, #572]	; (8014ce0 <tcp_receive+0x2c8>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	89db      	ldrh	r3, [r3, #14]
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d91c      	bls.n	8014aec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014ab2:	4b8b      	ldr	r3, [pc, #556]	; (8014ce0 <tcp_receive+0x2c8>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	89db      	ldrh	r3, [r3, #14]
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d205      	bcs.n	8014adc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014adc:	4b7e      	ldr	r3, [pc, #504]	; (8014cd8 <tcp_receive+0x2c0>)
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014ae4:	4b7d      	ldr	r3, [pc, #500]	; (8014cdc <tcp_receive+0x2c4>)
 8014ae6:	681a      	ldr	r2, [r3, #0]
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014aec:	4b7b      	ldr	r3, [pc, #492]	; (8014cdc <tcp_receive+0x2c4>)
 8014aee:	681a      	ldr	r2, [r3, #0]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014af4:	1ad3      	subs	r3, r2, r3
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	dc58      	bgt.n	8014bac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014afa:	4b7a      	ldr	r3, [pc, #488]	; (8014ce4 <tcp_receive+0x2cc>)
 8014afc:	881b      	ldrh	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d14b      	bne.n	8014b9a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014b0c:	4413      	add	r3, r2
 8014b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d142      	bne.n	8014b9a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	db3d      	blt.n	8014b9a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b22:	4b6e      	ldr	r3, [pc, #440]	; (8014cdc <tcp_receive+0x2c4>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d137      	bne.n	8014b9a <tcp_receive+0x182>
              found_dupack = 1;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b34:	2bff      	cmp	r3, #255	; 0xff
 8014b36:	d007      	beq.n	8014b48 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b3e:	3301      	adds	r3, #1
 8014b40:	b2da      	uxtb	r2, r3
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b4e:	2b03      	cmp	r3, #3
 8014b50:	d91b      	bls.n	8014b8a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b5c:	4413      	add	r3, r2
 8014b5e:	b29a      	uxth	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d30a      	bcc.n	8014b80 <tcp_receive+0x168>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b74:	4413      	add	r3, r2
 8014b76:	b29a      	uxth	r2, r3
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014b7e:	e004      	b.n	8014b8a <tcp_receive+0x172>
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b90:	2b02      	cmp	r3, #2
 8014b92:	d902      	bls.n	8014b9a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f002 fb41 	bl	801721c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	f040 8160 	bne.w	8014e62 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014baa:	e15a      	b.n	8014e62 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014bac:	4b4b      	ldr	r3, [pc, #300]	; (8014cdc <tcp_receive+0x2c4>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bb4:	1ad3      	subs	r3, r2, r3
 8014bb6:	3b01      	subs	r3, #1
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	f2c0 814d 	blt.w	8014e58 <tcp_receive+0x440>
 8014bbe:	4b47      	ldr	r3, [pc, #284]	; (8014cdc <tcp_receive+0x2c4>)
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bc6:	1ad3      	subs	r3, r2, r3
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f300 8145 	bgt.w	8014e58 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	8b5b      	ldrh	r3, [r3, #26]
 8014bd2:	f003 0304 	and.w	r3, r3, #4
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d010      	beq.n	8014bfc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	8b5b      	ldrh	r3, [r3, #26]
 8014bde:	f023 0304 	bic.w	r3, r3, #4
 8014be2:	b29a      	uxth	r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014c0a:	10db      	asrs	r3, r3, #3
 8014c0c:	b21b      	sxth	r3, r3
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	4413      	add	r3, r2
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	b21a      	sxth	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014c24:	4b2d      	ldr	r3, [pc, #180]	; (8014cdc <tcp_receive+0x2c4>)
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	b29a      	uxth	r2, r3
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	1ad3      	subs	r3, r2, r3
 8014c32:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014c3c:	4b27      	ldr	r3, [pc, #156]	; (8014cdc <tcp_receive+0x2c4>)
 8014c3e:	681a      	ldr	r2, [r3, #0]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	7d1b      	ldrb	r3, [r3, #20]
 8014c48:	2b03      	cmp	r3, #3
 8014c4a:	f240 8096 	bls.w	8014d7a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d244      	bcs.n	8014ce8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	8b5b      	ldrh	r3, [r3, #26]
 8014c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d001      	beq.n	8014c6e <tcp_receive+0x256>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e000      	b.n	8014c70 <tcp_receive+0x258>
 8014c6e:	2302      	movs	r3, #2
 8014c70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014c74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014c78:	b29a      	uxth	r2, r3
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c7e:	fb12 f303 	smulbb	r3, r2, r3
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014c86:	4293      	cmp	r3, r2
 8014c88:	bf28      	it	cs
 8014c8a:	4613      	movcs	r3, r2
 8014c8c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c96:	4413      	add	r3, r2
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d309      	bcc.n	8014cb8 <tcp_receive+0x2a0>
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014caa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014cac:	4413      	add	r3, r2
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014cb6:	e060      	b.n	8014d7a <tcp_receive+0x362>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014cc2:	e05a      	b.n	8014d7a <tcp_receive+0x362>
 8014cc4:	08026838 	.word	0x08026838
 8014cc8:	08026b68 	.word	0x08026b68
 8014ccc:	08026884 	.word	0x08026884
 8014cd0:	08026b84 	.word	0x08026b84
 8014cd4:	20004f38 	.word	0x20004f38
 8014cd8:	20004f2c 	.word	0x20004f2c
 8014cdc:	20004f30 	.word	0x20004f30
 8014ce0:	20004f1c 	.word	0x20004f1c
 8014ce4:	20004f36 	.word	0x20004f36
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014cf0:	4413      	add	r3, r2
 8014cf2:	b29a      	uxth	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d309      	bcc.n	8014d12 <tcp_receive+0x2fa>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014d06:	4413      	add	r3, r2
 8014d08:	b29a      	uxth	r2, r3
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014d10:	e004      	b.n	8014d1c <tcp_receive+0x304>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d326      	bcc.n	8014d7a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d38:	1ad3      	subs	r3, r2, r3
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d4c:	4413      	add	r3, r2
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d30a      	bcc.n	8014d70 <tcp_receive+0x358>
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d64:	4413      	add	r3, r2
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d6e:	e004      	b.n	8014d7a <tcp_receive+0x362>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d82:	4a98      	ldr	r2, [pc, #608]	; (8014fe4 <tcp_receive+0x5cc>)
 8014d84:	6878      	ldr	r0, [r7, #4]
 8014d86:	f7ff fdcb 	bl	8014920 <tcp_free_acked_segments>
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d98:	4a93      	ldr	r2, [pc, #588]	; (8014fe8 <tcp_receive+0x5d0>)
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f7ff fdc0 	bl	8014920 <tcp_free_acked_segments>
 8014da0:	4602      	mov	r2, r0
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d104      	bne.n	8014db8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014db4:	861a      	strh	r2, [r3, #48]	; 0x30
 8014db6:	e002      	b.n	8014dbe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d103      	bne.n	8014dd4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014dda:	4b84      	ldr	r3, [pc, #528]	; (8014fec <tcp_receive+0x5d4>)
 8014ddc:	881b      	ldrh	r3, [r3, #0]
 8014dde:	4413      	add	r3, r2
 8014de0:	b29a      	uxth	r2, r3
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	8b5b      	ldrh	r3, [r3, #26]
 8014dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d035      	beq.n	8014e60 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d118      	bne.n	8014e2e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d00c      	beq.n	8014e1e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7fa fe5e 	bl	800fad2 <lwip_htonl>
 8014e16:	4603      	mov	r3, r0
 8014e18:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	dc20      	bgt.n	8014e60 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	8b5b      	ldrh	r3, [r3, #26]
 8014e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e2c:	e018      	b.n	8014e60 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	685b      	ldr	r3, [r3, #4]
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7fa fe49 	bl	800fad2 <lwip_htonl>
 8014e40:	4603      	mov	r3, r0
 8014e42:	1ae3      	subs	r3, r4, r3
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	dc0b      	bgt.n	8014e60 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	8b5b      	ldrh	r3, [r3, #26]
 8014e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e56:	e003      	b.n	8014e60 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f002 fbcd 	bl	80175f8 <tcp_send_empty_ack>
 8014e5e:	e000      	b.n	8014e62 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e60:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d05b      	beq.n	8014f22 <tcp_receive+0x50a>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014e6e:	4b60      	ldr	r3, [pc, #384]	; (8014ff0 <tcp_receive+0x5d8>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	1ad3      	subs	r3, r2, r3
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	da54      	bge.n	8014f22 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014e78:	4b5e      	ldr	r3, [pc, #376]	; (8014ff4 <tcp_receive+0x5dc>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	b29a      	uxth	r2, r3
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	1ad3      	subs	r3, r2, r3
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014e8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e96:	10db      	asrs	r3, r3, #3
 8014e98:	b21b      	sxth	r3, r3
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014eaa:	b29a      	uxth	r2, r3
 8014eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014eb0:	4413      	add	r3, r2
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	b21a      	sxth	r2, r3
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014eba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	da05      	bge.n	8014ece <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014ec2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ec6:	425b      	negs	r3, r3
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014ece:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014ed8:	109b      	asrs	r3, r3, #2
 8014eda:	b21b      	sxth	r3, r3
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	1ad3      	subs	r3, r2, r3
 8014ee0:	b29b      	uxth	r3, r3
 8014ee2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014eec:	b29a      	uxth	r2, r3
 8014eee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014ef2:	4413      	add	r3, r2
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	b21a      	sxth	r2, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f02:	10db      	asrs	r3, r3, #3
 8014f04:	b21b      	sxth	r3, r3
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	4413      	add	r3, r2
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	b21a      	sxth	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014f22:	4b35      	ldr	r3, [pc, #212]	; (8014ff8 <tcp_receive+0x5e0>)
 8014f24:	881b      	ldrh	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 84e1 	beq.w	80158ee <tcp_receive+0xed6>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	7d1b      	ldrb	r3, [r3, #20]
 8014f30:	2b06      	cmp	r3, #6
 8014f32:	f200 84dc 	bhi.w	80158ee <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f3a:	4b30      	ldr	r3, [pc, #192]	; (8014ffc <tcp_receive+0x5e4>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	1ad3      	subs	r3, r2, r3
 8014f40:	3b01      	subs	r3, #1
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	f2c0 808e 	blt.w	8015064 <tcp_receive+0x64c>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f4c:	4b2a      	ldr	r3, [pc, #168]	; (8014ff8 <tcp_receive+0x5e0>)
 8014f4e:	881b      	ldrh	r3, [r3, #0]
 8014f50:	4619      	mov	r1, r3
 8014f52:	4b2a      	ldr	r3, [pc, #168]	; (8014ffc <tcp_receive+0x5e4>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	440b      	add	r3, r1
 8014f58:	1ad3      	subs	r3, r2, r3
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	f300 8081 	bgt.w	8015064 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014f62:	4b27      	ldr	r3, [pc, #156]	; (8015000 <tcp_receive+0x5e8>)
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f6c:	4b23      	ldr	r3, [pc, #140]	; (8014ffc <tcp_receive+0x5e4>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	1ad3      	subs	r3, r2, r3
 8014f72:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014f74:	4b22      	ldr	r3, [pc, #136]	; (8015000 <tcp_receive+0x5e8>)
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d106      	bne.n	8014f8a <tcp_receive+0x572>
 8014f7c:	4b21      	ldr	r3, [pc, #132]	; (8015004 <tcp_receive+0x5ec>)
 8014f7e:	f240 5294 	movw	r2, #1428	; 0x594
 8014f82:	4921      	ldr	r1, [pc, #132]	; (8015008 <tcp_receive+0x5f0>)
 8014f84:	4821      	ldr	r0, [pc, #132]	; (801500c <tcp_receive+0x5f4>)
 8014f86:	f006 fcb1 	bl	801b8ec <printf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014f90:	4293      	cmp	r3, r2
 8014f92:	d906      	bls.n	8014fa2 <tcp_receive+0x58a>
 8014f94:	4b1b      	ldr	r3, [pc, #108]	; (8015004 <tcp_receive+0x5ec>)
 8014f96:	f240 5295 	movw	r2, #1429	; 0x595
 8014f9a:	491d      	ldr	r1, [pc, #116]	; (8015010 <tcp_receive+0x5f8>)
 8014f9c:	481b      	ldr	r0, [pc, #108]	; (801500c <tcp_receive+0x5f4>)
 8014f9e:	f006 fca5 	bl	801b8ec <printf>
      off = (u16_t)off32;
 8014fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014fa8:	4b15      	ldr	r3, [pc, #84]	; (8015000 <tcp_receive+0x5e8>)
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	891b      	ldrh	r3, [r3, #8]
 8014fae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d906      	bls.n	8014fc4 <tcp_receive+0x5ac>
 8014fb6:	4b13      	ldr	r3, [pc, #76]	; (8015004 <tcp_receive+0x5ec>)
 8014fb8:	f240 5297 	movw	r2, #1431	; 0x597
 8014fbc:	4915      	ldr	r1, [pc, #84]	; (8015014 <tcp_receive+0x5fc>)
 8014fbe:	4813      	ldr	r0, [pc, #76]	; (801500c <tcp_receive+0x5f4>)
 8014fc0:	f006 fc94 	bl	801b8ec <printf>
      inseg.len -= off;
 8014fc4:	4b0e      	ldr	r3, [pc, #56]	; (8015000 <tcp_receive+0x5e8>)
 8014fc6:	891a      	ldrh	r2, [r3, #8]
 8014fc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fcc:	1ad3      	subs	r3, r2, r3
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	4b0b      	ldr	r3, [pc, #44]	; (8015000 <tcp_receive+0x5e8>)
 8014fd2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014fd4:	4b0a      	ldr	r3, [pc, #40]	; (8015000 <tcp_receive+0x5e8>)
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	891a      	ldrh	r2, [r3, #8]
 8014fda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014fde:	1ad3      	subs	r3, r2, r3
 8014fe0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014fe2:	e029      	b.n	8015038 <tcp_receive+0x620>
 8014fe4:	08026ba0 	.word	0x08026ba0
 8014fe8:	08026ba8 	.word	0x08026ba8
 8014fec:	20004f34 	.word	0x20004f34
 8014ff0:	20004f30 	.word	0x20004f30
 8014ff4:	2000bdd4 	.word	0x2000bdd4
 8014ff8:	20004f36 	.word	0x20004f36
 8014ffc:	20004f2c 	.word	0x20004f2c
 8015000:	20004f0c 	.word	0x20004f0c
 8015004:	08026838 	.word	0x08026838
 8015008:	08026bb0 	.word	0x08026bb0
 801500c:	08026884 	.word	0x08026884
 8015010:	08026bc0 	.word	0x08026bc0
 8015014:	08026bd0 	.word	0x08026bd0
        off -= p->len;
 8015018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801501a:	895b      	ldrh	r3, [r3, #10]
 801501c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015020:	1ad3      	subs	r3, r2, r3
 8015022:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015028:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801502a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801502e:	2200      	movs	r2, #0
 8015030:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801503a:	895b      	ldrh	r3, [r3, #10]
 801503c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015040:	429a      	cmp	r2, r3
 8015042:	d8e9      	bhi.n	8015018 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015048:	4619      	mov	r1, r3
 801504a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801504c:	f7fc f862 	bl	8011114 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015054:	4a91      	ldr	r2, [pc, #580]	; (801529c <tcp_receive+0x884>)
 8015056:	6013      	str	r3, [r2, #0]
 8015058:	4b91      	ldr	r3, [pc, #580]	; (80152a0 <tcp_receive+0x888>)
 801505a:	68db      	ldr	r3, [r3, #12]
 801505c:	4a8f      	ldr	r2, [pc, #572]	; (801529c <tcp_receive+0x884>)
 801505e:	6812      	ldr	r2, [r2, #0]
 8015060:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015062:	e00d      	b.n	8015080 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015064:	4b8d      	ldr	r3, [pc, #564]	; (801529c <tcp_receive+0x884>)
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	2b00      	cmp	r3, #0
 8015070:	da06      	bge.n	8015080 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8b5b      	ldrh	r3, [r3, #26]
 8015076:	f043 0302 	orr.w	r3, r3, #2
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015080:	4b86      	ldr	r3, [pc, #536]	; (801529c <tcp_receive+0x884>)
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015088:	1ad3      	subs	r3, r2, r3
 801508a:	2b00      	cmp	r3, #0
 801508c:	f2c0 842a 	blt.w	80158e4 <tcp_receive+0xecc>
 8015090:	4b82      	ldr	r3, [pc, #520]	; (801529c <tcp_receive+0x884>)
 8015092:	681a      	ldr	r2, [r3, #0]
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015098:	6879      	ldr	r1, [r7, #4]
 801509a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801509c:	440b      	add	r3, r1
 801509e:	1ad3      	subs	r3, r2, r3
 80150a0:	3301      	adds	r3, #1
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	f300 841e 	bgt.w	80158e4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150ac:	4b7b      	ldr	r3, [pc, #492]	; (801529c <tcp_receive+0x884>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	f040 829a 	bne.w	80155ea <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80150b6:	4b7a      	ldr	r3, [pc, #488]	; (80152a0 <tcp_receive+0x888>)
 80150b8:	891c      	ldrh	r4, [r3, #8]
 80150ba:	4b79      	ldr	r3, [pc, #484]	; (80152a0 <tcp_receive+0x888>)
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	899b      	ldrh	r3, [r3, #12]
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7fa fcf0 	bl	800faa8 <lwip_htons>
 80150c8:	4603      	mov	r3, r0
 80150ca:	b2db      	uxtb	r3, r3
 80150cc:	f003 0303 	and.w	r3, r3, #3
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d001      	beq.n	80150d8 <tcp_receive+0x6c0>
 80150d4:	2301      	movs	r3, #1
 80150d6:	e000      	b.n	80150da <tcp_receive+0x6c2>
 80150d8:	2300      	movs	r3, #0
 80150da:	4423      	add	r3, r4
 80150dc:	b29a      	uxth	r2, r3
 80150de:	4b71      	ldr	r3, [pc, #452]	; (80152a4 <tcp_receive+0x88c>)
 80150e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80150e6:	4b6f      	ldr	r3, [pc, #444]	; (80152a4 <tcp_receive+0x88c>)
 80150e8:	881b      	ldrh	r3, [r3, #0]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d275      	bcs.n	80151da <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80150ee:	4b6c      	ldr	r3, [pc, #432]	; (80152a0 <tcp_receive+0x888>)
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	899b      	ldrh	r3, [r3, #12]
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7fa fcd6 	bl	800faa8 <lwip_htons>
 80150fc:	4603      	mov	r3, r0
 80150fe:	b2db      	uxtb	r3, r3
 8015100:	f003 0301 	and.w	r3, r3, #1
 8015104:	2b00      	cmp	r3, #0
 8015106:	d01f      	beq.n	8015148 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015108:	4b65      	ldr	r3, [pc, #404]	; (80152a0 <tcp_receive+0x888>)
 801510a:	68db      	ldr	r3, [r3, #12]
 801510c:	899b      	ldrh	r3, [r3, #12]
 801510e:	b29b      	uxth	r3, r3
 8015110:	b21b      	sxth	r3, r3
 8015112:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015116:	b21c      	sxth	r4, r3
 8015118:	4b61      	ldr	r3, [pc, #388]	; (80152a0 <tcp_receive+0x888>)
 801511a:	68db      	ldr	r3, [r3, #12]
 801511c:	899b      	ldrh	r3, [r3, #12]
 801511e:	b29b      	uxth	r3, r3
 8015120:	4618      	mov	r0, r3
 8015122:	f7fa fcc1 	bl	800faa8 <lwip_htons>
 8015126:	4603      	mov	r3, r0
 8015128:	b2db      	uxtb	r3, r3
 801512a:	b29b      	uxth	r3, r3
 801512c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015130:	b29b      	uxth	r3, r3
 8015132:	4618      	mov	r0, r3
 8015134:	f7fa fcb8 	bl	800faa8 <lwip_htons>
 8015138:	4603      	mov	r3, r0
 801513a:	b21b      	sxth	r3, r3
 801513c:	4323      	orrs	r3, r4
 801513e:	b21a      	sxth	r2, r3
 8015140:	4b57      	ldr	r3, [pc, #348]	; (80152a0 <tcp_receive+0x888>)
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	b292      	uxth	r2, r2
 8015146:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801514c:	4b54      	ldr	r3, [pc, #336]	; (80152a0 <tcp_receive+0x888>)
 801514e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015150:	4b53      	ldr	r3, [pc, #332]	; (80152a0 <tcp_receive+0x888>)
 8015152:	68db      	ldr	r3, [r3, #12]
 8015154:	899b      	ldrh	r3, [r3, #12]
 8015156:	b29b      	uxth	r3, r3
 8015158:	4618      	mov	r0, r3
 801515a:	f7fa fca5 	bl	800faa8 <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	b2db      	uxtb	r3, r3
 8015162:	f003 0302 	and.w	r3, r3, #2
 8015166:	2b00      	cmp	r3, #0
 8015168:	d005      	beq.n	8015176 <tcp_receive+0x75e>
            inseg.len -= 1;
 801516a:	4b4d      	ldr	r3, [pc, #308]	; (80152a0 <tcp_receive+0x888>)
 801516c:	891b      	ldrh	r3, [r3, #8]
 801516e:	3b01      	subs	r3, #1
 8015170:	b29a      	uxth	r2, r3
 8015172:	4b4b      	ldr	r3, [pc, #300]	; (80152a0 <tcp_receive+0x888>)
 8015174:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015176:	4b4a      	ldr	r3, [pc, #296]	; (80152a0 <tcp_receive+0x888>)
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	4a49      	ldr	r2, [pc, #292]	; (80152a0 <tcp_receive+0x888>)
 801517c:	8912      	ldrh	r2, [r2, #8]
 801517e:	4611      	mov	r1, r2
 8015180:	4618      	mov	r0, r3
 8015182:	f7fb fec7 	bl	8010f14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015186:	4b46      	ldr	r3, [pc, #280]	; (80152a0 <tcp_receive+0x888>)
 8015188:	891c      	ldrh	r4, [r3, #8]
 801518a:	4b45      	ldr	r3, [pc, #276]	; (80152a0 <tcp_receive+0x888>)
 801518c:	68db      	ldr	r3, [r3, #12]
 801518e:	899b      	ldrh	r3, [r3, #12]
 8015190:	b29b      	uxth	r3, r3
 8015192:	4618      	mov	r0, r3
 8015194:	f7fa fc88 	bl	800faa8 <lwip_htons>
 8015198:	4603      	mov	r3, r0
 801519a:	b2db      	uxtb	r3, r3
 801519c:	f003 0303 	and.w	r3, r3, #3
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d001      	beq.n	80151a8 <tcp_receive+0x790>
 80151a4:	2301      	movs	r3, #1
 80151a6:	e000      	b.n	80151aa <tcp_receive+0x792>
 80151a8:	2300      	movs	r3, #0
 80151aa:	4423      	add	r3, r4
 80151ac:	b29a      	uxth	r2, r3
 80151ae:	4b3d      	ldr	r3, [pc, #244]	; (80152a4 <tcp_receive+0x88c>)
 80151b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80151b2:	4b3c      	ldr	r3, [pc, #240]	; (80152a4 <tcp_receive+0x88c>)
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	461a      	mov	r2, r3
 80151b8:	4b38      	ldr	r3, [pc, #224]	; (801529c <tcp_receive+0x884>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	441a      	add	r2, r3
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c2:	6879      	ldr	r1, [r7, #4]
 80151c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80151c6:	440b      	add	r3, r1
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d006      	beq.n	80151da <tcp_receive+0x7c2>
 80151cc:	4b36      	ldr	r3, [pc, #216]	; (80152a8 <tcp_receive+0x890>)
 80151ce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80151d2:	4936      	ldr	r1, [pc, #216]	; (80152ac <tcp_receive+0x894>)
 80151d4:	4836      	ldr	r0, [pc, #216]	; (80152b0 <tcp_receive+0x898>)
 80151d6:	f006 fb89 	bl	801b8ec <printf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151de:	2b00      	cmp	r3, #0
 80151e0:	f000 80e7 	beq.w	80153b2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80151e4:	4b2e      	ldr	r3, [pc, #184]	; (80152a0 <tcp_receive+0x888>)
 80151e6:	68db      	ldr	r3, [r3, #12]
 80151e8:	899b      	ldrh	r3, [r3, #12]
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7fa fc5b 	bl	800faa8 <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	f003 0301 	and.w	r3, r3, #1
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d010      	beq.n	8015220 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80151fe:	e00a      	b.n	8015216 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015204:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f7fd fcaa 	bl	8012b6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1f0      	bne.n	8015200 <tcp_receive+0x7e8>
 801521e:	e0c8      	b.n	80153b2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015224:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015226:	e052      	b.n	80152ce <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	899b      	ldrh	r3, [r3, #12]
 801522e:	b29b      	uxth	r3, r3
 8015230:	4618      	mov	r0, r3
 8015232:	f7fa fc39 	bl	800faa8 <lwip_htons>
 8015236:	4603      	mov	r3, r0
 8015238:	b2db      	uxtb	r3, r3
 801523a:	f003 0301 	and.w	r3, r3, #1
 801523e:	2b00      	cmp	r3, #0
 8015240:	d03d      	beq.n	80152be <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015242:	4b17      	ldr	r3, [pc, #92]	; (80152a0 <tcp_receive+0x888>)
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	899b      	ldrh	r3, [r3, #12]
 8015248:	b29b      	uxth	r3, r3
 801524a:	4618      	mov	r0, r3
 801524c:	f7fa fc2c 	bl	800faa8 <lwip_htons>
 8015250:	4603      	mov	r3, r0
 8015252:	b2db      	uxtb	r3, r3
 8015254:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015258:	2b00      	cmp	r3, #0
 801525a:	d130      	bne.n	80152be <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801525c:	4b10      	ldr	r3, [pc, #64]	; (80152a0 <tcp_receive+0x888>)
 801525e:	68db      	ldr	r3, [r3, #12]
 8015260:	899b      	ldrh	r3, [r3, #12]
 8015262:	b29c      	uxth	r4, r3
 8015264:	2001      	movs	r0, #1
 8015266:	f7fa fc1f 	bl	800faa8 <lwip_htons>
 801526a:	4603      	mov	r3, r0
 801526c:	461a      	mov	r2, r3
 801526e:	4b0c      	ldr	r3, [pc, #48]	; (80152a0 <tcp_receive+0x888>)
 8015270:	68db      	ldr	r3, [r3, #12]
 8015272:	4322      	orrs	r2, r4
 8015274:	b292      	uxth	r2, r2
 8015276:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015278:	4b09      	ldr	r3, [pc, #36]	; (80152a0 <tcp_receive+0x888>)
 801527a:	891c      	ldrh	r4, [r3, #8]
 801527c:	4b08      	ldr	r3, [pc, #32]	; (80152a0 <tcp_receive+0x888>)
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	899b      	ldrh	r3, [r3, #12]
 8015282:	b29b      	uxth	r3, r3
 8015284:	4618      	mov	r0, r3
 8015286:	f7fa fc0f 	bl	800faa8 <lwip_htons>
 801528a:	4603      	mov	r3, r0
 801528c:	b2db      	uxtb	r3, r3
 801528e:	f003 0303 	and.w	r3, r3, #3
 8015292:	2b00      	cmp	r3, #0
 8015294:	d00e      	beq.n	80152b4 <tcp_receive+0x89c>
 8015296:	2301      	movs	r3, #1
 8015298:	e00d      	b.n	80152b6 <tcp_receive+0x89e>
 801529a:	bf00      	nop
 801529c:	20004f2c 	.word	0x20004f2c
 80152a0:	20004f0c 	.word	0x20004f0c
 80152a4:	20004f36 	.word	0x20004f36
 80152a8:	08026838 	.word	0x08026838
 80152ac:	08026be0 	.word	0x08026be0
 80152b0:	08026884 	.word	0x08026884
 80152b4:	2300      	movs	r3, #0
 80152b6:	4423      	add	r3, r4
 80152b8:	b29a      	uxth	r2, r3
 80152ba:	4b98      	ldr	r3, [pc, #608]	; (801551c <tcp_receive+0xb04>)
 80152bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80152be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80152c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80152c8:	6938      	ldr	r0, [r7, #16]
 80152ca:	f7fd fc4e 	bl	8012b6a <tcp_seg_free>
            while (next &&
 80152ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d00e      	beq.n	80152f2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80152d4:	4b91      	ldr	r3, [pc, #580]	; (801551c <tcp_receive+0xb04>)
 80152d6:	881b      	ldrh	r3, [r3, #0]
 80152d8:	461a      	mov	r2, r3
 80152da:	4b91      	ldr	r3, [pc, #580]	; (8015520 <tcp_receive+0xb08>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	441a      	add	r2, r3
 80152e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152e2:	68db      	ldr	r3, [r3, #12]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80152e8:	8909      	ldrh	r1, [r1, #8]
 80152ea:	440b      	add	r3, r1
 80152ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	da9a      	bge.n	8015228 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80152f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d059      	beq.n	80153ac <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80152f8:	4b88      	ldr	r3, [pc, #544]	; (801551c <tcp_receive+0xb04>)
 80152fa:	881b      	ldrh	r3, [r3, #0]
 80152fc:	461a      	mov	r2, r3
 80152fe:	4b88      	ldr	r3, [pc, #544]	; (8015520 <tcp_receive+0xb08>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	441a      	add	r2, r3
 8015304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015306:	68db      	ldr	r3, [r3, #12]
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801530c:	2b00      	cmp	r3, #0
 801530e:	dd4d      	ble.n	80153ac <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	b29a      	uxth	r2, r3
 8015318:	4b81      	ldr	r3, [pc, #516]	; (8015520 <tcp_receive+0xb08>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	b29b      	uxth	r3, r3
 801531e:	1ad3      	subs	r3, r2, r3
 8015320:	b29a      	uxth	r2, r3
 8015322:	4b80      	ldr	r3, [pc, #512]	; (8015524 <tcp_receive+0xb0c>)
 8015324:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015326:	4b7f      	ldr	r3, [pc, #508]	; (8015524 <tcp_receive+0xb0c>)
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	899b      	ldrh	r3, [r3, #12]
 801532c:	b29b      	uxth	r3, r3
 801532e:	4618      	mov	r0, r3
 8015330:	f7fa fbba 	bl	800faa8 <lwip_htons>
 8015334:	4603      	mov	r3, r0
 8015336:	b2db      	uxtb	r3, r3
 8015338:	f003 0302 	and.w	r3, r3, #2
 801533c:	2b00      	cmp	r3, #0
 801533e:	d005      	beq.n	801534c <tcp_receive+0x934>
                inseg.len -= 1;
 8015340:	4b78      	ldr	r3, [pc, #480]	; (8015524 <tcp_receive+0xb0c>)
 8015342:	891b      	ldrh	r3, [r3, #8]
 8015344:	3b01      	subs	r3, #1
 8015346:	b29a      	uxth	r2, r3
 8015348:	4b76      	ldr	r3, [pc, #472]	; (8015524 <tcp_receive+0xb0c>)
 801534a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801534c:	4b75      	ldr	r3, [pc, #468]	; (8015524 <tcp_receive+0xb0c>)
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	4a74      	ldr	r2, [pc, #464]	; (8015524 <tcp_receive+0xb0c>)
 8015352:	8912      	ldrh	r2, [r2, #8]
 8015354:	4611      	mov	r1, r2
 8015356:	4618      	mov	r0, r3
 8015358:	f7fb fddc 	bl	8010f14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801535c:	4b71      	ldr	r3, [pc, #452]	; (8015524 <tcp_receive+0xb0c>)
 801535e:	891c      	ldrh	r4, [r3, #8]
 8015360:	4b70      	ldr	r3, [pc, #448]	; (8015524 <tcp_receive+0xb0c>)
 8015362:	68db      	ldr	r3, [r3, #12]
 8015364:	899b      	ldrh	r3, [r3, #12]
 8015366:	b29b      	uxth	r3, r3
 8015368:	4618      	mov	r0, r3
 801536a:	f7fa fb9d 	bl	800faa8 <lwip_htons>
 801536e:	4603      	mov	r3, r0
 8015370:	b2db      	uxtb	r3, r3
 8015372:	f003 0303 	and.w	r3, r3, #3
 8015376:	2b00      	cmp	r3, #0
 8015378:	d001      	beq.n	801537e <tcp_receive+0x966>
 801537a:	2301      	movs	r3, #1
 801537c:	e000      	b.n	8015380 <tcp_receive+0x968>
 801537e:	2300      	movs	r3, #0
 8015380:	4423      	add	r3, r4
 8015382:	b29a      	uxth	r2, r3
 8015384:	4b65      	ldr	r3, [pc, #404]	; (801551c <tcp_receive+0xb04>)
 8015386:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015388:	4b64      	ldr	r3, [pc, #400]	; (801551c <tcp_receive+0xb04>)
 801538a:	881b      	ldrh	r3, [r3, #0]
 801538c:	461a      	mov	r2, r3
 801538e:	4b64      	ldr	r3, [pc, #400]	; (8015520 <tcp_receive+0xb08>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	441a      	add	r2, r3
 8015394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	429a      	cmp	r2, r3
 801539c:	d006      	beq.n	80153ac <tcp_receive+0x994>
 801539e:	4b62      	ldr	r3, [pc, #392]	; (8015528 <tcp_receive+0xb10>)
 80153a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80153a4:	4961      	ldr	r1, [pc, #388]	; (801552c <tcp_receive+0xb14>)
 80153a6:	4862      	ldr	r0, [pc, #392]	; (8015530 <tcp_receive+0xb18>)
 80153a8:	f006 faa0 	bl	801b8ec <printf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80153b2:	4b5a      	ldr	r3, [pc, #360]	; (801551c <tcp_receive+0xb04>)
 80153b4:	881b      	ldrh	r3, [r3, #0]
 80153b6:	461a      	mov	r2, r3
 80153b8:	4b59      	ldr	r3, [pc, #356]	; (8015520 <tcp_receive+0xb08>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	441a      	add	r2, r3
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153c6:	4b55      	ldr	r3, [pc, #340]	; (801551c <tcp_receive+0xb04>)
 80153c8:	881b      	ldrh	r3, [r3, #0]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d206      	bcs.n	80153dc <tcp_receive+0x9c4>
 80153ce:	4b56      	ldr	r3, [pc, #344]	; (8015528 <tcp_receive+0xb10>)
 80153d0:	f240 6207 	movw	r2, #1543	; 0x607
 80153d4:	4957      	ldr	r1, [pc, #348]	; (8015534 <tcp_receive+0xb1c>)
 80153d6:	4856      	ldr	r0, [pc, #344]	; (8015530 <tcp_receive+0xb18>)
 80153d8:	f006 fa88 	bl	801b8ec <printf>
        pcb->rcv_wnd -= tcplen;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153e0:	4b4e      	ldr	r3, [pc, #312]	; (801551c <tcp_receive+0xb04>)
 80153e2:	881b      	ldrh	r3, [r3, #0]
 80153e4:	1ad3      	subs	r3, r2, r3
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7fc fe97 	bl	8012120 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80153f2:	4b4c      	ldr	r3, [pc, #304]	; (8015524 <tcp_receive+0xb0c>)
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	891b      	ldrh	r3, [r3, #8]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d006      	beq.n	801540a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80153fc:	4b49      	ldr	r3, [pc, #292]	; (8015524 <tcp_receive+0xb0c>)
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	4a4d      	ldr	r2, [pc, #308]	; (8015538 <tcp_receive+0xb20>)
 8015402:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015404:	4b47      	ldr	r3, [pc, #284]	; (8015524 <tcp_receive+0xb0c>)
 8015406:	2200      	movs	r2, #0
 8015408:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801540a:	4b46      	ldr	r3, [pc, #280]	; (8015524 <tcp_receive+0xb0c>)
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	899b      	ldrh	r3, [r3, #12]
 8015410:	b29b      	uxth	r3, r3
 8015412:	4618      	mov	r0, r3
 8015414:	f7fa fb48 	bl	800faa8 <lwip_htons>
 8015418:	4603      	mov	r3, r0
 801541a:	b2db      	uxtb	r3, r3
 801541c:	f003 0301 	and.w	r3, r3, #1
 8015420:	2b00      	cmp	r3, #0
 8015422:	f000 80b8 	beq.w	8015596 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015426:	4b45      	ldr	r3, [pc, #276]	; (801553c <tcp_receive+0xb24>)
 8015428:	781b      	ldrb	r3, [r3, #0]
 801542a:	f043 0320 	orr.w	r3, r3, #32
 801542e:	b2da      	uxtb	r2, r3
 8015430:	4b42      	ldr	r3, [pc, #264]	; (801553c <tcp_receive+0xb24>)
 8015432:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015434:	e0af      	b.n	8015596 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801543a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	685b      	ldr	r3, [r3, #4]
 8015444:	4a36      	ldr	r2, [pc, #216]	; (8015520 <tcp_receive+0xb08>)
 8015446:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	891b      	ldrh	r3, [r3, #8]
 801544c:	461c      	mov	r4, r3
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	68db      	ldr	r3, [r3, #12]
 8015452:	899b      	ldrh	r3, [r3, #12]
 8015454:	b29b      	uxth	r3, r3
 8015456:	4618      	mov	r0, r3
 8015458:	f7fa fb26 	bl	800faa8 <lwip_htons>
 801545c:	4603      	mov	r3, r0
 801545e:	b2db      	uxtb	r3, r3
 8015460:	f003 0303 	and.w	r3, r3, #3
 8015464:	2b00      	cmp	r3, #0
 8015466:	d001      	beq.n	801546c <tcp_receive+0xa54>
 8015468:	2301      	movs	r3, #1
 801546a:	e000      	b.n	801546e <tcp_receive+0xa56>
 801546c:	2300      	movs	r3, #0
 801546e:	191a      	adds	r2, r3, r4
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015474:	441a      	add	r2, r3
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801547e:	461c      	mov	r4, r3
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	891b      	ldrh	r3, [r3, #8]
 8015484:	461d      	mov	r5, r3
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	899b      	ldrh	r3, [r3, #12]
 801548c:	b29b      	uxth	r3, r3
 801548e:	4618      	mov	r0, r3
 8015490:	f7fa fb0a 	bl	800faa8 <lwip_htons>
 8015494:	4603      	mov	r3, r0
 8015496:	b2db      	uxtb	r3, r3
 8015498:	f003 0303 	and.w	r3, r3, #3
 801549c:	2b00      	cmp	r3, #0
 801549e:	d001      	beq.n	80154a4 <tcp_receive+0xa8c>
 80154a0:	2301      	movs	r3, #1
 80154a2:	e000      	b.n	80154a6 <tcp_receive+0xa8e>
 80154a4:	2300      	movs	r3, #0
 80154a6:	442b      	add	r3, r5
 80154a8:	429c      	cmp	r4, r3
 80154aa:	d206      	bcs.n	80154ba <tcp_receive+0xaa2>
 80154ac:	4b1e      	ldr	r3, [pc, #120]	; (8015528 <tcp_receive+0xb10>)
 80154ae:	f240 622b 	movw	r2, #1579	; 0x62b
 80154b2:	4923      	ldr	r1, [pc, #140]	; (8015540 <tcp_receive+0xb28>)
 80154b4:	481e      	ldr	r0, [pc, #120]	; (8015530 <tcp_receive+0xb18>)
 80154b6:	f006 fa19 	bl	801b8ec <printf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	891b      	ldrh	r3, [r3, #8]
 80154be:	461c      	mov	r4, r3
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	899b      	ldrh	r3, [r3, #12]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7fa faed 	bl	800faa8 <lwip_htons>
 80154ce:	4603      	mov	r3, r0
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	f003 0303 	and.w	r3, r3, #3
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d001      	beq.n	80154de <tcp_receive+0xac6>
 80154da:	2301      	movs	r3, #1
 80154dc:	e000      	b.n	80154e0 <tcp_receive+0xac8>
 80154de:	2300      	movs	r3, #0
 80154e0:	1919      	adds	r1, r3, r4
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80154e6:	b28b      	uxth	r3, r1
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	b29a      	uxth	r2, r3
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f7fc fe15 	bl	8012120 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	891b      	ldrh	r3, [r3, #8]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d028      	beq.n	8015552 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015500:	4b0d      	ldr	r3, [pc, #52]	; (8015538 <tcp_receive+0xb20>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d01d      	beq.n	8015544 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015508:	4b0b      	ldr	r3, [pc, #44]	; (8015538 <tcp_receive+0xb20>)
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	685b      	ldr	r3, [r3, #4]
 8015510:	4619      	mov	r1, r3
 8015512:	4610      	mov	r0, r2
 8015514:	f7fb ff52 	bl	80113bc <pbuf_cat>
 8015518:	e018      	b.n	801554c <tcp_receive+0xb34>
 801551a:	bf00      	nop
 801551c:	20004f36 	.word	0x20004f36
 8015520:	20004f2c 	.word	0x20004f2c
 8015524:	20004f0c 	.word	0x20004f0c
 8015528:	08026838 	.word	0x08026838
 801552c:	08026c18 	.word	0x08026c18
 8015530:	08026884 	.word	0x08026884
 8015534:	08026c54 	.word	0x08026c54
 8015538:	20004f3c 	.word	0x20004f3c
 801553c:	20004f39 	.word	0x20004f39
 8015540:	08026c74 	.word	0x08026c74
            } else {
              recv_data = cseg->p;
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	4a70      	ldr	r2, [pc, #448]	; (801570c <tcp_receive+0xcf4>)
 801554a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801554c:	68bb      	ldr	r3, [r7, #8]
 801554e:	2200      	movs	r2, #0
 8015550:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	899b      	ldrh	r3, [r3, #12]
 8015558:	b29b      	uxth	r3, r3
 801555a:	4618      	mov	r0, r3
 801555c:	f7fa faa4 	bl	800faa8 <lwip_htons>
 8015560:	4603      	mov	r3, r0
 8015562:	b2db      	uxtb	r3, r3
 8015564:	f003 0301 	and.w	r3, r3, #1
 8015568:	2b00      	cmp	r3, #0
 801556a:	d00d      	beq.n	8015588 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801556c:	4b68      	ldr	r3, [pc, #416]	; (8015710 <tcp_receive+0xcf8>)
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	f043 0320 	orr.w	r3, r3, #32
 8015574:	b2da      	uxtb	r2, r3
 8015576:	4b66      	ldr	r3, [pc, #408]	; (8015710 <tcp_receive+0xcf8>)
 8015578:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7d1b      	ldrb	r3, [r3, #20]
 801557e:	2b04      	cmp	r3, #4
 8015580:	d102      	bne.n	8015588 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2207      	movs	r2, #7
 8015586:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015590:	68b8      	ldr	r0, [r7, #8]
 8015592:	f7fd faea 	bl	8012b6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801559a:	2b00      	cmp	r3, #0
 801559c:	d008      	beq.n	80155b0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	685a      	ldr	r2, [r3, #4]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80155aa:	429a      	cmp	r2, r3
 80155ac:	f43f af43 	beq.w	8015436 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	8b5b      	ldrh	r3, [r3, #26]
 80155b4:	f003 0301 	and.w	r3, r3, #1
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d00e      	beq.n	80155da <tcp_receive+0xbc2>
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	8b5b      	ldrh	r3, [r3, #26]
 80155c0:	f023 0301 	bic.w	r3, r3, #1
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	835a      	strh	r2, [r3, #26]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	8b5b      	ldrh	r3, [r3, #26]
 80155ce:	f043 0302 	orr.w	r3, r3, #2
 80155d2:	b29a      	uxth	r2, r3
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80155d8:	e188      	b.n	80158ec <tcp_receive+0xed4>
        tcp_ack(pcb);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	8b5b      	ldrh	r3, [r3, #26]
 80155de:	f043 0301 	orr.w	r3, r3, #1
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80155e8:	e180      	b.n	80158ec <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d106      	bne.n	8015600 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80155f2:	4848      	ldr	r0, [pc, #288]	; (8015714 <tcp_receive+0xcfc>)
 80155f4:	f7fd faf0 	bl	8012bd8 <tcp_seg_copy>
 80155f8:	4602      	mov	r2, r0
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	675a      	str	r2, [r3, #116]	; 0x74
 80155fe:	e16d      	b.n	80158dc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015600:	2300      	movs	r3, #0
 8015602:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015608:	63bb      	str	r3, [r7, #56]	; 0x38
 801560a:	e157      	b.n	80158bc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	685a      	ldr	r2, [r3, #4]
 8015612:	4b41      	ldr	r3, [pc, #260]	; (8015718 <tcp_receive+0xd00>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	429a      	cmp	r2, r3
 8015618:	d11d      	bne.n	8015656 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801561a:	4b3e      	ldr	r3, [pc, #248]	; (8015714 <tcp_receive+0xcfc>)
 801561c:	891a      	ldrh	r2, [r3, #8]
 801561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015620:	891b      	ldrh	r3, [r3, #8]
 8015622:	429a      	cmp	r2, r3
 8015624:	f240 814f 	bls.w	80158c6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015628:	483a      	ldr	r0, [pc, #232]	; (8015714 <tcp_receive+0xcfc>)
 801562a:	f7fd fad5 	bl	8012bd8 <tcp_seg_copy>
 801562e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015630:	697b      	ldr	r3, [r7, #20]
 8015632:	2b00      	cmp	r3, #0
 8015634:	f000 8149 	beq.w	80158ca <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801563a:	2b00      	cmp	r3, #0
 801563c:	d003      	beq.n	8015646 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015640:	697a      	ldr	r2, [r7, #20]
 8015642:	601a      	str	r2, [r3, #0]
 8015644:	e002      	b.n	801564c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	697a      	ldr	r2, [r7, #20]
 801564a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801564c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801564e:	6978      	ldr	r0, [r7, #20]
 8015650:	f7ff f8de 	bl	8014810 <tcp_oos_insert_segment>
                }
                break;
 8015654:	e139      	b.n	80158ca <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015658:	2b00      	cmp	r3, #0
 801565a:	d117      	bne.n	801568c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801565c:	4b2e      	ldr	r3, [pc, #184]	; (8015718 <tcp_receive+0xd00>)
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	685b      	ldr	r3, [r3, #4]
 8015666:	1ad3      	subs	r3, r2, r3
 8015668:	2b00      	cmp	r3, #0
 801566a:	da57      	bge.n	801571c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801566c:	4829      	ldr	r0, [pc, #164]	; (8015714 <tcp_receive+0xcfc>)
 801566e:	f7fd fab3 	bl	8012bd8 <tcp_seg_copy>
 8015672:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	2b00      	cmp	r3, #0
 8015678:	f000 8129 	beq.w	80158ce <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	69ba      	ldr	r2, [r7, #24]
 8015680:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015684:	69b8      	ldr	r0, [r7, #24]
 8015686:	f7ff f8c3 	bl	8014810 <tcp_oos_insert_segment>
                  }
                  break;
 801568a:	e120      	b.n	80158ce <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801568c:	4b22      	ldr	r3, [pc, #136]	; (8015718 <tcp_receive+0xd00>)
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	1ad3      	subs	r3, r2, r3
 8015698:	3b01      	subs	r3, #1
 801569a:	2b00      	cmp	r3, #0
 801569c:	db3e      	blt.n	801571c <tcp_receive+0xd04>
 801569e:	4b1e      	ldr	r3, [pc, #120]	; (8015718 <tcp_receive+0xd00>)
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156a4:	68db      	ldr	r3, [r3, #12]
 80156a6:	685b      	ldr	r3, [r3, #4]
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	3301      	adds	r3, #1
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	dc35      	bgt.n	801571c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80156b0:	4818      	ldr	r0, [pc, #96]	; (8015714 <tcp_receive+0xcfc>)
 80156b2:	f7fd fa91 	bl	8012bd8 <tcp_seg_copy>
 80156b6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f000 8109 	beq.w	80158d2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80156c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156c8:	8912      	ldrh	r2, [r2, #8]
 80156ca:	441a      	add	r2, r3
 80156cc:	4b12      	ldr	r3, [pc, #72]	; (8015718 <tcp_receive+0xd00>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	1ad3      	subs	r3, r2, r3
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	dd12      	ble.n	80156fc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80156d6:	4b10      	ldr	r3, [pc, #64]	; (8015718 <tcp_receive+0xd00>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	b29a      	uxth	r2, r3
 80156dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	1ad3      	subs	r3, r2, r3
 80156e6:	b29a      	uxth	r2, r3
 80156e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80156ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ee:	685a      	ldr	r2, [r3, #4]
 80156f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156f2:	891b      	ldrh	r3, [r3, #8]
 80156f4:	4619      	mov	r1, r3
 80156f6:	4610      	mov	r0, r2
 80156f8:	f7fb fc0c 	bl	8010f14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80156fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156fe:	69fa      	ldr	r2, [r7, #28]
 8015700:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015702:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015704:	69f8      	ldr	r0, [r7, #28]
 8015706:	f7ff f883 	bl	8014810 <tcp_oos_insert_segment>
                  }
                  break;
 801570a:	e0e2      	b.n	80158d2 <tcp_receive+0xeba>
 801570c:	20004f3c 	.word	0x20004f3c
 8015710:	20004f39 	.word	0x20004f39
 8015714:	20004f0c 	.word	0x20004f0c
 8015718:	20004f2c 	.word	0x20004f2c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801571e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	f040 80c6 	bne.w	80158b6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801572a:	4b80      	ldr	r3, [pc, #512]	; (801592c <tcp_receive+0xf14>)
 801572c:	681a      	ldr	r2, [r3, #0]
 801572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015730:	68db      	ldr	r3, [r3, #12]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015736:	2b00      	cmp	r3, #0
 8015738:	f340 80bd 	ble.w	80158b6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801573e:	68db      	ldr	r3, [r3, #12]
 8015740:	899b      	ldrh	r3, [r3, #12]
 8015742:	b29b      	uxth	r3, r3
 8015744:	4618      	mov	r0, r3
 8015746:	f7fa f9af 	bl	800faa8 <lwip_htons>
 801574a:	4603      	mov	r3, r0
 801574c:	b2db      	uxtb	r3, r3
 801574e:	f003 0301 	and.w	r3, r3, #1
 8015752:	2b00      	cmp	r3, #0
 8015754:	f040 80bf 	bne.w	80158d6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015758:	4875      	ldr	r0, [pc, #468]	; (8015930 <tcp_receive+0xf18>)
 801575a:	f7fd fa3d 	bl	8012bd8 <tcp_seg_copy>
 801575e:	4602      	mov	r2, r0
 8015760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015762:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	2b00      	cmp	r3, #0
 801576a:	f000 80b6 	beq.w	80158da <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015770:	68db      	ldr	r3, [r3, #12]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015776:	8912      	ldrh	r2, [r2, #8]
 8015778:	441a      	add	r2, r3
 801577a:	4b6c      	ldr	r3, [pc, #432]	; (801592c <tcp_receive+0xf14>)
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	1ad3      	subs	r3, r2, r3
 8015780:	2b00      	cmp	r3, #0
 8015782:	dd12      	ble.n	80157aa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015784:	4b69      	ldr	r3, [pc, #420]	; (801592c <tcp_receive+0xf14>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	b29a      	uxth	r2, r3
 801578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	b29b      	uxth	r3, r3
 8015792:	1ad3      	subs	r3, r2, r3
 8015794:	b29a      	uxth	r2, r3
 8015796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015798:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801579c:	685a      	ldr	r2, [r3, #4]
 801579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157a0:	891b      	ldrh	r3, [r3, #8]
 80157a2:	4619      	mov	r1, r3
 80157a4:	4610      	mov	r0, r2
 80157a6:	f7fb fbb5 	bl	8010f14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80157aa:	4b62      	ldr	r3, [pc, #392]	; (8015934 <tcp_receive+0xf1c>)
 80157ac:	881b      	ldrh	r3, [r3, #0]
 80157ae:	461a      	mov	r2, r3
 80157b0:	4b5e      	ldr	r3, [pc, #376]	; (801592c <tcp_receive+0xf14>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	441a      	add	r2, r3
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157ba:	6879      	ldr	r1, [r7, #4]
 80157bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80157be:	440b      	add	r3, r1
 80157c0:	1ad3      	subs	r3, r2, r3
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	f340 8089 	ble.w	80158da <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80157c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	68db      	ldr	r3, [r3, #12]
 80157ce:	899b      	ldrh	r3, [r3, #12]
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fa f968 	bl	800faa8 <lwip_htons>
 80157d8:	4603      	mov	r3, r0
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	f003 0301 	and.w	r3, r3, #1
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d022      	beq.n	801582a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80157e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	68db      	ldr	r3, [r3, #12]
 80157ea:	899b      	ldrh	r3, [r3, #12]
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	b21b      	sxth	r3, r3
 80157f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80157f4:	b21c      	sxth	r4, r3
 80157f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	899b      	ldrh	r3, [r3, #12]
 80157fe:	b29b      	uxth	r3, r3
 8015800:	4618      	mov	r0, r3
 8015802:	f7fa f951 	bl	800faa8 <lwip_htons>
 8015806:	4603      	mov	r3, r0
 8015808:	b2db      	uxtb	r3, r3
 801580a:	b29b      	uxth	r3, r3
 801580c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015810:	b29b      	uxth	r3, r3
 8015812:	4618      	mov	r0, r3
 8015814:	f7fa f948 	bl	800faa8 <lwip_htons>
 8015818:	4603      	mov	r3, r0
 801581a:	b21b      	sxth	r3, r3
 801581c:	4323      	orrs	r3, r4
 801581e:	b21a      	sxth	r2, r3
 8015820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	68db      	ldr	r3, [r3, #12]
 8015826:	b292      	uxth	r2, r2
 8015828:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801582e:	b29a      	uxth	r2, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015834:	4413      	add	r3, r2
 8015836:	b299      	uxth	r1, r3
 8015838:	4b3c      	ldr	r3, [pc, #240]	; (801592c <tcp_receive+0xf14>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	b29a      	uxth	r2, r3
 801583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	1a8a      	subs	r2, r1, r2
 8015844:	b292      	uxth	r2, r2
 8015846:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	685a      	ldr	r2, [r3, #4]
 801584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	891b      	ldrh	r3, [r3, #8]
 8015854:	4619      	mov	r1, r3
 8015856:	4610      	mov	r0, r2
 8015858:	f7fb fb5c 	bl	8010f14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	891c      	ldrh	r4, [r3, #8]
 8015862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	68db      	ldr	r3, [r3, #12]
 8015868:	899b      	ldrh	r3, [r3, #12]
 801586a:	b29b      	uxth	r3, r3
 801586c:	4618      	mov	r0, r3
 801586e:	f7fa f91b 	bl	800faa8 <lwip_htons>
 8015872:	4603      	mov	r3, r0
 8015874:	b2db      	uxtb	r3, r3
 8015876:	f003 0303 	and.w	r3, r3, #3
 801587a:	2b00      	cmp	r3, #0
 801587c:	d001      	beq.n	8015882 <tcp_receive+0xe6a>
 801587e:	2301      	movs	r3, #1
 8015880:	e000      	b.n	8015884 <tcp_receive+0xe6c>
 8015882:	2300      	movs	r3, #0
 8015884:	4423      	add	r3, r4
 8015886:	b29a      	uxth	r2, r3
 8015888:	4b2a      	ldr	r3, [pc, #168]	; (8015934 <tcp_receive+0xf1c>)
 801588a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801588c:	4b29      	ldr	r3, [pc, #164]	; (8015934 <tcp_receive+0xf1c>)
 801588e:	881b      	ldrh	r3, [r3, #0]
 8015890:	461a      	mov	r2, r3
 8015892:	4b26      	ldr	r3, [pc, #152]	; (801592c <tcp_receive+0xf14>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	441a      	add	r2, r3
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801589c:	6879      	ldr	r1, [r7, #4]
 801589e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80158a0:	440b      	add	r3, r1
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d019      	beq.n	80158da <tcp_receive+0xec2>
 80158a6:	4b24      	ldr	r3, [pc, #144]	; (8015938 <tcp_receive+0xf20>)
 80158a8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80158ac:	4923      	ldr	r1, [pc, #140]	; (801593c <tcp_receive+0xf24>)
 80158ae:	4824      	ldr	r0, [pc, #144]	; (8015940 <tcp_receive+0xf28>)
 80158b0:	f006 f81c 	bl	801b8ec <printf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80158b4:	e011      	b.n	80158da <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80158b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80158bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f47f aea4 	bne.w	801560c <tcp_receive+0xbf4>
 80158c4:	e00a      	b.n	80158dc <tcp_receive+0xec4>
                break;
 80158c6:	bf00      	nop
 80158c8:	e008      	b.n	80158dc <tcp_receive+0xec4>
                break;
 80158ca:	bf00      	nop
 80158cc:	e006      	b.n	80158dc <tcp_receive+0xec4>
                  break;
 80158ce:	bf00      	nop
 80158d0:	e004      	b.n	80158dc <tcp_receive+0xec4>
                  break;
 80158d2:	bf00      	nop
 80158d4:	e002      	b.n	80158dc <tcp_receive+0xec4>
                  break;
 80158d6:	bf00      	nop
 80158d8:	e000      	b.n	80158dc <tcp_receive+0xec4>
                break;
 80158da:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f001 fe8b 	bl	80175f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80158e2:	e003      	b.n	80158ec <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80158e4:	6878      	ldr	r0, [r7, #4]
 80158e6:	f001 fe87 	bl	80175f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80158ea:	e01a      	b.n	8015922 <tcp_receive+0xf0a>
 80158ec:	e019      	b.n	8015922 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80158ee:	4b0f      	ldr	r3, [pc, #60]	; (801592c <tcp_receive+0xf14>)
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158f6:	1ad3      	subs	r3, r2, r3
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	db0a      	blt.n	8015912 <tcp_receive+0xefa>
 80158fc:	4b0b      	ldr	r3, [pc, #44]	; (801592c <tcp_receive+0xf14>)
 80158fe:	681a      	ldr	r2, [r3, #0]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015904:	6879      	ldr	r1, [r7, #4]
 8015906:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015908:	440b      	add	r3, r1
 801590a:	1ad3      	subs	r3, r2, r3
 801590c:	3301      	adds	r3, #1
 801590e:	2b00      	cmp	r3, #0
 8015910:	dd07      	ble.n	8015922 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	8b5b      	ldrh	r3, [r3, #26]
 8015916:	f043 0302 	orr.w	r3, r3, #2
 801591a:	b29a      	uxth	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015920:	e7ff      	b.n	8015922 <tcp_receive+0xf0a>
 8015922:	bf00      	nop
 8015924:	3750      	adds	r7, #80	; 0x50
 8015926:	46bd      	mov	sp, r7
 8015928:	bdb0      	pop	{r4, r5, r7, pc}
 801592a:	bf00      	nop
 801592c:	20004f2c 	.word	0x20004f2c
 8015930:	20004f0c 	.word	0x20004f0c
 8015934:	20004f36 	.word	0x20004f36
 8015938:	08026838 	.word	0x08026838
 801593c:	08026be0 	.word	0x08026be0
 8015940:	08026884 	.word	0x08026884

08015944 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801594a:	4b15      	ldr	r3, [pc, #84]	; (80159a0 <tcp_get_next_optbyte+0x5c>)
 801594c:	881b      	ldrh	r3, [r3, #0]
 801594e:	1c5a      	adds	r2, r3, #1
 8015950:	b291      	uxth	r1, r2
 8015952:	4a13      	ldr	r2, [pc, #76]	; (80159a0 <tcp_get_next_optbyte+0x5c>)
 8015954:	8011      	strh	r1, [r2, #0]
 8015956:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015958:	4b12      	ldr	r3, [pc, #72]	; (80159a4 <tcp_get_next_optbyte+0x60>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d004      	beq.n	801596a <tcp_get_next_optbyte+0x26>
 8015960:	4b11      	ldr	r3, [pc, #68]	; (80159a8 <tcp_get_next_optbyte+0x64>)
 8015962:	881b      	ldrh	r3, [r3, #0]
 8015964:	88fa      	ldrh	r2, [r7, #6]
 8015966:	429a      	cmp	r2, r3
 8015968:	d208      	bcs.n	801597c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801596a:	4b10      	ldr	r3, [pc, #64]	; (80159ac <tcp_get_next_optbyte+0x68>)
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	3314      	adds	r3, #20
 8015970:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015972:	88fb      	ldrh	r3, [r7, #6]
 8015974:	683a      	ldr	r2, [r7, #0]
 8015976:	4413      	add	r3, r2
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	e00b      	b.n	8015994 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801597c:	88fb      	ldrh	r3, [r7, #6]
 801597e:	b2da      	uxtb	r2, r3
 8015980:	4b09      	ldr	r3, [pc, #36]	; (80159a8 <tcp_get_next_optbyte+0x64>)
 8015982:	881b      	ldrh	r3, [r3, #0]
 8015984:	b2db      	uxtb	r3, r3
 8015986:	1ad3      	subs	r3, r2, r3
 8015988:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801598a:	4b06      	ldr	r3, [pc, #24]	; (80159a4 <tcp_get_next_optbyte+0x60>)
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	797b      	ldrb	r3, [r7, #5]
 8015990:	4413      	add	r3, r2
 8015992:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015994:	4618      	mov	r0, r3
 8015996:	370c      	adds	r7, #12
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr
 80159a0:	20004f28 	.word	0x20004f28
 80159a4:	20004f24 	.word	0x20004f24
 80159a8:	20004f22 	.word	0x20004f22
 80159ac:	20004f1c 	.word	0x20004f1c

080159b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b084      	sub	sp, #16
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d106      	bne.n	80159cc <tcp_parseopt+0x1c>
 80159be:	4b32      	ldr	r3, [pc, #200]	; (8015a88 <tcp_parseopt+0xd8>)
 80159c0:	f240 727d 	movw	r2, #1917	; 0x77d
 80159c4:	4931      	ldr	r1, [pc, #196]	; (8015a8c <tcp_parseopt+0xdc>)
 80159c6:	4832      	ldr	r0, [pc, #200]	; (8015a90 <tcp_parseopt+0xe0>)
 80159c8:	f005 ff90 	bl	801b8ec <printf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80159cc:	4b31      	ldr	r3, [pc, #196]	; (8015a94 <tcp_parseopt+0xe4>)
 80159ce:	881b      	ldrh	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d055      	beq.n	8015a80 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80159d4:	4b30      	ldr	r3, [pc, #192]	; (8015a98 <tcp_parseopt+0xe8>)
 80159d6:	2200      	movs	r2, #0
 80159d8:	801a      	strh	r2, [r3, #0]
 80159da:	e045      	b.n	8015a68 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80159dc:	f7ff ffb2 	bl	8015944 <tcp_get_next_optbyte>
 80159e0:	4603      	mov	r3, r0
 80159e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80159e4:	7bfb      	ldrb	r3, [r7, #15]
 80159e6:	2b02      	cmp	r3, #2
 80159e8:	d006      	beq.n	80159f8 <tcp_parseopt+0x48>
 80159ea:	2b02      	cmp	r3, #2
 80159ec:	dc2b      	bgt.n	8015a46 <tcp_parseopt+0x96>
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d041      	beq.n	8015a76 <tcp_parseopt+0xc6>
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d127      	bne.n	8015a46 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80159f6:	e037      	b.n	8015a68 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80159f8:	f7ff ffa4 	bl	8015944 <tcp_get_next_optbyte>
 80159fc:	4603      	mov	r3, r0
 80159fe:	2b04      	cmp	r3, #4
 8015a00:	d13b      	bne.n	8015a7a <tcp_parseopt+0xca>
 8015a02:	4b25      	ldr	r3, [pc, #148]	; (8015a98 <tcp_parseopt+0xe8>)
 8015a04:	881b      	ldrh	r3, [r3, #0]
 8015a06:	3301      	adds	r3, #1
 8015a08:	4a22      	ldr	r2, [pc, #136]	; (8015a94 <tcp_parseopt+0xe4>)
 8015a0a:	8812      	ldrh	r2, [r2, #0]
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	da34      	bge.n	8015a7a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015a10:	f7ff ff98 	bl	8015944 <tcp_get_next_optbyte>
 8015a14:	4603      	mov	r3, r0
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	021b      	lsls	r3, r3, #8
 8015a1a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015a1c:	f7ff ff92 	bl	8015944 <tcp_get_next_optbyte>
 8015a20:	4603      	mov	r3, r0
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	89bb      	ldrh	r3, [r7, #12]
 8015a26:	4313      	orrs	r3, r2
 8015a28:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015a2a:	89bb      	ldrh	r3, [r7, #12]
 8015a2c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015a30:	d804      	bhi.n	8015a3c <tcp_parseopt+0x8c>
 8015a32:	89bb      	ldrh	r3, [r7, #12]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d001      	beq.n	8015a3c <tcp_parseopt+0x8c>
 8015a38:	89ba      	ldrh	r2, [r7, #12]
 8015a3a:	e001      	b.n	8015a40 <tcp_parseopt+0x90>
 8015a3c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015a44:	e010      	b.n	8015a68 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015a46:	f7ff ff7d 	bl	8015944 <tcp_get_next_optbyte>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015a4e:	7afb      	ldrb	r3, [r7, #11]
 8015a50:	2b01      	cmp	r3, #1
 8015a52:	d914      	bls.n	8015a7e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015a54:	7afb      	ldrb	r3, [r7, #11]
 8015a56:	b29a      	uxth	r2, r3
 8015a58:	4b0f      	ldr	r3, [pc, #60]	; (8015a98 <tcp_parseopt+0xe8>)
 8015a5a:	881b      	ldrh	r3, [r3, #0]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	3b02      	subs	r3, #2
 8015a62:	b29a      	uxth	r2, r3
 8015a64:	4b0c      	ldr	r3, [pc, #48]	; (8015a98 <tcp_parseopt+0xe8>)
 8015a66:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015a68:	4b0b      	ldr	r3, [pc, #44]	; (8015a98 <tcp_parseopt+0xe8>)
 8015a6a:	881a      	ldrh	r2, [r3, #0]
 8015a6c:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <tcp_parseopt+0xe4>)
 8015a6e:	881b      	ldrh	r3, [r3, #0]
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d3b3      	bcc.n	80159dc <tcp_parseopt+0x2c>
 8015a74:	e004      	b.n	8015a80 <tcp_parseopt+0xd0>
          return;
 8015a76:	bf00      	nop
 8015a78:	e002      	b.n	8015a80 <tcp_parseopt+0xd0>
            return;
 8015a7a:	bf00      	nop
 8015a7c:	e000      	b.n	8015a80 <tcp_parseopt+0xd0>
            return;
 8015a7e:	bf00      	nop
      }
    }
  }
}
 8015a80:	3710      	adds	r7, #16
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	08026838 	.word	0x08026838
 8015a8c:	08026c9c 	.word	0x08026c9c
 8015a90:	08026884 	.word	0x08026884
 8015a94:	20004f20 	.word	0x20004f20
 8015a98:	20004f28 	.word	0x20004f28

08015a9c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015aa0:	4b05      	ldr	r3, [pc, #20]	; (8015ab8 <tcp_trigger_input_pcb_close+0x1c>)
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	f043 0310 	orr.w	r3, r3, #16
 8015aa8:	b2da      	uxtb	r2, r3
 8015aaa:	4b03      	ldr	r3, [pc, #12]	; (8015ab8 <tcp_trigger_input_pcb_close+0x1c>)
 8015aac:	701a      	strb	r2, [r3, #0]
}
 8015aae:	bf00      	nop
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr
 8015ab8:	20004f39 	.word	0x20004f39

08015abc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	60f8      	str	r0, [r7, #12]
 8015ac4:	60b9      	str	r1, [r7, #8]
 8015ac6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00a      	beq.n	8015ae4 <tcp_route+0x28>
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	7a1b      	ldrb	r3, [r3, #8]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d006      	beq.n	8015ae4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	7a1b      	ldrb	r3, [r3, #8]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7fb f812 	bl	8010b04 <netif_get_by_index>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	e003      	b.n	8015aec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f003 fe35 	bl	8019754 <ip4_route>
 8015aea:	4603      	mov	r3, r0
  }
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3710      	adds	r7, #16
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015af4:	b590      	push	{r4, r7, lr}
 8015af6:	b087      	sub	sp, #28
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	60b9      	str	r1, [r7, #8]
 8015afe:	603b      	str	r3, [r7, #0]
 8015b00:	4613      	mov	r3, r2
 8015b02:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d105      	bne.n	8015b16 <tcp_create_segment+0x22>
 8015b0a:	4b44      	ldr	r3, [pc, #272]	; (8015c1c <tcp_create_segment+0x128>)
 8015b0c:	22a3      	movs	r2, #163	; 0xa3
 8015b0e:	4944      	ldr	r1, [pc, #272]	; (8015c20 <tcp_create_segment+0x12c>)
 8015b10:	4844      	ldr	r0, [pc, #272]	; (8015c24 <tcp_create_segment+0x130>)
 8015b12:	f005 feeb 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015b16:	68bb      	ldr	r3, [r7, #8]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d105      	bne.n	8015b28 <tcp_create_segment+0x34>
 8015b1c:	4b3f      	ldr	r3, [pc, #252]	; (8015c1c <tcp_create_segment+0x128>)
 8015b1e:	22a4      	movs	r2, #164	; 0xa4
 8015b20:	4941      	ldr	r1, [pc, #260]	; (8015c28 <tcp_create_segment+0x134>)
 8015b22:	4840      	ldr	r0, [pc, #256]	; (8015c24 <tcp_create_segment+0x130>)
 8015b24:	f005 fee2 	bl	801b8ec <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015b28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	f003 0304 	and.w	r3, r3, #4
 8015b34:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015b36:	2003      	movs	r0, #3
 8015b38:	f7fa fca2 	bl	8010480 <memp_malloc>
 8015b3c:	6138      	str	r0, [r7, #16]
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d104      	bne.n	8015b4e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015b44:	68b8      	ldr	r0, [r7, #8]
 8015b46:	f7fb fb6b 	bl	8011220 <pbuf_free>
    return NULL;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e061      	b.n	8015c12 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b54:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	68ba      	ldr	r2, [r7, #8]
 8015b60:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	891a      	ldrh	r2, [r3, #8]
 8015b66:	7dfb      	ldrb	r3, [r7, #23]
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d205      	bcs.n	8015b7a <tcp_create_segment+0x86>
 8015b6e:	4b2b      	ldr	r3, [pc, #172]	; (8015c1c <tcp_create_segment+0x128>)
 8015b70:	22b0      	movs	r2, #176	; 0xb0
 8015b72:	492e      	ldr	r1, [pc, #184]	; (8015c2c <tcp_create_segment+0x138>)
 8015b74:	482b      	ldr	r0, [pc, #172]	; (8015c24 <tcp_create_segment+0x130>)
 8015b76:	f005 feb9 	bl	801b8ec <printf>
  seg->len = p->tot_len - optlen;
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	891a      	ldrh	r2, [r3, #8]
 8015b7e:	7dfb      	ldrb	r3, [r7, #23]
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	1ad3      	subs	r3, r2, r3
 8015b84:	b29a      	uxth	r2, r3
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015b8a:	2114      	movs	r1, #20
 8015b8c:	68b8      	ldr	r0, [r7, #8]
 8015b8e:	f7fb fab1 	bl	80110f4 <pbuf_add_header>
 8015b92:	4603      	mov	r3, r0
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d004      	beq.n	8015ba2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015b98:	6938      	ldr	r0, [r7, #16]
 8015b9a:	f7fc ffe6 	bl	8012b6a <tcp_seg_free>
    return NULL;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	e037      	b.n	8015c12 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015ba2:	693b      	ldr	r3, [r7, #16]
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	685a      	ldr	r2, [r3, #4]
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	8ada      	ldrh	r2, [r3, #22]
 8015bb0:	693b      	ldr	r3, [r7, #16]
 8015bb2:	68dc      	ldr	r4, [r3, #12]
 8015bb4:	4610      	mov	r0, r2
 8015bb6:	f7f9 ff77 	bl	800faa8 <lwip_htons>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	8b1a      	ldrh	r2, [r3, #24]
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	68dc      	ldr	r4, [r3, #12]
 8015bc6:	4610      	mov	r0, r2
 8015bc8:	f7f9 ff6e 	bl	800faa8 <lwip_htons>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	68dc      	ldr	r4, [r3, #12]
 8015bd4:	6838      	ldr	r0, [r7, #0]
 8015bd6:	f7f9 ff7c 	bl	800fad2 <lwip_htonl>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015bde:	7dfb      	ldrb	r3, [r7, #23]
 8015be0:	089b      	lsrs	r3, r3, #2
 8015be2:	b2db      	uxtb	r3, r3
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	3305      	adds	r3, #5
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	031b      	lsls	r3, r3, #12
 8015bec:	b29a      	uxth	r2, r3
 8015bee:	79fb      	ldrb	r3, [r7, #7]
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	4313      	orrs	r3, r2
 8015bf4:	b29a      	uxth	r2, r3
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	68dc      	ldr	r4, [r3, #12]
 8015bfa:	4610      	mov	r0, r2
 8015bfc:	f7f9 ff54 	bl	800faa8 <lwip_htons>
 8015c00:	4603      	mov	r3, r0
 8015c02:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	749a      	strb	r2, [r3, #18]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015c10:	693b      	ldr	r3, [r7, #16]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	371c      	adds	r7, #28
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd90      	pop	{r4, r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	08026cb8 	.word	0x08026cb8
 8015c20:	08026cec 	.word	0x08026cec
 8015c24:	08026d0c 	.word	0x08026d0c
 8015c28:	08026d34 	.word	0x08026d34
 8015c2c:	08026d58 	.word	0x08026d58

08015c30 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b086      	sub	sp, #24
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	607b      	str	r3, [r7, #4]
 8015c38:	4603      	mov	r3, r0
 8015c3a:	73fb      	strb	r3, [r7, #15]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	81bb      	strh	r3, [r7, #12]
 8015c40:	4613      	mov	r3, r2
 8015c42:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015c44:	89bb      	ldrh	r3, [r7, #12]
 8015c46:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d105      	bne.n	8015c5a <tcp_pbuf_prealloc+0x2a>
 8015c4e:	4b30      	ldr	r3, [pc, #192]	; (8015d10 <tcp_pbuf_prealloc+0xe0>)
 8015c50:	22e8      	movs	r2, #232	; 0xe8
 8015c52:	4930      	ldr	r1, [pc, #192]	; (8015d14 <tcp_pbuf_prealloc+0xe4>)
 8015c54:	4830      	ldr	r0, [pc, #192]	; (8015d18 <tcp_pbuf_prealloc+0xe8>)
 8015c56:	f005 fe49 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015c5a:	6a3b      	ldr	r3, [r7, #32]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d105      	bne.n	8015c6c <tcp_pbuf_prealloc+0x3c>
 8015c60:	4b2b      	ldr	r3, [pc, #172]	; (8015d10 <tcp_pbuf_prealloc+0xe0>)
 8015c62:	22e9      	movs	r2, #233	; 0xe9
 8015c64:	492d      	ldr	r1, [pc, #180]	; (8015d1c <tcp_pbuf_prealloc+0xec>)
 8015c66:	482c      	ldr	r0, [pc, #176]	; (8015d18 <tcp_pbuf_prealloc+0xe8>)
 8015c68:	f005 fe40 	bl	801b8ec <printf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015c6c:	89ba      	ldrh	r2, [r7, #12]
 8015c6e:	897b      	ldrh	r3, [r7, #10]
 8015c70:	429a      	cmp	r2, r3
 8015c72:	d221      	bcs.n	8015cb8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015c74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015c78:	f003 0302 	and.w	r3, r3, #2
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d111      	bne.n	8015ca4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015c80:	6a3b      	ldr	r3, [r7, #32]
 8015c82:	8b5b      	ldrh	r3, [r3, #26]
 8015c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d115      	bne.n	8015cb8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015c8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d007      	beq.n	8015ca4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015c94:	6a3b      	ldr	r3, [r7, #32]
 8015c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d103      	bne.n	8015ca4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015c9c:	6a3b      	ldr	r3, [r7, #32]
 8015c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d009      	beq.n	8015cb8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015ca4:	89bb      	ldrh	r3, [r7, #12]
 8015ca6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015caa:	f023 0203 	bic.w	r2, r3, #3
 8015cae:	897b      	ldrh	r3, [r7, #10]
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	bf28      	it	cs
 8015cb4:	4613      	movcs	r3, r2
 8015cb6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015cb8:	8af9      	ldrh	r1, [r7, #22]
 8015cba:	7bfb      	ldrb	r3, [r7, #15]
 8015cbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7fa ffc9 	bl	8010c58 <pbuf_alloc>
 8015cc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	e019      	b.n	8015d06 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d006      	beq.n	8015ce8 <tcp_pbuf_prealloc+0xb8>
 8015cda:	4b0d      	ldr	r3, [pc, #52]	; (8015d10 <tcp_pbuf_prealloc+0xe0>)
 8015cdc:	f240 120b 	movw	r2, #267	; 0x10b
 8015ce0:	490f      	ldr	r1, [pc, #60]	; (8015d20 <tcp_pbuf_prealloc+0xf0>)
 8015ce2:	480d      	ldr	r0, [pc, #52]	; (8015d18 <tcp_pbuf_prealloc+0xe8>)
 8015ce4:	f005 fe02 	bl	801b8ec <printf>
  *oversize = p->len - length;
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	895a      	ldrh	r2, [r3, #10]
 8015cec:	89bb      	ldrh	r3, [r7, #12]
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	89ba      	ldrh	r2, [r7, #12]
 8015cfa:	811a      	strh	r2, [r3, #8]
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	891a      	ldrh	r2, [r3, #8]
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	815a      	strh	r2, [r3, #10]
  return p;
 8015d04:	693b      	ldr	r3, [r7, #16]
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3718      	adds	r7, #24
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	08026cb8 	.word	0x08026cb8
 8015d14:	08026d70 	.word	0x08026d70
 8015d18:	08026d0c 	.word	0x08026d0c
 8015d1c:	08026d94 	.word	0x08026d94
 8015d20:	08026db4 	.word	0x08026db4

08015d24 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	460b      	mov	r3, r1
 8015d2e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d106      	bne.n	8015d44 <tcp_write_checks+0x20>
 8015d36:	4b33      	ldr	r3, [pc, #204]	; (8015e04 <tcp_write_checks+0xe0>)
 8015d38:	f240 1233 	movw	r2, #307	; 0x133
 8015d3c:	4932      	ldr	r1, [pc, #200]	; (8015e08 <tcp_write_checks+0xe4>)
 8015d3e:	4833      	ldr	r0, [pc, #204]	; (8015e0c <tcp_write_checks+0xe8>)
 8015d40:	f005 fdd4 	bl	801b8ec <printf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	7d1b      	ldrb	r3, [r3, #20]
 8015d48:	2b04      	cmp	r3, #4
 8015d4a:	d00e      	beq.n	8015d6a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015d50:	2b07      	cmp	r3, #7
 8015d52:	d00a      	beq.n	8015d6a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015d58:	2b02      	cmp	r3, #2
 8015d5a:	d006      	beq.n	8015d6a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015d60:	2b03      	cmp	r3, #3
 8015d62:	d002      	beq.n	8015d6a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015d64:	f06f 030a 	mvn.w	r3, #10
 8015d68:	e048      	b.n	8015dfc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015d6a:	887b      	ldrh	r3, [r7, #2]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d101      	bne.n	8015d74 <tcp_write_checks+0x50>
    return ERR_OK;
 8015d70:	2300      	movs	r3, #0
 8015d72:	e043      	b.n	8015dfc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015d7a:	887a      	ldrh	r2, [r7, #2]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d909      	bls.n	8015d94 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	8b5b      	ldrh	r3, [r3, #26]
 8015d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d92:	e033      	b.n	8015dfc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d9a:	2b08      	cmp	r3, #8
 8015d9c:	d909      	bls.n	8015db2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	8b5b      	ldrh	r3, [r3, #26]
 8015da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015da6:	b29a      	uxth	r2, r3
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015dac:	f04f 33ff 	mov.w	r3, #4294967295
 8015db0:	e024      	b.n	8015dfc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d00f      	beq.n	8015ddc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d11a      	bne.n	8015dfa <tcp_write_checks+0xd6>
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d116      	bne.n	8015dfa <tcp_write_checks+0xd6>
 8015dcc:	4b0d      	ldr	r3, [pc, #52]	; (8015e04 <tcp_write_checks+0xe0>)
 8015dce:	f240 1255 	movw	r2, #341	; 0x155
 8015dd2:	490f      	ldr	r1, [pc, #60]	; (8015e10 <tcp_write_checks+0xec>)
 8015dd4:	480d      	ldr	r0, [pc, #52]	; (8015e0c <tcp_write_checks+0xe8>)
 8015dd6:	f005 fd89 	bl	801b8ec <printf>
 8015dda:	e00e      	b.n	8015dfa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d103      	bne.n	8015dec <tcp_write_checks+0xc8>
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d006      	beq.n	8015dfa <tcp_write_checks+0xd6>
 8015dec:	4b05      	ldr	r3, [pc, #20]	; (8015e04 <tcp_write_checks+0xe0>)
 8015dee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015df2:	4908      	ldr	r1, [pc, #32]	; (8015e14 <tcp_write_checks+0xf0>)
 8015df4:	4805      	ldr	r0, [pc, #20]	; (8015e0c <tcp_write_checks+0xe8>)
 8015df6:	f005 fd79 	bl	801b8ec <printf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015dfa:	2300      	movs	r3, #0
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	3708      	adds	r7, #8
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}
 8015e04:	08026cb8 	.word	0x08026cb8
 8015e08:	08026dc8 	.word	0x08026dc8
 8015e0c:	08026d0c 	.word	0x08026d0c
 8015e10:	08026de8 	.word	0x08026de8
 8015e14:	08026e24 	.word	0x08026e24

08015e18 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015e18:	b590      	push	{r4, r7, lr}
 8015e1a:	b09b      	sub	sp, #108	; 0x6c
 8015e1c:	af04      	add	r7, sp, #16
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	60b9      	str	r1, [r7, #8]
 8015e22:	4611      	mov	r1, r2
 8015e24:	461a      	mov	r2, r3
 8015e26:	460b      	mov	r3, r1
 8015e28:	80fb      	strh	r3, [r7, #6]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015e32:	2300      	movs	r3, #0
 8015e34:	653b      	str	r3, [r7, #80]	; 0x50
 8015e36:	2300      	movs	r3, #0
 8015e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8015e3e:	2300      	movs	r3, #0
 8015e40:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015e42:	2300      	movs	r3, #0
 8015e44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d109      	bne.n	8015e74 <tcp_write+0x5c>
 8015e60:	4ba4      	ldr	r3, [pc, #656]	; (80160f4 <tcp_write+0x2dc>)
 8015e62:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015e66:	49a4      	ldr	r1, [pc, #656]	; (80160f8 <tcp_write+0x2e0>)
 8015e68:	48a4      	ldr	r0, [pc, #656]	; (80160fc <tcp_write+0x2e4>)
 8015e6a:	f005 fd3f 	bl	801b8ec <printf>
 8015e6e:	f06f 030f 	mvn.w	r3, #15
 8015e72:	e32a      	b.n	80164ca <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015e7a:	085b      	lsrs	r3, r3, #1
 8015e7c:	b29a      	uxth	r2, r3
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e82:	4293      	cmp	r3, r2
 8015e84:	bf28      	it	cs
 8015e86:	4613      	movcs	r3, r2
 8015e88:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d102      	bne.n	8015e96 <tcp_write+0x7e>
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e94:	e000      	b.n	8015e98 <tcp_write+0x80>
 8015e96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e98:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015e9a:	68bb      	ldr	r3, [r7, #8]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d109      	bne.n	8015eb4 <tcp_write+0x9c>
 8015ea0:	4b94      	ldr	r3, [pc, #592]	; (80160f4 <tcp_write+0x2dc>)
 8015ea2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015ea6:	4996      	ldr	r1, [pc, #600]	; (8016100 <tcp_write+0x2e8>)
 8015ea8:	4894      	ldr	r0, [pc, #592]	; (80160fc <tcp_write+0x2e4>)
 8015eaa:	f005 fd1f 	bl	801b8ec <printf>
 8015eae:	f06f 030f 	mvn.w	r3, #15
 8015eb2:	e30a      	b.n	80164ca <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015eb4:	88fb      	ldrh	r3, [r7, #6]
 8015eb6:	4619      	mov	r1, r3
 8015eb8:	68f8      	ldr	r0, [r7, #12]
 8015eba:	f7ff ff33 	bl	8015d24 <tcp_write_checks>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015ec4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d002      	beq.n	8015ed2 <tcp_write+0xba>
    return err;
 8015ecc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015ed0:	e2fb      	b.n	80164ca <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ed8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015edc:	2300      	movs	r3, #0
 8015ede:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 80f6 	beq.w	80160d8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8015ef2:	e002      	b.n	8015efa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d1f8      	bne.n	8015ef4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f04:	7a9b      	ldrb	r3, [r3, #10]
 8015f06:	009b      	lsls	r3, r3, #2
 8015f08:	b29b      	uxth	r3, r3
 8015f0a:	f003 0304 	and.w	r3, r3, #4
 8015f0e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f14:	891b      	ldrh	r3, [r3, #8]
 8015f16:	4619      	mov	r1, r3
 8015f18:	8c3b      	ldrh	r3, [r7, #32]
 8015f1a:	440b      	add	r3, r1
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	da06      	bge.n	8015f2e <tcp_write+0x116>
 8015f20:	4b74      	ldr	r3, [pc, #464]	; (80160f4 <tcp_write+0x2dc>)
 8015f22:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015f26:	4977      	ldr	r1, [pc, #476]	; (8016104 <tcp_write+0x2ec>)
 8015f28:	4874      	ldr	r0, [pc, #464]	; (80160fc <tcp_write+0x2e4>)
 8015f2a:	f005 fcdf 	bl	801b8ec <printf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f30:	891a      	ldrh	r2, [r3, #8]
 8015f32:	8c3b      	ldrh	r3, [r7, #32]
 8015f34:	4413      	add	r3, r2
 8015f36:	b29b      	uxth	r3, r3
 8015f38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015f3a:	1ad3      	subs	r3, r2, r3
 8015f3c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015f44:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015f46:	8a7b      	ldrh	r3, [r7, #18]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d026      	beq.n	8015f9a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015f4c:	8a7b      	ldrh	r3, [r7, #18]
 8015f4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d206      	bcs.n	8015f62 <tcp_write+0x14a>
 8015f54:	4b67      	ldr	r3, [pc, #412]	; (80160f4 <tcp_write+0x2dc>)
 8015f56:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8015f5a:	496b      	ldr	r1, [pc, #428]	; (8016108 <tcp_write+0x2f0>)
 8015f5c:	4867      	ldr	r0, [pc, #412]	; (80160fc <tcp_write+0x2e4>)
 8015f5e:	f005 fcc5 	bl	801b8ec <printf>
      seg = last_unsent;
 8015f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f64:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015f66:	8a7b      	ldrh	r3, [r7, #18]
 8015f68:	88fa      	ldrh	r2, [r7, #6]
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	bf28      	it	cs
 8015f6e:	4613      	movcs	r3, r2
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f74:	4293      	cmp	r3, r2
 8015f76:	bf28      	it	cs
 8015f78:	4613      	movcs	r3, r2
 8015f7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015f7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f82:	4413      	add	r3, r2
 8015f84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015f88:	8a7a      	ldrh	r2, [r7, #18]
 8015f8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f8c:	1ad3      	subs	r3, r2, r3
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015f92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015f94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f96:	1ad3      	subs	r3, r2, r3
 8015f98:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015f9a:	8a7b      	ldrh	r3, [r7, #18]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <tcp_write+0x1a0>
 8015fa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fa4:	88fb      	ldrh	r3, [r7, #6]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d006      	beq.n	8015fb8 <tcp_write+0x1a0>
 8015faa:	4b52      	ldr	r3, [pc, #328]	; (80160f4 <tcp_write+0x2dc>)
 8015fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015fb0:	4956      	ldr	r1, [pc, #344]	; (801610c <tcp_write+0x2f4>)
 8015fb2:	4852      	ldr	r0, [pc, #328]	; (80160fc <tcp_write+0x2e4>)
 8015fb4:	f005 fc9a 	bl	801b8ec <printf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015fb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015fbc:	88fb      	ldrh	r3, [r7, #6]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	f080 8167 	bcs.w	8016292 <tcp_write+0x47a>
 8015fc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	f000 8163 	beq.w	8016292 <tcp_write+0x47a>
 8015fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fce:	891b      	ldrh	r3, [r3, #8]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	f000 815e 	beq.w	8016292 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015fd6:	88fa      	ldrh	r2, [r7, #6]
 8015fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015fdc:	1ad2      	subs	r2, r2, r3
 8015fde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015fe0:	4293      	cmp	r3, r2
 8015fe2:	bfa8      	it	ge
 8015fe4:	4613      	movge	r3, r2
 8015fe6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fea:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015fec:	797b      	ldrb	r3, [r7, #5]
 8015fee:	f003 0301 	and.w	r3, r3, #1
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d027      	beq.n	8016046 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015ff6:	f107 0012 	add.w	r0, r7, #18
 8015ffa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ffc:	8bf9      	ldrh	r1, [r7, #30]
 8015ffe:	2301      	movs	r3, #1
 8016000:	9302      	str	r3, [sp, #8]
 8016002:	797b      	ldrb	r3, [r7, #5]
 8016004:	9301      	str	r3, [sp, #4]
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	4603      	mov	r3, r0
 801600c:	2000      	movs	r0, #0
 801600e:	f7ff fe0f 	bl	8015c30 <tcp_pbuf_prealloc>
 8016012:	6578      	str	r0, [r7, #84]	; 0x54
 8016014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016016:	2b00      	cmp	r3, #0
 8016018:	f000 8225 	beq.w	8016466 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801601e:	6858      	ldr	r0, [r3, #4]
 8016020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016024:	68ba      	ldr	r2, [r7, #8]
 8016026:	4413      	add	r3, r2
 8016028:	8bfa      	ldrh	r2, [r7, #30]
 801602a:	4619      	mov	r1, r3
 801602c:	f005 f9b0 	bl	801b390 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016030:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016032:	f7fb f983 	bl	801133c <pbuf_clen>
 8016036:	4603      	mov	r3, r0
 8016038:	461a      	mov	r2, r3
 801603a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801603e:	4413      	add	r3, r2
 8016040:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016044:	e041      	b.n	80160ca <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	637b      	str	r3, [r7, #52]	; 0x34
 801604c:	e002      	b.n	8016054 <tcp_write+0x23c>
 801604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	637b      	str	r3, [r7, #52]	; 0x34
 8016054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d1f8      	bne.n	801604e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801605e:	7b1b      	ldrb	r3, [r3, #12]
 8016060:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d115      	bne.n	8016094 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801606e:	8952      	ldrh	r2, [r2, #10]
 8016070:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	429a      	cmp	r2, r3
 8016076:	d10d      	bne.n	8016094 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801607c:	2b00      	cmp	r3, #0
 801607e:	d006      	beq.n	801608e <tcp_write+0x276>
 8016080:	4b1c      	ldr	r3, [pc, #112]	; (80160f4 <tcp_write+0x2dc>)
 8016082:	f240 2231 	movw	r2, #561	; 0x231
 8016086:	4922      	ldr	r1, [pc, #136]	; (8016110 <tcp_write+0x2f8>)
 8016088:	481c      	ldr	r0, [pc, #112]	; (80160fc <tcp_write+0x2e4>)
 801608a:	f005 fc2f 	bl	801b8ec <printf>
          extendlen = seglen;
 801608e:	8bfb      	ldrh	r3, [r7, #30]
 8016090:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016092:	e01a      	b.n	80160ca <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016094:	8bfb      	ldrh	r3, [r7, #30]
 8016096:	2201      	movs	r2, #1
 8016098:	4619      	mov	r1, r3
 801609a:	2000      	movs	r0, #0
 801609c:	f7fa fddc 	bl	8010c58 <pbuf_alloc>
 80160a0:	6578      	str	r0, [r7, #84]	; 0x54
 80160a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	f000 81e0 	beq.w	801646a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80160aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160ae:	68ba      	ldr	r2, [r7, #8]
 80160b0:	441a      	add	r2, r3
 80160b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160b4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80160b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80160b8:	f7fb f940 	bl	801133c <pbuf_clen>
 80160bc:	4603      	mov	r3, r0
 80160be:	461a      	mov	r2, r3
 80160c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80160c4:	4413      	add	r3, r2
 80160c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80160ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160ce:	8bfb      	ldrh	r3, [r7, #30]
 80160d0:	4413      	add	r3, r2
 80160d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80160d6:	e0dc      	b.n	8016292 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80160de:	2b00      	cmp	r3, #0
 80160e0:	f000 80d7 	beq.w	8016292 <tcp_write+0x47a>
 80160e4:	4b03      	ldr	r3, [pc, #12]	; (80160f4 <tcp_write+0x2dc>)
 80160e6:	f240 224a 	movw	r2, #586	; 0x24a
 80160ea:	490a      	ldr	r1, [pc, #40]	; (8016114 <tcp_write+0x2fc>)
 80160ec:	4803      	ldr	r0, [pc, #12]	; (80160fc <tcp_write+0x2e4>)
 80160ee:	f005 fbfd 	bl	801b8ec <printf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80160f2:	e0ce      	b.n	8016292 <tcp_write+0x47a>
 80160f4:	08026cb8 	.word	0x08026cb8
 80160f8:	08026e58 	.word	0x08026e58
 80160fc:	08026d0c 	.word	0x08026d0c
 8016100:	08026e70 	.word	0x08026e70
 8016104:	08026ea4 	.word	0x08026ea4
 8016108:	08026ebc 	.word	0x08026ebc
 801610c:	08026edc 	.word	0x08026edc
 8016110:	08026efc 	.word	0x08026efc
 8016114:	08026f28 	.word	0x08026f28
    struct pbuf *p;
    u16_t left = len - pos;
 8016118:	88fa      	ldrh	r2, [r7, #6]
 801611a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801611e:	1ad3      	subs	r3, r2, r3
 8016120:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016122:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016126:	b29b      	uxth	r3, r3
 8016128:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801612a:	1ad3      	subs	r3, r2, r3
 801612c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801612e:	8b7a      	ldrh	r2, [r7, #26]
 8016130:	8bbb      	ldrh	r3, [r7, #28]
 8016132:	4293      	cmp	r3, r2
 8016134:	bf28      	it	cs
 8016136:	4613      	movcs	r3, r2
 8016138:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801613a:	797b      	ldrb	r3, [r7, #5]
 801613c:	f003 0301 	and.w	r3, r3, #1
 8016140:	2b00      	cmp	r3, #0
 8016142:	d036      	beq.n	80161b2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016144:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016148:	b29a      	uxth	r2, r3
 801614a:	8b3b      	ldrh	r3, [r7, #24]
 801614c:	4413      	add	r3, r2
 801614e:	b299      	uxth	r1, r3
 8016150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016152:	2b00      	cmp	r3, #0
 8016154:	bf0c      	ite	eq
 8016156:	2301      	moveq	r3, #1
 8016158:	2300      	movne	r3, #0
 801615a:	b2db      	uxtb	r3, r3
 801615c:	f107 0012 	add.w	r0, r7, #18
 8016160:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016162:	9302      	str	r3, [sp, #8]
 8016164:	797b      	ldrb	r3, [r7, #5]
 8016166:	9301      	str	r3, [sp, #4]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	4603      	mov	r3, r0
 801616e:	2036      	movs	r0, #54	; 0x36
 8016170:	f7ff fd5e 	bl	8015c30 <tcp_pbuf_prealloc>
 8016174:	6338      	str	r0, [r7, #48]	; 0x30
 8016176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016178:	2b00      	cmp	r3, #0
 801617a:	f000 8178 	beq.w	801646e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016180:	895b      	ldrh	r3, [r3, #10]
 8016182:	8b3a      	ldrh	r2, [r7, #24]
 8016184:	429a      	cmp	r2, r3
 8016186:	d906      	bls.n	8016196 <tcp_write+0x37e>
 8016188:	4b8c      	ldr	r3, [pc, #560]	; (80163bc <tcp_write+0x5a4>)
 801618a:	f240 2266 	movw	r2, #614	; 0x266
 801618e:	498c      	ldr	r1, [pc, #560]	; (80163c0 <tcp_write+0x5a8>)
 8016190:	488c      	ldr	r0, [pc, #560]	; (80163c4 <tcp_write+0x5ac>)
 8016192:	f005 fbab 	bl	801b8ec <printf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016198:	685a      	ldr	r2, [r3, #4]
 801619a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801619e:	18d0      	adds	r0, r2, r3
 80161a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161a4:	68ba      	ldr	r2, [r7, #8]
 80161a6:	4413      	add	r3, r2
 80161a8:	8b3a      	ldrh	r2, [r7, #24]
 80161aa:	4619      	mov	r1, r3
 80161ac:	f005 f8f0 	bl	801b390 <memcpy>
 80161b0:	e02f      	b.n	8016212 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80161b2:	8a7b      	ldrh	r3, [r7, #18]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d006      	beq.n	80161c6 <tcp_write+0x3ae>
 80161b8:	4b80      	ldr	r3, [pc, #512]	; (80163bc <tcp_write+0x5a4>)
 80161ba:	f240 2271 	movw	r2, #625	; 0x271
 80161be:	4982      	ldr	r1, [pc, #520]	; (80163c8 <tcp_write+0x5b0>)
 80161c0:	4880      	ldr	r0, [pc, #512]	; (80163c4 <tcp_write+0x5ac>)
 80161c2:	f005 fb93 	bl	801b8ec <printf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80161c6:	8b3b      	ldrh	r3, [r7, #24]
 80161c8:	2201      	movs	r2, #1
 80161ca:	4619      	mov	r1, r3
 80161cc:	2036      	movs	r0, #54	; 0x36
 80161ce:	f7fa fd43 	bl	8010c58 <pbuf_alloc>
 80161d2:	6178      	str	r0, [r7, #20]
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	f000 814b 	beq.w	8016472 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80161dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161e0:	68ba      	ldr	r2, [r7, #8]
 80161e2:	441a      	add	r2, r3
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80161e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161f2:	4619      	mov	r1, r3
 80161f4:	2036      	movs	r0, #54	; 0x36
 80161f6:	f7fa fd2f 	bl	8010c58 <pbuf_alloc>
 80161fa:	6338      	str	r0, [r7, #48]	; 0x30
 80161fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d103      	bne.n	801620a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016202:	6978      	ldr	r0, [r7, #20]
 8016204:	f7fb f80c 	bl	8011220 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016208:	e136      	b.n	8016478 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801620a:	6979      	ldr	r1, [r7, #20]
 801620c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801620e:	f7fb f8d5 	bl	80113bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016214:	f7fb f892 	bl	801133c <pbuf_clen>
 8016218:	4603      	mov	r3, r0
 801621a:	461a      	mov	r2, r3
 801621c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016220:	4413      	add	r3, r2
 8016222:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016226:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801622a:	2b09      	cmp	r3, #9
 801622c:	d903      	bls.n	8016236 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801622e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016230:	f7fa fff6 	bl	8011220 <pbuf_free>
      goto memerr;
 8016234:	e120      	b.n	8016478 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801623a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801623e:	441a      	add	r2, r3
 8016240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016244:	9300      	str	r3, [sp, #0]
 8016246:	4613      	mov	r3, r2
 8016248:	2200      	movs	r2, #0
 801624a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801624c:	68f8      	ldr	r0, [r7, #12]
 801624e:	f7ff fc51 	bl	8015af4 <tcp_create_segment>
 8016252:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016256:	2b00      	cmp	r3, #0
 8016258:	f000 810d 	beq.w	8016476 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801625c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801625e:	2b00      	cmp	r3, #0
 8016260:	d102      	bne.n	8016268 <tcp_write+0x450>
      queue = seg;
 8016262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016264:	647b      	str	r3, [r7, #68]	; 0x44
 8016266:	e00c      	b.n	8016282 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801626a:	2b00      	cmp	r3, #0
 801626c:	d106      	bne.n	801627c <tcp_write+0x464>
 801626e:	4b53      	ldr	r3, [pc, #332]	; (80163bc <tcp_write+0x5a4>)
 8016270:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016274:	4955      	ldr	r1, [pc, #340]	; (80163cc <tcp_write+0x5b4>)
 8016276:	4853      	ldr	r0, [pc, #332]	; (80163c4 <tcp_write+0x5ac>)
 8016278:	f005 fb38 	bl	801b8ec <printf>
      prev_seg->next = seg;
 801627c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801627e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016280:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016284:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016286:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801628a:	8b3b      	ldrh	r3, [r7, #24]
 801628c:	4413      	add	r3, r2
 801628e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016292:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016296:	88fb      	ldrh	r3, [r7, #6]
 8016298:	429a      	cmp	r2, r3
 801629a:	f4ff af3d 	bcc.w	8016118 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801629e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d02c      	beq.n	80162fe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80162a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162aa:	e01e      	b.n	80162ea <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80162ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ae:	891a      	ldrh	r2, [r3, #8]
 80162b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162b2:	4413      	add	r3, r2
 80162b4:	b29a      	uxth	r2, r3
 80162b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80162ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d110      	bne.n	80162e4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162c8:	8952      	ldrh	r2, [r2, #10]
 80162ca:	4413      	add	r3, r2
 80162cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80162ce:	68b9      	ldr	r1, [r7, #8]
 80162d0:	4618      	mov	r0, r3
 80162d2:	f005 f85d 	bl	801b390 <memcpy>
        p->len += oversize_used;
 80162d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d8:	895a      	ldrh	r2, [r3, #10]
 80162da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162dc:	4413      	add	r3, r2
 80162de:	b29a      	uxth	r2, r3
 80162e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80162e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1dd      	bne.n	80162ac <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80162f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162f2:	891a      	ldrh	r2, [r3, #8]
 80162f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162f6:	4413      	add	r3, r2
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162fc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80162fe:	8a7a      	ldrh	r2, [r7, #18]
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016308:	2b00      	cmp	r3, #0
 801630a:	d018      	beq.n	801633e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801630c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801630e:	2b00      	cmp	r3, #0
 8016310:	d106      	bne.n	8016320 <tcp_write+0x508>
 8016312:	4b2a      	ldr	r3, [pc, #168]	; (80163bc <tcp_write+0x5a4>)
 8016314:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016318:	492d      	ldr	r1, [pc, #180]	; (80163d0 <tcp_write+0x5b8>)
 801631a:	482a      	ldr	r0, [pc, #168]	; (80163c4 <tcp_write+0x5ac>)
 801631c:	f005 fae6 	bl	801b8ec <printf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016322:	685b      	ldr	r3, [r3, #4]
 8016324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016326:	4618      	mov	r0, r3
 8016328:	f7fb f848 	bl	80113bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801632c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801632e:	891a      	ldrh	r2, [r3, #8]
 8016330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016332:	891b      	ldrh	r3, [r3, #8]
 8016334:	4413      	add	r3, r2
 8016336:	b29a      	uxth	r2, r3
 8016338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801633a:	811a      	strh	r2, [r3, #8]
 801633c:	e037      	b.n	80163ae <tcp_write+0x596>
  } else if (extendlen > 0) {
 801633e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016340:	2b00      	cmp	r3, #0
 8016342:	d034      	beq.n	80163ae <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016346:	2b00      	cmp	r3, #0
 8016348:	d003      	beq.n	8016352 <tcp_write+0x53a>
 801634a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801634c:	685b      	ldr	r3, [r3, #4]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d106      	bne.n	8016360 <tcp_write+0x548>
 8016352:	4b1a      	ldr	r3, [pc, #104]	; (80163bc <tcp_write+0x5a4>)
 8016354:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016358:	491e      	ldr	r1, [pc, #120]	; (80163d4 <tcp_write+0x5bc>)
 801635a:	481a      	ldr	r0, [pc, #104]	; (80163c4 <tcp_write+0x5ac>)
 801635c:	f005 fac6 	bl	801b8ec <printf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016362:	685b      	ldr	r3, [r3, #4]
 8016364:	62bb      	str	r3, [r7, #40]	; 0x28
 8016366:	e009      	b.n	801637c <tcp_write+0x564>
      p->tot_len += extendlen;
 8016368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636a:	891a      	ldrh	r2, [r3, #8]
 801636c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801636e:	4413      	add	r3, r2
 8016370:	b29a      	uxth	r2, r3
 8016372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016374:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	62bb      	str	r3, [r7, #40]	; 0x28
 801637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d1f1      	bne.n	8016368 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016386:	891a      	ldrh	r2, [r3, #8]
 8016388:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801638a:	4413      	add	r3, r2
 801638c:	b29a      	uxth	r2, r3
 801638e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016390:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	895a      	ldrh	r2, [r3, #10]
 8016396:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016398:	4413      	add	r3, r2
 801639a:	b29a      	uxth	r2, r3
 801639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801639e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80163a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163a2:	891a      	ldrh	r2, [r3, #8]
 80163a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163a6:	4413      	add	r3, r2
 80163a8:	b29a      	uxth	r2, r3
 80163aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163ac:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80163ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d111      	bne.n	80163d8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80163ba:	e010      	b.n	80163de <tcp_write+0x5c6>
 80163bc:	08026cb8 	.word	0x08026cb8
 80163c0:	08026f58 	.word	0x08026f58
 80163c4:	08026d0c 	.word	0x08026d0c
 80163c8:	08026f98 	.word	0x08026f98
 80163cc:	08026fa8 	.word	0x08026fa8
 80163d0:	08026fbc 	.word	0x08026fbc
 80163d4:	08026ff4 	.word	0x08026ff4
  } else {
    last_unsent->next = queue;
 80163d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80163dc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80163e2:	88fb      	ldrh	r3, [r7, #6]
 80163e4:	441a      	add	r2, r3
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80163f0:	88fb      	ldrh	r3, [r7, #6]
 80163f2:	1ad3      	subs	r3, r2, r3
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016402:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801640c:	2b00      	cmp	r3, #0
 801640e:	d00e      	beq.n	801642e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016414:	2b00      	cmp	r3, #0
 8016416:	d10a      	bne.n	801642e <tcp_write+0x616>
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801641c:	2b00      	cmp	r3, #0
 801641e:	d106      	bne.n	801642e <tcp_write+0x616>
 8016420:	4b2c      	ldr	r3, [pc, #176]	; (80164d4 <tcp_write+0x6bc>)
 8016422:	f240 3212 	movw	r2, #786	; 0x312
 8016426:	492c      	ldr	r1, [pc, #176]	; (80164d8 <tcp_write+0x6c0>)
 8016428:	482c      	ldr	r0, [pc, #176]	; (80164dc <tcp_write+0x6c4>)
 801642a:	f005 fa5f 	bl	801b8ec <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801642e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016430:	2b00      	cmp	r3, #0
 8016432:	d016      	beq.n	8016462 <tcp_write+0x64a>
 8016434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016436:	68db      	ldr	r3, [r3, #12]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d012      	beq.n	8016462 <tcp_write+0x64a>
 801643c:	797b      	ldrb	r3, [r7, #5]
 801643e:	f003 0302 	and.w	r3, r3, #2
 8016442:	2b00      	cmp	r3, #0
 8016444:	d10d      	bne.n	8016462 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	899b      	ldrh	r3, [r3, #12]
 801644c:	b29c      	uxth	r4, r3
 801644e:	2008      	movs	r0, #8
 8016450:	f7f9 fb2a 	bl	800faa8 <lwip_htons>
 8016454:	4603      	mov	r3, r0
 8016456:	461a      	mov	r2, r3
 8016458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801645a:	68db      	ldr	r3, [r3, #12]
 801645c:	4322      	orrs	r2, r4
 801645e:	b292      	uxth	r2, r2
 8016460:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016462:	2300      	movs	r3, #0
 8016464:	e031      	b.n	80164ca <tcp_write+0x6b2>
          goto memerr;
 8016466:	bf00      	nop
 8016468:	e006      	b.n	8016478 <tcp_write+0x660>
            goto memerr;
 801646a:	bf00      	nop
 801646c:	e004      	b.n	8016478 <tcp_write+0x660>
        goto memerr;
 801646e:	bf00      	nop
 8016470:	e002      	b.n	8016478 <tcp_write+0x660>
        goto memerr;
 8016472:	bf00      	nop
 8016474:	e000      	b.n	8016478 <tcp_write+0x660>
      goto memerr;
 8016476:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	8b5b      	ldrh	r3, [r3, #26]
 801647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016480:	b29a      	uxth	r2, r3
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016488:	2b00      	cmp	r3, #0
 801648a:	d002      	beq.n	8016492 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801648c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801648e:	f7fa fec7 	bl	8011220 <pbuf_free>
  }
  if (queue != NULL) {
 8016492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016494:	2b00      	cmp	r3, #0
 8016496:	d002      	beq.n	801649e <tcp_write+0x686>
    tcp_segs_free(queue);
 8016498:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801649a:	f7fc fb51 	bl	8012b40 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d00e      	beq.n	80164c6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d10a      	bne.n	80164c6 <tcp_write+0x6ae>
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d106      	bne.n	80164c6 <tcp_write+0x6ae>
 80164b8:	4b06      	ldr	r3, [pc, #24]	; (80164d4 <tcp_write+0x6bc>)
 80164ba:	f240 3227 	movw	r2, #807	; 0x327
 80164be:	4906      	ldr	r1, [pc, #24]	; (80164d8 <tcp_write+0x6c0>)
 80164c0:	4806      	ldr	r0, [pc, #24]	; (80164dc <tcp_write+0x6c4>)
 80164c2:	f005 fa13 	bl	801b8ec <printf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80164c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	375c      	adds	r7, #92	; 0x5c
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd90      	pop	{r4, r7, pc}
 80164d2:	bf00      	nop
 80164d4:	08026cb8 	.word	0x08026cb8
 80164d8:	0802702c 	.word	0x0802702c
 80164dc:	08026d0c 	.word	0x08026d0c

080164e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80164e0:	b590      	push	{r4, r7, lr}
 80164e2:	b08b      	sub	sp, #44	; 0x2c
 80164e4:	af02      	add	r7, sp, #8
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	460b      	mov	r3, r1
 80164ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80164ec:	2300      	movs	r3, #0
 80164ee:	61fb      	str	r3, [r7, #28]
 80164f0:	2300      	movs	r3, #0
 80164f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80164f4:	2300      	movs	r3, #0
 80164f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d106      	bne.n	801650c <tcp_split_unsent_seg+0x2c>
 80164fe:	4b95      	ldr	r3, [pc, #596]	; (8016754 <tcp_split_unsent_seg+0x274>)
 8016500:	f240 324b 	movw	r2, #843	; 0x34b
 8016504:	4994      	ldr	r1, [pc, #592]	; (8016758 <tcp_split_unsent_seg+0x278>)
 8016506:	4895      	ldr	r0, [pc, #596]	; (801675c <tcp_split_unsent_seg+0x27c>)
 8016508:	f005 f9f0 	bl	801b8ec <printf>

  useg = pcb->unsent;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016510:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d102      	bne.n	801651e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016518:	f04f 33ff 	mov.w	r3, #4294967295
 801651c:	e116      	b.n	801674c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801651e:	887b      	ldrh	r3, [r7, #2]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d109      	bne.n	8016538 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016524:	4b8b      	ldr	r3, [pc, #556]	; (8016754 <tcp_split_unsent_seg+0x274>)
 8016526:	f240 3253 	movw	r2, #851	; 0x353
 801652a:	498d      	ldr	r1, [pc, #564]	; (8016760 <tcp_split_unsent_seg+0x280>)
 801652c:	488b      	ldr	r0, [pc, #556]	; (801675c <tcp_split_unsent_seg+0x27c>)
 801652e:	f005 f9dd 	bl	801b8ec <printf>
    return ERR_VAL;
 8016532:	f06f 0305 	mvn.w	r3, #5
 8016536:	e109      	b.n	801674c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016538:	697b      	ldr	r3, [r7, #20]
 801653a:	891b      	ldrh	r3, [r3, #8]
 801653c:	887a      	ldrh	r2, [r7, #2]
 801653e:	429a      	cmp	r2, r3
 8016540:	d301      	bcc.n	8016546 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016542:	2300      	movs	r3, #0
 8016544:	e102      	b.n	801674c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801654a:	887a      	ldrh	r2, [r7, #2]
 801654c:	429a      	cmp	r2, r3
 801654e:	d906      	bls.n	801655e <tcp_split_unsent_seg+0x7e>
 8016550:	4b80      	ldr	r3, [pc, #512]	; (8016754 <tcp_split_unsent_seg+0x274>)
 8016552:	f240 325b 	movw	r2, #859	; 0x35b
 8016556:	4983      	ldr	r1, [pc, #524]	; (8016764 <tcp_split_unsent_seg+0x284>)
 8016558:	4880      	ldr	r0, [pc, #512]	; (801675c <tcp_split_unsent_seg+0x27c>)
 801655a:	f005 f9c7 	bl	801b8ec <printf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	891b      	ldrh	r3, [r3, #8]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d106      	bne.n	8016574 <tcp_split_unsent_seg+0x94>
 8016566:	4b7b      	ldr	r3, [pc, #492]	; (8016754 <tcp_split_unsent_seg+0x274>)
 8016568:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801656c:	497e      	ldr	r1, [pc, #504]	; (8016768 <tcp_split_unsent_seg+0x288>)
 801656e:	487b      	ldr	r0, [pc, #492]	; (801675c <tcp_split_unsent_seg+0x27c>)
 8016570:	f005 f9bc 	bl	801b8ec <printf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	7a9b      	ldrb	r3, [r3, #10]
 8016578:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801657a:	7bfb      	ldrb	r3, [r7, #15]
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	b2db      	uxtb	r3, r3
 8016580:	f003 0304 	and.w	r3, r3, #4
 8016584:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	891a      	ldrh	r2, [r3, #8]
 801658a:	887b      	ldrh	r3, [r7, #2]
 801658c:	1ad3      	subs	r3, r2, r3
 801658e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016590:	7bbb      	ldrb	r3, [r7, #14]
 8016592:	b29a      	uxth	r2, r3
 8016594:	89bb      	ldrh	r3, [r7, #12]
 8016596:	4413      	add	r3, r2
 8016598:	b29b      	uxth	r3, r3
 801659a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801659e:	4619      	mov	r1, r3
 80165a0:	2036      	movs	r0, #54	; 0x36
 80165a2:	f7fa fb59 	bl	8010c58 <pbuf_alloc>
 80165a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	f000 80b7 	beq.w	801671e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	891a      	ldrh	r2, [r3, #8]
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	891b      	ldrh	r3, [r3, #8]
 80165ba:	1ad3      	subs	r3, r2, r3
 80165bc:	b29a      	uxth	r2, r3
 80165be:	887b      	ldrh	r3, [r7, #2]
 80165c0:	4413      	add	r3, r2
 80165c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80165c4:	697b      	ldr	r3, [r7, #20]
 80165c6:	6858      	ldr	r0, [r3, #4]
 80165c8:	693b      	ldr	r3, [r7, #16]
 80165ca:	685a      	ldr	r2, [r3, #4]
 80165cc:	7bbb      	ldrb	r3, [r7, #14]
 80165ce:	18d1      	adds	r1, r2, r3
 80165d0:	897b      	ldrh	r3, [r7, #10]
 80165d2:	89ba      	ldrh	r2, [r7, #12]
 80165d4:	f7fb f82a 	bl	801162c <pbuf_copy_partial>
 80165d8:	4603      	mov	r3, r0
 80165da:	461a      	mov	r2, r3
 80165dc:	89bb      	ldrh	r3, [r7, #12]
 80165de:	4293      	cmp	r3, r2
 80165e0:	f040 809f 	bne.w	8016722 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	68db      	ldr	r3, [r3, #12]
 80165e8:	899b      	ldrh	r3, [r3, #12]
 80165ea:	b29b      	uxth	r3, r3
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7f9 fa5b 	bl	800faa8 <lwip_htons>
 80165f2:	4603      	mov	r3, r0
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80165fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80165fc:	2300      	movs	r3, #0
 80165fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016600:	7efb      	ldrb	r3, [r7, #27]
 8016602:	f003 0308 	and.w	r3, r3, #8
 8016606:	2b00      	cmp	r3, #0
 8016608:	d007      	beq.n	801661a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801660a:	7efb      	ldrb	r3, [r7, #27]
 801660c:	f023 0308 	bic.w	r3, r3, #8
 8016610:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016612:	7ebb      	ldrb	r3, [r7, #26]
 8016614:	f043 0308 	orr.w	r3, r3, #8
 8016618:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801661a:	7efb      	ldrb	r3, [r7, #27]
 801661c:	f003 0301 	and.w	r3, r3, #1
 8016620:	2b00      	cmp	r3, #0
 8016622:	d007      	beq.n	8016634 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016624:	7efb      	ldrb	r3, [r7, #27]
 8016626:	f023 0301 	bic.w	r3, r3, #1
 801662a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801662c:	7ebb      	ldrb	r3, [r7, #26]
 801662e:	f043 0301 	orr.w	r3, r3, #1
 8016632:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	68db      	ldr	r3, [r3, #12]
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	4618      	mov	r0, r3
 801663c:	f7f9 fa49 	bl	800fad2 <lwip_htonl>
 8016640:	4602      	mov	r2, r0
 8016642:	887b      	ldrh	r3, [r7, #2]
 8016644:	18d1      	adds	r1, r2, r3
 8016646:	7eba      	ldrb	r2, [r7, #26]
 8016648:	7bfb      	ldrb	r3, [r7, #15]
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	460b      	mov	r3, r1
 801664e:	6939      	ldr	r1, [r7, #16]
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f7ff fa4f 	bl	8015af4 <tcp_create_segment>
 8016656:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d063      	beq.n	8016726 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	4618      	mov	r0, r3
 8016664:	f7fa fe6a 	bl	801133c <pbuf_clen>
 8016668:	4603      	mov	r3, r0
 801666a:	461a      	mov	r2, r3
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016672:	1a9b      	subs	r3, r3, r2
 8016674:	b29a      	uxth	r2, r3
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	6858      	ldr	r0, [r3, #4]
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	891a      	ldrh	r2, [r3, #8]
 8016686:	89bb      	ldrh	r3, [r7, #12]
 8016688:	1ad3      	subs	r3, r2, r3
 801668a:	b29b      	uxth	r3, r3
 801668c:	4619      	mov	r1, r3
 801668e:	f7fa fc41 	bl	8010f14 <pbuf_realloc>
  useg->len -= remainder;
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	891a      	ldrh	r2, [r3, #8]
 8016696:	89bb      	ldrh	r3, [r7, #12]
 8016698:	1ad3      	subs	r3, r2, r3
 801669a:	b29a      	uxth	r2, r3
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80166a0:	697b      	ldr	r3, [r7, #20]
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	899b      	ldrh	r3, [r3, #12]
 80166a6:	b29c      	uxth	r4, r3
 80166a8:	7efb      	ldrb	r3, [r7, #27]
 80166aa:	b29b      	uxth	r3, r3
 80166ac:	4618      	mov	r0, r3
 80166ae:	f7f9 f9fb 	bl	800faa8 <lwip_htons>
 80166b2:	4603      	mov	r3, r0
 80166b4:	461a      	mov	r2, r3
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	4322      	orrs	r2, r4
 80166bc:	b292      	uxth	r2, r2
 80166be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fa fe39 	bl	801133c <pbuf_clen>
 80166ca:	4603      	mov	r3, r0
 80166cc:	461a      	mov	r2, r3
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166d4:	4413      	add	r3, r2
 80166d6:	b29a      	uxth	r2, r3
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	685b      	ldr	r3, [r3, #4]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7fa fe2a 	bl	801133c <pbuf_clen>
 80166e8:	4603      	mov	r3, r0
 80166ea:	461a      	mov	r2, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166f2:	4413      	add	r3, r2
 80166f4:	b29a      	uxth	r2, r3
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	681a      	ldr	r2, [r3, #0]
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	69fa      	ldr	r2, [r7, #28]
 8016708:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d103      	bne.n	801671a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2200      	movs	r2, #0
 8016716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801671a:	2300      	movs	r3, #0
 801671c:	e016      	b.n	801674c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801671e:	bf00      	nop
 8016720:	e002      	b.n	8016728 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016722:	bf00      	nop
 8016724:	e000      	b.n	8016728 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016726:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d006      	beq.n	801673c <tcp_split_unsent_seg+0x25c>
 801672e:	4b09      	ldr	r3, [pc, #36]	; (8016754 <tcp_split_unsent_seg+0x274>)
 8016730:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016734:	490d      	ldr	r1, [pc, #52]	; (801676c <tcp_split_unsent_seg+0x28c>)
 8016736:	4809      	ldr	r0, [pc, #36]	; (801675c <tcp_split_unsent_seg+0x27c>)
 8016738:	f005 f8d8 	bl	801b8ec <printf>
  if (p != NULL) {
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d002      	beq.n	8016748 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016742:	6938      	ldr	r0, [r7, #16]
 8016744:	f7fa fd6c 	bl	8011220 <pbuf_free>
  }

  return ERR_MEM;
 8016748:	f04f 33ff 	mov.w	r3, #4294967295
}
 801674c:	4618      	mov	r0, r3
 801674e:	3724      	adds	r7, #36	; 0x24
 8016750:	46bd      	mov	sp, r7
 8016752:	bd90      	pop	{r4, r7, pc}
 8016754:	08026cb8 	.word	0x08026cb8
 8016758:	0802704c 	.word	0x0802704c
 801675c:	08026d0c 	.word	0x08026d0c
 8016760:	08027070 	.word	0x08027070
 8016764:	08027094 	.word	0x08027094
 8016768:	080270a4 	.word	0x080270a4
 801676c:	080270b4 	.word	0x080270b4

08016770 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016770:	b590      	push	{r4, r7, lr}
 8016772:	b085      	sub	sp, #20
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d106      	bne.n	801678c <tcp_send_fin+0x1c>
 801677e:	4b21      	ldr	r3, [pc, #132]	; (8016804 <tcp_send_fin+0x94>)
 8016780:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016784:	4920      	ldr	r1, [pc, #128]	; (8016808 <tcp_send_fin+0x98>)
 8016786:	4821      	ldr	r0, [pc, #132]	; (801680c <tcp_send_fin+0x9c>)
 8016788:	f005 f8b0 	bl	801b8ec <printf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016790:	2b00      	cmp	r3, #0
 8016792:	d02e      	beq.n	80167f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016798:	60fb      	str	r3, [r7, #12]
 801679a:	e002      	b.n	80167a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d1f8      	bne.n	801679c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	68db      	ldr	r3, [r3, #12]
 80167ae:	899b      	ldrh	r3, [r3, #12]
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7f9 f978 	bl	800faa8 <lwip_htons>
 80167b8:	4603      	mov	r3, r0
 80167ba:	b2db      	uxtb	r3, r3
 80167bc:	f003 0307 	and.w	r3, r3, #7
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d116      	bne.n	80167f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	68db      	ldr	r3, [r3, #12]
 80167c8:	899b      	ldrh	r3, [r3, #12]
 80167ca:	b29c      	uxth	r4, r3
 80167cc:	2001      	movs	r0, #1
 80167ce:	f7f9 f96b 	bl	800faa8 <lwip_htons>
 80167d2:	4603      	mov	r3, r0
 80167d4:	461a      	mov	r2, r3
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	68db      	ldr	r3, [r3, #12]
 80167da:	4322      	orrs	r2, r4
 80167dc:	b292      	uxth	r2, r2
 80167de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	8b5b      	ldrh	r3, [r3, #26]
 80167e4:	f043 0320 	orr.w	r3, r3, #32
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80167ee:	2300      	movs	r3, #0
 80167f0:	e004      	b.n	80167fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80167f2:	2101      	movs	r1, #1
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f000 f80b 	bl	8016810 <tcp_enqueue_flags>
 80167fa:	4603      	mov	r3, r0
}
 80167fc:	4618      	mov	r0, r3
 80167fe:	3714      	adds	r7, #20
 8016800:	46bd      	mov	sp, r7
 8016802:	bd90      	pop	{r4, r7, pc}
 8016804:	08026cb8 	.word	0x08026cb8
 8016808:	080270c0 	.word	0x080270c0
 801680c:	08026d0c 	.word	0x08026d0c

08016810 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b08a      	sub	sp, #40	; 0x28
 8016814:	af02      	add	r7, sp, #8
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	460b      	mov	r3, r1
 801681a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801681c:	2300      	movs	r3, #0
 801681e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016820:	2300      	movs	r3, #0
 8016822:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016824:	78fb      	ldrb	r3, [r7, #3]
 8016826:	f003 0303 	and.w	r3, r3, #3
 801682a:	2b00      	cmp	r3, #0
 801682c:	d106      	bne.n	801683c <tcp_enqueue_flags+0x2c>
 801682e:	4b67      	ldr	r3, [pc, #412]	; (80169cc <tcp_enqueue_flags+0x1bc>)
 8016830:	f240 4211 	movw	r2, #1041	; 0x411
 8016834:	4966      	ldr	r1, [pc, #408]	; (80169d0 <tcp_enqueue_flags+0x1c0>)
 8016836:	4867      	ldr	r0, [pc, #412]	; (80169d4 <tcp_enqueue_flags+0x1c4>)
 8016838:	f005 f858 	bl	801b8ec <printf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d106      	bne.n	8016850 <tcp_enqueue_flags+0x40>
 8016842:	4b62      	ldr	r3, [pc, #392]	; (80169cc <tcp_enqueue_flags+0x1bc>)
 8016844:	f240 4213 	movw	r2, #1043	; 0x413
 8016848:	4963      	ldr	r1, [pc, #396]	; (80169d8 <tcp_enqueue_flags+0x1c8>)
 801684a:	4862      	ldr	r0, [pc, #392]	; (80169d4 <tcp_enqueue_flags+0x1c4>)
 801684c:	f005 f84e 	bl	801b8ec <printf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016850:	78fb      	ldrb	r3, [r7, #3]
 8016852:	f003 0302 	and.w	r3, r3, #2
 8016856:	2b00      	cmp	r3, #0
 8016858:	d001      	beq.n	801685e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801685a:	2301      	movs	r3, #1
 801685c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801685e:	7ffb      	ldrb	r3, [r7, #31]
 8016860:	009b      	lsls	r3, r3, #2
 8016862:	b2db      	uxtb	r3, r3
 8016864:	f003 0304 	and.w	r3, r3, #4
 8016868:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801686a:	7dfb      	ldrb	r3, [r7, #23]
 801686c:	b29b      	uxth	r3, r3
 801686e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016872:	4619      	mov	r1, r3
 8016874:	2036      	movs	r0, #54	; 0x36
 8016876:	f7fa f9ef 	bl	8010c58 <pbuf_alloc>
 801687a:	6138      	str	r0, [r7, #16]
 801687c:	693b      	ldr	r3, [r7, #16]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d109      	bne.n	8016896 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	8b5b      	ldrh	r3, [r3, #26]
 8016886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801688a:	b29a      	uxth	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016890:	f04f 33ff 	mov.w	r3, #4294967295
 8016894:	e095      	b.n	80169c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	895a      	ldrh	r2, [r3, #10]
 801689a:	7dfb      	ldrb	r3, [r7, #23]
 801689c:	b29b      	uxth	r3, r3
 801689e:	429a      	cmp	r2, r3
 80168a0:	d206      	bcs.n	80168b0 <tcp_enqueue_flags+0xa0>
 80168a2:	4b4a      	ldr	r3, [pc, #296]	; (80169cc <tcp_enqueue_flags+0x1bc>)
 80168a4:	f240 4239 	movw	r2, #1081	; 0x439
 80168a8:	494c      	ldr	r1, [pc, #304]	; (80169dc <tcp_enqueue_flags+0x1cc>)
 80168aa:	484a      	ldr	r0, [pc, #296]	; (80169d4 <tcp_enqueue_flags+0x1c4>)
 80168ac:	f005 f81e 	bl	801b8ec <printf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80168b4:	78fa      	ldrb	r2, [r7, #3]
 80168b6:	7ffb      	ldrb	r3, [r7, #31]
 80168b8:	9300      	str	r3, [sp, #0]
 80168ba:	460b      	mov	r3, r1
 80168bc:	6939      	ldr	r1, [r7, #16]
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	f7ff f918 	bl	8015af4 <tcp_create_segment>
 80168c4:	60f8      	str	r0, [r7, #12]
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d109      	bne.n	80168e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	8b5b      	ldrh	r3, [r3, #26]
 80168d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168d4:	b29a      	uxth	r2, r3
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80168da:	f04f 33ff 	mov.w	r3, #4294967295
 80168de:	e070      	b.n	80169c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	68db      	ldr	r3, [r3, #12]
 80168e4:	f003 0303 	and.w	r3, r3, #3
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d006      	beq.n	80168fa <tcp_enqueue_flags+0xea>
 80168ec:	4b37      	ldr	r3, [pc, #220]	; (80169cc <tcp_enqueue_flags+0x1bc>)
 80168ee:	f240 4242 	movw	r2, #1090	; 0x442
 80168f2:	493b      	ldr	r1, [pc, #236]	; (80169e0 <tcp_enqueue_flags+0x1d0>)
 80168f4:	4837      	ldr	r0, [pc, #220]	; (80169d4 <tcp_enqueue_flags+0x1c4>)
 80168f6:	f004 fff9 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	891b      	ldrh	r3, [r3, #8]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d006      	beq.n	8016910 <tcp_enqueue_flags+0x100>
 8016902:	4b32      	ldr	r3, [pc, #200]	; (80169cc <tcp_enqueue_flags+0x1bc>)
 8016904:	f240 4243 	movw	r2, #1091	; 0x443
 8016908:	4936      	ldr	r1, [pc, #216]	; (80169e4 <tcp_enqueue_flags+0x1d4>)
 801690a:	4832      	ldr	r0, [pc, #200]	; (80169d4 <tcp_enqueue_flags+0x1c4>)
 801690c:	f004 ffee 	bl	801b8ec <printf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016914:	2b00      	cmp	r3, #0
 8016916:	d103      	bne.n	8016920 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	68fa      	ldr	r2, [r7, #12]
 801691c:	66da      	str	r2, [r3, #108]	; 0x6c
 801691e:	e00d      	b.n	801693c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016924:	61bb      	str	r3, [r7, #24]
 8016926:	e002      	b.n	801692e <tcp_enqueue_flags+0x11e>
 8016928:	69bb      	ldr	r3, [r7, #24]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	61bb      	str	r3, [r7, #24]
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d1f8      	bne.n	8016928 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016936:	69bb      	ldr	r3, [r7, #24]
 8016938:	68fa      	ldr	r2, [r7, #12]
 801693a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2200      	movs	r2, #0
 8016940:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016944:	78fb      	ldrb	r3, [r7, #3]
 8016946:	f003 0302 	and.w	r3, r3, #2
 801694a:	2b00      	cmp	r3, #0
 801694c:	d104      	bne.n	8016958 <tcp_enqueue_flags+0x148>
 801694e:	78fb      	ldrb	r3, [r7, #3]
 8016950:	f003 0301 	and.w	r3, r3, #1
 8016954:	2b00      	cmp	r3, #0
 8016956:	d004      	beq.n	8016962 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801695c:	1c5a      	adds	r2, r3, #1
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016962:	78fb      	ldrb	r3, [r7, #3]
 8016964:	f003 0301 	and.w	r3, r3, #1
 8016968:	2b00      	cmp	r3, #0
 801696a:	d006      	beq.n	801697a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	8b5b      	ldrh	r3, [r3, #26]
 8016970:	f043 0320 	orr.w	r3, r3, #32
 8016974:	b29a      	uxth	r2, r3
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	4618      	mov	r0, r3
 8016980:	f7fa fcdc 	bl	801133c <pbuf_clen>
 8016984:	4603      	mov	r3, r0
 8016986:	461a      	mov	r2, r3
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801698e:	4413      	add	r3, r2
 8016990:	b29a      	uxth	r2, r3
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d00e      	beq.n	80169c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d10a      	bne.n	80169c0 <tcp_enqueue_flags+0x1b0>
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d106      	bne.n	80169c0 <tcp_enqueue_flags+0x1b0>
 80169b2:	4b06      	ldr	r3, [pc, #24]	; (80169cc <tcp_enqueue_flags+0x1bc>)
 80169b4:	f240 4265 	movw	r2, #1125	; 0x465
 80169b8:	490b      	ldr	r1, [pc, #44]	; (80169e8 <tcp_enqueue_flags+0x1d8>)
 80169ba:	4806      	ldr	r0, [pc, #24]	; (80169d4 <tcp_enqueue_flags+0x1c4>)
 80169bc:	f004 ff96 	bl	801b8ec <printf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80169c0:	2300      	movs	r3, #0
}
 80169c2:	4618      	mov	r0, r3
 80169c4:	3720      	adds	r7, #32
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
 80169ca:	bf00      	nop
 80169cc:	08026cb8 	.word	0x08026cb8
 80169d0:	080270dc 	.word	0x080270dc
 80169d4:	08026d0c 	.word	0x08026d0c
 80169d8:	08027134 	.word	0x08027134
 80169dc:	08027154 	.word	0x08027154
 80169e0:	08027190 	.word	0x08027190
 80169e4:	080271a8 	.word	0x080271a8
 80169e8:	080271d4 	.word	0x080271d4

080169ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80169ec:	b5b0      	push	{r4, r5, r7, lr}
 80169ee:	b08a      	sub	sp, #40	; 0x28
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d106      	bne.n	8016a08 <tcp_output+0x1c>
 80169fa:	4b9e      	ldr	r3, [pc, #632]	; (8016c74 <tcp_output+0x288>)
 80169fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016a00:	499d      	ldr	r1, [pc, #628]	; (8016c78 <tcp_output+0x28c>)
 8016a02:	489e      	ldr	r0, [pc, #632]	; (8016c7c <tcp_output+0x290>)
 8016a04:	f004 ff72 	bl	801b8ec <printf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	7d1b      	ldrb	r3, [r3, #20]
 8016a0c:	2b01      	cmp	r3, #1
 8016a0e:	d106      	bne.n	8016a1e <tcp_output+0x32>
 8016a10:	4b98      	ldr	r3, [pc, #608]	; (8016c74 <tcp_output+0x288>)
 8016a12:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016a16:	499a      	ldr	r1, [pc, #616]	; (8016c80 <tcp_output+0x294>)
 8016a18:	4898      	ldr	r0, [pc, #608]	; (8016c7c <tcp_output+0x290>)
 8016a1a:	f004 ff67 	bl	801b8ec <printf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016a1e:	4b99      	ldr	r3, [pc, #612]	; (8016c84 <tcp_output+0x298>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	687a      	ldr	r2, [r7, #4]
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d101      	bne.n	8016a2c <tcp_output+0x40>
    return ERR_OK;
 8016a28:	2300      	movs	r3, #0
 8016a2a:	e1ce      	b.n	8016dca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a38:	4293      	cmp	r3, r2
 8016a3a:	bf28      	it	cs
 8016a3c:	4613      	movcs	r3, r2
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a46:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d10b      	bne.n	8016a66 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	8b5b      	ldrh	r3, [r3, #26]
 8016a52:	f003 0302 	and.w	r3, r3, #2
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	f000 81aa 	beq.w	8016db0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fdcb 	bl	80175f8 <tcp_send_empty_ack>
 8016a62:	4603      	mov	r3, r0
 8016a64:	e1b1      	b.n	8016dca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016a66:	6879      	ldr	r1, [r7, #4]
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	3304      	adds	r3, #4
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f7ff f824 	bl	8015abc <tcp_route>
 8016a74:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d102      	bne.n	8016a82 <tcp_output+0x96>
    return ERR_RTE;
 8016a7c:	f06f 0303 	mvn.w	r3, #3
 8016a80:	e1a3      	b.n	8016dca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d003      	beq.n	8016a90 <tcp_output+0xa4>
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d111      	bne.n	8016ab4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d002      	beq.n	8016a9c <tcp_output+0xb0>
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	3304      	adds	r3, #4
 8016a9a:	e000      	b.n	8016a9e <tcp_output+0xb2>
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016aa0:	693b      	ldr	r3, [r7, #16]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d102      	bne.n	8016aac <tcp_output+0xc0>
      return ERR_RTE;
 8016aa6:	f06f 0303 	mvn.w	r3, #3
 8016aaa:	e18e      	b.n	8016dca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7f9 f809 	bl	800fad2 <lwip_htonl>
 8016ac0:	4602      	mov	r2, r0
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ac6:	1ad3      	subs	r3, r2, r3
 8016ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016aca:	8912      	ldrh	r2, [r2, #8]
 8016acc:	4413      	add	r3, r2
 8016ace:	69ba      	ldr	r2, [r7, #24]
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d227      	bcs.n	8016b24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016ada:	461a      	mov	r2, r3
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	d114      	bne.n	8016b0c <tcp_output+0x120>
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d110      	bne.n	8016b0c <tcp_output+0x120>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d10b      	bne.n	8016b0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2200      	movs	r2, #0
 8016af8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2201      	movs	r2, #1
 8016b00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	2200      	movs	r2, #0
 8016b08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	8b5b      	ldrh	r3, [r3, #26]
 8016b10:	f003 0302 	and.w	r3, r3, #2
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	f000 814d 	beq.w	8016db4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016b1a:	6878      	ldr	r0, [r7, #4]
 8016b1c:	f000 fd6c 	bl	80175f8 <tcp_send_empty_ack>
 8016b20:	4603      	mov	r3, r0
 8016b22:	e152      	b.n	8016dca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2200      	movs	r2, #0
 8016b28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016b32:	6a3b      	ldr	r3, [r7, #32]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	f000 811c 	beq.w	8016d72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016b3a:	e002      	b.n	8016b42 <tcp_output+0x156>
 8016b3c:	6a3b      	ldr	r3, [r7, #32]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	623b      	str	r3, [r7, #32]
 8016b42:	6a3b      	ldr	r3, [r7, #32]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d1f8      	bne.n	8016b3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016b4a:	e112      	b.n	8016d72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4e:	68db      	ldr	r3, [r3, #12]
 8016b50:	899b      	ldrh	r3, [r3, #12]
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7f8 ffa7 	bl	800faa8 <lwip_htons>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	f003 0304 	and.w	r3, r3, #4
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d006      	beq.n	8016b74 <tcp_output+0x188>
 8016b66:	4b43      	ldr	r3, [pc, #268]	; (8016c74 <tcp_output+0x288>)
 8016b68:	f240 5236 	movw	r2, #1334	; 0x536
 8016b6c:	4946      	ldr	r1, [pc, #280]	; (8016c88 <tcp_output+0x29c>)
 8016b6e:	4843      	ldr	r0, [pc, #268]	; (8016c7c <tcp_output+0x290>)
 8016b70:	f004 febc 	bl	801b8ec <printf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d01f      	beq.n	8016bbc <tcp_output+0x1d0>
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	8b5b      	ldrh	r3, [r3, #26]
 8016b80:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d119      	bne.n	8016bbc <tcp_output+0x1d0>
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d00b      	beq.n	8016ba8 <tcp_output+0x1bc>
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d110      	bne.n	8016bbc <tcp_output+0x1d0>
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b9e:	891a      	ldrh	r2, [r3, #8]
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d209      	bcs.n	8016bbc <tcp_output+0x1d0>
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d004      	beq.n	8016bbc <tcp_output+0x1d0>
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bb8:	2b08      	cmp	r3, #8
 8016bba:	d901      	bls.n	8016bc0 <tcp_output+0x1d4>
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	e000      	b.n	8016bc2 <tcp_output+0x1d6>
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d106      	bne.n	8016bd4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	8b5b      	ldrh	r3, [r3, #26]
 8016bca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 80e4 	beq.w	8016d9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	7d1b      	ldrb	r3, [r3, #20]
 8016bd8:	2b02      	cmp	r3, #2
 8016bda:	d00d      	beq.n	8016bf8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bde:	68db      	ldr	r3, [r3, #12]
 8016be0:	899b      	ldrh	r3, [r3, #12]
 8016be2:	b29c      	uxth	r4, r3
 8016be4:	2010      	movs	r0, #16
 8016be6:	f7f8 ff5f 	bl	800faa8 <lwip_htons>
 8016bea:	4603      	mov	r3, r0
 8016bec:	461a      	mov	r2, r3
 8016bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf0:	68db      	ldr	r3, [r3, #12]
 8016bf2:	4322      	orrs	r2, r4
 8016bf4:	b292      	uxth	r2, r2
 8016bf6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016bf8:	697a      	ldr	r2, [r7, #20]
 8016bfa:	6879      	ldr	r1, [r7, #4]
 8016bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bfe:	f000 f909 	bl	8016e14 <tcp_output_segment>
 8016c02:	4603      	mov	r3, r0
 8016c04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d009      	beq.n	8016c22 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	8b5b      	ldrh	r3, [r3, #26]
 8016c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c16:	b29a      	uxth	r2, r3
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	835a      	strh	r2, [r3, #26]
      return err;
 8016c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c20:	e0d3      	b.n	8016dca <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c24:	681a      	ldr	r2, [r3, #0]
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	7d1b      	ldrb	r3, [r3, #20]
 8016c2e:	2b02      	cmp	r3, #2
 8016c30:	d006      	beq.n	8016c40 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	8b5b      	ldrh	r3, [r3, #26]
 8016c36:	f023 0303 	bic.w	r3, r3, #3
 8016c3a:	b29a      	uxth	r2, r3
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c42:	68db      	ldr	r3, [r3, #12]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7f8 ff43 	bl	800fad2 <lwip_htonl>
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c50:	891b      	ldrh	r3, [r3, #8]
 8016c52:	461d      	mov	r5, r3
 8016c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	899b      	ldrh	r3, [r3, #12]
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	f7f8 ff23 	bl	800faa8 <lwip_htons>
 8016c62:	4603      	mov	r3, r0
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	f003 0303 	and.w	r3, r3, #3
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d00e      	beq.n	8016c8c <tcp_output+0x2a0>
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e00d      	b.n	8016c8e <tcp_output+0x2a2>
 8016c72:	bf00      	nop
 8016c74:	08026cb8 	.word	0x08026cb8
 8016c78:	080271fc 	.word	0x080271fc
 8016c7c:	08026d0c 	.word	0x08026d0c
 8016c80:	08027214 	.word	0x08027214
 8016c84:	2000bde4 	.word	0x2000bde4
 8016c88:	0802723c 	.word	0x0802723c
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	442b      	add	r3, r5
 8016c90:	4423      	add	r3, r4
 8016c92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	1ad3      	subs	r3, r2, r3
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	da02      	bge.n	8016ca6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	68ba      	ldr	r2, [r7, #8]
 8016ca4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca8:	891b      	ldrh	r3, [r3, #8]
 8016caa:	461c      	mov	r4, r3
 8016cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cae:	68db      	ldr	r3, [r3, #12]
 8016cb0:	899b      	ldrh	r3, [r3, #12]
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7f8 fef7 	bl	800faa8 <lwip_htons>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	b2db      	uxtb	r3, r3
 8016cbe:	f003 0303 	and.w	r3, r3, #3
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d001      	beq.n	8016cca <tcp_output+0x2de>
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	e000      	b.n	8016ccc <tcp_output+0x2e0>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	4423      	add	r3, r4
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d049      	beq.n	8016d66 <tcp_output+0x37a>
      seg->next = NULL;
 8016cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d105      	bne.n	8016cec <tcp_output+0x300>
        pcb->unacked = seg;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ce4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce8:	623b      	str	r3, [r7, #32]
 8016cea:	e03f      	b.n	8016d6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	685b      	ldr	r3, [r3, #4]
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f7f8 feed 	bl	800fad2 <lwip_htonl>
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	6a3b      	ldr	r3, [r7, #32]
 8016cfc:	68db      	ldr	r3, [r3, #12]
 8016cfe:	685b      	ldr	r3, [r3, #4]
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7f8 fee6 	bl	800fad2 <lwip_htonl>
 8016d06:	4603      	mov	r3, r0
 8016d08:	1ae3      	subs	r3, r4, r3
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	da24      	bge.n	8016d58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	3370      	adds	r3, #112	; 0x70
 8016d12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016d14:	e002      	b.n	8016d1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016d16:	69fb      	ldr	r3, [r7, #28]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016d1c:	69fb      	ldr	r3, [r7, #28]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d011      	beq.n	8016d48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016d24:	69fb      	ldr	r3, [r7, #28]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	685b      	ldr	r3, [r3, #4]
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f8 fed0 	bl	800fad2 <lwip_htonl>
 8016d32:	4604      	mov	r4, r0
 8016d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d36:	68db      	ldr	r3, [r3, #12]
 8016d38:	685b      	ldr	r3, [r3, #4]
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7f8 fec9 	bl	800fad2 <lwip_htonl>
 8016d40:	4603      	mov	r3, r0
 8016d42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	dbe6      	blt.n	8016d16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016d48:	69fb      	ldr	r3, [r7, #28]
 8016d4a:	681a      	ldr	r2, [r3, #0]
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d54:	601a      	str	r2, [r3, #0]
 8016d56:	e009      	b.n	8016d6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016d58:	6a3b      	ldr	r3, [r7, #32]
 8016d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016d5e:	6a3b      	ldr	r3, [r7, #32]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	623b      	str	r3, [r7, #32]
 8016d64:	e002      	b.n	8016d6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d68:	f7fb feff 	bl	8012b6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d70:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d012      	beq.n	8016d9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7f8 fea7 	bl	800fad2 <lwip_htonl>
 8016d84:	4602      	mov	r2, r0
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d8a:	1ad3      	subs	r3, r2, r3
 8016d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d8e:	8912      	ldrh	r2, [r2, #8]
 8016d90:	4413      	add	r3, r2
  while (seg != NULL &&
 8016d92:	69ba      	ldr	r2, [r7, #24]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	f4bf aed9 	bcs.w	8016b4c <tcp_output+0x160>
 8016d9a:	e000      	b.n	8016d9e <tcp_output+0x3b2>
      break;
 8016d9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d108      	bne.n	8016db8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2200      	movs	r2, #0
 8016daa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016dae:	e004      	b.n	8016dba <tcp_output+0x3ce>
    goto output_done;
 8016db0:	bf00      	nop
 8016db2:	e002      	b.n	8016dba <tcp_output+0x3ce>
    goto output_done;
 8016db4:	bf00      	nop
 8016db6:	e000      	b.n	8016dba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016db8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	8b5b      	ldrh	r3, [r3, #26]
 8016dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016dc8:	2300      	movs	r3, #0
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3728      	adds	r7, #40	; 0x28
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8016dd2:	bf00      	nop

08016dd4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d106      	bne.n	8016df0 <tcp_output_segment_busy+0x1c>
 8016de2:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <tcp_output_segment_busy+0x34>)
 8016de4:	f240 529a 	movw	r2, #1434	; 0x59a
 8016de8:	4908      	ldr	r1, [pc, #32]	; (8016e0c <tcp_output_segment_busy+0x38>)
 8016dea:	4809      	ldr	r0, [pc, #36]	; (8016e10 <tcp_output_segment_busy+0x3c>)
 8016dec:	f004 fd7e 	bl	801b8ec <printf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	7b9b      	ldrb	r3, [r3, #14]
 8016df6:	2b01      	cmp	r3, #1
 8016df8:	d001      	beq.n	8016dfe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	e000      	b.n	8016e00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016dfe:	2300      	movs	r3, #0
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3708      	adds	r7, #8
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}
 8016e08:	08026cb8 	.word	0x08026cb8
 8016e0c:	08027254 	.word	0x08027254
 8016e10:	08026d0c 	.word	0x08026d0c

08016e14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016e14:	b5b0      	push	{r4, r5, r7, lr}
 8016e16:	b08c      	sub	sp, #48	; 0x30
 8016e18:	af04      	add	r7, sp, #16
 8016e1a:	60f8      	str	r0, [r7, #12]
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d106      	bne.n	8016e34 <tcp_output_segment+0x20>
 8016e26:	4b63      	ldr	r3, [pc, #396]	; (8016fb4 <tcp_output_segment+0x1a0>)
 8016e28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016e2c:	4962      	ldr	r1, [pc, #392]	; (8016fb8 <tcp_output_segment+0x1a4>)
 8016e2e:	4863      	ldr	r0, [pc, #396]	; (8016fbc <tcp_output_segment+0x1a8>)
 8016e30:	f004 fd5c 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d106      	bne.n	8016e48 <tcp_output_segment+0x34>
 8016e3a:	4b5e      	ldr	r3, [pc, #376]	; (8016fb4 <tcp_output_segment+0x1a0>)
 8016e3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016e40:	495f      	ldr	r1, [pc, #380]	; (8016fc0 <tcp_output_segment+0x1ac>)
 8016e42:	485e      	ldr	r0, [pc, #376]	; (8016fbc <tcp_output_segment+0x1a8>)
 8016e44:	f004 fd52 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d106      	bne.n	8016e5c <tcp_output_segment+0x48>
 8016e4e:	4b59      	ldr	r3, [pc, #356]	; (8016fb4 <tcp_output_segment+0x1a0>)
 8016e50:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016e54:	495b      	ldr	r1, [pc, #364]	; (8016fc4 <tcp_output_segment+0x1b0>)
 8016e56:	4859      	ldr	r0, [pc, #356]	; (8016fbc <tcp_output_segment+0x1a8>)
 8016e58:	f004 fd48 	bl	801b8ec <printf>

  if (tcp_output_segment_busy(seg)) {
 8016e5c:	68f8      	ldr	r0, [r7, #12]
 8016e5e:	f7ff ffb9 	bl	8016dd4 <tcp_output_segment_busy>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d001      	beq.n	8016e6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	e09f      	b.n	8016fac <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	68dc      	ldr	r4, [r3, #12]
 8016e74:	4610      	mov	r0, r2
 8016e76:	f7f8 fe2c 	bl	800fad2 <lwip_htonl>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	68dc      	ldr	r4, [r3, #12]
 8016e86:	4610      	mov	r0, r2
 8016e88:	f7f8 fe0e 	bl	800faa8 <lwip_htons>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016e90:	68bb      	ldr	r3, [r7, #8]
 8016e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e94:	68ba      	ldr	r2, [r7, #8]
 8016e96:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016e98:	441a      	add	r2, r3
 8016e9a:	68bb      	ldr	r3, [r7, #8]
 8016e9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	68db      	ldr	r3, [r3, #12]
 8016ea2:	3314      	adds	r3, #20
 8016ea4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	7a9b      	ldrb	r3, [r3, #10]
 8016eaa:	f003 0301 	and.w	r3, r3, #1
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d015      	beq.n	8016ede <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016eb2:	68bb      	ldr	r3, [r7, #8]
 8016eb4:	3304      	adds	r3, #4
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	6879      	ldr	r1, [r7, #4]
 8016eba:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016ebe:	f7fc fa37 	bl	8013330 <tcp_eff_send_mss_netif>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016ec6:	8b7b      	ldrh	r3, [r7, #26]
 8016ec8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7f8 fe00 	bl	800fad2 <lwip_htonl>
 8016ed2:	4602      	mov	r2, r0
 8016ed4:	69fb      	ldr	r3, [r7, #28]
 8016ed6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016ed8:	69fb      	ldr	r3, [r7, #28]
 8016eda:	3304      	adds	r3, #4
 8016edc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016ede:	68bb      	ldr	r3, [r7, #8]
 8016ee0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	da02      	bge.n	8016eee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	2200      	movs	r2, #0
 8016eec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d10c      	bne.n	8016f10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016ef6:	4b34      	ldr	r3, [pc, #208]	; (8016fc8 <tcp_output_segment+0x1b4>)
 8016ef8:	681a      	ldr	r2, [r3, #0]
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	68db      	ldr	r3, [r3, #12]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7f8 fde4 	bl	800fad2 <lwip_htonl>
 8016f0a:	4602      	mov	r2, r0
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	68da      	ldr	r2, [r3, #12]
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	1ad3      	subs	r3, r2, r3
 8016f1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	8959      	ldrh	r1, [r3, #10]
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	8b3a      	ldrh	r2, [r7, #24]
 8016f2a:	1a8a      	subs	r2, r1, r2
 8016f2c:	b292      	uxth	r2, r2
 8016f2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	8919      	ldrh	r1, [r3, #8]
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	8b3a      	ldrh	r2, [r7, #24]
 8016f3c:	1a8a      	subs	r2, r1, r2
 8016f3e:	b292      	uxth	r2, r2
 8016f40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	68fa      	ldr	r2, [r7, #12]
 8016f48:	68d2      	ldr	r2, [r2, #12]
 8016f4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	68db      	ldr	r3, [r3, #12]
 8016f50:	2200      	movs	r2, #0
 8016f52:	741a      	strb	r2, [r3, #16]
 8016f54:	2200      	movs	r2, #0
 8016f56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	68db      	ldr	r3, [r3, #12]
 8016f5c:	f103 0214 	add.w	r2, r3, #20
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	7a9b      	ldrb	r3, [r3, #10]
 8016f64:	009b      	lsls	r3, r3, #2
 8016f66:	f003 0304 	and.w	r3, r3, #4
 8016f6a:	4413      	add	r3, r2
 8016f6c:	69fa      	ldr	r2, [r7, #28]
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d006      	beq.n	8016f80 <tcp_output_segment+0x16c>
 8016f72:	4b10      	ldr	r3, [pc, #64]	; (8016fb4 <tcp_output_segment+0x1a0>)
 8016f74:	f240 621c 	movw	r2, #1564	; 0x61c
 8016f78:	4914      	ldr	r1, [pc, #80]	; (8016fcc <tcp_output_segment+0x1b8>)
 8016f7a:	4810      	ldr	r0, [pc, #64]	; (8016fbc <tcp_output_segment+0x1a8>)
 8016f7c:	f004 fcb6 	bl	801b8ec <printf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	6858      	ldr	r0, [r3, #4]
 8016f84:	68b9      	ldr	r1, [r7, #8]
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	1d1c      	adds	r4, r3, #4
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	7add      	ldrb	r5, [r3, #11]
 8016f8e:	68bb      	ldr	r3, [r7, #8]
 8016f90:	7a9b      	ldrb	r3, [r3, #10]
 8016f92:	687a      	ldr	r2, [r7, #4]
 8016f94:	9202      	str	r2, [sp, #8]
 8016f96:	2206      	movs	r2, #6
 8016f98:	9201      	str	r2, [sp, #4]
 8016f9a:	9300      	str	r3, [sp, #0]
 8016f9c:	462b      	mov	r3, r5
 8016f9e:	4622      	mov	r2, r4
 8016fa0:	f002 fd96 	bl	8019ad0 <ip4_output_if>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3720      	adds	r7, #32
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8016fb4:	08026cb8 	.word	0x08026cb8
 8016fb8:	0802727c 	.word	0x0802727c
 8016fbc:	08026d0c 	.word	0x08026d0c
 8016fc0:	0802729c 	.word	0x0802729c
 8016fc4:	080272bc 	.word	0x080272bc
 8016fc8:	2000bdd4 	.word	0x2000bdd4
 8016fcc:	080272e0 	.word	0x080272e0

08016fd0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016fd0:	b5b0      	push	{r4, r5, r7, lr}
 8016fd2:	b084      	sub	sp, #16
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d106      	bne.n	8016fec <tcp_rexmit_rto_prepare+0x1c>
 8016fde:	4b31      	ldr	r3, [pc, #196]	; (80170a4 <tcp_rexmit_rto_prepare+0xd4>)
 8016fe0:	f240 6263 	movw	r2, #1635	; 0x663
 8016fe4:	4930      	ldr	r1, [pc, #192]	; (80170a8 <tcp_rexmit_rto_prepare+0xd8>)
 8016fe6:	4831      	ldr	r0, [pc, #196]	; (80170ac <tcp_rexmit_rto_prepare+0xdc>)
 8016fe8:	f004 fc80 	bl	801b8ec <printf>

  if (pcb->unacked == NULL) {
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d102      	bne.n	8016ffa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016ff4:	f06f 0305 	mvn.w	r3, #5
 8016ff8:	e050      	b.n	801709c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ffe:	60fb      	str	r3, [r7, #12]
 8017000:	e00b      	b.n	801701a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017002:	68f8      	ldr	r0, [r7, #12]
 8017004:	f7ff fee6 	bl	8016dd4 <tcp_output_segment_busy>
 8017008:	4603      	mov	r3, r0
 801700a:	2b00      	cmp	r3, #0
 801700c:	d002      	beq.n	8017014 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801700e:	f06f 0305 	mvn.w	r3, #5
 8017012:	e043      	b.n	801709c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	60fb      	str	r3, [r7, #12]
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d1ef      	bne.n	8017002 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017022:	68f8      	ldr	r0, [r7, #12]
 8017024:	f7ff fed6 	bl	8016dd4 <tcp_output_segment_busy>
 8017028:	4603      	mov	r3, r0
 801702a:	2b00      	cmp	r3, #0
 801702c:	d002      	beq.n	8017034 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801702e:	f06f 0305 	mvn.w	r3, #5
 8017032:	e033      	b.n	801709c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2200      	movs	r2, #0
 8017048:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	8b5b      	ldrh	r3, [r3, #26]
 801704e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017052:	b29a      	uxth	r2, r3
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	68db      	ldr	r3, [r3, #12]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	4618      	mov	r0, r3
 8017060:	f7f8 fd37 	bl	800fad2 <lwip_htonl>
 8017064:	4604      	mov	r4, r0
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	891b      	ldrh	r3, [r3, #8]
 801706a:	461d      	mov	r5, r3
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	68db      	ldr	r3, [r3, #12]
 8017070:	899b      	ldrh	r3, [r3, #12]
 8017072:	b29b      	uxth	r3, r3
 8017074:	4618      	mov	r0, r3
 8017076:	f7f8 fd17 	bl	800faa8 <lwip_htons>
 801707a:	4603      	mov	r3, r0
 801707c:	b2db      	uxtb	r3, r3
 801707e:	f003 0303 	and.w	r3, r3, #3
 8017082:	2b00      	cmp	r3, #0
 8017084:	d001      	beq.n	801708a <tcp_rexmit_rto_prepare+0xba>
 8017086:	2301      	movs	r3, #1
 8017088:	e000      	b.n	801708c <tcp_rexmit_rto_prepare+0xbc>
 801708a:	2300      	movs	r3, #0
 801708c:	442b      	add	r3, r5
 801708e:	18e2      	adds	r2, r4, r3
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2200      	movs	r2, #0
 8017098:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801709a:	2300      	movs	r3, #0
}
 801709c:	4618      	mov	r0, r3
 801709e:	3710      	adds	r7, #16
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bdb0      	pop	{r4, r5, r7, pc}
 80170a4:	08026cb8 	.word	0x08026cb8
 80170a8:	080272f4 	.word	0x080272f4
 80170ac:	08026d0c 	.word	0x08026d0c

080170b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b082      	sub	sp, #8
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d106      	bne.n	80170cc <tcp_rexmit_rto_commit+0x1c>
 80170be:	4b0d      	ldr	r3, [pc, #52]	; (80170f4 <tcp_rexmit_rto_commit+0x44>)
 80170c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80170c4:	490c      	ldr	r1, [pc, #48]	; (80170f8 <tcp_rexmit_rto_commit+0x48>)
 80170c6:	480d      	ldr	r0, [pc, #52]	; (80170fc <tcp_rexmit_rto_commit+0x4c>)
 80170c8:	f004 fc10 	bl	801b8ec <printf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80170d2:	2bff      	cmp	r3, #255	; 0xff
 80170d4:	d007      	beq.n	80170e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80170dc:	3301      	adds	r3, #1
 80170de:	b2da      	uxtb	r2, r3
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80170e6:	6878      	ldr	r0, [r7, #4]
 80170e8:	f7ff fc80 	bl	80169ec <tcp_output>
}
 80170ec:	bf00      	nop
 80170ee:	3708      	adds	r7, #8
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd80      	pop	{r7, pc}
 80170f4:	08026cb8 	.word	0x08026cb8
 80170f8:	08027318 	.word	0x08027318
 80170fc:	08026d0c 	.word	0x08026d0c

08017100 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d106      	bne.n	801711c <tcp_rexmit_rto+0x1c>
 801710e:	4b0a      	ldr	r3, [pc, #40]	; (8017138 <tcp_rexmit_rto+0x38>)
 8017110:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017114:	4909      	ldr	r1, [pc, #36]	; (801713c <tcp_rexmit_rto+0x3c>)
 8017116:	480a      	ldr	r0, [pc, #40]	; (8017140 <tcp_rexmit_rto+0x40>)
 8017118:	f004 fbe8 	bl	801b8ec <printf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	f7ff ff57 	bl	8016fd0 <tcp_rexmit_rto_prepare>
 8017122:	4603      	mov	r3, r0
 8017124:	2b00      	cmp	r3, #0
 8017126:	d102      	bne.n	801712e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f7ff ffc1 	bl	80170b0 <tcp_rexmit_rto_commit>
  }
}
 801712e:	bf00      	nop
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}
 8017136:	bf00      	nop
 8017138:	08026cb8 	.word	0x08026cb8
 801713c:	0802733c 	.word	0x0802733c
 8017140:	08026d0c 	.word	0x08026d0c

08017144 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017144:	b590      	push	{r4, r7, lr}
 8017146:	b085      	sub	sp, #20
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d106      	bne.n	8017160 <tcp_rexmit+0x1c>
 8017152:	4b2f      	ldr	r3, [pc, #188]	; (8017210 <tcp_rexmit+0xcc>)
 8017154:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017158:	492e      	ldr	r1, [pc, #184]	; (8017214 <tcp_rexmit+0xd0>)
 801715a:	482f      	ldr	r0, [pc, #188]	; (8017218 <tcp_rexmit+0xd4>)
 801715c:	f004 fbc6 	bl	801b8ec <printf>

  if (pcb->unacked == NULL) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017164:	2b00      	cmp	r3, #0
 8017166:	d102      	bne.n	801716e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017168:	f06f 0305 	mvn.w	r3, #5
 801716c:	e04c      	b.n	8017208 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017172:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017174:	68b8      	ldr	r0, [r7, #8]
 8017176:	f7ff fe2d 	bl	8016dd4 <tcp_output_segment_busy>
 801717a:	4603      	mov	r3, r0
 801717c:	2b00      	cmp	r3, #0
 801717e:	d002      	beq.n	8017186 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017180:	f06f 0305 	mvn.w	r3, #5
 8017184:	e040      	b.n	8017208 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	336c      	adds	r3, #108	; 0x6c
 8017192:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017194:	e002      	b.n	801719c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d011      	beq.n	80171c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	68db      	ldr	r3, [r3, #12]
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	4618      	mov	r0, r3
 80171ae:	f7f8 fc90 	bl	800fad2 <lwip_htonl>
 80171b2:	4604      	mov	r4, r0
 80171b4:	68bb      	ldr	r3, [r7, #8]
 80171b6:	68db      	ldr	r3, [r3, #12]
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7f8 fc89 	bl	800fad2 <lwip_htonl>
 80171c0:	4603      	mov	r3, r0
 80171c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	dbe6      	blt.n	8017196 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	681a      	ldr	r2, [r3, #0]
 80171cc:	68bb      	ldr	r3, [r7, #8]
 80171ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	68ba      	ldr	r2, [r7, #8]
 80171d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80171d6:	68bb      	ldr	r3, [r7, #8]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d103      	bne.n	80171e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	2200      	movs	r2, #0
 80171e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80171ec:	2bff      	cmp	r3, #255	; 0xff
 80171ee:	d007      	beq.n	8017200 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80171f6:	3301      	adds	r3, #1
 80171f8:	b2da      	uxtb	r2, r3
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2200      	movs	r2, #0
 8017204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017206:	2300      	movs	r3, #0
}
 8017208:	4618      	mov	r0, r3
 801720a:	3714      	adds	r7, #20
 801720c:	46bd      	mov	sp, r7
 801720e:	bd90      	pop	{r4, r7, pc}
 8017210:	08026cb8 	.word	0x08026cb8
 8017214:	08027358 	.word	0x08027358
 8017218:	08026d0c 	.word	0x08026d0c

0801721c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d106      	bne.n	8017238 <tcp_rexmit_fast+0x1c>
 801722a:	4b2a      	ldr	r3, [pc, #168]	; (80172d4 <tcp_rexmit_fast+0xb8>)
 801722c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017230:	4929      	ldr	r1, [pc, #164]	; (80172d8 <tcp_rexmit_fast+0xbc>)
 8017232:	482a      	ldr	r0, [pc, #168]	; (80172dc <tcp_rexmit_fast+0xc0>)
 8017234:	f004 fb5a 	bl	801b8ec <printf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801723c:	2b00      	cmp	r3, #0
 801723e:	d045      	beq.n	80172cc <tcp_rexmit_fast+0xb0>
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	8b5b      	ldrh	r3, [r3, #26]
 8017244:	f003 0304 	and.w	r3, r3, #4
 8017248:	2b00      	cmp	r3, #0
 801724a:	d13f      	bne.n	80172cc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f7ff ff79 	bl	8017144 <tcp_rexmit>
 8017252:	4603      	mov	r3, r0
 8017254:	2b00      	cmp	r3, #0
 8017256:	d139      	bne.n	80172cc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017264:	4293      	cmp	r3, r2
 8017266:	bf28      	it	cs
 8017268:	4613      	movcs	r3, r2
 801726a:	b29b      	uxth	r3, r3
 801726c:	2b00      	cmp	r3, #0
 801726e:	da00      	bge.n	8017272 <tcp_rexmit_fast+0x56>
 8017270:	3301      	adds	r3, #1
 8017272:	105b      	asrs	r3, r3, #1
 8017274:	b29a      	uxth	r2, r3
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017282:	461a      	mov	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017288:	005b      	lsls	r3, r3, #1
 801728a:	429a      	cmp	r2, r3
 801728c:	d206      	bcs.n	801729c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017292:	005b      	lsls	r3, r3, #1
 8017294:	b29a      	uxth	r2, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172a6:	4619      	mov	r1, r3
 80172a8:	0049      	lsls	r1, r1, #1
 80172aa:	440b      	add	r3, r1
 80172ac:	b29b      	uxth	r3, r3
 80172ae:	4413      	add	r3, r2
 80172b0:	b29a      	uxth	r2, r3
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	8b5b      	ldrh	r3, [r3, #26]
 80172bc:	f043 0304 	orr.w	r3, r3, #4
 80172c0:	b29a      	uxth	r2, r3
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2200      	movs	r2, #0
 80172ca:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80172cc:	bf00      	nop
 80172ce:	3708      	adds	r7, #8
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	08026cb8 	.word	0x08026cb8
 80172d8:	08027370 	.word	0x08027370
 80172dc:	08026d0c 	.word	0x08026d0c

080172e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b086      	sub	sp, #24
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	607b      	str	r3, [r7, #4]
 80172ea:	460b      	mov	r3, r1
 80172ec:	817b      	strh	r3, [r7, #10]
 80172ee:	4613      	mov	r3, r2
 80172f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80172f2:	897a      	ldrh	r2, [r7, #10]
 80172f4:	893b      	ldrh	r3, [r7, #8]
 80172f6:	4413      	add	r3, r2
 80172f8:	b29b      	uxth	r3, r3
 80172fa:	3314      	adds	r3, #20
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017302:	4619      	mov	r1, r3
 8017304:	2022      	movs	r0, #34	; 0x22
 8017306:	f7f9 fca7 	bl	8010c58 <pbuf_alloc>
 801730a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	2b00      	cmp	r3, #0
 8017310:	d04d      	beq.n	80173ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017312:	897b      	ldrh	r3, [r7, #10]
 8017314:	3313      	adds	r3, #19
 8017316:	697a      	ldr	r2, [r7, #20]
 8017318:	8952      	ldrh	r2, [r2, #10]
 801731a:	4293      	cmp	r3, r2
 801731c:	db06      	blt.n	801732c <tcp_output_alloc_header_common+0x4c>
 801731e:	4b26      	ldr	r3, [pc, #152]	; (80173b8 <tcp_output_alloc_header_common+0xd8>)
 8017320:	f240 7223 	movw	r2, #1827	; 0x723
 8017324:	4925      	ldr	r1, [pc, #148]	; (80173bc <tcp_output_alloc_header_common+0xdc>)
 8017326:	4826      	ldr	r0, [pc, #152]	; (80173c0 <tcp_output_alloc_header_common+0xe0>)
 8017328:	f004 fae0 	bl	801b8ec <printf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	685b      	ldr	r3, [r3, #4]
 8017330:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017332:	8c3b      	ldrh	r3, [r7, #32]
 8017334:	4618      	mov	r0, r3
 8017336:	f7f8 fbb7 	bl	800faa8 <lwip_htons>
 801733a:	4603      	mov	r3, r0
 801733c:	461a      	mov	r2, r3
 801733e:	693b      	ldr	r3, [r7, #16]
 8017340:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017344:	4618      	mov	r0, r3
 8017346:	f7f8 fbaf 	bl	800faa8 <lwip_htons>
 801734a:	4603      	mov	r3, r0
 801734c:	461a      	mov	r2, r3
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017358:	68f8      	ldr	r0, [r7, #12]
 801735a:	f7f8 fbba 	bl	800fad2 <lwip_htonl>
 801735e:	4602      	mov	r2, r0
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017364:	897b      	ldrh	r3, [r7, #10]
 8017366:	089b      	lsrs	r3, r3, #2
 8017368:	b29b      	uxth	r3, r3
 801736a:	3305      	adds	r3, #5
 801736c:	b29b      	uxth	r3, r3
 801736e:	031b      	lsls	r3, r3, #12
 8017370:	b29a      	uxth	r2, r3
 8017372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017376:	b29b      	uxth	r3, r3
 8017378:	4313      	orrs	r3, r2
 801737a:	b29b      	uxth	r3, r3
 801737c:	4618      	mov	r0, r3
 801737e:	f7f8 fb93 	bl	800faa8 <lwip_htons>
 8017382:	4603      	mov	r3, r0
 8017384:	461a      	mov	r2, r3
 8017386:	693b      	ldr	r3, [r7, #16]
 8017388:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801738a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801738c:	4618      	mov	r0, r3
 801738e:	f7f8 fb8b 	bl	800faa8 <lwip_htons>
 8017392:	4603      	mov	r3, r0
 8017394:	461a      	mov	r2, r3
 8017396:	693b      	ldr	r3, [r7, #16]
 8017398:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801739a:	693b      	ldr	r3, [r7, #16]
 801739c:	2200      	movs	r2, #0
 801739e:	741a      	strb	r2, [r3, #16]
 80173a0:	2200      	movs	r2, #0
 80173a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80173a4:	693b      	ldr	r3, [r7, #16]
 80173a6:	2200      	movs	r2, #0
 80173a8:	749a      	strb	r2, [r3, #18]
 80173aa:	2200      	movs	r2, #0
 80173ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80173ae:	697b      	ldr	r3, [r7, #20]
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3718      	adds	r7, #24
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	08026cb8 	.word	0x08026cb8
 80173bc:	08027390 	.word	0x08027390
 80173c0:	08026d0c 	.word	0x08026d0c

080173c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80173c4:	b5b0      	push	{r4, r5, r7, lr}
 80173c6:	b08a      	sub	sp, #40	; 0x28
 80173c8:	af04      	add	r7, sp, #16
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	607b      	str	r3, [r7, #4]
 80173ce:	460b      	mov	r3, r1
 80173d0:	817b      	strh	r3, [r7, #10]
 80173d2:	4613      	mov	r3, r2
 80173d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d106      	bne.n	80173ea <tcp_output_alloc_header+0x26>
 80173dc:	4b15      	ldr	r3, [pc, #84]	; (8017434 <tcp_output_alloc_header+0x70>)
 80173de:	f240 7242 	movw	r2, #1858	; 0x742
 80173e2:	4915      	ldr	r1, [pc, #84]	; (8017438 <tcp_output_alloc_header+0x74>)
 80173e4:	4815      	ldr	r0, [pc, #84]	; (801743c <tcp_output_alloc_header+0x78>)
 80173e6:	f004 fa81 	bl	801b8ec <printf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	8adb      	ldrh	r3, [r3, #22]
 80173f2:	68fa      	ldr	r2, [r7, #12]
 80173f4:	8b12      	ldrh	r2, [r2, #24]
 80173f6:	68f9      	ldr	r1, [r7, #12]
 80173f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80173fa:	893d      	ldrh	r5, [r7, #8]
 80173fc:	897c      	ldrh	r4, [r7, #10]
 80173fe:	9103      	str	r1, [sp, #12]
 8017400:	2110      	movs	r1, #16
 8017402:	9102      	str	r1, [sp, #8]
 8017404:	9201      	str	r2, [sp, #4]
 8017406:	9300      	str	r3, [sp, #0]
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	462a      	mov	r2, r5
 801740c:	4621      	mov	r1, r4
 801740e:	f7ff ff67 	bl	80172e0 <tcp_output_alloc_header_common>
 8017412:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d006      	beq.n	8017428 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801741e:	68fa      	ldr	r2, [r7, #12]
 8017420:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017422:	441a      	add	r2, r3
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017428:	697b      	ldr	r3, [r7, #20]
}
 801742a:	4618      	mov	r0, r3
 801742c:	3718      	adds	r7, #24
 801742e:	46bd      	mov	sp, r7
 8017430:	bdb0      	pop	{r4, r5, r7, pc}
 8017432:	bf00      	nop
 8017434:	08026cb8 	.word	0x08026cb8
 8017438:	080273c0 	.word	0x080273c0
 801743c:	08026d0c 	.word	0x08026d0c

08017440 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b088      	sub	sp, #32
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	4611      	mov	r1, r2
 801744c:	461a      	mov	r2, r3
 801744e:	460b      	mov	r3, r1
 8017450:	71fb      	strb	r3, [r7, #7]
 8017452:	4613      	mov	r3, r2
 8017454:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017456:	2300      	movs	r3, #0
 8017458:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d106      	bne.n	801746e <tcp_output_fill_options+0x2e>
 8017460:	4b13      	ldr	r3, [pc, #76]	; (80174b0 <tcp_output_fill_options+0x70>)
 8017462:	f240 7256 	movw	r2, #1878	; 0x756
 8017466:	4913      	ldr	r1, [pc, #76]	; (80174b4 <tcp_output_fill_options+0x74>)
 8017468:	4813      	ldr	r0, [pc, #76]	; (80174b8 <tcp_output_fill_options+0x78>)
 801746a:	f004 fa3f 	bl	801b8ec <printf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	685b      	ldr	r3, [r3, #4]
 8017472:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017474:	69bb      	ldr	r3, [r7, #24]
 8017476:	3314      	adds	r3, #20
 8017478:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801747a:	69bb      	ldr	r3, [r7, #24]
 801747c:	f103 0214 	add.w	r2, r3, #20
 8017480:	8bfb      	ldrh	r3, [r7, #30]
 8017482:	009b      	lsls	r3, r3, #2
 8017484:	4619      	mov	r1, r3
 8017486:	79fb      	ldrb	r3, [r7, #7]
 8017488:	009b      	lsls	r3, r3, #2
 801748a:	f003 0304 	and.w	r3, r3, #4
 801748e:	440b      	add	r3, r1
 8017490:	4413      	add	r3, r2
 8017492:	697a      	ldr	r2, [r7, #20]
 8017494:	429a      	cmp	r2, r3
 8017496:	d006      	beq.n	80174a6 <tcp_output_fill_options+0x66>
 8017498:	4b05      	ldr	r3, [pc, #20]	; (80174b0 <tcp_output_fill_options+0x70>)
 801749a:	f240 7275 	movw	r2, #1909	; 0x775
 801749e:	4907      	ldr	r1, [pc, #28]	; (80174bc <tcp_output_fill_options+0x7c>)
 80174a0:	4805      	ldr	r0, [pc, #20]	; (80174b8 <tcp_output_fill_options+0x78>)
 80174a2:	f004 fa23 	bl	801b8ec <printf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80174a6:	bf00      	nop
 80174a8:	3720      	adds	r7, #32
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
 80174ae:	bf00      	nop
 80174b0:	08026cb8 	.word	0x08026cb8
 80174b4:	080273e8 	.word	0x080273e8
 80174b8:	08026d0c 	.word	0x08026d0c
 80174bc:	080272e0 	.word	0x080272e0

080174c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b08a      	sub	sp, #40	; 0x28
 80174c4:	af04      	add	r7, sp, #16
 80174c6:	60f8      	str	r0, [r7, #12]
 80174c8:	60b9      	str	r1, [r7, #8]
 80174ca:	607a      	str	r2, [r7, #4]
 80174cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d106      	bne.n	80174e2 <tcp_output_control_segment+0x22>
 80174d4:	4b1c      	ldr	r3, [pc, #112]	; (8017548 <tcp_output_control_segment+0x88>)
 80174d6:	f240 7287 	movw	r2, #1927	; 0x787
 80174da:	491c      	ldr	r1, [pc, #112]	; (801754c <tcp_output_control_segment+0x8c>)
 80174dc:	481c      	ldr	r0, [pc, #112]	; (8017550 <tcp_output_control_segment+0x90>)
 80174de:	f004 fa05 	bl	801b8ec <printf>

  netif = tcp_route(pcb, src, dst);
 80174e2:	683a      	ldr	r2, [r7, #0]
 80174e4:	6879      	ldr	r1, [r7, #4]
 80174e6:	68f8      	ldr	r0, [r7, #12]
 80174e8:	f7fe fae8 	bl	8015abc <tcp_route>
 80174ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80174ee:	693b      	ldr	r3, [r7, #16]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d102      	bne.n	80174fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80174f4:	23fc      	movs	r3, #252	; 0xfc
 80174f6:	75fb      	strb	r3, [r7, #23]
 80174f8:	e01c      	b.n	8017534 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d006      	beq.n	801750e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	7adb      	ldrb	r3, [r3, #11]
 8017504:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	7a9b      	ldrb	r3, [r3, #10]
 801750a:	757b      	strb	r3, [r7, #21]
 801750c:	e003      	b.n	8017516 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801750e:	23ff      	movs	r3, #255	; 0xff
 8017510:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017512:	2300      	movs	r3, #0
 8017514:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017516:	7dba      	ldrb	r2, [r7, #22]
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	9302      	str	r3, [sp, #8]
 801751c:	2306      	movs	r3, #6
 801751e:	9301      	str	r3, [sp, #4]
 8017520:	7d7b      	ldrb	r3, [r7, #21]
 8017522:	9300      	str	r3, [sp, #0]
 8017524:	4613      	mov	r3, r2
 8017526:	683a      	ldr	r2, [r7, #0]
 8017528:	6879      	ldr	r1, [r7, #4]
 801752a:	68b8      	ldr	r0, [r7, #8]
 801752c:	f002 fad0 	bl	8019ad0 <ip4_output_if>
 8017530:	4603      	mov	r3, r0
 8017532:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017534:	68b8      	ldr	r0, [r7, #8]
 8017536:	f7f9 fe73 	bl	8011220 <pbuf_free>
  return err;
 801753a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801753e:	4618      	mov	r0, r3
 8017540:	3718      	adds	r7, #24
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	08026cb8 	.word	0x08026cb8
 801754c:	08027410 	.word	0x08027410
 8017550:	08026d0c 	.word	0x08026d0c

08017554 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017554:	b590      	push	{r4, r7, lr}
 8017556:	b08b      	sub	sp, #44	; 0x2c
 8017558:	af04      	add	r7, sp, #16
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
 8017560:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d106      	bne.n	8017576 <tcp_rst+0x22>
 8017568:	4b1f      	ldr	r3, [pc, #124]	; (80175e8 <tcp_rst+0x94>)
 801756a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801756e:	491f      	ldr	r1, [pc, #124]	; (80175ec <tcp_rst+0x98>)
 8017570:	481f      	ldr	r0, [pc, #124]	; (80175f0 <tcp_rst+0x9c>)
 8017572:	f004 f9bb 	bl	801b8ec <printf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017578:	2b00      	cmp	r3, #0
 801757a:	d106      	bne.n	801758a <tcp_rst+0x36>
 801757c:	4b1a      	ldr	r3, [pc, #104]	; (80175e8 <tcp_rst+0x94>)
 801757e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017582:	491c      	ldr	r1, [pc, #112]	; (80175f4 <tcp_rst+0xa0>)
 8017584:	481a      	ldr	r0, [pc, #104]	; (80175f0 <tcp_rst+0x9c>)
 8017586:	f004 f9b1 	bl	801b8ec <printf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801758a:	2300      	movs	r3, #0
 801758c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801758e:	f246 0308 	movw	r3, #24584	; 0x6008
 8017592:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017594:	7dfb      	ldrb	r3, [r7, #23]
 8017596:	b29c      	uxth	r4, r3
 8017598:	68b8      	ldr	r0, [r7, #8]
 801759a:	f7f8 fa9a 	bl	800fad2 <lwip_htonl>
 801759e:	4602      	mov	r2, r0
 80175a0:	8abb      	ldrh	r3, [r7, #20]
 80175a2:	9303      	str	r3, [sp, #12]
 80175a4:	2314      	movs	r3, #20
 80175a6:	9302      	str	r3, [sp, #8]
 80175a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80175aa:	9301      	str	r3, [sp, #4]
 80175ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175ae:	9300      	str	r3, [sp, #0]
 80175b0:	4613      	mov	r3, r2
 80175b2:	2200      	movs	r2, #0
 80175b4:	4621      	mov	r1, r4
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f7ff fe92 	bl	80172e0 <tcp_output_alloc_header_common>
 80175bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d00c      	beq.n	80175de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80175c4:	7dfb      	ldrb	r3, [r7, #23]
 80175c6:	2200      	movs	r2, #0
 80175c8:	6939      	ldr	r1, [r7, #16]
 80175ca:	68f8      	ldr	r0, [r7, #12]
 80175cc:	f7ff ff38 	bl	8017440 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80175d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d2:	683a      	ldr	r2, [r7, #0]
 80175d4:	6939      	ldr	r1, [r7, #16]
 80175d6:	68f8      	ldr	r0, [r7, #12]
 80175d8:	f7ff ff72 	bl	80174c0 <tcp_output_control_segment>
 80175dc:	e000      	b.n	80175e0 <tcp_rst+0x8c>
    return;
 80175de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80175e0:	371c      	adds	r7, #28
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd90      	pop	{r4, r7, pc}
 80175e6:	bf00      	nop
 80175e8:	08026cb8 	.word	0x08026cb8
 80175ec:	0802743c 	.word	0x0802743c
 80175f0:	08026d0c 	.word	0x08026d0c
 80175f4:	08027458 	.word	0x08027458

080175f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80175f8:	b590      	push	{r4, r7, lr}
 80175fa:	b087      	sub	sp, #28
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017600:	2300      	movs	r3, #0
 8017602:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017604:	2300      	movs	r3, #0
 8017606:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d106      	bne.n	801761c <tcp_send_empty_ack+0x24>
 801760e:	4b28      	ldr	r3, [pc, #160]	; (80176b0 <tcp_send_empty_ack+0xb8>)
 8017610:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017614:	4927      	ldr	r1, [pc, #156]	; (80176b4 <tcp_send_empty_ack+0xbc>)
 8017616:	4828      	ldr	r0, [pc, #160]	; (80176b8 <tcp_send_empty_ack+0xc0>)
 8017618:	f004 f968 	bl	801b8ec <printf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801761c:	7dfb      	ldrb	r3, [r7, #23]
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	b2db      	uxtb	r3, r3
 8017622:	f003 0304 	and.w	r3, r3, #4
 8017626:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017628:	7d7b      	ldrb	r3, [r7, #21]
 801762a:	b29c      	uxth	r4, r3
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017630:	4618      	mov	r0, r3
 8017632:	f7f8 fa4e 	bl	800fad2 <lwip_htonl>
 8017636:	4603      	mov	r3, r0
 8017638:	2200      	movs	r2, #0
 801763a:	4621      	mov	r1, r4
 801763c:	6878      	ldr	r0, [r7, #4]
 801763e:	f7ff fec1 	bl	80173c4 <tcp_output_alloc_header>
 8017642:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d109      	bne.n	801765e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	8b5b      	ldrh	r3, [r3, #26]
 801764e:	f043 0303 	orr.w	r3, r3, #3
 8017652:	b29a      	uxth	r2, r3
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017658:	f06f 0301 	mvn.w	r3, #1
 801765c:	e023      	b.n	80176a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801765e:	7dbb      	ldrb	r3, [r7, #22]
 8017660:	7dfa      	ldrb	r2, [r7, #23]
 8017662:	6939      	ldr	r1, [r7, #16]
 8017664:	6878      	ldr	r0, [r7, #4]
 8017666:	f7ff feeb 	bl	8017440 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801766a:	687a      	ldr	r2, [r7, #4]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	3304      	adds	r3, #4
 8017670:	6939      	ldr	r1, [r7, #16]
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f7ff ff24 	bl	80174c0 <tcp_output_control_segment>
 8017678:	4603      	mov	r3, r0
 801767a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801767c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d007      	beq.n	8017694 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	8b5b      	ldrh	r3, [r3, #26]
 8017688:	f043 0303 	orr.w	r3, r3, #3
 801768c:	b29a      	uxth	r2, r3
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	835a      	strh	r2, [r3, #26]
 8017692:	e006      	b.n	80176a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	8b5b      	ldrh	r3, [r3, #26]
 8017698:	f023 0303 	bic.w	r3, r3, #3
 801769c:	b29a      	uxth	r2, r3
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80176a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	371c      	adds	r7, #28
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd90      	pop	{r4, r7, pc}
 80176ae:	bf00      	nop
 80176b0:	08026cb8 	.word	0x08026cb8
 80176b4:	08027474 	.word	0x08027474
 80176b8:	08026d0c 	.word	0x08026d0c

080176bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80176bc:	b590      	push	{r4, r7, lr}
 80176be:	b087      	sub	sp, #28
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80176c4:	2300      	movs	r3, #0
 80176c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d106      	bne.n	80176dc <tcp_keepalive+0x20>
 80176ce:	4b18      	ldr	r3, [pc, #96]	; (8017730 <tcp_keepalive+0x74>)
 80176d0:	f640 0224 	movw	r2, #2084	; 0x824
 80176d4:	4917      	ldr	r1, [pc, #92]	; (8017734 <tcp_keepalive+0x78>)
 80176d6:	4818      	ldr	r0, [pc, #96]	; (8017738 <tcp_keepalive+0x7c>)
 80176d8:	f004 f908 	bl	801b8ec <printf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80176dc:	7dfb      	ldrb	r3, [r7, #23]
 80176de:	b29c      	uxth	r4, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176e4:	3b01      	subs	r3, #1
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7f8 f9f3 	bl	800fad2 <lwip_htonl>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2200      	movs	r2, #0
 80176f0:	4621      	mov	r1, r4
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f7ff fe66 	bl	80173c4 <tcp_output_alloc_header>
 80176f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d102      	bne.n	8017706 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017700:	f04f 33ff 	mov.w	r3, #4294967295
 8017704:	e010      	b.n	8017728 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017706:	7dfb      	ldrb	r3, [r7, #23]
 8017708:	2200      	movs	r2, #0
 801770a:	6939      	ldr	r1, [r7, #16]
 801770c:	6878      	ldr	r0, [r7, #4]
 801770e:	f7ff fe97 	bl	8017440 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	3304      	adds	r3, #4
 8017718:	6939      	ldr	r1, [r7, #16]
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f7ff fed0 	bl	80174c0 <tcp_output_control_segment>
 8017720:	4603      	mov	r3, r0
 8017722:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017724:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017728:	4618      	mov	r0, r3
 801772a:	371c      	adds	r7, #28
 801772c:	46bd      	mov	sp, r7
 801772e:	bd90      	pop	{r4, r7, pc}
 8017730:	08026cb8 	.word	0x08026cb8
 8017734:	08027494 	.word	0x08027494
 8017738:	08026d0c 	.word	0x08026d0c

0801773c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801773c:	b590      	push	{r4, r7, lr}
 801773e:	b08b      	sub	sp, #44	; 0x2c
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017744:	2300      	movs	r3, #0
 8017746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d106      	bne.n	801775e <tcp_zero_window_probe+0x22>
 8017750:	4b4c      	ldr	r3, [pc, #304]	; (8017884 <tcp_zero_window_probe+0x148>)
 8017752:	f640 024f 	movw	r2, #2127	; 0x84f
 8017756:	494c      	ldr	r1, [pc, #304]	; (8017888 <tcp_zero_window_probe+0x14c>)
 8017758:	484c      	ldr	r0, [pc, #304]	; (801788c <tcp_zero_window_probe+0x150>)
 801775a:	f004 f8c7 	bl	801b8ec <printf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017762:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017764:	6a3b      	ldr	r3, [r7, #32]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d101      	bne.n	801776e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801776a:	2300      	movs	r3, #0
 801776c:	e086      	b.n	801787c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017774:	2bff      	cmp	r3, #255	; 0xff
 8017776:	d007      	beq.n	8017788 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801777e:	3301      	adds	r3, #1
 8017780:	b2da      	uxtb	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017788:	6a3b      	ldr	r3, [r7, #32]
 801778a:	68db      	ldr	r3, [r3, #12]
 801778c:	899b      	ldrh	r3, [r3, #12]
 801778e:	b29b      	uxth	r3, r3
 8017790:	4618      	mov	r0, r3
 8017792:	f7f8 f989 	bl	800faa8 <lwip_htons>
 8017796:	4603      	mov	r3, r0
 8017798:	b2db      	uxtb	r3, r3
 801779a:	f003 0301 	and.w	r3, r3, #1
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d005      	beq.n	80177ae <tcp_zero_window_probe+0x72>
 80177a2:	6a3b      	ldr	r3, [r7, #32]
 80177a4:	891b      	ldrh	r3, [r3, #8]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d101      	bne.n	80177ae <tcp_zero_window_probe+0x72>
 80177aa:	2301      	movs	r3, #1
 80177ac:	e000      	b.n	80177b0 <tcp_zero_window_probe+0x74>
 80177ae:	2300      	movs	r3, #0
 80177b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80177b2:	7ffb      	ldrb	r3, [r7, #31]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	bf0c      	ite	eq
 80177b8:	2301      	moveq	r3, #1
 80177ba:	2300      	movne	r3, #0
 80177bc:	b2db      	uxtb	r3, r3
 80177be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80177c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177c4:	b299      	uxth	r1, r3
 80177c6:	6a3b      	ldr	r3, [r7, #32]
 80177c8:	68db      	ldr	r3, [r3, #12]
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	8bba      	ldrh	r2, [r7, #28]
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7ff fdf8 	bl	80173c4 <tcp_output_alloc_header>
 80177d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80177d6:	69bb      	ldr	r3, [r7, #24]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d102      	bne.n	80177e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80177dc:	f04f 33ff 	mov.w	r3, #4294967295
 80177e0:	e04c      	b.n	801787c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80177e2:	69bb      	ldr	r3, [r7, #24]
 80177e4:	685b      	ldr	r3, [r3, #4]
 80177e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80177e8:	7ffb      	ldrb	r3, [r7, #31]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d011      	beq.n	8017812 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	899b      	ldrh	r3, [r3, #12]
 80177f2:	b29b      	uxth	r3, r3
 80177f4:	b21b      	sxth	r3, r3
 80177f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80177fa:	b21c      	sxth	r4, r3
 80177fc:	2011      	movs	r0, #17
 80177fe:	f7f8 f953 	bl	800faa8 <lwip_htons>
 8017802:	4603      	mov	r3, r0
 8017804:	b21b      	sxth	r3, r3
 8017806:	4323      	orrs	r3, r4
 8017808:	b21b      	sxth	r3, r3
 801780a:	b29a      	uxth	r2, r3
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	819a      	strh	r2, [r3, #12]
 8017810:	e010      	b.n	8017834 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017812:	69bb      	ldr	r3, [r7, #24]
 8017814:	685b      	ldr	r3, [r3, #4]
 8017816:	3314      	adds	r3, #20
 8017818:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801781a:	6a3b      	ldr	r3, [r7, #32]
 801781c:	6858      	ldr	r0, [r3, #4]
 801781e:	6a3b      	ldr	r3, [r7, #32]
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	891a      	ldrh	r2, [r3, #8]
 8017824:	6a3b      	ldr	r3, [r7, #32]
 8017826:	891b      	ldrh	r3, [r3, #8]
 8017828:	1ad3      	subs	r3, r2, r3
 801782a:	b29b      	uxth	r3, r3
 801782c:	2201      	movs	r2, #1
 801782e:	6939      	ldr	r1, [r7, #16]
 8017830:	f7f9 fefc 	bl	801162c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017834:	6a3b      	ldr	r3, [r7, #32]
 8017836:	68db      	ldr	r3, [r3, #12]
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	4618      	mov	r0, r3
 801783c:	f7f8 f949 	bl	800fad2 <lwip_htonl>
 8017840:	4603      	mov	r3, r0
 8017842:	3301      	adds	r3, #1
 8017844:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	1ad3      	subs	r3, r2, r3
 801784e:	2b00      	cmp	r3, #0
 8017850:	da02      	bge.n	8017858 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801785c:	2200      	movs	r2, #0
 801785e:	69b9      	ldr	r1, [r7, #24]
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	f7ff fded 	bl	8017440 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017866:	687a      	ldr	r2, [r7, #4]
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	3304      	adds	r3, #4
 801786c:	69b9      	ldr	r1, [r7, #24]
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f7ff fe26 	bl	80174c0 <tcp_output_control_segment>
 8017874:	4603      	mov	r3, r0
 8017876:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017878:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801787c:	4618      	mov	r0, r3
 801787e:	372c      	adds	r7, #44	; 0x2c
 8017880:	46bd      	mov	sp, r7
 8017882:	bd90      	pop	{r4, r7, pc}
 8017884:	08026cb8 	.word	0x08026cb8
 8017888:	080274b0 	.word	0x080274b0
 801788c:	08026d0c 	.word	0x08026d0c

08017890 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b082      	sub	sp, #8
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017898:	f7f9 ffb6 	bl	8011808 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801789c:	4b0a      	ldr	r3, [pc, #40]	; (80178c8 <tcpip_tcp_timer+0x38>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d103      	bne.n	80178ac <tcpip_tcp_timer+0x1c>
 80178a4:	4b09      	ldr	r3, [pc, #36]	; (80178cc <tcpip_tcp_timer+0x3c>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d005      	beq.n	80178b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80178ac:	2200      	movs	r2, #0
 80178ae:	4908      	ldr	r1, [pc, #32]	; (80178d0 <tcpip_tcp_timer+0x40>)
 80178b0:	20fa      	movs	r0, #250	; 0xfa
 80178b2:	f000 f8f3 	bl	8017a9c <sys_timeout>
 80178b6:	e003      	b.n	80178c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80178b8:	4b06      	ldr	r3, [pc, #24]	; (80178d4 <tcpip_tcp_timer+0x44>)
 80178ba:	2200      	movs	r2, #0
 80178bc:	601a      	str	r2, [r3, #0]
  }
}
 80178be:	bf00      	nop
 80178c0:	bf00      	nop
 80178c2:	3708      	adds	r7, #8
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	2000bdd0 	.word	0x2000bdd0
 80178cc:	2000bde0 	.word	0x2000bde0
 80178d0:	08017891 	.word	0x08017891
 80178d4:	20004f48 	.word	0x20004f48

080178d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80178dc:	4b0a      	ldr	r3, [pc, #40]	; (8017908 <tcp_timer_needed+0x30>)
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d10f      	bne.n	8017904 <tcp_timer_needed+0x2c>
 80178e4:	4b09      	ldr	r3, [pc, #36]	; (801790c <tcp_timer_needed+0x34>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d103      	bne.n	80178f4 <tcp_timer_needed+0x1c>
 80178ec:	4b08      	ldr	r3, [pc, #32]	; (8017910 <tcp_timer_needed+0x38>)
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d007      	beq.n	8017904 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80178f4:	4b04      	ldr	r3, [pc, #16]	; (8017908 <tcp_timer_needed+0x30>)
 80178f6:	2201      	movs	r2, #1
 80178f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80178fa:	2200      	movs	r2, #0
 80178fc:	4905      	ldr	r1, [pc, #20]	; (8017914 <tcp_timer_needed+0x3c>)
 80178fe:	20fa      	movs	r0, #250	; 0xfa
 8017900:	f000 f8cc 	bl	8017a9c <sys_timeout>
  }
}
 8017904:	bf00      	nop
 8017906:	bd80      	pop	{r7, pc}
 8017908:	20004f48 	.word	0x20004f48
 801790c:	2000bdd0 	.word	0x2000bdd0
 8017910:	2000bde0 	.word	0x2000bde0
 8017914:	08017891 	.word	0x08017891

08017918 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b086      	sub	sp, #24
 801791c:	af00      	add	r7, sp, #0
 801791e:	60f8      	str	r0, [r7, #12]
 8017920:	60b9      	str	r1, [r7, #8]
 8017922:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017924:	200a      	movs	r0, #10
 8017926:	f7f8 fdab 	bl	8010480 <memp_malloc>
 801792a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d109      	bne.n	8017946 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d151      	bne.n	80179dc <sys_timeout_abs+0xc4>
 8017938:	4b2a      	ldr	r3, [pc, #168]	; (80179e4 <sys_timeout_abs+0xcc>)
 801793a:	22be      	movs	r2, #190	; 0xbe
 801793c:	492a      	ldr	r1, [pc, #168]	; (80179e8 <sys_timeout_abs+0xd0>)
 801793e:	482b      	ldr	r0, [pc, #172]	; (80179ec <sys_timeout_abs+0xd4>)
 8017940:	f003 ffd4 	bl	801b8ec <printf>
    return;
 8017944:	e04a      	b.n	80179dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017946:	693b      	ldr	r3, [r7, #16]
 8017948:	2200      	movs	r2, #0
 801794a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801794c:	693b      	ldr	r3, [r7, #16]
 801794e:	68ba      	ldr	r2, [r7, #8]
 8017950:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017952:	693b      	ldr	r3, [r7, #16]
 8017954:	687a      	ldr	r2, [r7, #4]
 8017956:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017958:	693b      	ldr	r3, [r7, #16]
 801795a:	68fa      	ldr	r2, [r7, #12]
 801795c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801795e:	4b24      	ldr	r3, [pc, #144]	; (80179f0 <sys_timeout_abs+0xd8>)
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d103      	bne.n	801796e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017966:	4a22      	ldr	r2, [pc, #136]	; (80179f0 <sys_timeout_abs+0xd8>)
 8017968:	693b      	ldr	r3, [r7, #16]
 801796a:	6013      	str	r3, [r2, #0]
    return;
 801796c:	e037      	b.n	80179de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801796e:	693b      	ldr	r3, [r7, #16]
 8017970:	685a      	ldr	r2, [r3, #4]
 8017972:	4b1f      	ldr	r3, [pc, #124]	; (80179f0 <sys_timeout_abs+0xd8>)
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	1ad3      	subs	r3, r2, r3
 801797a:	0fdb      	lsrs	r3, r3, #31
 801797c:	f003 0301 	and.w	r3, r3, #1
 8017980:	b2db      	uxtb	r3, r3
 8017982:	2b00      	cmp	r3, #0
 8017984:	d007      	beq.n	8017996 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017986:	4b1a      	ldr	r3, [pc, #104]	; (80179f0 <sys_timeout_abs+0xd8>)
 8017988:	681a      	ldr	r2, [r3, #0]
 801798a:	693b      	ldr	r3, [r7, #16]
 801798c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801798e:	4a18      	ldr	r2, [pc, #96]	; (80179f0 <sys_timeout_abs+0xd8>)
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	6013      	str	r3, [r2, #0]
 8017994:	e023      	b.n	80179de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017996:	4b16      	ldr	r3, [pc, #88]	; (80179f0 <sys_timeout_abs+0xd8>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	617b      	str	r3, [r7, #20]
 801799c:	e01a      	b.n	80179d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801799e:	697b      	ldr	r3, [r7, #20]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d00b      	beq.n	80179be <sys_timeout_abs+0xa6>
 80179a6:	693b      	ldr	r3, [r7, #16]
 80179a8:	685a      	ldr	r2, [r3, #4]
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	1ad3      	subs	r3, r2, r3
 80179b2:	0fdb      	lsrs	r3, r3, #31
 80179b4:	f003 0301 	and.w	r3, r3, #1
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d007      	beq.n	80179ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	681a      	ldr	r2, [r3, #0]
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	693a      	ldr	r2, [r7, #16]
 80179ca:	601a      	str	r2, [r3, #0]
        break;
 80179cc:	e007      	b.n	80179de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	617b      	str	r3, [r7, #20]
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d1e1      	bne.n	801799e <sys_timeout_abs+0x86>
 80179da:	e000      	b.n	80179de <sys_timeout_abs+0xc6>
    return;
 80179dc:	bf00      	nop
      }
    }
  }
}
 80179de:	3718      	adds	r7, #24
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	080274d4 	.word	0x080274d4
 80179e8:	08027508 	.word	0x08027508
 80179ec:	08027548 	.word	0x08027548
 80179f0:	20004f40 	.word	0x20004f40

080179f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b086      	sub	sp, #24
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017a00:	697b      	ldr	r3, [r7, #20]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	4798      	blx	r3

  now = sys_now();
 8017a06:	f7f2 f873 	bl	8009af0 <sys_now>
 8017a0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	4b0f      	ldr	r3, [pc, #60]	; (8017a50 <lwip_cyclic_timer+0x5c>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	4413      	add	r3, r2
 8017a16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017a18:	68fa      	ldr	r2, [r7, #12]
 8017a1a:	693b      	ldr	r3, [r7, #16]
 8017a1c:	1ad3      	subs	r3, r2, r3
 8017a1e:	0fdb      	lsrs	r3, r3, #31
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	b2db      	uxtb	r3, r3
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d009      	beq.n	8017a3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017a2a:	697b      	ldr	r3, [r7, #20]
 8017a2c:	681a      	ldr	r2, [r3, #0]
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	4413      	add	r3, r2
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	4907      	ldr	r1, [pc, #28]	; (8017a54 <lwip_cyclic_timer+0x60>)
 8017a36:	4618      	mov	r0, r3
 8017a38:	f7ff ff6e 	bl	8017918 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017a3c:	e004      	b.n	8017a48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017a3e:	687a      	ldr	r2, [r7, #4]
 8017a40:	4904      	ldr	r1, [pc, #16]	; (8017a54 <lwip_cyclic_timer+0x60>)
 8017a42:	68f8      	ldr	r0, [r7, #12]
 8017a44:	f7ff ff68 	bl	8017918 <sys_timeout_abs>
}
 8017a48:	bf00      	nop
 8017a4a:	3718      	adds	r7, #24
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	20004f44 	.word	0x20004f44
 8017a54:	080179f5 	.word	0x080179f5

08017a58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b082      	sub	sp, #8
 8017a5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017a5e:	2301      	movs	r3, #1
 8017a60:	607b      	str	r3, [r7, #4]
 8017a62:	e00e      	b.n	8017a82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017a64:	4a0b      	ldr	r2, [pc, #44]	; (8017a94 <sys_timeouts_init+0x3c>)
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	00db      	lsls	r3, r3, #3
 8017a70:	4a08      	ldr	r2, [pc, #32]	; (8017a94 <sys_timeouts_init+0x3c>)
 8017a72:	4413      	add	r3, r2
 8017a74:	461a      	mov	r2, r3
 8017a76:	4908      	ldr	r1, [pc, #32]	; (8017a98 <sys_timeouts_init+0x40>)
 8017a78:	f000 f810 	bl	8017a9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	3301      	adds	r3, #1
 8017a80:	607b      	str	r3, [r7, #4]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	2b02      	cmp	r3, #2
 8017a86:	d9ed      	bls.n	8017a64 <sys_timeouts_init+0xc>
  }
}
 8017a88:	bf00      	nop
 8017a8a:	bf00      	nop
 8017a8c:	3708      	adds	r7, #8
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}
 8017a92:	bf00      	nop
 8017a94:	08029efc 	.word	0x08029efc
 8017a98:	080179f5 	.word	0x080179f5

08017a9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b086      	sub	sp, #24
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	60f8      	str	r0, [r7, #12]
 8017aa4:	60b9      	str	r1, [r7, #8]
 8017aa6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017aae:	d306      	bcc.n	8017abe <sys_timeout+0x22>
 8017ab0:	4b0a      	ldr	r3, [pc, #40]	; (8017adc <sys_timeout+0x40>)
 8017ab2:	f240 1229 	movw	r2, #297	; 0x129
 8017ab6:	490a      	ldr	r1, [pc, #40]	; (8017ae0 <sys_timeout+0x44>)
 8017ab8:	480a      	ldr	r0, [pc, #40]	; (8017ae4 <sys_timeout+0x48>)
 8017aba:	f003 ff17 	bl	801b8ec <printf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017abe:	f7f2 f817 	bl	8009af0 <sys_now>
 8017ac2:	4602      	mov	r2, r0
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	4413      	add	r3, r2
 8017ac8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017aca:	687a      	ldr	r2, [r7, #4]
 8017acc:	68b9      	ldr	r1, [r7, #8]
 8017ace:	6978      	ldr	r0, [r7, #20]
 8017ad0:	f7ff ff22 	bl	8017918 <sys_timeout_abs>
#endif
}
 8017ad4:	bf00      	nop
 8017ad6:	3718      	adds	r7, #24
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}
 8017adc:	080274d4 	.word	0x080274d4
 8017ae0:	08027570 	.word	0x08027570
 8017ae4:	08027548 	.word	0x08027548

08017ae8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b084      	sub	sp, #16
 8017aec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017aee:	f7f1 ffff 	bl	8009af0 <sys_now>
 8017af2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017af4:	4b17      	ldr	r3, [pc, #92]	; (8017b54 <sys_check_timeouts+0x6c>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017afa:	68bb      	ldr	r3, [r7, #8]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d022      	beq.n	8017b46 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	685b      	ldr	r3, [r3, #4]
 8017b04:	68fa      	ldr	r2, [r7, #12]
 8017b06:	1ad3      	subs	r3, r2, r3
 8017b08:	0fdb      	lsrs	r3, r3, #31
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	b2db      	uxtb	r3, r3
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d11a      	bne.n	8017b4a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	4a0e      	ldr	r2, [pc, #56]	; (8017b54 <sys_check_timeouts+0x6c>)
 8017b1a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	689b      	ldr	r3, [r3, #8]
 8017b20:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	68db      	ldr	r3, [r3, #12]
 8017b26:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	4a0a      	ldr	r2, [pc, #40]	; (8017b58 <sys_check_timeouts+0x70>)
 8017b2e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017b30:	68b9      	ldr	r1, [r7, #8]
 8017b32:	200a      	movs	r0, #10
 8017b34:	f7f8 fcf6 	bl	8010524 <memp_free>
    if (handler != NULL) {
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d0da      	beq.n	8017af4 <sys_check_timeouts+0xc>
      handler(arg);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	6838      	ldr	r0, [r7, #0]
 8017b42:	4798      	blx	r3
  do {
 8017b44:	e7d6      	b.n	8017af4 <sys_check_timeouts+0xc>
      return;
 8017b46:	bf00      	nop
 8017b48:	e000      	b.n	8017b4c <sys_check_timeouts+0x64>
      return;
 8017b4a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017b4c:	3710      	adds	r7, #16
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}
 8017b52:	bf00      	nop
 8017b54:	20004f40 	.word	0x20004f40
 8017b58:	20004f44 	.word	0x20004f44

08017b5c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017b62:	4b16      	ldr	r3, [pc, #88]	; (8017bbc <sys_timeouts_sleeptime+0x60>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d102      	bne.n	8017b70 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8017b6e:	e020      	b.n	8017bb2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017b70:	f7f1 ffbe 	bl	8009af0 <sys_now>
 8017b74:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017b76:	4b11      	ldr	r3, [pc, #68]	; (8017bbc <sys_timeouts_sleeptime+0x60>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	685a      	ldr	r2, [r3, #4]
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	1ad3      	subs	r3, r2, r3
 8017b80:	0fdb      	lsrs	r3, r3, #31
 8017b82:	f003 0301 	and.w	r3, r3, #1
 8017b86:	b2db      	uxtb	r3, r3
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d001      	beq.n	8017b90 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	e010      	b.n	8017bb2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017b90:	4b0a      	ldr	r3, [pc, #40]	; (8017bbc <sys_timeouts_sleeptime+0x60>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	685a      	ldr	r2, [r3, #4]
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	1ad3      	subs	r3, r2, r3
 8017b9a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	da06      	bge.n	8017bb0 <sys_timeouts_sleeptime+0x54>
 8017ba2:	4b07      	ldr	r3, [pc, #28]	; (8017bc0 <sys_timeouts_sleeptime+0x64>)
 8017ba4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017ba8:	4906      	ldr	r1, [pc, #24]	; (8017bc4 <sys_timeouts_sleeptime+0x68>)
 8017baa:	4807      	ldr	r0, [pc, #28]	; (8017bc8 <sys_timeouts_sleeptime+0x6c>)
 8017bac:	f003 fe9e 	bl	801b8ec <printf>
    return ret;
 8017bb0:	683b      	ldr	r3, [r7, #0]
  }
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3708      	adds	r7, #8
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	20004f40 	.word	0x20004f40
 8017bc0:	080274d4 	.word	0x080274d4
 8017bc4:	080275a8 	.word	0x080275a8
 8017bc8:	08027548 	.word	0x08027548

08017bcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017bd0:	f003 fe9e 	bl	801b910 <rand>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017bdc:	b29b      	uxth	r3, r3
 8017bde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017be2:	b29a      	uxth	r2, r3
 8017be4:	4b01      	ldr	r3, [pc, #4]	; (8017bec <udp_init+0x20>)
 8017be6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017be8:	bf00      	nop
 8017bea:	bd80      	pop	{r7, pc}
 8017bec:	20000034 	.word	0x20000034

08017bf0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017bf0:	b480      	push	{r7}
 8017bf2:	b083      	sub	sp, #12
 8017bf4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017bfa:	4b17      	ldr	r3, [pc, #92]	; (8017c58 <udp_new_port+0x68>)
 8017bfc:	881b      	ldrh	r3, [r3, #0]
 8017bfe:	1c5a      	adds	r2, r3, #1
 8017c00:	b291      	uxth	r1, r2
 8017c02:	4a15      	ldr	r2, [pc, #84]	; (8017c58 <udp_new_port+0x68>)
 8017c04:	8011      	strh	r1, [r2, #0]
 8017c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c0a:	4293      	cmp	r3, r2
 8017c0c:	d103      	bne.n	8017c16 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017c0e:	4b12      	ldr	r3, [pc, #72]	; (8017c58 <udp_new_port+0x68>)
 8017c10:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017c14:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c16:	4b11      	ldr	r3, [pc, #68]	; (8017c5c <udp_new_port+0x6c>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	603b      	str	r3, [r7, #0]
 8017c1c:	e011      	b.n	8017c42 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	8a5a      	ldrh	r2, [r3, #18]
 8017c22:	4b0d      	ldr	r3, [pc, #52]	; (8017c58 <udp_new_port+0x68>)
 8017c24:	881b      	ldrh	r3, [r3, #0]
 8017c26:	429a      	cmp	r2, r3
 8017c28:	d108      	bne.n	8017c3c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017c2a:	88fb      	ldrh	r3, [r7, #6]
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	80fb      	strh	r3, [r7, #6]
 8017c30:	88fb      	ldrh	r3, [r7, #6]
 8017c32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017c36:	d3e0      	bcc.n	8017bfa <udp_new_port+0xa>
        return 0;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	e007      	b.n	8017c4c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	68db      	ldr	r3, [r3, #12]
 8017c40:	603b      	str	r3, [r7, #0]
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d1ea      	bne.n	8017c1e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017c48:	4b03      	ldr	r3, [pc, #12]	; (8017c58 <udp_new_port+0x68>)
 8017c4a:	881b      	ldrh	r3, [r3, #0]
}
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	370c      	adds	r7, #12
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr
 8017c58:	20000034 	.word	0x20000034
 8017c5c:	2000bde8 	.word	0x2000bde8

08017c60 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	60f8      	str	r0, [r7, #12]
 8017c68:	60b9      	str	r1, [r7, #8]
 8017c6a:	4613      	mov	r3, r2
 8017c6c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d105      	bne.n	8017c80 <udp_input_local_match+0x20>
 8017c74:	4b27      	ldr	r3, [pc, #156]	; (8017d14 <udp_input_local_match+0xb4>)
 8017c76:	2287      	movs	r2, #135	; 0x87
 8017c78:	4927      	ldr	r1, [pc, #156]	; (8017d18 <udp_input_local_match+0xb8>)
 8017c7a:	4828      	ldr	r0, [pc, #160]	; (8017d1c <udp_input_local_match+0xbc>)
 8017c7c:	f003 fe36 	bl	801b8ec <printf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d105      	bne.n	8017c92 <udp_input_local_match+0x32>
 8017c86:	4b23      	ldr	r3, [pc, #140]	; (8017d14 <udp_input_local_match+0xb4>)
 8017c88:	2288      	movs	r2, #136	; 0x88
 8017c8a:	4925      	ldr	r1, [pc, #148]	; (8017d20 <udp_input_local_match+0xc0>)
 8017c8c:	4823      	ldr	r0, [pc, #140]	; (8017d1c <udp_input_local_match+0xbc>)
 8017c8e:	f003 fe2d 	bl	801b8ec <printf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	7a1b      	ldrb	r3, [r3, #8]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d00b      	beq.n	8017cb2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	7a1a      	ldrb	r2, [r3, #8]
 8017c9e:	4b21      	ldr	r3, [pc, #132]	; (8017d24 <udp_input_local_match+0xc4>)
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017ca6:	3301      	adds	r3, #1
 8017ca8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d001      	beq.n	8017cb2 <udp_input_local_match+0x52>
    return 0;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	e02b      	b.n	8017d0a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017cb2:	79fb      	ldrb	r3, [r7, #7]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d018      	beq.n	8017cea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d013      	beq.n	8017ce6 <udp_input_local_match+0x86>
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d00f      	beq.n	8017ce6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017cc6:	4b17      	ldr	r3, [pc, #92]	; (8017d24 <udp_input_local_match+0xc4>)
 8017cc8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cce:	d00a      	beq.n	8017ce6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	4b13      	ldr	r3, [pc, #76]	; (8017d24 <udp_input_local_match+0xc4>)
 8017cd6:	695b      	ldr	r3, [r3, #20]
 8017cd8:	405a      	eors	r2, r3
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	3308      	adds	r3, #8
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d110      	bne.n	8017d08 <udp_input_local_match+0xa8>
          return 1;
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	e00f      	b.n	8017d0a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d009      	beq.n	8017d04 <udp_input_local_match+0xa4>
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d005      	beq.n	8017d04 <udp_input_local_match+0xa4>
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	4b09      	ldr	r3, [pc, #36]	; (8017d24 <udp_input_local_match+0xc4>)
 8017cfe:	695b      	ldr	r3, [r3, #20]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d101      	bne.n	8017d08 <udp_input_local_match+0xa8>
        return 1;
 8017d04:	2301      	movs	r3, #1
 8017d06:	e000      	b.n	8017d0a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017d08:	2300      	movs	r3, #0
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3710      	adds	r7, #16
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	080275bc 	.word	0x080275bc
 8017d18:	080275ec 	.word	0x080275ec
 8017d1c:	08027610 	.word	0x08027610
 8017d20:	08027638 	.word	0x08027638
 8017d24:	200086bc 	.word	0x200086bc

08017d28 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017d28:	b590      	push	{r4, r7, lr}
 8017d2a:	b08d      	sub	sp, #52	; 0x34
 8017d2c:	af02      	add	r7, sp, #8
 8017d2e:	6078      	str	r0, [r7, #4]
 8017d30:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017d32:	2300      	movs	r3, #0
 8017d34:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d105      	bne.n	8017d48 <udp_input+0x20>
 8017d3c:	4b7c      	ldr	r3, [pc, #496]	; (8017f30 <udp_input+0x208>)
 8017d3e:	22cf      	movs	r2, #207	; 0xcf
 8017d40:	497c      	ldr	r1, [pc, #496]	; (8017f34 <udp_input+0x20c>)
 8017d42:	487d      	ldr	r0, [pc, #500]	; (8017f38 <udp_input+0x210>)
 8017d44:	f003 fdd2 	bl	801b8ec <printf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d105      	bne.n	8017d5a <udp_input+0x32>
 8017d4e:	4b78      	ldr	r3, [pc, #480]	; (8017f30 <udp_input+0x208>)
 8017d50:	22d0      	movs	r2, #208	; 0xd0
 8017d52:	497a      	ldr	r1, [pc, #488]	; (8017f3c <udp_input+0x214>)
 8017d54:	4878      	ldr	r0, [pc, #480]	; (8017f38 <udp_input+0x210>)
 8017d56:	f003 fdc9 	bl	801b8ec <printf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	895b      	ldrh	r3, [r3, #10]
 8017d5e:	2b07      	cmp	r3, #7
 8017d60:	d803      	bhi.n	8017d6a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7f9 fa5c 	bl	8011220 <pbuf_free>
    goto end;
 8017d68:	e0de      	b.n	8017f28 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017d70:	4b73      	ldr	r3, [pc, #460]	; (8017f40 <udp_input+0x218>)
 8017d72:	695b      	ldr	r3, [r3, #20]
 8017d74:	4a72      	ldr	r2, [pc, #456]	; (8017f40 <udp_input+0x218>)
 8017d76:	6812      	ldr	r2, [r2, #0]
 8017d78:	4611      	mov	r1, r2
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f001 ff80 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 8017d80:	4603      	mov	r3, r0
 8017d82:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017d84:	697b      	ldr	r3, [r7, #20]
 8017d86:	881b      	ldrh	r3, [r3, #0]
 8017d88:	b29b      	uxth	r3, r3
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7f7 fe8c 	bl	800faa8 <lwip_htons>
 8017d90:	4603      	mov	r3, r0
 8017d92:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017d94:	697b      	ldr	r3, [r7, #20]
 8017d96:	885b      	ldrh	r3, [r3, #2]
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7f7 fe84 	bl	800faa8 <lwip_htons>
 8017da0:	4603      	mov	r3, r0
 8017da2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017da4:	2300      	movs	r3, #0
 8017da6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017da8:	2300      	movs	r3, #0
 8017daa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017dac:	2300      	movs	r3, #0
 8017dae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017db0:	4b64      	ldr	r3, [pc, #400]	; (8017f44 <udp_input+0x21c>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	627b      	str	r3, [r7, #36]	; 0x24
 8017db6:	e054      	b.n	8017e62 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dba:	8a5b      	ldrh	r3, [r3, #18]
 8017dbc:	89fa      	ldrh	r2, [r7, #14]
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d14a      	bne.n	8017e58 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017dc2:	7cfb      	ldrb	r3, [r7, #19]
 8017dc4:	461a      	mov	r2, r3
 8017dc6:	6839      	ldr	r1, [r7, #0]
 8017dc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017dca:	f7ff ff49 	bl	8017c60 <udp_input_local_match>
 8017dce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d041      	beq.n	8017e58 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd6:	7c1b      	ldrb	r3, [r3, #16]
 8017dd8:	f003 0304 	and.w	r3, r3, #4
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d11d      	bne.n	8017e1c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d102      	bne.n	8017dec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de8:	61fb      	str	r3, [r7, #28]
 8017dea:	e017      	b.n	8017e1c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017dec:	7cfb      	ldrb	r3, [r7, #19]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d014      	beq.n	8017e1c <udp_input+0xf4>
 8017df2:	4b53      	ldr	r3, [pc, #332]	; (8017f40 <udp_input+0x218>)
 8017df4:	695b      	ldr	r3, [r3, #20]
 8017df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dfa:	d10f      	bne.n	8017e1c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017dfc:	69fb      	ldr	r3, [r7, #28]
 8017dfe:	681a      	ldr	r2, [r3, #0]
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	3304      	adds	r3, #4
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	429a      	cmp	r2, r3
 8017e08:	d008      	beq.n	8017e1c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0c:	681a      	ldr	r2, [r3, #0]
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	3304      	adds	r3, #4
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d101      	bne.n	8017e1c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e1e:	8a9b      	ldrh	r3, [r3, #20]
 8017e20:	8a3a      	ldrh	r2, [r7, #16]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d118      	bne.n	8017e58 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d005      	beq.n	8017e3a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e30:	685a      	ldr	r2, [r3, #4]
 8017e32:	4b43      	ldr	r3, [pc, #268]	; (8017f40 <udp_input+0x218>)
 8017e34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d10e      	bne.n	8017e58 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017e3a:	6a3b      	ldr	r3, [r7, #32]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d014      	beq.n	8017e6a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e42:	68da      	ldr	r2, [r3, #12]
 8017e44:	6a3b      	ldr	r3, [r7, #32]
 8017e46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017e48:	4b3e      	ldr	r3, [pc, #248]	; (8017f44 <udp_input+0x21c>)
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017e50:	4a3c      	ldr	r2, [pc, #240]	; (8017f44 <udp_input+0x21c>)
 8017e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017e56:	e008      	b.n	8017e6a <udp_input+0x142>
      }
    }

    prev = pcb;
 8017e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5e:	68db      	ldr	r3, [r3, #12]
 8017e60:	627b      	str	r3, [r7, #36]	; 0x24
 8017e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d1a7      	bne.n	8017db8 <udp_input+0x90>
 8017e68:	e000      	b.n	8017e6c <udp_input+0x144>
        break;
 8017e6a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d101      	bne.n	8017e76 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017e72:	69fb      	ldr	r3, [r7, #28]
 8017e74:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d002      	beq.n	8017e82 <udp_input+0x15a>
    for_us = 1;
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	76fb      	strb	r3, [r7, #27]
 8017e80:	e00a      	b.n	8017e98 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	3304      	adds	r3, #4
 8017e86:	681a      	ldr	r2, [r3, #0]
 8017e88:	4b2d      	ldr	r3, [pc, #180]	; (8017f40 <udp_input+0x218>)
 8017e8a:	695b      	ldr	r3, [r3, #20]
 8017e8c:	429a      	cmp	r2, r3
 8017e8e:	bf0c      	ite	eq
 8017e90:	2301      	moveq	r3, #1
 8017e92:	2300      	movne	r3, #0
 8017e94:	b2db      	uxtb	r3, r3
 8017e96:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017e98:	7efb      	ldrb	r3, [r7, #27]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d041      	beq.n	8017f22 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017e9e:	2108      	movs	r1, #8
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	f7f9 f937 	bl	8011114 <pbuf_remove_header>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d00a      	beq.n	8017ec2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017eac:	4b20      	ldr	r3, [pc, #128]	; (8017f30 <udp_input+0x208>)
 8017eae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017eb2:	4925      	ldr	r1, [pc, #148]	; (8017f48 <udp_input+0x220>)
 8017eb4:	4820      	ldr	r0, [pc, #128]	; (8017f38 <udp_input+0x210>)
 8017eb6:	f003 fd19 	bl	801b8ec <printf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017eba:	6878      	ldr	r0, [r7, #4]
 8017ebc:	f7f9 f9b0 	bl	8011220 <pbuf_free>
      goto end;
 8017ec0:	e032      	b.n	8017f28 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d012      	beq.n	8017eee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eca:	699b      	ldr	r3, [r3, #24]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d00a      	beq.n	8017ee6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed2:	699c      	ldr	r4, [r3, #24]
 8017ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed6:	69d8      	ldr	r0, [r3, #28]
 8017ed8:	8a3b      	ldrh	r3, [r7, #16]
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	4b1b      	ldr	r3, [pc, #108]	; (8017f4c <udp_input+0x224>)
 8017ede:	687a      	ldr	r2, [r7, #4]
 8017ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017ee2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017ee4:	e021      	b.n	8017f2a <udp_input+0x202>
        pbuf_free(p);
 8017ee6:	6878      	ldr	r0, [r7, #4]
 8017ee8:	f7f9 f99a 	bl	8011220 <pbuf_free>
        goto end;
 8017eec:	e01c      	b.n	8017f28 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017eee:	7cfb      	ldrb	r3, [r7, #19]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d112      	bne.n	8017f1a <udp_input+0x1f2>
 8017ef4:	4b12      	ldr	r3, [pc, #72]	; (8017f40 <udp_input+0x218>)
 8017ef6:	695b      	ldr	r3, [r3, #20]
 8017ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017efc:	2be0      	cmp	r3, #224	; 0xe0
 8017efe:	d00c      	beq.n	8017f1a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017f00:	4b0f      	ldr	r3, [pc, #60]	; (8017f40 <udp_input+0x218>)
 8017f02:	899b      	ldrh	r3, [r3, #12]
 8017f04:	3308      	adds	r3, #8
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	b21b      	sxth	r3, r3
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f7f9 f974 	bl	80111fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017f12:	2103      	movs	r1, #3
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f001 fb93 	bl	8019640 <icmp_dest_unreach>
      pbuf_free(p);
 8017f1a:	6878      	ldr	r0, [r7, #4]
 8017f1c:	f7f9 f980 	bl	8011220 <pbuf_free>
  return;
 8017f20:	e003      	b.n	8017f2a <udp_input+0x202>
    pbuf_free(p);
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f7f9 f97c 	bl	8011220 <pbuf_free>
  return;
 8017f28:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017f2a:	372c      	adds	r7, #44	; 0x2c
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd90      	pop	{r4, r7, pc}
 8017f30:	080275bc 	.word	0x080275bc
 8017f34:	08027660 	.word	0x08027660
 8017f38:	08027610 	.word	0x08027610
 8017f3c:	08027678 	.word	0x08027678
 8017f40:	200086bc 	.word	0x200086bc
 8017f44:	2000bde8 	.word	0x2000bde8
 8017f48:	08027694 	.word	0x08027694
 8017f4c:	200086cc 	.word	0x200086cc

08017f50 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d109      	bne.n	8017f74 <udp_send+0x24>
 8017f60:	4b11      	ldr	r3, [pc, #68]	; (8017fa8 <udp_send+0x58>)
 8017f62:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017f66:	4911      	ldr	r1, [pc, #68]	; (8017fac <udp_send+0x5c>)
 8017f68:	4811      	ldr	r0, [pc, #68]	; (8017fb0 <udp_send+0x60>)
 8017f6a:	f003 fcbf 	bl	801b8ec <printf>
 8017f6e:	f06f 030f 	mvn.w	r3, #15
 8017f72:	e015      	b.n	8017fa0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d109      	bne.n	8017f8e <udp_send+0x3e>
 8017f7a:	4b0b      	ldr	r3, [pc, #44]	; (8017fa8 <udp_send+0x58>)
 8017f7c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017f80:	490c      	ldr	r1, [pc, #48]	; (8017fb4 <udp_send+0x64>)
 8017f82:	480b      	ldr	r0, [pc, #44]	; (8017fb0 <udp_send+0x60>)
 8017f84:	f003 fcb2 	bl	801b8ec <printf>
 8017f88:	f06f 030f 	mvn.w	r3, #15
 8017f8c:	e008      	b.n	8017fa0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	1d1a      	adds	r2, r3, #4
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	8a9b      	ldrh	r3, [r3, #20]
 8017f96:	6839      	ldr	r1, [r7, #0]
 8017f98:	6878      	ldr	r0, [r7, #4]
 8017f9a:	f000 f80d 	bl	8017fb8 <udp_sendto>
 8017f9e:	4603      	mov	r3, r0
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	3708      	adds	r7, #8
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd80      	pop	{r7, pc}
 8017fa8:	080275bc 	.word	0x080275bc
 8017fac:	080276b0 	.word	0x080276b0
 8017fb0:	08027610 	.word	0x08027610
 8017fb4:	080276c8 	.word	0x080276c8

08017fb8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b088      	sub	sp, #32
 8017fbc:	af02      	add	r7, sp, #8
 8017fbe:	60f8      	str	r0, [r7, #12]
 8017fc0:	60b9      	str	r1, [r7, #8]
 8017fc2:	607a      	str	r2, [r7, #4]
 8017fc4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d109      	bne.n	8017fe0 <udp_sendto+0x28>
 8017fcc:	4b23      	ldr	r3, [pc, #140]	; (801805c <udp_sendto+0xa4>)
 8017fce:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017fd2:	4923      	ldr	r1, [pc, #140]	; (8018060 <udp_sendto+0xa8>)
 8017fd4:	4823      	ldr	r0, [pc, #140]	; (8018064 <udp_sendto+0xac>)
 8017fd6:	f003 fc89 	bl	801b8ec <printf>
 8017fda:	f06f 030f 	mvn.w	r3, #15
 8017fde:	e038      	b.n	8018052 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d109      	bne.n	8017ffa <udp_sendto+0x42>
 8017fe6:	4b1d      	ldr	r3, [pc, #116]	; (801805c <udp_sendto+0xa4>)
 8017fe8:	f240 2219 	movw	r2, #537	; 0x219
 8017fec:	491e      	ldr	r1, [pc, #120]	; (8018068 <udp_sendto+0xb0>)
 8017fee:	481d      	ldr	r0, [pc, #116]	; (8018064 <udp_sendto+0xac>)
 8017ff0:	f003 fc7c 	bl	801b8ec <printf>
 8017ff4:	f06f 030f 	mvn.w	r3, #15
 8017ff8:	e02b      	b.n	8018052 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d109      	bne.n	8018014 <udp_sendto+0x5c>
 8018000:	4b16      	ldr	r3, [pc, #88]	; (801805c <udp_sendto+0xa4>)
 8018002:	f240 221a 	movw	r2, #538	; 0x21a
 8018006:	4919      	ldr	r1, [pc, #100]	; (801806c <udp_sendto+0xb4>)
 8018008:	4816      	ldr	r0, [pc, #88]	; (8018064 <udp_sendto+0xac>)
 801800a:	f003 fc6f 	bl	801b8ec <printf>
 801800e:	f06f 030f 	mvn.w	r3, #15
 8018012:	e01e      	b.n	8018052 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	7a1b      	ldrb	r3, [r3, #8]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d006      	beq.n	801802a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	7a1b      	ldrb	r3, [r3, #8]
 8018020:	4618      	mov	r0, r3
 8018022:	f7f8 fd6f 	bl	8010b04 <netif_get_by_index>
 8018026:	6178      	str	r0, [r7, #20]
 8018028:	e003      	b.n	8018032 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f001 fb92 	bl	8019754 <ip4_route>
 8018030:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d102      	bne.n	801803e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018038:	f06f 0303 	mvn.w	r3, #3
 801803c:	e009      	b.n	8018052 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801803e:	887a      	ldrh	r2, [r7, #2]
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	9300      	str	r3, [sp, #0]
 8018044:	4613      	mov	r3, r2
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	68b9      	ldr	r1, [r7, #8]
 801804a:	68f8      	ldr	r0, [r7, #12]
 801804c:	f000 f810 	bl	8018070 <udp_sendto_if>
 8018050:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018052:	4618      	mov	r0, r3
 8018054:	3718      	adds	r7, #24
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	080275bc 	.word	0x080275bc
 8018060:	080276e0 	.word	0x080276e0
 8018064:	08027610 	.word	0x08027610
 8018068:	080276f8 	.word	0x080276f8
 801806c:	08027714 	.word	0x08027714

08018070 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b088      	sub	sp, #32
 8018074:	af02      	add	r7, sp, #8
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	607a      	str	r2, [r7, #4]
 801807c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d109      	bne.n	8018098 <udp_sendto_if+0x28>
 8018084:	4b2e      	ldr	r3, [pc, #184]	; (8018140 <udp_sendto_if+0xd0>)
 8018086:	f44f 7220 	mov.w	r2, #640	; 0x280
 801808a:	492e      	ldr	r1, [pc, #184]	; (8018144 <udp_sendto_if+0xd4>)
 801808c:	482e      	ldr	r0, [pc, #184]	; (8018148 <udp_sendto_if+0xd8>)
 801808e:	f003 fc2d 	bl	801b8ec <printf>
 8018092:	f06f 030f 	mvn.w	r3, #15
 8018096:	e04f      	b.n	8018138 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d109      	bne.n	80180b2 <udp_sendto_if+0x42>
 801809e:	4b28      	ldr	r3, [pc, #160]	; (8018140 <udp_sendto_if+0xd0>)
 80180a0:	f240 2281 	movw	r2, #641	; 0x281
 80180a4:	4929      	ldr	r1, [pc, #164]	; (801814c <udp_sendto_if+0xdc>)
 80180a6:	4828      	ldr	r0, [pc, #160]	; (8018148 <udp_sendto_if+0xd8>)
 80180a8:	f003 fc20 	bl	801b8ec <printf>
 80180ac:	f06f 030f 	mvn.w	r3, #15
 80180b0:	e042      	b.n	8018138 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d109      	bne.n	80180cc <udp_sendto_if+0x5c>
 80180b8:	4b21      	ldr	r3, [pc, #132]	; (8018140 <udp_sendto_if+0xd0>)
 80180ba:	f240 2282 	movw	r2, #642	; 0x282
 80180be:	4924      	ldr	r1, [pc, #144]	; (8018150 <udp_sendto_if+0xe0>)
 80180c0:	4821      	ldr	r0, [pc, #132]	; (8018148 <udp_sendto_if+0xd8>)
 80180c2:	f003 fc13 	bl	801b8ec <printf>
 80180c6:	f06f 030f 	mvn.w	r3, #15
 80180ca:	e035      	b.n	8018138 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80180cc:	6a3b      	ldr	r3, [r7, #32]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d109      	bne.n	80180e6 <udp_sendto_if+0x76>
 80180d2:	4b1b      	ldr	r3, [pc, #108]	; (8018140 <udp_sendto_if+0xd0>)
 80180d4:	f240 2283 	movw	r2, #643	; 0x283
 80180d8:	491e      	ldr	r1, [pc, #120]	; (8018154 <udp_sendto_if+0xe4>)
 80180da:	481b      	ldr	r0, [pc, #108]	; (8018148 <udp_sendto_if+0xd8>)
 80180dc:	f003 fc06 	bl	801b8ec <printf>
 80180e0:	f06f 030f 	mvn.w	r3, #15
 80180e4:	e028      	b.n	8018138 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d009      	beq.n	8018100 <udp_sendto_if+0x90>
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d005      	beq.n	8018100 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80180fc:	2be0      	cmp	r3, #224	; 0xe0
 80180fe:	d103      	bne.n	8018108 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018100:	6a3b      	ldr	r3, [r7, #32]
 8018102:	3304      	adds	r3, #4
 8018104:	617b      	str	r3, [r7, #20]
 8018106:	e00b      	b.n	8018120 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	681a      	ldr	r2, [r3, #0]
 801810c:	6a3b      	ldr	r3, [r7, #32]
 801810e:	3304      	adds	r3, #4
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	429a      	cmp	r2, r3
 8018114:	d002      	beq.n	801811c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018116:	f06f 0303 	mvn.w	r3, #3
 801811a:	e00d      	b.n	8018138 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018120:	887a      	ldrh	r2, [r7, #2]
 8018122:	697b      	ldr	r3, [r7, #20]
 8018124:	9301      	str	r3, [sp, #4]
 8018126:	6a3b      	ldr	r3, [r7, #32]
 8018128:	9300      	str	r3, [sp, #0]
 801812a:	4613      	mov	r3, r2
 801812c:	687a      	ldr	r2, [r7, #4]
 801812e:	68b9      	ldr	r1, [r7, #8]
 8018130:	68f8      	ldr	r0, [r7, #12]
 8018132:	f000 f811 	bl	8018158 <udp_sendto_if_src>
 8018136:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018138:	4618      	mov	r0, r3
 801813a:	3718      	adds	r7, #24
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}
 8018140:	080275bc 	.word	0x080275bc
 8018144:	08027730 	.word	0x08027730
 8018148:	08027610 	.word	0x08027610
 801814c:	0802774c 	.word	0x0802774c
 8018150:	08027768 	.word	0x08027768
 8018154:	08027788 	.word	0x08027788

08018158 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b08c      	sub	sp, #48	; 0x30
 801815c:	af04      	add	r7, sp, #16
 801815e:	60f8      	str	r0, [r7, #12]
 8018160:	60b9      	str	r1, [r7, #8]
 8018162:	607a      	str	r2, [r7, #4]
 8018164:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d109      	bne.n	8018180 <udp_sendto_if_src+0x28>
 801816c:	4b65      	ldr	r3, [pc, #404]	; (8018304 <udp_sendto_if_src+0x1ac>)
 801816e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018172:	4965      	ldr	r1, [pc, #404]	; (8018308 <udp_sendto_if_src+0x1b0>)
 8018174:	4865      	ldr	r0, [pc, #404]	; (801830c <udp_sendto_if_src+0x1b4>)
 8018176:	f003 fbb9 	bl	801b8ec <printf>
 801817a:	f06f 030f 	mvn.w	r3, #15
 801817e:	e0bc      	b.n	80182fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d109      	bne.n	801819a <udp_sendto_if_src+0x42>
 8018186:	4b5f      	ldr	r3, [pc, #380]	; (8018304 <udp_sendto_if_src+0x1ac>)
 8018188:	f240 22d2 	movw	r2, #722	; 0x2d2
 801818c:	4960      	ldr	r1, [pc, #384]	; (8018310 <udp_sendto_if_src+0x1b8>)
 801818e:	485f      	ldr	r0, [pc, #380]	; (801830c <udp_sendto_if_src+0x1b4>)
 8018190:	f003 fbac 	bl	801b8ec <printf>
 8018194:	f06f 030f 	mvn.w	r3, #15
 8018198:	e0af      	b.n	80182fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d109      	bne.n	80181b4 <udp_sendto_if_src+0x5c>
 80181a0:	4b58      	ldr	r3, [pc, #352]	; (8018304 <udp_sendto_if_src+0x1ac>)
 80181a2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80181a6:	495b      	ldr	r1, [pc, #364]	; (8018314 <udp_sendto_if_src+0x1bc>)
 80181a8:	4858      	ldr	r0, [pc, #352]	; (801830c <udp_sendto_if_src+0x1b4>)
 80181aa:	f003 fb9f 	bl	801b8ec <printf>
 80181ae:	f06f 030f 	mvn.w	r3, #15
 80181b2:	e0a2      	b.n	80182fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80181b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d109      	bne.n	80181ce <udp_sendto_if_src+0x76>
 80181ba:	4b52      	ldr	r3, [pc, #328]	; (8018304 <udp_sendto_if_src+0x1ac>)
 80181bc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80181c0:	4955      	ldr	r1, [pc, #340]	; (8018318 <udp_sendto_if_src+0x1c0>)
 80181c2:	4852      	ldr	r0, [pc, #328]	; (801830c <udp_sendto_if_src+0x1b4>)
 80181c4:	f003 fb92 	bl	801b8ec <printf>
 80181c8:	f06f 030f 	mvn.w	r3, #15
 80181cc:	e095      	b.n	80182fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80181ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d109      	bne.n	80181e8 <udp_sendto_if_src+0x90>
 80181d4:	4b4b      	ldr	r3, [pc, #300]	; (8018304 <udp_sendto_if_src+0x1ac>)
 80181d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80181da:	4950      	ldr	r1, [pc, #320]	; (801831c <udp_sendto_if_src+0x1c4>)
 80181dc:	484b      	ldr	r0, [pc, #300]	; (801830c <udp_sendto_if_src+0x1b4>)
 80181de:	f003 fb85 	bl	801b8ec <printf>
 80181e2:	f06f 030f 	mvn.w	r3, #15
 80181e6:	e088      	b.n	80182fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	8a5b      	ldrh	r3, [r3, #18]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d10f      	bne.n	8018210 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80181f0:	68f9      	ldr	r1, [r7, #12]
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	8a5b      	ldrh	r3, [r3, #18]
 80181f6:	461a      	mov	r2, r3
 80181f8:	68f8      	ldr	r0, [r7, #12]
 80181fa:	f000 f893 	bl	8018324 <udp_bind>
 80181fe:	4603      	mov	r3, r0
 8018200:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8018202:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d002      	beq.n	8018210 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801820a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801820e:	e074      	b.n	80182fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	891b      	ldrh	r3, [r3, #8]
 8018214:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018218:	4293      	cmp	r3, r2
 801821a:	d902      	bls.n	8018222 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801821c:	f04f 33ff 	mov.w	r3, #4294967295
 8018220:	e06b      	b.n	80182fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018222:	2108      	movs	r1, #8
 8018224:	68b8      	ldr	r0, [r7, #8]
 8018226:	f7f8 ff65 	bl	80110f4 <pbuf_add_header>
 801822a:	4603      	mov	r3, r0
 801822c:	2b00      	cmp	r3, #0
 801822e:	d015      	beq.n	801825c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018230:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018234:	2108      	movs	r1, #8
 8018236:	2022      	movs	r0, #34	; 0x22
 8018238:	f7f8 fd0e 	bl	8010c58 <pbuf_alloc>
 801823c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801823e:	69fb      	ldr	r3, [r7, #28]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d102      	bne.n	801824a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018244:	f04f 33ff 	mov.w	r3, #4294967295
 8018248:	e057      	b.n	80182fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801824a:	68bb      	ldr	r3, [r7, #8]
 801824c:	891b      	ldrh	r3, [r3, #8]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d006      	beq.n	8018260 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018252:	68b9      	ldr	r1, [r7, #8]
 8018254:	69f8      	ldr	r0, [r7, #28]
 8018256:	f7f9 f907 	bl	8011468 <pbuf_chain>
 801825a:	e001      	b.n	8018260 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018260:	69fb      	ldr	r3, [r7, #28]
 8018262:	895b      	ldrh	r3, [r3, #10]
 8018264:	2b07      	cmp	r3, #7
 8018266:	d806      	bhi.n	8018276 <udp_sendto_if_src+0x11e>
 8018268:	4b26      	ldr	r3, [pc, #152]	; (8018304 <udp_sendto_if_src+0x1ac>)
 801826a:	f240 320d 	movw	r2, #781	; 0x30d
 801826e:	492c      	ldr	r1, [pc, #176]	; (8018320 <udp_sendto_if_src+0x1c8>)
 8018270:	4826      	ldr	r0, [pc, #152]	; (801830c <udp_sendto_if_src+0x1b4>)
 8018272:	f003 fb3b 	bl	801b8ec <printf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	685b      	ldr	r3, [r3, #4]
 801827a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	8a5b      	ldrh	r3, [r3, #18]
 8018280:	4618      	mov	r0, r3
 8018282:	f7f7 fc11 	bl	800faa8 <lwip_htons>
 8018286:	4603      	mov	r3, r0
 8018288:	461a      	mov	r2, r3
 801828a:	697b      	ldr	r3, [r7, #20]
 801828c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801828e:	887b      	ldrh	r3, [r7, #2]
 8018290:	4618      	mov	r0, r3
 8018292:	f7f7 fc09 	bl	800faa8 <lwip_htons>
 8018296:	4603      	mov	r3, r0
 8018298:	461a      	mov	r2, r3
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	2200      	movs	r2, #0
 80182a2:	719a      	strb	r2, [r3, #6]
 80182a4:	2200      	movs	r2, #0
 80182a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80182a8:	69fb      	ldr	r3, [r7, #28]
 80182aa:	891b      	ldrh	r3, [r3, #8]
 80182ac:	4618      	mov	r0, r3
 80182ae:	f7f7 fbfb 	bl	800faa8 <lwip_htons>
 80182b2:	4603      	mov	r3, r0
 80182b4:	461a      	mov	r2, r3
 80182b6:	697b      	ldr	r3, [r7, #20]
 80182b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80182ba:	2311      	movs	r3, #17
 80182bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	7adb      	ldrb	r3, [r3, #11]
 80182c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	7a9b      	ldrb	r3, [r3, #10]
 80182c8:	7cb9      	ldrb	r1, [r7, #18]
 80182ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182cc:	9202      	str	r2, [sp, #8]
 80182ce:	7cfa      	ldrb	r2, [r7, #19]
 80182d0:	9201      	str	r2, [sp, #4]
 80182d2:	9300      	str	r3, [sp, #0]
 80182d4:	460b      	mov	r3, r1
 80182d6:	687a      	ldr	r2, [r7, #4]
 80182d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80182da:	69f8      	ldr	r0, [r7, #28]
 80182dc:	f001 fc22 	bl	8019b24 <ip4_output_if_src>
 80182e0:	4603      	mov	r3, r0
 80182e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80182e4:	69fa      	ldr	r2, [r7, #28]
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d004      	beq.n	80182f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80182ec:	69f8      	ldr	r0, [r7, #28]
 80182ee:	f7f8 ff97 	bl	8011220 <pbuf_free>
    q = NULL;
 80182f2:	2300      	movs	r3, #0
 80182f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80182f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3720      	adds	r7, #32
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	080275bc 	.word	0x080275bc
 8018308:	080277a8 	.word	0x080277a8
 801830c:	08027610 	.word	0x08027610
 8018310:	080277c8 	.word	0x080277c8
 8018314:	080277e8 	.word	0x080277e8
 8018318:	0802780c 	.word	0x0802780c
 801831c:	08027830 	.word	0x08027830
 8018320:	08027854 	.word	0x08027854

08018324 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b086      	sub	sp, #24
 8018328:	af00      	add	r7, sp, #0
 801832a:	60f8      	str	r0, [r7, #12]
 801832c:	60b9      	str	r1, [r7, #8]
 801832e:	4613      	mov	r3, r2
 8018330:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018332:	68bb      	ldr	r3, [r7, #8]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d101      	bne.n	801833c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018338:	4b39      	ldr	r3, [pc, #228]	; (8018420 <udp_bind+0xfc>)
 801833a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	2b00      	cmp	r3, #0
 8018340:	d109      	bne.n	8018356 <udp_bind+0x32>
 8018342:	4b38      	ldr	r3, [pc, #224]	; (8018424 <udp_bind+0x100>)
 8018344:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018348:	4937      	ldr	r1, [pc, #220]	; (8018428 <udp_bind+0x104>)
 801834a:	4838      	ldr	r0, [pc, #224]	; (801842c <udp_bind+0x108>)
 801834c:	f003 face 	bl	801b8ec <printf>
 8018350:	f06f 030f 	mvn.w	r3, #15
 8018354:	e060      	b.n	8018418 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018356:	2300      	movs	r3, #0
 8018358:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801835a:	4b35      	ldr	r3, [pc, #212]	; (8018430 <udp_bind+0x10c>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	617b      	str	r3, [r7, #20]
 8018360:	e009      	b.n	8018376 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018362:	68fa      	ldr	r2, [r7, #12]
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	429a      	cmp	r2, r3
 8018368:	d102      	bne.n	8018370 <udp_bind+0x4c>
      rebind = 1;
 801836a:	2301      	movs	r3, #1
 801836c:	74fb      	strb	r3, [r7, #19]
      break;
 801836e:	e005      	b.n	801837c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	68db      	ldr	r3, [r3, #12]
 8018374:	617b      	str	r3, [r7, #20]
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d1f2      	bne.n	8018362 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801837c:	88fb      	ldrh	r3, [r7, #6]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d109      	bne.n	8018396 <udp_bind+0x72>
    port = udp_new_port();
 8018382:	f7ff fc35 	bl	8017bf0 <udp_new_port>
 8018386:	4603      	mov	r3, r0
 8018388:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801838a:	88fb      	ldrh	r3, [r7, #6]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d12c      	bne.n	80183ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018390:	f06f 0307 	mvn.w	r3, #7
 8018394:	e040      	b.n	8018418 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018396:	4b26      	ldr	r3, [pc, #152]	; (8018430 <udp_bind+0x10c>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	617b      	str	r3, [r7, #20]
 801839c:	e022      	b.n	80183e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801839e:	68fa      	ldr	r2, [r7, #12]
 80183a0:	697b      	ldr	r3, [r7, #20]
 80183a2:	429a      	cmp	r2, r3
 80183a4:	d01b      	beq.n	80183de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80183a6:	697b      	ldr	r3, [r7, #20]
 80183a8:	8a5b      	ldrh	r3, [r3, #18]
 80183aa:	88fa      	ldrh	r2, [r7, #6]
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d116      	bne.n	80183de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d00d      	beq.n	80183d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d00a      	beq.n	80183d8 <udp_bind+0xb4>
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d006      	beq.n	80183d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80183ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d003      	beq.n	80183d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d102      	bne.n	80183de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80183d8:	f06f 0307 	mvn.w	r3, #7
 80183dc:	e01c      	b.n	8018418 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80183de:	697b      	ldr	r3, [r7, #20]
 80183e0:	68db      	ldr	r3, [r3, #12]
 80183e2:	617b      	str	r3, [r7, #20]
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d1d9      	bne.n	801839e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d002      	beq.n	80183f6 <udp_bind+0xd2>
 80183f0:	68bb      	ldr	r3, [r7, #8]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	e000      	b.n	80183f8 <udp_bind+0xd4>
 80183f6:	2300      	movs	r3, #0
 80183f8:	68fa      	ldr	r2, [r7, #12]
 80183fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	88fa      	ldrh	r2, [r7, #6]
 8018400:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018402:	7cfb      	ldrb	r3, [r7, #19]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d106      	bne.n	8018416 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018408:	4b09      	ldr	r3, [pc, #36]	; (8018430 <udp_bind+0x10c>)
 801840a:	681a      	ldr	r2, [r3, #0]
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018410:	4a07      	ldr	r2, [pc, #28]	; (8018430 <udp_bind+0x10c>)
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018416:	2300      	movs	r3, #0
}
 8018418:	4618      	mov	r0, r3
 801841a:	3718      	adds	r7, #24
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}
 8018420:	08029f14 	.word	0x08029f14
 8018424:	080275bc 	.word	0x080275bc
 8018428:	08027884 	.word	0x08027884
 801842c:	08027610 	.word	0x08027610
 8018430:	2000bde8 	.word	0x2000bde8

08018434 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b084      	sub	sp, #16
 8018438:	af00      	add	r7, sp, #0
 801843a:	60f8      	str	r0, [r7, #12]
 801843c:	60b9      	str	r1, [r7, #8]
 801843e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d107      	bne.n	8018456 <udp_recv+0x22>
 8018446:	4b08      	ldr	r3, [pc, #32]	; (8018468 <udp_recv+0x34>)
 8018448:	f240 428a 	movw	r2, #1162	; 0x48a
 801844c:	4907      	ldr	r1, [pc, #28]	; (801846c <udp_recv+0x38>)
 801844e:	4808      	ldr	r0, [pc, #32]	; (8018470 <udp_recv+0x3c>)
 8018450:	f003 fa4c 	bl	801b8ec <printf>
 8018454:	e005      	b.n	8018462 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	68ba      	ldr	r2, [r7, #8]
 801845a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	687a      	ldr	r2, [r7, #4]
 8018460:	61da      	str	r2, [r3, #28]
}
 8018462:	3710      	adds	r7, #16
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	080275bc 	.word	0x080275bc
 801846c:	080278f0 	.word	0x080278f0
 8018470:	08027610 	.word	0x08027610

08018474 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b084      	sub	sp, #16
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d107      	bne.n	8018492 <udp_remove+0x1e>
 8018482:	4b19      	ldr	r3, [pc, #100]	; (80184e8 <udp_remove+0x74>)
 8018484:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018488:	4918      	ldr	r1, [pc, #96]	; (80184ec <udp_remove+0x78>)
 801848a:	4819      	ldr	r0, [pc, #100]	; (80184f0 <udp_remove+0x7c>)
 801848c:	f003 fa2e 	bl	801b8ec <printf>
 8018490:	e026      	b.n	80184e0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018492:	4b18      	ldr	r3, [pc, #96]	; (80184f4 <udp_remove+0x80>)
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	429a      	cmp	r2, r3
 801849a:	d105      	bne.n	80184a8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801849c:	4b15      	ldr	r3, [pc, #84]	; (80184f4 <udp_remove+0x80>)
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	68db      	ldr	r3, [r3, #12]
 80184a2:	4a14      	ldr	r2, [pc, #80]	; (80184f4 <udp_remove+0x80>)
 80184a4:	6013      	str	r3, [r2, #0]
 80184a6:	e017      	b.n	80184d8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80184a8:	4b12      	ldr	r3, [pc, #72]	; (80184f4 <udp_remove+0x80>)
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	60fb      	str	r3, [r7, #12]
 80184ae:	e010      	b.n	80184d2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	68db      	ldr	r3, [r3, #12]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d009      	beq.n	80184cc <udp_remove+0x58>
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	68db      	ldr	r3, [r3, #12]
 80184bc:	687a      	ldr	r2, [r7, #4]
 80184be:	429a      	cmp	r2, r3
 80184c0:	d104      	bne.n	80184cc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	68da      	ldr	r2, [r3, #12]
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	60da      	str	r2, [r3, #12]
        break;
 80184ca:	e005      	b.n	80184d8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	68db      	ldr	r3, [r3, #12]
 80184d0:	60fb      	str	r3, [r7, #12]
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d1eb      	bne.n	80184b0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80184d8:	6879      	ldr	r1, [r7, #4]
 80184da:	2000      	movs	r0, #0
 80184dc:	f7f8 f822 	bl	8010524 <memp_free>
}
 80184e0:	3710      	adds	r7, #16
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}
 80184e6:	bf00      	nop
 80184e8:	080275bc 	.word	0x080275bc
 80184ec:	08027908 	.word	0x08027908
 80184f0:	08027610 	.word	0x08027610
 80184f4:	2000bde8 	.word	0x2000bde8

080184f8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b082      	sub	sp, #8
 80184fc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80184fe:	2000      	movs	r0, #0
 8018500:	f7f7 ffbe 	bl	8010480 <memp_malloc>
 8018504:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d007      	beq.n	801851c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801850c:	2220      	movs	r2, #32
 801850e:	2100      	movs	r1, #0
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f002 ff65 	bl	801b3e0 <memset>
    pcb->ttl = UDP_TTL;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	22ff      	movs	r2, #255	; 0xff
 801851a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801851c:	687b      	ldr	r3, [r7, #4]
}
 801851e:	4618      	mov	r0, r3
 8018520:	3708      	adds	r7, #8
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}

08018526 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018526:	b580      	push	{r7, lr}
 8018528:	b084      	sub	sp, #16
 801852a:	af00      	add	r7, sp, #0
 801852c:	4603      	mov	r3, r0
 801852e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018530:	f7ff ffe2 	bl	80184f8 <udp_new>
 8018534:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018536:	68fb      	ldr	r3, [r7, #12]
}
 8018538:	4618      	mov	r0, r3
 801853a:	3710      	adds	r7, #16
 801853c:	46bd      	mov	sp, r7
 801853e:	bd80      	pop	{r7, pc}

08018540 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018540:	b480      	push	{r7}
 8018542:	b085      	sub	sp, #20
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
 8018548:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d01e      	beq.n	801858e <udp_netif_ip_addr_changed+0x4e>
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d01a      	beq.n	801858e <udp_netif_ip_addr_changed+0x4e>
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d017      	beq.n	801858e <udp_netif_ip_addr_changed+0x4e>
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d013      	beq.n	801858e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018566:	4b0d      	ldr	r3, [pc, #52]	; (801859c <udp_netif_ip_addr_changed+0x5c>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	60fb      	str	r3, [r7, #12]
 801856c:	e00c      	b.n	8018588 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681a      	ldr	r2, [r3, #0]
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	429a      	cmp	r2, r3
 8018578:	d103      	bne.n	8018582 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	681a      	ldr	r2, [r3, #0]
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	68db      	ldr	r3, [r3, #12]
 8018586:	60fb      	str	r3, [r7, #12]
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d1ef      	bne.n	801856e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801858e:	bf00      	nop
 8018590:	3714      	adds	r7, #20
 8018592:	46bd      	mov	sp, r7
 8018594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018598:	4770      	bx	lr
 801859a:	bf00      	nop
 801859c:	2000bde8 	.word	0x2000bde8

080185a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80185a8:	4915      	ldr	r1, [pc, #84]	; (8018600 <etharp_free_entry+0x60>)
 80185aa:	687a      	ldr	r2, [r7, #4]
 80185ac:	4613      	mov	r3, r2
 80185ae:	005b      	lsls	r3, r3, #1
 80185b0:	4413      	add	r3, r2
 80185b2:	00db      	lsls	r3, r3, #3
 80185b4:	440b      	add	r3, r1
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d013      	beq.n	80185e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80185bc:	4910      	ldr	r1, [pc, #64]	; (8018600 <etharp_free_entry+0x60>)
 80185be:	687a      	ldr	r2, [r7, #4]
 80185c0:	4613      	mov	r3, r2
 80185c2:	005b      	lsls	r3, r3, #1
 80185c4:	4413      	add	r3, r2
 80185c6:	00db      	lsls	r3, r3, #3
 80185c8:	440b      	add	r3, r1
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7f8 fe27 	bl	8011220 <pbuf_free>
    arp_table[i].q = NULL;
 80185d2:	490b      	ldr	r1, [pc, #44]	; (8018600 <etharp_free_entry+0x60>)
 80185d4:	687a      	ldr	r2, [r7, #4]
 80185d6:	4613      	mov	r3, r2
 80185d8:	005b      	lsls	r3, r3, #1
 80185da:	4413      	add	r3, r2
 80185dc:	00db      	lsls	r3, r3, #3
 80185de:	440b      	add	r3, r1
 80185e0:	2200      	movs	r2, #0
 80185e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80185e4:	4906      	ldr	r1, [pc, #24]	; (8018600 <etharp_free_entry+0x60>)
 80185e6:	687a      	ldr	r2, [r7, #4]
 80185e8:	4613      	mov	r3, r2
 80185ea:	005b      	lsls	r3, r3, #1
 80185ec:	4413      	add	r3, r2
 80185ee:	00db      	lsls	r3, r3, #3
 80185f0:	440b      	add	r3, r1
 80185f2:	3314      	adds	r3, #20
 80185f4:	2200      	movs	r2, #0
 80185f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80185f8:	bf00      	nop
 80185fa:	3708      	adds	r7, #8
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	20004f4c 	.word	0x20004f4c

08018604 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b082      	sub	sp, #8
 8018608:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801860a:	2300      	movs	r3, #0
 801860c:	607b      	str	r3, [r7, #4]
 801860e:	e096      	b.n	801873e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018610:	494f      	ldr	r1, [pc, #316]	; (8018750 <etharp_tmr+0x14c>)
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	4613      	mov	r3, r2
 8018616:	005b      	lsls	r3, r3, #1
 8018618:	4413      	add	r3, r2
 801861a:	00db      	lsls	r3, r3, #3
 801861c:	440b      	add	r3, r1
 801861e:	3314      	adds	r3, #20
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018624:	78fb      	ldrb	r3, [r7, #3]
 8018626:	2b00      	cmp	r3, #0
 8018628:	f000 8086 	beq.w	8018738 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801862c:	4948      	ldr	r1, [pc, #288]	; (8018750 <etharp_tmr+0x14c>)
 801862e:	687a      	ldr	r2, [r7, #4]
 8018630:	4613      	mov	r3, r2
 8018632:	005b      	lsls	r3, r3, #1
 8018634:	4413      	add	r3, r2
 8018636:	00db      	lsls	r3, r3, #3
 8018638:	440b      	add	r3, r1
 801863a:	3312      	adds	r3, #18
 801863c:	881b      	ldrh	r3, [r3, #0]
 801863e:	3301      	adds	r3, #1
 8018640:	b298      	uxth	r0, r3
 8018642:	4943      	ldr	r1, [pc, #268]	; (8018750 <etharp_tmr+0x14c>)
 8018644:	687a      	ldr	r2, [r7, #4]
 8018646:	4613      	mov	r3, r2
 8018648:	005b      	lsls	r3, r3, #1
 801864a:	4413      	add	r3, r2
 801864c:	00db      	lsls	r3, r3, #3
 801864e:	440b      	add	r3, r1
 8018650:	3312      	adds	r3, #18
 8018652:	4602      	mov	r2, r0
 8018654:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018656:	493e      	ldr	r1, [pc, #248]	; (8018750 <etharp_tmr+0x14c>)
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	4613      	mov	r3, r2
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	4413      	add	r3, r2
 8018660:	00db      	lsls	r3, r3, #3
 8018662:	440b      	add	r3, r1
 8018664:	3312      	adds	r3, #18
 8018666:	881b      	ldrh	r3, [r3, #0]
 8018668:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801866c:	d215      	bcs.n	801869a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801866e:	4938      	ldr	r1, [pc, #224]	; (8018750 <etharp_tmr+0x14c>)
 8018670:	687a      	ldr	r2, [r7, #4]
 8018672:	4613      	mov	r3, r2
 8018674:	005b      	lsls	r3, r3, #1
 8018676:	4413      	add	r3, r2
 8018678:	00db      	lsls	r3, r3, #3
 801867a:	440b      	add	r3, r1
 801867c:	3314      	adds	r3, #20
 801867e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018680:	2b01      	cmp	r3, #1
 8018682:	d10e      	bne.n	80186a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018684:	4932      	ldr	r1, [pc, #200]	; (8018750 <etharp_tmr+0x14c>)
 8018686:	687a      	ldr	r2, [r7, #4]
 8018688:	4613      	mov	r3, r2
 801868a:	005b      	lsls	r3, r3, #1
 801868c:	4413      	add	r3, r2
 801868e:	00db      	lsls	r3, r3, #3
 8018690:	440b      	add	r3, r1
 8018692:	3312      	adds	r3, #18
 8018694:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018696:	2b04      	cmp	r3, #4
 8018698:	d903      	bls.n	80186a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	f7ff ff80 	bl	80185a0 <etharp_free_entry>
 80186a0:	e04a      	b.n	8018738 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80186a2:	492b      	ldr	r1, [pc, #172]	; (8018750 <etharp_tmr+0x14c>)
 80186a4:	687a      	ldr	r2, [r7, #4]
 80186a6:	4613      	mov	r3, r2
 80186a8:	005b      	lsls	r3, r3, #1
 80186aa:	4413      	add	r3, r2
 80186ac:	00db      	lsls	r3, r3, #3
 80186ae:	440b      	add	r3, r1
 80186b0:	3314      	adds	r3, #20
 80186b2:	781b      	ldrb	r3, [r3, #0]
 80186b4:	2b03      	cmp	r3, #3
 80186b6:	d10a      	bne.n	80186ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80186b8:	4925      	ldr	r1, [pc, #148]	; (8018750 <etharp_tmr+0x14c>)
 80186ba:	687a      	ldr	r2, [r7, #4]
 80186bc:	4613      	mov	r3, r2
 80186be:	005b      	lsls	r3, r3, #1
 80186c0:	4413      	add	r3, r2
 80186c2:	00db      	lsls	r3, r3, #3
 80186c4:	440b      	add	r3, r1
 80186c6:	3314      	adds	r3, #20
 80186c8:	2204      	movs	r2, #4
 80186ca:	701a      	strb	r2, [r3, #0]
 80186cc:	e034      	b.n	8018738 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80186ce:	4920      	ldr	r1, [pc, #128]	; (8018750 <etharp_tmr+0x14c>)
 80186d0:	687a      	ldr	r2, [r7, #4]
 80186d2:	4613      	mov	r3, r2
 80186d4:	005b      	lsls	r3, r3, #1
 80186d6:	4413      	add	r3, r2
 80186d8:	00db      	lsls	r3, r3, #3
 80186da:	440b      	add	r3, r1
 80186dc:	3314      	adds	r3, #20
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	2b04      	cmp	r3, #4
 80186e2:	d10a      	bne.n	80186fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80186e4:	491a      	ldr	r1, [pc, #104]	; (8018750 <etharp_tmr+0x14c>)
 80186e6:	687a      	ldr	r2, [r7, #4]
 80186e8:	4613      	mov	r3, r2
 80186ea:	005b      	lsls	r3, r3, #1
 80186ec:	4413      	add	r3, r2
 80186ee:	00db      	lsls	r3, r3, #3
 80186f0:	440b      	add	r3, r1
 80186f2:	3314      	adds	r3, #20
 80186f4:	2202      	movs	r2, #2
 80186f6:	701a      	strb	r2, [r3, #0]
 80186f8:	e01e      	b.n	8018738 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80186fa:	4915      	ldr	r1, [pc, #84]	; (8018750 <etharp_tmr+0x14c>)
 80186fc:	687a      	ldr	r2, [r7, #4]
 80186fe:	4613      	mov	r3, r2
 8018700:	005b      	lsls	r3, r3, #1
 8018702:	4413      	add	r3, r2
 8018704:	00db      	lsls	r3, r3, #3
 8018706:	440b      	add	r3, r1
 8018708:	3314      	adds	r3, #20
 801870a:	781b      	ldrb	r3, [r3, #0]
 801870c:	2b01      	cmp	r3, #1
 801870e:	d113      	bne.n	8018738 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018710:	490f      	ldr	r1, [pc, #60]	; (8018750 <etharp_tmr+0x14c>)
 8018712:	687a      	ldr	r2, [r7, #4]
 8018714:	4613      	mov	r3, r2
 8018716:	005b      	lsls	r3, r3, #1
 8018718:	4413      	add	r3, r2
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	440b      	add	r3, r1
 801871e:	3308      	adds	r3, #8
 8018720:	6818      	ldr	r0, [r3, #0]
 8018722:	687a      	ldr	r2, [r7, #4]
 8018724:	4613      	mov	r3, r2
 8018726:	005b      	lsls	r3, r3, #1
 8018728:	4413      	add	r3, r2
 801872a:	00db      	lsls	r3, r3, #3
 801872c:	4a08      	ldr	r2, [pc, #32]	; (8018750 <etharp_tmr+0x14c>)
 801872e:	4413      	add	r3, r2
 8018730:	3304      	adds	r3, #4
 8018732:	4619      	mov	r1, r3
 8018734:	f000 fe6e 	bl	8019414 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	3301      	adds	r3, #1
 801873c:	607b      	str	r3, [r7, #4]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	2b09      	cmp	r3, #9
 8018742:	f77f af65 	ble.w	8018610 <etharp_tmr+0xc>
      }
    }
  }
}
 8018746:	bf00      	nop
 8018748:	bf00      	nop
 801874a:	3708      	adds	r7, #8
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}
 8018750:	20004f4c 	.word	0x20004f4c

08018754 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018754:	b580      	push	{r7, lr}
 8018756:	b08a      	sub	sp, #40	; 0x28
 8018758:	af00      	add	r7, sp, #0
 801875a:	60f8      	str	r0, [r7, #12]
 801875c:	460b      	mov	r3, r1
 801875e:	607a      	str	r2, [r7, #4]
 8018760:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018762:	230a      	movs	r3, #10
 8018764:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018766:	230a      	movs	r3, #10
 8018768:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801876a:	230a      	movs	r3, #10
 801876c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801876e:	2300      	movs	r3, #0
 8018770:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018772:	230a      	movs	r3, #10
 8018774:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018776:	2300      	movs	r3, #0
 8018778:	83bb      	strh	r3, [r7, #28]
 801877a:	2300      	movs	r3, #0
 801877c:	837b      	strh	r3, [r7, #26]
 801877e:	2300      	movs	r3, #0
 8018780:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018782:	2300      	movs	r3, #0
 8018784:	843b      	strh	r3, [r7, #32]
 8018786:	e0ae      	b.n	80188e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018788:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801878c:	49a6      	ldr	r1, [pc, #664]	; (8018a28 <etharp_find_entry+0x2d4>)
 801878e:	4613      	mov	r3, r2
 8018790:	005b      	lsls	r3, r3, #1
 8018792:	4413      	add	r3, r2
 8018794:	00db      	lsls	r3, r3, #3
 8018796:	440b      	add	r3, r1
 8018798:	3314      	adds	r3, #20
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801879e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80187a2:	2b0a      	cmp	r3, #10
 80187a4:	d105      	bne.n	80187b2 <etharp_find_entry+0x5e>
 80187a6:	7dfb      	ldrb	r3, [r7, #23]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d102      	bne.n	80187b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80187ac:	8c3b      	ldrh	r3, [r7, #32]
 80187ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80187b0:	e095      	b.n	80188de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80187b2:	7dfb      	ldrb	r3, [r7, #23]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	f000 8092 	beq.w	80188de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80187ba:	7dfb      	ldrb	r3, [r7, #23]
 80187bc:	2b01      	cmp	r3, #1
 80187be:	d009      	beq.n	80187d4 <etharp_find_entry+0x80>
 80187c0:	7dfb      	ldrb	r3, [r7, #23]
 80187c2:	2b01      	cmp	r3, #1
 80187c4:	d806      	bhi.n	80187d4 <etharp_find_entry+0x80>
 80187c6:	4b99      	ldr	r3, [pc, #612]	; (8018a2c <etharp_find_entry+0x2d8>)
 80187c8:	f240 1223 	movw	r2, #291	; 0x123
 80187cc:	4998      	ldr	r1, [pc, #608]	; (8018a30 <etharp_find_entry+0x2dc>)
 80187ce:	4899      	ldr	r0, [pc, #612]	; (8018a34 <etharp_find_entry+0x2e0>)
 80187d0:	f003 f88c 	bl	801b8ec <printf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d020      	beq.n	801881c <etharp_find_entry+0xc8>
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	6819      	ldr	r1, [r3, #0]
 80187de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187e2:	4891      	ldr	r0, [pc, #580]	; (8018a28 <etharp_find_entry+0x2d4>)
 80187e4:	4613      	mov	r3, r2
 80187e6:	005b      	lsls	r3, r3, #1
 80187e8:	4413      	add	r3, r2
 80187ea:	00db      	lsls	r3, r3, #3
 80187ec:	4403      	add	r3, r0
 80187ee:	3304      	adds	r3, #4
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	4299      	cmp	r1, r3
 80187f4:	d112      	bne.n	801881c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d00c      	beq.n	8018816 <etharp_find_entry+0xc2>
 80187fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018800:	4989      	ldr	r1, [pc, #548]	; (8018a28 <etharp_find_entry+0x2d4>)
 8018802:	4613      	mov	r3, r2
 8018804:	005b      	lsls	r3, r3, #1
 8018806:	4413      	add	r3, r2
 8018808:	00db      	lsls	r3, r3, #3
 801880a:	440b      	add	r3, r1
 801880c:	3308      	adds	r3, #8
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	687a      	ldr	r2, [r7, #4]
 8018812:	429a      	cmp	r2, r3
 8018814:	d102      	bne.n	801881c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018816:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801881a:	e100      	b.n	8018a1e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801881c:	7dfb      	ldrb	r3, [r7, #23]
 801881e:	2b01      	cmp	r3, #1
 8018820:	d140      	bne.n	80188a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018822:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018826:	4980      	ldr	r1, [pc, #512]	; (8018a28 <etharp_find_entry+0x2d4>)
 8018828:	4613      	mov	r3, r2
 801882a:	005b      	lsls	r3, r3, #1
 801882c:	4413      	add	r3, r2
 801882e:	00db      	lsls	r3, r3, #3
 8018830:	440b      	add	r3, r1
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d01a      	beq.n	801886e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018838:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801883c:	497a      	ldr	r1, [pc, #488]	; (8018a28 <etharp_find_entry+0x2d4>)
 801883e:	4613      	mov	r3, r2
 8018840:	005b      	lsls	r3, r3, #1
 8018842:	4413      	add	r3, r2
 8018844:	00db      	lsls	r3, r3, #3
 8018846:	440b      	add	r3, r1
 8018848:	3312      	adds	r3, #18
 801884a:	881b      	ldrh	r3, [r3, #0]
 801884c:	8bba      	ldrh	r2, [r7, #28]
 801884e:	429a      	cmp	r2, r3
 8018850:	d845      	bhi.n	80188de <etharp_find_entry+0x18a>
            old_queue = i;
 8018852:	8c3b      	ldrh	r3, [r7, #32]
 8018854:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018856:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801885a:	4973      	ldr	r1, [pc, #460]	; (8018a28 <etharp_find_entry+0x2d4>)
 801885c:	4613      	mov	r3, r2
 801885e:	005b      	lsls	r3, r3, #1
 8018860:	4413      	add	r3, r2
 8018862:	00db      	lsls	r3, r3, #3
 8018864:	440b      	add	r3, r1
 8018866:	3312      	adds	r3, #18
 8018868:	881b      	ldrh	r3, [r3, #0]
 801886a:	83bb      	strh	r3, [r7, #28]
 801886c:	e037      	b.n	80188de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801886e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018872:	496d      	ldr	r1, [pc, #436]	; (8018a28 <etharp_find_entry+0x2d4>)
 8018874:	4613      	mov	r3, r2
 8018876:	005b      	lsls	r3, r3, #1
 8018878:	4413      	add	r3, r2
 801887a:	00db      	lsls	r3, r3, #3
 801887c:	440b      	add	r3, r1
 801887e:	3312      	adds	r3, #18
 8018880:	881b      	ldrh	r3, [r3, #0]
 8018882:	8b7a      	ldrh	r2, [r7, #26]
 8018884:	429a      	cmp	r2, r3
 8018886:	d82a      	bhi.n	80188de <etharp_find_entry+0x18a>
            old_pending = i;
 8018888:	8c3b      	ldrh	r3, [r7, #32]
 801888a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801888c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018890:	4965      	ldr	r1, [pc, #404]	; (8018a28 <etharp_find_entry+0x2d4>)
 8018892:	4613      	mov	r3, r2
 8018894:	005b      	lsls	r3, r3, #1
 8018896:	4413      	add	r3, r2
 8018898:	00db      	lsls	r3, r3, #3
 801889a:	440b      	add	r3, r1
 801889c:	3312      	adds	r3, #18
 801889e:	881b      	ldrh	r3, [r3, #0]
 80188a0:	837b      	strh	r3, [r7, #26]
 80188a2:	e01c      	b.n	80188de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80188a4:	7dfb      	ldrb	r3, [r7, #23]
 80188a6:	2b01      	cmp	r3, #1
 80188a8:	d919      	bls.n	80188de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80188aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188ae:	495e      	ldr	r1, [pc, #376]	; (8018a28 <etharp_find_entry+0x2d4>)
 80188b0:	4613      	mov	r3, r2
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	4413      	add	r3, r2
 80188b6:	00db      	lsls	r3, r3, #3
 80188b8:	440b      	add	r3, r1
 80188ba:	3312      	adds	r3, #18
 80188bc:	881b      	ldrh	r3, [r3, #0]
 80188be:	8b3a      	ldrh	r2, [r7, #24]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d80c      	bhi.n	80188de <etharp_find_entry+0x18a>
            old_stable = i;
 80188c4:	8c3b      	ldrh	r3, [r7, #32]
 80188c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80188c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188cc:	4956      	ldr	r1, [pc, #344]	; (8018a28 <etharp_find_entry+0x2d4>)
 80188ce:	4613      	mov	r3, r2
 80188d0:	005b      	lsls	r3, r3, #1
 80188d2:	4413      	add	r3, r2
 80188d4:	00db      	lsls	r3, r3, #3
 80188d6:	440b      	add	r3, r1
 80188d8:	3312      	adds	r3, #18
 80188da:	881b      	ldrh	r3, [r3, #0]
 80188dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80188de:	8c3b      	ldrh	r3, [r7, #32]
 80188e0:	3301      	adds	r3, #1
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	843b      	strh	r3, [r7, #32]
 80188e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80188ea:	2b09      	cmp	r3, #9
 80188ec:	f77f af4c 	ble.w	8018788 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80188f0:	7afb      	ldrb	r3, [r7, #11]
 80188f2:	f003 0302 	and.w	r3, r3, #2
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d108      	bne.n	801890c <etharp_find_entry+0x1b8>
 80188fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80188fe:	2b0a      	cmp	r3, #10
 8018900:	d107      	bne.n	8018912 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018902:	7afb      	ldrb	r3, [r7, #11]
 8018904:	f003 0301 	and.w	r3, r3, #1
 8018908:	2b00      	cmp	r3, #0
 801890a:	d102      	bne.n	8018912 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801890c:	f04f 33ff 	mov.w	r3, #4294967295
 8018910:	e085      	b.n	8018a1e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018912:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018916:	2b09      	cmp	r3, #9
 8018918:	dc02      	bgt.n	8018920 <etharp_find_entry+0x1cc>
    i = empty;
 801891a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801891c:	843b      	strh	r3, [r7, #32]
 801891e:	e039      	b.n	8018994 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018920:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018924:	2b09      	cmp	r3, #9
 8018926:	dc14      	bgt.n	8018952 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801892a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801892c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018930:	493d      	ldr	r1, [pc, #244]	; (8018a28 <etharp_find_entry+0x2d4>)
 8018932:	4613      	mov	r3, r2
 8018934:	005b      	lsls	r3, r3, #1
 8018936:	4413      	add	r3, r2
 8018938:	00db      	lsls	r3, r3, #3
 801893a:	440b      	add	r3, r1
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d018      	beq.n	8018974 <etharp_find_entry+0x220>
 8018942:	4b3a      	ldr	r3, [pc, #232]	; (8018a2c <etharp_find_entry+0x2d8>)
 8018944:	f240 126d 	movw	r2, #365	; 0x16d
 8018948:	493b      	ldr	r1, [pc, #236]	; (8018a38 <etharp_find_entry+0x2e4>)
 801894a:	483a      	ldr	r0, [pc, #232]	; (8018a34 <etharp_find_entry+0x2e0>)
 801894c:	f002 ffce 	bl	801b8ec <printf>
 8018950:	e010      	b.n	8018974 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018952:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018956:	2b09      	cmp	r3, #9
 8018958:	dc02      	bgt.n	8018960 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801895a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801895c:	843b      	strh	r3, [r7, #32]
 801895e:	e009      	b.n	8018974 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018960:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018964:	2b09      	cmp	r3, #9
 8018966:	dc02      	bgt.n	801896e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018968:	8bfb      	ldrh	r3, [r7, #30]
 801896a:	843b      	strh	r3, [r7, #32]
 801896c:	e002      	b.n	8018974 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801896e:	f04f 33ff 	mov.w	r3, #4294967295
 8018972:	e054      	b.n	8018a1e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018974:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018978:	2b09      	cmp	r3, #9
 801897a:	dd06      	ble.n	801898a <etharp_find_entry+0x236>
 801897c:	4b2b      	ldr	r3, [pc, #172]	; (8018a2c <etharp_find_entry+0x2d8>)
 801897e:	f240 127f 	movw	r2, #383	; 0x17f
 8018982:	492e      	ldr	r1, [pc, #184]	; (8018a3c <etharp_find_entry+0x2e8>)
 8018984:	482b      	ldr	r0, [pc, #172]	; (8018a34 <etharp_find_entry+0x2e0>)
 8018986:	f002 ffb1 	bl	801b8ec <printf>
    etharp_free_entry(i);
 801898a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801898e:	4618      	mov	r0, r3
 8018990:	f7ff fe06 	bl	80185a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018994:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018998:	2b09      	cmp	r3, #9
 801899a:	dd06      	ble.n	80189aa <etharp_find_entry+0x256>
 801899c:	4b23      	ldr	r3, [pc, #140]	; (8018a2c <etharp_find_entry+0x2d8>)
 801899e:	f240 1283 	movw	r2, #387	; 0x183
 80189a2:	4926      	ldr	r1, [pc, #152]	; (8018a3c <etharp_find_entry+0x2e8>)
 80189a4:	4823      	ldr	r0, [pc, #140]	; (8018a34 <etharp_find_entry+0x2e0>)
 80189a6:	f002 ffa1 	bl	801b8ec <printf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80189aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189ae:	491e      	ldr	r1, [pc, #120]	; (8018a28 <etharp_find_entry+0x2d4>)
 80189b0:	4613      	mov	r3, r2
 80189b2:	005b      	lsls	r3, r3, #1
 80189b4:	4413      	add	r3, r2
 80189b6:	00db      	lsls	r3, r3, #3
 80189b8:	440b      	add	r3, r1
 80189ba:	3314      	adds	r3, #20
 80189bc:	781b      	ldrb	r3, [r3, #0]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d006      	beq.n	80189d0 <etharp_find_entry+0x27c>
 80189c2:	4b1a      	ldr	r3, [pc, #104]	; (8018a2c <etharp_find_entry+0x2d8>)
 80189c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80189c8:	491d      	ldr	r1, [pc, #116]	; (8018a40 <etharp_find_entry+0x2ec>)
 80189ca:	481a      	ldr	r0, [pc, #104]	; (8018a34 <etharp_find_entry+0x2e0>)
 80189cc:	f002 ff8e 	bl	801b8ec <printf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	d00b      	beq.n	80189ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80189d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	6819      	ldr	r1, [r3, #0]
 80189de:	4812      	ldr	r0, [pc, #72]	; (8018a28 <etharp_find_entry+0x2d4>)
 80189e0:	4613      	mov	r3, r2
 80189e2:	005b      	lsls	r3, r3, #1
 80189e4:	4413      	add	r3, r2
 80189e6:	00db      	lsls	r3, r3, #3
 80189e8:	4403      	add	r3, r0
 80189ea:	3304      	adds	r3, #4
 80189ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80189ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189f2:	490d      	ldr	r1, [pc, #52]	; (8018a28 <etharp_find_entry+0x2d4>)
 80189f4:	4613      	mov	r3, r2
 80189f6:	005b      	lsls	r3, r3, #1
 80189f8:	4413      	add	r3, r2
 80189fa:	00db      	lsls	r3, r3, #3
 80189fc:	440b      	add	r3, r1
 80189fe:	3312      	adds	r3, #18
 8018a00:	2200      	movs	r2, #0
 8018a02:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018a04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a08:	4907      	ldr	r1, [pc, #28]	; (8018a28 <etharp_find_entry+0x2d4>)
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	005b      	lsls	r3, r3, #1
 8018a0e:	4413      	add	r3, r2
 8018a10:	00db      	lsls	r3, r3, #3
 8018a12:	440b      	add	r3, r1
 8018a14:	3308      	adds	r3, #8
 8018a16:	687a      	ldr	r2, [r7, #4]
 8018a18:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018a1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3728      	adds	r7, #40	; 0x28
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	20004f4c 	.word	0x20004f4c
 8018a2c:	08027920 	.word	0x08027920
 8018a30:	08027958 	.word	0x08027958
 8018a34:	08027998 	.word	0x08027998
 8018a38:	080279c0 	.word	0x080279c0
 8018a3c:	080279d8 	.word	0x080279d8
 8018a40:	080279ec 	.word	0x080279ec

08018a44 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b088      	sub	sp, #32
 8018a48:	af02      	add	r7, sp, #8
 8018a4a:	60f8      	str	r0, [r7, #12]
 8018a4c:	60b9      	str	r1, [r7, #8]
 8018a4e:	607a      	str	r2, [r7, #4]
 8018a50:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a58:	2b06      	cmp	r3, #6
 8018a5a:	d006      	beq.n	8018a6a <etharp_update_arp_entry+0x26>
 8018a5c:	4b48      	ldr	r3, [pc, #288]	; (8018b80 <etharp_update_arp_entry+0x13c>)
 8018a5e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018a62:	4948      	ldr	r1, [pc, #288]	; (8018b84 <etharp_update_arp_entry+0x140>)
 8018a64:	4848      	ldr	r0, [pc, #288]	; (8018b88 <etharp_update_arp_entry+0x144>)
 8018a66:	f002 ff41 	bl	801b8ec <printf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d012      	beq.n	8018a96 <etharp_update_arp_entry+0x52>
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d00e      	beq.n	8018a96 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a78:	68bb      	ldr	r3, [r7, #8]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	68f9      	ldr	r1, [r7, #12]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f001 f8fe 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 8018a84:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d105      	bne.n	8018a96 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018a92:	2be0      	cmp	r3, #224	; 0xe0
 8018a94:	d102      	bne.n	8018a9c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018a96:	f06f 030f 	mvn.w	r3, #15
 8018a9a:	e06c      	b.n	8018b76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018a9c:	78fb      	ldrb	r3, [r7, #3]
 8018a9e:	68fa      	ldr	r2, [r7, #12]
 8018aa0:	4619      	mov	r1, r3
 8018aa2:	68b8      	ldr	r0, [r7, #8]
 8018aa4:	f7ff fe56 	bl	8018754 <etharp_find_entry>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018aac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	da02      	bge.n	8018aba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018ab4:	8afb      	ldrh	r3, [r7, #22]
 8018ab6:	b25b      	sxtb	r3, r3
 8018ab8:	e05d      	b.n	8018b76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018aba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018abe:	4933      	ldr	r1, [pc, #204]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018ac0:	4613      	mov	r3, r2
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	4413      	add	r3, r2
 8018ac6:	00db      	lsls	r3, r3, #3
 8018ac8:	440b      	add	r3, r1
 8018aca:	3314      	adds	r3, #20
 8018acc:	2202      	movs	r2, #2
 8018ace:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018ad0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ad4:	492d      	ldr	r1, [pc, #180]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018ad6:	4613      	mov	r3, r2
 8018ad8:	005b      	lsls	r3, r3, #1
 8018ada:	4413      	add	r3, r2
 8018adc:	00db      	lsls	r3, r3, #3
 8018ade:	440b      	add	r3, r1
 8018ae0:	3308      	adds	r3, #8
 8018ae2:	68fa      	ldr	r2, [r7, #12]
 8018ae4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018aea:	4613      	mov	r3, r2
 8018aec:	005b      	lsls	r3, r3, #1
 8018aee:	4413      	add	r3, r2
 8018af0:	00db      	lsls	r3, r3, #3
 8018af2:	3308      	adds	r3, #8
 8018af4:	4a25      	ldr	r2, [pc, #148]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018af6:	4413      	add	r3, r2
 8018af8:	3304      	adds	r3, #4
 8018afa:	2206      	movs	r2, #6
 8018afc:	6879      	ldr	r1, [r7, #4]
 8018afe:	4618      	mov	r0, r3
 8018b00:	f002 fc46 	bl	801b390 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018b04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b08:	4920      	ldr	r1, [pc, #128]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018b0a:	4613      	mov	r3, r2
 8018b0c:	005b      	lsls	r3, r3, #1
 8018b0e:	4413      	add	r3, r2
 8018b10:	00db      	lsls	r3, r3, #3
 8018b12:	440b      	add	r3, r1
 8018b14:	3312      	adds	r3, #18
 8018b16:	2200      	movs	r2, #0
 8018b18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b1e:	491b      	ldr	r1, [pc, #108]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018b20:	4613      	mov	r3, r2
 8018b22:	005b      	lsls	r3, r3, #1
 8018b24:	4413      	add	r3, r2
 8018b26:	00db      	lsls	r3, r3, #3
 8018b28:	440b      	add	r3, r1
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d021      	beq.n	8018b74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018b30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b34:	4915      	ldr	r1, [pc, #84]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018b36:	4613      	mov	r3, r2
 8018b38:	005b      	lsls	r3, r3, #1
 8018b3a:	4413      	add	r3, r2
 8018b3c:	00db      	lsls	r3, r3, #3
 8018b3e:	440b      	add	r3, r1
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b48:	4910      	ldr	r1, [pc, #64]	; (8018b8c <etharp_update_arp_entry+0x148>)
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	2200      	movs	r2, #0
 8018b56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8018b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018b62:	9300      	str	r3, [sp, #0]
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	6939      	ldr	r1, [r7, #16]
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f002 f8bb 	bl	801ace4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018b6e:	6938      	ldr	r0, [r7, #16]
 8018b70:	f7f8 fb56 	bl	8011220 <pbuf_free>
  }
  return ERR_OK;
 8018b74:	2300      	movs	r3, #0
}
 8018b76:	4618      	mov	r0, r3
 8018b78:	3718      	adds	r7, #24
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}
 8018b7e:	bf00      	nop
 8018b80:	08027920 	.word	0x08027920
 8018b84:	08027a18 	.word	0x08027a18
 8018b88:	08027998 	.word	0x08027998
 8018b8c:	20004f4c 	.word	0x20004f4c

08018b90 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b084      	sub	sp, #16
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b98:	2300      	movs	r3, #0
 8018b9a:	60fb      	str	r3, [r7, #12]
 8018b9c:	e01e      	b.n	8018bdc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018b9e:	4913      	ldr	r1, [pc, #76]	; (8018bec <etharp_cleanup_netif+0x5c>)
 8018ba0:	68fa      	ldr	r2, [r7, #12]
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4413      	add	r3, r2
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	440b      	add	r3, r1
 8018bac:	3314      	adds	r3, #20
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018bb2:	7afb      	ldrb	r3, [r7, #11]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d00e      	beq.n	8018bd6 <etharp_cleanup_netif+0x46>
 8018bb8:	490c      	ldr	r1, [pc, #48]	; (8018bec <etharp_cleanup_netif+0x5c>)
 8018bba:	68fa      	ldr	r2, [r7, #12]
 8018bbc:	4613      	mov	r3, r2
 8018bbe:	005b      	lsls	r3, r3, #1
 8018bc0:	4413      	add	r3, r2
 8018bc2:	00db      	lsls	r3, r3, #3
 8018bc4:	440b      	add	r3, r1
 8018bc6:	3308      	adds	r3, #8
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	687a      	ldr	r2, [r7, #4]
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	d102      	bne.n	8018bd6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018bd0:	68f8      	ldr	r0, [r7, #12]
 8018bd2:	f7ff fce5 	bl	80185a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	3301      	adds	r3, #1
 8018bda:	60fb      	str	r3, [r7, #12]
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	2b09      	cmp	r3, #9
 8018be0:	dddd      	ble.n	8018b9e <etharp_cleanup_netif+0xe>
    }
  }
}
 8018be2:	bf00      	nop
 8018be4:	bf00      	nop
 8018be6:	3710      	adds	r7, #16
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	20004f4c 	.word	0x20004f4c

08018bf0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018bf0:	b5b0      	push	{r4, r5, r7, lr}
 8018bf2:	b08a      	sub	sp, #40	; 0x28
 8018bf4:	af04      	add	r7, sp, #16
 8018bf6:	6078      	str	r0, [r7, #4]
 8018bf8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018bfa:	683b      	ldr	r3, [r7, #0]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d107      	bne.n	8018c10 <etharp_input+0x20>
 8018c00:	4b3d      	ldr	r3, [pc, #244]	; (8018cf8 <etharp_input+0x108>)
 8018c02:	f240 228a 	movw	r2, #650	; 0x28a
 8018c06:	493d      	ldr	r1, [pc, #244]	; (8018cfc <etharp_input+0x10c>)
 8018c08:	483d      	ldr	r0, [pc, #244]	; (8018d00 <etharp_input+0x110>)
 8018c0a:	f002 fe6f 	bl	801b8ec <printf>
 8018c0e:	e06f      	b.n	8018cf0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	685b      	ldr	r3, [r3, #4]
 8018c14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c16:	693b      	ldr	r3, [r7, #16]
 8018c18:	881b      	ldrh	r3, [r3, #0]
 8018c1a:	b29b      	uxth	r3, r3
 8018c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c20:	d10c      	bne.n	8018c3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c22:	693b      	ldr	r3, [r7, #16]
 8018c24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c26:	2b06      	cmp	r3, #6
 8018c28:	d108      	bne.n	8018c3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c2a:	693b      	ldr	r3, [r7, #16]
 8018c2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c2e:	2b04      	cmp	r3, #4
 8018c30:	d104      	bne.n	8018c3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018c32:	693b      	ldr	r3, [r7, #16]
 8018c34:	885b      	ldrh	r3, [r3, #2]
 8018c36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c38:	2b08      	cmp	r3, #8
 8018c3a:	d003      	beq.n	8018c44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7f8 faef 	bl	8011220 <pbuf_free>
    return;
 8018c42:	e055      	b.n	8018cf0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018c44:	693b      	ldr	r3, [r7, #16]
 8018c46:	330e      	adds	r3, #14
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	3318      	adds	r3, #24
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	3304      	adds	r3, #4
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d102      	bne.n	8018c64 <etharp_input+0x74>
    for_us = 0;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	75fb      	strb	r3, [r7, #23]
 8018c62:	e009      	b.n	8018c78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018c64:	68ba      	ldr	r2, [r7, #8]
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	3304      	adds	r3, #4
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	bf0c      	ite	eq
 8018c70:	2301      	moveq	r3, #1
 8018c72:	2300      	movne	r3, #0
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018c78:	693b      	ldr	r3, [r7, #16]
 8018c7a:	f103 0208 	add.w	r2, r3, #8
 8018c7e:	7dfb      	ldrb	r3, [r7, #23]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d001      	beq.n	8018c88 <etharp_input+0x98>
 8018c84:	2301      	movs	r3, #1
 8018c86:	e000      	b.n	8018c8a <etharp_input+0x9a>
 8018c88:	2302      	movs	r3, #2
 8018c8a:	f107 010c 	add.w	r1, r7, #12
 8018c8e:	6838      	ldr	r0, [r7, #0]
 8018c90:	f7ff fed8 	bl	8018a44 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018c94:	693b      	ldr	r3, [r7, #16]
 8018c96:	88db      	ldrh	r3, [r3, #6]
 8018c98:	b29b      	uxth	r3, r3
 8018c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c9e:	d003      	beq.n	8018ca8 <etharp_input+0xb8>
 8018ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ca4:	d01e      	beq.n	8018ce4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018ca6:	e020      	b.n	8018cea <etharp_input+0xfa>
      if (for_us) {
 8018ca8:	7dfb      	ldrb	r3, [r7, #23]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d01c      	beq.n	8018ce8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018cae:	683b      	ldr	r3, [r7, #0]
 8018cb0:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018cc4:	693a      	ldr	r2, [r7, #16]
 8018cc6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018cc8:	2102      	movs	r1, #2
 8018cca:	9103      	str	r1, [sp, #12]
 8018ccc:	f107 010c 	add.w	r1, r7, #12
 8018cd0:	9102      	str	r1, [sp, #8]
 8018cd2:	9201      	str	r2, [sp, #4]
 8018cd4:	9300      	str	r3, [sp, #0]
 8018cd6:	462b      	mov	r3, r5
 8018cd8:	4622      	mov	r2, r4
 8018cda:	4601      	mov	r1, r0
 8018cdc:	6838      	ldr	r0, [r7, #0]
 8018cde:	f000 faeb 	bl	80192b8 <etharp_raw>
      break;
 8018ce2:	e001      	b.n	8018ce8 <etharp_input+0xf8>
      break;
 8018ce4:	bf00      	nop
 8018ce6:	e000      	b.n	8018cea <etharp_input+0xfa>
      break;
 8018ce8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f7f8 fa98 	bl	8011220 <pbuf_free>
}
 8018cf0:	3718      	adds	r7, #24
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8018cf6:	bf00      	nop
 8018cf8:	08027920 	.word	0x08027920
 8018cfc:	08027a70 	.word	0x08027a70
 8018d00:	08027998 	.word	0x08027998

08018d04 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b086      	sub	sp, #24
 8018d08:	af02      	add	r7, sp, #8
 8018d0a:	60f8      	str	r0, [r7, #12]
 8018d0c:	60b9      	str	r1, [r7, #8]
 8018d0e:	4613      	mov	r3, r2
 8018d10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018d12:	79fa      	ldrb	r2, [r7, #7]
 8018d14:	4944      	ldr	r1, [pc, #272]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018d16:	4613      	mov	r3, r2
 8018d18:	005b      	lsls	r3, r3, #1
 8018d1a:	4413      	add	r3, r2
 8018d1c:	00db      	lsls	r3, r3, #3
 8018d1e:	440b      	add	r3, r1
 8018d20:	3314      	adds	r3, #20
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	2b01      	cmp	r3, #1
 8018d26:	d806      	bhi.n	8018d36 <etharp_output_to_arp_index+0x32>
 8018d28:	4b40      	ldr	r3, [pc, #256]	; (8018e2c <etharp_output_to_arp_index+0x128>)
 8018d2a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018d2e:	4940      	ldr	r1, [pc, #256]	; (8018e30 <etharp_output_to_arp_index+0x12c>)
 8018d30:	4840      	ldr	r0, [pc, #256]	; (8018e34 <etharp_output_to_arp_index+0x130>)
 8018d32:	f002 fddb 	bl	801b8ec <printf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018d36:	79fa      	ldrb	r2, [r7, #7]
 8018d38:	493b      	ldr	r1, [pc, #236]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018d3a:	4613      	mov	r3, r2
 8018d3c:	005b      	lsls	r3, r3, #1
 8018d3e:	4413      	add	r3, r2
 8018d40:	00db      	lsls	r3, r3, #3
 8018d42:	440b      	add	r3, r1
 8018d44:	3314      	adds	r3, #20
 8018d46:	781b      	ldrb	r3, [r3, #0]
 8018d48:	2b02      	cmp	r3, #2
 8018d4a:	d153      	bne.n	8018df4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018d4c:	79fa      	ldrb	r2, [r7, #7]
 8018d4e:	4936      	ldr	r1, [pc, #216]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018d50:	4613      	mov	r3, r2
 8018d52:	005b      	lsls	r3, r3, #1
 8018d54:	4413      	add	r3, r2
 8018d56:	00db      	lsls	r3, r3, #3
 8018d58:	440b      	add	r3, r1
 8018d5a:	3312      	adds	r3, #18
 8018d5c:	881b      	ldrh	r3, [r3, #0]
 8018d5e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018d62:	d919      	bls.n	8018d98 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018d64:	79fa      	ldrb	r2, [r7, #7]
 8018d66:	4613      	mov	r3, r2
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	4413      	add	r3, r2
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	4a2e      	ldr	r2, [pc, #184]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018d70:	4413      	add	r3, r2
 8018d72:	3304      	adds	r3, #4
 8018d74:	4619      	mov	r1, r3
 8018d76:	68f8      	ldr	r0, [r7, #12]
 8018d78:	f000 fb4c 	bl	8019414 <etharp_request>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d138      	bne.n	8018df4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018d82:	79fa      	ldrb	r2, [r7, #7]
 8018d84:	4928      	ldr	r1, [pc, #160]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018d86:	4613      	mov	r3, r2
 8018d88:	005b      	lsls	r3, r3, #1
 8018d8a:	4413      	add	r3, r2
 8018d8c:	00db      	lsls	r3, r3, #3
 8018d8e:	440b      	add	r3, r1
 8018d90:	3314      	adds	r3, #20
 8018d92:	2203      	movs	r2, #3
 8018d94:	701a      	strb	r2, [r3, #0]
 8018d96:	e02d      	b.n	8018df4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018d98:	79fa      	ldrb	r2, [r7, #7]
 8018d9a:	4923      	ldr	r1, [pc, #140]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018d9c:	4613      	mov	r3, r2
 8018d9e:	005b      	lsls	r3, r3, #1
 8018da0:	4413      	add	r3, r2
 8018da2:	00db      	lsls	r3, r3, #3
 8018da4:	440b      	add	r3, r1
 8018da6:	3312      	adds	r3, #18
 8018da8:	881b      	ldrh	r3, [r3, #0]
 8018daa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018dae:	d321      	bcc.n	8018df4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018db0:	79fa      	ldrb	r2, [r7, #7]
 8018db2:	4613      	mov	r3, r2
 8018db4:	005b      	lsls	r3, r3, #1
 8018db6:	4413      	add	r3, r2
 8018db8:	00db      	lsls	r3, r3, #3
 8018dba:	4a1b      	ldr	r2, [pc, #108]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018dbc:	4413      	add	r3, r2
 8018dbe:	1d19      	adds	r1, r3, #4
 8018dc0:	79fa      	ldrb	r2, [r7, #7]
 8018dc2:	4613      	mov	r3, r2
 8018dc4:	005b      	lsls	r3, r3, #1
 8018dc6:	4413      	add	r3, r2
 8018dc8:	00db      	lsls	r3, r3, #3
 8018dca:	3308      	adds	r3, #8
 8018dcc:	4a16      	ldr	r2, [pc, #88]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018dce:	4413      	add	r3, r2
 8018dd0:	3304      	adds	r3, #4
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	68f8      	ldr	r0, [r7, #12]
 8018dd6:	f000 fafb 	bl	80193d0 <etharp_request_dst>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d109      	bne.n	8018df4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018de0:	79fa      	ldrb	r2, [r7, #7]
 8018de2:	4911      	ldr	r1, [pc, #68]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018de4:	4613      	mov	r3, r2
 8018de6:	005b      	lsls	r3, r3, #1
 8018de8:	4413      	add	r3, r2
 8018dea:	00db      	lsls	r3, r3, #3
 8018dec:	440b      	add	r3, r1
 8018dee:	3314      	adds	r3, #20
 8018df0:	2203      	movs	r2, #3
 8018df2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8018dfa:	79fa      	ldrb	r2, [r7, #7]
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	005b      	lsls	r3, r3, #1
 8018e00:	4413      	add	r3, r2
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	3308      	adds	r3, #8
 8018e06:	4a08      	ldr	r2, [pc, #32]	; (8018e28 <etharp_output_to_arp_index+0x124>)
 8018e08:	4413      	add	r3, r2
 8018e0a:	3304      	adds	r3, #4
 8018e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018e10:	9200      	str	r2, [sp, #0]
 8018e12:	460a      	mov	r2, r1
 8018e14:	68b9      	ldr	r1, [r7, #8]
 8018e16:	68f8      	ldr	r0, [r7, #12]
 8018e18:	f001 ff64 	bl	801ace4 <ethernet_output>
 8018e1c:	4603      	mov	r3, r0
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}
 8018e26:	bf00      	nop
 8018e28:	20004f4c 	.word	0x20004f4c
 8018e2c:	08027920 	.word	0x08027920
 8018e30:	08027a90 	.word	0x08027a90
 8018e34:	08027998 	.word	0x08027998

08018e38 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b08a      	sub	sp, #40	; 0x28
 8018e3c:	af02      	add	r7, sp, #8
 8018e3e:	60f8      	str	r0, [r7, #12]
 8018e40:	60b9      	str	r1, [r7, #8]
 8018e42:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d106      	bne.n	8018e5c <etharp_output+0x24>
 8018e4e:	4b73      	ldr	r3, [pc, #460]	; (801901c <etharp_output+0x1e4>)
 8018e50:	f240 321e 	movw	r2, #798	; 0x31e
 8018e54:	4972      	ldr	r1, [pc, #456]	; (8019020 <etharp_output+0x1e8>)
 8018e56:	4873      	ldr	r0, [pc, #460]	; (8019024 <etharp_output+0x1ec>)
 8018e58:	f002 fd48 	bl	801b8ec <printf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d106      	bne.n	8018e70 <etharp_output+0x38>
 8018e62:	4b6e      	ldr	r3, [pc, #440]	; (801901c <etharp_output+0x1e4>)
 8018e64:	f240 321f 	movw	r2, #799	; 0x31f
 8018e68:	496f      	ldr	r1, [pc, #444]	; (8019028 <etharp_output+0x1f0>)
 8018e6a:	486e      	ldr	r0, [pc, #440]	; (8019024 <etharp_output+0x1ec>)
 8018e6c:	f002 fd3e 	bl	801b8ec <printf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d106      	bne.n	8018e84 <etharp_output+0x4c>
 8018e76:	4b69      	ldr	r3, [pc, #420]	; (801901c <etharp_output+0x1e4>)
 8018e78:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018e7c:	496b      	ldr	r1, [pc, #428]	; (801902c <etharp_output+0x1f4>)
 8018e7e:	4869      	ldr	r0, [pc, #420]	; (8019024 <etharp_output+0x1ec>)
 8018e80:	f002 fd34 	bl	801b8ec <printf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	68f9      	ldr	r1, [r7, #12]
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f000 fef8 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 8018e90:	4603      	mov	r3, r0
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d002      	beq.n	8018e9c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018e96:	4b66      	ldr	r3, [pc, #408]	; (8019030 <etharp_output+0x1f8>)
 8018e98:	61fb      	str	r3, [r7, #28]
 8018e9a:	e0af      	b.n	8018ffc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ea4:	2be0      	cmp	r3, #224	; 0xe0
 8018ea6:	d118      	bne.n	8018eda <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018eac:	2300      	movs	r3, #0
 8018eae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018eb0:	235e      	movs	r3, #94	; 0x5e
 8018eb2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	3301      	adds	r3, #1
 8018eb8:	781b      	ldrb	r3, [r3, #0]
 8018eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018ebe:	b2db      	uxtb	r3, r3
 8018ec0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	3302      	adds	r3, #2
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	3303      	adds	r3, #3
 8018ece:	781b      	ldrb	r3, [r3, #0]
 8018ed0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018ed2:	f107 0310 	add.w	r3, r7, #16
 8018ed6:	61fb      	str	r3, [r7, #28]
 8018ed8:	e090      	b.n	8018ffc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681a      	ldr	r2, [r3, #0]
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	3304      	adds	r3, #4
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	405a      	eors	r2, r3
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	3308      	adds	r3, #8
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	4013      	ands	r3, r2
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d012      	beq.n	8018f18 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018ef8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018efc:	4293      	cmp	r3, r2
 8018efe:	d00b      	beq.n	8018f18 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	330c      	adds	r3, #12
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d003      	beq.n	8018f12 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	330c      	adds	r3, #12
 8018f0e:	61bb      	str	r3, [r7, #24]
 8018f10:	e002      	b.n	8018f18 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018f12:	f06f 0303 	mvn.w	r3, #3
 8018f16:	e07d      	b.n	8019014 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f18:	4b46      	ldr	r3, [pc, #280]	; (8019034 <etharp_output+0x1fc>)
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4a46      	ldr	r2, [pc, #280]	; (8019038 <etharp_output+0x200>)
 8018f20:	460b      	mov	r3, r1
 8018f22:	005b      	lsls	r3, r3, #1
 8018f24:	440b      	add	r3, r1
 8018f26:	00db      	lsls	r3, r3, #3
 8018f28:	4413      	add	r3, r2
 8018f2a:	3314      	adds	r3, #20
 8018f2c:	781b      	ldrb	r3, [r3, #0]
 8018f2e:	2b01      	cmp	r3, #1
 8018f30:	d925      	bls.n	8018f7e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018f32:	4b40      	ldr	r3, [pc, #256]	; (8019034 <etharp_output+0x1fc>)
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	4619      	mov	r1, r3
 8018f38:	4a3f      	ldr	r2, [pc, #252]	; (8019038 <etharp_output+0x200>)
 8018f3a:	460b      	mov	r3, r1
 8018f3c:	005b      	lsls	r3, r3, #1
 8018f3e:	440b      	add	r3, r1
 8018f40:	00db      	lsls	r3, r3, #3
 8018f42:	4413      	add	r3, r2
 8018f44:	3308      	adds	r3, #8
 8018f46:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f48:	68fa      	ldr	r2, [r7, #12]
 8018f4a:	429a      	cmp	r2, r3
 8018f4c:	d117      	bne.n	8018f7e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	681a      	ldr	r2, [r3, #0]
 8018f52:	4b38      	ldr	r3, [pc, #224]	; (8019034 <etharp_output+0x1fc>)
 8018f54:	781b      	ldrb	r3, [r3, #0]
 8018f56:	4618      	mov	r0, r3
 8018f58:	4937      	ldr	r1, [pc, #220]	; (8019038 <etharp_output+0x200>)
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	005b      	lsls	r3, r3, #1
 8018f5e:	4403      	add	r3, r0
 8018f60:	00db      	lsls	r3, r3, #3
 8018f62:	440b      	add	r3, r1
 8018f64:	3304      	adds	r3, #4
 8018f66:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d108      	bne.n	8018f7e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018f6c:	4b31      	ldr	r3, [pc, #196]	; (8019034 <etharp_output+0x1fc>)
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	461a      	mov	r2, r3
 8018f72:	68b9      	ldr	r1, [r7, #8]
 8018f74:	68f8      	ldr	r0, [r7, #12]
 8018f76:	f7ff fec5 	bl	8018d04 <etharp_output_to_arp_index>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	e04a      	b.n	8019014 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018f7e:	2300      	movs	r3, #0
 8018f80:	75fb      	strb	r3, [r7, #23]
 8018f82:	e031      	b.n	8018fe8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018f84:	7dfa      	ldrb	r2, [r7, #23]
 8018f86:	492c      	ldr	r1, [pc, #176]	; (8019038 <etharp_output+0x200>)
 8018f88:	4613      	mov	r3, r2
 8018f8a:	005b      	lsls	r3, r3, #1
 8018f8c:	4413      	add	r3, r2
 8018f8e:	00db      	lsls	r3, r3, #3
 8018f90:	440b      	add	r3, r1
 8018f92:	3314      	adds	r3, #20
 8018f94:	781b      	ldrb	r3, [r3, #0]
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d923      	bls.n	8018fe2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018f9a:	7dfa      	ldrb	r2, [r7, #23]
 8018f9c:	4926      	ldr	r1, [pc, #152]	; (8019038 <etharp_output+0x200>)
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	4413      	add	r3, r2
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	440b      	add	r3, r1
 8018fa8:	3308      	adds	r3, #8
 8018faa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018fac:	68fa      	ldr	r2, [r7, #12]
 8018fae:	429a      	cmp	r2, r3
 8018fb0:	d117      	bne.n	8018fe2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018fb2:	69bb      	ldr	r3, [r7, #24]
 8018fb4:	6819      	ldr	r1, [r3, #0]
 8018fb6:	7dfa      	ldrb	r2, [r7, #23]
 8018fb8:	481f      	ldr	r0, [pc, #124]	; (8019038 <etharp_output+0x200>)
 8018fba:	4613      	mov	r3, r2
 8018fbc:	005b      	lsls	r3, r3, #1
 8018fbe:	4413      	add	r3, r2
 8018fc0:	00db      	lsls	r3, r3, #3
 8018fc2:	4403      	add	r3, r0
 8018fc4:	3304      	adds	r3, #4
 8018fc6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018fc8:	4299      	cmp	r1, r3
 8018fca:	d10a      	bne.n	8018fe2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018fcc:	4a19      	ldr	r2, [pc, #100]	; (8019034 <etharp_output+0x1fc>)
 8018fce:	7dfb      	ldrb	r3, [r7, #23]
 8018fd0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018fd2:	7dfb      	ldrb	r3, [r7, #23]
 8018fd4:	461a      	mov	r2, r3
 8018fd6:	68b9      	ldr	r1, [r7, #8]
 8018fd8:	68f8      	ldr	r0, [r7, #12]
 8018fda:	f7ff fe93 	bl	8018d04 <etharp_output_to_arp_index>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	e018      	b.n	8019014 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018fe2:	7dfb      	ldrb	r3, [r7, #23]
 8018fe4:	3301      	adds	r3, #1
 8018fe6:	75fb      	strb	r3, [r7, #23]
 8018fe8:	7dfb      	ldrb	r3, [r7, #23]
 8018fea:	2b09      	cmp	r3, #9
 8018fec:	d9ca      	bls.n	8018f84 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018fee:	68ba      	ldr	r2, [r7, #8]
 8018ff0:	69b9      	ldr	r1, [r7, #24]
 8018ff2:	68f8      	ldr	r0, [r7, #12]
 8018ff4:	f000 f822 	bl	801903c <etharp_query>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	e00b      	b.n	8019014 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8019002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019006:	9300      	str	r3, [sp, #0]
 8019008:	69fb      	ldr	r3, [r7, #28]
 801900a:	68b9      	ldr	r1, [r7, #8]
 801900c:	68f8      	ldr	r0, [r7, #12]
 801900e:	f001 fe69 	bl	801ace4 <ethernet_output>
 8019012:	4603      	mov	r3, r0
}
 8019014:	4618      	mov	r0, r3
 8019016:	3720      	adds	r7, #32
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}
 801901c:	08027920 	.word	0x08027920
 8019020:	08027a70 	.word	0x08027a70
 8019024:	08027998 	.word	0x08027998
 8019028:	08027ac0 	.word	0x08027ac0
 801902c:	08027a60 	.word	0x08027a60
 8019030:	08029f18 	.word	0x08029f18
 8019034:	2000503c 	.word	0x2000503c
 8019038:	20004f4c 	.word	0x20004f4c

0801903c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b08c      	sub	sp, #48	; 0x30
 8019040:	af02      	add	r7, sp, #8
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	3322      	adds	r3, #34	; 0x22
 801904c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801904e:	23ff      	movs	r3, #255	; 0xff
 8019050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019054:	2300      	movs	r3, #0
 8019056:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	68f9      	ldr	r1, [r7, #12]
 801905e:	4618      	mov	r0, r3
 8019060:	f000 fe0e 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 8019064:	4603      	mov	r3, r0
 8019066:	2b00      	cmp	r3, #0
 8019068:	d10c      	bne.n	8019084 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801906a:	68bb      	ldr	r3, [r7, #8]
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019072:	2be0      	cmp	r3, #224	; 0xe0
 8019074:	d006      	beq.n	8019084 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d003      	beq.n	8019084 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d102      	bne.n	801908a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019084:	f06f 030f 	mvn.w	r3, #15
 8019088:	e101      	b.n	801928e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801908a:	68fa      	ldr	r2, [r7, #12]
 801908c:	2101      	movs	r1, #1
 801908e:	68b8      	ldr	r0, [r7, #8]
 8019090:	f7ff fb60 	bl	8018754 <etharp_find_entry>
 8019094:	4603      	mov	r3, r0
 8019096:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019098:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801909c:	2b00      	cmp	r3, #0
 801909e:	da02      	bge.n	80190a6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80190a0:	8a7b      	ldrh	r3, [r7, #18]
 80190a2:	b25b      	sxtb	r3, r3
 80190a4:	e0f3      	b.n	801928e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80190a6:	8a7b      	ldrh	r3, [r7, #18]
 80190a8:	2b7e      	cmp	r3, #126	; 0x7e
 80190aa:	d906      	bls.n	80190ba <etharp_query+0x7e>
 80190ac:	4b7a      	ldr	r3, [pc, #488]	; (8019298 <etharp_query+0x25c>)
 80190ae:	f240 32c1 	movw	r2, #961	; 0x3c1
 80190b2:	497a      	ldr	r1, [pc, #488]	; (801929c <etharp_query+0x260>)
 80190b4:	487a      	ldr	r0, [pc, #488]	; (80192a0 <etharp_query+0x264>)
 80190b6:	f002 fc19 	bl	801b8ec <printf>
  i = (netif_addr_idx_t)i_err;
 80190ba:	8a7b      	ldrh	r3, [r7, #18]
 80190bc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80190be:	7c7a      	ldrb	r2, [r7, #17]
 80190c0:	4978      	ldr	r1, [pc, #480]	; (80192a4 <etharp_query+0x268>)
 80190c2:	4613      	mov	r3, r2
 80190c4:	005b      	lsls	r3, r3, #1
 80190c6:	4413      	add	r3, r2
 80190c8:	00db      	lsls	r3, r3, #3
 80190ca:	440b      	add	r3, r1
 80190cc:	3314      	adds	r3, #20
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d115      	bne.n	8019100 <etharp_query+0xc4>
    is_new_entry = 1;
 80190d4:	2301      	movs	r3, #1
 80190d6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80190d8:	7c7a      	ldrb	r2, [r7, #17]
 80190da:	4972      	ldr	r1, [pc, #456]	; (80192a4 <etharp_query+0x268>)
 80190dc:	4613      	mov	r3, r2
 80190de:	005b      	lsls	r3, r3, #1
 80190e0:	4413      	add	r3, r2
 80190e2:	00db      	lsls	r3, r3, #3
 80190e4:	440b      	add	r3, r1
 80190e6:	3314      	adds	r3, #20
 80190e8:	2201      	movs	r2, #1
 80190ea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80190ec:	7c7a      	ldrb	r2, [r7, #17]
 80190ee:	496d      	ldr	r1, [pc, #436]	; (80192a4 <etharp_query+0x268>)
 80190f0:	4613      	mov	r3, r2
 80190f2:	005b      	lsls	r3, r3, #1
 80190f4:	4413      	add	r3, r2
 80190f6:	00db      	lsls	r3, r3, #3
 80190f8:	440b      	add	r3, r1
 80190fa:	3308      	adds	r3, #8
 80190fc:	68fa      	ldr	r2, [r7, #12]
 80190fe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019100:	7c7a      	ldrb	r2, [r7, #17]
 8019102:	4968      	ldr	r1, [pc, #416]	; (80192a4 <etharp_query+0x268>)
 8019104:	4613      	mov	r3, r2
 8019106:	005b      	lsls	r3, r3, #1
 8019108:	4413      	add	r3, r2
 801910a:	00db      	lsls	r3, r3, #3
 801910c:	440b      	add	r3, r1
 801910e:	3314      	adds	r3, #20
 8019110:	781b      	ldrb	r3, [r3, #0]
 8019112:	2b01      	cmp	r3, #1
 8019114:	d011      	beq.n	801913a <etharp_query+0xfe>
 8019116:	7c7a      	ldrb	r2, [r7, #17]
 8019118:	4962      	ldr	r1, [pc, #392]	; (80192a4 <etharp_query+0x268>)
 801911a:	4613      	mov	r3, r2
 801911c:	005b      	lsls	r3, r3, #1
 801911e:	4413      	add	r3, r2
 8019120:	00db      	lsls	r3, r3, #3
 8019122:	440b      	add	r3, r1
 8019124:	3314      	adds	r3, #20
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	2b01      	cmp	r3, #1
 801912a:	d806      	bhi.n	801913a <etharp_query+0xfe>
 801912c:	4b5a      	ldr	r3, [pc, #360]	; (8019298 <etharp_query+0x25c>)
 801912e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019132:	495d      	ldr	r1, [pc, #372]	; (80192a8 <etharp_query+0x26c>)
 8019134:	485a      	ldr	r0, [pc, #360]	; (80192a0 <etharp_query+0x264>)
 8019136:	f002 fbd9 	bl	801b8ec <printf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801913a:	6a3b      	ldr	r3, [r7, #32]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d102      	bne.n	8019146 <etharp_query+0x10a>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d10c      	bne.n	8019160 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019146:	68b9      	ldr	r1, [r7, #8]
 8019148:	68f8      	ldr	r0, [r7, #12]
 801914a:	f000 f963 	bl	8019414 <etharp_request>
 801914e:	4603      	mov	r3, r0
 8019150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d102      	bne.n	8019160 <etharp_query+0x124>
      return result;
 801915a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801915e:	e096      	b.n	801928e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d106      	bne.n	8019174 <etharp_query+0x138>
 8019166:	4b4c      	ldr	r3, [pc, #304]	; (8019298 <etharp_query+0x25c>)
 8019168:	f240 32e1 	movw	r2, #993	; 0x3e1
 801916c:	494f      	ldr	r1, [pc, #316]	; (80192ac <etharp_query+0x270>)
 801916e:	484c      	ldr	r0, [pc, #304]	; (80192a0 <etharp_query+0x264>)
 8019170:	f002 fbbc 	bl	801b8ec <printf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019174:	7c7a      	ldrb	r2, [r7, #17]
 8019176:	494b      	ldr	r1, [pc, #300]	; (80192a4 <etharp_query+0x268>)
 8019178:	4613      	mov	r3, r2
 801917a:	005b      	lsls	r3, r3, #1
 801917c:	4413      	add	r3, r2
 801917e:	00db      	lsls	r3, r3, #3
 8019180:	440b      	add	r3, r1
 8019182:	3314      	adds	r3, #20
 8019184:	781b      	ldrb	r3, [r3, #0]
 8019186:	2b01      	cmp	r3, #1
 8019188:	d917      	bls.n	80191ba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801918a:	4a49      	ldr	r2, [pc, #292]	; (80192b0 <etharp_query+0x274>)
 801918c:	7c7b      	ldrb	r3, [r7, #17]
 801918e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019190:	7c7a      	ldrb	r2, [r7, #17]
 8019192:	4613      	mov	r3, r2
 8019194:	005b      	lsls	r3, r3, #1
 8019196:	4413      	add	r3, r2
 8019198:	00db      	lsls	r3, r3, #3
 801919a:	3308      	adds	r3, #8
 801919c:	4a41      	ldr	r2, [pc, #260]	; (80192a4 <etharp_query+0x268>)
 801919e:	4413      	add	r3, r2
 80191a0:	3304      	adds	r3, #4
 80191a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80191a6:	9200      	str	r2, [sp, #0]
 80191a8:	697a      	ldr	r2, [r7, #20]
 80191aa:	6879      	ldr	r1, [r7, #4]
 80191ac:	68f8      	ldr	r0, [r7, #12]
 80191ae:	f001 fd99 	bl	801ace4 <ethernet_output>
 80191b2:	4603      	mov	r3, r0
 80191b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80191b8:	e067      	b.n	801928a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80191ba:	7c7a      	ldrb	r2, [r7, #17]
 80191bc:	4939      	ldr	r1, [pc, #228]	; (80192a4 <etharp_query+0x268>)
 80191be:	4613      	mov	r3, r2
 80191c0:	005b      	lsls	r3, r3, #1
 80191c2:	4413      	add	r3, r2
 80191c4:	00db      	lsls	r3, r3, #3
 80191c6:	440b      	add	r3, r1
 80191c8:	3314      	adds	r3, #20
 80191ca:	781b      	ldrb	r3, [r3, #0]
 80191cc:	2b01      	cmp	r3, #1
 80191ce:	d15c      	bne.n	801928a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80191d0:	2300      	movs	r3, #0
 80191d2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80191d8:	e01c      	b.n	8019214 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80191da:	69fb      	ldr	r3, [r7, #28]
 80191dc:	895a      	ldrh	r2, [r3, #10]
 80191de:	69fb      	ldr	r3, [r7, #28]
 80191e0:	891b      	ldrh	r3, [r3, #8]
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d10a      	bne.n	80191fc <etharp_query+0x1c0>
 80191e6:	69fb      	ldr	r3, [r7, #28]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d006      	beq.n	80191fc <etharp_query+0x1c0>
 80191ee:	4b2a      	ldr	r3, [pc, #168]	; (8019298 <etharp_query+0x25c>)
 80191f0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80191f4:	492f      	ldr	r1, [pc, #188]	; (80192b4 <etharp_query+0x278>)
 80191f6:	482a      	ldr	r0, [pc, #168]	; (80192a0 <etharp_query+0x264>)
 80191f8:	f002 fb78 	bl	801b8ec <printf>
      if (PBUF_NEEDS_COPY(p)) {
 80191fc:	69fb      	ldr	r3, [r7, #28]
 80191fe:	7b1b      	ldrb	r3, [r3, #12]
 8019200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019204:	2b00      	cmp	r3, #0
 8019206:	d002      	beq.n	801920e <etharp_query+0x1d2>
        copy_needed = 1;
 8019208:	2301      	movs	r3, #1
 801920a:	61bb      	str	r3, [r7, #24]
        break;
 801920c:	e005      	b.n	801921a <etharp_query+0x1de>
      }
      p = p->next;
 801920e:	69fb      	ldr	r3, [r7, #28]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019214:	69fb      	ldr	r3, [r7, #28]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d1df      	bne.n	80191da <etharp_query+0x19e>
    }
    if (copy_needed) {
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d007      	beq.n	8019230 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019220:	687a      	ldr	r2, [r7, #4]
 8019222:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019226:	200e      	movs	r0, #14
 8019228:	f7f8 fa72 	bl	8011710 <pbuf_clone>
 801922c:	61f8      	str	r0, [r7, #28]
 801922e:	e004      	b.n	801923a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019234:	69f8      	ldr	r0, [r7, #28]
 8019236:	f7f8 f899 	bl	801136c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801923a:	69fb      	ldr	r3, [r7, #28]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d021      	beq.n	8019284 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019240:	7c7a      	ldrb	r2, [r7, #17]
 8019242:	4918      	ldr	r1, [pc, #96]	; (80192a4 <etharp_query+0x268>)
 8019244:	4613      	mov	r3, r2
 8019246:	005b      	lsls	r3, r3, #1
 8019248:	4413      	add	r3, r2
 801924a:	00db      	lsls	r3, r3, #3
 801924c:	440b      	add	r3, r1
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	2b00      	cmp	r3, #0
 8019252:	d00a      	beq.n	801926a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019254:	7c7a      	ldrb	r2, [r7, #17]
 8019256:	4913      	ldr	r1, [pc, #76]	; (80192a4 <etharp_query+0x268>)
 8019258:	4613      	mov	r3, r2
 801925a:	005b      	lsls	r3, r3, #1
 801925c:	4413      	add	r3, r2
 801925e:	00db      	lsls	r3, r3, #3
 8019260:	440b      	add	r3, r1
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	4618      	mov	r0, r3
 8019266:	f7f7 ffdb 	bl	8011220 <pbuf_free>
      }
      arp_table[i].q = p;
 801926a:	7c7a      	ldrb	r2, [r7, #17]
 801926c:	490d      	ldr	r1, [pc, #52]	; (80192a4 <etharp_query+0x268>)
 801926e:	4613      	mov	r3, r2
 8019270:	005b      	lsls	r3, r3, #1
 8019272:	4413      	add	r3, r2
 8019274:	00db      	lsls	r3, r3, #3
 8019276:	440b      	add	r3, r1
 8019278:	69fa      	ldr	r2, [r7, #28]
 801927a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801927c:	2300      	movs	r3, #0
 801927e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019282:	e002      	b.n	801928a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019284:	23ff      	movs	r3, #255	; 0xff
 8019286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801928a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801928e:	4618      	mov	r0, r3
 8019290:	3728      	adds	r7, #40	; 0x28
 8019292:	46bd      	mov	sp, r7
 8019294:	bd80      	pop	{r7, pc}
 8019296:	bf00      	nop
 8019298:	08027920 	.word	0x08027920
 801929c:	08027acc 	.word	0x08027acc
 80192a0:	08027998 	.word	0x08027998
 80192a4:	20004f4c 	.word	0x20004f4c
 80192a8:	08027adc 	.word	0x08027adc
 80192ac:	08027ac0 	.word	0x08027ac0
 80192b0:	2000503c 	.word	0x2000503c
 80192b4:	08027b04 	.word	0x08027b04

080192b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b08a      	sub	sp, #40	; 0x28
 80192bc:	af02      	add	r7, sp, #8
 80192be:	60f8      	str	r0, [r7, #12]
 80192c0:	60b9      	str	r1, [r7, #8]
 80192c2:	607a      	str	r2, [r7, #4]
 80192c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80192c6:	2300      	movs	r3, #0
 80192c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d106      	bne.n	80192de <etharp_raw+0x26>
 80192d0:	4b3a      	ldr	r3, [pc, #232]	; (80193bc <etharp_raw+0x104>)
 80192d2:	f240 4257 	movw	r2, #1111	; 0x457
 80192d6:	493a      	ldr	r1, [pc, #232]	; (80193c0 <etharp_raw+0x108>)
 80192d8:	483a      	ldr	r0, [pc, #232]	; (80193c4 <etharp_raw+0x10c>)
 80192da:	f002 fb07 	bl	801b8ec <printf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80192de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80192e2:	211c      	movs	r1, #28
 80192e4:	200e      	movs	r0, #14
 80192e6:	f7f7 fcb7 	bl	8010c58 <pbuf_alloc>
 80192ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80192ec:	69bb      	ldr	r3, [r7, #24]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d102      	bne.n	80192f8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80192f2:	f04f 33ff 	mov.w	r3, #4294967295
 80192f6:	e05d      	b.n	80193b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80192f8:	69bb      	ldr	r3, [r7, #24]
 80192fa:	895b      	ldrh	r3, [r3, #10]
 80192fc:	2b1b      	cmp	r3, #27
 80192fe:	d806      	bhi.n	801930e <etharp_raw+0x56>
 8019300:	4b2e      	ldr	r3, [pc, #184]	; (80193bc <etharp_raw+0x104>)
 8019302:	f240 4262 	movw	r2, #1122	; 0x462
 8019306:	4930      	ldr	r1, [pc, #192]	; (80193c8 <etharp_raw+0x110>)
 8019308:	482e      	ldr	r0, [pc, #184]	; (80193c4 <etharp_raw+0x10c>)
 801930a:	f002 faef 	bl	801b8ec <printf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801930e:	69bb      	ldr	r3, [r7, #24]
 8019310:	685b      	ldr	r3, [r3, #4]
 8019312:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019314:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019316:	4618      	mov	r0, r3
 8019318:	f7f6 fbc6 	bl	800faa8 <lwip_htons>
 801931c:	4603      	mov	r3, r0
 801931e:	461a      	mov	r2, r3
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801932a:	2b06      	cmp	r3, #6
 801932c:	d006      	beq.n	801933c <etharp_raw+0x84>
 801932e:	4b23      	ldr	r3, [pc, #140]	; (80193bc <etharp_raw+0x104>)
 8019330:	f240 4269 	movw	r2, #1129	; 0x469
 8019334:	4925      	ldr	r1, [pc, #148]	; (80193cc <etharp_raw+0x114>)
 8019336:	4823      	ldr	r0, [pc, #140]	; (80193c4 <etharp_raw+0x10c>)
 8019338:	f002 fad8 	bl	801b8ec <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	3308      	adds	r3, #8
 8019340:	2206      	movs	r2, #6
 8019342:	6839      	ldr	r1, [r7, #0]
 8019344:	4618      	mov	r0, r3
 8019346:	f002 f823 	bl	801b390 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801934a:	697b      	ldr	r3, [r7, #20]
 801934c:	3312      	adds	r3, #18
 801934e:	2206      	movs	r2, #6
 8019350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019352:	4618      	mov	r0, r3
 8019354:	f002 f81c 	bl	801b390 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	330e      	adds	r3, #14
 801935c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801935e:	6812      	ldr	r2, [r2, #0]
 8019360:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019362:	697b      	ldr	r3, [r7, #20]
 8019364:	3318      	adds	r3, #24
 8019366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019368:	6812      	ldr	r2, [r2, #0]
 801936a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	2200      	movs	r2, #0
 8019370:	701a      	strb	r2, [r3, #0]
 8019372:	2200      	movs	r2, #0
 8019374:	f042 0201 	orr.w	r2, r2, #1
 8019378:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801937a:	697b      	ldr	r3, [r7, #20]
 801937c:	2200      	movs	r2, #0
 801937e:	f042 0208 	orr.w	r2, r2, #8
 8019382:	709a      	strb	r2, [r3, #2]
 8019384:	2200      	movs	r2, #0
 8019386:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019388:	697b      	ldr	r3, [r7, #20]
 801938a:	2206      	movs	r2, #6
 801938c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	2204      	movs	r2, #4
 8019392:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019394:	f640 0306 	movw	r3, #2054	; 0x806
 8019398:	9300      	str	r3, [sp, #0]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	68ba      	ldr	r2, [r7, #8]
 801939e:	69b9      	ldr	r1, [r7, #24]
 80193a0:	68f8      	ldr	r0, [r7, #12]
 80193a2:	f001 fc9f 	bl	801ace4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80193a6:	69b8      	ldr	r0, [r7, #24]
 80193a8:	f7f7 ff3a 	bl	8011220 <pbuf_free>
  p = NULL;
 80193ac:	2300      	movs	r3, #0
 80193ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80193b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80193b4:	4618      	mov	r0, r3
 80193b6:	3720      	adds	r7, #32
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}
 80193bc:	08027920 	.word	0x08027920
 80193c0:	08027a70 	.word	0x08027a70
 80193c4:	08027998 	.word	0x08027998
 80193c8:	08027b20 	.word	0x08027b20
 80193cc:	08027b54 	.word	0x08027b54

080193d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b088      	sub	sp, #32
 80193d4:	af04      	add	r7, sp, #16
 80193d6:	60f8      	str	r0, [r7, #12]
 80193d8:	60b9      	str	r1, [r7, #8]
 80193da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80193ec:	2201      	movs	r2, #1
 80193ee:	9203      	str	r2, [sp, #12]
 80193f0:	68ba      	ldr	r2, [r7, #8]
 80193f2:	9202      	str	r2, [sp, #8]
 80193f4:	4a06      	ldr	r2, [pc, #24]	; (8019410 <etharp_request_dst+0x40>)
 80193f6:	9201      	str	r2, [sp, #4]
 80193f8:	9300      	str	r3, [sp, #0]
 80193fa:	4603      	mov	r3, r0
 80193fc:	687a      	ldr	r2, [r7, #4]
 80193fe:	68f8      	ldr	r0, [r7, #12]
 8019400:	f7ff ff5a 	bl	80192b8 <etharp_raw>
 8019404:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019406:	4618      	mov	r0, r3
 8019408:	3710      	adds	r7, #16
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
 801940e:	bf00      	nop
 8019410:	08029f20 	.word	0x08029f20

08019414 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
 801941c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801941e:	4a05      	ldr	r2, [pc, #20]	; (8019434 <etharp_request+0x20>)
 8019420:	6839      	ldr	r1, [r7, #0]
 8019422:	6878      	ldr	r0, [r7, #4]
 8019424:	f7ff ffd4 	bl	80193d0 <etharp_request_dst>
 8019428:	4603      	mov	r3, r0
}
 801942a:	4618      	mov	r0, r3
 801942c:	3708      	adds	r7, #8
 801942e:	46bd      	mov	sp, r7
 8019430:	bd80      	pop	{r7, pc}
 8019432:	bf00      	nop
 8019434:	08029f18 	.word	0x08029f18

08019438 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b08e      	sub	sp, #56	; 0x38
 801943c:	af04      	add	r7, sp, #16
 801943e:	6078      	str	r0, [r7, #4]
 8019440:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019442:	4b79      	ldr	r3, [pc, #484]	; (8019628 <icmp_input+0x1f0>)
 8019444:	689b      	ldr	r3, [r3, #8]
 8019446:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	f003 030f 	and.w	r3, r3, #15
 8019450:	b2db      	uxtb	r3, r3
 8019452:	009b      	lsls	r3, r3, #2
 8019454:	b2db      	uxtb	r3, r3
 8019456:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801945a:	2b13      	cmp	r3, #19
 801945c:	f240 80cd 	bls.w	80195fa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	895b      	ldrh	r3, [r3, #10]
 8019464:	2b03      	cmp	r3, #3
 8019466:	f240 80ca 	bls.w	80195fe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	685b      	ldr	r3, [r3, #4]
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019474:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019478:	2b00      	cmp	r3, #0
 801947a:	f000 80b7 	beq.w	80195ec <icmp_input+0x1b4>
 801947e:	2b08      	cmp	r3, #8
 8019480:	f040 80b7 	bne.w	80195f2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019484:	4b69      	ldr	r3, [pc, #420]	; (801962c <icmp_input+0x1f4>)
 8019486:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019488:	4b67      	ldr	r3, [pc, #412]	; (8019628 <icmp_input+0x1f0>)
 801948a:	695b      	ldr	r3, [r3, #20]
 801948c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019490:	2be0      	cmp	r3, #224	; 0xe0
 8019492:	f000 80bb 	beq.w	801960c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019496:	4b64      	ldr	r3, [pc, #400]	; (8019628 <icmp_input+0x1f0>)
 8019498:	695b      	ldr	r3, [r3, #20]
 801949a:	4a63      	ldr	r2, [pc, #396]	; (8019628 <icmp_input+0x1f0>)
 801949c:	6812      	ldr	r2, [r2, #0]
 801949e:	4611      	mov	r1, r2
 80194a0:	4618      	mov	r0, r3
 80194a2:	f000 fbed 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 80194a6:	4603      	mov	r3, r0
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	f040 80b1 	bne.w	8019610 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	891b      	ldrh	r3, [r3, #8]
 80194b2:	2b07      	cmp	r3, #7
 80194b4:	f240 80a5 	bls.w	8019602 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80194b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194ba:	330e      	adds	r3, #14
 80194bc:	4619      	mov	r1, r3
 80194be:	6878      	ldr	r0, [r7, #4]
 80194c0:	f7f7 fe18 	bl	80110f4 <pbuf_add_header>
 80194c4:	4603      	mov	r3, r0
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d04b      	beq.n	8019562 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	891a      	ldrh	r2, [r3, #8]
 80194ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194d0:	4413      	add	r3, r2
 80194d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	891b      	ldrh	r3, [r3, #8]
 80194d8:	8b7a      	ldrh	r2, [r7, #26]
 80194da:	429a      	cmp	r2, r3
 80194dc:	f0c0 809a 	bcc.w	8019614 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80194e0:	8b7b      	ldrh	r3, [r7, #26]
 80194e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80194e6:	4619      	mov	r1, r3
 80194e8:	200e      	movs	r0, #14
 80194ea:	f7f7 fbb5 	bl	8010c58 <pbuf_alloc>
 80194ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80194f0:	697b      	ldr	r3, [r7, #20]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	f000 8090 	beq.w	8019618 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80194f8:	697b      	ldr	r3, [r7, #20]
 80194fa:	895b      	ldrh	r3, [r3, #10]
 80194fc:	461a      	mov	r2, r3
 80194fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019500:	3308      	adds	r3, #8
 8019502:	429a      	cmp	r2, r3
 8019504:	d203      	bcs.n	801950e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019506:	6978      	ldr	r0, [r7, #20]
 8019508:	f7f7 fe8a 	bl	8011220 <pbuf_free>
          goto icmperr;
 801950c:	e085      	b.n	801961a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801950e:	697b      	ldr	r3, [r7, #20]
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019516:	4618      	mov	r0, r3
 8019518:	f001 ff3a 	bl	801b390 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801951c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801951e:	4619      	mov	r1, r3
 8019520:	6978      	ldr	r0, [r7, #20]
 8019522:	f7f7 fdf7 	bl	8011114 <pbuf_remove_header>
 8019526:	4603      	mov	r3, r0
 8019528:	2b00      	cmp	r3, #0
 801952a:	d009      	beq.n	8019540 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801952c:	4b40      	ldr	r3, [pc, #256]	; (8019630 <icmp_input+0x1f8>)
 801952e:	22b6      	movs	r2, #182	; 0xb6
 8019530:	4940      	ldr	r1, [pc, #256]	; (8019634 <icmp_input+0x1fc>)
 8019532:	4841      	ldr	r0, [pc, #260]	; (8019638 <icmp_input+0x200>)
 8019534:	f002 f9da 	bl	801b8ec <printf>
          pbuf_free(r);
 8019538:	6978      	ldr	r0, [r7, #20]
 801953a:	f7f7 fe71 	bl	8011220 <pbuf_free>
          goto icmperr;
 801953e:	e06c      	b.n	801961a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019540:	6879      	ldr	r1, [r7, #4]
 8019542:	6978      	ldr	r0, [r7, #20]
 8019544:	f7f7 ffa0 	bl	8011488 <pbuf_copy>
 8019548:	4603      	mov	r3, r0
 801954a:	2b00      	cmp	r3, #0
 801954c:	d003      	beq.n	8019556 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801954e:	6978      	ldr	r0, [r7, #20]
 8019550:	f7f7 fe66 	bl	8011220 <pbuf_free>
          goto icmperr;
 8019554:	e061      	b.n	801961a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8019556:	6878      	ldr	r0, [r7, #4]
 8019558:	f7f7 fe62 	bl	8011220 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	607b      	str	r3, [r7, #4]
 8019560:	e00f      	b.n	8019582 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019564:	330e      	adds	r3, #14
 8019566:	4619      	mov	r1, r3
 8019568:	6878      	ldr	r0, [r7, #4]
 801956a:	f7f7 fdd3 	bl	8011114 <pbuf_remove_header>
 801956e:	4603      	mov	r3, r0
 8019570:	2b00      	cmp	r3, #0
 8019572:	d006      	beq.n	8019582 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019574:	4b2e      	ldr	r3, [pc, #184]	; (8019630 <icmp_input+0x1f8>)
 8019576:	22c7      	movs	r2, #199	; 0xc7
 8019578:	4930      	ldr	r1, [pc, #192]	; (801963c <icmp_input+0x204>)
 801957a:	482f      	ldr	r0, [pc, #188]	; (8019638 <icmp_input+0x200>)
 801957c:	f002 f9b6 	bl	801b8ec <printf>
          goto icmperr;
 8019580:	e04b      	b.n	801961a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	685b      	ldr	r3, [r3, #4]
 8019586:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801958a:	4619      	mov	r1, r3
 801958c:	6878      	ldr	r0, [r7, #4]
 801958e:	f7f7 fdb1 	bl	80110f4 <pbuf_add_header>
 8019592:	4603      	mov	r3, r0
 8019594:	2b00      	cmp	r3, #0
 8019596:	d12b      	bne.n	80195f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	685b      	ldr	r3, [r3, #4]
 801959c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801959e:	69fb      	ldr	r3, [r7, #28]
 80195a0:	681a      	ldr	r2, [r3, #0]
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80195a6:	4b20      	ldr	r3, [pc, #128]	; (8019628 <icmp_input+0x1f0>)
 80195a8:	691a      	ldr	r2, [r3, #16]
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	2200      	movs	r2, #0
 80195b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	2200      	movs	r2, #0
 80195b8:	709a      	strb	r2, [r3, #2]
 80195ba:	2200      	movs	r2, #0
 80195bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	22ff      	movs	r2, #255	; 0xff
 80195c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	2200      	movs	r2, #0
 80195c8:	729a      	strb	r2, [r3, #10]
 80195ca:	2200      	movs	r2, #0
 80195cc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80195ce:	683b      	ldr	r3, [r7, #0]
 80195d0:	9302      	str	r3, [sp, #8]
 80195d2:	2301      	movs	r3, #1
 80195d4:	9301      	str	r3, [sp, #4]
 80195d6:	2300      	movs	r3, #0
 80195d8:	9300      	str	r3, [sp, #0]
 80195da:	23ff      	movs	r3, #255	; 0xff
 80195dc:	2200      	movs	r2, #0
 80195de:	69f9      	ldr	r1, [r7, #28]
 80195e0:	6878      	ldr	r0, [r7, #4]
 80195e2:	f000 fa75 	bl	8019ad0 <ip4_output_if>
 80195e6:	4603      	mov	r3, r0
 80195e8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80195ea:	e001      	b.n	80195f0 <icmp_input+0x1b8>
      break;
 80195ec:	bf00      	nop
 80195ee:	e000      	b.n	80195f2 <icmp_input+0x1ba>
      break;
 80195f0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f7f7 fe14 	bl	8011220 <pbuf_free>
  return;
 80195f8:	e013      	b.n	8019622 <icmp_input+0x1ea>
    goto lenerr;
 80195fa:	bf00      	nop
 80195fc:	e002      	b.n	8019604 <icmp_input+0x1cc>
    goto lenerr;
 80195fe:	bf00      	nop
 8019600:	e000      	b.n	8019604 <icmp_input+0x1cc>
        goto lenerr;
 8019602:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019604:	6878      	ldr	r0, [r7, #4]
 8019606:	f7f7 fe0b 	bl	8011220 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801960a:	e00a      	b.n	8019622 <icmp_input+0x1ea>
        goto icmperr;
 801960c:	bf00      	nop
 801960e:	e004      	b.n	801961a <icmp_input+0x1e2>
        goto icmperr;
 8019610:	bf00      	nop
 8019612:	e002      	b.n	801961a <icmp_input+0x1e2>
          goto icmperr;
 8019614:	bf00      	nop
 8019616:	e000      	b.n	801961a <icmp_input+0x1e2>
          goto icmperr;
 8019618:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801961a:	6878      	ldr	r0, [r7, #4]
 801961c:	f7f7 fe00 	bl	8011220 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019620:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019622:	3728      	adds	r7, #40	; 0x28
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}
 8019628:	200086bc 	.word	0x200086bc
 801962c:	200086d0 	.word	0x200086d0
 8019630:	08027b98 	.word	0x08027b98
 8019634:	08027bd0 	.word	0x08027bd0
 8019638:	08027c08 	.word	0x08027c08
 801963c:	08027c30 	.word	0x08027c30

08019640 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b082      	sub	sp, #8
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
 8019648:	460b      	mov	r3, r1
 801964a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801964c:	78fb      	ldrb	r3, [r7, #3]
 801964e:	461a      	mov	r2, r3
 8019650:	2103      	movs	r1, #3
 8019652:	6878      	ldr	r0, [r7, #4]
 8019654:	f000 f814 	bl	8019680 <icmp_send_response>
}
 8019658:	bf00      	nop
 801965a:	3708      	adds	r7, #8
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}

08019660 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	460b      	mov	r3, r1
 801966a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801966c:	78fb      	ldrb	r3, [r7, #3]
 801966e:	461a      	mov	r2, r3
 8019670:	210b      	movs	r1, #11
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f000 f804 	bl	8019680 <icmp_send_response>
}
 8019678:	bf00      	nop
 801967a:	3708      	adds	r7, #8
 801967c:	46bd      	mov	sp, r7
 801967e:	bd80      	pop	{r7, pc}

08019680 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b08c      	sub	sp, #48	; 0x30
 8019684:	af04      	add	r7, sp, #16
 8019686:	6078      	str	r0, [r7, #4]
 8019688:	460b      	mov	r3, r1
 801968a:	70fb      	strb	r3, [r7, #3]
 801968c:	4613      	mov	r3, r2
 801968e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019690:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019694:	2124      	movs	r1, #36	; 0x24
 8019696:	2022      	movs	r0, #34	; 0x22
 8019698:	f7f7 fade 	bl	8010c58 <pbuf_alloc>
 801969c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801969e:	69fb      	ldr	r3, [r7, #28]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d04c      	beq.n	801973e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80196a4:	69fb      	ldr	r3, [r7, #28]
 80196a6:	895b      	ldrh	r3, [r3, #10]
 80196a8:	2b23      	cmp	r3, #35	; 0x23
 80196aa:	d806      	bhi.n	80196ba <icmp_send_response+0x3a>
 80196ac:	4b26      	ldr	r3, [pc, #152]	; (8019748 <icmp_send_response+0xc8>)
 80196ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80196b2:	4926      	ldr	r1, [pc, #152]	; (801974c <icmp_send_response+0xcc>)
 80196b4:	4826      	ldr	r0, [pc, #152]	; (8019750 <icmp_send_response+0xd0>)
 80196b6:	f002 f919 	bl	801b8ec <printf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80196c0:	69fb      	ldr	r3, [r7, #28]
 80196c2:	685b      	ldr	r3, [r3, #4]
 80196c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	78fa      	ldrb	r2, [r7, #3]
 80196ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80196cc:	697b      	ldr	r3, [r7, #20]
 80196ce:	78ba      	ldrb	r2, [r7, #2]
 80196d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	2200      	movs	r2, #0
 80196d6:	711a      	strb	r2, [r3, #4]
 80196d8:	2200      	movs	r2, #0
 80196da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	2200      	movs	r2, #0
 80196e0:	719a      	strb	r2, [r3, #6]
 80196e2:	2200      	movs	r2, #0
 80196e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80196e6:	69fb      	ldr	r3, [r7, #28]
 80196e8:	685b      	ldr	r3, [r3, #4]
 80196ea:	f103 0008 	add.w	r0, r3, #8
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	685b      	ldr	r3, [r3, #4]
 80196f2:	221c      	movs	r2, #28
 80196f4:	4619      	mov	r1, r3
 80196f6:	f001 fe4b 	bl	801b390 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80196fa:	69bb      	ldr	r3, [r7, #24]
 80196fc:	68db      	ldr	r3, [r3, #12]
 80196fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019700:	f107 030c 	add.w	r3, r7, #12
 8019704:	4618      	mov	r0, r3
 8019706:	f000 f825 	bl	8019754 <ip4_route>
 801970a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801970c:	693b      	ldr	r3, [r7, #16]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d011      	beq.n	8019736 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019712:	697b      	ldr	r3, [r7, #20]
 8019714:	2200      	movs	r2, #0
 8019716:	709a      	strb	r2, [r3, #2]
 8019718:	2200      	movs	r2, #0
 801971a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801971c:	f107 020c 	add.w	r2, r7, #12
 8019720:	693b      	ldr	r3, [r7, #16]
 8019722:	9302      	str	r3, [sp, #8]
 8019724:	2301      	movs	r3, #1
 8019726:	9301      	str	r3, [sp, #4]
 8019728:	2300      	movs	r3, #0
 801972a:	9300      	str	r3, [sp, #0]
 801972c:	23ff      	movs	r3, #255	; 0xff
 801972e:	2100      	movs	r1, #0
 8019730:	69f8      	ldr	r0, [r7, #28]
 8019732:	f000 f9cd 	bl	8019ad0 <ip4_output_if>
  }
  pbuf_free(q);
 8019736:	69f8      	ldr	r0, [r7, #28]
 8019738:	f7f7 fd72 	bl	8011220 <pbuf_free>
 801973c:	e000      	b.n	8019740 <icmp_send_response+0xc0>
    return;
 801973e:	bf00      	nop
}
 8019740:	3720      	adds	r7, #32
 8019742:	46bd      	mov	sp, r7
 8019744:	bd80      	pop	{r7, pc}
 8019746:	bf00      	nop
 8019748:	08027b98 	.word	0x08027b98
 801974c:	08027c64 	.word	0x08027c64
 8019750:	08027c08 	.word	0x08027c08

08019754 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019754:	b480      	push	{r7}
 8019756:	b085      	sub	sp, #20
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801975c:	4b33      	ldr	r3, [pc, #204]	; (801982c <ip4_route+0xd8>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	60fb      	str	r3, [r7, #12]
 8019762:	e036      	b.n	80197d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801976a:	f003 0301 	and.w	r3, r3, #1
 801976e:	b2db      	uxtb	r3, r3
 8019770:	2b00      	cmp	r3, #0
 8019772:	d02b      	beq.n	80197cc <ip4_route+0x78>
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801977a:	089b      	lsrs	r3, r3, #2
 801977c:	f003 0301 	and.w	r3, r3, #1
 8019780:	b2db      	uxtb	r3, r3
 8019782:	2b00      	cmp	r3, #0
 8019784:	d022      	beq.n	80197cc <ip4_route+0x78>
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	3304      	adds	r3, #4
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d01d      	beq.n	80197cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681a      	ldr	r2, [r3, #0]
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	3304      	adds	r3, #4
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	405a      	eors	r2, r3
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	3308      	adds	r3, #8
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	4013      	ands	r3, r2
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d101      	bne.n	80197ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	e038      	b.n	801981e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197b2:	f003 0302 	and.w	r3, r3, #2
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d108      	bne.n	80197cc <ip4_route+0x78>
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	681a      	ldr	r2, [r3, #0]
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	330c      	adds	r3, #12
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	429a      	cmp	r2, r3
 80197c6:	d101      	bne.n	80197cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	e028      	b.n	801981e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	60fb      	str	r3, [r7, #12]
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d1c5      	bne.n	8019764 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80197d8:	4b15      	ldr	r3, [pc, #84]	; (8019830 <ip4_route+0xdc>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d01a      	beq.n	8019816 <ip4_route+0xc2>
 80197e0:	4b13      	ldr	r3, [pc, #76]	; (8019830 <ip4_route+0xdc>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197e8:	f003 0301 	and.w	r3, r3, #1
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d012      	beq.n	8019816 <ip4_route+0xc2>
 80197f0:	4b0f      	ldr	r3, [pc, #60]	; (8019830 <ip4_route+0xdc>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197f8:	f003 0304 	and.w	r3, r3, #4
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d00a      	beq.n	8019816 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019800:	4b0b      	ldr	r3, [pc, #44]	; (8019830 <ip4_route+0xdc>)
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	3304      	adds	r3, #4
 8019806:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019808:	2b00      	cmp	r3, #0
 801980a:	d004      	beq.n	8019816 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	b2db      	uxtb	r3, r3
 8019812:	2b7f      	cmp	r3, #127	; 0x7f
 8019814:	d101      	bne.n	801981a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019816:	2300      	movs	r3, #0
 8019818:	e001      	b.n	801981e <ip4_route+0xca>
  }

  return netif_default;
 801981a:	4b05      	ldr	r3, [pc, #20]	; (8019830 <ip4_route+0xdc>)
 801981c:	681b      	ldr	r3, [r3, #0]
}
 801981e:	4618      	mov	r0, r3
 8019820:	3714      	adds	r7, #20
 8019822:	46bd      	mov	sp, r7
 8019824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019828:	4770      	bx	lr
 801982a:	bf00      	nop
 801982c:	2000bdc0 	.word	0x2000bdc0
 8019830:	2000bdc4 	.word	0x2000bdc4

08019834 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b082      	sub	sp, #8
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019842:	f003 0301 	and.w	r3, r3, #1
 8019846:	b2db      	uxtb	r3, r3
 8019848:	2b00      	cmp	r3, #0
 801984a:	d016      	beq.n	801987a <ip4_input_accept+0x46>
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	3304      	adds	r3, #4
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d011      	beq.n	801987a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019856:	4b0b      	ldr	r3, [pc, #44]	; (8019884 <ip4_input_accept+0x50>)
 8019858:	695a      	ldr	r2, [r3, #20]
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	3304      	adds	r3, #4
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	429a      	cmp	r2, r3
 8019862:	d008      	beq.n	8019876 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019864:	4b07      	ldr	r3, [pc, #28]	; (8019884 <ip4_input_accept+0x50>)
 8019866:	695b      	ldr	r3, [r3, #20]
 8019868:	6879      	ldr	r1, [r7, #4]
 801986a:	4618      	mov	r0, r3
 801986c:	f000 fa08 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 8019870:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019872:	2b00      	cmp	r3, #0
 8019874:	d001      	beq.n	801987a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019876:	2301      	movs	r3, #1
 8019878:	e000      	b.n	801987c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801987a:	2300      	movs	r3, #0
}
 801987c:	4618      	mov	r0, r3
 801987e:	3708      	adds	r7, #8
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}
 8019884:	200086bc 	.word	0x200086bc

08019888 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019888:	b580      	push	{r7, lr}
 801988a:	b086      	sub	sp, #24
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
 8019890:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	685b      	ldr	r3, [r3, #4]
 8019896:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019898:	697b      	ldr	r3, [r7, #20]
 801989a:	781b      	ldrb	r3, [r3, #0]
 801989c:	091b      	lsrs	r3, r3, #4
 801989e:	b2db      	uxtb	r3, r3
 80198a0:	2b04      	cmp	r3, #4
 80198a2:	d004      	beq.n	80198ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80198a4:	6878      	ldr	r0, [r7, #4]
 80198a6:	f7f7 fcbb 	bl	8011220 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80198aa:	2300      	movs	r3, #0
 80198ac:	e107      	b.n	8019abe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80198ae:	697b      	ldr	r3, [r7, #20]
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	f003 030f 	and.w	r3, r3, #15
 80198b6:	b2db      	uxtb	r3, r3
 80198b8:	009b      	lsls	r3, r3, #2
 80198ba:	b2db      	uxtb	r3, r3
 80198bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	885b      	ldrh	r3, [r3, #2]
 80198c2:	b29b      	uxth	r3, r3
 80198c4:	4618      	mov	r0, r3
 80198c6:	f7f6 f8ef 	bl	800faa8 <lwip_htons>
 80198ca:	4603      	mov	r3, r0
 80198cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	891b      	ldrh	r3, [r3, #8]
 80198d2:	89ba      	ldrh	r2, [r7, #12]
 80198d4:	429a      	cmp	r2, r3
 80198d6:	d204      	bcs.n	80198e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80198d8:	89bb      	ldrh	r3, [r7, #12]
 80198da:	4619      	mov	r1, r3
 80198dc:	6878      	ldr	r0, [r7, #4]
 80198de:	f7f7 fb19 	bl	8010f14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	895b      	ldrh	r3, [r3, #10]
 80198e6:	89fa      	ldrh	r2, [r7, #14]
 80198e8:	429a      	cmp	r2, r3
 80198ea:	d807      	bhi.n	80198fc <ip4_input+0x74>
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	891b      	ldrh	r3, [r3, #8]
 80198f0:	89ba      	ldrh	r2, [r7, #12]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d802      	bhi.n	80198fc <ip4_input+0x74>
 80198f6:	89fb      	ldrh	r3, [r7, #14]
 80198f8:	2b13      	cmp	r3, #19
 80198fa:	d804      	bhi.n	8019906 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f7f7 fc8f 	bl	8011220 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019902:	2300      	movs	r3, #0
 8019904:	e0db      	b.n	8019abe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	691b      	ldr	r3, [r3, #16]
 801990a:	4a6f      	ldr	r2, [pc, #444]	; (8019ac8 <ip4_input+0x240>)
 801990c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801990e:	697b      	ldr	r3, [r7, #20]
 8019910:	68db      	ldr	r3, [r3, #12]
 8019912:	4a6d      	ldr	r2, [pc, #436]	; (8019ac8 <ip4_input+0x240>)
 8019914:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019916:	4b6c      	ldr	r3, [pc, #432]	; (8019ac8 <ip4_input+0x240>)
 8019918:	695b      	ldr	r3, [r3, #20]
 801991a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801991e:	2be0      	cmp	r3, #224	; 0xe0
 8019920:	d112      	bne.n	8019948 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019922:	683b      	ldr	r3, [r7, #0]
 8019924:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019928:	f003 0301 	and.w	r3, r3, #1
 801992c:	b2db      	uxtb	r3, r3
 801992e:	2b00      	cmp	r3, #0
 8019930:	d007      	beq.n	8019942 <ip4_input+0xba>
 8019932:	683b      	ldr	r3, [r7, #0]
 8019934:	3304      	adds	r3, #4
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d002      	beq.n	8019942 <ip4_input+0xba>
      netif = inp;
 801993c:	683b      	ldr	r3, [r7, #0]
 801993e:	613b      	str	r3, [r7, #16]
 8019940:	e02a      	b.n	8019998 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019942:	2300      	movs	r3, #0
 8019944:	613b      	str	r3, [r7, #16]
 8019946:	e027      	b.n	8019998 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019948:	6838      	ldr	r0, [r7, #0]
 801994a:	f7ff ff73 	bl	8019834 <ip4_input_accept>
 801994e:	4603      	mov	r3, r0
 8019950:	2b00      	cmp	r3, #0
 8019952:	d002      	beq.n	801995a <ip4_input+0xd2>
      netif = inp;
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	613b      	str	r3, [r7, #16]
 8019958:	e01e      	b.n	8019998 <ip4_input+0x110>
    } else {
      netif = NULL;
 801995a:	2300      	movs	r3, #0
 801995c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801995e:	4b5a      	ldr	r3, [pc, #360]	; (8019ac8 <ip4_input+0x240>)
 8019960:	695b      	ldr	r3, [r3, #20]
 8019962:	b2db      	uxtb	r3, r3
 8019964:	2b7f      	cmp	r3, #127	; 0x7f
 8019966:	d017      	beq.n	8019998 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019968:	4b58      	ldr	r3, [pc, #352]	; (8019acc <ip4_input+0x244>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	613b      	str	r3, [r7, #16]
 801996e:	e00e      	b.n	801998e <ip4_input+0x106>
          if (netif == inp) {
 8019970:	693a      	ldr	r2, [r7, #16]
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	429a      	cmp	r2, r3
 8019976:	d006      	beq.n	8019986 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019978:	6938      	ldr	r0, [r7, #16]
 801997a:	f7ff ff5b 	bl	8019834 <ip4_input_accept>
 801997e:	4603      	mov	r3, r0
 8019980:	2b00      	cmp	r3, #0
 8019982:	d108      	bne.n	8019996 <ip4_input+0x10e>
 8019984:	e000      	b.n	8019988 <ip4_input+0x100>
            continue;
 8019986:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019988:	693b      	ldr	r3, [r7, #16]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	613b      	str	r3, [r7, #16]
 801998e:	693b      	ldr	r3, [r7, #16]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d1ed      	bne.n	8019970 <ip4_input+0xe8>
 8019994:	e000      	b.n	8019998 <ip4_input+0x110>
            break;
 8019996:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019998:	4b4b      	ldr	r3, [pc, #300]	; (8019ac8 <ip4_input+0x240>)
 801999a:	691b      	ldr	r3, [r3, #16]
 801999c:	6839      	ldr	r1, [r7, #0]
 801999e:	4618      	mov	r0, r3
 80199a0:	f000 f96e 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d105      	bne.n	80199b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80199aa:	4b47      	ldr	r3, [pc, #284]	; (8019ac8 <ip4_input+0x240>)
 80199ac:	691b      	ldr	r3, [r3, #16]
 80199ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80199b2:	2be0      	cmp	r3, #224	; 0xe0
 80199b4:	d104      	bne.n	80199c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80199b6:	6878      	ldr	r0, [r7, #4]
 80199b8:	f7f7 fc32 	bl	8011220 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80199bc:	2300      	movs	r3, #0
 80199be:	e07e      	b.n	8019abe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80199c0:	693b      	ldr	r3, [r7, #16]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d104      	bne.n	80199d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80199c6:	6878      	ldr	r0, [r7, #4]
 80199c8:	f7f7 fc2a 	bl	8011220 <pbuf_free>
    return ERR_OK;
 80199cc:	2300      	movs	r3, #0
 80199ce:	e076      	b.n	8019abe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80199d0:	697b      	ldr	r3, [r7, #20]
 80199d2:	88db      	ldrh	r3, [r3, #6]
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	461a      	mov	r2, r3
 80199d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80199dc:	4013      	ands	r3, r2
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d00b      	beq.n	80199fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f000 fdbc 	bl	801a560 <ip4_reass>
 80199e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d101      	bne.n	80199f4 <ip4_input+0x16c>
      return ERR_OK;
 80199f0:	2300      	movs	r3, #0
 80199f2:	e064      	b.n	8019abe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	685b      	ldr	r3, [r3, #4]
 80199f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80199fa:	4a33      	ldr	r2, [pc, #204]	; (8019ac8 <ip4_input+0x240>)
 80199fc:	693b      	ldr	r3, [r7, #16]
 80199fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019a00:	4a31      	ldr	r2, [pc, #196]	; (8019ac8 <ip4_input+0x240>)
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019a06:	4a30      	ldr	r2, [pc, #192]	; (8019ac8 <ip4_input+0x240>)
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	f003 030f 	and.w	r3, r3, #15
 8019a14:	b2db      	uxtb	r3, r3
 8019a16:	009b      	lsls	r3, r3, #2
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	b29a      	uxth	r2, r3
 8019a1c:	4b2a      	ldr	r3, [pc, #168]	; (8019ac8 <ip4_input+0x240>)
 8019a1e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019a20:	89fb      	ldrh	r3, [r7, #14]
 8019a22:	4619      	mov	r1, r3
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	f7f7 fb75 	bl	8011114 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019a2a:	697b      	ldr	r3, [r7, #20]
 8019a2c:	7a5b      	ldrb	r3, [r3, #9]
 8019a2e:	2b11      	cmp	r3, #17
 8019a30:	d006      	beq.n	8019a40 <ip4_input+0x1b8>
 8019a32:	2b11      	cmp	r3, #17
 8019a34:	dc13      	bgt.n	8019a5e <ip4_input+0x1d6>
 8019a36:	2b01      	cmp	r3, #1
 8019a38:	d00c      	beq.n	8019a54 <ip4_input+0x1cc>
 8019a3a:	2b06      	cmp	r3, #6
 8019a3c:	d005      	beq.n	8019a4a <ip4_input+0x1c2>
 8019a3e:	e00e      	b.n	8019a5e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019a40:	6839      	ldr	r1, [r7, #0]
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	f7fe f970 	bl	8017d28 <udp_input>
        break;
 8019a48:	e026      	b.n	8019a98 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019a4a:	6839      	ldr	r1, [r7, #0]
 8019a4c:	6878      	ldr	r0, [r7, #4]
 8019a4e:	f7f9 fd2d 	bl	80134ac <tcp_input>
        break;
 8019a52:	e021      	b.n	8019a98 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019a54:	6839      	ldr	r1, [r7, #0]
 8019a56:	6878      	ldr	r0, [r7, #4]
 8019a58:	f7ff fcee 	bl	8019438 <icmp_input>
        break;
 8019a5c:	e01c      	b.n	8019a98 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019a5e:	4b1a      	ldr	r3, [pc, #104]	; (8019ac8 <ip4_input+0x240>)
 8019a60:	695b      	ldr	r3, [r3, #20]
 8019a62:	6939      	ldr	r1, [r7, #16]
 8019a64:	4618      	mov	r0, r3
 8019a66:	f000 f90b 	bl	8019c80 <ip4_addr_isbroadcast_u32>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d10f      	bne.n	8019a90 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019a70:	4b15      	ldr	r3, [pc, #84]	; (8019ac8 <ip4_input+0x240>)
 8019a72:	695b      	ldr	r3, [r3, #20]
 8019a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019a78:	2be0      	cmp	r3, #224	; 0xe0
 8019a7a:	d009      	beq.n	8019a90 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019a7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019a80:	4619      	mov	r1, r3
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f7f7 fbb9 	bl	80111fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019a88:	2102      	movs	r1, #2
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f7ff fdd8 	bl	8019640 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019a90:	6878      	ldr	r0, [r7, #4]
 8019a92:	f7f7 fbc5 	bl	8011220 <pbuf_free>
        break;
 8019a96:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019a98:	4b0b      	ldr	r3, [pc, #44]	; (8019ac8 <ip4_input+0x240>)
 8019a9a:	2200      	movs	r2, #0
 8019a9c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019a9e:	4b0a      	ldr	r3, [pc, #40]	; (8019ac8 <ip4_input+0x240>)
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019aa4:	4b08      	ldr	r3, [pc, #32]	; (8019ac8 <ip4_input+0x240>)
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019aaa:	4b07      	ldr	r3, [pc, #28]	; (8019ac8 <ip4_input+0x240>)
 8019aac:	2200      	movs	r2, #0
 8019aae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019ab0:	4b05      	ldr	r3, [pc, #20]	; (8019ac8 <ip4_input+0x240>)
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019ab6:	4b04      	ldr	r3, [pc, #16]	; (8019ac8 <ip4_input+0x240>)
 8019ab8:	2200      	movs	r2, #0
 8019aba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019abc:	2300      	movs	r3, #0
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	3718      	adds	r7, #24
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}
 8019ac6:	bf00      	nop
 8019ac8:	200086bc 	.word	0x200086bc
 8019acc:	2000bdc0 	.word	0x2000bdc0

08019ad0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b08a      	sub	sp, #40	; 0x28
 8019ad4:	af04      	add	r7, sp, #16
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	60b9      	str	r1, [r7, #8]
 8019ada:	607a      	str	r2, [r7, #4]
 8019adc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d009      	beq.n	8019afc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019ae8:	68bb      	ldr	r3, [r7, #8]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d003      	beq.n	8019af6 <ip4_output_if+0x26>
 8019aee:	68bb      	ldr	r3, [r7, #8]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d102      	bne.n	8019afc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af8:	3304      	adds	r3, #4
 8019afa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019afc:	78fa      	ldrb	r2, [r7, #3]
 8019afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b00:	9302      	str	r3, [sp, #8]
 8019b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b06:	9301      	str	r3, [sp, #4]
 8019b08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b0c:	9300      	str	r3, [sp, #0]
 8019b0e:	4613      	mov	r3, r2
 8019b10:	687a      	ldr	r2, [r7, #4]
 8019b12:	6979      	ldr	r1, [r7, #20]
 8019b14:	68f8      	ldr	r0, [r7, #12]
 8019b16:	f000 f805 	bl	8019b24 <ip4_output_if_src>
 8019b1a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	3718      	adds	r7, #24
 8019b20:	46bd      	mov	sp, r7
 8019b22:	bd80      	pop	{r7, pc}

08019b24 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019b24:	b580      	push	{r7, lr}
 8019b26:	b088      	sub	sp, #32
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	60f8      	str	r0, [r7, #12]
 8019b2c:	60b9      	str	r1, [r7, #8]
 8019b2e:	607a      	str	r2, [r7, #4]
 8019b30:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	7b9b      	ldrb	r3, [r3, #14]
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	d006      	beq.n	8019b48 <ip4_output_if_src+0x24>
 8019b3a:	4b4b      	ldr	r3, [pc, #300]	; (8019c68 <ip4_output_if_src+0x144>)
 8019b3c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019b40:	494a      	ldr	r1, [pc, #296]	; (8019c6c <ip4_output_if_src+0x148>)
 8019b42:	484b      	ldr	r0, [pc, #300]	; (8019c70 <ip4_output_if_src+0x14c>)
 8019b44:	f001 fed2 	bl	801b8ec <printf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d060      	beq.n	8019c10 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019b4e:	2314      	movs	r3, #20
 8019b50:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019b52:	2114      	movs	r1, #20
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f7f7 facd 	bl	80110f4 <pbuf_add_header>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d002      	beq.n	8019b66 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019b60:	f06f 0301 	mvn.w	r3, #1
 8019b64:	e07c      	b.n	8019c60 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	685b      	ldr	r3, [r3, #4]
 8019b6a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	895b      	ldrh	r3, [r3, #10]
 8019b70:	2b13      	cmp	r3, #19
 8019b72:	d806      	bhi.n	8019b82 <ip4_output_if_src+0x5e>
 8019b74:	4b3c      	ldr	r3, [pc, #240]	; (8019c68 <ip4_output_if_src+0x144>)
 8019b76:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019b7a:	493e      	ldr	r1, [pc, #248]	; (8019c74 <ip4_output_if_src+0x150>)
 8019b7c:	483c      	ldr	r0, [pc, #240]	; (8019c70 <ip4_output_if_src+0x14c>)
 8019b7e:	f001 feb5 	bl	801b8ec <printf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019b82:	69fb      	ldr	r3, [r7, #28]
 8019b84:	78fa      	ldrb	r2, [r7, #3]
 8019b86:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019b88:	69fb      	ldr	r3, [r7, #28]
 8019b8a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019b8e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	681a      	ldr	r2, [r3, #0]
 8019b94:	69fb      	ldr	r3, [r7, #28]
 8019b96:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019b98:	8b7b      	ldrh	r3, [r7, #26]
 8019b9a:	089b      	lsrs	r3, r3, #2
 8019b9c:	b29b      	uxth	r3, r3
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ba4:	b2da      	uxtb	r2, r3
 8019ba6:	69fb      	ldr	r3, [r7, #28]
 8019ba8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019baa:	69fb      	ldr	r3, [r7, #28]
 8019bac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019bb0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	891b      	ldrh	r3, [r3, #8]
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7f5 ff76 	bl	800faa8 <lwip_htons>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	461a      	mov	r2, r3
 8019bc0:	69fb      	ldr	r3, [r7, #28]
 8019bc2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019bc4:	69fb      	ldr	r3, [r7, #28]
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	719a      	strb	r2, [r3, #6]
 8019bca:	2200      	movs	r2, #0
 8019bcc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019bce:	4b2a      	ldr	r3, [pc, #168]	; (8019c78 <ip4_output_if_src+0x154>)
 8019bd0:	881b      	ldrh	r3, [r3, #0]
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	f7f5 ff68 	bl	800faa8 <lwip_htons>
 8019bd8:	4603      	mov	r3, r0
 8019bda:	461a      	mov	r2, r3
 8019bdc:	69fb      	ldr	r3, [r7, #28]
 8019bde:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019be0:	4b25      	ldr	r3, [pc, #148]	; (8019c78 <ip4_output_if_src+0x154>)
 8019be2:	881b      	ldrh	r3, [r3, #0]
 8019be4:	3301      	adds	r3, #1
 8019be6:	b29a      	uxth	r2, r3
 8019be8:	4b23      	ldr	r3, [pc, #140]	; (8019c78 <ip4_output_if_src+0x154>)
 8019bea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d104      	bne.n	8019bfc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019bf2:	4b22      	ldr	r3, [pc, #136]	; (8019c7c <ip4_output_if_src+0x158>)
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	69fb      	ldr	r3, [r7, #28]
 8019bf8:	60da      	str	r2, [r3, #12]
 8019bfa:	e003      	b.n	8019c04 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	681a      	ldr	r2, [r3, #0]
 8019c00:	69fb      	ldr	r3, [r7, #28]
 8019c02:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	2200      	movs	r2, #0
 8019c08:	729a      	strb	r2, [r3, #10]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	72da      	strb	r2, [r3, #11]
 8019c0e:	e00f      	b.n	8019c30 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	895b      	ldrh	r3, [r3, #10]
 8019c14:	2b13      	cmp	r3, #19
 8019c16:	d802      	bhi.n	8019c1e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019c18:	f06f 0301 	mvn.w	r3, #1
 8019c1c:	e020      	b.n	8019c60 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	685b      	ldr	r3, [r3, #4]
 8019c22:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019c24:	69fb      	ldr	r3, [r7, #28]
 8019c26:	691b      	ldr	r3, [r3, #16]
 8019c28:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019c2a:	f107 0314 	add.w	r3, r7, #20
 8019c2e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c32:	8c1b      	ldrh	r3, [r3, #32]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d00c      	beq.n	8019c52 <ip4_output_if_src+0x12e>
 8019c38:	68fb      	ldr	r3, [r7, #12]
 8019c3a:	891a      	ldrh	r2, [r3, #8]
 8019c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c3e:	8c1b      	ldrh	r3, [r3, #32]
 8019c40:	429a      	cmp	r2, r3
 8019c42:	d906      	bls.n	8019c52 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019c44:	687a      	ldr	r2, [r7, #4]
 8019c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019c48:	68f8      	ldr	r0, [r7, #12]
 8019c4a:	f000 fe77 	bl	801a93c <ip4_frag>
 8019c4e:	4603      	mov	r3, r0
 8019c50:	e006      	b.n	8019c60 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c54:	695b      	ldr	r3, [r3, #20]
 8019c56:	687a      	ldr	r2, [r7, #4]
 8019c58:	68f9      	ldr	r1, [r7, #12]
 8019c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c5c:	4798      	blx	r3
 8019c5e:	4603      	mov	r3, r0
}
 8019c60:	4618      	mov	r0, r3
 8019c62:	3720      	adds	r7, #32
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	08027c90 	.word	0x08027c90
 8019c6c:	08027cc4 	.word	0x08027cc4
 8019c70:	08027cd0 	.word	0x08027cd0
 8019c74:	08027cf8 	.word	0x08027cf8
 8019c78:	2000503e 	.word	0x2000503e
 8019c7c:	08029f14 	.word	0x08029f14

08019c80 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019c80:	b480      	push	{r7}
 8019c82:	b085      	sub	sp, #20
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
 8019c88:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c94:	d002      	beq.n	8019c9c <ip4_addr_isbroadcast_u32+0x1c>
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d101      	bne.n	8019ca0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	e02a      	b.n	8019cf6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019ca6:	f003 0302 	and.w	r3, r3, #2
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d101      	bne.n	8019cb2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	e021      	b.n	8019cf6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019cb2:	683b      	ldr	r3, [r7, #0]
 8019cb4:	3304      	adds	r3, #4
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	687a      	ldr	r2, [r7, #4]
 8019cba:	429a      	cmp	r2, r3
 8019cbc:	d101      	bne.n	8019cc2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	e019      	b.n	8019cf6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019cc2:	68fa      	ldr	r2, [r7, #12]
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	3304      	adds	r3, #4
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	405a      	eors	r2, r3
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	3308      	adds	r3, #8
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	4013      	ands	r3, r2
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d10d      	bne.n	8019cf4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019cd8:	683b      	ldr	r3, [r7, #0]
 8019cda:	3308      	adds	r3, #8
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	43da      	mvns	r2, r3
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	3308      	adds	r3, #8
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019cec:	429a      	cmp	r2, r3
 8019cee:	d101      	bne.n	8019cf4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019cf0:	2301      	movs	r3, #1
 8019cf2:	e000      	b.n	8019cf6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019cf4:	2300      	movs	r3, #0
  }
}
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	3714      	adds	r7, #20
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d00:	4770      	bx	lr
	...

08019d04 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b08a      	sub	sp, #40	; 0x28
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
 8019d0c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019d0e:	f107 030c 	add.w	r3, r7, #12
 8019d12:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	781b      	ldrb	r3, [r3, #0]
 8019d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d20:	3301      	adds	r3, #1
 8019d22:	4a89      	ldr	r2, [pc, #548]	; (8019f48 <ip4addr_aton+0x244>)
 8019d24:	4413      	add	r3, r2
 8019d26:	781b      	ldrb	r3, [r3, #0]
 8019d28:	f003 0304 	and.w	r3, r3, #4
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d101      	bne.n	8019d34 <ip4addr_aton+0x30>
      return 0;
 8019d30:	2300      	movs	r3, #0
 8019d32:	e105      	b.n	8019f40 <ip4addr_aton+0x23c>
    }
    val = 0;
 8019d34:	2300      	movs	r3, #0
 8019d36:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8019d38:	230a      	movs	r3, #10
 8019d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019d3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d42:	2b30      	cmp	r3, #48	; 0x30
 8019d44:	d11c      	bne.n	8019d80 <ip4addr_aton+0x7c>
      c = *++cp;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	3301      	adds	r3, #1
 8019d4a:	607b      	str	r3, [r7, #4]
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8019d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d58:	2b78      	cmp	r3, #120	; 0x78
 8019d5a:	d003      	beq.n	8019d64 <ip4addr_aton+0x60>
 8019d5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d60:	2b58      	cmp	r3, #88	; 0x58
 8019d62:	d10a      	bne.n	8019d7a <ip4addr_aton+0x76>
        base = 16;
 8019d64:	2310      	movs	r3, #16
 8019d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	3301      	adds	r3, #1
 8019d6e:	607b      	str	r3, [r7, #4]
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019d78:	e002      	b.n	8019d80 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8019d7a:	2308      	movs	r3, #8
 8019d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8019d80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019d84:	3301      	adds	r3, #1
 8019d86:	4a70      	ldr	r2, [pc, #448]	; (8019f48 <ip4addr_aton+0x244>)
 8019d88:	4413      	add	r3, r2
 8019d8a:	781b      	ldrb	r3, [r3, #0]
 8019d8c:	f003 0304 	and.w	r3, r3, #4
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d011      	beq.n	8019db8 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8019d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d9a:	fb02 f203 	mul.w	r2, r2, r3
 8019d9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019da2:	4413      	add	r3, r2
 8019da4:	3b30      	subs	r3, #48	; 0x30
 8019da6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	3301      	adds	r3, #1
 8019dac:	607b      	str	r3, [r7, #4]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019db6:	e7e3      	b.n	8019d80 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8019db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019dbc:	2b10      	cmp	r3, #16
 8019dbe:	d127      	bne.n	8019e10 <ip4addr_aton+0x10c>
 8019dc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	4a60      	ldr	r2, [pc, #384]	; (8019f48 <ip4addr_aton+0x244>)
 8019dc8:	4413      	add	r3, r2
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d01d      	beq.n	8019e10 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8019dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd6:	011b      	lsls	r3, r3, #4
 8019dd8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019ddc:	f102 010a 	add.w	r1, r2, #10
 8019de0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019de4:	3201      	adds	r2, #1
 8019de6:	4858      	ldr	r0, [pc, #352]	; (8019f48 <ip4addr_aton+0x244>)
 8019de8:	4402      	add	r2, r0
 8019dea:	7812      	ldrb	r2, [r2, #0]
 8019dec:	f002 0203 	and.w	r2, r2, #3
 8019df0:	2a02      	cmp	r2, #2
 8019df2:	d101      	bne.n	8019df8 <ip4addr_aton+0xf4>
 8019df4:	2261      	movs	r2, #97	; 0x61
 8019df6:	e000      	b.n	8019dfa <ip4addr_aton+0xf6>
 8019df8:	2241      	movs	r2, #65	; 0x41
 8019dfa:	1a8a      	subs	r2, r1, r2
 8019dfc:	4313      	orrs	r3, r2
 8019dfe:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	3301      	adds	r3, #1
 8019e04:	607b      	str	r3, [r7, #4]
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	781b      	ldrb	r3, [r3, #0]
 8019e0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8019e0e:	e7b7      	b.n	8019d80 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8019e10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e14:	2b2e      	cmp	r3, #46	; 0x2e
 8019e16:	d114      	bne.n	8019e42 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8019e18:	f107 030c 	add.w	r3, r7, #12
 8019e1c:	330c      	adds	r3, #12
 8019e1e:	69fa      	ldr	r2, [r7, #28]
 8019e20:	429a      	cmp	r2, r3
 8019e22:	d301      	bcc.n	8019e28 <ip4addr_aton+0x124>
        return 0;
 8019e24:	2300      	movs	r3, #0
 8019e26:	e08b      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	1d1a      	adds	r2, r3, #4
 8019e2c:	61fa      	str	r2, [r7, #28]
 8019e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e30:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	3301      	adds	r3, #1
 8019e36:	607b      	str	r3, [r7, #4]
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	781b      	ldrb	r3, [r3, #0]
 8019e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8019e40:	e76c      	b.n	8019d1c <ip4addr_aton+0x18>
    } else {
      break;
 8019e42:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8019e44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d00b      	beq.n	8019e64 <ip4addr_aton+0x160>
 8019e4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e50:	3301      	adds	r3, #1
 8019e52:	4a3d      	ldr	r2, [pc, #244]	; (8019f48 <ip4addr_aton+0x244>)
 8019e54:	4413      	add	r3, r2
 8019e56:	781b      	ldrb	r3, [r3, #0]
 8019e58:	f003 0308 	and.w	r3, r3, #8
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d101      	bne.n	8019e64 <ip4addr_aton+0x160>
    return 0;
 8019e60:	2300      	movs	r3, #0
 8019e62:	e06d      	b.n	8019f40 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8019e64:	f107 030c 	add.w	r3, r7, #12
 8019e68:	69fa      	ldr	r2, [r7, #28]
 8019e6a:	1ad3      	subs	r3, r2, r3
 8019e6c:	109b      	asrs	r3, r3, #2
 8019e6e:	3301      	adds	r3, #1
 8019e70:	2b04      	cmp	r3, #4
 8019e72:	d853      	bhi.n	8019f1c <ip4addr_aton+0x218>
 8019e74:	a201      	add	r2, pc, #4	; (adr r2, 8019e7c <ip4addr_aton+0x178>)
 8019e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e7a:	bf00      	nop
 8019e7c:	08019e91 	.word	0x08019e91
 8019e80:	08019f2b 	.word	0x08019f2b
 8019e84:	08019e95 	.word	0x08019e95
 8019e88:	08019eb7 	.word	0x08019eb7
 8019e8c:	08019ee5 	.word	0x08019ee5

    case 0:
      return 0;       /* initial nondigit */
 8019e90:	2300      	movs	r3, #0
 8019e92:	e055      	b.n	8019f40 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8019e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019e9a:	d301      	bcc.n	8019ea0 <ip4addr_aton+0x19c>
        return 0;
 8019e9c:	2300      	movs	r3, #0
 8019e9e:	e04f      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	2bff      	cmp	r3, #255	; 0xff
 8019ea4:	d901      	bls.n	8019eaa <ip4addr_aton+0x1a6>
        return 0;
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	e04a      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	061b      	lsls	r3, r3, #24
 8019eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019eb0:	4313      	orrs	r3, r2
 8019eb2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019eb4:	e03a      	b.n	8019f2c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8019eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ebc:	d301      	bcc.n	8019ec2 <ip4addr_aton+0x1be>
        return 0;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	e03e      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	2bff      	cmp	r3, #255	; 0xff
 8019ec6:	d802      	bhi.n	8019ece <ip4addr_aton+0x1ca>
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	2bff      	cmp	r3, #255	; 0xff
 8019ecc:	d901      	bls.n	8019ed2 <ip4addr_aton+0x1ce>
        return 0;
 8019ece:	2300      	movs	r3, #0
 8019ed0:	e036      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	061a      	lsls	r2, r3, #24
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	041b      	lsls	r3, r3, #16
 8019eda:	4313      	orrs	r3, r2
 8019edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ede:	4313      	orrs	r3, r2
 8019ee0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019ee2:	e023      	b.n	8019f2c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8019ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee6:	2bff      	cmp	r3, #255	; 0xff
 8019ee8:	d901      	bls.n	8019eee <ip4addr_aton+0x1ea>
        return 0;
 8019eea:	2300      	movs	r3, #0
 8019eec:	e028      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	2bff      	cmp	r3, #255	; 0xff
 8019ef2:	d805      	bhi.n	8019f00 <ip4addr_aton+0x1fc>
 8019ef4:	693b      	ldr	r3, [r7, #16]
 8019ef6:	2bff      	cmp	r3, #255	; 0xff
 8019ef8:	d802      	bhi.n	8019f00 <ip4addr_aton+0x1fc>
 8019efa:	697b      	ldr	r3, [r7, #20]
 8019efc:	2bff      	cmp	r3, #255	; 0xff
 8019efe:	d901      	bls.n	8019f04 <ip4addr_aton+0x200>
        return 0;
 8019f00:	2300      	movs	r3, #0
 8019f02:	e01d      	b.n	8019f40 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	061a      	lsls	r2, r3, #24
 8019f08:	693b      	ldr	r3, [r7, #16]
 8019f0a:	041b      	lsls	r3, r3, #16
 8019f0c:	431a      	orrs	r2, r3
 8019f0e:	697b      	ldr	r3, [r7, #20]
 8019f10:	021b      	lsls	r3, r3, #8
 8019f12:	4313      	orrs	r3, r2
 8019f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f16:	4313      	orrs	r3, r2
 8019f18:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019f1a:	e007      	b.n	8019f2c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8019f1c:	4b0b      	ldr	r3, [pc, #44]	; (8019f4c <ip4addr_aton+0x248>)
 8019f1e:	22f9      	movs	r2, #249	; 0xf9
 8019f20:	490b      	ldr	r1, [pc, #44]	; (8019f50 <ip4addr_aton+0x24c>)
 8019f22:	480c      	ldr	r0, [pc, #48]	; (8019f54 <ip4addr_aton+0x250>)
 8019f24:	f001 fce2 	bl	801b8ec <printf>
      break;
 8019f28:	e000      	b.n	8019f2c <ip4addr_aton+0x228>
      break;
 8019f2a:	bf00      	nop
  }
  if (addr) {
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d005      	beq.n	8019f3e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8019f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f34:	f7f5 fdcd 	bl	800fad2 <lwip_htonl>
 8019f38:	4602      	mov	r2, r0
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8019f3e:	2301      	movs	r3, #1
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	3728      	adds	r7, #40	; 0x28
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}
 8019f48:	08029f30 	.word	0x08029f30
 8019f4c:	08027d28 	.word	0x08027d28
 8019f50:	08027d64 	.word	0x08027d64
 8019f54:	08027d70 	.word	0x08027d70

08019f58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b084      	sub	sp, #16
 8019f5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019f62:	4b12      	ldr	r3, [pc, #72]	; (8019fac <ip_reass_tmr+0x54>)
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019f68:	e018      	b.n	8019f9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	7fdb      	ldrb	r3, [r3, #31]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d00b      	beq.n	8019f8a <ip_reass_tmr+0x32>
      r->timer--;
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	7fdb      	ldrb	r3, [r3, #31]
 8019f76:	3b01      	subs	r3, #1
 8019f78:	b2da      	uxtb	r2, r3
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	60fb      	str	r3, [r7, #12]
 8019f88:	e008      	b.n	8019f9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019f94:	68b9      	ldr	r1, [r7, #8]
 8019f96:	6878      	ldr	r0, [r7, #4]
 8019f98:	f000 f80a 	bl	8019fb0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d1e3      	bne.n	8019f6a <ip_reass_tmr+0x12>
    }
  }
}
 8019fa2:	bf00      	nop
 8019fa4:	bf00      	nop
 8019fa6:	3710      	adds	r7, #16
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}
 8019fac:	20005040 	.word	0x20005040

08019fb0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b088      	sub	sp, #32
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]
 8019fb8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019fbe:	683a      	ldr	r2, [r7, #0]
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d105      	bne.n	8019fd2 <ip_reass_free_complete_datagram+0x22>
 8019fc6:	4b45      	ldr	r3, [pc, #276]	; (801a0dc <ip_reass_free_complete_datagram+0x12c>)
 8019fc8:	22ab      	movs	r2, #171	; 0xab
 8019fca:	4945      	ldr	r1, [pc, #276]	; (801a0e0 <ip_reass_free_complete_datagram+0x130>)
 8019fcc:	4845      	ldr	r0, [pc, #276]	; (801a0e4 <ip_reass_free_complete_datagram+0x134>)
 8019fce:	f001 fc8d 	bl	801b8ec <printf>
  if (prev != NULL) {
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d00a      	beq.n	8019fee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019fd8:	683b      	ldr	r3, [r7, #0]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	687a      	ldr	r2, [r7, #4]
 8019fde:	429a      	cmp	r2, r3
 8019fe0:	d005      	beq.n	8019fee <ip_reass_free_complete_datagram+0x3e>
 8019fe2:	4b3e      	ldr	r3, [pc, #248]	; (801a0dc <ip_reass_free_complete_datagram+0x12c>)
 8019fe4:	22ad      	movs	r2, #173	; 0xad
 8019fe6:	4940      	ldr	r1, [pc, #256]	; (801a0e8 <ip_reass_free_complete_datagram+0x138>)
 8019fe8:	483e      	ldr	r0, [pc, #248]	; (801a0e4 <ip_reass_free_complete_datagram+0x134>)
 8019fea:	f001 fc7f 	bl	801b8ec <printf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	685b      	ldr	r3, [r3, #4]
 8019ff2:	685b      	ldr	r3, [r3, #4]
 8019ff4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019ff6:	697b      	ldr	r3, [r7, #20]
 8019ff8:	889b      	ldrh	r3, [r3, #4]
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d12a      	bne.n	801a056 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	685b      	ldr	r3, [r3, #4]
 801a004:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a006:	697b      	ldr	r3, [r7, #20]
 801a008:	681a      	ldr	r2, [r3, #0]
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a00e:	69bb      	ldr	r3, [r7, #24]
 801a010:	6858      	ldr	r0, [r3, #4]
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	3308      	adds	r3, #8
 801a016:	2214      	movs	r2, #20
 801a018:	4619      	mov	r1, r3
 801a01a:	f001 f9b9 	bl	801b390 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a01e:	2101      	movs	r1, #1
 801a020:	69b8      	ldr	r0, [r7, #24]
 801a022:	f7ff fb1d 	bl	8019660 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a026:	69b8      	ldr	r0, [r7, #24]
 801a028:	f7f7 f988 	bl	801133c <pbuf_clen>
 801a02c:	4603      	mov	r3, r0
 801a02e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a030:	8bfa      	ldrh	r2, [r7, #30]
 801a032:	8a7b      	ldrh	r3, [r7, #18]
 801a034:	4413      	add	r3, r2
 801a036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a03a:	db05      	blt.n	801a048 <ip_reass_free_complete_datagram+0x98>
 801a03c:	4b27      	ldr	r3, [pc, #156]	; (801a0dc <ip_reass_free_complete_datagram+0x12c>)
 801a03e:	22bc      	movs	r2, #188	; 0xbc
 801a040:	492a      	ldr	r1, [pc, #168]	; (801a0ec <ip_reass_free_complete_datagram+0x13c>)
 801a042:	4828      	ldr	r0, [pc, #160]	; (801a0e4 <ip_reass_free_complete_datagram+0x134>)
 801a044:	f001 fc52 	bl	801b8ec <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a048:	8bfa      	ldrh	r2, [r7, #30]
 801a04a:	8a7b      	ldrh	r3, [r7, #18]
 801a04c:	4413      	add	r3, r2
 801a04e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a050:	69b8      	ldr	r0, [r7, #24]
 801a052:	f7f7 f8e5 	bl	8011220 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	685b      	ldr	r3, [r3, #4]
 801a05a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a05c:	e01f      	b.n	801a09e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a05e:	69bb      	ldr	r3, [r7, #24]
 801a060:	685b      	ldr	r3, [r3, #4]
 801a062:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a064:	69bb      	ldr	r3, [r7, #24]
 801a066:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a068:	697b      	ldr	r3, [r7, #20]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a06e:	68f8      	ldr	r0, [r7, #12]
 801a070:	f7f7 f964 	bl	801133c <pbuf_clen>
 801a074:	4603      	mov	r3, r0
 801a076:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a078:	8bfa      	ldrh	r2, [r7, #30]
 801a07a:	8a7b      	ldrh	r3, [r7, #18]
 801a07c:	4413      	add	r3, r2
 801a07e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a082:	db05      	blt.n	801a090 <ip_reass_free_complete_datagram+0xe0>
 801a084:	4b15      	ldr	r3, [pc, #84]	; (801a0dc <ip_reass_free_complete_datagram+0x12c>)
 801a086:	22cc      	movs	r2, #204	; 0xcc
 801a088:	4918      	ldr	r1, [pc, #96]	; (801a0ec <ip_reass_free_complete_datagram+0x13c>)
 801a08a:	4816      	ldr	r0, [pc, #88]	; (801a0e4 <ip_reass_free_complete_datagram+0x134>)
 801a08c:	f001 fc2e 	bl	801b8ec <printf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a090:	8bfa      	ldrh	r2, [r7, #30]
 801a092:	8a7b      	ldrh	r3, [r7, #18]
 801a094:	4413      	add	r3, r2
 801a096:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a098:	68f8      	ldr	r0, [r7, #12]
 801a09a:	f7f7 f8c1 	bl	8011220 <pbuf_free>
  while (p != NULL) {
 801a09e:	69bb      	ldr	r3, [r7, #24]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d1dc      	bne.n	801a05e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a0a4:	6839      	ldr	r1, [r7, #0]
 801a0a6:	6878      	ldr	r0, [r7, #4]
 801a0a8:	f000 f8c2 	bl	801a230 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a0ac:	4b10      	ldr	r3, [pc, #64]	; (801a0f0 <ip_reass_free_complete_datagram+0x140>)
 801a0ae:	881b      	ldrh	r3, [r3, #0]
 801a0b0:	8bfa      	ldrh	r2, [r7, #30]
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d905      	bls.n	801a0c2 <ip_reass_free_complete_datagram+0x112>
 801a0b6:	4b09      	ldr	r3, [pc, #36]	; (801a0dc <ip_reass_free_complete_datagram+0x12c>)
 801a0b8:	22d2      	movs	r2, #210	; 0xd2
 801a0ba:	490e      	ldr	r1, [pc, #56]	; (801a0f4 <ip_reass_free_complete_datagram+0x144>)
 801a0bc:	4809      	ldr	r0, [pc, #36]	; (801a0e4 <ip_reass_free_complete_datagram+0x134>)
 801a0be:	f001 fc15 	bl	801b8ec <printf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a0c2:	4b0b      	ldr	r3, [pc, #44]	; (801a0f0 <ip_reass_free_complete_datagram+0x140>)
 801a0c4:	881a      	ldrh	r2, [r3, #0]
 801a0c6:	8bfb      	ldrh	r3, [r7, #30]
 801a0c8:	1ad3      	subs	r3, r2, r3
 801a0ca:	b29a      	uxth	r2, r3
 801a0cc:	4b08      	ldr	r3, [pc, #32]	; (801a0f0 <ip_reass_free_complete_datagram+0x140>)
 801a0ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a0d0:	8bfb      	ldrh	r3, [r7, #30]
}
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	3720      	adds	r7, #32
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bd80      	pop	{r7, pc}
 801a0da:	bf00      	nop
 801a0dc:	08027d98 	.word	0x08027d98
 801a0e0:	08027dd4 	.word	0x08027dd4
 801a0e4:	08027de0 	.word	0x08027de0
 801a0e8:	08027e08 	.word	0x08027e08
 801a0ec:	08027e1c 	.word	0x08027e1c
 801a0f0:	20005044 	.word	0x20005044
 801a0f4:	08027e3c 	.word	0x08027e3c

0801a0f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b08a      	sub	sp, #40	; 0x28
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
 801a100:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a102:	2300      	movs	r3, #0
 801a104:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a106:	2300      	movs	r3, #0
 801a108:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a10a:	2300      	movs	r3, #0
 801a10c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a10e:	2300      	movs	r3, #0
 801a110:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a112:	2300      	movs	r3, #0
 801a114:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a116:	4b28      	ldr	r3, [pc, #160]	; (801a1b8 <ip_reass_remove_oldest_datagram+0xc0>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a11c:	e030      	b.n	801a180 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a120:	695a      	ldr	r2, [r3, #20]
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	68db      	ldr	r3, [r3, #12]
 801a126:	429a      	cmp	r2, r3
 801a128:	d10c      	bne.n	801a144 <ip_reass_remove_oldest_datagram+0x4c>
 801a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a12c:	699a      	ldr	r2, [r3, #24]
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	691b      	ldr	r3, [r3, #16]
 801a132:	429a      	cmp	r2, r3
 801a134:	d106      	bne.n	801a144 <ip_reass_remove_oldest_datagram+0x4c>
 801a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a138:	899a      	ldrh	r2, [r3, #12]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	889b      	ldrh	r3, [r3, #4]
 801a13e:	b29b      	uxth	r3, r3
 801a140:	429a      	cmp	r2, r3
 801a142:	d014      	beq.n	801a16e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a144:	693b      	ldr	r3, [r7, #16]
 801a146:	3301      	adds	r3, #1
 801a148:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a14a:	6a3b      	ldr	r3, [r7, #32]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d104      	bne.n	801a15a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a152:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a154:	69fb      	ldr	r3, [r7, #28]
 801a156:	61bb      	str	r3, [r7, #24]
 801a158:	e009      	b.n	801a16e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a15c:	7fda      	ldrb	r2, [r3, #31]
 801a15e:	6a3b      	ldr	r3, [r7, #32]
 801a160:	7fdb      	ldrb	r3, [r3, #31]
 801a162:	429a      	cmp	r2, r3
 801a164:	d803      	bhi.n	801a16e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a168:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a16a:	69fb      	ldr	r3, [r7, #28]
 801a16c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d001      	beq.n	801a17a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a178:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a182:	2b00      	cmp	r3, #0
 801a184:	d1cb      	bne.n	801a11e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a186:	6a3b      	ldr	r3, [r7, #32]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d008      	beq.n	801a19e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a18c:	69b9      	ldr	r1, [r7, #24]
 801a18e:	6a38      	ldr	r0, [r7, #32]
 801a190:	f7ff ff0e 	bl	8019fb0 <ip_reass_free_complete_datagram>
 801a194:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a196:	697a      	ldr	r2, [r7, #20]
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	4413      	add	r3, r2
 801a19c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a19e:	697a      	ldr	r2, [r7, #20]
 801a1a0:	683b      	ldr	r3, [r7, #0]
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	da02      	bge.n	801a1ac <ip_reass_remove_oldest_datagram+0xb4>
 801a1a6:	693b      	ldr	r3, [r7, #16]
 801a1a8:	2b01      	cmp	r3, #1
 801a1aa:	dcac      	bgt.n	801a106 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a1ac:	697b      	ldr	r3, [r7, #20]
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	3728      	adds	r7, #40	; 0x28
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd80      	pop	{r7, pc}
 801a1b6:	bf00      	nop
 801a1b8:	20005040 	.word	0x20005040

0801a1bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b084      	sub	sp, #16
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a1c6:	2004      	movs	r0, #4
 801a1c8:	f7f6 f95a 	bl	8010480 <memp_malloc>
 801a1cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d110      	bne.n	801a1f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a1d4:	6839      	ldr	r1, [r7, #0]
 801a1d6:	6878      	ldr	r0, [r7, #4]
 801a1d8:	f7ff ff8e 	bl	801a0f8 <ip_reass_remove_oldest_datagram>
 801a1dc:	4602      	mov	r2, r0
 801a1de:	683b      	ldr	r3, [r7, #0]
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	dc03      	bgt.n	801a1ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a1e4:	2004      	movs	r0, #4
 801a1e6:	f7f6 f94b 	bl	8010480 <memp_malloc>
 801a1ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d101      	bne.n	801a1f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	e016      	b.n	801a224 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a1f6:	2220      	movs	r2, #32
 801a1f8:	2100      	movs	r1, #0
 801a1fa:	68f8      	ldr	r0, [r7, #12]
 801a1fc:	f001 f8f0 	bl	801b3e0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	220f      	movs	r2, #15
 801a204:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a206:	4b09      	ldr	r3, [pc, #36]	; (801a22c <ip_reass_enqueue_new_datagram+0x70>)
 801a208:	681a      	ldr	r2, [r3, #0]
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a20e:	4a07      	ldr	r2, [pc, #28]	; (801a22c <ip_reass_enqueue_new_datagram+0x70>)
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	3308      	adds	r3, #8
 801a218:	2214      	movs	r2, #20
 801a21a:	6879      	ldr	r1, [r7, #4]
 801a21c:	4618      	mov	r0, r3
 801a21e:	f001 f8b7 	bl	801b390 <memcpy>
  return ipr;
 801a222:	68fb      	ldr	r3, [r7, #12]
}
 801a224:	4618      	mov	r0, r3
 801a226:	3710      	adds	r7, #16
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}
 801a22c:	20005040 	.word	0x20005040

0801a230 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b082      	sub	sp, #8
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a23a:	4b10      	ldr	r3, [pc, #64]	; (801a27c <ip_reass_dequeue_datagram+0x4c>)
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	687a      	ldr	r2, [r7, #4]
 801a240:	429a      	cmp	r2, r3
 801a242:	d104      	bne.n	801a24e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	4a0c      	ldr	r2, [pc, #48]	; (801a27c <ip_reass_dequeue_datagram+0x4c>)
 801a24a:	6013      	str	r3, [r2, #0]
 801a24c:	e00d      	b.n	801a26a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a24e:	683b      	ldr	r3, [r7, #0]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d106      	bne.n	801a262 <ip_reass_dequeue_datagram+0x32>
 801a254:	4b0a      	ldr	r3, [pc, #40]	; (801a280 <ip_reass_dequeue_datagram+0x50>)
 801a256:	f240 1245 	movw	r2, #325	; 0x145
 801a25a:	490a      	ldr	r1, [pc, #40]	; (801a284 <ip_reass_dequeue_datagram+0x54>)
 801a25c:	480a      	ldr	r0, [pc, #40]	; (801a288 <ip_reass_dequeue_datagram+0x58>)
 801a25e:	f001 fb45 	bl	801b8ec <printf>
    prev->next = ipr->next;
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681a      	ldr	r2, [r3, #0]
 801a266:	683b      	ldr	r3, [r7, #0]
 801a268:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a26a:	6879      	ldr	r1, [r7, #4]
 801a26c:	2004      	movs	r0, #4
 801a26e:	f7f6 f959 	bl	8010524 <memp_free>
}
 801a272:	bf00      	nop
 801a274:	3708      	adds	r7, #8
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}
 801a27a:	bf00      	nop
 801a27c:	20005040 	.word	0x20005040
 801a280:	08027d98 	.word	0x08027d98
 801a284:	08027e60 	.word	0x08027e60
 801a288:	08027de0 	.word	0x08027de0

0801a28c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b08c      	sub	sp, #48	; 0x30
 801a290:	af00      	add	r7, sp, #0
 801a292:	60f8      	str	r0, [r7, #12]
 801a294:	60b9      	str	r1, [r7, #8]
 801a296:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a298:	2300      	movs	r3, #0
 801a29a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a29c:	2301      	movs	r3, #1
 801a29e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	685b      	ldr	r3, [r3, #4]
 801a2a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a2a6:	69fb      	ldr	r3, [r7, #28]
 801a2a8:	885b      	ldrh	r3, [r3, #2]
 801a2aa:	b29b      	uxth	r3, r3
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	f7f5 fbfb 	bl	800faa8 <lwip_htons>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a2b6:	69fb      	ldr	r3, [r7, #28]
 801a2b8:	781b      	ldrb	r3, [r3, #0]
 801a2ba:	f003 030f 	and.w	r3, r3, #15
 801a2be:	b2db      	uxtb	r3, r3
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a2c4:	7e7b      	ldrb	r3, [r7, #25]
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	8b7a      	ldrh	r2, [r7, #26]
 801a2ca:	429a      	cmp	r2, r3
 801a2cc:	d202      	bcs.n	801a2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a2ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a2d2:	e135      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a2d4:	7e7b      	ldrb	r3, [r7, #25]
 801a2d6:	b29b      	uxth	r3, r3
 801a2d8:	8b7a      	ldrh	r2, [r7, #26]
 801a2da:	1ad3      	subs	r3, r2, r3
 801a2dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a2de:	69fb      	ldr	r3, [r7, #28]
 801a2e0:	88db      	ldrh	r3, [r3, #6]
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7f5 fbdf 	bl	800faa8 <lwip_htons>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	00db      	lsls	r3, r3, #3
 801a2f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a2f6:	68bb      	ldr	r3, [r7, #8]
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fe:	2200      	movs	r2, #0
 801a300:	701a      	strb	r2, [r3, #0]
 801a302:	2200      	movs	r2, #0
 801a304:	705a      	strb	r2, [r3, #1]
 801a306:	2200      	movs	r2, #0
 801a308:	709a      	strb	r2, [r3, #2]
 801a30a:	2200      	movs	r2, #0
 801a30c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a310:	8afa      	ldrh	r2, [r7, #22]
 801a312:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a314:	8afa      	ldrh	r2, [r7, #22]
 801a316:	8b7b      	ldrh	r3, [r7, #26]
 801a318:	4413      	add	r3, r2
 801a31a:	b29a      	uxth	r2, r3
 801a31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a31e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a322:	88db      	ldrh	r3, [r3, #6]
 801a324:	b29b      	uxth	r3, r3
 801a326:	8afa      	ldrh	r2, [r7, #22]
 801a328:	429a      	cmp	r2, r3
 801a32a:	d902      	bls.n	801a332 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a32c:	f04f 33ff 	mov.w	r3, #4294967295
 801a330:	e106      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	685b      	ldr	r3, [r3, #4]
 801a336:	627b      	str	r3, [r7, #36]	; 0x24
 801a338:	e068      	b.n	801a40c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a33c:	685b      	ldr	r3, [r3, #4]
 801a33e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a342:	889b      	ldrh	r3, [r3, #4]
 801a344:	b29a      	uxth	r2, r3
 801a346:	693b      	ldr	r3, [r7, #16]
 801a348:	889b      	ldrh	r3, [r3, #4]
 801a34a:	b29b      	uxth	r3, r3
 801a34c:	429a      	cmp	r2, r3
 801a34e:	d235      	bcs.n	801a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a354:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d020      	beq.n	801a39e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a35e:	889b      	ldrh	r3, [r3, #4]
 801a360:	b29a      	uxth	r2, r3
 801a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a364:	88db      	ldrh	r3, [r3, #6]
 801a366:	b29b      	uxth	r3, r3
 801a368:	429a      	cmp	r2, r3
 801a36a:	d307      	bcc.n	801a37c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a36e:	88db      	ldrh	r3, [r3, #6]
 801a370:	b29a      	uxth	r2, r3
 801a372:	693b      	ldr	r3, [r7, #16]
 801a374:	889b      	ldrh	r3, [r3, #4]
 801a376:	b29b      	uxth	r3, r3
 801a378:	429a      	cmp	r2, r3
 801a37a:	d902      	bls.n	801a382 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a37c:	f04f 33ff 	mov.w	r3, #4294967295
 801a380:	e0de      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a384:	68ba      	ldr	r2, [r7, #8]
 801a386:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a38a:	88db      	ldrh	r3, [r3, #6]
 801a38c:	b29a      	uxth	r2, r3
 801a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a390:	889b      	ldrh	r3, [r3, #4]
 801a392:	b29b      	uxth	r3, r3
 801a394:	429a      	cmp	r2, r3
 801a396:	d03d      	beq.n	801a414 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a398:	2300      	movs	r3, #0
 801a39a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a39c:	e03a      	b.n	801a414 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a0:	88db      	ldrh	r3, [r3, #6]
 801a3a2:	b29a      	uxth	r2, r3
 801a3a4:	693b      	ldr	r3, [r7, #16]
 801a3a6:	889b      	ldrh	r3, [r3, #4]
 801a3a8:	b29b      	uxth	r3, r3
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d902      	bls.n	801a3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a3b2:	e0c5      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	68ba      	ldr	r2, [r7, #8]
 801a3b8:	605a      	str	r2, [r3, #4]
      break;
 801a3ba:	e02b      	b.n	801a414 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3be:	889b      	ldrh	r3, [r3, #4]
 801a3c0:	b29a      	uxth	r2, r3
 801a3c2:	693b      	ldr	r3, [r7, #16]
 801a3c4:	889b      	ldrh	r3, [r3, #4]
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	429a      	cmp	r2, r3
 801a3ca:	d102      	bne.n	801a3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a3d0:	e0b6      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d4:	889b      	ldrh	r3, [r3, #4]
 801a3d6:	b29a      	uxth	r2, r3
 801a3d8:	693b      	ldr	r3, [r7, #16]
 801a3da:	88db      	ldrh	r3, [r3, #6]
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	429a      	cmp	r2, r3
 801a3e0:	d202      	bcs.n	801a3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a3e6:	e0ab      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d009      	beq.n	801a402 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3f0:	88db      	ldrh	r3, [r3, #6]
 801a3f2:	b29a      	uxth	r2, r3
 801a3f4:	693b      	ldr	r3, [r7, #16]
 801a3f6:	889b      	ldrh	r3, [r3, #4]
 801a3f8:	b29b      	uxth	r3, r3
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d001      	beq.n	801a402 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a3fe:	2300      	movs	r3, #0
 801a400:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d193      	bne.n	801a33a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a412:	e000      	b.n	801a416 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a414:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d12d      	bne.n	801a478 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d01c      	beq.n	801a45c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a424:	88db      	ldrh	r3, [r3, #6]
 801a426:	b29a      	uxth	r2, r3
 801a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a42a:	889b      	ldrh	r3, [r3, #4]
 801a42c:	b29b      	uxth	r3, r3
 801a42e:	429a      	cmp	r2, r3
 801a430:	d906      	bls.n	801a440 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a432:	4b45      	ldr	r3, [pc, #276]	; (801a548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a434:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a438:	4944      	ldr	r1, [pc, #272]	; (801a54c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a43a:	4845      	ldr	r0, [pc, #276]	; (801a550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a43c:	f001 fa56 	bl	801b8ec <printf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a442:	68ba      	ldr	r2, [r7, #8]
 801a444:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a448:	88db      	ldrh	r3, [r3, #6]
 801a44a:	b29a      	uxth	r2, r3
 801a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a44e:	889b      	ldrh	r3, [r3, #4]
 801a450:	b29b      	uxth	r3, r3
 801a452:	429a      	cmp	r2, r3
 801a454:	d010      	beq.n	801a478 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a456:	2300      	movs	r3, #0
 801a458:	623b      	str	r3, [r7, #32]
 801a45a:	e00d      	b.n	801a478 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d006      	beq.n	801a472 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a464:	4b38      	ldr	r3, [pc, #224]	; (801a548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a466:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a46a:	493a      	ldr	r1, [pc, #232]	; (801a554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a46c:	4838      	ldr	r0, [pc, #224]	; (801a550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a46e:	f001 fa3d 	bl	801b8ec <printf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	68ba      	ldr	r2, [r7, #8]
 801a476:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d105      	bne.n	801a48a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	7f9b      	ldrb	r3, [r3, #30]
 801a482:	f003 0301 	and.w	r3, r3, #1
 801a486:	2b00      	cmp	r3, #0
 801a488:	d059      	beq.n	801a53e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a48a:	6a3b      	ldr	r3, [r7, #32]
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d04f      	beq.n	801a530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	685b      	ldr	r3, [r3, #4]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d006      	beq.n	801a4a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	685b      	ldr	r3, [r3, #4]
 801a49e:	889b      	ldrh	r3, [r3, #4]
 801a4a0:	b29b      	uxth	r3, r3
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	d002      	beq.n	801a4ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	623b      	str	r3, [r7, #32]
 801a4aa:	e041      	b.n	801a530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a4b6:	e012      	b.n	801a4de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4c0:	88db      	ldrh	r3, [r3, #6]
 801a4c2:	b29a      	uxth	r2, r3
 801a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c6:	889b      	ldrh	r3, [r3, #4]
 801a4c8:	b29b      	uxth	r3, r3
 801a4ca:	429a      	cmp	r2, r3
 801a4cc:	d002      	beq.n	801a4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	623b      	str	r3, [r7, #32]
            break;
 801a4d2:	e007      	b.n	801a4e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d1e9      	bne.n	801a4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a4e4:	6a3b      	ldr	r3, [r7, #32]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d022      	beq.n	801a530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	685b      	ldr	r3, [r3, #4]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d106      	bne.n	801a500 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a4f2:	4b15      	ldr	r3, [pc, #84]	; (801a548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a4f4:	f240 12df 	movw	r2, #479	; 0x1df
 801a4f8:	4917      	ldr	r1, [pc, #92]	; (801a558 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a4fa:	4815      	ldr	r0, [pc, #84]	; (801a550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a4fc:	f001 f9f6 	bl	801b8ec <printf>
          LWIP_ASSERT("sanity check",
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	685b      	ldr	r3, [r3, #4]
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a508:	429a      	cmp	r2, r3
 801a50a:	d106      	bne.n	801a51a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a50c:	4b0e      	ldr	r3, [pc, #56]	; (801a548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a50e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a512:	4911      	ldr	r1, [pc, #68]	; (801a558 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a514:	480e      	ldr	r0, [pc, #56]	; (801a550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a516:	f001 f9e9 	bl	801b8ec <printf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d006      	beq.n	801a530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a522:	4b09      	ldr	r3, [pc, #36]	; (801a548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a524:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a528:	490c      	ldr	r1, [pc, #48]	; (801a55c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a52a:	4809      	ldr	r0, [pc, #36]	; (801a550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a52c:	f001 f9de 	bl	801b8ec <printf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a530:	6a3b      	ldr	r3, [r7, #32]
 801a532:	2b00      	cmp	r3, #0
 801a534:	bf14      	ite	ne
 801a536:	2301      	movne	r3, #1
 801a538:	2300      	moveq	r3, #0
 801a53a:	b2db      	uxtb	r3, r3
 801a53c:	e000      	b.n	801a540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a53e:	2300      	movs	r3, #0
}
 801a540:	4618      	mov	r0, r3
 801a542:	3730      	adds	r7, #48	; 0x30
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}
 801a548:	08027d98 	.word	0x08027d98
 801a54c:	08027e7c 	.word	0x08027e7c
 801a550:	08027de0 	.word	0x08027de0
 801a554:	08027e9c 	.word	0x08027e9c
 801a558:	08027ed4 	.word	0x08027ed4
 801a55c:	08027ee4 	.word	0x08027ee4

0801a560 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b08e      	sub	sp, #56	; 0x38
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	685b      	ldr	r3, [r3, #4]
 801a56c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a570:	781b      	ldrb	r3, [r3, #0]
 801a572:	f003 030f 	and.w	r3, r3, #15
 801a576:	b2db      	uxtb	r3, r3
 801a578:	009b      	lsls	r3, r3, #2
 801a57a:	b2db      	uxtb	r3, r3
 801a57c:	2b14      	cmp	r3, #20
 801a57e:	f040 8167 	bne.w	801a850 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a584:	88db      	ldrh	r3, [r3, #6]
 801a586:	b29b      	uxth	r3, r3
 801a588:	4618      	mov	r0, r3
 801a58a:	f7f5 fa8d 	bl	800faa8 <lwip_htons>
 801a58e:	4603      	mov	r3, r0
 801a590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a594:	b29b      	uxth	r3, r3
 801a596:	00db      	lsls	r3, r3, #3
 801a598:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a59c:	885b      	ldrh	r3, [r3, #2]
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f7f5 fa81 	bl	800faa8 <lwip_htons>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ac:	781b      	ldrb	r3, [r3, #0]
 801a5ae:	f003 030f 	and.w	r3, r3, #15
 801a5b2:	b2db      	uxtb	r3, r3
 801a5b4:	009b      	lsls	r3, r3, #2
 801a5b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a5ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a5c2:	429a      	cmp	r2, r3
 801a5c4:	f0c0 8146 	bcc.w	801a854 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a5c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a5cc:	b29b      	uxth	r3, r3
 801a5ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a5d0:	1ad3      	subs	r3, r2, r3
 801a5d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a5d4:	6878      	ldr	r0, [r7, #4]
 801a5d6:	f7f6 feb1 	bl	801133c <pbuf_clen>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a5de:	4b9f      	ldr	r3, [pc, #636]	; (801a85c <ip4_reass+0x2fc>)
 801a5e0:	881b      	ldrh	r3, [r3, #0]
 801a5e2:	461a      	mov	r2, r3
 801a5e4:	8c3b      	ldrh	r3, [r7, #32]
 801a5e6:	4413      	add	r3, r2
 801a5e8:	2b0a      	cmp	r3, #10
 801a5ea:	dd10      	ble.n	801a60e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a5ec:	8c3b      	ldrh	r3, [r7, #32]
 801a5ee:	4619      	mov	r1, r3
 801a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a5f2:	f7ff fd81 	bl	801a0f8 <ip_reass_remove_oldest_datagram>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	f000 812d 	beq.w	801a858 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a5fe:	4b97      	ldr	r3, [pc, #604]	; (801a85c <ip4_reass+0x2fc>)
 801a600:	881b      	ldrh	r3, [r3, #0]
 801a602:	461a      	mov	r2, r3
 801a604:	8c3b      	ldrh	r3, [r7, #32]
 801a606:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a608:	2b0a      	cmp	r3, #10
 801a60a:	f300 8125 	bgt.w	801a858 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a60e:	4b94      	ldr	r3, [pc, #592]	; (801a860 <ip4_reass+0x300>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	633b      	str	r3, [r7, #48]	; 0x30
 801a614:	e015      	b.n	801a642 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a618:	695a      	ldr	r2, [r3, #20]
 801a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a61c:	68db      	ldr	r3, [r3, #12]
 801a61e:	429a      	cmp	r2, r3
 801a620:	d10c      	bne.n	801a63c <ip4_reass+0xdc>
 801a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a624:	699a      	ldr	r2, [r3, #24]
 801a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a628:	691b      	ldr	r3, [r3, #16]
 801a62a:	429a      	cmp	r2, r3
 801a62c:	d106      	bne.n	801a63c <ip4_reass+0xdc>
 801a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a630:	899a      	ldrh	r2, [r3, #12]
 801a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a634:	889b      	ldrh	r3, [r3, #4]
 801a636:	b29b      	uxth	r3, r3
 801a638:	429a      	cmp	r2, r3
 801a63a:	d006      	beq.n	801a64a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	633b      	str	r3, [r7, #48]	; 0x30
 801a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a644:	2b00      	cmp	r3, #0
 801a646:	d1e6      	bne.n	801a616 <ip4_reass+0xb6>
 801a648:	e000      	b.n	801a64c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a64a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d109      	bne.n	801a666 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a652:	8c3b      	ldrh	r3, [r7, #32]
 801a654:	4619      	mov	r1, r3
 801a656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a658:	f7ff fdb0 	bl	801a1bc <ip_reass_enqueue_new_datagram>
 801a65c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a660:	2b00      	cmp	r3, #0
 801a662:	d11c      	bne.n	801a69e <ip4_reass+0x13e>
      goto nullreturn;
 801a664:	e109      	b.n	801a87a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a668:	88db      	ldrh	r3, [r3, #6]
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	4618      	mov	r0, r3
 801a66e:	f7f5 fa1b 	bl	800faa8 <lwip_htons>
 801a672:	4603      	mov	r3, r0
 801a674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d110      	bne.n	801a69e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a67e:	89db      	ldrh	r3, [r3, #14]
 801a680:	4618      	mov	r0, r3
 801a682:	f7f5 fa11 	bl	800faa8 <lwip_htons>
 801a686:	4603      	mov	r3, r0
 801a688:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d006      	beq.n	801a69e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a692:	3308      	adds	r3, #8
 801a694:	2214      	movs	r2, #20
 801a696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a698:	4618      	mov	r0, r3
 801a69a:	f000 fe79 	bl	801b390 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6a0:	88db      	ldrh	r3, [r3, #6]
 801a6a2:	b29b      	uxth	r3, r3
 801a6a4:	f003 0320 	and.w	r3, r3, #32
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	bf0c      	ite	eq
 801a6ac:	2301      	moveq	r3, #1
 801a6ae:	2300      	movne	r3, #0
 801a6b0:	b2db      	uxtb	r3, r3
 801a6b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a6b4:	69fb      	ldr	r3, [r7, #28]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d00e      	beq.n	801a6d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a6ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a6bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a6be:	4413      	add	r3, r2
 801a6c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a6c2:	8b7a      	ldrh	r2, [r7, #26]
 801a6c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	f0c0 80a0 	bcc.w	801a80c <ip4_reass+0x2ac>
 801a6cc:	8b7b      	ldrh	r3, [r7, #26]
 801a6ce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a6d2:	4293      	cmp	r3, r2
 801a6d4:	f200 809a 	bhi.w	801a80c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a6d8:	69fa      	ldr	r2, [r7, #28]
 801a6da:	6879      	ldr	r1, [r7, #4]
 801a6dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a6de:	f7ff fdd5 	bl	801a28c <ip_reass_chain_frag_into_datagram_and_validate>
 801a6e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a6e4:	697b      	ldr	r3, [r7, #20]
 801a6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a6ea:	f000 8091 	beq.w	801a810 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a6ee:	4b5b      	ldr	r3, [pc, #364]	; (801a85c <ip4_reass+0x2fc>)
 801a6f0:	881a      	ldrh	r2, [r3, #0]
 801a6f2:	8c3b      	ldrh	r3, [r7, #32]
 801a6f4:	4413      	add	r3, r2
 801a6f6:	b29a      	uxth	r2, r3
 801a6f8:	4b58      	ldr	r3, [pc, #352]	; (801a85c <ip4_reass+0x2fc>)
 801a6fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a6fc:	69fb      	ldr	r3, [r7, #28]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d00d      	beq.n	801a71e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a706:	4413      	add	r3, r2
 801a708:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a70c:	8a7a      	ldrh	r2, [r7, #18]
 801a70e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a712:	7f9b      	ldrb	r3, [r3, #30]
 801a714:	f043 0301 	orr.w	r3, r3, #1
 801a718:	b2da      	uxtb	r2, r3
 801a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a71c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a71e:	697b      	ldr	r3, [r7, #20]
 801a720:	2b01      	cmp	r3, #1
 801a722:	d171      	bne.n	801a808 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a726:	8b9b      	ldrh	r3, [r3, #28]
 801a728:	3314      	adds	r3, #20
 801a72a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a72e:	685b      	ldr	r3, [r3, #4]
 801a730:	685b      	ldr	r3, [r3, #4]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	685b      	ldr	r3, [r3, #4]
 801a73c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a740:	3308      	adds	r3, #8
 801a742:	2214      	movs	r2, #20
 801a744:	4619      	mov	r1, r3
 801a746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a748:	f000 fe22 	bl	801b390 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a74c:	8a3b      	ldrh	r3, [r7, #16]
 801a74e:	4618      	mov	r0, r3
 801a750:	f7f5 f9aa 	bl	800faa8 <lwip_htons>
 801a754:	4603      	mov	r3, r0
 801a756:	461a      	mov	r2, r3
 801a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75e:	2200      	movs	r2, #0
 801a760:	719a      	strb	r2, [r3, #6]
 801a762:	2200      	movs	r2, #0
 801a764:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a768:	2200      	movs	r2, #0
 801a76a:	729a      	strb	r2, [r3, #10]
 801a76c:	2200      	movs	r2, #0
 801a76e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a772:	685b      	ldr	r3, [r3, #4]
 801a774:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a776:	e00d      	b.n	801a794 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a77a:	685b      	ldr	r3, [r3, #4]
 801a77c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a77e:	2114      	movs	r1, #20
 801a780:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a782:	f7f6 fcc7 	bl	8011114 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a788:	6878      	ldr	r0, [r7, #4]
 801a78a:	f7f6 fe17 	bl	80113bc <pbuf_cat>
      r = iprh->next_pbuf;
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a796:	2b00      	cmp	r3, #0
 801a798:	d1ee      	bne.n	801a778 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a79a:	4b31      	ldr	r3, [pc, #196]	; (801a860 <ip4_reass+0x300>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7a0:	429a      	cmp	r2, r3
 801a7a2:	d102      	bne.n	801a7aa <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7a8:	e010      	b.n	801a7cc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a7aa:	4b2d      	ldr	r3, [pc, #180]	; (801a860 <ip4_reass+0x300>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7b0:	e007      	b.n	801a7c2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7b8:	429a      	cmp	r2, r3
 801a7ba:	d006      	beq.n	801a7ca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d1f4      	bne.n	801a7b2 <ip4_reass+0x252>
 801a7c8:	e000      	b.n	801a7cc <ip4_reass+0x26c>
          break;
 801a7ca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a7cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a7ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a7d0:	f7ff fd2e 	bl	801a230 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a7d4:	6878      	ldr	r0, [r7, #4]
 801a7d6:	f7f6 fdb1 	bl	801133c <pbuf_clen>
 801a7da:	4603      	mov	r3, r0
 801a7dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a7de:	4b1f      	ldr	r3, [pc, #124]	; (801a85c <ip4_reass+0x2fc>)
 801a7e0:	881b      	ldrh	r3, [r3, #0]
 801a7e2:	8c3a      	ldrh	r2, [r7, #32]
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	d906      	bls.n	801a7f6 <ip4_reass+0x296>
 801a7e8:	4b1e      	ldr	r3, [pc, #120]	; (801a864 <ip4_reass+0x304>)
 801a7ea:	f240 229b 	movw	r2, #667	; 0x29b
 801a7ee:	491e      	ldr	r1, [pc, #120]	; (801a868 <ip4_reass+0x308>)
 801a7f0:	481e      	ldr	r0, [pc, #120]	; (801a86c <ip4_reass+0x30c>)
 801a7f2:	f001 f87b 	bl	801b8ec <printf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a7f6:	4b19      	ldr	r3, [pc, #100]	; (801a85c <ip4_reass+0x2fc>)
 801a7f8:	881a      	ldrh	r2, [r3, #0]
 801a7fa:	8c3b      	ldrh	r3, [r7, #32]
 801a7fc:	1ad3      	subs	r3, r2, r3
 801a7fe:	b29a      	uxth	r2, r3
 801a800:	4b16      	ldr	r3, [pc, #88]	; (801a85c <ip4_reass+0x2fc>)
 801a802:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	e03c      	b.n	801a882 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a808:	2300      	movs	r3, #0
 801a80a:	e03a      	b.n	801a882 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801a80c:	bf00      	nop
 801a80e:	e000      	b.n	801a812 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a810:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a814:	2b00      	cmp	r3, #0
 801a816:	d106      	bne.n	801a826 <ip4_reass+0x2c6>
 801a818:	4b12      	ldr	r3, [pc, #72]	; (801a864 <ip4_reass+0x304>)
 801a81a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a81e:	4914      	ldr	r1, [pc, #80]	; (801a870 <ip4_reass+0x310>)
 801a820:	4812      	ldr	r0, [pc, #72]	; (801a86c <ip4_reass+0x30c>)
 801a822:	f001 f863 	bl	801b8ec <printf>
  if (ipr->p == NULL) {
 801a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a828:	685b      	ldr	r3, [r3, #4]
 801a82a:	2b00      	cmp	r3, #0
 801a82c:	d124      	bne.n	801a878 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a82e:	4b0c      	ldr	r3, [pc, #48]	; (801a860 <ip4_reass+0x300>)
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a834:	429a      	cmp	r2, r3
 801a836:	d006      	beq.n	801a846 <ip4_reass+0x2e6>
 801a838:	4b0a      	ldr	r3, [pc, #40]	; (801a864 <ip4_reass+0x304>)
 801a83a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a83e:	490d      	ldr	r1, [pc, #52]	; (801a874 <ip4_reass+0x314>)
 801a840:	480a      	ldr	r0, [pc, #40]	; (801a86c <ip4_reass+0x30c>)
 801a842:	f001 f853 	bl	801b8ec <printf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a846:	2100      	movs	r1, #0
 801a848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a84a:	f7ff fcf1 	bl	801a230 <ip_reass_dequeue_datagram>
 801a84e:	e014      	b.n	801a87a <ip4_reass+0x31a>
    goto nullreturn;
 801a850:	bf00      	nop
 801a852:	e012      	b.n	801a87a <ip4_reass+0x31a>
    goto nullreturn;
 801a854:	bf00      	nop
 801a856:	e010      	b.n	801a87a <ip4_reass+0x31a>
      goto nullreturn;
 801a858:	bf00      	nop
 801a85a:	e00e      	b.n	801a87a <ip4_reass+0x31a>
 801a85c:	20005044 	.word	0x20005044
 801a860:	20005040 	.word	0x20005040
 801a864:	08027d98 	.word	0x08027d98
 801a868:	08027f08 	.word	0x08027f08
 801a86c:	08027de0 	.word	0x08027de0
 801a870:	08027f24 	.word	0x08027f24
 801a874:	08027f30 	.word	0x08027f30
  }

nullreturn:
 801a878:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a87a:	6878      	ldr	r0, [r7, #4]
 801a87c:	f7f6 fcd0 	bl	8011220 <pbuf_free>
  return NULL;
 801a880:	2300      	movs	r3, #0
}
 801a882:	4618      	mov	r0, r3
 801a884:	3738      	adds	r7, #56	; 0x38
 801a886:	46bd      	mov	sp, r7
 801a888:	bd80      	pop	{r7, pc}
 801a88a:	bf00      	nop

0801a88c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a890:	2005      	movs	r0, #5
 801a892:	f7f5 fdf5 	bl	8010480 <memp_malloc>
 801a896:	4603      	mov	r3, r0
}
 801a898:	4618      	mov	r0, r3
 801a89a:	bd80      	pop	{r7, pc}

0801a89c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b082      	sub	sp, #8
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d106      	bne.n	801a8b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a8aa:	4b07      	ldr	r3, [pc, #28]	; (801a8c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a8ac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a8b0:	4906      	ldr	r1, [pc, #24]	; (801a8cc <ip_frag_free_pbuf_custom_ref+0x30>)
 801a8b2:	4807      	ldr	r0, [pc, #28]	; (801a8d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a8b4:	f001 f81a 	bl	801b8ec <printf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a8b8:	6879      	ldr	r1, [r7, #4]
 801a8ba:	2005      	movs	r0, #5
 801a8bc:	f7f5 fe32 	bl	8010524 <memp_free>
}
 801a8c0:	bf00      	nop
 801a8c2:	3708      	adds	r7, #8
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}
 801a8c8:	08027d98 	.word	0x08027d98
 801a8cc:	08027f50 	.word	0x08027f50
 801a8d0:	08027de0 	.word	0x08027de0

0801a8d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b084      	sub	sp, #16
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d106      	bne.n	801a8f4 <ipfrag_free_pbuf_custom+0x20>
 801a8e6:	4b11      	ldr	r3, [pc, #68]	; (801a92c <ipfrag_free_pbuf_custom+0x58>)
 801a8e8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a8ec:	4910      	ldr	r1, [pc, #64]	; (801a930 <ipfrag_free_pbuf_custom+0x5c>)
 801a8ee:	4811      	ldr	r0, [pc, #68]	; (801a934 <ipfrag_free_pbuf_custom+0x60>)
 801a8f0:	f000 fffc 	bl	801b8ec <printf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a8f4:	68fa      	ldr	r2, [r7, #12]
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d006      	beq.n	801a90a <ipfrag_free_pbuf_custom+0x36>
 801a8fc:	4b0b      	ldr	r3, [pc, #44]	; (801a92c <ipfrag_free_pbuf_custom+0x58>)
 801a8fe:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a902:	490d      	ldr	r1, [pc, #52]	; (801a938 <ipfrag_free_pbuf_custom+0x64>)
 801a904:	480b      	ldr	r0, [pc, #44]	; (801a934 <ipfrag_free_pbuf_custom+0x60>)
 801a906:	f000 fff1 	bl	801b8ec <printf>
  if (pcr->original != NULL) {
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	695b      	ldr	r3, [r3, #20]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d004      	beq.n	801a91c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	695b      	ldr	r3, [r3, #20]
 801a916:	4618      	mov	r0, r3
 801a918:	f7f6 fc82 	bl	8011220 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a91c:	68f8      	ldr	r0, [r7, #12]
 801a91e:	f7ff ffbd 	bl	801a89c <ip_frag_free_pbuf_custom_ref>
}
 801a922:	bf00      	nop
 801a924:	3710      	adds	r7, #16
 801a926:	46bd      	mov	sp, r7
 801a928:	bd80      	pop	{r7, pc}
 801a92a:	bf00      	nop
 801a92c:	08027d98 	.word	0x08027d98
 801a930:	08027f5c 	.word	0x08027f5c
 801a934:	08027de0 	.word	0x08027de0
 801a938:	08027f68 	.word	0x08027f68

0801a93c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b094      	sub	sp, #80	; 0x50
 801a940:	af02      	add	r7, sp, #8
 801a942:	60f8      	str	r0, [r7, #12]
 801a944:	60b9      	str	r1, [r7, #8]
 801a946:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a948:	2300      	movs	r3, #0
 801a94a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	8c1b      	ldrh	r3, [r3, #32]
 801a952:	3b14      	subs	r3, #20
 801a954:	2b00      	cmp	r3, #0
 801a956:	da00      	bge.n	801a95a <ip4_frag+0x1e>
 801a958:	3307      	adds	r3, #7
 801a95a:	10db      	asrs	r3, r3, #3
 801a95c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a95e:	2314      	movs	r3, #20
 801a960:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a96a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	f003 030f 	and.w	r3, r3, #15
 801a974:	b2db      	uxtb	r3, r3
 801a976:	009b      	lsls	r3, r3, #2
 801a978:	b2db      	uxtb	r3, r3
 801a97a:	2b14      	cmp	r3, #20
 801a97c:	d002      	beq.n	801a984 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a97e:	f06f 0305 	mvn.w	r3, #5
 801a982:	e110      	b.n	801aba6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a984:	68fb      	ldr	r3, [r7, #12]
 801a986:	895b      	ldrh	r3, [r3, #10]
 801a988:	2b13      	cmp	r3, #19
 801a98a:	d809      	bhi.n	801a9a0 <ip4_frag+0x64>
 801a98c:	4b88      	ldr	r3, [pc, #544]	; (801abb0 <ip4_frag+0x274>)
 801a98e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a992:	4988      	ldr	r1, [pc, #544]	; (801abb4 <ip4_frag+0x278>)
 801a994:	4888      	ldr	r0, [pc, #544]	; (801abb8 <ip4_frag+0x27c>)
 801a996:	f000 ffa9 	bl	801b8ec <printf>
 801a99a:	f06f 0305 	mvn.w	r3, #5
 801a99e:	e102      	b.n	801aba6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a2:	88db      	ldrh	r3, [r3, #6]
 801a9a4:	b29b      	uxth	r3, r3
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f7f5 f87e 	bl	800faa8 <lwip_htons>
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a9b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a9b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a9ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a9bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a9c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	891b      	ldrh	r3, [r3, #8]
 801a9c6:	3b14      	subs	r3, #20
 801a9c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a9cc:	e0e1      	b.n	801ab92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a9ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a9d0:	00db      	lsls	r3, r3, #3
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a9d8:	4293      	cmp	r3, r2
 801a9da:	bf28      	it	cs
 801a9dc:	4613      	movcs	r3, r2
 801a9de:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a9e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a9e4:	2114      	movs	r1, #20
 801a9e6:	200e      	movs	r0, #14
 801a9e8:	f7f6 f936 	bl	8010c58 <pbuf_alloc>
 801a9ec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	f000 80d5 	beq.w	801aba0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9f8:	895b      	ldrh	r3, [r3, #10]
 801a9fa:	2b13      	cmp	r3, #19
 801a9fc:	d806      	bhi.n	801aa0c <ip4_frag+0xd0>
 801a9fe:	4b6c      	ldr	r3, [pc, #432]	; (801abb0 <ip4_frag+0x274>)
 801aa00:	f44f 7249 	mov.w	r2, #804	; 0x324
 801aa04:	496d      	ldr	r1, [pc, #436]	; (801abbc <ip4_frag+0x280>)
 801aa06:	486c      	ldr	r0, [pc, #432]	; (801abb8 <ip4_frag+0x27c>)
 801aa08:	f000 ff70 	bl	801b8ec <printf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa0e:	685b      	ldr	r3, [r3, #4]
 801aa10:	2214      	movs	r2, #20
 801aa12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aa14:	4618      	mov	r0, r3
 801aa16:	f000 fcbb 	bl	801b390 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa1c:	685b      	ldr	r3, [r3, #4]
 801aa1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801aa20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aa22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801aa26:	e064      	b.n	801aaf2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	895a      	ldrh	r2, [r3, #10]
 801aa2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa2e:	1ad3      	subs	r3, r2, r3
 801aa30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801aa32:	68fb      	ldr	r3, [r7, #12]
 801aa34:	895b      	ldrh	r3, [r3, #10]
 801aa36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d906      	bls.n	801aa4a <ip4_frag+0x10e>
 801aa3c:	4b5c      	ldr	r3, [pc, #368]	; (801abb0 <ip4_frag+0x274>)
 801aa3e:	f240 322d 	movw	r2, #813	; 0x32d
 801aa42:	495f      	ldr	r1, [pc, #380]	; (801abc0 <ip4_frag+0x284>)
 801aa44:	485c      	ldr	r0, [pc, #368]	; (801abb8 <ip4_frag+0x27c>)
 801aa46:	f000 ff51 	bl	801b8ec <printf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801aa4a:	8bfa      	ldrh	r2, [r7, #30]
 801aa4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801aa50:	4293      	cmp	r3, r2
 801aa52:	bf28      	it	cs
 801aa54:	4613      	movcs	r3, r2
 801aa56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801aa5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d105      	bne.n	801aa6e <ip4_frag+0x132>
        poff = 0;
 801aa62:	2300      	movs	r3, #0
 801aa64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	60fb      	str	r3, [r7, #12]
        continue;
 801aa6c:	e041      	b.n	801aaf2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801aa6e:	f7ff ff0d 	bl	801a88c <ip_frag_alloc_pbuf_custom_ref>
 801aa72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801aa74:	69bb      	ldr	r3, [r7, #24]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d103      	bne.n	801aa82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801aa7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aa7c:	f7f6 fbd0 	bl	8011220 <pbuf_free>
        goto memerr;
 801aa80:	e08f      	b.n	801aba2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aa82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aa88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aa8a:	4413      	add	r3, r2
 801aa8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801aa90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801aa94:	9201      	str	r2, [sp, #4]
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	4603      	mov	r3, r0
 801aa9a:	2241      	movs	r2, #65	; 0x41
 801aa9c:	2000      	movs	r0, #0
 801aa9e:	f7f6 fa05 	bl	8010eac <pbuf_alloced_custom>
 801aaa2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801aaa4:	697b      	ldr	r3, [r7, #20]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d106      	bne.n	801aab8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801aaaa:	69b8      	ldr	r0, [r7, #24]
 801aaac:	f7ff fef6 	bl	801a89c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801aab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aab2:	f7f6 fbb5 	bl	8011220 <pbuf_free>
        goto memerr;
 801aab6:	e074      	b.n	801aba2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801aab8:	68f8      	ldr	r0, [r7, #12]
 801aaba:	f7f6 fc57 	bl	801136c <pbuf_ref>
      pcr->original = p;
 801aabe:	69bb      	ldr	r3, [r7, #24]
 801aac0:	68fa      	ldr	r2, [r7, #12]
 801aac2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801aac4:	69bb      	ldr	r3, [r7, #24]
 801aac6:	4a3f      	ldr	r2, [pc, #252]	; (801abc4 <ip4_frag+0x288>)
 801aac8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801aaca:	6979      	ldr	r1, [r7, #20]
 801aacc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aace:	f7f6 fc75 	bl	80113bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801aad2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801aad6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801aada:	1ad3      	subs	r3, r2, r3
 801aadc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801aae0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d004      	beq.n	801aaf2 <ip4_frag+0x1b6>
        poff = 0;
 801aae8:	2300      	movs	r3, #0
 801aaea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801aaf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d196      	bne.n	801aa28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801aafa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801aafc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ab00:	4413      	add	r3, r2
 801ab02:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	8c1b      	ldrh	r3, [r3, #32]
 801ab08:	f1a3 0213 	sub.w	r2, r3, #19
 801ab0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ab10:	429a      	cmp	r2, r3
 801ab12:	bfcc      	ite	gt
 801ab14:	2301      	movgt	r3, #1
 801ab16:	2300      	movle	r3, #0
 801ab18:	b2db      	uxtb	r3, r3
 801ab1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ab1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ab20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ab24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ab26:	6a3b      	ldr	r3, [r7, #32]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d002      	beq.n	801ab32 <ip4_frag+0x1f6>
 801ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d003      	beq.n	801ab3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ab32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ab38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ab3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f7f4 ffb3 	bl	800faa8 <lwip_htons>
 801ab42:	4603      	mov	r3, r0
 801ab44:	461a      	mov	r2, r3
 801ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ab4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ab4c:	3314      	adds	r3, #20
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	4618      	mov	r0, r3
 801ab52:	f7f4 ffa9 	bl	800faa8 <lwip_htons>
 801ab56:	4603      	mov	r3, r0
 801ab58:	461a      	mov	r2, r3
 801ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab60:	2200      	movs	r2, #0
 801ab62:	729a      	strb	r2, [r3, #10]
 801ab64:	2200      	movs	r2, #0
 801ab66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	695b      	ldr	r3, [r3, #20]
 801ab6c:	687a      	ldr	r2, [r7, #4]
 801ab6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ab70:	68b8      	ldr	r0, [r7, #8]
 801ab72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ab74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab76:	f7f6 fb53 	bl	8011220 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ab7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ab7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ab80:	1ad3      	subs	r3, r2, r3
 801ab82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ab86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ab8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ab8c:	4413      	add	r3, r2
 801ab8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ab92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	f47f af19 	bne.w	801a9ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	e002      	b.n	801aba6 <ip4_frag+0x26a>
      goto memerr;
 801aba0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801aba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	3748      	adds	r7, #72	; 0x48
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd80      	pop	{r7, pc}
 801abae:	bf00      	nop
 801abb0:	08027d98 	.word	0x08027d98
 801abb4:	08027f74 	.word	0x08027f74
 801abb8:	08027de0 	.word	0x08027de0
 801abbc:	08027f90 	.word	0x08027f90
 801abc0:	08027fb0 	.word	0x08027fb0
 801abc4:	0801a8d5 	.word	0x0801a8d5

0801abc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b086      	sub	sp, #24
 801abcc:	af00      	add	r7, sp, #0
 801abce:	6078      	str	r0, [r7, #4]
 801abd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801abd2:	230e      	movs	r3, #14
 801abd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	895b      	ldrh	r3, [r3, #10]
 801abda:	2b0e      	cmp	r3, #14
 801abdc:	d96e      	bls.n	801acbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	7bdb      	ldrb	r3, [r3, #15]
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d106      	bne.n	801abf4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801abe6:	683b      	ldr	r3, [r7, #0]
 801abe8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801abec:	3301      	adds	r3, #1
 801abee:	b2da      	uxtb	r2, r3
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	685b      	ldr	r3, [r3, #4]
 801abf8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801abfa:	693b      	ldr	r3, [r7, #16]
 801abfc:	7b1a      	ldrb	r2, [r3, #12]
 801abfe:	7b5b      	ldrb	r3, [r3, #13]
 801ac00:	021b      	lsls	r3, r3, #8
 801ac02:	4313      	orrs	r3, r2
 801ac04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ac06:	693b      	ldr	r3, [r7, #16]
 801ac08:	781b      	ldrb	r3, [r3, #0]
 801ac0a:	f003 0301 	and.w	r3, r3, #1
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d023      	beq.n	801ac5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	2b01      	cmp	r3, #1
 801ac18:	d10f      	bne.n	801ac3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ac1a:	693b      	ldr	r3, [r7, #16]
 801ac1c:	785b      	ldrb	r3, [r3, #1]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d11b      	bne.n	801ac5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ac22:	693b      	ldr	r3, [r7, #16]
 801ac24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ac26:	2b5e      	cmp	r3, #94	; 0x5e
 801ac28:	d117      	bne.n	801ac5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	7b5b      	ldrb	r3, [r3, #13]
 801ac2e:	f043 0310 	orr.w	r3, r3, #16
 801ac32:	b2da      	uxtb	r2, r3
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	735a      	strb	r2, [r3, #13]
 801ac38:	e00f      	b.n	801ac5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ac3a:	693b      	ldr	r3, [r7, #16]
 801ac3c:	2206      	movs	r2, #6
 801ac3e:	4928      	ldr	r1, [pc, #160]	; (801ace0 <ethernet_input+0x118>)
 801ac40:	4618      	mov	r0, r3
 801ac42:	f000 fb97 	bl	801b374 <memcmp>
 801ac46:	4603      	mov	r3, r0
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d106      	bne.n	801ac5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	7b5b      	ldrb	r3, [r3, #13]
 801ac50:	f043 0308 	orr.w	r3, r3, #8
 801ac54:	b2da      	uxtb	r2, r3
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ac5a:	89fb      	ldrh	r3, [r7, #14]
 801ac5c:	2b08      	cmp	r3, #8
 801ac5e:	d003      	beq.n	801ac68 <ethernet_input+0xa0>
 801ac60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801ac64:	d014      	beq.n	801ac90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ac66:	e032      	b.n	801acce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801ac6e:	f003 0308 	and.w	r3, r3, #8
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d024      	beq.n	801acc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ac76:	8afb      	ldrh	r3, [r7, #22]
 801ac78:	4619      	mov	r1, r3
 801ac7a:	6878      	ldr	r0, [r7, #4]
 801ac7c:	f7f6 fa4a 	bl	8011114 <pbuf_remove_header>
 801ac80:	4603      	mov	r3, r0
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d11e      	bne.n	801acc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ac86:	6839      	ldr	r1, [r7, #0]
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	f7fe fdfd 	bl	8019888 <ip4_input>
      break;
 801ac8e:	e013      	b.n	801acb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801ac96:	f003 0308 	and.w	r3, r3, #8
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d014      	beq.n	801acc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ac9e:	8afb      	ldrh	r3, [r7, #22]
 801aca0:	4619      	mov	r1, r3
 801aca2:	6878      	ldr	r0, [r7, #4]
 801aca4:	f7f6 fa36 	bl	8011114 <pbuf_remove_header>
 801aca8:	4603      	mov	r3, r0
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d10e      	bne.n	801accc <ethernet_input+0x104>
        etharp_input(p, netif);
 801acae:	6839      	ldr	r1, [r7, #0]
 801acb0:	6878      	ldr	r0, [r7, #4]
 801acb2:	f7fd ff9d 	bl	8018bf0 <etharp_input>
      break;
 801acb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801acb8:	2300      	movs	r3, #0
 801acba:	e00c      	b.n	801acd6 <ethernet_input+0x10e>
    goto free_and_return;
 801acbc:	bf00      	nop
 801acbe:	e006      	b.n	801acce <ethernet_input+0x106>
        goto free_and_return;
 801acc0:	bf00      	nop
 801acc2:	e004      	b.n	801acce <ethernet_input+0x106>
        goto free_and_return;
 801acc4:	bf00      	nop
 801acc6:	e002      	b.n	801acce <ethernet_input+0x106>
        goto free_and_return;
 801acc8:	bf00      	nop
 801acca:	e000      	b.n	801acce <ethernet_input+0x106>
        goto free_and_return;
 801accc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f7f6 faa6 	bl	8011220 <pbuf_free>
  return ERR_OK;
 801acd4:	2300      	movs	r3, #0
}
 801acd6:	4618      	mov	r0, r3
 801acd8:	3718      	adds	r7, #24
 801acda:	46bd      	mov	sp, r7
 801acdc:	bd80      	pop	{r7, pc}
 801acde:	bf00      	nop
 801ace0:	08029f18 	.word	0x08029f18

0801ace4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b086      	sub	sp, #24
 801ace8:	af00      	add	r7, sp, #0
 801acea:	60f8      	str	r0, [r7, #12]
 801acec:	60b9      	str	r1, [r7, #8]
 801acee:	607a      	str	r2, [r7, #4]
 801acf0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801acf2:	8c3b      	ldrh	r3, [r7, #32]
 801acf4:	4618      	mov	r0, r3
 801acf6:	f7f4 fed7 	bl	800faa8 <lwip_htons>
 801acfa:	4603      	mov	r3, r0
 801acfc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801acfe:	210e      	movs	r1, #14
 801ad00:	68b8      	ldr	r0, [r7, #8]
 801ad02:	f7f6 f9f7 	bl	80110f4 <pbuf_add_header>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d125      	bne.n	801ad58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ad0c:	68bb      	ldr	r3, [r7, #8]
 801ad0e:	685b      	ldr	r3, [r3, #4]
 801ad10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	8afa      	ldrh	r2, [r7, #22]
 801ad16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ad18:	693b      	ldr	r3, [r7, #16]
 801ad1a:	2206      	movs	r2, #6
 801ad1c:	6839      	ldr	r1, [r7, #0]
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f000 fb36 	bl	801b390 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ad24:	693b      	ldr	r3, [r7, #16]
 801ad26:	3306      	adds	r3, #6
 801ad28:	2206      	movs	r2, #6
 801ad2a:	6879      	ldr	r1, [r7, #4]
 801ad2c:	4618      	mov	r0, r3
 801ad2e:	f000 fb2f 	bl	801b390 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad38:	2b06      	cmp	r3, #6
 801ad3a:	d006      	beq.n	801ad4a <ethernet_output+0x66>
 801ad3c:	4b0a      	ldr	r3, [pc, #40]	; (801ad68 <ethernet_output+0x84>)
 801ad3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ad42:	490a      	ldr	r1, [pc, #40]	; (801ad6c <ethernet_output+0x88>)
 801ad44:	480a      	ldr	r0, [pc, #40]	; (801ad70 <ethernet_output+0x8c>)
 801ad46:	f000 fdd1 	bl	801b8ec <printf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	699b      	ldr	r3, [r3, #24]
 801ad4e:	68b9      	ldr	r1, [r7, #8]
 801ad50:	68f8      	ldr	r0, [r7, #12]
 801ad52:	4798      	blx	r3
 801ad54:	4603      	mov	r3, r0
 801ad56:	e002      	b.n	801ad5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ad58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ad5a:	f06f 0301 	mvn.w	r3, #1
}
 801ad5e:	4618      	mov	r0, r3
 801ad60:	3718      	adds	r7, #24
 801ad62:	46bd      	mov	sp, r7
 801ad64:	bd80      	pop	{r7, pc}
 801ad66:	bf00      	nop
 801ad68:	08027fc0 	.word	0x08027fc0
 801ad6c:	08027ff8 	.word	0x08027ff8
 801ad70:	0802802c 	.word	0x0802802c

0801ad74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b086      	sub	sp, #24
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
 801ad7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	60bb      	str	r3, [r7, #8]
 801ad82:	2304      	movs	r3, #4
 801ad84:	60fb      	str	r3, [r7, #12]
 801ad86:	2300      	movs	r3, #0
 801ad88:	613b      	str	r3, [r7, #16]
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ad8e:	f107 0308 	add.w	r3, r7, #8
 801ad92:	2100      	movs	r1, #0
 801ad94:	4618      	mov	r0, r3
 801ad96:	f7ef f8a4 	bl	8009ee2 <osMessageCreate>
 801ad9a:	4602      	mov	r2, r0
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d102      	bne.n	801adae <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ada8:	f04f 33ff 	mov.w	r3, #4294967295
 801adac:	e000      	b.n	801adb0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801adae:	2300      	movs	r3, #0
}
 801adb0:	4618      	mov	r0, r3
 801adb2:	3718      	adds	r7, #24
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}

0801adb8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b082      	sub	sp, #8
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	4618      	mov	r0, r3
 801adc6:	f7ef f969 	bl	800a09c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	4618      	mov	r0, r3
 801add0:	f7ef f97a 	bl	800a0c8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801add4:	bf00      	nop
 801add6:	3708      	adds	r7, #8
 801add8:	46bd      	mov	sp, r7
 801adda:	bd80      	pop	{r7, pc}

0801addc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b084      	sub	sp, #16
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	6078      	str	r0, [r7, #4]
 801ade4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	6839      	ldr	r1, [r7, #0]
 801adec:	2200      	movs	r2, #0
 801adee:	4618      	mov	r0, r3
 801adf0:	f7ef f8a0 	bl	8009f34 <osMessagePut>
 801adf4:	4603      	mov	r3, r0
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d102      	bne.n	801ae00 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801adfa:	2300      	movs	r3, #0
 801adfc:	73fb      	strb	r3, [r7, #15]
 801adfe:	e001      	b.n	801ae04 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ae00:	23ff      	movs	r3, #255	; 0xff
 801ae02:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ae04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ae08:	4618      	mov	r0, r3
 801ae0a:	3710      	adds	r7, #16
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}

0801ae10 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b08c      	sub	sp, #48	; 0x30
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	61f8      	str	r0, [r7, #28]
 801ae18:	61b9      	str	r1, [r7, #24]
 801ae1a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ae1c:	f7ee fea0 	bl	8009b60 <osKernelSysTick>
 801ae20:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ae22:	697b      	ldr	r3, [r7, #20]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d017      	beq.n	801ae58 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	6819      	ldr	r1, [r3, #0]
 801ae2c:	f107 0320 	add.w	r3, r7, #32
 801ae30:	697a      	ldr	r2, [r7, #20]
 801ae32:	4618      	mov	r0, r3
 801ae34:	f7ef f8be 	bl	8009fb4 <osMessageGet>

    if(event.status == osEventMessage)
 801ae38:	6a3b      	ldr	r3, [r7, #32]
 801ae3a:	2b10      	cmp	r3, #16
 801ae3c:	d109      	bne.n	801ae52 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae40:	461a      	mov	r2, r3
 801ae42:	69bb      	ldr	r3, [r7, #24]
 801ae44:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ae46:	f7ee fe8b 	bl	8009b60 <osKernelSysTick>
 801ae4a:	4602      	mov	r2, r0
 801ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae4e:	1ad3      	subs	r3, r2, r3
 801ae50:	e019      	b.n	801ae86 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ae52:	f04f 33ff 	mov.w	r3, #4294967295
 801ae56:	e016      	b.n	801ae86 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ae58:	69fb      	ldr	r3, [r7, #28]
 801ae5a:	6819      	ldr	r1, [r3, #0]
 801ae5c:	463b      	mov	r3, r7
 801ae5e:	f04f 32ff 	mov.w	r2, #4294967295
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7ef f8a6 	bl	8009fb4 <osMessageGet>
 801ae68:	f107 0320 	add.w	r3, r7, #32
 801ae6c:	463a      	mov	r2, r7
 801ae6e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ae70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae76:	461a      	mov	r2, r3
 801ae78:	69bb      	ldr	r3, [r7, #24]
 801ae7a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ae7c:	f7ee fe70 	bl	8009b60 <osKernelSysTick>
 801ae80:	4602      	mov	r2, r0
 801ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae84:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ae86:	4618      	mov	r0, r3
 801ae88:	3730      	adds	r7, #48	; 0x30
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	bd80      	pop	{r7, pc}

0801ae8e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ae8e:	b580      	push	{r7, lr}
 801ae90:	b086      	sub	sp, #24
 801ae92:	af00      	add	r7, sp, #0
 801ae94:	6078      	str	r0, [r7, #4]
 801ae96:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	6819      	ldr	r1, [r3, #0]
 801ae9c:	f107 030c 	add.w	r3, r7, #12
 801aea0:	2200      	movs	r2, #0
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7ef f886 	bl	8009fb4 <osMessageGet>

  if(event.status == osEventMessage)
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	2b10      	cmp	r3, #16
 801aeac:	d105      	bne.n	801aeba <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801aeae:	693b      	ldr	r3, [r7, #16]
 801aeb0:	461a      	mov	r2, r3
 801aeb2:	683b      	ldr	r3, [r7, #0]
 801aeb4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	e001      	b.n	801aebe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801aeba:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801aebe:	4618      	mov	r0, r3
 801aec0:	3718      	adds	r7, #24
 801aec2:	46bd      	mov	sp, r7
 801aec4:	bd80      	pop	{r7, pc}

0801aec6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801aec6:	b480      	push	{r7}
 801aec8:	b083      	sub	sp, #12
 801aeca:	af00      	add	r7, sp, #0
 801aecc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d101      	bne.n	801aeda <sys_mbox_valid+0x14>
    return 0;
 801aed6:	2300      	movs	r3, #0
 801aed8:	e000      	b.n	801aedc <sys_mbox_valid+0x16>
  else
    return 1;
 801aeda:	2301      	movs	r3, #1
}
 801aedc:	4618      	mov	r0, r3
 801aede:	370c      	adds	r7, #12
 801aee0:	46bd      	mov	sp, r7
 801aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee6:	4770      	bx	lr

0801aee8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801aee8:	b480      	push	{r7}
 801aeea:	b083      	sub	sp, #12
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	2200      	movs	r2, #0
 801aef4:	601a      	str	r2, [r3, #0]
}
 801aef6:	bf00      	nop
 801aef8:	370c      	adds	r7, #12
 801aefa:	46bd      	mov	sp, r7
 801aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af00:	4770      	bx	lr

0801af02 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801af02:	b580      	push	{r7, lr}
 801af04:	b084      	sub	sp, #16
 801af06:	af00      	add	r7, sp, #0
 801af08:	6078      	str	r0, [r7, #4]
 801af0a:	460b      	mov	r3, r1
 801af0c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801af0e:	2300      	movs	r3, #0
 801af10:	60bb      	str	r3, [r7, #8]
 801af12:	2300      	movs	r3, #0
 801af14:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801af16:	f107 0308 	add.w	r3, r7, #8
 801af1a:	2101      	movs	r1, #1
 801af1c:	4618      	mov	r0, r3
 801af1e:	f7ee ff17 	bl	8009d50 <osSemaphoreCreate>
 801af22:	4602      	mov	r2, r0
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d102      	bne.n	801af36 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801af30:	f04f 33ff 	mov.w	r3, #4294967295
 801af34:	e009      	b.n	801af4a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801af36:	78fb      	ldrb	r3, [r7, #3]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d105      	bne.n	801af48 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	2100      	movs	r1, #0
 801af42:	4618      	mov	r0, r3
 801af44:	f7ee ff36 	bl	8009db4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	3710      	adds	r7, #16
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd80      	pop	{r7, pc}

0801af52 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801af52:	b580      	push	{r7, lr}
 801af54:	b084      	sub	sp, #16
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
 801af5a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801af5c:	f7ee fe00 	bl	8009b60 <osKernelSysTick>
 801af60:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801af62:	683b      	ldr	r3, [r7, #0]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d011      	beq.n	801af8c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	6839      	ldr	r1, [r7, #0]
 801af6e:	4618      	mov	r0, r3
 801af70:	f7ee ff20 	bl	8009db4 <osSemaphoreWait>
 801af74:	4603      	mov	r3, r0
 801af76:	2b00      	cmp	r3, #0
 801af78:	d105      	bne.n	801af86 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801af7a:	f7ee fdf1 	bl	8009b60 <osKernelSysTick>
 801af7e:	4602      	mov	r2, r0
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	1ad3      	subs	r3, r2, r3
 801af84:	e012      	b.n	801afac <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801af86:	f04f 33ff 	mov.w	r3, #4294967295
 801af8a:	e00f      	b.n	801afac <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801af8c:	bf00      	nop
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	f04f 31ff 	mov.w	r1, #4294967295
 801af96:	4618      	mov	r0, r3
 801af98:	f7ee ff0c 	bl	8009db4 <osSemaphoreWait>
 801af9c:	4603      	mov	r3, r0
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d1f5      	bne.n	801af8e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801afa2:	f7ee fddd 	bl	8009b60 <osKernelSysTick>
 801afa6:	4602      	mov	r2, r0
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801afac:	4618      	mov	r0, r3
 801afae:	3710      	adds	r7, #16
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd80      	pop	{r7, pc}

0801afb4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b082      	sub	sp, #8
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7ee ff45 	bl	8009e50 <osSemaphoreRelease>
}
 801afc6:	bf00      	nop
 801afc8:	3708      	adds	r7, #8
 801afca:	46bd      	mov	sp, r7
 801afcc:	bd80      	pop	{r7, pc}

0801afce <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801afce:	b580      	push	{r7, lr}
 801afd0:	b082      	sub	sp, #8
 801afd2:	af00      	add	r7, sp, #0
 801afd4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	4618      	mov	r0, r3
 801afdc:	f7ee ff6e 	bl	8009ebc <osSemaphoreDelete>
}
 801afe0:	bf00      	nop
 801afe2:	3708      	adds	r7, #8
 801afe4:	46bd      	mov	sp, r7
 801afe6:	bd80      	pop	{r7, pc}

0801afe8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801afe8:	b480      	push	{r7}
 801afea:	b083      	sub	sp, #12
 801afec:	af00      	add	r7, sp, #0
 801afee:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d101      	bne.n	801affc <sys_sem_valid+0x14>
    return 0;
 801aff8:	2300      	movs	r3, #0
 801affa:	e000      	b.n	801affe <sys_sem_valid+0x16>
  else
    return 1;
 801affc:	2301      	movs	r3, #1
}
 801affe:	4618      	mov	r0, r3
 801b000:	370c      	adds	r7, #12
 801b002:	46bd      	mov	sp, r7
 801b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b008:	4770      	bx	lr

0801b00a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b00a:	b480      	push	{r7}
 801b00c:	b083      	sub	sp, #12
 801b00e:	af00      	add	r7, sp, #0
 801b010:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	2200      	movs	r2, #0
 801b016:	601a      	str	r2, [r3, #0]
}
 801b018:	bf00      	nop
 801b01a:	370c      	adds	r7, #12
 801b01c:	46bd      	mov	sp, r7
 801b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b022:	4770      	bx	lr

0801b024 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b024:	b580      	push	{r7, lr}
 801b026:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b028:	4803      	ldr	r0, [pc, #12]	; (801b038 <sys_init+0x14>)
 801b02a:	f7ee fdf5 	bl	8009c18 <osMutexCreate>
 801b02e:	4603      	mov	r3, r0
 801b030:	4a02      	ldr	r2, [pc, #8]	; (801b03c <sys_init+0x18>)
 801b032:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b034:	bf00      	nop
 801b036:	bd80      	pop	{r7, pc}
 801b038:	08029f28 	.word	0x08029f28
 801b03c:	2000bdf0 	.word	0x2000bdf0

0801b040 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b040:	b580      	push	{r7, lr}
 801b042:	b084      	sub	sp, #16
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b048:	2300      	movs	r3, #0
 801b04a:	60bb      	str	r3, [r7, #8]
 801b04c:	2300      	movs	r3, #0
 801b04e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b050:	f107 0308 	add.w	r3, r7, #8
 801b054:	4618      	mov	r0, r3
 801b056:	f7ee fddf 	bl	8009c18 <osMutexCreate>
 801b05a:	4602      	mov	r2, r0
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d102      	bne.n	801b06e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b068:	f04f 33ff 	mov.w	r3, #4294967295
 801b06c:	e000      	b.n	801b070 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b06e:	2300      	movs	r3, #0
}
 801b070:	4618      	mov	r0, r3
 801b072:	3710      	adds	r7, #16
 801b074:	46bd      	mov	sp, r7
 801b076:	bd80      	pop	{r7, pc}

0801b078 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	f04f 31ff 	mov.w	r1, #4294967295
 801b088:	4618      	mov	r0, r3
 801b08a:	f7ee fddd 	bl	8009c48 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b08e:	bf00      	nop
 801b090:	3708      	adds	r7, #8
 801b092:	46bd      	mov	sp, r7
 801b094:	bd80      	pop	{r7, pc}

0801b096 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b096:	b580      	push	{r7, lr}
 801b098:	b082      	sub	sp, #8
 801b09a:	af00      	add	r7, sp, #0
 801b09c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	f7ee fe1e 	bl	8009ce4 <osMutexRelease>
}
 801b0a8:	bf00      	nop
 801b0aa:	3708      	adds	r7, #8
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bd80      	pop	{r7, pc}

0801b0b0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b08c      	sub	sp, #48	; 0x30
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	60f8      	str	r0, [r7, #12]
 801b0b8:	60b9      	str	r1, [r7, #8]
 801b0ba:	607a      	str	r2, [r7, #4]
 801b0bc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b0be:	f107 0314 	add.w	r3, r7, #20
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	601a      	str	r2, [r3, #0]
 801b0c6:	605a      	str	r2, [r3, #4]
 801b0c8:	609a      	str	r2, [r3, #8]
 801b0ca:	60da      	str	r2, [r3, #12]
 801b0cc:	611a      	str	r2, [r3, #16]
 801b0ce:	615a      	str	r2, [r3, #20]
 801b0d0:	619a      	str	r2, [r3, #24]
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	617b      	str	r3, [r7, #20]
 801b0d6:	68bb      	ldr	r3, [r7, #8]
 801b0d8:	61bb      	str	r3, [r7, #24]
 801b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b0dc:	b21b      	sxth	r3, r3
 801b0de:	83bb      	strh	r3, [r7, #28]
 801b0e0:	683b      	ldr	r3, [r7, #0]
 801b0e2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b0e4:	f107 0314 	add.w	r3, r7, #20
 801b0e8:	6879      	ldr	r1, [r7, #4]
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f7ee fd48 	bl	8009b80 <osThreadCreate>
 801b0f0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	3730      	adds	r7, #48	; 0x30
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}
	...

0801b0fc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b0fc:	b580      	push	{r7, lr}
 801b0fe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b100:	4b04      	ldr	r3, [pc, #16]	; (801b114 <sys_arch_protect+0x18>)
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	f04f 31ff 	mov.w	r1, #4294967295
 801b108:	4618      	mov	r0, r3
 801b10a:	f7ee fd9d 	bl	8009c48 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b10e:	2301      	movs	r3, #1
}
 801b110:	4618      	mov	r0, r3
 801b112:	bd80      	pop	{r7, pc}
 801b114:	2000bdf0 	.word	0x2000bdf0

0801b118 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b118:	b580      	push	{r7, lr}
 801b11a:	b082      	sub	sp, #8
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b120:	4b04      	ldr	r3, [pc, #16]	; (801b134 <sys_arch_unprotect+0x1c>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	4618      	mov	r0, r3
 801b126:	f7ee fddd 	bl	8009ce4 <osMutexRelease>
}
 801b12a:	bf00      	nop
 801b12c:	3708      	adds	r7, #8
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd80      	pop	{r7, pc}
 801b132:	bf00      	nop
 801b134:	2000bdf0 	.word	0x2000bdf0

0801b138 <atoi>:
 801b138:	220a      	movs	r2, #10
 801b13a:	2100      	movs	r1, #0
 801b13c:	f000 bd12 	b.w	801bb64 <strtol>

0801b140 <__libc_init_array>:
 801b140:	b570      	push	{r4, r5, r6, lr}
 801b142:	4d0d      	ldr	r5, [pc, #52]	; (801b178 <__libc_init_array+0x38>)
 801b144:	4c0d      	ldr	r4, [pc, #52]	; (801b17c <__libc_init_array+0x3c>)
 801b146:	1b64      	subs	r4, r4, r5
 801b148:	10a4      	asrs	r4, r4, #2
 801b14a:	2600      	movs	r6, #0
 801b14c:	42a6      	cmp	r6, r4
 801b14e:	d109      	bne.n	801b164 <__libc_init_array+0x24>
 801b150:	4d0b      	ldr	r5, [pc, #44]	; (801b180 <__libc_init_array+0x40>)
 801b152:	4c0c      	ldr	r4, [pc, #48]	; (801b184 <__libc_init_array+0x44>)
 801b154:	f009 fa0e 	bl	8024574 <_init>
 801b158:	1b64      	subs	r4, r4, r5
 801b15a:	10a4      	asrs	r4, r4, #2
 801b15c:	2600      	movs	r6, #0
 801b15e:	42a6      	cmp	r6, r4
 801b160:	d105      	bne.n	801b16e <__libc_init_array+0x2e>
 801b162:	bd70      	pop	{r4, r5, r6, pc}
 801b164:	f855 3b04 	ldr.w	r3, [r5], #4
 801b168:	4798      	blx	r3
 801b16a:	3601      	adds	r6, #1
 801b16c:	e7ee      	b.n	801b14c <__libc_init_array+0xc>
 801b16e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b172:	4798      	blx	r3
 801b174:	3601      	adds	r6, #1
 801b176:	e7f2      	b.n	801b15e <__libc_init_array+0x1e>
 801b178:	0802a458 	.word	0x0802a458
 801b17c:	0802a458 	.word	0x0802a458
 801b180:	0802a458 	.word	0x0802a458
 801b184:	0802a460 	.word	0x0802a460

0801b188 <localtime_r>:
 801b188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b18c:	4607      	mov	r7, r0
 801b18e:	9101      	str	r1, [sp, #4]
 801b190:	f004 fd10 	bl	801fbb4 <__gettzinfo>
 801b194:	9901      	ldr	r1, [sp, #4]
 801b196:	4680      	mov	r8, r0
 801b198:	4638      	mov	r0, r7
 801b19a:	f004 fd0f 	bl	801fbbc <gmtime_r>
 801b19e:	6943      	ldr	r3, [r0, #20]
 801b1a0:	079a      	lsls	r2, r3, #30
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801b1a8:	d105      	bne.n	801b1b6 <localtime_r+0x2e>
 801b1aa:	2264      	movs	r2, #100	; 0x64
 801b1ac:	fb96 f3f2 	sdiv	r3, r6, r2
 801b1b0:	fb02 6313 	mls	r3, r2, r3, r6
 801b1b4:	bb7b      	cbnz	r3, 801b216 <localtime_r+0x8e>
 801b1b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801b1ba:	fb96 f5f3 	sdiv	r5, r6, r3
 801b1be:	fb03 6515 	mls	r5, r3, r5, r6
 801b1c2:	fab5 f585 	clz	r5, r5
 801b1c6:	096d      	lsrs	r5, r5, #5
 801b1c8:	4b68      	ldr	r3, [pc, #416]	; (801b36c <localtime_r+0x1e4>)
 801b1ca:	2230      	movs	r2, #48	; 0x30
 801b1cc:	fb02 3505 	mla	r5, r2, r5, r3
 801b1d0:	f001 ff5a 	bl	801d088 <__tz_lock>
 801b1d4:	f001 ff64 	bl	801d0a0 <_tzset_unlocked>
 801b1d8:	4b65      	ldr	r3, [pc, #404]	; (801b370 <localtime_r+0x1e8>)
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	b353      	cbz	r3, 801b234 <localtime_r+0xac>
 801b1de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b1e2:	42b3      	cmp	r3, r6
 801b1e4:	d119      	bne.n	801b21a <localtime_r+0x92>
 801b1e6:	f8d8 1000 	ldr.w	r1, [r8]
 801b1ea:	e9d7 6700 	ldrd	r6, r7, [r7]
 801b1ee:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801b1f2:	b9d1      	cbnz	r1, 801b22a <localtime_r+0xa2>
 801b1f4:	4296      	cmp	r6, r2
 801b1f6:	eb77 0303 	sbcs.w	r3, r7, r3
 801b1fa:	da23      	bge.n	801b244 <localtime_r+0xbc>
 801b1fc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b200:	4296      	cmp	r6, r2
 801b202:	eb77 0303 	sbcs.w	r3, r7, r3
 801b206:	bfb4      	ite	lt
 801b208:	2301      	movlt	r3, #1
 801b20a:	2300      	movge	r3, #0
 801b20c:	6223      	str	r3, [r4, #32]
 801b20e:	db1b      	blt.n	801b248 <localtime_r+0xc0>
 801b210:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801b214:	e01a      	b.n	801b24c <localtime_r+0xc4>
 801b216:	2501      	movs	r5, #1
 801b218:	e7d6      	b.n	801b1c8 <localtime_r+0x40>
 801b21a:	4630      	mov	r0, r6
 801b21c:	f001 fe8c 	bl	801cf38 <__tzcalc_limits>
 801b220:	2800      	cmp	r0, #0
 801b222:	d1e0      	bne.n	801b1e6 <localtime_r+0x5e>
 801b224:	f04f 33ff 	mov.w	r3, #4294967295
 801b228:	e004      	b.n	801b234 <localtime_r+0xac>
 801b22a:	4296      	cmp	r6, r2
 801b22c:	eb77 0303 	sbcs.w	r3, r7, r3
 801b230:	da02      	bge.n	801b238 <localtime_r+0xb0>
 801b232:	2300      	movs	r3, #0
 801b234:	6223      	str	r3, [r4, #32]
 801b236:	e7eb      	b.n	801b210 <localtime_r+0x88>
 801b238:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801b23c:	4296      	cmp	r6, r2
 801b23e:	eb77 0303 	sbcs.w	r3, r7, r3
 801b242:	daf6      	bge.n	801b232 <localtime_r+0xaa>
 801b244:	2301      	movs	r3, #1
 801b246:	6223      	str	r3, [r4, #32]
 801b248:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801b24c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801b250:	203c      	movs	r0, #60	; 0x3c
 801b252:	fb91 f6f3 	sdiv	r6, r1, r3
 801b256:	fb03 1316 	mls	r3, r3, r6, r1
 801b25a:	6861      	ldr	r1, [r4, #4]
 801b25c:	fb93 f2f0 	sdiv	r2, r3, r0
 801b260:	fb00 3012 	mls	r0, r0, r2, r3
 801b264:	6823      	ldr	r3, [r4, #0]
 801b266:	1a89      	subs	r1, r1, r2
 801b268:	68a2      	ldr	r2, [r4, #8]
 801b26a:	6061      	str	r1, [r4, #4]
 801b26c:	1a1b      	subs	r3, r3, r0
 801b26e:	1b92      	subs	r2, r2, r6
 801b270:	2b3b      	cmp	r3, #59	; 0x3b
 801b272:	6023      	str	r3, [r4, #0]
 801b274:	60a2      	str	r2, [r4, #8]
 801b276:	dd35      	ble.n	801b2e4 <localtime_r+0x15c>
 801b278:	3101      	adds	r1, #1
 801b27a:	6061      	str	r1, [r4, #4]
 801b27c:	3b3c      	subs	r3, #60	; 0x3c
 801b27e:	6023      	str	r3, [r4, #0]
 801b280:	6863      	ldr	r3, [r4, #4]
 801b282:	2b3b      	cmp	r3, #59	; 0x3b
 801b284:	dd34      	ble.n	801b2f0 <localtime_r+0x168>
 801b286:	3201      	adds	r2, #1
 801b288:	60a2      	str	r2, [r4, #8]
 801b28a:	3b3c      	subs	r3, #60	; 0x3c
 801b28c:	6063      	str	r3, [r4, #4]
 801b28e:	68a3      	ldr	r3, [r4, #8]
 801b290:	2b17      	cmp	r3, #23
 801b292:	dd33      	ble.n	801b2fc <localtime_r+0x174>
 801b294:	69e2      	ldr	r2, [r4, #28]
 801b296:	3201      	adds	r2, #1
 801b298:	61e2      	str	r2, [r4, #28]
 801b29a:	69a2      	ldr	r2, [r4, #24]
 801b29c:	3201      	adds	r2, #1
 801b29e:	2a06      	cmp	r2, #6
 801b2a0:	bfc8      	it	gt
 801b2a2:	2200      	movgt	r2, #0
 801b2a4:	61a2      	str	r2, [r4, #24]
 801b2a6:	68e2      	ldr	r2, [r4, #12]
 801b2a8:	3b18      	subs	r3, #24
 801b2aa:	3201      	adds	r2, #1
 801b2ac:	60a3      	str	r3, [r4, #8]
 801b2ae:	6923      	ldr	r3, [r4, #16]
 801b2b0:	60e2      	str	r2, [r4, #12]
 801b2b2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801b2b6:	428a      	cmp	r2, r1
 801b2b8:	dd0e      	ble.n	801b2d8 <localtime_r+0x150>
 801b2ba:	2b0b      	cmp	r3, #11
 801b2bc:	eba2 0201 	sub.w	r2, r2, r1
 801b2c0:	60e2      	str	r2, [r4, #12]
 801b2c2:	f103 0201 	add.w	r2, r3, #1
 801b2c6:	bf09      	itett	eq
 801b2c8:	6963      	ldreq	r3, [r4, #20]
 801b2ca:	6122      	strne	r2, [r4, #16]
 801b2cc:	2200      	moveq	r2, #0
 801b2ce:	3301      	addeq	r3, #1
 801b2d0:	bf02      	ittt	eq
 801b2d2:	6122      	streq	r2, [r4, #16]
 801b2d4:	6163      	streq	r3, [r4, #20]
 801b2d6:	61e2      	streq	r2, [r4, #28]
 801b2d8:	f001 fedc 	bl	801d094 <__tz_unlock>
 801b2dc:	4620      	mov	r0, r4
 801b2de:	b002      	add	sp, #8
 801b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	dacb      	bge.n	801b280 <localtime_r+0xf8>
 801b2e8:	3901      	subs	r1, #1
 801b2ea:	6061      	str	r1, [r4, #4]
 801b2ec:	333c      	adds	r3, #60	; 0x3c
 801b2ee:	e7c6      	b.n	801b27e <localtime_r+0xf6>
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	dacc      	bge.n	801b28e <localtime_r+0x106>
 801b2f4:	3a01      	subs	r2, #1
 801b2f6:	60a2      	str	r2, [r4, #8]
 801b2f8:	333c      	adds	r3, #60	; 0x3c
 801b2fa:	e7c7      	b.n	801b28c <localtime_r+0x104>
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	daeb      	bge.n	801b2d8 <localtime_r+0x150>
 801b300:	69e2      	ldr	r2, [r4, #28]
 801b302:	3a01      	subs	r2, #1
 801b304:	61e2      	str	r2, [r4, #28]
 801b306:	69a2      	ldr	r2, [r4, #24]
 801b308:	3a01      	subs	r2, #1
 801b30a:	bf48      	it	mi
 801b30c:	2206      	movmi	r2, #6
 801b30e:	61a2      	str	r2, [r4, #24]
 801b310:	68e2      	ldr	r2, [r4, #12]
 801b312:	3318      	adds	r3, #24
 801b314:	3a01      	subs	r2, #1
 801b316:	60e2      	str	r2, [r4, #12]
 801b318:	60a3      	str	r3, [r4, #8]
 801b31a:	2a00      	cmp	r2, #0
 801b31c:	d1dc      	bne.n	801b2d8 <localtime_r+0x150>
 801b31e:	6923      	ldr	r3, [r4, #16]
 801b320:	3b01      	subs	r3, #1
 801b322:	d405      	bmi.n	801b330 <localtime_r+0x1a8>
 801b324:	6123      	str	r3, [r4, #16]
 801b326:	6923      	ldr	r3, [r4, #16]
 801b328:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b32c:	60e3      	str	r3, [r4, #12]
 801b32e:	e7d3      	b.n	801b2d8 <localtime_r+0x150>
 801b330:	230b      	movs	r3, #11
 801b332:	6123      	str	r3, [r4, #16]
 801b334:	6963      	ldr	r3, [r4, #20]
 801b336:	1e5a      	subs	r2, r3, #1
 801b338:	6162      	str	r2, [r4, #20]
 801b33a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801b33e:	0793      	lsls	r3, r2, #30
 801b340:	d105      	bne.n	801b34e <localtime_r+0x1c6>
 801b342:	2164      	movs	r1, #100	; 0x64
 801b344:	fb92 f3f1 	sdiv	r3, r2, r1
 801b348:	fb01 2313 	mls	r3, r1, r3, r2
 801b34c:	b963      	cbnz	r3, 801b368 <localtime_r+0x1e0>
 801b34e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b352:	fb92 f3f1 	sdiv	r3, r2, r1
 801b356:	fb01 2313 	mls	r3, r1, r3, r2
 801b35a:	fab3 f383 	clz	r3, r3
 801b35e:	095b      	lsrs	r3, r3, #5
 801b360:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801b364:	61e3      	str	r3, [r4, #28]
 801b366:	e7de      	b.n	801b326 <localtime_r+0x19e>
 801b368:	2301      	movs	r3, #1
 801b36a:	e7f9      	b.n	801b360 <localtime_r+0x1d8>
 801b36c:	0802a098 	.word	0x0802a098
 801b370:	20005060 	.word	0x20005060

0801b374 <memcmp>:
 801b374:	b530      	push	{r4, r5, lr}
 801b376:	3901      	subs	r1, #1
 801b378:	2400      	movs	r4, #0
 801b37a:	42a2      	cmp	r2, r4
 801b37c:	d101      	bne.n	801b382 <memcmp+0xe>
 801b37e:	2000      	movs	r0, #0
 801b380:	e005      	b.n	801b38e <memcmp+0x1a>
 801b382:	5d03      	ldrb	r3, [r0, r4]
 801b384:	3401      	adds	r4, #1
 801b386:	5d0d      	ldrb	r5, [r1, r4]
 801b388:	42ab      	cmp	r3, r5
 801b38a:	d0f6      	beq.n	801b37a <memcmp+0x6>
 801b38c:	1b58      	subs	r0, r3, r5
 801b38e:	bd30      	pop	{r4, r5, pc}

0801b390 <memcpy>:
 801b390:	440a      	add	r2, r1
 801b392:	4291      	cmp	r1, r2
 801b394:	f100 33ff 	add.w	r3, r0, #4294967295
 801b398:	d100      	bne.n	801b39c <memcpy+0xc>
 801b39a:	4770      	bx	lr
 801b39c:	b510      	push	{r4, lr}
 801b39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b3a6:	4291      	cmp	r1, r2
 801b3a8:	d1f9      	bne.n	801b39e <memcpy+0xe>
 801b3aa:	bd10      	pop	{r4, pc}

0801b3ac <memmove>:
 801b3ac:	4288      	cmp	r0, r1
 801b3ae:	b510      	push	{r4, lr}
 801b3b0:	eb01 0402 	add.w	r4, r1, r2
 801b3b4:	d902      	bls.n	801b3bc <memmove+0x10>
 801b3b6:	4284      	cmp	r4, r0
 801b3b8:	4623      	mov	r3, r4
 801b3ba:	d807      	bhi.n	801b3cc <memmove+0x20>
 801b3bc:	1e43      	subs	r3, r0, #1
 801b3be:	42a1      	cmp	r1, r4
 801b3c0:	d008      	beq.n	801b3d4 <memmove+0x28>
 801b3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b3ca:	e7f8      	b.n	801b3be <memmove+0x12>
 801b3cc:	4402      	add	r2, r0
 801b3ce:	4601      	mov	r1, r0
 801b3d0:	428a      	cmp	r2, r1
 801b3d2:	d100      	bne.n	801b3d6 <memmove+0x2a>
 801b3d4:	bd10      	pop	{r4, pc}
 801b3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b3de:	e7f7      	b.n	801b3d0 <memmove+0x24>

0801b3e0 <memset>:
 801b3e0:	4402      	add	r2, r0
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	4293      	cmp	r3, r2
 801b3e6:	d100      	bne.n	801b3ea <memset+0xa>
 801b3e8:	4770      	bx	lr
 801b3ea:	f803 1b01 	strb.w	r1, [r3], #1
 801b3ee:	e7f9      	b.n	801b3e4 <memset+0x4>

0801b3f0 <validate_structure>:
 801b3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b3f2:	6801      	ldr	r1, [r0, #0]
 801b3f4:	293b      	cmp	r1, #59	; 0x3b
 801b3f6:	4604      	mov	r4, r0
 801b3f8:	d911      	bls.n	801b41e <validate_structure+0x2e>
 801b3fa:	223c      	movs	r2, #60	; 0x3c
 801b3fc:	4668      	mov	r0, sp
 801b3fe:	f003 fab1 	bl	801e964 <div>
 801b402:	9a01      	ldr	r2, [sp, #4]
 801b404:	6863      	ldr	r3, [r4, #4]
 801b406:	9900      	ldr	r1, [sp, #0]
 801b408:	2a00      	cmp	r2, #0
 801b40a:	440b      	add	r3, r1
 801b40c:	6063      	str	r3, [r4, #4]
 801b40e:	bfbb      	ittet	lt
 801b410:	323c      	addlt	r2, #60	; 0x3c
 801b412:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b416:	6022      	strge	r2, [r4, #0]
 801b418:	6022      	strlt	r2, [r4, #0]
 801b41a:	bfb8      	it	lt
 801b41c:	6063      	strlt	r3, [r4, #4]
 801b41e:	6861      	ldr	r1, [r4, #4]
 801b420:	293b      	cmp	r1, #59	; 0x3b
 801b422:	d911      	bls.n	801b448 <validate_structure+0x58>
 801b424:	223c      	movs	r2, #60	; 0x3c
 801b426:	4668      	mov	r0, sp
 801b428:	f003 fa9c 	bl	801e964 <div>
 801b42c:	9a01      	ldr	r2, [sp, #4]
 801b42e:	68a3      	ldr	r3, [r4, #8]
 801b430:	9900      	ldr	r1, [sp, #0]
 801b432:	2a00      	cmp	r2, #0
 801b434:	440b      	add	r3, r1
 801b436:	60a3      	str	r3, [r4, #8]
 801b438:	bfbb      	ittet	lt
 801b43a:	323c      	addlt	r2, #60	; 0x3c
 801b43c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b440:	6062      	strge	r2, [r4, #4]
 801b442:	6062      	strlt	r2, [r4, #4]
 801b444:	bfb8      	it	lt
 801b446:	60a3      	strlt	r3, [r4, #8]
 801b448:	68a1      	ldr	r1, [r4, #8]
 801b44a:	2917      	cmp	r1, #23
 801b44c:	d911      	bls.n	801b472 <validate_structure+0x82>
 801b44e:	2218      	movs	r2, #24
 801b450:	4668      	mov	r0, sp
 801b452:	f003 fa87 	bl	801e964 <div>
 801b456:	9a01      	ldr	r2, [sp, #4]
 801b458:	68e3      	ldr	r3, [r4, #12]
 801b45a:	9900      	ldr	r1, [sp, #0]
 801b45c:	2a00      	cmp	r2, #0
 801b45e:	440b      	add	r3, r1
 801b460:	60e3      	str	r3, [r4, #12]
 801b462:	bfbb      	ittet	lt
 801b464:	3218      	addlt	r2, #24
 801b466:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b46a:	60a2      	strge	r2, [r4, #8]
 801b46c:	60a2      	strlt	r2, [r4, #8]
 801b46e:	bfb8      	it	lt
 801b470:	60e3      	strlt	r3, [r4, #12]
 801b472:	6921      	ldr	r1, [r4, #16]
 801b474:	290b      	cmp	r1, #11
 801b476:	d911      	bls.n	801b49c <validate_structure+0xac>
 801b478:	220c      	movs	r2, #12
 801b47a:	4668      	mov	r0, sp
 801b47c:	f003 fa72 	bl	801e964 <div>
 801b480:	9a01      	ldr	r2, [sp, #4]
 801b482:	6963      	ldr	r3, [r4, #20]
 801b484:	9900      	ldr	r1, [sp, #0]
 801b486:	2a00      	cmp	r2, #0
 801b488:	440b      	add	r3, r1
 801b48a:	6163      	str	r3, [r4, #20]
 801b48c:	bfbb      	ittet	lt
 801b48e:	320c      	addlt	r2, #12
 801b490:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801b494:	6122      	strge	r2, [r4, #16]
 801b496:	6122      	strlt	r2, [r4, #16]
 801b498:	bfb8      	it	lt
 801b49a:	6163      	strlt	r3, [r4, #20]
 801b49c:	6963      	ldr	r3, [r4, #20]
 801b49e:	0799      	lsls	r1, r3, #30
 801b4a0:	d120      	bne.n	801b4e4 <validate_structure+0xf4>
 801b4a2:	2164      	movs	r1, #100	; 0x64
 801b4a4:	fb93 f2f1 	sdiv	r2, r3, r1
 801b4a8:	fb01 3212 	mls	r2, r1, r2, r3
 801b4ac:	b9e2      	cbnz	r2, 801b4e8 <validate_structure+0xf8>
 801b4ae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801b4b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b4b6:	fb93 f2f1 	sdiv	r2, r3, r1
 801b4ba:	fb01 3312 	mls	r3, r1, r2, r3
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	bf14      	ite	ne
 801b4c2:	231c      	movne	r3, #28
 801b4c4:	231d      	moveq	r3, #29
 801b4c6:	68e2      	ldr	r2, [r4, #12]
 801b4c8:	2a00      	cmp	r2, #0
 801b4ca:	dc0f      	bgt.n	801b4ec <validate_structure+0xfc>
 801b4cc:	4f33      	ldr	r7, [pc, #204]	; (801b59c <validate_structure+0x1ac>)
 801b4ce:	260b      	movs	r6, #11
 801b4d0:	2064      	movs	r0, #100	; 0x64
 801b4d2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 801b4d6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b4da:	f1bc 0f00 	cmp.w	ip, #0
 801b4de:	dd31      	ble.n	801b544 <validate_structure+0x154>
 801b4e0:	b003      	add	sp, #12
 801b4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4e4:	231c      	movs	r3, #28
 801b4e6:	e7ee      	b.n	801b4c6 <validate_structure+0xd6>
 801b4e8:	231d      	movs	r3, #29
 801b4ea:	e7ec      	b.n	801b4c6 <validate_structure+0xd6>
 801b4ec:	4f2b      	ldr	r7, [pc, #172]	; (801b59c <validate_structure+0x1ac>)
 801b4ee:	f04f 0c00 	mov.w	ip, #0
 801b4f2:	2564      	movs	r5, #100	; 0x64
 801b4f4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801b4f8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801b4fc:	2a01      	cmp	r2, #1
 801b4fe:	bf14      	ite	ne
 801b500:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 801b504:	4618      	moveq	r0, r3
 801b506:	4281      	cmp	r1, r0
 801b508:	ddea      	ble.n	801b4e0 <validate_structure+0xf0>
 801b50a:	3201      	adds	r2, #1
 801b50c:	1a09      	subs	r1, r1, r0
 801b50e:	2a0c      	cmp	r2, #12
 801b510:	60e1      	str	r1, [r4, #12]
 801b512:	6122      	str	r2, [r4, #16]
 801b514:	d1f0      	bne.n	801b4f8 <validate_structure+0x108>
 801b516:	6963      	ldr	r3, [r4, #20]
 801b518:	1c5a      	adds	r2, r3, #1
 801b51a:	0791      	lsls	r1, r2, #30
 801b51c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 801b520:	d137      	bne.n	801b592 <validate_structure+0x1a2>
 801b522:	fb92 f1f5 	sdiv	r1, r2, r5
 801b526:	fb05 2211 	mls	r2, r5, r1, r2
 801b52a:	2a00      	cmp	r2, #0
 801b52c:	d133      	bne.n	801b596 <validate_structure+0x1a6>
 801b52e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801b532:	fb93 f2f6 	sdiv	r2, r3, r6
 801b536:	fb06 3312 	mls	r3, r6, r2, r3
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	bf14      	ite	ne
 801b53e:	231c      	movne	r3, #28
 801b540:	231d      	moveq	r3, #29
 801b542:	e7d9      	b.n	801b4f8 <validate_structure+0x108>
 801b544:	6921      	ldr	r1, [r4, #16]
 801b546:	3901      	subs	r1, #1
 801b548:	6121      	str	r1, [r4, #16]
 801b54a:	3101      	adds	r1, #1
 801b54c:	d114      	bne.n	801b578 <validate_structure+0x188>
 801b54e:	6963      	ldr	r3, [r4, #20]
 801b550:	1e59      	subs	r1, r3, #1
 801b552:	078a      	lsls	r2, r1, #30
 801b554:	e9c4 6104 	strd	r6, r1, [r4, #16]
 801b558:	d117      	bne.n	801b58a <validate_structure+0x19a>
 801b55a:	fb91 f2f0 	sdiv	r2, r1, r0
 801b55e:	fb00 1112 	mls	r1, r0, r2, r1
 801b562:	b9a1      	cbnz	r1, 801b58e <validate_structure+0x19e>
 801b564:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801b568:	fb93 f2f5 	sdiv	r2, r3, r5
 801b56c:	fb05 3312 	mls	r3, r5, r2, r3
 801b570:	2b00      	cmp	r3, #0
 801b572:	bf14      	ite	ne
 801b574:	231c      	movne	r3, #28
 801b576:	231d      	moveq	r3, #29
 801b578:	6922      	ldr	r2, [r4, #16]
 801b57a:	2a01      	cmp	r2, #1
 801b57c:	bf14      	ite	ne
 801b57e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801b582:	461a      	moveq	r2, r3
 801b584:	4462      	add	r2, ip
 801b586:	60e2      	str	r2, [r4, #12]
 801b588:	e7a5      	b.n	801b4d6 <validate_structure+0xe6>
 801b58a:	231c      	movs	r3, #28
 801b58c:	e7f4      	b.n	801b578 <validate_structure+0x188>
 801b58e:	231d      	movs	r3, #29
 801b590:	e7f2      	b.n	801b578 <validate_structure+0x188>
 801b592:	231c      	movs	r3, #28
 801b594:	e7b0      	b.n	801b4f8 <validate_structure+0x108>
 801b596:	231d      	movs	r3, #29
 801b598:	e7ae      	b.n	801b4f8 <validate_structure+0x108>
 801b59a:	bf00      	nop
 801b59c:	0802a038 	.word	0x0802a038

0801b5a0 <mktime>:
 801b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5a4:	b08b      	sub	sp, #44	; 0x2c
 801b5a6:	4605      	mov	r5, r0
 801b5a8:	f004 fb04 	bl	801fbb4 <__gettzinfo>
 801b5ac:	4607      	mov	r7, r0
 801b5ae:	4628      	mov	r0, r5
 801b5b0:	f7ff ff1e 	bl	801b3f0 <validate_structure>
 801b5b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b5b8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 801b5bc:	68a8      	ldr	r0, [r5, #8]
 801b5be:	696e      	ldr	r6, [r5, #20]
 801b5c0:	fb0a 2303 	mla	r3, sl, r3, r2
 801b5c4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 801b5c8:	fb0a 3a00 	mla	sl, sl, r0, r3
 801b5cc:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 801b5d0:	4ac3      	ldr	r2, [pc, #780]	; (801b8e0 <mktime+0x340>)
 801b5d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801b5d6:	3c01      	subs	r4, #1
 801b5d8:	2b01      	cmp	r3, #1
 801b5da:	4414      	add	r4, r2
 801b5dc:	dd11      	ble.n	801b602 <mktime+0x62>
 801b5de:	07b1      	lsls	r1, r6, #30
 801b5e0:	d10f      	bne.n	801b602 <mktime+0x62>
 801b5e2:	2264      	movs	r2, #100	; 0x64
 801b5e4:	fb96 f3f2 	sdiv	r3, r6, r2
 801b5e8:	fb02 6313 	mls	r3, r2, r3, r6
 801b5ec:	b943      	cbnz	r3, 801b600 <mktime+0x60>
 801b5ee:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b5f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b5f6:	fb91 f3f2 	sdiv	r3, r1, r2
 801b5fa:	fb02 1313 	mls	r3, r2, r3, r1
 801b5fe:	b903      	cbnz	r3, 801b602 <mktime+0x62>
 801b600:	3401      	adds	r4, #1
 801b602:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801b606:	3310      	adds	r3, #16
 801b608:	f644 6220 	movw	r2, #20000	; 0x4e20
 801b60c:	4293      	cmp	r3, r2
 801b60e:	61ec      	str	r4, [r5, #28]
 801b610:	f200 8161 	bhi.w	801b8d6 <mktime+0x336>
 801b614:	2e46      	cmp	r6, #70	; 0x46
 801b616:	dd77      	ble.n	801b708 <mktime+0x168>
 801b618:	2346      	movs	r3, #70	; 0x46
 801b61a:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b61e:	2164      	movs	r1, #100	; 0x64
 801b620:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b624:	079a      	lsls	r2, r3, #30
 801b626:	d169      	bne.n	801b6fc <mktime+0x15c>
 801b628:	fb93 f2f1 	sdiv	r2, r3, r1
 801b62c:	fb01 3212 	mls	r2, r1, r2, r3
 801b630:	2a00      	cmp	r2, #0
 801b632:	d166      	bne.n	801b702 <mktime+0x162>
 801b634:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b638:	fb9c f2f0 	sdiv	r2, ip, r0
 801b63c:	fb00 c212 	mls	r2, r0, r2, ip
 801b640:	2a00      	cmp	r2, #0
 801b642:	bf14      	ite	ne
 801b644:	4672      	movne	r2, lr
 801b646:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b64a:	3301      	adds	r3, #1
 801b64c:	429e      	cmp	r6, r3
 801b64e:	4414      	add	r4, r2
 801b650:	d1e8      	bne.n	801b624 <mktime+0x84>
 801b652:	4ba4      	ldr	r3, [pc, #656]	; (801b8e4 <mktime+0x344>)
 801b654:	ea4f 7bea 	mov.w	fp, sl, asr #31
 801b658:	fbc3 ab04 	smlal	sl, fp, r3, r4
 801b65c:	f001 fd14 	bl	801d088 <__tz_lock>
 801b660:	f001 fd1e 	bl	801d0a0 <_tzset_unlocked>
 801b664:	4ba0      	ldr	r3, [pc, #640]	; (801b8e8 <mktime+0x348>)
 801b666:	f8d3 9000 	ldr.w	r9, [r3]
 801b66a:	f1b9 0f00 	cmp.w	r9, #0
 801b66e:	d03f      	beq.n	801b6f0 <mktime+0x150>
 801b670:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801b674:	6968      	ldr	r0, [r5, #20]
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	f1b9 0f01 	cmp.w	r9, #1
 801b67c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801b680:	46c8      	mov	r8, r9
 801b682:	bfa8      	it	ge
 801b684:	f04f 0801 	movge.w	r8, #1
 801b688:	4283      	cmp	r3, r0
 801b68a:	d17f      	bne.n	801b78c <mktime+0x1ec>
 801b68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b68e:	4619      	mov	r1, r3
 801b690:	17da      	asrs	r2, r3, #31
 801b692:	e9cd 1200 	strd	r1, r2, [sp]
 801b696:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801b69a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6a4:	1a80      	subs	r0, r0, r2
 801b6a6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 801b6aa:	4582      	cmp	sl, r0
 801b6ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b6b0:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b6b4:	da71      	bge.n	801b79a <mktime+0x1fa>
 801b6b6:	9800      	ldr	r0, [sp, #0]
 801b6b8:	6a39      	ldr	r1, [r7, #32]
 801b6ba:	1a09      	subs	r1, r1, r0
 801b6bc:	9104      	str	r1, [sp, #16]
 801b6be:	9801      	ldr	r0, [sp, #4]
 801b6c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b6c2:	eb61 0100 	sbc.w	r1, r1, r0
 801b6c6:	9105      	str	r1, [sp, #20]
 801b6c8:	6839      	ldr	r1, [r7, #0]
 801b6ca:	2900      	cmp	r1, #0
 801b6cc:	d075      	beq.n	801b7ba <mktime+0x21a>
 801b6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b6d2:	4582      	cmp	sl, r0
 801b6d4:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b6d8:	db05      	blt.n	801b6e6 <mktime+0x146>
 801b6da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b6de:	4582      	cmp	sl, r0
 801b6e0:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b6e4:	db6f      	blt.n	801b7c6 <mktime+0x226>
 801b6e6:	f1b9 0f00 	cmp.w	r9, #0
 801b6ea:	f04f 0900 	mov.w	r9, #0
 801b6ee:	da6f      	bge.n	801b7d0 <mktime+0x230>
 801b6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f2:	eb1a 0a03 	adds.w	sl, sl, r3
 801b6f6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b6fa:	e0ae      	b.n	801b85a <mktime+0x2ba>
 801b6fc:	f240 126d 	movw	r2, #365	; 0x16d
 801b700:	e7a3      	b.n	801b64a <mktime+0xaa>
 801b702:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b706:	e7a0      	b.n	801b64a <mktime+0xaa>
 801b708:	d0a3      	beq.n	801b652 <mktime+0xb2>
 801b70a:	2345      	movs	r3, #69	; 0x45
 801b70c:	f240 1e6d 	movw	lr, #365	; 0x16d
 801b710:	2164      	movs	r1, #100	; 0x64
 801b712:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801b716:	e012      	b.n	801b73e <mktime+0x19e>
 801b718:	bb62      	cbnz	r2, 801b774 <mktime+0x1d4>
 801b71a:	fb93 f2f1 	sdiv	r2, r3, r1
 801b71e:	fb01 3212 	mls	r2, r1, r2, r3
 801b722:	bb52      	cbnz	r2, 801b77a <mktime+0x1da>
 801b724:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 801b728:	fb9c f2f0 	sdiv	r2, ip, r0
 801b72c:	fb00 c212 	mls	r2, r0, r2, ip
 801b730:	2a00      	cmp	r2, #0
 801b732:	bf14      	ite	ne
 801b734:	4672      	movne	r2, lr
 801b736:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b73a:	1aa4      	subs	r4, r4, r2
 801b73c:	3b01      	subs	r3, #1
 801b73e:	429e      	cmp	r6, r3
 801b740:	f003 0203 	and.w	r2, r3, #3
 801b744:	dbe8      	blt.n	801b718 <mktime+0x178>
 801b746:	b9da      	cbnz	r2, 801b780 <mktime+0x1e0>
 801b748:	2264      	movs	r2, #100	; 0x64
 801b74a:	fb96 f3f2 	sdiv	r3, r6, r2
 801b74e:	fb02 6313 	mls	r3, r2, r3, r6
 801b752:	b9c3      	cbnz	r3, 801b786 <mktime+0x1e6>
 801b754:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801b758:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b75c:	fb91 f3f2 	sdiv	r3, r1, r2
 801b760:	fb02 1313 	mls	r3, r2, r3, r1
 801b764:	2b00      	cmp	r3, #0
 801b766:	f240 136d 	movw	r3, #365	; 0x16d
 801b76a:	bf08      	it	eq
 801b76c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801b770:	1ae4      	subs	r4, r4, r3
 801b772:	e76e      	b.n	801b652 <mktime+0xb2>
 801b774:	f240 126d 	movw	r2, #365	; 0x16d
 801b778:	e7df      	b.n	801b73a <mktime+0x19a>
 801b77a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b77e:	e7dc      	b.n	801b73a <mktime+0x19a>
 801b780:	f240 136d 	movw	r3, #365	; 0x16d
 801b784:	e7f4      	b.n	801b770 <mktime+0x1d0>
 801b786:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 801b78a:	e7f1      	b.n	801b770 <mktime+0x1d0>
 801b78c:	f001 fbd4 	bl	801cf38 <__tzcalc_limits>
 801b790:	2800      	cmp	r0, #0
 801b792:	f47f af7b 	bne.w	801b68c <mktime+0xec>
 801b796:	46c1      	mov	r9, r8
 801b798:	e054      	b.n	801b844 <mktime+0x2a4>
 801b79a:	9800      	ldr	r0, [sp, #0]
 801b79c:	9902      	ldr	r1, [sp, #8]
 801b79e:	1a09      	subs	r1, r1, r0
 801b7a0:	9108      	str	r1, [sp, #32]
 801b7a2:	9801      	ldr	r0, [sp, #4]
 801b7a4:	9903      	ldr	r1, [sp, #12]
 801b7a6:	eb61 0100 	sbc.w	r1, r1, r0
 801b7aa:	9109      	str	r1, [sp, #36]	; 0x24
 801b7ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b7b0:	4582      	cmp	sl, r0
 801b7b2:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b7b6:	dbee      	blt.n	801b796 <mktime+0x1f6>
 801b7b8:	e77d      	b.n	801b6b6 <mktime+0x116>
 801b7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b7be:	4582      	cmp	sl, r0
 801b7c0:	eb7b 0101 	sbcs.w	r1, fp, r1
 801b7c4:	db89      	blt.n	801b6da <mktime+0x13a>
 801b7c6:	f1b9 0f00 	cmp.w	r9, #0
 801b7ca:	db3f      	blt.n	801b84c <mktime+0x2ac>
 801b7cc:	f04f 0901 	mov.w	r9, #1
 801b7d0:	ea88 0809 	eor.w	r8, r8, r9
 801b7d4:	f1b8 0f01 	cmp.w	r8, #1
 801b7d8:	d134      	bne.n	801b844 <mktime+0x2a4>
 801b7da:	f1b9 0f00 	cmp.w	r9, #0
 801b7de:	d04f      	beq.n	801b880 <mktime+0x2e0>
 801b7e0:	1ad3      	subs	r3, r2, r3
 801b7e2:	682a      	ldr	r2, [r5, #0]
 801b7e4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801b7e8:	441a      	add	r2, r3
 801b7ea:	eb1a 0a03 	adds.w	sl, sl, r3
 801b7ee:	602a      	str	r2, [r5, #0]
 801b7f0:	4628      	mov	r0, r5
 801b7f2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b7f6:	f7ff fdfb 	bl	801b3f0 <validate_structure>
 801b7fa:	68ea      	ldr	r2, [r5, #12]
 801b7fc:	ebb2 0208 	subs.w	r2, r2, r8
 801b800:	d020      	beq.n	801b844 <mktime+0x2a4>
 801b802:	2a01      	cmp	r2, #1
 801b804:	dc3e      	bgt.n	801b884 <mktime+0x2e4>
 801b806:	1c90      	adds	r0, r2, #2
 801b808:	bfd8      	it	le
 801b80a:	2201      	movle	r2, #1
 801b80c:	69eb      	ldr	r3, [r5, #28]
 801b80e:	18d3      	adds	r3, r2, r3
 801b810:	4414      	add	r4, r2
 801b812:	d540      	bpl.n	801b896 <mktime+0x2f6>
 801b814:	1e72      	subs	r2, r6, #1
 801b816:	0791      	lsls	r1, r2, #30
 801b818:	d137      	bne.n	801b88a <mktime+0x2ea>
 801b81a:	2164      	movs	r1, #100	; 0x64
 801b81c:	fb92 f3f1 	sdiv	r3, r2, r1
 801b820:	fb01 2313 	mls	r3, r1, r3, r2
 801b824:	bba3      	cbnz	r3, 801b890 <mktime+0x2f0>
 801b826:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801b82a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801b82e:	fb96 f3f2 	sdiv	r3, r6, r2
 801b832:	fb02 6613 	mls	r6, r2, r3, r6
 801b836:	2e00      	cmp	r6, #0
 801b838:	f240 136d 	movw	r3, #365	; 0x16d
 801b83c:	bf18      	it	ne
 801b83e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 801b842:	61eb      	str	r3, [r5, #28]
 801b844:	f1b9 0f01 	cmp.w	r9, #1
 801b848:	f47f af52 	bne.w	801b6f0 <mktime+0x150>
 801b84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b84e:	eb1a 0a03 	adds.w	sl, sl, r3
 801b852:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 801b856:	f04f 0901 	mov.w	r9, #1
 801b85a:	f001 fc1b 	bl	801d094 <__tz_unlock>
 801b85e:	3404      	adds	r4, #4
 801b860:	2307      	movs	r3, #7
 801b862:	fb94 f3f3 	sdiv	r3, r4, r3
 801b866:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801b86a:	1ae4      	subs	r4, r4, r3
 801b86c:	bf48      	it	mi
 801b86e:	3407      	addmi	r4, #7
 801b870:	f8c5 9020 	str.w	r9, [r5, #32]
 801b874:	61ac      	str	r4, [r5, #24]
 801b876:	4650      	mov	r0, sl
 801b878:	4659      	mov	r1, fp
 801b87a:	b00b      	add	sp, #44	; 0x2c
 801b87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b880:	1a9b      	subs	r3, r3, r2
 801b882:	e7ae      	b.n	801b7e2 <mktime+0x242>
 801b884:	f04f 32ff 	mov.w	r2, #4294967295
 801b888:	e7c0      	b.n	801b80c <mktime+0x26c>
 801b88a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 801b88e:	e7d8      	b.n	801b842 <mktime+0x2a2>
 801b890:	f240 136d 	movw	r3, #365	; 0x16d
 801b894:	e7d5      	b.n	801b842 <mktime+0x2a2>
 801b896:	07b2      	lsls	r2, r6, #30
 801b898:	d117      	bne.n	801b8ca <mktime+0x32a>
 801b89a:	2164      	movs	r1, #100	; 0x64
 801b89c:	fb96 f2f1 	sdiv	r2, r6, r1
 801b8a0:	fb01 6212 	mls	r2, r1, r2, r6
 801b8a4:	b9a2      	cbnz	r2, 801b8d0 <mktime+0x330>
 801b8a6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801b8aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b8ae:	fb96 f2f1 	sdiv	r2, r6, r1
 801b8b2:	fb01 6612 	mls	r6, r1, r2, r6
 801b8b6:	2e00      	cmp	r6, #0
 801b8b8:	f240 126d 	movw	r2, #365	; 0x16d
 801b8bc:	bf08      	it	eq
 801b8be:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801b8c2:	4293      	cmp	r3, r2
 801b8c4:	bfa8      	it	ge
 801b8c6:	1a9b      	subge	r3, r3, r2
 801b8c8:	e7bb      	b.n	801b842 <mktime+0x2a2>
 801b8ca:	f240 126d 	movw	r2, #365	; 0x16d
 801b8ce:	e7f8      	b.n	801b8c2 <mktime+0x322>
 801b8d0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801b8d4:	e7f5      	b.n	801b8c2 <mktime+0x322>
 801b8d6:	f04f 3aff 	mov.w	sl, #4294967295
 801b8da:	f04f 3bff 	mov.w	fp, #4294967295
 801b8de:	e7ca      	b.n	801b876 <mktime+0x2d6>
 801b8e0:	0802a068 	.word	0x0802a068
 801b8e4:	00015180 	.word	0x00015180
 801b8e8:	20005060 	.word	0x20005060

0801b8ec <printf>:
 801b8ec:	b40f      	push	{r0, r1, r2, r3}
 801b8ee:	b507      	push	{r0, r1, r2, lr}
 801b8f0:	4906      	ldr	r1, [pc, #24]	; (801b90c <printf+0x20>)
 801b8f2:	ab04      	add	r3, sp, #16
 801b8f4:	6808      	ldr	r0, [r1, #0]
 801b8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8fa:	6881      	ldr	r1, [r0, #8]
 801b8fc:	9301      	str	r3, [sp, #4]
 801b8fe:	f001 fd53 	bl	801d3a8 <_vfprintf_r>
 801b902:	b003      	add	sp, #12
 801b904:	f85d eb04 	ldr.w	lr, [sp], #4
 801b908:	b004      	add	sp, #16
 801b90a:	4770      	bx	lr
 801b90c:	20000038 	.word	0x20000038

0801b910 <rand>:
 801b910:	4b0b      	ldr	r3, [pc, #44]	; (801b940 <rand+0x30>)
 801b912:	480c      	ldr	r0, [pc, #48]	; (801b944 <rand+0x34>)
 801b914:	6819      	ldr	r1, [r3, #0]
 801b916:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 801b91a:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 801b91e:	b510      	push	{r4, lr}
 801b920:	4c09      	ldr	r4, [pc, #36]	; (801b948 <rand+0x38>)
 801b922:	4350      	muls	r0, r2
 801b924:	fb04 0003 	mla	r0, r4, r3, r0
 801b928:	fba2 3404 	umull	r3, r4, r2, r4
 801b92c:	1c5a      	adds	r2, r3, #1
 801b92e:	4404      	add	r4, r0
 801b930:	f144 0000 	adc.w	r0, r4, #0
 801b934:	e9c1 202a 	strd	r2, r0, [r1, #168]	; 0xa8
 801b938:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b93c:	bd10      	pop	{r4, pc}
 801b93e:	bf00      	nop
 801b940:	20000038 	.word	0x20000038
 801b944:	5851f42d 	.word	0x5851f42d
 801b948:	4c957f2d 	.word	0x4c957f2d

0801b94c <snprintf>:
 801b94c:	b40c      	push	{r2, r3}
 801b94e:	b530      	push	{r4, r5, lr}
 801b950:	4b17      	ldr	r3, [pc, #92]	; (801b9b0 <snprintf+0x64>)
 801b952:	1e0c      	subs	r4, r1, #0
 801b954:	681d      	ldr	r5, [r3, #0]
 801b956:	b09d      	sub	sp, #116	; 0x74
 801b958:	da08      	bge.n	801b96c <snprintf+0x20>
 801b95a:	238b      	movs	r3, #139	; 0x8b
 801b95c:	602b      	str	r3, [r5, #0]
 801b95e:	f04f 30ff 	mov.w	r0, #4294967295
 801b962:	b01d      	add	sp, #116	; 0x74
 801b964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b968:	b002      	add	sp, #8
 801b96a:	4770      	bx	lr
 801b96c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b970:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b974:	bf14      	ite	ne
 801b976:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b97a:	4623      	moveq	r3, r4
 801b97c:	9304      	str	r3, [sp, #16]
 801b97e:	9307      	str	r3, [sp, #28]
 801b980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b984:	9002      	str	r0, [sp, #8]
 801b986:	9006      	str	r0, [sp, #24]
 801b988:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b98c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b98e:	ab21      	add	r3, sp, #132	; 0x84
 801b990:	a902      	add	r1, sp, #8
 801b992:	4628      	mov	r0, r5
 801b994:	9301      	str	r3, [sp, #4]
 801b996:	f000 f8ef 	bl	801bb78 <_svfprintf_r>
 801b99a:	1c43      	adds	r3, r0, #1
 801b99c:	bfbc      	itt	lt
 801b99e:	238b      	movlt	r3, #139	; 0x8b
 801b9a0:	602b      	strlt	r3, [r5, #0]
 801b9a2:	2c00      	cmp	r4, #0
 801b9a4:	d0dd      	beq.n	801b962 <snprintf+0x16>
 801b9a6:	9b02      	ldr	r3, [sp, #8]
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	701a      	strb	r2, [r3, #0]
 801b9ac:	e7d9      	b.n	801b962 <snprintf+0x16>
 801b9ae:	bf00      	nop
 801b9b0:	20000038 	.word	0x20000038

0801b9b4 <sprintf>:
 801b9b4:	b40e      	push	{r1, r2, r3}
 801b9b6:	b500      	push	{lr}
 801b9b8:	b09c      	sub	sp, #112	; 0x70
 801b9ba:	ab1d      	add	r3, sp, #116	; 0x74
 801b9bc:	9002      	str	r0, [sp, #8]
 801b9be:	9006      	str	r0, [sp, #24]
 801b9c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b9c4:	4809      	ldr	r0, [pc, #36]	; (801b9ec <sprintf+0x38>)
 801b9c6:	9107      	str	r1, [sp, #28]
 801b9c8:	9104      	str	r1, [sp, #16]
 801b9ca:	4909      	ldr	r1, [pc, #36]	; (801b9f0 <sprintf+0x3c>)
 801b9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9d0:	9105      	str	r1, [sp, #20]
 801b9d2:	6800      	ldr	r0, [r0, #0]
 801b9d4:	9301      	str	r3, [sp, #4]
 801b9d6:	a902      	add	r1, sp, #8
 801b9d8:	f000 f8ce 	bl	801bb78 <_svfprintf_r>
 801b9dc:	9b02      	ldr	r3, [sp, #8]
 801b9de:	2200      	movs	r2, #0
 801b9e0:	701a      	strb	r2, [r3, #0]
 801b9e2:	b01c      	add	sp, #112	; 0x70
 801b9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b9e8:	b003      	add	sp, #12
 801b9ea:	4770      	bx	lr
 801b9ec:	20000038 	.word	0x20000038
 801b9f0:	ffff0208 	.word	0xffff0208

0801b9f4 <strchr>:
 801b9f4:	b2c9      	uxtb	r1, r1
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9fc:	b11a      	cbz	r2, 801ba06 <strchr+0x12>
 801b9fe:	428a      	cmp	r2, r1
 801ba00:	d1f9      	bne.n	801b9f6 <strchr+0x2>
 801ba02:	4618      	mov	r0, r3
 801ba04:	4770      	bx	lr
 801ba06:	2900      	cmp	r1, #0
 801ba08:	bf18      	it	ne
 801ba0a:	2300      	movne	r3, #0
 801ba0c:	e7f9      	b.n	801ba02 <strchr+0xe>

0801ba0e <strncmp>:
 801ba0e:	b510      	push	{r4, lr}
 801ba10:	b16a      	cbz	r2, 801ba2e <strncmp+0x20>
 801ba12:	3901      	subs	r1, #1
 801ba14:	1884      	adds	r4, r0, r2
 801ba16:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ba1a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ba1e:	4293      	cmp	r3, r2
 801ba20:	d103      	bne.n	801ba2a <strncmp+0x1c>
 801ba22:	42a0      	cmp	r0, r4
 801ba24:	d001      	beq.n	801ba2a <strncmp+0x1c>
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d1f5      	bne.n	801ba16 <strncmp+0x8>
 801ba2a:	1a98      	subs	r0, r3, r2
 801ba2c:	bd10      	pop	{r4, pc}
 801ba2e:	4610      	mov	r0, r2
 801ba30:	e7fc      	b.n	801ba2c <strncmp+0x1e>

0801ba32 <strncpy>:
 801ba32:	b510      	push	{r4, lr}
 801ba34:	3901      	subs	r1, #1
 801ba36:	4603      	mov	r3, r0
 801ba38:	b132      	cbz	r2, 801ba48 <strncpy+0x16>
 801ba3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ba3e:	f803 4b01 	strb.w	r4, [r3], #1
 801ba42:	3a01      	subs	r2, #1
 801ba44:	2c00      	cmp	r4, #0
 801ba46:	d1f7      	bne.n	801ba38 <strncpy+0x6>
 801ba48:	441a      	add	r2, r3
 801ba4a:	2100      	movs	r1, #0
 801ba4c:	4293      	cmp	r3, r2
 801ba4e:	d100      	bne.n	801ba52 <strncpy+0x20>
 801ba50:	bd10      	pop	{r4, pc}
 801ba52:	f803 1b01 	strb.w	r1, [r3], #1
 801ba56:	e7f9      	b.n	801ba4c <strncpy+0x1a>

0801ba58 <_strtol_l.isra.0>:
 801ba58:	2b01      	cmp	r3, #1
 801ba5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba5e:	d001      	beq.n	801ba64 <_strtol_l.isra.0+0xc>
 801ba60:	2b24      	cmp	r3, #36	; 0x24
 801ba62:	d906      	bls.n	801ba72 <_strtol_l.isra.0+0x1a>
 801ba64:	f003 fdf4 	bl	801f650 <__errno>
 801ba68:	2316      	movs	r3, #22
 801ba6a:	6003      	str	r3, [r0, #0]
 801ba6c:	2000      	movs	r0, #0
 801ba6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba72:	4f3a      	ldr	r7, [pc, #232]	; (801bb5c <_strtol_l.isra.0+0x104>)
 801ba74:	468e      	mov	lr, r1
 801ba76:	4676      	mov	r6, lr
 801ba78:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801ba7c:	5de5      	ldrb	r5, [r4, r7]
 801ba7e:	f015 0508 	ands.w	r5, r5, #8
 801ba82:	d1f8      	bne.n	801ba76 <_strtol_l.isra.0+0x1e>
 801ba84:	2c2d      	cmp	r4, #45	; 0x2d
 801ba86:	d134      	bne.n	801baf2 <_strtol_l.isra.0+0x9a>
 801ba88:	f89e 4000 	ldrb.w	r4, [lr]
 801ba8c:	f04f 0801 	mov.w	r8, #1
 801ba90:	f106 0e02 	add.w	lr, r6, #2
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d05c      	beq.n	801bb52 <_strtol_l.isra.0+0xfa>
 801ba98:	2b10      	cmp	r3, #16
 801ba9a:	d10c      	bne.n	801bab6 <_strtol_l.isra.0+0x5e>
 801ba9c:	2c30      	cmp	r4, #48	; 0x30
 801ba9e:	d10a      	bne.n	801bab6 <_strtol_l.isra.0+0x5e>
 801baa0:	f89e 4000 	ldrb.w	r4, [lr]
 801baa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801baa8:	2c58      	cmp	r4, #88	; 0x58
 801baaa:	d14d      	bne.n	801bb48 <_strtol_l.isra.0+0xf0>
 801baac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801bab0:	2310      	movs	r3, #16
 801bab2:	f10e 0e02 	add.w	lr, lr, #2
 801bab6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801baba:	f10c 3cff 	add.w	ip, ip, #4294967295
 801babe:	2600      	movs	r6, #0
 801bac0:	fbbc f9f3 	udiv	r9, ip, r3
 801bac4:	4635      	mov	r5, r6
 801bac6:	fb03 ca19 	mls	sl, r3, r9, ip
 801baca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bace:	2f09      	cmp	r7, #9
 801bad0:	d818      	bhi.n	801bb04 <_strtol_l.isra.0+0xac>
 801bad2:	463c      	mov	r4, r7
 801bad4:	42a3      	cmp	r3, r4
 801bad6:	dd24      	ble.n	801bb22 <_strtol_l.isra.0+0xca>
 801bad8:	2e00      	cmp	r6, #0
 801bada:	db1f      	blt.n	801bb1c <_strtol_l.isra.0+0xc4>
 801badc:	45a9      	cmp	r9, r5
 801bade:	d31d      	bcc.n	801bb1c <_strtol_l.isra.0+0xc4>
 801bae0:	d101      	bne.n	801bae6 <_strtol_l.isra.0+0x8e>
 801bae2:	45a2      	cmp	sl, r4
 801bae4:	db1a      	blt.n	801bb1c <_strtol_l.isra.0+0xc4>
 801bae6:	fb05 4503 	mla	r5, r5, r3, r4
 801baea:	2601      	movs	r6, #1
 801baec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801baf0:	e7eb      	b.n	801baca <_strtol_l.isra.0+0x72>
 801baf2:	2c2b      	cmp	r4, #43	; 0x2b
 801baf4:	bf08      	it	eq
 801baf6:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bafa:	46a8      	mov	r8, r5
 801bafc:	bf08      	it	eq
 801bafe:	f106 0e02 	addeq.w	lr, r6, #2
 801bb02:	e7c7      	b.n	801ba94 <_strtol_l.isra.0+0x3c>
 801bb04:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bb08:	2f19      	cmp	r7, #25
 801bb0a:	d801      	bhi.n	801bb10 <_strtol_l.isra.0+0xb8>
 801bb0c:	3c37      	subs	r4, #55	; 0x37
 801bb0e:	e7e1      	b.n	801bad4 <_strtol_l.isra.0+0x7c>
 801bb10:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801bb14:	2f19      	cmp	r7, #25
 801bb16:	d804      	bhi.n	801bb22 <_strtol_l.isra.0+0xca>
 801bb18:	3c57      	subs	r4, #87	; 0x57
 801bb1a:	e7db      	b.n	801bad4 <_strtol_l.isra.0+0x7c>
 801bb1c:	f04f 36ff 	mov.w	r6, #4294967295
 801bb20:	e7e4      	b.n	801baec <_strtol_l.isra.0+0x94>
 801bb22:	2e00      	cmp	r6, #0
 801bb24:	da05      	bge.n	801bb32 <_strtol_l.isra.0+0xda>
 801bb26:	2322      	movs	r3, #34	; 0x22
 801bb28:	6003      	str	r3, [r0, #0]
 801bb2a:	4665      	mov	r5, ip
 801bb2c:	b942      	cbnz	r2, 801bb40 <_strtol_l.isra.0+0xe8>
 801bb2e:	4628      	mov	r0, r5
 801bb30:	e79d      	b.n	801ba6e <_strtol_l.isra.0+0x16>
 801bb32:	f1b8 0f00 	cmp.w	r8, #0
 801bb36:	d000      	beq.n	801bb3a <_strtol_l.isra.0+0xe2>
 801bb38:	426d      	negs	r5, r5
 801bb3a:	2a00      	cmp	r2, #0
 801bb3c:	d0f7      	beq.n	801bb2e <_strtol_l.isra.0+0xd6>
 801bb3e:	b10e      	cbz	r6, 801bb44 <_strtol_l.isra.0+0xec>
 801bb40:	f10e 31ff 	add.w	r1, lr, #4294967295
 801bb44:	6011      	str	r1, [r2, #0]
 801bb46:	e7f2      	b.n	801bb2e <_strtol_l.isra.0+0xd6>
 801bb48:	2430      	movs	r4, #48	; 0x30
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d1b3      	bne.n	801bab6 <_strtol_l.isra.0+0x5e>
 801bb4e:	2308      	movs	r3, #8
 801bb50:	e7b1      	b.n	801bab6 <_strtol_l.isra.0+0x5e>
 801bb52:	2c30      	cmp	r4, #48	; 0x30
 801bb54:	d0a4      	beq.n	801baa0 <_strtol_l.isra.0+0x48>
 801bb56:	230a      	movs	r3, #10
 801bb58:	e7ad      	b.n	801bab6 <_strtol_l.isra.0+0x5e>
 801bb5a:	bf00      	nop
 801bb5c:	08029f31 	.word	0x08029f31

0801bb60 <_strtol_r>:
 801bb60:	f7ff bf7a 	b.w	801ba58 <_strtol_l.isra.0>

0801bb64 <strtol>:
 801bb64:	4613      	mov	r3, r2
 801bb66:	460a      	mov	r2, r1
 801bb68:	4601      	mov	r1, r0
 801bb6a:	4802      	ldr	r0, [pc, #8]	; (801bb74 <strtol+0x10>)
 801bb6c:	6800      	ldr	r0, [r0, #0]
 801bb6e:	f7ff bf73 	b.w	801ba58 <_strtol_l.isra.0>
 801bb72:	bf00      	nop
 801bb74:	20000038 	.word	0x20000038

0801bb78 <_svfprintf_r>:
 801bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb7c:	ed2d 8b04 	vpush	{d8-d9}
 801bb80:	b0cf      	sub	sp, #316	; 0x13c
 801bb82:	4689      	mov	r9, r1
 801bb84:	4693      	mov	fp, r2
 801bb86:	461e      	mov	r6, r3
 801bb88:	4682      	mov	sl, r0
 801bb8a:	f004 f8c7 	bl	801fd1c <_localeconv_r>
 801bb8e:	6803      	ldr	r3, [r0, #0]
 801bb90:	9313      	str	r3, [sp, #76]	; 0x4c
 801bb92:	4618      	mov	r0, r3
 801bb94:	f7e4 fb46 	bl	8000224 <strlen>
 801bb98:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bb9c:	900e      	str	r0, [sp, #56]	; 0x38
 801bb9e:	0618      	lsls	r0, r3, #24
 801bba0:	d51a      	bpl.n	801bbd8 <_svfprintf_r+0x60>
 801bba2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bba6:	b9bb      	cbnz	r3, 801bbd8 <_svfprintf_r+0x60>
 801bba8:	2140      	movs	r1, #64	; 0x40
 801bbaa:	4650      	mov	r0, sl
 801bbac:	f004 f93c 	bl	801fe28 <_malloc_r>
 801bbb0:	f8c9 0000 	str.w	r0, [r9]
 801bbb4:	f8c9 0010 	str.w	r0, [r9, #16]
 801bbb8:	b958      	cbnz	r0, 801bbd2 <_svfprintf_r+0x5a>
 801bbba:	230c      	movs	r3, #12
 801bbbc:	f8ca 3000 	str.w	r3, [sl]
 801bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 801bbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbc6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bbc8:	b04f      	add	sp, #316	; 0x13c
 801bbca:	ecbd 8b04 	vpop	{d8-d9}
 801bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd2:	2340      	movs	r3, #64	; 0x40
 801bbd4:	f8c9 3014 	str.w	r3, [r9, #20]
 801bbd8:	ed9f 7b93 	vldr	d7, [pc, #588]	; 801be28 <_svfprintf_r+0x2b0>
 801bbdc:	2500      	movs	r5, #0
 801bbde:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801bbe2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801bbe6:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801bbea:	ac25      	add	r4, sp, #148	; 0x94
 801bbec:	9422      	str	r4, [sp, #136]	; 0x88
 801bbee:	9505      	str	r5, [sp, #20]
 801bbf0:	950a      	str	r5, [sp, #40]	; 0x28
 801bbf2:	9512      	str	r5, [sp, #72]	; 0x48
 801bbf4:	9514      	str	r5, [sp, #80]	; 0x50
 801bbf6:	950f      	str	r5, [sp, #60]	; 0x3c
 801bbf8:	465b      	mov	r3, fp
 801bbfa:	461d      	mov	r5, r3
 801bbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc00:	b10a      	cbz	r2, 801bc06 <_svfprintf_r+0x8e>
 801bc02:	2a25      	cmp	r2, #37	; 0x25
 801bc04:	d1f9      	bne.n	801bbfa <_svfprintf_r+0x82>
 801bc06:	ebb5 070b 	subs.w	r7, r5, fp
 801bc0a:	d00d      	beq.n	801bc28 <_svfprintf_r+0xb0>
 801bc0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bc0e:	443b      	add	r3, r7
 801bc10:	9324      	str	r3, [sp, #144]	; 0x90
 801bc12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bc14:	3301      	adds	r3, #1
 801bc16:	2b07      	cmp	r3, #7
 801bc18:	e9c4 b700 	strd	fp, r7, [r4]
 801bc1c:	9323      	str	r3, [sp, #140]	; 0x8c
 801bc1e:	dc79      	bgt.n	801bd14 <_svfprintf_r+0x19c>
 801bc20:	3408      	adds	r4, #8
 801bc22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bc24:	443b      	add	r3, r7
 801bc26:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc28:	782b      	ldrb	r3, [r5, #0]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	f001 8140 	beq.w	801ceb0 <_svfprintf_r+0x1338>
 801bc30:	2300      	movs	r3, #0
 801bc32:	f04f 32ff 	mov.w	r2, #4294967295
 801bc36:	3501      	adds	r5, #1
 801bc38:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bc3c:	9204      	str	r2, [sp, #16]
 801bc3e:	9310      	str	r3, [sp, #64]	; 0x40
 801bc40:	4698      	mov	r8, r3
 801bc42:	270a      	movs	r7, #10
 801bc44:	212b      	movs	r1, #43	; 0x2b
 801bc46:	462a      	mov	r2, r5
 801bc48:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bc4c:	9307      	str	r3, [sp, #28]
 801bc4e:	920b      	str	r2, [sp, #44]	; 0x2c
 801bc50:	9b07      	ldr	r3, [sp, #28]
 801bc52:	3b20      	subs	r3, #32
 801bc54:	2b5a      	cmp	r3, #90	; 0x5a
 801bc56:	f200 85b4 	bhi.w	801c7c2 <_svfprintf_r+0xc4a>
 801bc5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801bc5e:	007e      	.short	0x007e
 801bc60:	05b205b2 	.word	0x05b205b2
 801bc64:	05b20086 	.word	0x05b20086
 801bc68:	05b205b2 	.word	0x05b205b2
 801bc6c:	05b20065 	.word	0x05b20065
 801bc70:	008905b2 	.word	0x008905b2
 801bc74:	05b20093 	.word	0x05b20093
 801bc78:	00960090 	.word	0x00960090
 801bc7c:	00b305b2 	.word	0x00b305b2
 801bc80:	00b600b6 	.word	0x00b600b6
 801bc84:	00b600b6 	.word	0x00b600b6
 801bc88:	00b600b6 	.word	0x00b600b6
 801bc8c:	00b600b6 	.word	0x00b600b6
 801bc90:	05b200b6 	.word	0x05b200b6
 801bc94:	05b205b2 	.word	0x05b205b2
 801bc98:	05b205b2 	.word	0x05b205b2
 801bc9c:	05b205b2 	.word	0x05b205b2
 801bca0:	05b20127 	.word	0x05b20127
 801bca4:	00fc00e9 	.word	0x00fc00e9
 801bca8:	01270127 	.word	0x01270127
 801bcac:	05b20127 	.word	0x05b20127
 801bcb0:	05b205b2 	.word	0x05b205b2
 801bcb4:	00c605b2 	.word	0x00c605b2
 801bcb8:	05b205b2 	.word	0x05b205b2
 801bcbc:	05b20492 	.word	0x05b20492
 801bcc0:	05b205b2 	.word	0x05b205b2
 801bcc4:	05b204d9 	.word	0x05b204d9
 801bcc8:	05b204fa 	.word	0x05b204fa
 801bccc:	051905b2 	.word	0x051905b2
 801bcd0:	05b205b2 	.word	0x05b205b2
 801bcd4:	05b205b2 	.word	0x05b205b2
 801bcd8:	05b205b2 	.word	0x05b205b2
 801bcdc:	05b205b2 	.word	0x05b205b2
 801bce0:	05b20127 	.word	0x05b20127
 801bce4:	00fe00e9 	.word	0x00fe00e9
 801bce8:	01270127 	.word	0x01270127
 801bcec:	00c90127 	.word	0x00c90127
 801bcf0:	00dd00fe 	.word	0x00dd00fe
 801bcf4:	00d605b2 	.word	0x00d605b2
 801bcf8:	046f05b2 	.word	0x046f05b2
 801bcfc:	04c80494 	.word	0x04c80494
 801bd00:	05b200dd 	.word	0x05b200dd
 801bd04:	007c04d9 	.word	0x007c04d9
 801bd08:	05b204fc 	.word	0x05b204fc
 801bd0c:	053605b2 	.word	0x053605b2
 801bd10:	007c05b2 	.word	0x007c05b2
 801bd14:	aa22      	add	r2, sp, #136	; 0x88
 801bd16:	4649      	mov	r1, r9
 801bd18:	4650      	mov	r0, sl
 801bd1a:	f004 ff4d 	bl	8020bb8 <__ssprint_r>
 801bd1e:	2800      	cmp	r0, #0
 801bd20:	f040 8132 	bne.w	801bf88 <_svfprintf_r+0x410>
 801bd24:	ac25      	add	r4, sp, #148	; 0x94
 801bd26:	e77c      	b.n	801bc22 <_svfprintf_r+0xaa>
 801bd28:	4650      	mov	r0, sl
 801bd2a:	f003 fff7 	bl	801fd1c <_localeconv_r>
 801bd2e:	6843      	ldr	r3, [r0, #4]
 801bd30:	9314      	str	r3, [sp, #80]	; 0x50
 801bd32:	4618      	mov	r0, r3
 801bd34:	f7e4 fa76 	bl	8000224 <strlen>
 801bd38:	9012      	str	r0, [sp, #72]	; 0x48
 801bd3a:	4650      	mov	r0, sl
 801bd3c:	f003 ffee 	bl	801fd1c <_localeconv_r>
 801bd40:	6883      	ldr	r3, [r0, #8]
 801bd42:	930a      	str	r3, [sp, #40]	; 0x28
 801bd44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bd46:	212b      	movs	r1, #43	; 0x2b
 801bd48:	b12b      	cbz	r3, 801bd56 <_svfprintf_r+0x1de>
 801bd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd4c:	b11b      	cbz	r3, 801bd56 <_svfprintf_r+0x1de>
 801bd4e:	781b      	ldrb	r3, [r3, #0]
 801bd50:	b10b      	cbz	r3, 801bd56 <_svfprintf_r+0x1de>
 801bd52:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801bd56:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801bd58:	e775      	b.n	801bc46 <_svfprintf_r+0xce>
 801bd5a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d1f9      	bne.n	801bd56 <_svfprintf_r+0x1de>
 801bd62:	2320      	movs	r3, #32
 801bd64:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bd68:	e7f5      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bd6a:	f048 0801 	orr.w	r8, r8, #1
 801bd6e:	e7f2      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bd70:	f856 3b04 	ldr.w	r3, [r6], #4
 801bd74:	9310      	str	r3, [sp, #64]	; 0x40
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	daed      	bge.n	801bd56 <_svfprintf_r+0x1de>
 801bd7a:	425b      	negs	r3, r3
 801bd7c:	9310      	str	r3, [sp, #64]	; 0x40
 801bd7e:	f048 0804 	orr.w	r8, r8, #4
 801bd82:	e7e8      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bd84:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801bd88:	e7e5      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bd8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bd8c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bd90:	9307      	str	r3, [sp, #28]
 801bd92:	2b2a      	cmp	r3, #42	; 0x2a
 801bd94:	d113      	bne.n	801bdbe <_svfprintf_r+0x246>
 801bd96:	f856 0b04 	ldr.w	r0, [r6], #4
 801bd9a:	920b      	str	r2, [sp, #44]	; 0x2c
 801bd9c:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801bda0:	9304      	str	r3, [sp, #16]
 801bda2:	e7d8      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bda4:	9804      	ldr	r0, [sp, #16]
 801bda6:	fb07 3300 	mla	r3, r7, r0, r3
 801bdaa:	9304      	str	r3, [sp, #16]
 801bdac:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bdb0:	9307      	str	r3, [sp, #28]
 801bdb2:	9b07      	ldr	r3, [sp, #28]
 801bdb4:	3b30      	subs	r3, #48	; 0x30
 801bdb6:	2b09      	cmp	r3, #9
 801bdb8:	d9f4      	bls.n	801bda4 <_svfprintf_r+0x22c>
 801bdba:	920b      	str	r2, [sp, #44]	; 0x2c
 801bdbc:	e748      	b.n	801bc50 <_svfprintf_r+0xd8>
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	9304      	str	r3, [sp, #16]
 801bdc2:	e7f6      	b.n	801bdb2 <_svfprintf_r+0x23a>
 801bdc4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801bdc8:	e7c5      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bdca:	2300      	movs	r3, #0
 801bdcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bdce:	9310      	str	r3, [sp, #64]	; 0x40
 801bdd0:	9b07      	ldr	r3, [sp, #28]
 801bdd2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bdd4:	3b30      	subs	r3, #48	; 0x30
 801bdd6:	fb07 3300 	mla	r3, r7, r0, r3
 801bdda:	9310      	str	r3, [sp, #64]	; 0x40
 801bddc:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bde0:	9307      	str	r3, [sp, #28]
 801bde2:	3b30      	subs	r3, #48	; 0x30
 801bde4:	2b09      	cmp	r3, #9
 801bde6:	d9f3      	bls.n	801bdd0 <_svfprintf_r+0x258>
 801bde8:	e7e7      	b.n	801bdba <_svfprintf_r+0x242>
 801bdea:	f048 0808 	orr.w	r8, r8, #8
 801bdee:	e7b2      	b.n	801bd56 <_svfprintf_r+0x1de>
 801bdf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bdf2:	781b      	ldrb	r3, [r3, #0]
 801bdf4:	2b68      	cmp	r3, #104	; 0x68
 801bdf6:	bf01      	itttt	eq
 801bdf8:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801bdfa:	3301      	addeq	r3, #1
 801bdfc:	930b      	streq	r3, [sp, #44]	; 0x2c
 801bdfe:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801be02:	bf18      	it	ne
 801be04:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801be08:	e7a5      	b.n	801bd56 <_svfprintf_r+0x1de>
 801be0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be0c:	781b      	ldrb	r3, [r3, #0]
 801be0e:	2b6c      	cmp	r3, #108	; 0x6c
 801be10:	d105      	bne.n	801be1e <_svfprintf_r+0x2a6>
 801be12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be14:	3301      	adds	r3, #1
 801be16:	930b      	str	r3, [sp, #44]	; 0x2c
 801be18:	f048 0820 	orr.w	r8, r8, #32
 801be1c:	e79b      	b.n	801bd56 <_svfprintf_r+0x1de>
 801be1e:	f048 0810 	orr.w	r8, r8, #16
 801be22:	e798      	b.n	801bd56 <_svfprintf_r+0x1de>
 801be24:	f3af 8000 	nop.w
	...
 801be30:	4632      	mov	r2, r6
 801be32:	2000      	movs	r0, #0
 801be34:	f852 3b04 	ldr.w	r3, [r2], #4
 801be38:	9206      	str	r2, [sp, #24]
 801be3a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801be3e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801be42:	2301      	movs	r3, #1
 801be44:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801be48:	9003      	str	r0, [sp, #12]
 801be4a:	9304      	str	r3, [sp, #16]
 801be4c:	4606      	mov	r6, r0
 801be4e:	4605      	mov	r5, r0
 801be50:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801be54:	e1b8      	b.n	801c1c8 <_svfprintf_r+0x650>
 801be56:	f048 0810 	orr.w	r8, r8, #16
 801be5a:	f018 0f20 	tst.w	r8, #32
 801be5e:	d012      	beq.n	801be86 <_svfprintf_r+0x30e>
 801be60:	3607      	adds	r6, #7
 801be62:	f026 0307 	bic.w	r3, r6, #7
 801be66:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801be6a:	9306      	str	r3, [sp, #24]
 801be6c:	2e00      	cmp	r6, #0
 801be6e:	f177 0300 	sbcs.w	r3, r7, #0
 801be72:	da06      	bge.n	801be82 <_svfprintf_r+0x30a>
 801be74:	4276      	negs	r6, r6
 801be76:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801be7a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801be7e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801be82:	2301      	movs	r3, #1
 801be84:	e38e      	b.n	801c5a4 <_svfprintf_r+0xa2c>
 801be86:	1d33      	adds	r3, r6, #4
 801be88:	f018 0f10 	tst.w	r8, #16
 801be8c:	9306      	str	r3, [sp, #24]
 801be8e:	d002      	beq.n	801be96 <_svfprintf_r+0x31e>
 801be90:	6836      	ldr	r6, [r6, #0]
 801be92:	17f7      	asrs	r7, r6, #31
 801be94:	e7ea      	b.n	801be6c <_svfprintf_r+0x2f4>
 801be96:	f018 0f40 	tst.w	r8, #64	; 0x40
 801be9a:	6836      	ldr	r6, [r6, #0]
 801be9c:	d001      	beq.n	801bea2 <_svfprintf_r+0x32a>
 801be9e:	b236      	sxth	r6, r6
 801bea0:	e7f7      	b.n	801be92 <_svfprintf_r+0x31a>
 801bea2:	f418 7f00 	tst.w	r8, #512	; 0x200
 801bea6:	bf18      	it	ne
 801bea8:	b276      	sxtbne	r6, r6
 801beaa:	e7f2      	b.n	801be92 <_svfprintf_r+0x31a>
 801beac:	3607      	adds	r6, #7
 801beae:	f026 0307 	bic.w	r3, r6, #7
 801beb2:	ecb3 7b02 	vldmia	r3!, {d7}
 801beb6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801beba:	9306      	str	r3, [sp, #24]
 801bebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bebe:	ee09 3a10 	vmov	s18, r3
 801bec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bec8:	ee09 3a90 	vmov	s19, r3
 801becc:	f04f 32ff 	mov.w	r2, #4294967295
 801bed0:	4b3a      	ldr	r3, [pc, #232]	; (801bfbc <_svfprintf_r+0x444>)
 801bed2:	ec51 0b19 	vmov	r0, r1, d9
 801bed6:	f7e4 fe59 	bl	8000b8c <__aeabi_dcmpun>
 801beda:	bb10      	cbnz	r0, 801bf22 <_svfprintf_r+0x3aa>
 801bedc:	4b37      	ldr	r3, [pc, #220]	; (801bfbc <_svfprintf_r+0x444>)
 801bede:	ec51 0b19 	vmov	r0, r1, d9
 801bee2:	f04f 32ff 	mov.w	r2, #4294967295
 801bee6:	f7e4 fe33 	bl	8000b50 <__aeabi_dcmple>
 801beea:	b9d0      	cbnz	r0, 801bf22 <_svfprintf_r+0x3aa>
 801beec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bef0:	2200      	movs	r2, #0
 801bef2:	2300      	movs	r3, #0
 801bef4:	f7e4 fe22 	bl	8000b3c <__aeabi_dcmplt>
 801bef8:	b110      	cbz	r0, 801bf00 <_svfprintf_r+0x388>
 801befa:	232d      	movs	r3, #45	; 0x2d
 801befc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801bf00:	4a2f      	ldr	r2, [pc, #188]	; (801bfc0 <_svfprintf_r+0x448>)
 801bf02:	4830      	ldr	r0, [pc, #192]	; (801bfc4 <_svfprintf_r+0x44c>)
 801bf04:	9b07      	ldr	r3, [sp, #28]
 801bf06:	2100      	movs	r1, #0
 801bf08:	2b47      	cmp	r3, #71	; 0x47
 801bf0a:	bfd4      	ite	le
 801bf0c:	4693      	movle	fp, r2
 801bf0e:	4683      	movgt	fp, r0
 801bf10:	2303      	movs	r3, #3
 801bf12:	e9cd 1303 	strd	r1, r3, [sp, #12]
 801bf16:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801bf1a:	2600      	movs	r6, #0
 801bf1c:	4633      	mov	r3, r6
 801bf1e:	f001 b802 	b.w	801cf26 <_svfprintf_r+0x13ae>
 801bf22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801bf26:	4610      	mov	r0, r2
 801bf28:	4619      	mov	r1, r3
 801bf2a:	f7e4 fe2f 	bl	8000b8c <__aeabi_dcmpun>
 801bf2e:	b140      	cbz	r0, 801bf42 <_svfprintf_r+0x3ca>
 801bf30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf32:	4a25      	ldr	r2, [pc, #148]	; (801bfc8 <_svfprintf_r+0x450>)
 801bf34:	4825      	ldr	r0, [pc, #148]	; (801bfcc <_svfprintf_r+0x454>)
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	bfbc      	itt	lt
 801bf3a:	232d      	movlt	r3, #45	; 0x2d
 801bf3c:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801bf40:	e7e0      	b.n	801bf04 <_svfprintf_r+0x38c>
 801bf42:	9b07      	ldr	r3, [sp, #28]
 801bf44:	f023 0320 	bic.w	r3, r3, #32
 801bf48:	2b41      	cmp	r3, #65	; 0x41
 801bf4a:	9308      	str	r3, [sp, #32]
 801bf4c:	d125      	bne.n	801bf9a <_svfprintf_r+0x422>
 801bf4e:	2330      	movs	r3, #48	; 0x30
 801bf50:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801bf54:	9b07      	ldr	r3, [sp, #28]
 801bf56:	2b61      	cmp	r3, #97	; 0x61
 801bf58:	bf0c      	ite	eq
 801bf5a:	2378      	moveq	r3, #120	; 0x78
 801bf5c:	2358      	movne	r3, #88	; 0x58
 801bf5e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801bf62:	9b04      	ldr	r3, [sp, #16]
 801bf64:	2b63      	cmp	r3, #99	; 0x63
 801bf66:	f048 0802 	orr.w	r8, r8, #2
 801bf6a:	dd31      	ble.n	801bfd0 <_svfprintf_r+0x458>
 801bf6c:	1c59      	adds	r1, r3, #1
 801bf6e:	4650      	mov	r0, sl
 801bf70:	f003 ff5a 	bl	801fe28 <_malloc_r>
 801bf74:	4683      	mov	fp, r0
 801bf76:	2800      	cmp	r0, #0
 801bf78:	f040 81fe 	bne.w	801c378 <_svfprintf_r+0x800>
 801bf7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bf80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf84:	f8a9 300c 	strh.w	r3, [r9, #12]
 801bf88:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801bf8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801bf90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bf92:	bf18      	it	ne
 801bf94:	f04f 33ff 	movne.w	r3, #4294967295
 801bf98:	e614      	b.n	801bbc4 <_svfprintf_r+0x4c>
 801bf9a:	9b04      	ldr	r3, [sp, #16]
 801bf9c:	3301      	adds	r3, #1
 801bf9e:	f000 81ed 	beq.w	801c37c <_svfprintf_r+0x804>
 801bfa2:	9b08      	ldr	r3, [sp, #32]
 801bfa4:	2b47      	cmp	r3, #71	; 0x47
 801bfa6:	f040 81ec 	bne.w	801c382 <_svfprintf_r+0x80a>
 801bfaa:	9b04      	ldr	r3, [sp, #16]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	f040 81e8 	bne.w	801c382 <_svfprintf_r+0x80a>
 801bfb2:	9303      	str	r3, [sp, #12]
 801bfb4:	2301      	movs	r3, #1
 801bfb6:	9304      	str	r3, [sp, #16]
 801bfb8:	e00d      	b.n	801bfd6 <_svfprintf_r+0x45e>
 801bfba:	bf00      	nop
 801bfbc:	7fefffff 	.word	0x7fefffff
 801bfc0:	0802a0f8 	.word	0x0802a0f8
 801bfc4:	0802a0fc 	.word	0x0802a0fc
 801bfc8:	0802a100 	.word	0x0802a100
 801bfcc:	0802a104 	.word	0x0802a104
 801bfd0:	9003      	str	r0, [sp, #12]
 801bfd2:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 801bfd6:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801bfda:	9311      	str	r3, [sp, #68]	; 0x44
 801bfdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f280 81d1 	bge.w	801c386 <_svfprintf_r+0x80e>
 801bfe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bfe6:	ee08 3a10 	vmov	s16, r3
 801bfea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801bff0:	ee08 3a90 	vmov	s17, r3
 801bff4:	232d      	movs	r3, #45	; 0x2d
 801bff6:	9318      	str	r3, [sp, #96]	; 0x60
 801bff8:	9b08      	ldr	r3, [sp, #32]
 801bffa:	2b41      	cmp	r3, #65	; 0x41
 801bffc:	f040 81e1 	bne.w	801c3c2 <_svfprintf_r+0x84a>
 801c000:	eeb0 0a48 	vmov.f32	s0, s16
 801c004:	eef0 0a68 	vmov.f32	s1, s17
 801c008:	a81c      	add	r0, sp, #112	; 0x70
 801c00a:	f004 fc8b 	bl	8020924 <frexp>
 801c00e:	2200      	movs	r2, #0
 801c010:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801c014:	ec51 0b10 	vmov	r0, r1, d0
 801c018:	f7e4 fb1e 	bl	8000658 <__aeabi_dmul>
 801c01c:	2200      	movs	r2, #0
 801c01e:	2300      	movs	r3, #0
 801c020:	4606      	mov	r6, r0
 801c022:	460f      	mov	r7, r1
 801c024:	f7e4 fd80 	bl	8000b28 <__aeabi_dcmpeq>
 801c028:	b108      	cbz	r0, 801c02e <_svfprintf_r+0x4b6>
 801c02a:	2301      	movs	r3, #1
 801c02c:	931c      	str	r3, [sp, #112]	; 0x70
 801c02e:	4bb4      	ldr	r3, [pc, #720]	; (801c300 <_svfprintf_r+0x788>)
 801c030:	4ab4      	ldr	r2, [pc, #720]	; (801c304 <_svfprintf_r+0x78c>)
 801c032:	9907      	ldr	r1, [sp, #28]
 801c034:	2961      	cmp	r1, #97	; 0x61
 801c036:	bf18      	it	ne
 801c038:	461a      	movne	r2, r3
 801c03a:	9b04      	ldr	r3, [sp, #16]
 801c03c:	9217      	str	r2, [sp, #92]	; 0x5c
 801c03e:	3b01      	subs	r3, #1
 801c040:	9305      	str	r3, [sp, #20]
 801c042:	465d      	mov	r5, fp
 801c044:	4bb0      	ldr	r3, [pc, #704]	; (801c308 <_svfprintf_r+0x790>)
 801c046:	2200      	movs	r2, #0
 801c048:	4630      	mov	r0, r6
 801c04a:	4639      	mov	r1, r7
 801c04c:	f7e4 fb04 	bl	8000658 <__aeabi_dmul>
 801c050:	460f      	mov	r7, r1
 801c052:	4606      	mov	r6, r0
 801c054:	f7e4 fdb0 	bl	8000bb8 <__aeabi_d2iz>
 801c058:	9019      	str	r0, [sp, #100]	; 0x64
 801c05a:	f7e4 fa93 	bl	8000584 <__aeabi_i2d>
 801c05e:	4602      	mov	r2, r0
 801c060:	460b      	mov	r3, r1
 801c062:	4630      	mov	r0, r6
 801c064:	4639      	mov	r1, r7
 801c066:	f7e4 f93f 	bl	80002e8 <__aeabi_dsub>
 801c06a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c06c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c06e:	5c9b      	ldrb	r3, [r3, r2]
 801c070:	f805 3b01 	strb.w	r3, [r5], #1
 801c074:	9b05      	ldr	r3, [sp, #20]
 801c076:	9309      	str	r3, [sp, #36]	; 0x24
 801c078:	1c5a      	adds	r2, r3, #1
 801c07a:	4606      	mov	r6, r0
 801c07c:	460f      	mov	r7, r1
 801c07e:	d007      	beq.n	801c090 <_svfprintf_r+0x518>
 801c080:	3b01      	subs	r3, #1
 801c082:	9305      	str	r3, [sp, #20]
 801c084:	2200      	movs	r2, #0
 801c086:	2300      	movs	r3, #0
 801c088:	f7e4 fd4e 	bl	8000b28 <__aeabi_dcmpeq>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	d0d9      	beq.n	801c044 <_svfprintf_r+0x4cc>
 801c090:	4b9e      	ldr	r3, [pc, #632]	; (801c30c <_svfprintf_r+0x794>)
 801c092:	2200      	movs	r2, #0
 801c094:	4630      	mov	r0, r6
 801c096:	4639      	mov	r1, r7
 801c098:	f7e4 fd6e 	bl	8000b78 <__aeabi_dcmpgt>
 801c09c:	b960      	cbnz	r0, 801c0b8 <_svfprintf_r+0x540>
 801c09e:	4b9b      	ldr	r3, [pc, #620]	; (801c30c <_svfprintf_r+0x794>)
 801c0a0:	2200      	movs	r2, #0
 801c0a2:	4630      	mov	r0, r6
 801c0a4:	4639      	mov	r1, r7
 801c0a6:	f7e4 fd3f 	bl	8000b28 <__aeabi_dcmpeq>
 801c0aa:	2800      	cmp	r0, #0
 801c0ac:	f000 8184 	beq.w	801c3b8 <_svfprintf_r+0x840>
 801c0b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c0b2:	07df      	lsls	r7, r3, #31
 801c0b4:	f140 8180 	bpl.w	801c3b8 <_svfprintf_r+0x840>
 801c0b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0ba:	9520      	str	r5, [sp, #128]	; 0x80
 801c0bc:	7bd9      	ldrb	r1, [r3, #15]
 801c0be:	2030      	movs	r0, #48	; 0x30
 801c0c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c0c2:	1e53      	subs	r3, r2, #1
 801c0c4:	9320      	str	r3, [sp, #128]	; 0x80
 801c0c6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801c0ca:	428b      	cmp	r3, r1
 801c0cc:	f000 8163 	beq.w	801c396 <_svfprintf_r+0x81e>
 801c0d0:	2b39      	cmp	r3, #57	; 0x39
 801c0d2:	bf0b      	itete	eq
 801c0d4:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801c0d6:	3301      	addne	r3, #1
 801c0d8:	7a9b      	ldrbeq	r3, [r3, #10]
 801c0da:	b2db      	uxtbne	r3, r3
 801c0dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c0e0:	eba5 030b 	sub.w	r3, r5, fp
 801c0e4:	9305      	str	r3, [sp, #20]
 801c0e6:	9b08      	ldr	r3, [sp, #32]
 801c0e8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c0ea:	2b47      	cmp	r3, #71	; 0x47
 801c0ec:	f040 81b1 	bne.w	801c452 <_svfprintf_r+0x8da>
 801c0f0:	1cee      	adds	r6, r5, #3
 801c0f2:	db03      	blt.n	801c0fc <_svfprintf_r+0x584>
 801c0f4:	9b04      	ldr	r3, [sp, #16]
 801c0f6:	42ab      	cmp	r3, r5
 801c0f8:	f280 81d6 	bge.w	801c4a8 <_svfprintf_r+0x930>
 801c0fc:	9b07      	ldr	r3, [sp, #28]
 801c0fe:	3b02      	subs	r3, #2
 801c100:	9307      	str	r3, [sp, #28]
 801c102:	9907      	ldr	r1, [sp, #28]
 801c104:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801c108:	f021 0120 	bic.w	r1, r1, #32
 801c10c:	2941      	cmp	r1, #65	; 0x41
 801c10e:	bf08      	it	eq
 801c110:	320f      	addeq	r2, #15
 801c112:	f105 33ff 	add.w	r3, r5, #4294967295
 801c116:	bf06      	itte	eq
 801c118:	b2d2      	uxtbeq	r2, r2
 801c11a:	2101      	moveq	r1, #1
 801c11c:	2100      	movne	r1, #0
 801c11e:	2b00      	cmp	r3, #0
 801c120:	931c      	str	r3, [sp, #112]	; 0x70
 801c122:	bfb8      	it	lt
 801c124:	f1c5 0301 	rsblt	r3, r5, #1
 801c128:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801c12c:	bfb4      	ite	lt
 801c12e:	222d      	movlt	r2, #45	; 0x2d
 801c130:	222b      	movge	r2, #43	; 0x2b
 801c132:	2b09      	cmp	r3, #9
 801c134:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801c138:	f340 81a4 	ble.w	801c484 <_svfprintf_r+0x90c>
 801c13c:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801c140:	260a      	movs	r6, #10
 801c142:	4611      	mov	r1, r2
 801c144:	fb93 f5f6 	sdiv	r5, r3, r6
 801c148:	fb06 3015 	mls	r0, r6, r5, r3
 801c14c:	3030      	adds	r0, #48	; 0x30
 801c14e:	f801 0c01 	strb.w	r0, [r1, #-1]
 801c152:	4618      	mov	r0, r3
 801c154:	2863      	cmp	r0, #99	; 0x63
 801c156:	f102 32ff 	add.w	r2, r2, #4294967295
 801c15a:	462b      	mov	r3, r5
 801c15c:	dcf1      	bgt.n	801c142 <_svfprintf_r+0x5ca>
 801c15e:	3330      	adds	r3, #48	; 0x30
 801c160:	1e88      	subs	r0, r1, #2
 801c162:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c166:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801c16a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c16e:	4603      	mov	r3, r0
 801c170:	42ab      	cmp	r3, r5
 801c172:	f0c0 8182 	bcc.w	801c47a <_svfprintf_r+0x902>
 801c176:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801c17a:	1a52      	subs	r2, r2, r1
 801c17c:	42a8      	cmp	r0, r5
 801c17e:	bf88      	it	hi
 801c180:	2200      	movhi	r2, #0
 801c182:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801c186:	441a      	add	r2, r3
 801c188:	ab1e      	add	r3, sp, #120	; 0x78
 801c18a:	1ad3      	subs	r3, r2, r3
 801c18c:	9a05      	ldr	r2, [sp, #20]
 801c18e:	9315      	str	r3, [sp, #84]	; 0x54
 801c190:	2a01      	cmp	r2, #1
 801c192:	4413      	add	r3, r2
 801c194:	9304      	str	r3, [sp, #16]
 801c196:	dc02      	bgt.n	801c19e <_svfprintf_r+0x626>
 801c198:	f018 0f01 	tst.w	r8, #1
 801c19c:	d003      	beq.n	801c1a6 <_svfprintf_r+0x62e>
 801c19e:	9b04      	ldr	r3, [sp, #16]
 801c1a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c1a2:	4413      	add	r3, r2
 801c1a4:	9304      	str	r3, [sp, #16]
 801c1a6:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801c1aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c1ae:	9311      	str	r3, [sp, #68]	; 0x44
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c1b6:	461d      	mov	r5, r3
 801c1b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c1ba:	b113      	cbz	r3, 801c1c2 <_svfprintf_r+0x64a>
 801c1bc:	232d      	movs	r3, #45	; 0x2d
 801c1be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801c1c2:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 801c1c6:	2600      	movs	r6, #0
 801c1c8:	9b04      	ldr	r3, [sp, #16]
 801c1ca:	42b3      	cmp	r3, r6
 801c1cc:	bfb8      	it	lt
 801c1ce:	4633      	movlt	r3, r6
 801c1d0:	9311      	str	r3, [sp, #68]	; 0x44
 801c1d2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c1d6:	b113      	cbz	r3, 801c1de <_svfprintf_r+0x666>
 801c1d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c1da:	3301      	adds	r3, #1
 801c1dc:	9311      	str	r3, [sp, #68]	; 0x44
 801c1de:	f018 0302 	ands.w	r3, r8, #2
 801c1e2:	9317      	str	r3, [sp, #92]	; 0x5c
 801c1e4:	bf1e      	ittt	ne
 801c1e6:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801c1e8:	3302      	addne	r3, #2
 801c1ea:	9311      	strne	r3, [sp, #68]	; 0x44
 801c1ec:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801c1f0:	9318      	str	r3, [sp, #96]	; 0x60
 801c1f2:	d11f      	bne.n	801c234 <_svfprintf_r+0x6bc>
 801c1f4:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c1f8:	1a9f      	subs	r7, r3, r2
 801c1fa:	2f00      	cmp	r7, #0
 801c1fc:	dd1a      	ble.n	801c234 <_svfprintf_r+0x6bc>
 801c1fe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c202:	4843      	ldr	r0, [pc, #268]	; (801c310 <_svfprintf_r+0x798>)
 801c204:	6020      	str	r0, [r4, #0]
 801c206:	2f10      	cmp	r7, #16
 801c208:	f103 0301 	add.w	r3, r3, #1
 801c20c:	f104 0108 	add.w	r1, r4, #8
 801c210:	f300 82e6 	bgt.w	801c7e0 <_svfprintf_r+0xc68>
 801c214:	6067      	str	r7, [r4, #4]
 801c216:	2b07      	cmp	r3, #7
 801c218:	4417      	add	r7, r2
 801c21a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c21e:	f340 82f2 	ble.w	801c806 <_svfprintf_r+0xc8e>
 801c222:	aa22      	add	r2, sp, #136	; 0x88
 801c224:	4649      	mov	r1, r9
 801c226:	4650      	mov	r0, sl
 801c228:	f004 fcc6 	bl	8020bb8 <__ssprint_r>
 801c22c:	2800      	cmp	r0, #0
 801c22e:	f040 861d 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c232:	ac25      	add	r4, sp, #148	; 0x94
 801c234:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801c238:	b173      	cbz	r3, 801c258 <_svfprintf_r+0x6e0>
 801c23a:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801c23e:	6023      	str	r3, [r4, #0]
 801c240:	2301      	movs	r3, #1
 801c242:	6063      	str	r3, [r4, #4]
 801c244:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c246:	3301      	adds	r3, #1
 801c248:	9324      	str	r3, [sp, #144]	; 0x90
 801c24a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c24c:	3301      	adds	r3, #1
 801c24e:	2b07      	cmp	r3, #7
 801c250:	9323      	str	r3, [sp, #140]	; 0x8c
 801c252:	f300 82da 	bgt.w	801c80a <_svfprintf_r+0xc92>
 801c256:	3408      	adds	r4, #8
 801c258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c25a:	b16b      	cbz	r3, 801c278 <_svfprintf_r+0x700>
 801c25c:	ab1b      	add	r3, sp, #108	; 0x6c
 801c25e:	6023      	str	r3, [r4, #0]
 801c260:	2302      	movs	r3, #2
 801c262:	6063      	str	r3, [r4, #4]
 801c264:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c266:	3302      	adds	r3, #2
 801c268:	9324      	str	r3, [sp, #144]	; 0x90
 801c26a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c26c:	3301      	adds	r3, #1
 801c26e:	2b07      	cmp	r3, #7
 801c270:	9323      	str	r3, [sp, #140]	; 0x8c
 801c272:	f300 82d4 	bgt.w	801c81e <_svfprintf_r+0xca6>
 801c276:	3408      	adds	r4, #8
 801c278:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c27a:	2b80      	cmp	r3, #128	; 0x80
 801c27c:	d11f      	bne.n	801c2be <_svfprintf_r+0x746>
 801c27e:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801c282:	1a9f      	subs	r7, r3, r2
 801c284:	2f00      	cmp	r7, #0
 801c286:	dd1a      	ble.n	801c2be <_svfprintf_r+0x746>
 801c288:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c28c:	4821      	ldr	r0, [pc, #132]	; (801c314 <_svfprintf_r+0x79c>)
 801c28e:	6020      	str	r0, [r4, #0]
 801c290:	2f10      	cmp	r7, #16
 801c292:	f103 0301 	add.w	r3, r3, #1
 801c296:	f104 0108 	add.w	r1, r4, #8
 801c29a:	f300 82ca 	bgt.w	801c832 <_svfprintf_r+0xcba>
 801c29e:	6067      	str	r7, [r4, #4]
 801c2a0:	2b07      	cmp	r3, #7
 801c2a2:	4417      	add	r7, r2
 801c2a4:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801c2a8:	f340 82d6 	ble.w	801c858 <_svfprintf_r+0xce0>
 801c2ac:	aa22      	add	r2, sp, #136	; 0x88
 801c2ae:	4649      	mov	r1, r9
 801c2b0:	4650      	mov	r0, sl
 801c2b2:	f004 fc81 	bl	8020bb8 <__ssprint_r>
 801c2b6:	2800      	cmp	r0, #0
 801c2b8:	f040 85d8 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c2bc:	ac25      	add	r4, sp, #148	; 0x94
 801c2be:	9b04      	ldr	r3, [sp, #16]
 801c2c0:	1af6      	subs	r6, r6, r3
 801c2c2:	2e00      	cmp	r6, #0
 801c2c4:	dd28      	ble.n	801c318 <_svfprintf_r+0x7a0>
 801c2c6:	4f13      	ldr	r7, [pc, #76]	; (801c314 <_svfprintf_r+0x79c>)
 801c2c8:	6027      	str	r7, [r4, #0]
 801c2ca:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c2ce:	2e10      	cmp	r6, #16
 801c2d0:	f103 0301 	add.w	r3, r3, #1
 801c2d4:	f104 0108 	add.w	r1, r4, #8
 801c2d8:	f300 82c0 	bgt.w	801c85c <_svfprintf_r+0xce4>
 801c2dc:	6066      	str	r6, [r4, #4]
 801c2de:	2b07      	cmp	r3, #7
 801c2e0:	4416      	add	r6, r2
 801c2e2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801c2e6:	f340 82cc 	ble.w	801c882 <_svfprintf_r+0xd0a>
 801c2ea:	aa22      	add	r2, sp, #136	; 0x88
 801c2ec:	4649      	mov	r1, r9
 801c2ee:	4650      	mov	r0, sl
 801c2f0:	f004 fc62 	bl	8020bb8 <__ssprint_r>
 801c2f4:	2800      	cmp	r0, #0
 801c2f6:	f040 85b9 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c2fa:	ac25      	add	r4, sp, #148	; 0x94
 801c2fc:	e00c      	b.n	801c318 <_svfprintf_r+0x7a0>
 801c2fe:	bf00      	nop
 801c300:	0802a119 	.word	0x0802a119
 801c304:	0802a108 	.word	0x0802a108
 801c308:	40300000 	.word	0x40300000
 801c30c:	3fe00000 	.word	0x3fe00000
 801c310:	0802a12c 	.word	0x0802a12c
 801c314:	0802a13c 	.word	0x0802a13c
 801c318:	f418 7f80 	tst.w	r8, #256	; 0x100
 801c31c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801c31e:	f040 82b7 	bne.w	801c890 <_svfprintf_r+0xd18>
 801c322:	9b04      	ldr	r3, [sp, #16]
 801c324:	f8c4 b000 	str.w	fp, [r4]
 801c328:	441e      	add	r6, r3
 801c32a:	6063      	str	r3, [r4, #4]
 801c32c:	9624      	str	r6, [sp, #144]	; 0x90
 801c32e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c330:	3301      	adds	r3, #1
 801c332:	2b07      	cmp	r3, #7
 801c334:	9323      	str	r3, [sp, #140]	; 0x8c
 801c336:	f300 82f0 	bgt.w	801c91a <_svfprintf_r+0xda2>
 801c33a:	3408      	adds	r4, #8
 801c33c:	f018 0f04 	tst.w	r8, #4
 801c340:	f040 8576 	bne.w	801ce30 <_svfprintf_r+0x12b8>
 801c344:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801c348:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c34a:	428a      	cmp	r2, r1
 801c34c:	bfac      	ite	ge
 801c34e:	189b      	addge	r3, r3, r2
 801c350:	185b      	addlt	r3, r3, r1
 801c352:	930f      	str	r3, [sp, #60]	; 0x3c
 801c354:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c356:	b13b      	cbz	r3, 801c368 <_svfprintf_r+0x7f0>
 801c358:	aa22      	add	r2, sp, #136	; 0x88
 801c35a:	4649      	mov	r1, r9
 801c35c:	4650      	mov	r0, sl
 801c35e:	f004 fc2b 	bl	8020bb8 <__ssprint_r>
 801c362:	2800      	cmp	r0, #0
 801c364:	f040 8582 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c368:	2300      	movs	r3, #0
 801c36a:	9323      	str	r3, [sp, #140]	; 0x8c
 801c36c:	9b03      	ldr	r3, [sp, #12]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	f040 8598 	bne.w	801cea4 <_svfprintf_r+0x132c>
 801c374:	ac25      	add	r4, sp, #148	; 0x94
 801c376:	e0ed      	b.n	801c554 <_svfprintf_r+0x9dc>
 801c378:	9003      	str	r0, [sp, #12]
 801c37a:	e62c      	b.n	801bfd6 <_svfprintf_r+0x45e>
 801c37c:	9003      	str	r0, [sp, #12]
 801c37e:	2306      	movs	r3, #6
 801c380:	e619      	b.n	801bfb6 <_svfprintf_r+0x43e>
 801c382:	9003      	str	r0, [sp, #12]
 801c384:	e627      	b.n	801bfd6 <_svfprintf_r+0x45e>
 801c386:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801c38a:	2300      	movs	r3, #0
 801c38c:	eeb0 8a47 	vmov.f32	s16, s14
 801c390:	eef0 8a67 	vmov.f32	s17, s15
 801c394:	e62f      	b.n	801bff6 <_svfprintf_r+0x47e>
 801c396:	f802 0c01 	strb.w	r0, [r2, #-1]
 801c39a:	e691      	b.n	801c0c0 <_svfprintf_r+0x548>
 801c39c:	f803 0b01 	strb.w	r0, [r3], #1
 801c3a0:	1aca      	subs	r2, r1, r3
 801c3a2:	2a00      	cmp	r2, #0
 801c3a4:	dafa      	bge.n	801c39c <_svfprintf_r+0x824>
 801c3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3aa:	3201      	adds	r2, #1
 801c3ac:	f103 0301 	add.w	r3, r3, #1
 801c3b0:	bfb8      	it	lt
 801c3b2:	2300      	movlt	r3, #0
 801c3b4:	441d      	add	r5, r3
 801c3b6:	e693      	b.n	801c0e0 <_svfprintf_r+0x568>
 801c3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3ba:	462b      	mov	r3, r5
 801c3bc:	18a9      	adds	r1, r5, r2
 801c3be:	2030      	movs	r0, #48	; 0x30
 801c3c0:	e7ee      	b.n	801c3a0 <_svfprintf_r+0x828>
 801c3c2:	9b08      	ldr	r3, [sp, #32]
 801c3c4:	2b46      	cmp	r3, #70	; 0x46
 801c3c6:	d005      	beq.n	801c3d4 <_svfprintf_r+0x85c>
 801c3c8:	2b45      	cmp	r3, #69	; 0x45
 801c3ca:	d11b      	bne.n	801c404 <_svfprintf_r+0x88c>
 801c3cc:	9b04      	ldr	r3, [sp, #16]
 801c3ce:	1c5d      	adds	r5, r3, #1
 801c3d0:	2102      	movs	r1, #2
 801c3d2:	e001      	b.n	801c3d8 <_svfprintf_r+0x860>
 801c3d4:	9d04      	ldr	r5, [sp, #16]
 801c3d6:	2103      	movs	r1, #3
 801c3d8:	ab20      	add	r3, sp, #128	; 0x80
 801c3da:	9301      	str	r3, [sp, #4]
 801c3dc:	ab1d      	add	r3, sp, #116	; 0x74
 801c3de:	9300      	str	r3, [sp, #0]
 801c3e0:	462a      	mov	r2, r5
 801c3e2:	ab1c      	add	r3, sp, #112	; 0x70
 801c3e4:	4650      	mov	r0, sl
 801c3e6:	eeb0 0a48 	vmov.f32	s0, s16
 801c3ea:	eef0 0a68 	vmov.f32	s1, s17
 801c3ee:	f002 fb5b 	bl	801eaa8 <_dtoa_r>
 801c3f2:	9b08      	ldr	r3, [sp, #32]
 801c3f4:	2b47      	cmp	r3, #71	; 0x47
 801c3f6:	4683      	mov	fp, r0
 801c3f8:	d106      	bne.n	801c408 <_svfprintf_r+0x890>
 801c3fa:	f018 0f01 	tst.w	r8, #1
 801c3fe:	d103      	bne.n	801c408 <_svfprintf_r+0x890>
 801c400:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801c402:	e66d      	b.n	801c0e0 <_svfprintf_r+0x568>
 801c404:	9d04      	ldr	r5, [sp, #16]
 801c406:	e7e3      	b.n	801c3d0 <_svfprintf_r+0x858>
 801c408:	9b08      	ldr	r3, [sp, #32]
 801c40a:	2b46      	cmp	r3, #70	; 0x46
 801c40c:	eb0b 0605 	add.w	r6, fp, r5
 801c410:	d10f      	bne.n	801c432 <_svfprintf_r+0x8ba>
 801c412:	f89b 3000 	ldrb.w	r3, [fp]
 801c416:	2b30      	cmp	r3, #48	; 0x30
 801c418:	d109      	bne.n	801c42e <_svfprintf_r+0x8b6>
 801c41a:	ec51 0b18 	vmov	r0, r1, d8
 801c41e:	2200      	movs	r2, #0
 801c420:	2300      	movs	r3, #0
 801c422:	f7e4 fb81 	bl	8000b28 <__aeabi_dcmpeq>
 801c426:	b910      	cbnz	r0, 801c42e <_svfprintf_r+0x8b6>
 801c428:	f1c5 0501 	rsb	r5, r5, #1
 801c42c:	951c      	str	r5, [sp, #112]	; 0x70
 801c42e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c430:	441e      	add	r6, r3
 801c432:	ec51 0b18 	vmov	r0, r1, d8
 801c436:	2200      	movs	r2, #0
 801c438:	2300      	movs	r3, #0
 801c43a:	f7e4 fb75 	bl	8000b28 <__aeabi_dcmpeq>
 801c43e:	b100      	cbz	r0, 801c442 <_svfprintf_r+0x8ca>
 801c440:	9620      	str	r6, [sp, #128]	; 0x80
 801c442:	2230      	movs	r2, #48	; 0x30
 801c444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c446:	429e      	cmp	r6, r3
 801c448:	d9da      	bls.n	801c400 <_svfprintf_r+0x888>
 801c44a:	1c59      	adds	r1, r3, #1
 801c44c:	9120      	str	r1, [sp, #128]	; 0x80
 801c44e:	701a      	strb	r2, [r3, #0]
 801c450:	e7f8      	b.n	801c444 <_svfprintf_r+0x8cc>
 801c452:	9b08      	ldr	r3, [sp, #32]
 801c454:	2b46      	cmp	r3, #70	; 0x46
 801c456:	f47f ae54 	bne.w	801c102 <_svfprintf_r+0x58a>
 801c45a:	9a04      	ldr	r2, [sp, #16]
 801c45c:	f008 0301 	and.w	r3, r8, #1
 801c460:	2d00      	cmp	r5, #0
 801c462:	ea43 0302 	orr.w	r3, r3, r2
 801c466:	dd1a      	ble.n	801c49e <_svfprintf_r+0x926>
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d034      	beq.n	801c4d6 <_svfprintf_r+0x95e>
 801c46c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c46e:	18eb      	adds	r3, r5, r3
 801c470:	441a      	add	r2, r3
 801c472:	9204      	str	r2, [sp, #16]
 801c474:	2366      	movs	r3, #102	; 0x66
 801c476:	9307      	str	r3, [sp, #28]
 801c478:	e033      	b.n	801c4e2 <_svfprintf_r+0x96a>
 801c47a:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c47e:	f802 6b01 	strb.w	r6, [r2], #1
 801c482:	e675      	b.n	801c170 <_svfprintf_r+0x5f8>
 801c484:	b941      	cbnz	r1, 801c498 <_svfprintf_r+0x920>
 801c486:	2230      	movs	r2, #48	; 0x30
 801c488:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801c48c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801c490:	3330      	adds	r3, #48	; 0x30
 801c492:	f802 3b01 	strb.w	r3, [r2], #1
 801c496:	e677      	b.n	801c188 <_svfprintf_r+0x610>
 801c498:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801c49c:	e7f8      	b.n	801c490 <_svfprintf_r+0x918>
 801c49e:	b1e3      	cbz	r3, 801c4da <_svfprintf_r+0x962>
 801c4a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4a2:	9a04      	ldr	r2, [sp, #16]
 801c4a4:	3301      	adds	r3, #1
 801c4a6:	e7e3      	b.n	801c470 <_svfprintf_r+0x8f8>
 801c4a8:	9b05      	ldr	r3, [sp, #20]
 801c4aa:	429d      	cmp	r5, r3
 801c4ac:	db07      	blt.n	801c4be <_svfprintf_r+0x946>
 801c4ae:	f018 0f01 	tst.w	r8, #1
 801c4b2:	d02d      	beq.n	801c510 <_svfprintf_r+0x998>
 801c4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4b6:	18eb      	adds	r3, r5, r3
 801c4b8:	9304      	str	r3, [sp, #16]
 801c4ba:	2367      	movs	r3, #103	; 0x67
 801c4bc:	e7db      	b.n	801c476 <_svfprintf_r+0x8fe>
 801c4be:	9b05      	ldr	r3, [sp, #20]
 801c4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4c2:	2d00      	cmp	r5, #0
 801c4c4:	4413      	add	r3, r2
 801c4c6:	9304      	str	r3, [sp, #16]
 801c4c8:	dcf7      	bgt.n	801c4ba <_svfprintf_r+0x942>
 801c4ca:	9a04      	ldr	r2, [sp, #16]
 801c4cc:	f1c5 0301 	rsb	r3, r5, #1
 801c4d0:	441a      	add	r2, r3
 801c4d2:	4613      	mov	r3, r2
 801c4d4:	e7f0      	b.n	801c4b8 <_svfprintf_r+0x940>
 801c4d6:	9504      	str	r5, [sp, #16]
 801c4d8:	e7cc      	b.n	801c474 <_svfprintf_r+0x8fc>
 801c4da:	2366      	movs	r3, #102	; 0x66
 801c4dc:	9307      	str	r3, [sp, #28]
 801c4de:	2301      	movs	r3, #1
 801c4e0:	9304      	str	r3, [sp, #16]
 801c4e2:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801c4e6:	9309      	str	r3, [sp, #36]	; 0x24
 801c4e8:	d025      	beq.n	801c536 <_svfprintf_r+0x9be>
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	2d00      	cmp	r5, #0
 801c4ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c4f2:	f77f ae61 	ble.w	801c1b8 <_svfprintf_r+0x640>
 801c4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4f8:	781b      	ldrb	r3, [r3, #0]
 801c4fa:	2bff      	cmp	r3, #255	; 0xff
 801c4fc:	d10a      	bne.n	801c514 <_svfprintf_r+0x99c>
 801c4fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c502:	9904      	ldr	r1, [sp, #16]
 801c504:	4413      	add	r3, r2
 801c506:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c508:	fb02 1303 	mla	r3, r2, r3, r1
 801c50c:	9304      	str	r3, [sp, #16]
 801c50e:	e653      	b.n	801c1b8 <_svfprintf_r+0x640>
 801c510:	9504      	str	r5, [sp, #16]
 801c512:	e7d2      	b.n	801c4ba <_svfprintf_r+0x942>
 801c514:	42ab      	cmp	r3, r5
 801c516:	daf2      	bge.n	801c4fe <_svfprintf_r+0x986>
 801c518:	1aed      	subs	r5, r5, r3
 801c51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c51c:	785b      	ldrb	r3, [r3, #1]
 801c51e:	b133      	cbz	r3, 801c52e <_svfprintf_r+0x9b6>
 801c520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c522:	3301      	adds	r3, #1
 801c524:	9309      	str	r3, [sp, #36]	; 0x24
 801c526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c528:	3301      	adds	r3, #1
 801c52a:	930a      	str	r3, [sp, #40]	; 0x28
 801c52c:	e7e3      	b.n	801c4f6 <_svfprintf_r+0x97e>
 801c52e:	9b08      	ldr	r3, [sp, #32]
 801c530:	3301      	adds	r3, #1
 801c532:	9308      	str	r3, [sp, #32]
 801c534:	e7df      	b.n	801c4f6 <_svfprintf_r+0x97e>
 801c536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c538:	9308      	str	r3, [sp, #32]
 801c53a:	e63d      	b.n	801c1b8 <_svfprintf_r+0x640>
 801c53c:	4632      	mov	r2, r6
 801c53e:	f018 0f20 	tst.w	r8, #32
 801c542:	f852 3b04 	ldr.w	r3, [r2], #4
 801c546:	9206      	str	r2, [sp, #24]
 801c548:	d009      	beq.n	801c55e <_svfprintf_r+0x9e6>
 801c54a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c54c:	4610      	mov	r0, r2
 801c54e:	17d1      	asrs	r1, r2, #31
 801c550:	e9c3 0100 	strd	r0, r1, [r3]
 801c554:	9e06      	ldr	r6, [sp, #24]
 801c556:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801c55a:	f7ff bb4d 	b.w	801bbf8 <_svfprintf_r+0x80>
 801c55e:	f018 0f10 	tst.w	r8, #16
 801c562:	d002      	beq.n	801c56a <_svfprintf_r+0x9f2>
 801c564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c566:	601a      	str	r2, [r3, #0]
 801c568:	e7f4      	b.n	801c554 <_svfprintf_r+0x9dc>
 801c56a:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c56e:	d002      	beq.n	801c576 <_svfprintf_r+0x9fe>
 801c570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c572:	801a      	strh	r2, [r3, #0]
 801c574:	e7ee      	b.n	801c554 <_svfprintf_r+0x9dc>
 801c576:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c57a:	d0f3      	beq.n	801c564 <_svfprintf_r+0x9ec>
 801c57c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c57e:	701a      	strb	r2, [r3, #0]
 801c580:	e7e8      	b.n	801c554 <_svfprintf_r+0x9dc>
 801c582:	f048 0810 	orr.w	r8, r8, #16
 801c586:	f018 0f20 	tst.w	r8, #32
 801c58a:	d01e      	beq.n	801c5ca <_svfprintf_r+0xa52>
 801c58c:	3607      	adds	r6, #7
 801c58e:	f026 0307 	bic.w	r3, r6, #7
 801c592:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c596:	9306      	str	r3, [sp, #24]
 801c598:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c59c:	2300      	movs	r3, #0
 801c59e:	2200      	movs	r2, #0
 801c5a0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801c5a4:	9a04      	ldr	r2, [sp, #16]
 801c5a6:	3201      	adds	r2, #1
 801c5a8:	f000 848d 	beq.w	801cec6 <_svfprintf_r+0x134e>
 801c5ac:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801c5b0:	9203      	str	r2, [sp, #12]
 801c5b2:	ea56 0207 	orrs.w	r2, r6, r7
 801c5b6:	f040 848c 	bne.w	801ced2 <_svfprintf_r+0x135a>
 801c5ba:	9a04      	ldr	r2, [sp, #16]
 801c5bc:	2a00      	cmp	r2, #0
 801c5be:	f000 80f5 	beq.w	801c7ac <_svfprintf_r+0xc34>
 801c5c2:	2b01      	cmp	r3, #1
 801c5c4:	f040 8488 	bne.w	801ced8 <_svfprintf_r+0x1360>
 801c5c8:	e097      	b.n	801c6fa <_svfprintf_r+0xb82>
 801c5ca:	1d33      	adds	r3, r6, #4
 801c5cc:	f018 0f10 	tst.w	r8, #16
 801c5d0:	9306      	str	r3, [sp, #24]
 801c5d2:	d001      	beq.n	801c5d8 <_svfprintf_r+0xa60>
 801c5d4:	6836      	ldr	r6, [r6, #0]
 801c5d6:	e003      	b.n	801c5e0 <_svfprintf_r+0xa68>
 801c5d8:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c5dc:	d002      	beq.n	801c5e4 <_svfprintf_r+0xa6c>
 801c5de:	8836      	ldrh	r6, [r6, #0]
 801c5e0:	2700      	movs	r7, #0
 801c5e2:	e7d9      	b.n	801c598 <_svfprintf_r+0xa20>
 801c5e4:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c5e8:	d0f4      	beq.n	801c5d4 <_svfprintf_r+0xa5c>
 801c5ea:	7836      	ldrb	r6, [r6, #0]
 801c5ec:	e7f8      	b.n	801c5e0 <_svfprintf_r+0xa68>
 801c5ee:	4633      	mov	r3, r6
 801c5f0:	2278      	movs	r2, #120	; 0x78
 801c5f2:	f853 6b04 	ldr.w	r6, [r3], #4
 801c5f6:	9306      	str	r3, [sp, #24]
 801c5f8:	f647 0330 	movw	r3, #30768	; 0x7830
 801c5fc:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801c600:	4ba1      	ldr	r3, [pc, #644]	; (801c888 <_svfprintf_r+0xd10>)
 801c602:	9316      	str	r3, [sp, #88]	; 0x58
 801c604:	2700      	movs	r7, #0
 801c606:	f048 0802 	orr.w	r8, r8, #2
 801c60a:	2302      	movs	r3, #2
 801c60c:	9207      	str	r2, [sp, #28]
 801c60e:	e7c6      	b.n	801c59e <_svfprintf_r+0xa26>
 801c610:	4633      	mov	r3, r6
 801c612:	2500      	movs	r5, #0
 801c614:	f853 bb04 	ldr.w	fp, [r3], #4
 801c618:	9306      	str	r3, [sp, #24]
 801c61a:	9b04      	ldr	r3, [sp, #16]
 801c61c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801c620:	1c59      	adds	r1, r3, #1
 801c622:	d010      	beq.n	801c646 <_svfprintf_r+0xace>
 801c624:	461a      	mov	r2, r3
 801c626:	4629      	mov	r1, r5
 801c628:	4658      	mov	r0, fp
 801c62a:	f7e3 fe09 	bl	8000240 <memchr>
 801c62e:	9003      	str	r0, [sp, #12]
 801c630:	2800      	cmp	r0, #0
 801c632:	f000 80d2 	beq.w	801c7da <_svfprintf_r+0xc62>
 801c636:	eba0 030b 	sub.w	r3, r0, fp
 801c63a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801c63e:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801c642:	462e      	mov	r6, r5
 801c644:	e5c0      	b.n	801c1c8 <_svfprintf_r+0x650>
 801c646:	4658      	mov	r0, fp
 801c648:	f7e3 fdec 	bl	8000224 <strlen>
 801c64c:	e9cd 5003 	strd	r5, r0, [sp, #12]
 801c650:	e463      	b.n	801bf1a <_svfprintf_r+0x3a2>
 801c652:	f048 0810 	orr.w	r8, r8, #16
 801c656:	f018 0f20 	tst.w	r8, #32
 801c65a:	d007      	beq.n	801c66c <_svfprintf_r+0xaf4>
 801c65c:	3607      	adds	r6, #7
 801c65e:	f026 0307 	bic.w	r3, r6, #7
 801c662:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c666:	9306      	str	r3, [sp, #24]
 801c668:	2301      	movs	r3, #1
 801c66a:	e798      	b.n	801c59e <_svfprintf_r+0xa26>
 801c66c:	1d33      	adds	r3, r6, #4
 801c66e:	f018 0f10 	tst.w	r8, #16
 801c672:	9306      	str	r3, [sp, #24]
 801c674:	d001      	beq.n	801c67a <_svfprintf_r+0xb02>
 801c676:	6836      	ldr	r6, [r6, #0]
 801c678:	e003      	b.n	801c682 <_svfprintf_r+0xb0a>
 801c67a:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c67e:	d002      	beq.n	801c686 <_svfprintf_r+0xb0e>
 801c680:	8836      	ldrh	r6, [r6, #0]
 801c682:	2700      	movs	r7, #0
 801c684:	e7f0      	b.n	801c668 <_svfprintf_r+0xaf0>
 801c686:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c68a:	d0f4      	beq.n	801c676 <_svfprintf_r+0xafe>
 801c68c:	7836      	ldrb	r6, [r6, #0]
 801c68e:	e7f8      	b.n	801c682 <_svfprintf_r+0xb0a>
 801c690:	4b7e      	ldr	r3, [pc, #504]	; (801c88c <_svfprintf_r+0xd14>)
 801c692:	9316      	str	r3, [sp, #88]	; 0x58
 801c694:	f018 0f20 	tst.w	r8, #32
 801c698:	d019      	beq.n	801c6ce <_svfprintf_r+0xb56>
 801c69a:	3607      	adds	r6, #7
 801c69c:	f026 0307 	bic.w	r3, r6, #7
 801c6a0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801c6a4:	9306      	str	r3, [sp, #24]
 801c6a6:	f018 0f01 	tst.w	r8, #1
 801c6aa:	d00a      	beq.n	801c6c2 <_svfprintf_r+0xb4a>
 801c6ac:	ea56 0307 	orrs.w	r3, r6, r7
 801c6b0:	d007      	beq.n	801c6c2 <_svfprintf_r+0xb4a>
 801c6b2:	2330      	movs	r3, #48	; 0x30
 801c6b4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801c6b8:	9b07      	ldr	r3, [sp, #28]
 801c6ba:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801c6be:	f048 0802 	orr.w	r8, r8, #2
 801c6c2:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801c6c6:	2302      	movs	r3, #2
 801c6c8:	e769      	b.n	801c59e <_svfprintf_r+0xa26>
 801c6ca:	4b6f      	ldr	r3, [pc, #444]	; (801c888 <_svfprintf_r+0xd10>)
 801c6cc:	e7e1      	b.n	801c692 <_svfprintf_r+0xb1a>
 801c6ce:	1d33      	adds	r3, r6, #4
 801c6d0:	f018 0f10 	tst.w	r8, #16
 801c6d4:	9306      	str	r3, [sp, #24]
 801c6d6:	d001      	beq.n	801c6dc <_svfprintf_r+0xb64>
 801c6d8:	6836      	ldr	r6, [r6, #0]
 801c6da:	e003      	b.n	801c6e4 <_svfprintf_r+0xb6c>
 801c6dc:	f018 0f40 	tst.w	r8, #64	; 0x40
 801c6e0:	d002      	beq.n	801c6e8 <_svfprintf_r+0xb70>
 801c6e2:	8836      	ldrh	r6, [r6, #0]
 801c6e4:	2700      	movs	r7, #0
 801c6e6:	e7de      	b.n	801c6a6 <_svfprintf_r+0xb2e>
 801c6e8:	f418 7f00 	tst.w	r8, #512	; 0x200
 801c6ec:	d0f4      	beq.n	801c6d8 <_svfprintf_r+0xb60>
 801c6ee:	7836      	ldrb	r6, [r6, #0]
 801c6f0:	e7f8      	b.n	801c6e4 <_svfprintf_r+0xb6c>
 801c6f2:	2f00      	cmp	r7, #0
 801c6f4:	bf08      	it	eq
 801c6f6:	2e0a      	cmpeq	r6, #10
 801c6f8:	d206      	bcs.n	801c708 <_svfprintf_r+0xb90>
 801c6fa:	3630      	adds	r6, #48	; 0x30
 801c6fc:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801c700:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 801c704:	f000 bc06 	b.w	801cf14 <_svfprintf_r+0x139c>
 801c708:	2300      	movs	r3, #0
 801c70a:	9305      	str	r3, [sp, #20]
 801c70c:	9b03      	ldr	r3, [sp, #12]
 801c70e:	ad4e      	add	r5, sp, #312	; 0x138
 801c710:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801c714:	220a      	movs	r2, #10
 801c716:	2300      	movs	r3, #0
 801c718:	4630      	mov	r0, r6
 801c71a:	4639      	mov	r1, r7
 801c71c:	f7e4 fac4 	bl	8000ca8 <__aeabi_uldivmod>
 801c720:	9b05      	ldr	r3, [sp, #20]
 801c722:	3230      	adds	r2, #48	; 0x30
 801c724:	3301      	adds	r3, #1
 801c726:	f105 3bff 	add.w	fp, r5, #4294967295
 801c72a:	f805 2c01 	strb.w	r2, [r5, #-1]
 801c72e:	9305      	str	r3, [sp, #20]
 801c730:	f1b8 0f00 	cmp.w	r8, #0
 801c734:	d019      	beq.n	801c76a <_svfprintf_r+0xbf2>
 801c736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c738:	9a05      	ldr	r2, [sp, #20]
 801c73a:	781b      	ldrb	r3, [r3, #0]
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d114      	bne.n	801c76a <_svfprintf_r+0xbf2>
 801c740:	2aff      	cmp	r2, #255	; 0xff
 801c742:	d012      	beq.n	801c76a <_svfprintf_r+0xbf2>
 801c744:	2f00      	cmp	r7, #0
 801c746:	bf08      	it	eq
 801c748:	2e0a      	cmpeq	r6, #10
 801c74a:	d30e      	bcc.n	801c76a <_svfprintf_r+0xbf2>
 801c74c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c74e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c750:	ebab 0b03 	sub.w	fp, fp, r3
 801c754:	461a      	mov	r2, r3
 801c756:	4658      	mov	r0, fp
 801c758:	f7ff f96b 	bl	801ba32 <strncpy>
 801c75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c75e:	785d      	ldrb	r5, [r3, #1]
 801c760:	b195      	cbz	r5, 801c788 <_svfprintf_r+0xc10>
 801c762:	3301      	adds	r3, #1
 801c764:	930a      	str	r3, [sp, #40]	; 0x28
 801c766:	2300      	movs	r3, #0
 801c768:	9305      	str	r3, [sp, #20]
 801c76a:	220a      	movs	r2, #10
 801c76c:	2300      	movs	r3, #0
 801c76e:	4630      	mov	r0, r6
 801c770:	4639      	mov	r1, r7
 801c772:	f7e4 fa99 	bl	8000ca8 <__aeabi_uldivmod>
 801c776:	2f00      	cmp	r7, #0
 801c778:	bf08      	it	eq
 801c77a:	2e0a      	cmpeq	r6, #10
 801c77c:	f0c0 83ca 	bcc.w	801cf14 <_svfprintf_r+0x139c>
 801c780:	4606      	mov	r6, r0
 801c782:	460f      	mov	r7, r1
 801c784:	465d      	mov	r5, fp
 801c786:	e7c5      	b.n	801c714 <_svfprintf_r+0xb9c>
 801c788:	9505      	str	r5, [sp, #20]
 801c78a:	e7ee      	b.n	801c76a <_svfprintf_r+0xbf2>
 801c78c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c78e:	f006 030f 	and.w	r3, r6, #15
 801c792:	5cd3      	ldrb	r3, [r2, r3]
 801c794:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801c798:	0933      	lsrs	r3, r6, #4
 801c79a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801c79e:	093a      	lsrs	r2, r7, #4
 801c7a0:	461e      	mov	r6, r3
 801c7a2:	4617      	mov	r7, r2
 801c7a4:	ea56 0307 	orrs.w	r3, r6, r7
 801c7a8:	d1f0      	bne.n	801c78c <_svfprintf_r+0xc14>
 801c7aa:	e3b3      	b.n	801cf14 <_svfprintf_r+0x139c>
 801c7ac:	b933      	cbnz	r3, 801c7bc <_svfprintf_r+0xc44>
 801c7ae:	f018 0f01 	tst.w	r8, #1
 801c7b2:	d003      	beq.n	801c7bc <_svfprintf_r+0xc44>
 801c7b4:	2330      	movs	r3, #48	; 0x30
 801c7b6:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801c7ba:	e7a1      	b.n	801c700 <_svfprintf_r+0xb88>
 801c7bc:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801c7c0:	e3a8      	b.n	801cf14 <_svfprintf_r+0x139c>
 801c7c2:	9b07      	ldr	r3, [sp, #28]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	f000 8373 	beq.w	801ceb0 <_svfprintf_r+0x1338>
 801c7ca:	2000      	movs	r0, #0
 801c7cc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801c7d0:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801c7d4:	9606      	str	r6, [sp, #24]
 801c7d6:	f7ff bb34 	b.w	801be42 <_svfprintf_r+0x2ca>
 801c7da:	9e03      	ldr	r6, [sp, #12]
 801c7dc:	f7ff bb9e 	b.w	801bf1c <_svfprintf_r+0x3a4>
 801c7e0:	2010      	movs	r0, #16
 801c7e2:	4402      	add	r2, r0
 801c7e4:	2b07      	cmp	r3, #7
 801c7e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c7ea:	6060      	str	r0, [r4, #4]
 801c7ec:	dd08      	ble.n	801c800 <_svfprintf_r+0xc88>
 801c7ee:	aa22      	add	r2, sp, #136	; 0x88
 801c7f0:	4649      	mov	r1, r9
 801c7f2:	4650      	mov	r0, sl
 801c7f4:	f004 f9e0 	bl	8020bb8 <__ssprint_r>
 801c7f8:	2800      	cmp	r0, #0
 801c7fa:	f040 8337 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c7fe:	a925      	add	r1, sp, #148	; 0x94
 801c800:	3f10      	subs	r7, #16
 801c802:	460c      	mov	r4, r1
 801c804:	e4fb      	b.n	801c1fe <_svfprintf_r+0x686>
 801c806:	460c      	mov	r4, r1
 801c808:	e514      	b.n	801c234 <_svfprintf_r+0x6bc>
 801c80a:	aa22      	add	r2, sp, #136	; 0x88
 801c80c:	4649      	mov	r1, r9
 801c80e:	4650      	mov	r0, sl
 801c810:	f004 f9d2 	bl	8020bb8 <__ssprint_r>
 801c814:	2800      	cmp	r0, #0
 801c816:	f040 8329 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c81a:	ac25      	add	r4, sp, #148	; 0x94
 801c81c:	e51c      	b.n	801c258 <_svfprintf_r+0x6e0>
 801c81e:	aa22      	add	r2, sp, #136	; 0x88
 801c820:	4649      	mov	r1, r9
 801c822:	4650      	mov	r0, sl
 801c824:	f004 f9c8 	bl	8020bb8 <__ssprint_r>
 801c828:	2800      	cmp	r0, #0
 801c82a:	f040 831f 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c82e:	ac25      	add	r4, sp, #148	; 0x94
 801c830:	e522      	b.n	801c278 <_svfprintf_r+0x700>
 801c832:	2010      	movs	r0, #16
 801c834:	4402      	add	r2, r0
 801c836:	2b07      	cmp	r3, #7
 801c838:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c83c:	6060      	str	r0, [r4, #4]
 801c83e:	dd08      	ble.n	801c852 <_svfprintf_r+0xcda>
 801c840:	aa22      	add	r2, sp, #136	; 0x88
 801c842:	4649      	mov	r1, r9
 801c844:	4650      	mov	r0, sl
 801c846:	f004 f9b7 	bl	8020bb8 <__ssprint_r>
 801c84a:	2800      	cmp	r0, #0
 801c84c:	f040 830e 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c850:	a925      	add	r1, sp, #148	; 0x94
 801c852:	3f10      	subs	r7, #16
 801c854:	460c      	mov	r4, r1
 801c856:	e517      	b.n	801c288 <_svfprintf_r+0x710>
 801c858:	460c      	mov	r4, r1
 801c85a:	e530      	b.n	801c2be <_svfprintf_r+0x746>
 801c85c:	2010      	movs	r0, #16
 801c85e:	4402      	add	r2, r0
 801c860:	2b07      	cmp	r3, #7
 801c862:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c866:	6060      	str	r0, [r4, #4]
 801c868:	dd08      	ble.n	801c87c <_svfprintf_r+0xd04>
 801c86a:	aa22      	add	r2, sp, #136	; 0x88
 801c86c:	4649      	mov	r1, r9
 801c86e:	4650      	mov	r0, sl
 801c870:	f004 f9a2 	bl	8020bb8 <__ssprint_r>
 801c874:	2800      	cmp	r0, #0
 801c876:	f040 82f9 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c87a:	a925      	add	r1, sp, #148	; 0x94
 801c87c:	3e10      	subs	r6, #16
 801c87e:	460c      	mov	r4, r1
 801c880:	e522      	b.n	801c2c8 <_svfprintf_r+0x750>
 801c882:	460c      	mov	r4, r1
 801c884:	e548      	b.n	801c318 <_svfprintf_r+0x7a0>
 801c886:	bf00      	nop
 801c888:	0802a108 	.word	0x0802a108
 801c88c:	0802a119 	.word	0x0802a119
 801c890:	9b07      	ldr	r3, [sp, #28]
 801c892:	2b65      	cmp	r3, #101	; 0x65
 801c894:	f340 8232 	ble.w	801ccfc <_svfprintf_r+0x1184>
 801c898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c89c:	2200      	movs	r2, #0
 801c89e:	2300      	movs	r3, #0
 801c8a0:	f7e4 f942 	bl	8000b28 <__aeabi_dcmpeq>
 801c8a4:	2800      	cmp	r0, #0
 801c8a6:	d068      	beq.n	801c97a <_svfprintf_r+0xe02>
 801c8a8:	4b6d      	ldr	r3, [pc, #436]	; (801ca60 <_svfprintf_r+0xee8>)
 801c8aa:	6023      	str	r3, [r4, #0]
 801c8ac:	2301      	movs	r3, #1
 801c8ae:	441e      	add	r6, r3
 801c8b0:	6063      	str	r3, [r4, #4]
 801c8b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c8b4:	9624      	str	r6, [sp, #144]	; 0x90
 801c8b6:	3301      	adds	r3, #1
 801c8b8:	2b07      	cmp	r3, #7
 801c8ba:	9323      	str	r3, [sp, #140]	; 0x8c
 801c8bc:	dc37      	bgt.n	801c92e <_svfprintf_r+0xdb6>
 801c8be:	3408      	adds	r4, #8
 801c8c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c8c2:	9a05      	ldr	r2, [sp, #20]
 801c8c4:	4293      	cmp	r3, r2
 801c8c6:	db03      	blt.n	801c8d0 <_svfprintf_r+0xd58>
 801c8c8:	f018 0f01 	tst.w	r8, #1
 801c8cc:	f43f ad36 	beq.w	801c33c <_svfprintf_r+0x7c4>
 801c8d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c8d2:	6023      	str	r3, [r4, #0]
 801c8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c8d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c8d8:	6063      	str	r3, [r4, #4]
 801c8da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c8dc:	4413      	add	r3, r2
 801c8de:	9324      	str	r3, [sp, #144]	; 0x90
 801c8e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c8e2:	3301      	adds	r3, #1
 801c8e4:	2b07      	cmp	r3, #7
 801c8e6:	9323      	str	r3, [sp, #140]	; 0x8c
 801c8e8:	dc2b      	bgt.n	801c942 <_svfprintf_r+0xdca>
 801c8ea:	3408      	adds	r4, #8
 801c8ec:	9b05      	ldr	r3, [sp, #20]
 801c8ee:	1e5d      	subs	r5, r3, #1
 801c8f0:	2d00      	cmp	r5, #0
 801c8f2:	f77f ad23 	ble.w	801c33c <_svfprintf_r+0x7c4>
 801c8f6:	4e5b      	ldr	r6, [pc, #364]	; (801ca64 <_svfprintf_r+0xeec>)
 801c8f8:	2710      	movs	r7, #16
 801c8fa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801c8fe:	2d10      	cmp	r5, #16
 801c900:	f103 0301 	add.w	r3, r3, #1
 801c904:	f104 0108 	add.w	r1, r4, #8
 801c908:	6026      	str	r6, [r4, #0]
 801c90a:	dc24      	bgt.n	801c956 <_svfprintf_r+0xdde>
 801c90c:	6065      	str	r5, [r4, #4]
 801c90e:	2b07      	cmp	r3, #7
 801c910:	4415      	add	r5, r2
 801c912:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801c916:	f340 8288 	ble.w	801ce2a <_svfprintf_r+0x12b2>
 801c91a:	aa22      	add	r2, sp, #136	; 0x88
 801c91c:	4649      	mov	r1, r9
 801c91e:	4650      	mov	r0, sl
 801c920:	f004 f94a 	bl	8020bb8 <__ssprint_r>
 801c924:	2800      	cmp	r0, #0
 801c926:	f040 82a1 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c92a:	ac25      	add	r4, sp, #148	; 0x94
 801c92c:	e506      	b.n	801c33c <_svfprintf_r+0x7c4>
 801c92e:	aa22      	add	r2, sp, #136	; 0x88
 801c930:	4649      	mov	r1, r9
 801c932:	4650      	mov	r0, sl
 801c934:	f004 f940 	bl	8020bb8 <__ssprint_r>
 801c938:	2800      	cmp	r0, #0
 801c93a:	f040 8297 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c93e:	ac25      	add	r4, sp, #148	; 0x94
 801c940:	e7be      	b.n	801c8c0 <_svfprintf_r+0xd48>
 801c942:	aa22      	add	r2, sp, #136	; 0x88
 801c944:	4649      	mov	r1, r9
 801c946:	4650      	mov	r0, sl
 801c948:	f004 f936 	bl	8020bb8 <__ssprint_r>
 801c94c:	2800      	cmp	r0, #0
 801c94e:	f040 828d 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c952:	ac25      	add	r4, sp, #148	; 0x94
 801c954:	e7ca      	b.n	801c8ec <_svfprintf_r+0xd74>
 801c956:	3210      	adds	r2, #16
 801c958:	2b07      	cmp	r3, #7
 801c95a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801c95e:	6067      	str	r7, [r4, #4]
 801c960:	dd08      	ble.n	801c974 <_svfprintf_r+0xdfc>
 801c962:	aa22      	add	r2, sp, #136	; 0x88
 801c964:	4649      	mov	r1, r9
 801c966:	4650      	mov	r0, sl
 801c968:	f004 f926 	bl	8020bb8 <__ssprint_r>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	f040 827d 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c972:	a925      	add	r1, sp, #148	; 0x94
 801c974:	3d10      	subs	r5, #16
 801c976:	460c      	mov	r4, r1
 801c978:	e7bf      	b.n	801c8fa <_svfprintf_r+0xd82>
 801c97a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	dc73      	bgt.n	801ca68 <_svfprintf_r+0xef0>
 801c980:	4b37      	ldr	r3, [pc, #220]	; (801ca60 <_svfprintf_r+0xee8>)
 801c982:	6023      	str	r3, [r4, #0]
 801c984:	2301      	movs	r3, #1
 801c986:	441e      	add	r6, r3
 801c988:	6063      	str	r3, [r4, #4]
 801c98a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c98c:	9624      	str	r6, [sp, #144]	; 0x90
 801c98e:	3301      	adds	r3, #1
 801c990:	2b07      	cmp	r3, #7
 801c992:	9323      	str	r3, [sp, #140]	; 0x8c
 801c994:	dc3d      	bgt.n	801ca12 <_svfprintf_r+0xe9a>
 801c996:	3408      	adds	r4, #8
 801c998:	9905      	ldr	r1, [sp, #20]
 801c99a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801c99c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c99e:	430a      	orrs	r2, r1
 801c9a0:	f008 0101 	and.w	r1, r8, #1
 801c9a4:	430a      	orrs	r2, r1
 801c9a6:	f43f acc9 	beq.w	801c33c <_svfprintf_r+0x7c4>
 801c9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9ac:	6022      	str	r2, [r4, #0]
 801c9ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c9b0:	6062      	str	r2, [r4, #4]
 801c9b2:	4413      	add	r3, r2
 801c9b4:	9324      	str	r3, [sp, #144]	; 0x90
 801c9b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c9b8:	3301      	adds	r3, #1
 801c9ba:	2b07      	cmp	r3, #7
 801c9bc:	9323      	str	r3, [sp, #140]	; 0x8c
 801c9be:	dc32      	bgt.n	801ca26 <_svfprintf_r+0xeae>
 801c9c0:	3408      	adds	r4, #8
 801c9c2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c9c4:	2d00      	cmp	r5, #0
 801c9c6:	da1b      	bge.n	801ca00 <_svfprintf_r+0xe88>
 801c9c8:	4e26      	ldr	r6, [pc, #152]	; (801ca64 <_svfprintf_r+0xeec>)
 801c9ca:	426d      	negs	r5, r5
 801c9cc:	4623      	mov	r3, r4
 801c9ce:	2710      	movs	r7, #16
 801c9d0:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801c9d4:	2d10      	cmp	r5, #16
 801c9d6:	f102 0201 	add.w	r2, r2, #1
 801c9da:	f104 0408 	add.w	r4, r4, #8
 801c9de:	601e      	str	r6, [r3, #0]
 801c9e0:	dc2b      	bgt.n	801ca3a <_svfprintf_r+0xec2>
 801c9e2:	605d      	str	r5, [r3, #4]
 801c9e4:	2a07      	cmp	r2, #7
 801c9e6:	440d      	add	r5, r1
 801c9e8:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801c9ec:	dd08      	ble.n	801ca00 <_svfprintf_r+0xe88>
 801c9ee:	aa22      	add	r2, sp, #136	; 0x88
 801c9f0:	4649      	mov	r1, r9
 801c9f2:	4650      	mov	r0, sl
 801c9f4:	f004 f8e0 	bl	8020bb8 <__ssprint_r>
 801c9f8:	2800      	cmp	r0, #0
 801c9fa:	f040 8237 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801c9fe:	ac25      	add	r4, sp, #148	; 0x94
 801ca00:	9b05      	ldr	r3, [sp, #20]
 801ca02:	9a05      	ldr	r2, [sp, #20]
 801ca04:	6063      	str	r3, [r4, #4]
 801ca06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca08:	f8c4 b000 	str.w	fp, [r4]
 801ca0c:	4413      	add	r3, r2
 801ca0e:	9324      	str	r3, [sp, #144]	; 0x90
 801ca10:	e48d      	b.n	801c32e <_svfprintf_r+0x7b6>
 801ca12:	aa22      	add	r2, sp, #136	; 0x88
 801ca14:	4649      	mov	r1, r9
 801ca16:	4650      	mov	r0, sl
 801ca18:	f004 f8ce 	bl	8020bb8 <__ssprint_r>
 801ca1c:	2800      	cmp	r0, #0
 801ca1e:	f040 8225 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801ca22:	ac25      	add	r4, sp, #148	; 0x94
 801ca24:	e7b8      	b.n	801c998 <_svfprintf_r+0xe20>
 801ca26:	aa22      	add	r2, sp, #136	; 0x88
 801ca28:	4649      	mov	r1, r9
 801ca2a:	4650      	mov	r0, sl
 801ca2c:	f004 f8c4 	bl	8020bb8 <__ssprint_r>
 801ca30:	2800      	cmp	r0, #0
 801ca32:	f040 821b 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801ca36:	ac25      	add	r4, sp, #148	; 0x94
 801ca38:	e7c3      	b.n	801c9c2 <_svfprintf_r+0xe4a>
 801ca3a:	3110      	adds	r1, #16
 801ca3c:	2a07      	cmp	r2, #7
 801ca3e:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801ca42:	605f      	str	r7, [r3, #4]
 801ca44:	dd08      	ble.n	801ca58 <_svfprintf_r+0xee0>
 801ca46:	aa22      	add	r2, sp, #136	; 0x88
 801ca48:	4649      	mov	r1, r9
 801ca4a:	4650      	mov	r0, sl
 801ca4c:	f004 f8b4 	bl	8020bb8 <__ssprint_r>
 801ca50:	2800      	cmp	r0, #0
 801ca52:	f040 820b 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801ca56:	ac25      	add	r4, sp, #148	; 0x94
 801ca58:	3d10      	subs	r5, #16
 801ca5a:	4623      	mov	r3, r4
 801ca5c:	e7b8      	b.n	801c9d0 <_svfprintf_r+0xe58>
 801ca5e:	bf00      	nop
 801ca60:	0802a12a 	.word	0x0802a12a
 801ca64:	0802a13c 	.word	0x0802a13c
 801ca68:	9b05      	ldr	r3, [sp, #20]
 801ca6a:	42ab      	cmp	r3, r5
 801ca6c:	bfa8      	it	ge
 801ca6e:	462b      	movge	r3, r5
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	461f      	mov	r7, r3
 801ca74:	dd0a      	ble.n	801ca8c <_svfprintf_r+0xf14>
 801ca76:	441e      	add	r6, r3
 801ca78:	e9c4 b300 	strd	fp, r3, [r4]
 801ca7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ca7e:	9624      	str	r6, [sp, #144]	; 0x90
 801ca80:	3301      	adds	r3, #1
 801ca82:	2b07      	cmp	r3, #7
 801ca84:	9323      	str	r3, [sp, #140]	; 0x8c
 801ca86:	f300 8086 	bgt.w	801cb96 <_svfprintf_r+0x101e>
 801ca8a:	3408      	adds	r4, #8
 801ca8c:	2f00      	cmp	r7, #0
 801ca8e:	bfac      	ite	ge
 801ca90:	1bee      	subge	r6, r5, r7
 801ca92:	462e      	movlt	r6, r5
 801ca94:	2e00      	cmp	r6, #0
 801ca96:	dd19      	ble.n	801cacc <_svfprintf_r+0xf54>
 801ca98:	4f97      	ldr	r7, [pc, #604]	; (801ccf8 <_svfprintf_r+0x1180>)
 801ca9a:	6027      	str	r7, [r4, #0]
 801ca9c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801caa0:	2e10      	cmp	r6, #16
 801caa2:	f103 0301 	add.w	r3, r3, #1
 801caa6:	f104 0108 	add.w	r1, r4, #8
 801caaa:	dc7e      	bgt.n	801cbaa <_svfprintf_r+0x1032>
 801caac:	6066      	str	r6, [r4, #4]
 801caae:	2b07      	cmp	r3, #7
 801cab0:	4416      	add	r6, r2
 801cab2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801cab6:	f340 808b 	ble.w	801cbd0 <_svfprintf_r+0x1058>
 801caba:	aa22      	add	r2, sp, #136	; 0x88
 801cabc:	4649      	mov	r1, r9
 801cabe:	4650      	mov	r0, sl
 801cac0:	f004 f87a 	bl	8020bb8 <__ssprint_r>
 801cac4:	2800      	cmp	r0, #0
 801cac6:	f040 81d1 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801caca:	ac25      	add	r4, sp, #148	; 0x94
 801cacc:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801cad0:	445d      	add	r5, fp
 801cad2:	d00b      	beq.n	801caec <_svfprintf_r+0xf74>
 801cad4:	4e88      	ldr	r6, [pc, #544]	; (801ccf8 <_svfprintf_r+0x1180>)
 801cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d17b      	bne.n	801cbd4 <_svfprintf_r+0x105c>
 801cadc:	9b08      	ldr	r3, [sp, #32]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d17b      	bne.n	801cbda <_svfprintf_r+0x1062>
 801cae2:	9b05      	ldr	r3, [sp, #20]
 801cae4:	445b      	add	r3, fp
 801cae6:	429d      	cmp	r5, r3
 801cae8:	bf28      	it	cs
 801caea:	461d      	movcs	r5, r3
 801caec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801caee:	9a05      	ldr	r2, [sp, #20]
 801caf0:	4293      	cmp	r3, r2
 801caf2:	db02      	blt.n	801cafa <_svfprintf_r+0xf82>
 801caf4:	f018 0f01 	tst.w	r8, #1
 801caf8:	d00e      	beq.n	801cb18 <_svfprintf_r+0xfa0>
 801cafa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cafc:	6023      	str	r3, [r4, #0]
 801cafe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb02:	6063      	str	r3, [r4, #4]
 801cb04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb06:	4413      	add	r3, r2
 801cb08:	9324      	str	r3, [sp, #144]	; 0x90
 801cb0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb0c:	3301      	adds	r3, #1
 801cb0e:	2b07      	cmp	r3, #7
 801cb10:	9323      	str	r3, [sp, #140]	; 0x8c
 801cb12:	f300 80dd 	bgt.w	801ccd0 <_svfprintf_r+0x1158>
 801cb16:	3408      	adds	r4, #8
 801cb18:	9b05      	ldr	r3, [sp, #20]
 801cb1a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801cb1c:	eb0b 0203 	add.w	r2, fp, r3
 801cb20:	1b9e      	subs	r6, r3, r6
 801cb22:	1b52      	subs	r2, r2, r5
 801cb24:	4296      	cmp	r6, r2
 801cb26:	bfa8      	it	ge
 801cb28:	4616      	movge	r6, r2
 801cb2a:	2e00      	cmp	r6, #0
 801cb2c:	dd0b      	ble.n	801cb46 <_svfprintf_r+0xfce>
 801cb2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb30:	4433      	add	r3, r6
 801cb32:	9324      	str	r3, [sp, #144]	; 0x90
 801cb34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb36:	3301      	adds	r3, #1
 801cb38:	2b07      	cmp	r3, #7
 801cb3a:	e9c4 5600 	strd	r5, r6, [r4]
 801cb3e:	9323      	str	r3, [sp, #140]	; 0x8c
 801cb40:	f300 80d0 	bgt.w	801cce4 <_svfprintf_r+0x116c>
 801cb44:	3408      	adds	r4, #8
 801cb46:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801cb48:	9b05      	ldr	r3, [sp, #20]
 801cb4a:	2e00      	cmp	r6, #0
 801cb4c:	eba3 0505 	sub.w	r5, r3, r5
 801cb50:	bfa8      	it	ge
 801cb52:	1bad      	subge	r5, r5, r6
 801cb54:	2d00      	cmp	r5, #0
 801cb56:	f77f abf1 	ble.w	801c33c <_svfprintf_r+0x7c4>
 801cb5a:	4e67      	ldr	r6, [pc, #412]	; (801ccf8 <_svfprintf_r+0x1180>)
 801cb5c:	2710      	movs	r7, #16
 801cb5e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801cb62:	2d10      	cmp	r5, #16
 801cb64:	f103 0301 	add.w	r3, r3, #1
 801cb68:	f104 0108 	add.w	r1, r4, #8
 801cb6c:	6026      	str	r6, [r4, #0]
 801cb6e:	f77f aecd 	ble.w	801c90c <_svfprintf_r+0xd94>
 801cb72:	3210      	adds	r2, #16
 801cb74:	2b07      	cmp	r3, #7
 801cb76:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cb7a:	6067      	str	r7, [r4, #4]
 801cb7c:	dd08      	ble.n	801cb90 <_svfprintf_r+0x1018>
 801cb7e:	aa22      	add	r2, sp, #136	; 0x88
 801cb80:	4649      	mov	r1, r9
 801cb82:	4650      	mov	r0, sl
 801cb84:	f004 f818 	bl	8020bb8 <__ssprint_r>
 801cb88:	2800      	cmp	r0, #0
 801cb8a:	f040 816f 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cb8e:	a925      	add	r1, sp, #148	; 0x94
 801cb90:	3d10      	subs	r5, #16
 801cb92:	460c      	mov	r4, r1
 801cb94:	e7e3      	b.n	801cb5e <_svfprintf_r+0xfe6>
 801cb96:	aa22      	add	r2, sp, #136	; 0x88
 801cb98:	4649      	mov	r1, r9
 801cb9a:	4650      	mov	r0, sl
 801cb9c:	f004 f80c 	bl	8020bb8 <__ssprint_r>
 801cba0:	2800      	cmp	r0, #0
 801cba2:	f040 8163 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cba6:	ac25      	add	r4, sp, #148	; 0x94
 801cba8:	e770      	b.n	801ca8c <_svfprintf_r+0xf14>
 801cbaa:	2010      	movs	r0, #16
 801cbac:	4402      	add	r2, r0
 801cbae:	2b07      	cmp	r3, #7
 801cbb0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cbb4:	6060      	str	r0, [r4, #4]
 801cbb6:	dd08      	ble.n	801cbca <_svfprintf_r+0x1052>
 801cbb8:	aa22      	add	r2, sp, #136	; 0x88
 801cbba:	4649      	mov	r1, r9
 801cbbc:	4650      	mov	r0, sl
 801cbbe:	f003 fffb 	bl	8020bb8 <__ssprint_r>
 801cbc2:	2800      	cmp	r0, #0
 801cbc4:	f040 8152 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cbc8:	a925      	add	r1, sp, #148	; 0x94
 801cbca:	3e10      	subs	r6, #16
 801cbcc:	460c      	mov	r4, r1
 801cbce:	e764      	b.n	801ca9a <_svfprintf_r+0xf22>
 801cbd0:	460c      	mov	r4, r1
 801cbd2:	e77b      	b.n	801cacc <_svfprintf_r+0xf54>
 801cbd4:	9b08      	ldr	r3, [sp, #32]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d04a      	beq.n	801cc70 <_svfprintf_r+0x10f8>
 801cbda:	9b08      	ldr	r3, [sp, #32]
 801cbdc:	3b01      	subs	r3, #1
 801cbde:	9308      	str	r3, [sp, #32]
 801cbe0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbe2:	6023      	str	r3, [r4, #0]
 801cbe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cbe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cbe8:	6063      	str	r3, [r4, #4]
 801cbea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbec:	4413      	add	r3, r2
 801cbee:	9324      	str	r3, [sp, #144]	; 0x90
 801cbf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cbf2:	3301      	adds	r3, #1
 801cbf4:	2b07      	cmp	r3, #7
 801cbf6:	9323      	str	r3, [sp, #140]	; 0x8c
 801cbf8:	dc41      	bgt.n	801cc7e <_svfprintf_r+0x1106>
 801cbfa:	3408      	adds	r4, #8
 801cbfc:	9b05      	ldr	r3, [sp, #20]
 801cbfe:	445b      	add	r3, fp
 801cc00:	1b5a      	subs	r2, r3, r5
 801cc02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc04:	781b      	ldrb	r3, [r3, #0]
 801cc06:	4293      	cmp	r3, r2
 801cc08:	bfa8      	it	ge
 801cc0a:	4613      	movge	r3, r2
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	461f      	mov	r7, r3
 801cc10:	dd0a      	ble.n	801cc28 <_svfprintf_r+0x10b0>
 801cc12:	e9c4 5300 	strd	r5, r3, [r4]
 801cc16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc18:	443b      	add	r3, r7
 801cc1a:	9324      	str	r3, [sp, #144]	; 0x90
 801cc1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc1e:	3301      	adds	r3, #1
 801cc20:	2b07      	cmp	r3, #7
 801cc22:	9323      	str	r3, [sp, #140]	; 0x8c
 801cc24:	dc35      	bgt.n	801cc92 <_svfprintf_r+0x111a>
 801cc26:	3408      	adds	r4, #8
 801cc28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc2a:	781b      	ldrb	r3, [r3, #0]
 801cc2c:	2f00      	cmp	r7, #0
 801cc2e:	bfac      	ite	ge
 801cc30:	1bdf      	subge	r7, r3, r7
 801cc32:	461f      	movlt	r7, r3
 801cc34:	2f00      	cmp	r7, #0
 801cc36:	dd17      	ble.n	801cc68 <_svfprintf_r+0x10f0>
 801cc38:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801cc3c:	2f10      	cmp	r7, #16
 801cc3e:	f102 0201 	add.w	r2, r2, #1
 801cc42:	f104 0108 	add.w	r1, r4, #8
 801cc46:	6026      	str	r6, [r4, #0]
 801cc48:	dc2d      	bgt.n	801cca6 <_svfprintf_r+0x112e>
 801cc4a:	443b      	add	r3, r7
 801cc4c:	2a07      	cmp	r2, #7
 801cc4e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801cc52:	6067      	str	r7, [r4, #4]
 801cc54:	dd3a      	ble.n	801cccc <_svfprintf_r+0x1154>
 801cc56:	aa22      	add	r2, sp, #136	; 0x88
 801cc58:	4649      	mov	r1, r9
 801cc5a:	4650      	mov	r0, sl
 801cc5c:	f003 ffac 	bl	8020bb8 <__ssprint_r>
 801cc60:	2800      	cmp	r0, #0
 801cc62:	f040 8103 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cc66:	ac25      	add	r4, sp, #148	; 0x94
 801cc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc6a:	781b      	ldrb	r3, [r3, #0]
 801cc6c:	441d      	add	r5, r3
 801cc6e:	e732      	b.n	801cad6 <_svfprintf_r+0xf5e>
 801cc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc72:	3b01      	subs	r3, #1
 801cc74:	930a      	str	r3, [sp, #40]	; 0x28
 801cc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc78:	3b01      	subs	r3, #1
 801cc7a:	9309      	str	r3, [sp, #36]	; 0x24
 801cc7c:	e7b0      	b.n	801cbe0 <_svfprintf_r+0x1068>
 801cc7e:	aa22      	add	r2, sp, #136	; 0x88
 801cc80:	4649      	mov	r1, r9
 801cc82:	4650      	mov	r0, sl
 801cc84:	f003 ff98 	bl	8020bb8 <__ssprint_r>
 801cc88:	2800      	cmp	r0, #0
 801cc8a:	f040 80ef 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cc8e:	ac25      	add	r4, sp, #148	; 0x94
 801cc90:	e7b4      	b.n	801cbfc <_svfprintf_r+0x1084>
 801cc92:	aa22      	add	r2, sp, #136	; 0x88
 801cc94:	4649      	mov	r1, r9
 801cc96:	4650      	mov	r0, sl
 801cc98:	f003 ff8e 	bl	8020bb8 <__ssprint_r>
 801cc9c:	2800      	cmp	r0, #0
 801cc9e:	f040 80e5 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cca2:	ac25      	add	r4, sp, #148	; 0x94
 801cca4:	e7c0      	b.n	801cc28 <_svfprintf_r+0x10b0>
 801cca6:	2010      	movs	r0, #16
 801cca8:	4403      	add	r3, r0
 801ccaa:	2a07      	cmp	r2, #7
 801ccac:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801ccb0:	6060      	str	r0, [r4, #4]
 801ccb2:	dd08      	ble.n	801ccc6 <_svfprintf_r+0x114e>
 801ccb4:	aa22      	add	r2, sp, #136	; 0x88
 801ccb6:	4649      	mov	r1, r9
 801ccb8:	4650      	mov	r0, sl
 801ccba:	f003 ff7d 	bl	8020bb8 <__ssprint_r>
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	f040 80d4 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801ccc4:	a925      	add	r1, sp, #148	; 0x94
 801ccc6:	3f10      	subs	r7, #16
 801ccc8:	460c      	mov	r4, r1
 801ccca:	e7b5      	b.n	801cc38 <_svfprintf_r+0x10c0>
 801cccc:	460c      	mov	r4, r1
 801ccce:	e7cb      	b.n	801cc68 <_svfprintf_r+0x10f0>
 801ccd0:	aa22      	add	r2, sp, #136	; 0x88
 801ccd2:	4649      	mov	r1, r9
 801ccd4:	4650      	mov	r0, sl
 801ccd6:	f003 ff6f 	bl	8020bb8 <__ssprint_r>
 801ccda:	2800      	cmp	r0, #0
 801ccdc:	f040 80c6 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cce0:	ac25      	add	r4, sp, #148	; 0x94
 801cce2:	e719      	b.n	801cb18 <_svfprintf_r+0xfa0>
 801cce4:	aa22      	add	r2, sp, #136	; 0x88
 801cce6:	4649      	mov	r1, r9
 801cce8:	4650      	mov	r0, sl
 801ccea:	f003 ff65 	bl	8020bb8 <__ssprint_r>
 801ccee:	2800      	cmp	r0, #0
 801ccf0:	f040 80bc 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801ccf4:	ac25      	add	r4, sp, #148	; 0x94
 801ccf6:	e726      	b.n	801cb46 <_svfprintf_r+0xfce>
 801ccf8:	0802a13c 	.word	0x0802a13c
 801ccfc:	9a05      	ldr	r2, [sp, #20]
 801ccfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd00:	2a01      	cmp	r2, #1
 801cd02:	f106 0601 	add.w	r6, r6, #1
 801cd06:	f103 0301 	add.w	r3, r3, #1
 801cd0a:	f104 0508 	add.w	r5, r4, #8
 801cd0e:	dc02      	bgt.n	801cd16 <_svfprintf_r+0x119e>
 801cd10:	f018 0f01 	tst.w	r8, #1
 801cd14:	d07e      	beq.n	801ce14 <_svfprintf_r+0x129c>
 801cd16:	2201      	movs	r2, #1
 801cd18:	2b07      	cmp	r3, #7
 801cd1a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801cd1e:	f8c4 b000 	str.w	fp, [r4]
 801cd22:	6062      	str	r2, [r4, #4]
 801cd24:	dd08      	ble.n	801cd38 <_svfprintf_r+0x11c0>
 801cd26:	aa22      	add	r2, sp, #136	; 0x88
 801cd28:	4649      	mov	r1, r9
 801cd2a:	4650      	mov	r0, sl
 801cd2c:	f003 ff44 	bl	8020bb8 <__ssprint_r>
 801cd30:	2800      	cmp	r0, #0
 801cd32:	f040 809b 	bne.w	801ce6c <_svfprintf_r+0x12f4>
 801cd36:	ad25      	add	r5, sp, #148	; 0x94
 801cd38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd3a:	602b      	str	r3, [r5, #0]
 801cd3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd40:	606b      	str	r3, [r5, #4]
 801cd42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd44:	4413      	add	r3, r2
 801cd46:	9324      	str	r3, [sp, #144]	; 0x90
 801cd48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cd4a:	3301      	adds	r3, #1
 801cd4c:	2b07      	cmp	r3, #7
 801cd4e:	9323      	str	r3, [sp, #140]	; 0x8c
 801cd50:	dc32      	bgt.n	801cdb8 <_svfprintf_r+0x1240>
 801cd52:	3508      	adds	r5, #8
 801cd54:	9b05      	ldr	r3, [sp, #20]
 801cd56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cd5a:	1e5c      	subs	r4, r3, #1
 801cd5c:	2200      	movs	r2, #0
 801cd5e:	2300      	movs	r3, #0
 801cd60:	f7e3 fee2 	bl	8000b28 <__aeabi_dcmpeq>
 801cd64:	2800      	cmp	r0, #0
 801cd66:	d130      	bne.n	801cdca <_svfprintf_r+0x1252>
 801cd68:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801cd6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd6c:	9a05      	ldr	r2, [sp, #20]
 801cd6e:	3101      	adds	r1, #1
 801cd70:	3b01      	subs	r3, #1
 801cd72:	f10b 0001 	add.w	r0, fp, #1
 801cd76:	4413      	add	r3, r2
 801cd78:	2907      	cmp	r1, #7
 801cd7a:	e9c5 0400 	strd	r0, r4, [r5]
 801cd7e:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801cd82:	dd50      	ble.n	801ce26 <_svfprintf_r+0x12ae>
 801cd84:	aa22      	add	r2, sp, #136	; 0x88
 801cd86:	4649      	mov	r1, r9
 801cd88:	4650      	mov	r0, sl
 801cd8a:	f003 ff15 	bl	8020bb8 <__ssprint_r>
 801cd8e:	2800      	cmp	r0, #0
 801cd90:	d16c      	bne.n	801ce6c <_svfprintf_r+0x12f4>
 801cd92:	ad25      	add	r5, sp, #148	; 0x94
 801cd94:	ab1e      	add	r3, sp, #120	; 0x78
 801cd96:	602b      	str	r3, [r5, #0]
 801cd98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cd9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801cd9c:	606b      	str	r3, [r5, #4]
 801cd9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cda0:	4413      	add	r3, r2
 801cda2:	9324      	str	r3, [sp, #144]	; 0x90
 801cda4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cda6:	3301      	adds	r3, #1
 801cda8:	2b07      	cmp	r3, #7
 801cdaa:	9323      	str	r3, [sp, #140]	; 0x8c
 801cdac:	f73f adb5 	bgt.w	801c91a <_svfprintf_r+0xda2>
 801cdb0:	f105 0408 	add.w	r4, r5, #8
 801cdb4:	f7ff bac2 	b.w	801c33c <_svfprintf_r+0x7c4>
 801cdb8:	aa22      	add	r2, sp, #136	; 0x88
 801cdba:	4649      	mov	r1, r9
 801cdbc:	4650      	mov	r0, sl
 801cdbe:	f003 fefb 	bl	8020bb8 <__ssprint_r>
 801cdc2:	2800      	cmp	r0, #0
 801cdc4:	d152      	bne.n	801ce6c <_svfprintf_r+0x12f4>
 801cdc6:	ad25      	add	r5, sp, #148	; 0x94
 801cdc8:	e7c4      	b.n	801cd54 <_svfprintf_r+0x11dc>
 801cdca:	2c00      	cmp	r4, #0
 801cdcc:	dde2      	ble.n	801cd94 <_svfprintf_r+0x121c>
 801cdce:	4e58      	ldr	r6, [pc, #352]	; (801cf30 <_svfprintf_r+0x13b8>)
 801cdd0:	2710      	movs	r7, #16
 801cdd2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801cdd6:	2c10      	cmp	r4, #16
 801cdd8:	f103 0301 	add.w	r3, r3, #1
 801cddc:	f105 0108 	add.w	r1, r5, #8
 801cde0:	602e      	str	r6, [r5, #0]
 801cde2:	dc07      	bgt.n	801cdf4 <_svfprintf_r+0x127c>
 801cde4:	606c      	str	r4, [r5, #4]
 801cde6:	2b07      	cmp	r3, #7
 801cde8:	4414      	add	r4, r2
 801cdea:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801cdee:	dcc9      	bgt.n	801cd84 <_svfprintf_r+0x120c>
 801cdf0:	460d      	mov	r5, r1
 801cdf2:	e7cf      	b.n	801cd94 <_svfprintf_r+0x121c>
 801cdf4:	3210      	adds	r2, #16
 801cdf6:	2b07      	cmp	r3, #7
 801cdf8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801cdfc:	606f      	str	r7, [r5, #4]
 801cdfe:	dd06      	ble.n	801ce0e <_svfprintf_r+0x1296>
 801ce00:	aa22      	add	r2, sp, #136	; 0x88
 801ce02:	4649      	mov	r1, r9
 801ce04:	4650      	mov	r0, sl
 801ce06:	f003 fed7 	bl	8020bb8 <__ssprint_r>
 801ce0a:	bb78      	cbnz	r0, 801ce6c <_svfprintf_r+0x12f4>
 801ce0c:	a925      	add	r1, sp, #148	; 0x94
 801ce0e:	3c10      	subs	r4, #16
 801ce10:	460d      	mov	r5, r1
 801ce12:	e7de      	b.n	801cdd2 <_svfprintf_r+0x125a>
 801ce14:	2201      	movs	r2, #1
 801ce16:	2b07      	cmp	r3, #7
 801ce18:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801ce1c:	f8c4 b000 	str.w	fp, [r4]
 801ce20:	6062      	str	r2, [r4, #4]
 801ce22:	ddb7      	ble.n	801cd94 <_svfprintf_r+0x121c>
 801ce24:	e7ae      	b.n	801cd84 <_svfprintf_r+0x120c>
 801ce26:	3508      	adds	r5, #8
 801ce28:	e7b4      	b.n	801cd94 <_svfprintf_r+0x121c>
 801ce2a:	460c      	mov	r4, r1
 801ce2c:	f7ff ba86 	b.w	801c33c <_svfprintf_r+0x7c4>
 801ce30:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801ce34:	1a9d      	subs	r5, r3, r2
 801ce36:	2d00      	cmp	r5, #0
 801ce38:	f77f aa84 	ble.w	801c344 <_svfprintf_r+0x7cc>
 801ce3c:	4e3d      	ldr	r6, [pc, #244]	; (801cf34 <_svfprintf_r+0x13bc>)
 801ce3e:	2710      	movs	r7, #16
 801ce40:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801ce44:	2d10      	cmp	r5, #16
 801ce46:	f103 0301 	add.w	r3, r3, #1
 801ce4a:	6026      	str	r6, [r4, #0]
 801ce4c:	dc18      	bgt.n	801ce80 <_svfprintf_r+0x1308>
 801ce4e:	6065      	str	r5, [r4, #4]
 801ce50:	2b07      	cmp	r3, #7
 801ce52:	4415      	add	r5, r2
 801ce54:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801ce58:	f77f aa74 	ble.w	801c344 <_svfprintf_r+0x7cc>
 801ce5c:	aa22      	add	r2, sp, #136	; 0x88
 801ce5e:	4649      	mov	r1, r9
 801ce60:	4650      	mov	r0, sl
 801ce62:	f003 fea9 	bl	8020bb8 <__ssprint_r>
 801ce66:	2800      	cmp	r0, #0
 801ce68:	f43f aa6c 	beq.w	801c344 <_svfprintf_r+0x7cc>
 801ce6c:	9b03      	ldr	r3, [sp, #12]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	f43f a88a 	beq.w	801bf88 <_svfprintf_r+0x410>
 801ce74:	4619      	mov	r1, r3
 801ce76:	4650      	mov	r0, sl
 801ce78:	f002 fd7a 	bl	801f970 <_free_r>
 801ce7c:	f7ff b884 	b.w	801bf88 <_svfprintf_r+0x410>
 801ce80:	3210      	adds	r2, #16
 801ce82:	2b07      	cmp	r3, #7
 801ce84:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801ce88:	6067      	str	r7, [r4, #4]
 801ce8a:	dc02      	bgt.n	801ce92 <_svfprintf_r+0x131a>
 801ce8c:	3408      	adds	r4, #8
 801ce8e:	3d10      	subs	r5, #16
 801ce90:	e7d6      	b.n	801ce40 <_svfprintf_r+0x12c8>
 801ce92:	aa22      	add	r2, sp, #136	; 0x88
 801ce94:	4649      	mov	r1, r9
 801ce96:	4650      	mov	r0, sl
 801ce98:	f003 fe8e 	bl	8020bb8 <__ssprint_r>
 801ce9c:	2800      	cmp	r0, #0
 801ce9e:	d1e5      	bne.n	801ce6c <_svfprintf_r+0x12f4>
 801cea0:	ac25      	add	r4, sp, #148	; 0x94
 801cea2:	e7f4      	b.n	801ce8e <_svfprintf_r+0x1316>
 801cea4:	9903      	ldr	r1, [sp, #12]
 801cea6:	4650      	mov	r0, sl
 801cea8:	f002 fd62 	bl	801f970 <_free_r>
 801ceac:	f7ff ba62 	b.w	801c374 <_svfprintf_r+0x7fc>
 801ceb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	f43f a868 	beq.w	801bf88 <_svfprintf_r+0x410>
 801ceb8:	aa22      	add	r2, sp, #136	; 0x88
 801ceba:	4649      	mov	r1, r9
 801cebc:	4650      	mov	r0, sl
 801cebe:	f003 fe7b 	bl	8020bb8 <__ssprint_r>
 801cec2:	f7ff b861 	b.w	801bf88 <_svfprintf_r+0x410>
 801cec6:	ea56 0207 	orrs.w	r2, r6, r7
 801ceca:	f8cd 800c 	str.w	r8, [sp, #12]
 801cece:	f43f ab78 	beq.w	801c5c2 <_svfprintf_r+0xa4a>
 801ced2:	2b01      	cmp	r3, #1
 801ced4:	f43f ac0d 	beq.w	801c6f2 <_svfprintf_r+0xb7a>
 801ced8:	2b02      	cmp	r3, #2
 801ceda:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 801cede:	f43f ac55 	beq.w	801c78c <_svfprintf_r+0xc14>
 801cee2:	08f2      	lsrs	r2, r6, #3
 801cee4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801cee8:	08f8      	lsrs	r0, r7, #3
 801ceea:	f006 0307 	and.w	r3, r6, #7
 801ceee:	4607      	mov	r7, r0
 801cef0:	4616      	mov	r6, r2
 801cef2:	3330      	adds	r3, #48	; 0x30
 801cef4:	ea56 0207 	orrs.w	r2, r6, r7
 801cef8:	4659      	mov	r1, fp
 801cefa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801cefe:	d1f0      	bne.n	801cee2 <_svfprintf_r+0x136a>
 801cf00:	9a03      	ldr	r2, [sp, #12]
 801cf02:	07d2      	lsls	r2, r2, #31
 801cf04:	d506      	bpl.n	801cf14 <_svfprintf_r+0x139c>
 801cf06:	2b30      	cmp	r3, #48	; 0x30
 801cf08:	d004      	beq.n	801cf14 <_svfprintf_r+0x139c>
 801cf0a:	2330      	movs	r3, #48	; 0x30
 801cf0c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801cf10:	f1a1 0b02 	sub.w	fp, r1, #2
 801cf14:	ab4e      	add	r3, sp, #312	; 0x138
 801cf16:	eba3 030b 	sub.w	r3, r3, fp
 801cf1a:	9e04      	ldr	r6, [sp, #16]
 801cf1c:	9304      	str	r3, [sp, #16]
 801cf1e:	2300      	movs	r3, #0
 801cf20:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801cf24:	9303      	str	r3, [sp, #12]
 801cf26:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801cf2a:	461d      	mov	r5, r3
 801cf2c:	f7ff b94c 	b.w	801c1c8 <_svfprintf_r+0x650>
 801cf30:	0802a13c 	.word	0x0802a13c
 801cf34:	0802a12c 	.word	0x0802a12c

0801cf38 <__tzcalc_limits>:
 801cf38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf3c:	4680      	mov	r8, r0
 801cf3e:	f002 fe39 	bl	801fbb4 <__gettzinfo>
 801cf42:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801cf46:	4598      	cmp	r8, r3
 801cf48:	f340 8098 	ble.w	801d07c <__tzcalc_limits+0x144>
 801cf4c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801cf50:	4443      	add	r3, r8
 801cf52:	109b      	asrs	r3, r3, #2
 801cf54:	f240 126d 	movw	r2, #365	; 0x16d
 801cf58:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801cf5c:	fb02 3505 	mla	r5, r2, r5, r3
 801cf60:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801cf64:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801cf68:	fb93 f3f2 	sdiv	r3, r3, r2
 801cf6c:	441d      	add	r5, r3
 801cf6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801cf72:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801cf76:	fb98 f7f3 	sdiv	r7, r8, r3
 801cf7a:	fb03 8717 	mls	r7, r3, r7, r8
 801cf7e:	4442      	add	r2, r8
 801cf80:	fab7 fc87 	clz	ip, r7
 801cf84:	fbb2 f2f3 	udiv	r2, r2, r3
 801cf88:	f008 0303 	and.w	r3, r8, #3
 801cf8c:	4415      	add	r5, r2
 801cf8e:	2264      	movs	r2, #100	; 0x64
 801cf90:	f8c0 8004 	str.w	r8, [r0, #4]
 801cf94:	fb98 f6f2 	sdiv	r6, r8, r2
 801cf98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cf9c:	fb02 8616 	mls	r6, r2, r6, r8
 801cfa0:	4604      	mov	r4, r0
 801cfa2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801cfa6:	9300      	str	r3, [sp, #0]
 801cfa8:	f04f 0e07 	mov.w	lr, #7
 801cfac:	7a22      	ldrb	r2, [r4, #8]
 801cfae:	6963      	ldr	r3, [r4, #20]
 801cfb0:	2a4a      	cmp	r2, #74	; 0x4a
 801cfb2:	d128      	bne.n	801d006 <__tzcalc_limits+0xce>
 801cfb4:	9900      	ldr	r1, [sp, #0]
 801cfb6:	18ea      	adds	r2, r5, r3
 801cfb8:	b901      	cbnz	r1, 801cfbc <__tzcalc_limits+0x84>
 801cfba:	b906      	cbnz	r6, 801cfbe <__tzcalc_limits+0x86>
 801cfbc:	bb0f      	cbnz	r7, 801d002 <__tzcalc_limits+0xca>
 801cfbe:	2b3b      	cmp	r3, #59	; 0x3b
 801cfc0:	bfd4      	ite	le
 801cfc2:	2300      	movle	r3, #0
 801cfc4:	2301      	movgt	r3, #1
 801cfc6:	4413      	add	r3, r2
 801cfc8:	1e5a      	subs	r2, r3, #1
 801cfca:	69a3      	ldr	r3, [r4, #24]
 801cfcc:	492c      	ldr	r1, [pc, #176]	; (801d080 <__tzcalc_limits+0x148>)
 801cfce:	fb01 3202 	mla	r2, r1, r2, r3
 801cfd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cfd4:	4413      	add	r3, r2
 801cfd6:	461a      	mov	r2, r3
 801cfd8:	17db      	asrs	r3, r3, #31
 801cfda:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801cfde:	3428      	adds	r4, #40	; 0x28
 801cfe0:	45a3      	cmp	fp, r4
 801cfe2:	d1e3      	bne.n	801cfac <__tzcalc_limits+0x74>
 801cfe4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801cfe8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801cfec:	4294      	cmp	r4, r2
 801cfee:	eb75 0303 	sbcs.w	r3, r5, r3
 801cff2:	bfb4      	ite	lt
 801cff4:	2301      	movlt	r3, #1
 801cff6:	2300      	movge	r3, #0
 801cff8:	6003      	str	r3, [r0, #0]
 801cffa:	2001      	movs	r0, #1
 801cffc:	b003      	add	sp, #12
 801cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d002:	2300      	movs	r3, #0
 801d004:	e7df      	b.n	801cfc6 <__tzcalc_limits+0x8e>
 801d006:	2a44      	cmp	r2, #68	; 0x44
 801d008:	d101      	bne.n	801d00e <__tzcalc_limits+0xd6>
 801d00a:	18ea      	adds	r2, r5, r3
 801d00c:	e7dd      	b.n	801cfca <__tzcalc_limits+0x92>
 801d00e:	9a00      	ldr	r2, [sp, #0]
 801d010:	bb72      	cbnz	r2, 801d070 <__tzcalc_limits+0x138>
 801d012:	2e00      	cmp	r6, #0
 801d014:	bf0c      	ite	eq
 801d016:	46e0      	moveq	r8, ip
 801d018:	f04f 0801 	movne.w	r8, #1
 801d01c:	4919      	ldr	r1, [pc, #100]	; (801d084 <__tzcalc_limits+0x14c>)
 801d01e:	68e2      	ldr	r2, [r4, #12]
 801d020:	9201      	str	r2, [sp, #4]
 801d022:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801d026:	fb0a 1808 	mla	r8, sl, r8, r1
 801d02a:	462a      	mov	r2, r5
 801d02c:	f04f 0900 	mov.w	r9, #0
 801d030:	f1a8 0804 	sub.w	r8, r8, #4
 801d034:	9901      	ldr	r1, [sp, #4]
 801d036:	f109 0901 	add.w	r9, r9, #1
 801d03a:	4549      	cmp	r1, r9
 801d03c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801d040:	dc18      	bgt.n	801d074 <__tzcalc_limits+0x13c>
 801d042:	f102 0804 	add.w	r8, r2, #4
 801d046:	fb98 f9fe 	sdiv	r9, r8, lr
 801d04a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801d04e:	eba8 0909 	sub.w	r9, r8, r9
 801d052:	ebb3 0909 	subs.w	r9, r3, r9
 801d056:	6923      	ldr	r3, [r4, #16]
 801d058:	f103 33ff 	add.w	r3, r3, #4294967295
 801d05c:	bf48      	it	mi
 801d05e:	f109 0907 	addmi.w	r9, r9, #7
 801d062:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d066:	444b      	add	r3, r9
 801d068:	4553      	cmp	r3, sl
 801d06a:	da05      	bge.n	801d078 <__tzcalc_limits+0x140>
 801d06c:	441a      	add	r2, r3
 801d06e:	e7ac      	b.n	801cfca <__tzcalc_limits+0x92>
 801d070:	46e0      	mov	r8, ip
 801d072:	e7d3      	b.n	801d01c <__tzcalc_limits+0xe4>
 801d074:	4452      	add	r2, sl
 801d076:	e7dd      	b.n	801d034 <__tzcalc_limits+0xfc>
 801d078:	3b07      	subs	r3, #7
 801d07a:	e7f5      	b.n	801d068 <__tzcalc_limits+0x130>
 801d07c:	2000      	movs	r0, #0
 801d07e:	e7bd      	b.n	801cffc <__tzcalc_limits+0xc4>
 801d080:	00015180 	.word	0x00015180
 801d084:	0802a098 	.word	0x0802a098

0801d088 <__tz_lock>:
 801d088:	4801      	ldr	r0, [pc, #4]	; (801d090 <__tz_lock+0x8>)
 801d08a:	f002 be4d 	b.w	801fd28 <__retarget_lock_acquire>
 801d08e:	bf00      	nop
 801d090:	2000bdfb 	.word	0x2000bdfb

0801d094 <__tz_unlock>:
 801d094:	4801      	ldr	r0, [pc, #4]	; (801d09c <__tz_unlock+0x8>)
 801d096:	f002 be49 	b.w	801fd2c <__retarget_lock_release>
 801d09a:	bf00      	nop
 801d09c:	2000bdfb 	.word	0x2000bdfb

0801d0a0 <_tzset_unlocked>:
 801d0a0:	4b01      	ldr	r3, [pc, #4]	; (801d0a8 <_tzset_unlocked+0x8>)
 801d0a2:	6818      	ldr	r0, [r3, #0]
 801d0a4:	f000 b802 	b.w	801d0ac <_tzset_unlocked_r>
 801d0a8:	20000038 	.word	0x20000038

0801d0ac <_tzset_unlocked_r>:
 801d0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0b0:	b08d      	sub	sp, #52	; 0x34
 801d0b2:	4607      	mov	r7, r0
 801d0b4:	f002 fd7e 	bl	801fbb4 <__gettzinfo>
 801d0b8:	49ae      	ldr	r1, [pc, #696]	; (801d374 <_tzset_unlocked_r+0x2c8>)
 801d0ba:	4eaf      	ldr	r6, [pc, #700]	; (801d378 <_tzset_unlocked_r+0x2cc>)
 801d0bc:	4605      	mov	r5, r0
 801d0be:	4638      	mov	r0, r7
 801d0c0:	f002 fd70 	bl	801fba4 <_getenv_r>
 801d0c4:	4604      	mov	r4, r0
 801d0c6:	b970      	cbnz	r0, 801d0e6 <_tzset_unlocked_r+0x3a>
 801d0c8:	4bac      	ldr	r3, [pc, #688]	; (801d37c <_tzset_unlocked_r+0x2d0>)
 801d0ca:	4aad      	ldr	r2, [pc, #692]	; (801d380 <_tzset_unlocked_r+0x2d4>)
 801d0cc:	6018      	str	r0, [r3, #0]
 801d0ce:	4bad      	ldr	r3, [pc, #692]	; (801d384 <_tzset_unlocked_r+0x2d8>)
 801d0d0:	6018      	str	r0, [r3, #0]
 801d0d2:	4bad      	ldr	r3, [pc, #692]	; (801d388 <_tzset_unlocked_r+0x2dc>)
 801d0d4:	6830      	ldr	r0, [r6, #0]
 801d0d6:	e9c3 2200 	strd	r2, r2, [r3]
 801d0da:	f002 fe9d 	bl	801fe18 <free>
 801d0de:	6034      	str	r4, [r6, #0]
 801d0e0:	b00d      	add	sp, #52	; 0x34
 801d0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0e6:	6831      	ldr	r1, [r6, #0]
 801d0e8:	2900      	cmp	r1, #0
 801d0ea:	d15f      	bne.n	801d1ac <_tzset_unlocked_r+0x100>
 801d0ec:	6830      	ldr	r0, [r6, #0]
 801d0ee:	f002 fe93 	bl	801fe18 <free>
 801d0f2:	4620      	mov	r0, r4
 801d0f4:	f7e3 f896 	bl	8000224 <strlen>
 801d0f8:	1c41      	adds	r1, r0, #1
 801d0fa:	4638      	mov	r0, r7
 801d0fc:	f002 fe94 	bl	801fe28 <_malloc_r>
 801d100:	6030      	str	r0, [r6, #0]
 801d102:	2800      	cmp	r0, #0
 801d104:	d157      	bne.n	801d1b6 <_tzset_unlocked_r+0x10a>
 801d106:	7823      	ldrb	r3, [r4, #0]
 801d108:	4aa0      	ldr	r2, [pc, #640]	; (801d38c <_tzset_unlocked_r+0x2e0>)
 801d10a:	49a1      	ldr	r1, [pc, #644]	; (801d390 <_tzset_unlocked_r+0x2e4>)
 801d10c:	2b3a      	cmp	r3, #58	; 0x3a
 801d10e:	bf08      	it	eq
 801d110:	3401      	addeq	r4, #1
 801d112:	ae0a      	add	r6, sp, #40	; 0x28
 801d114:	4633      	mov	r3, r6
 801d116:	4620      	mov	r0, r4
 801d118:	f003 fc4c 	bl	80209b4 <siscanf>
 801d11c:	2800      	cmp	r0, #0
 801d11e:	dddf      	ble.n	801d0e0 <_tzset_unlocked_r+0x34>
 801d120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d122:	18e7      	adds	r7, r4, r3
 801d124:	5ce3      	ldrb	r3, [r4, r3]
 801d126:	2b2d      	cmp	r3, #45	; 0x2d
 801d128:	d149      	bne.n	801d1be <_tzset_unlocked_r+0x112>
 801d12a:	3701      	adds	r7, #1
 801d12c:	f04f 34ff 	mov.w	r4, #4294967295
 801d130:	f10d 0a20 	add.w	sl, sp, #32
 801d134:	f10d 0b1e 	add.w	fp, sp, #30
 801d138:	f04f 0800 	mov.w	r8, #0
 801d13c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801d140:	4994      	ldr	r1, [pc, #592]	; (801d394 <_tzset_unlocked_r+0x2e8>)
 801d142:	9603      	str	r6, [sp, #12]
 801d144:	f8cd b000 	str.w	fp, [sp]
 801d148:	4633      	mov	r3, r6
 801d14a:	aa07      	add	r2, sp, #28
 801d14c:	4638      	mov	r0, r7
 801d14e:	f8ad 801e 	strh.w	r8, [sp, #30]
 801d152:	f8ad 8020 	strh.w	r8, [sp, #32]
 801d156:	f003 fc2d 	bl	80209b4 <siscanf>
 801d15a:	4540      	cmp	r0, r8
 801d15c:	ddc0      	ble.n	801d0e0 <_tzset_unlocked_r+0x34>
 801d15e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d162:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d166:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801d3a0 <_tzset_unlocked_r+0x2f4>
 801d16a:	213c      	movs	r1, #60	; 0x3c
 801d16c:	fb01 2203 	mla	r2, r1, r3, r2
 801d170:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d174:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d178:	fb01 2303 	mla	r3, r1, r3, r2
 801d17c:	435c      	muls	r4, r3
 801d17e:	62ac      	str	r4, [r5, #40]	; 0x28
 801d180:	4c81      	ldr	r4, [pc, #516]	; (801d388 <_tzset_unlocked_r+0x2dc>)
 801d182:	4b82      	ldr	r3, [pc, #520]	; (801d38c <_tzset_unlocked_r+0x2e0>)
 801d184:	6023      	str	r3, [r4, #0]
 801d186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d188:	4981      	ldr	r1, [pc, #516]	; (801d390 <_tzset_unlocked_r+0x2e4>)
 801d18a:	441f      	add	r7, r3
 801d18c:	464a      	mov	r2, r9
 801d18e:	4633      	mov	r3, r6
 801d190:	4638      	mov	r0, r7
 801d192:	f003 fc0f 	bl	80209b4 <siscanf>
 801d196:	4540      	cmp	r0, r8
 801d198:	dc16      	bgt.n	801d1c8 <_tzset_unlocked_r+0x11c>
 801d19a:	6823      	ldr	r3, [r4, #0]
 801d19c:	6063      	str	r3, [r4, #4]
 801d19e:	4b77      	ldr	r3, [pc, #476]	; (801d37c <_tzset_unlocked_r+0x2d0>)
 801d1a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d1a2:	601a      	str	r2, [r3, #0]
 801d1a4:	4b77      	ldr	r3, [pc, #476]	; (801d384 <_tzset_unlocked_r+0x2d8>)
 801d1a6:	f8c3 8000 	str.w	r8, [r3]
 801d1aa:	e799      	b.n	801d0e0 <_tzset_unlocked_r+0x34>
 801d1ac:	f7e3 f830 	bl	8000210 <strcmp>
 801d1b0:	2800      	cmp	r0, #0
 801d1b2:	d19b      	bne.n	801d0ec <_tzset_unlocked_r+0x40>
 801d1b4:	e794      	b.n	801d0e0 <_tzset_unlocked_r+0x34>
 801d1b6:	4621      	mov	r1, r4
 801d1b8:	f003 fc6d 	bl	8020a96 <strcpy>
 801d1bc:	e7a3      	b.n	801d106 <_tzset_unlocked_r+0x5a>
 801d1be:	2b2b      	cmp	r3, #43	; 0x2b
 801d1c0:	bf08      	it	eq
 801d1c2:	3701      	addeq	r7, #1
 801d1c4:	2401      	movs	r4, #1
 801d1c6:	e7b3      	b.n	801d130 <_tzset_unlocked_r+0x84>
 801d1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1ca:	f8c4 9004 	str.w	r9, [r4, #4]
 801d1ce:	18fc      	adds	r4, r7, r3
 801d1d0:	5cfb      	ldrb	r3, [r7, r3]
 801d1d2:	2b2d      	cmp	r3, #45	; 0x2d
 801d1d4:	f040 808b 	bne.w	801d2ee <_tzset_unlocked_r+0x242>
 801d1d8:	3401      	adds	r4, #1
 801d1da:	f04f 37ff 	mov.w	r7, #4294967295
 801d1de:	2300      	movs	r3, #0
 801d1e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d1e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d1e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d1ec:	930a      	str	r3, [sp, #40]	; 0x28
 801d1ee:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d1f2:	e9cd b600 	strd	fp, r6, [sp]
 801d1f6:	4967      	ldr	r1, [pc, #412]	; (801d394 <_tzset_unlocked_r+0x2e8>)
 801d1f8:	4633      	mov	r3, r6
 801d1fa:	aa07      	add	r2, sp, #28
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	f003 fbd9 	bl	80209b4 <siscanf>
 801d202:	2800      	cmp	r0, #0
 801d204:	dc78      	bgt.n	801d2f8 <_tzset_unlocked_r+0x24c>
 801d206:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801d208:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801d20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d20e:	652f      	str	r7, [r5, #80]	; 0x50
 801d210:	441c      	add	r4, r3
 801d212:	462f      	mov	r7, r5
 801d214:	f04f 0900 	mov.w	r9, #0
 801d218:	7823      	ldrb	r3, [r4, #0]
 801d21a:	2b2c      	cmp	r3, #44	; 0x2c
 801d21c:	bf08      	it	eq
 801d21e:	3401      	addeq	r4, #1
 801d220:	f894 8000 	ldrb.w	r8, [r4]
 801d224:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801d228:	d178      	bne.n	801d31c <_tzset_unlocked_r+0x270>
 801d22a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801d22e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801d232:	ab09      	add	r3, sp, #36	; 0x24
 801d234:	9300      	str	r3, [sp, #0]
 801d236:	4958      	ldr	r1, [pc, #352]	; (801d398 <_tzset_unlocked_r+0x2ec>)
 801d238:	9603      	str	r6, [sp, #12]
 801d23a:	4633      	mov	r3, r6
 801d23c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801d240:	4620      	mov	r0, r4
 801d242:	f003 fbb7 	bl	80209b4 <siscanf>
 801d246:	2803      	cmp	r0, #3
 801d248:	f47f af4a 	bne.w	801d0e0 <_tzset_unlocked_r+0x34>
 801d24c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801d250:	1e4b      	subs	r3, r1, #1
 801d252:	2b0b      	cmp	r3, #11
 801d254:	f63f af44 	bhi.w	801d0e0 <_tzset_unlocked_r+0x34>
 801d258:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d25c:	1e53      	subs	r3, r2, #1
 801d25e:	2b04      	cmp	r3, #4
 801d260:	f63f af3e 	bhi.w	801d0e0 <_tzset_unlocked_r+0x34>
 801d264:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801d268:	2b06      	cmp	r3, #6
 801d26a:	f63f af39 	bhi.w	801d0e0 <_tzset_unlocked_r+0x34>
 801d26e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801d272:	f887 8008 	strb.w	r8, [r7, #8]
 801d276:	617b      	str	r3, [r7, #20]
 801d278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d27a:	eb04 0803 	add.w	r8, r4, r3
 801d27e:	2302      	movs	r3, #2
 801d280:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d284:	2300      	movs	r3, #0
 801d286:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d28a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801d28e:	930a      	str	r3, [sp, #40]	; 0x28
 801d290:	f898 3000 	ldrb.w	r3, [r8]
 801d294:	2b2f      	cmp	r3, #47	; 0x2f
 801d296:	d109      	bne.n	801d2ac <_tzset_unlocked_r+0x200>
 801d298:	e9cd a602 	strd	sl, r6, [sp, #8]
 801d29c:	e9cd b600 	strd	fp, r6, [sp]
 801d2a0:	493e      	ldr	r1, [pc, #248]	; (801d39c <_tzset_unlocked_r+0x2f0>)
 801d2a2:	4633      	mov	r3, r6
 801d2a4:	aa07      	add	r2, sp, #28
 801d2a6:	4640      	mov	r0, r8
 801d2a8:	f003 fb84 	bl	80209b4 <siscanf>
 801d2ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d2b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d2b4:	213c      	movs	r1, #60	; 0x3c
 801d2b6:	fb01 2203 	mla	r2, r1, r3, r2
 801d2ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d2be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d2c2:	fb01 2303 	mla	r3, r1, r3, r2
 801d2c6:	61bb      	str	r3, [r7, #24]
 801d2c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d2ca:	3728      	adds	r7, #40	; 0x28
 801d2cc:	4444      	add	r4, r8
 801d2ce:	f1b9 0f00 	cmp.w	r9, #0
 801d2d2:	d020      	beq.n	801d316 <_tzset_unlocked_r+0x26a>
 801d2d4:	6868      	ldr	r0, [r5, #4]
 801d2d6:	f7ff fe2f 	bl	801cf38 <__tzcalc_limits>
 801d2da:	4b28      	ldr	r3, [pc, #160]	; (801d37c <_tzset_unlocked_r+0x2d0>)
 801d2dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801d2de:	601a      	str	r2, [r3, #0]
 801d2e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801d2e2:	1a9b      	subs	r3, r3, r2
 801d2e4:	4a27      	ldr	r2, [pc, #156]	; (801d384 <_tzset_unlocked_r+0x2d8>)
 801d2e6:	bf18      	it	ne
 801d2e8:	2301      	movne	r3, #1
 801d2ea:	6013      	str	r3, [r2, #0]
 801d2ec:	e6f8      	b.n	801d0e0 <_tzset_unlocked_r+0x34>
 801d2ee:	2b2b      	cmp	r3, #43	; 0x2b
 801d2f0:	bf08      	it	eq
 801d2f2:	3401      	addeq	r4, #1
 801d2f4:	2701      	movs	r7, #1
 801d2f6:	e772      	b.n	801d1de <_tzset_unlocked_r+0x132>
 801d2f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801d2fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d300:	213c      	movs	r1, #60	; 0x3c
 801d302:	fb01 2203 	mla	r2, r1, r3, r2
 801d306:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801d30a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801d30e:	fb01 2303 	mla	r3, r1, r3, r2
 801d312:	435f      	muls	r7, r3
 801d314:	e77a      	b.n	801d20c <_tzset_unlocked_r+0x160>
 801d316:	f04f 0901 	mov.w	r9, #1
 801d31a:	e77d      	b.n	801d218 <_tzset_unlocked_r+0x16c>
 801d31c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801d320:	bf06      	itte	eq
 801d322:	3401      	addeq	r4, #1
 801d324:	4643      	moveq	r3, r8
 801d326:	2344      	movne	r3, #68	; 0x44
 801d328:	220a      	movs	r2, #10
 801d32a:	a90b      	add	r1, sp, #44	; 0x2c
 801d32c:	4620      	mov	r0, r4
 801d32e:	9305      	str	r3, [sp, #20]
 801d330:	f003 fc38 	bl	8020ba4 <strtoul>
 801d334:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801d338:	9b05      	ldr	r3, [sp, #20]
 801d33a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801d33e:	45a0      	cmp	r8, r4
 801d340:	d114      	bne.n	801d36c <_tzset_unlocked_r+0x2c0>
 801d342:	234d      	movs	r3, #77	; 0x4d
 801d344:	f1b9 0f00 	cmp.w	r9, #0
 801d348:	d107      	bne.n	801d35a <_tzset_unlocked_r+0x2ae>
 801d34a:	722b      	strb	r3, [r5, #8]
 801d34c:	2103      	movs	r1, #3
 801d34e:	2302      	movs	r3, #2
 801d350:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801d354:	f8c5 9014 	str.w	r9, [r5, #20]
 801d358:	e791      	b.n	801d27e <_tzset_unlocked_r+0x1d2>
 801d35a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801d35e:	220b      	movs	r2, #11
 801d360:	2301      	movs	r3, #1
 801d362:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801d366:	2300      	movs	r3, #0
 801d368:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d36a:	e788      	b.n	801d27e <_tzset_unlocked_r+0x1d2>
 801d36c:	b280      	uxth	r0, r0
 801d36e:	723b      	strb	r3, [r7, #8]
 801d370:	6178      	str	r0, [r7, #20]
 801d372:	e784      	b.n	801d27e <_tzset_unlocked_r+0x1d2>
 801d374:	0802a14c 	.word	0x0802a14c
 801d378:	2000505c 	.word	0x2000505c
 801d37c:	20005064 	.word	0x20005064
 801d380:	0802a14f 	.word	0x0802a14f
 801d384:	20005060 	.word	0x20005060
 801d388:	20000468 	.word	0x20000468
 801d38c:	20005051 	.word	0x20005051
 801d390:	0802a153 	.word	0x0802a153
 801d394:	0802a176 	.word	0x0802a176
 801d398:	0802a162 	.word	0x0802a162
 801d39c:	0802a175 	.word	0x0802a175
 801d3a0:	20005046 	.word	0x20005046
 801d3a4:	00000000 	.word	0x00000000

0801d3a8 <_vfprintf_r>:
 801d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3ac:	ed2d 8b04 	vpush	{d8-d9}
 801d3b0:	b0cf      	sub	sp, #316	; 0x13c
 801d3b2:	4689      	mov	r9, r1
 801d3b4:	9203      	str	r2, [sp, #12]
 801d3b6:	461c      	mov	r4, r3
 801d3b8:	461e      	mov	r6, r3
 801d3ba:	4682      	mov	sl, r0
 801d3bc:	f002 fcae 	bl	801fd1c <_localeconv_r>
 801d3c0:	6803      	ldr	r3, [r0, #0]
 801d3c2:	9313      	str	r3, [sp, #76]	; 0x4c
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f7e2 ff2d 	bl	8000224 <strlen>
 801d3ca:	900e      	str	r0, [sp, #56]	; 0x38
 801d3cc:	f1ba 0f00 	cmp.w	sl, #0
 801d3d0:	d005      	beq.n	801d3de <_vfprintf_r+0x36>
 801d3d2:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 801d3d6:	b913      	cbnz	r3, 801d3de <_vfprintf_r+0x36>
 801d3d8:	4650      	mov	r0, sl
 801d3da:	f002 fa39 	bl	801f850 <__sinit>
 801d3de:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d3e2:	07d8      	lsls	r0, r3, #31
 801d3e4:	d407      	bmi.n	801d3f6 <_vfprintf_r+0x4e>
 801d3e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d3ea:	0599      	lsls	r1, r3, #22
 801d3ec:	d403      	bmi.n	801d3f6 <_vfprintf_r+0x4e>
 801d3ee:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d3f2:	f002 fc9a 	bl	801fd2a <__retarget_lock_acquire_recursive>
 801d3f6:	f9b9 300c 	ldrsh.w	r3, [r9, #12]
 801d3fa:	049a      	lsls	r2, r3, #18
 801d3fc:	d409      	bmi.n	801d412 <_vfprintf_r+0x6a>
 801d3fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d402:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d406:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d40a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d40e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 801d412:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d416:	071f      	lsls	r7, r3, #28
 801d418:	d502      	bpl.n	801d420 <_vfprintf_r+0x78>
 801d41a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d41e:	b9d3      	cbnz	r3, 801d456 <_vfprintf_r+0xae>
 801d420:	4649      	mov	r1, r9
 801d422:	4650      	mov	r0, sl
 801d424:	f001 fa36 	bl	801e894 <__swsetup_r>
 801d428:	b1a8      	cbz	r0, 801d456 <_vfprintf_r+0xae>
 801d42a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d42e:	07dd      	lsls	r5, r3, #31
 801d430:	d508      	bpl.n	801d444 <_vfprintf_r+0x9c>
 801d432:	f04f 33ff 	mov.w	r3, #4294967295
 801d436:	930f      	str	r3, [sp, #60]	; 0x3c
 801d438:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d43a:	b04f      	add	sp, #316	; 0x13c
 801d43c:	ecbd 8b04 	vpop	{d8-d9}
 801d440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d444:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d448:	059c      	lsls	r4, r3, #22
 801d44a:	d4f2      	bmi.n	801d432 <_vfprintf_r+0x8a>
 801d44c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d450:	f002 fc6d 	bl	801fd2e <__retarget_lock_release_recursive>
 801d454:	e7ed      	b.n	801d432 <_vfprintf_r+0x8a>
 801d456:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d45a:	f003 021a 	and.w	r2, r3, #26
 801d45e:	2a0a      	cmp	r2, #10
 801d460:	d115      	bne.n	801d48e <_vfprintf_r+0xe6>
 801d462:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
 801d466:	2a00      	cmp	r2, #0
 801d468:	db11      	blt.n	801d48e <_vfprintf_r+0xe6>
 801d46a:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
 801d46e:	07d0      	lsls	r0, r2, #31
 801d470:	d405      	bmi.n	801d47e <_vfprintf_r+0xd6>
 801d472:	0599      	lsls	r1, r3, #22
 801d474:	d403      	bmi.n	801d47e <_vfprintf_r+0xd6>
 801d476:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d47a:	f002 fc58 	bl	801fd2e <__retarget_lock_release_recursive>
 801d47e:	9a03      	ldr	r2, [sp, #12]
 801d480:	4623      	mov	r3, r4
 801d482:	4649      	mov	r1, r9
 801d484:	4650      	mov	r0, sl
 801d486:	f001 f9c5 	bl	801e814 <__sbprintf>
 801d48a:	900f      	str	r0, [sp, #60]	; 0x3c
 801d48c:	e7d4      	b.n	801d438 <_vfprintf_r+0x90>
 801d48e:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 801d6f8 <_vfprintf_r+0x350>
 801d492:	2500      	movs	r5, #0
 801d494:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 801d498:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d49c:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 801d4a0:	ac25      	add	r4, sp, #148	; 0x94
 801d4a2:	9422      	str	r4, [sp, #136]	; 0x88
 801d4a4:	9505      	str	r5, [sp, #20]
 801d4a6:	950a      	str	r5, [sp, #40]	; 0x28
 801d4a8:	9512      	str	r5, [sp, #72]	; 0x48
 801d4aa:	9514      	str	r5, [sp, #80]	; 0x50
 801d4ac:	950f      	str	r5, [sp, #60]	; 0x3c
 801d4ae:	9b03      	ldr	r3, [sp, #12]
 801d4b0:	461d      	mov	r5, r3
 801d4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4b6:	b10a      	cbz	r2, 801d4bc <_vfprintf_r+0x114>
 801d4b8:	2a25      	cmp	r2, #37	; 0x25
 801d4ba:	d1f9      	bne.n	801d4b0 <_vfprintf_r+0x108>
 801d4bc:	9b03      	ldr	r3, [sp, #12]
 801d4be:	1aef      	subs	r7, r5, r3
 801d4c0:	d00d      	beq.n	801d4de <_vfprintf_r+0x136>
 801d4c2:	e9c4 3700 	strd	r3, r7, [r4]
 801d4c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4c8:	443b      	add	r3, r7
 801d4ca:	9324      	str	r3, [sp, #144]	; 0x90
 801d4cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	2b07      	cmp	r3, #7
 801d4d2:	9323      	str	r3, [sp, #140]	; 0x8c
 801d4d4:	dc79      	bgt.n	801d5ca <_vfprintf_r+0x222>
 801d4d6:	3408      	adds	r4, #8
 801d4d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d4da:	443b      	add	r3, r7
 801d4dc:	930f      	str	r3, [sp, #60]	; 0x3c
 801d4de:	782b      	ldrb	r3, [r5, #0]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	f001 8156 	beq.w	801e792 <_vfprintf_r+0x13ea>
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	3501      	adds	r5, #1
 801d4ea:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d4ee:	f04f 38ff 	mov.w	r8, #4294967295
 801d4f2:	9310      	str	r3, [sp, #64]	; 0x40
 801d4f4:	469b      	mov	fp, r3
 801d4f6:	270a      	movs	r7, #10
 801d4f8:	212b      	movs	r1, #43	; 0x2b
 801d4fa:	462a      	mov	r2, r5
 801d4fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d500:	9307      	str	r3, [sp, #28]
 801d502:	4613      	mov	r3, r2
 801d504:	930b      	str	r3, [sp, #44]	; 0x2c
 801d506:	9b07      	ldr	r3, [sp, #28]
 801d508:	3b20      	subs	r3, #32
 801d50a:	2b5a      	cmp	r3, #90	; 0x5a
 801d50c:	f200 85c0 	bhi.w	801e090 <_vfprintf_r+0xce8>
 801d510:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d514:	05be007e 	.word	0x05be007e
 801d518:	008605be 	.word	0x008605be
 801d51c:	05be05be 	.word	0x05be05be
 801d520:	006505be 	.word	0x006505be
 801d524:	05be05be 	.word	0x05be05be
 801d528:	00930089 	.word	0x00930089
 801d52c:	009005be 	.word	0x009005be
 801d530:	05be0096 	.word	0x05be0096
 801d534:	00b200af 	.word	0x00b200af
 801d538:	00b200b2 	.word	0x00b200b2
 801d53c:	00b200b2 	.word	0x00b200b2
 801d540:	00b200b2 	.word	0x00b200b2
 801d544:	00b200b2 	.word	0x00b200b2
 801d548:	05be05be 	.word	0x05be05be
 801d54c:	05be05be 	.word	0x05be05be
 801d550:	05be05be 	.word	0x05be05be
 801d554:	012105be 	.word	0x012105be
 801d558:	00df05be 	.word	0x00df05be
 801d55c:	012100f6 	.word	0x012100f6
 801d560:	01210121 	.word	0x01210121
 801d564:	05be05be 	.word	0x05be05be
 801d568:	05be05be 	.word	0x05be05be
 801d56c:	05be00c2 	.word	0x05be00c2
 801d570:	049005be 	.word	0x049005be
 801d574:	05be05be 	.word	0x05be05be
 801d578:	04d705be 	.word	0x04d705be
 801d57c:	04fb05be 	.word	0x04fb05be
 801d580:	05be05be 	.word	0x05be05be
 801d584:	05be051a 	.word	0x05be051a
 801d588:	05be05be 	.word	0x05be05be
 801d58c:	05be05be 	.word	0x05be05be
 801d590:	05be05be 	.word	0x05be05be
 801d594:	012105be 	.word	0x012105be
 801d598:	00df05be 	.word	0x00df05be
 801d59c:	012100f8 	.word	0x012100f8
 801d5a0:	01210121 	.word	0x01210121
 801d5a4:	00f800c5 	.word	0x00f800c5
 801d5a8:	05be00d9 	.word	0x05be00d9
 801d5ac:	05be00d2 	.word	0x05be00d2
 801d5b0:	0492046d 	.word	0x0492046d
 801d5b4:	00d904c6 	.word	0x00d904c6
 801d5b8:	04d705be 	.word	0x04d705be
 801d5bc:	04fd007c 	.word	0x04fd007c
 801d5c0:	05be05be 	.word	0x05be05be
 801d5c4:	05be0537 	.word	0x05be0537
 801d5c8:	007c      	.short	0x007c
 801d5ca:	aa22      	add	r2, sp, #136	; 0x88
 801d5cc:	4649      	mov	r1, r9
 801d5ce:	4650      	mov	r0, sl
 801d5d0:	f004 fbeb 	bl	8021daa <__sprint_r>
 801d5d4:	2800      	cmp	r0, #0
 801d5d6:	f040 8130 	bne.w	801d83a <_vfprintf_r+0x492>
 801d5da:	ac25      	add	r4, sp, #148	; 0x94
 801d5dc:	e77c      	b.n	801d4d8 <_vfprintf_r+0x130>
 801d5de:	4650      	mov	r0, sl
 801d5e0:	f002 fb9c 	bl	801fd1c <_localeconv_r>
 801d5e4:	6843      	ldr	r3, [r0, #4]
 801d5e6:	9314      	str	r3, [sp, #80]	; 0x50
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	f7e2 fe1b 	bl	8000224 <strlen>
 801d5ee:	9012      	str	r0, [sp, #72]	; 0x48
 801d5f0:	4650      	mov	r0, sl
 801d5f2:	f002 fb93 	bl	801fd1c <_localeconv_r>
 801d5f6:	6883      	ldr	r3, [r0, #8]
 801d5f8:	930a      	str	r3, [sp, #40]	; 0x28
 801d5fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d5fc:	212b      	movs	r1, #43	; 0x2b
 801d5fe:	b12b      	cbz	r3, 801d60c <_vfprintf_r+0x264>
 801d600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d602:	b11b      	cbz	r3, 801d60c <_vfprintf_r+0x264>
 801d604:	781b      	ldrb	r3, [r3, #0]
 801d606:	b10b      	cbz	r3, 801d60c <_vfprintf_r+0x264>
 801d608:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801d60c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d60e:	e774      	b.n	801d4fa <_vfprintf_r+0x152>
 801d610:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801d614:	2b00      	cmp	r3, #0
 801d616:	d1f9      	bne.n	801d60c <_vfprintf_r+0x264>
 801d618:	2320      	movs	r3, #32
 801d61a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d61e:	e7f5      	b.n	801d60c <_vfprintf_r+0x264>
 801d620:	f04b 0b01 	orr.w	fp, fp, #1
 801d624:	e7f2      	b.n	801d60c <_vfprintf_r+0x264>
 801d626:	f856 3b04 	ldr.w	r3, [r6], #4
 801d62a:	9310      	str	r3, [sp, #64]	; 0x40
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	daed      	bge.n	801d60c <_vfprintf_r+0x264>
 801d630:	425b      	negs	r3, r3
 801d632:	9310      	str	r3, [sp, #64]	; 0x40
 801d634:	f04b 0b04 	orr.w	fp, fp, #4
 801d638:	e7e8      	b.n	801d60c <_vfprintf_r+0x264>
 801d63a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 801d63e:	e7e5      	b.n	801d60c <_vfprintf_r+0x264>
 801d640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d642:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d646:	9207      	str	r2, [sp, #28]
 801d648:	2a2a      	cmp	r2, #42	; 0x2a
 801d64a:	d10f      	bne.n	801d66c <_vfprintf_r+0x2c4>
 801d64c:	f856 0b04 	ldr.w	r0, [r6], #4
 801d650:	930b      	str	r3, [sp, #44]	; 0x2c
 801d652:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 801d656:	e7d9      	b.n	801d60c <_vfprintf_r+0x264>
 801d658:	fb07 2808 	mla	r8, r7, r8, r2
 801d65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d660:	9207      	str	r2, [sp, #28]
 801d662:	9a07      	ldr	r2, [sp, #28]
 801d664:	3a30      	subs	r2, #48	; 0x30
 801d666:	2a09      	cmp	r2, #9
 801d668:	d9f6      	bls.n	801d658 <_vfprintf_r+0x2b0>
 801d66a:	e74b      	b.n	801d504 <_vfprintf_r+0x15c>
 801d66c:	f04f 0800 	mov.w	r8, #0
 801d670:	e7f7      	b.n	801d662 <_vfprintf_r+0x2ba>
 801d672:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801d676:	e7c9      	b.n	801d60c <_vfprintf_r+0x264>
 801d678:	2200      	movs	r2, #0
 801d67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d67c:	9210      	str	r2, [sp, #64]	; 0x40
 801d67e:	9a07      	ldr	r2, [sp, #28]
 801d680:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d682:	3a30      	subs	r2, #48	; 0x30
 801d684:	fb07 2200 	mla	r2, r7, r0, r2
 801d688:	9210      	str	r2, [sp, #64]	; 0x40
 801d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d68e:	9207      	str	r2, [sp, #28]
 801d690:	3a30      	subs	r2, #48	; 0x30
 801d692:	2a09      	cmp	r2, #9
 801d694:	d9f3      	bls.n	801d67e <_vfprintf_r+0x2d6>
 801d696:	e735      	b.n	801d504 <_vfprintf_r+0x15c>
 801d698:	f04b 0b08 	orr.w	fp, fp, #8
 801d69c:	e7b6      	b.n	801d60c <_vfprintf_r+0x264>
 801d69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6a0:	781b      	ldrb	r3, [r3, #0]
 801d6a2:	2b68      	cmp	r3, #104	; 0x68
 801d6a4:	bf01      	itttt	eq
 801d6a6:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 801d6a8:	3301      	addeq	r3, #1
 801d6aa:	930b      	streq	r3, [sp, #44]	; 0x2c
 801d6ac:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801d6b0:	bf18      	it	ne
 801d6b2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801d6b6:	e7a9      	b.n	801d60c <_vfprintf_r+0x264>
 801d6b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6ba:	781b      	ldrb	r3, [r3, #0]
 801d6bc:	2b6c      	cmp	r3, #108	; 0x6c
 801d6be:	d105      	bne.n	801d6cc <_vfprintf_r+0x324>
 801d6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6c2:	3301      	adds	r3, #1
 801d6c4:	930b      	str	r3, [sp, #44]	; 0x2c
 801d6c6:	f04b 0b20 	orr.w	fp, fp, #32
 801d6ca:	e79f      	b.n	801d60c <_vfprintf_r+0x264>
 801d6cc:	f04b 0b10 	orr.w	fp, fp, #16
 801d6d0:	e79c      	b.n	801d60c <_vfprintf_r+0x264>
 801d6d2:	4632      	mov	r2, r6
 801d6d4:	2000      	movs	r0, #0
 801d6d6:	f852 3b04 	ldr.w	r3, [r2], #4
 801d6da:	9206      	str	r2, [sp, #24]
 801d6dc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801d6e0:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801d6e4:	ab35      	add	r3, sp, #212	; 0xd4
 801d6e6:	e9cd 0008 	strd	r0, r0, [sp, #32]
 801d6ea:	9004      	str	r0, [sp, #16]
 801d6ec:	f04f 0801 	mov.w	r8, #1
 801d6f0:	4606      	mov	r6, r0
 801d6f2:	4605      	mov	r5, r0
 801d6f4:	9303      	str	r3, [sp, #12]
 801d6f6:	e1c3      	b.n	801da80 <_vfprintf_r+0x6d8>
	...
 801d700:	f04b 0b10 	orr.w	fp, fp, #16
 801d704:	f01b 0f20 	tst.w	fp, #32
 801d708:	d012      	beq.n	801d730 <_vfprintf_r+0x388>
 801d70a:	3607      	adds	r6, #7
 801d70c:	f026 0307 	bic.w	r3, r6, #7
 801d710:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801d714:	9306      	str	r3, [sp, #24]
 801d716:	2e00      	cmp	r6, #0
 801d718:	f177 0300 	sbcs.w	r3, r7, #0
 801d71c:	da06      	bge.n	801d72c <_vfprintf_r+0x384>
 801d71e:	4276      	negs	r6, r6
 801d720:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801d724:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801d728:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d72c:	2301      	movs	r3, #1
 801d72e:	e392      	b.n	801de56 <_vfprintf_r+0xaae>
 801d730:	1d33      	adds	r3, r6, #4
 801d732:	f01b 0f10 	tst.w	fp, #16
 801d736:	9306      	str	r3, [sp, #24]
 801d738:	d002      	beq.n	801d740 <_vfprintf_r+0x398>
 801d73a:	6836      	ldr	r6, [r6, #0]
 801d73c:	17f7      	asrs	r7, r6, #31
 801d73e:	e7ea      	b.n	801d716 <_vfprintf_r+0x36e>
 801d740:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801d744:	6836      	ldr	r6, [r6, #0]
 801d746:	d001      	beq.n	801d74c <_vfprintf_r+0x3a4>
 801d748:	b236      	sxth	r6, r6
 801d74a:	e7f7      	b.n	801d73c <_vfprintf_r+0x394>
 801d74c:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801d750:	bf18      	it	ne
 801d752:	b276      	sxtbne	r6, r6
 801d754:	e7f2      	b.n	801d73c <_vfprintf_r+0x394>
 801d756:	3607      	adds	r6, #7
 801d758:	f026 0307 	bic.w	r3, r6, #7
 801d75c:	ecb3 7b02 	vldmia	r3!, {d7}
 801d760:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801d764:	9306      	str	r3, [sp, #24]
 801d766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d768:	ee09 3a10 	vmov	s18, r3
 801d76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d76e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d772:	ee09 3a90 	vmov	s19, r3
 801d776:	f04f 32ff 	mov.w	r2, #4294967295
 801d77a:	4b39      	ldr	r3, [pc, #228]	; (801d860 <_vfprintf_r+0x4b8>)
 801d77c:	ec51 0b19 	vmov	r0, r1, d9
 801d780:	f7e3 fa04 	bl	8000b8c <__aeabi_dcmpun>
 801d784:	bb20      	cbnz	r0, 801d7d0 <_vfprintf_r+0x428>
 801d786:	4b36      	ldr	r3, [pc, #216]	; (801d860 <_vfprintf_r+0x4b8>)
 801d788:	ec51 0b19 	vmov	r0, r1, d9
 801d78c:	f04f 32ff 	mov.w	r2, #4294967295
 801d790:	f7e3 f9de 	bl	8000b50 <__aeabi_dcmple>
 801d794:	b9e0      	cbnz	r0, 801d7d0 <_vfprintf_r+0x428>
 801d796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d79a:	2200      	movs	r2, #0
 801d79c:	2300      	movs	r3, #0
 801d79e:	f7e3 f9cd 	bl	8000b3c <__aeabi_dcmplt>
 801d7a2:	b110      	cbz	r0, 801d7aa <_vfprintf_r+0x402>
 801d7a4:	232d      	movs	r3, #45	; 0x2d
 801d7a6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801d7aa:	4a2e      	ldr	r2, [pc, #184]	; (801d864 <_vfprintf_r+0x4bc>)
 801d7ac:	482e      	ldr	r0, [pc, #184]	; (801d868 <_vfprintf_r+0x4c0>)
 801d7ae:	9907      	ldr	r1, [sp, #28]
 801d7b0:	4613      	mov	r3, r2
 801d7b2:	2947      	cmp	r1, #71	; 0x47
 801d7b4:	bfc8      	it	gt
 801d7b6:	4603      	movgt	r3, r0
 801d7b8:	9303      	str	r3, [sp, #12]
 801d7ba:	2300      	movs	r3, #0
 801d7bc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801d7c0:	9304      	str	r3, [sp, #16]
 801d7c2:	f04f 0803 	mov.w	r8, #3
 801d7c6:	461e      	mov	r6, r3
 801d7c8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d7cc:	461d      	mov	r5, r3
 801d7ce:	e157      	b.n	801da80 <_vfprintf_r+0x6d8>
 801d7d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d7d4:	4610      	mov	r0, r2
 801d7d6:	4619      	mov	r1, r3
 801d7d8:	f7e3 f9d8 	bl	8000b8c <__aeabi_dcmpun>
 801d7dc:	b140      	cbz	r0, 801d7f0 <_vfprintf_r+0x448>
 801d7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7e0:	4a22      	ldr	r2, [pc, #136]	; (801d86c <_vfprintf_r+0x4c4>)
 801d7e2:	4823      	ldr	r0, [pc, #140]	; (801d870 <_vfprintf_r+0x4c8>)
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	bfbc      	itt	lt
 801d7e8:	232d      	movlt	r3, #45	; 0x2d
 801d7ea:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 801d7ee:	e7de      	b.n	801d7ae <_vfprintf_r+0x406>
 801d7f0:	9b07      	ldr	r3, [sp, #28]
 801d7f2:	f023 0320 	bic.w	r3, r3, #32
 801d7f6:	2b41      	cmp	r3, #65	; 0x41
 801d7f8:	9308      	str	r3, [sp, #32]
 801d7fa:	d13b      	bne.n	801d874 <_vfprintf_r+0x4cc>
 801d7fc:	2330      	movs	r3, #48	; 0x30
 801d7fe:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801d802:	9b07      	ldr	r3, [sp, #28]
 801d804:	2b61      	cmp	r3, #97	; 0x61
 801d806:	bf0c      	ite	eq
 801d808:	2378      	moveq	r3, #120	; 0x78
 801d80a:	2358      	movne	r3, #88	; 0x58
 801d80c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 801d810:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801d814:	f04b 0b02 	orr.w	fp, fp, #2
 801d818:	f340 8209 	ble.w	801dc2e <_vfprintf_r+0x886>
 801d81c:	f108 0101 	add.w	r1, r8, #1
 801d820:	4650      	mov	r0, sl
 801d822:	f002 fb01 	bl	801fe28 <_malloc_r>
 801d826:	9003      	str	r0, [sp, #12]
 801d828:	2800      	cmp	r0, #0
 801d82a:	f040 8204 	bne.w	801dc36 <_vfprintf_r+0x88e>
 801d82e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d836:	f8a9 300c 	strh.w	r3, [r9, #12]
 801d83a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 801d83e:	07d9      	lsls	r1, r3, #31
 801d840:	d407      	bmi.n	801d852 <_vfprintf_r+0x4aa>
 801d842:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d846:	059a      	lsls	r2, r3, #22
 801d848:	d403      	bmi.n	801d852 <_vfprintf_r+0x4aa>
 801d84a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801d84e:	f002 fa6e 	bl	801fd2e <__retarget_lock_release_recursive>
 801d852:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801d856:	065b      	lsls	r3, r3, #25
 801d858:	f57f adee 	bpl.w	801d438 <_vfprintf_r+0x90>
 801d85c:	e5e9      	b.n	801d432 <_vfprintf_r+0x8a>
 801d85e:	bf00      	nop
 801d860:	7fefffff 	.word	0x7fefffff
 801d864:	0802a0f8 	.word	0x0802a0f8
 801d868:	0802a0fc 	.word	0x0802a0fc
 801d86c:	0802a100 	.word	0x0802a100
 801d870:	0802a104 	.word	0x0802a104
 801d874:	f1b8 3fff 	cmp.w	r8, #4294967295
 801d878:	f000 81e0 	beq.w	801dc3c <_vfprintf_r+0x894>
 801d87c:	9b08      	ldr	r3, [sp, #32]
 801d87e:	2b47      	cmp	r3, #71	; 0x47
 801d880:	f040 81e0 	bne.w	801dc44 <_vfprintf_r+0x89c>
 801d884:	f1b8 0f00 	cmp.w	r8, #0
 801d888:	f040 81dc 	bne.w	801dc44 <_vfprintf_r+0x89c>
 801d88c:	f8cd 8010 	str.w	r8, [sp, #16]
 801d890:	f04f 0801 	mov.w	r8, #1
 801d894:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801d898:	9311      	str	r3, [sp, #68]	; 0x44
 801d89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	f280 81d3 	bge.w	801dc48 <_vfprintf_r+0x8a0>
 801d8a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8a4:	ee08 3a10 	vmov	s16, r3
 801d8a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d8ae:	ee08 3a90 	vmov	s17, r3
 801d8b2:	232d      	movs	r3, #45	; 0x2d
 801d8b4:	9318      	str	r3, [sp, #96]	; 0x60
 801d8b6:	9b08      	ldr	r3, [sp, #32]
 801d8b8:	2b41      	cmp	r3, #65	; 0x41
 801d8ba:	f040 81e3 	bne.w	801dc84 <_vfprintf_r+0x8dc>
 801d8be:	eeb0 0a48 	vmov.f32	s0, s16
 801d8c2:	eef0 0a68 	vmov.f32	s1, s17
 801d8c6:	a81c      	add	r0, sp, #112	; 0x70
 801d8c8:	f003 f82c 	bl	8020924 <frexp>
 801d8cc:	2200      	movs	r2, #0
 801d8ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801d8d2:	ec51 0b10 	vmov	r0, r1, d0
 801d8d6:	f7e2 febf 	bl	8000658 <__aeabi_dmul>
 801d8da:	2200      	movs	r2, #0
 801d8dc:	2300      	movs	r3, #0
 801d8de:	4606      	mov	r6, r0
 801d8e0:	460f      	mov	r7, r1
 801d8e2:	f7e3 f921 	bl	8000b28 <__aeabi_dcmpeq>
 801d8e6:	b108      	cbz	r0, 801d8ec <_vfprintf_r+0x544>
 801d8e8:	2301      	movs	r3, #1
 801d8ea:	931c      	str	r3, [sp, #112]	; 0x70
 801d8ec:	4bb7      	ldr	r3, [pc, #732]	; (801dbcc <_vfprintf_r+0x824>)
 801d8ee:	4ab8      	ldr	r2, [pc, #736]	; (801dbd0 <_vfprintf_r+0x828>)
 801d8f0:	9907      	ldr	r1, [sp, #28]
 801d8f2:	9d03      	ldr	r5, [sp, #12]
 801d8f4:	2961      	cmp	r1, #97	; 0x61
 801d8f6:	bf18      	it	ne
 801d8f8:	461a      	movne	r2, r3
 801d8fa:	f108 33ff 	add.w	r3, r8, #4294967295
 801d8fe:	9217      	str	r2, [sp, #92]	; 0x5c
 801d900:	9305      	str	r3, [sp, #20]
 801d902:	4bb4      	ldr	r3, [pc, #720]	; (801dbd4 <_vfprintf_r+0x82c>)
 801d904:	2200      	movs	r2, #0
 801d906:	4630      	mov	r0, r6
 801d908:	4639      	mov	r1, r7
 801d90a:	f7e2 fea5 	bl	8000658 <__aeabi_dmul>
 801d90e:	460f      	mov	r7, r1
 801d910:	4606      	mov	r6, r0
 801d912:	f7e3 f951 	bl	8000bb8 <__aeabi_d2iz>
 801d916:	9019      	str	r0, [sp, #100]	; 0x64
 801d918:	f7e2 fe34 	bl	8000584 <__aeabi_i2d>
 801d91c:	4602      	mov	r2, r0
 801d91e:	460b      	mov	r3, r1
 801d920:	4630      	mov	r0, r6
 801d922:	4639      	mov	r1, r7
 801d924:	f7e2 fce0 	bl	80002e8 <__aeabi_dsub>
 801d928:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801d92a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d92c:	5c9b      	ldrb	r3, [r3, r2]
 801d92e:	f805 3b01 	strb.w	r3, [r5], #1
 801d932:	9b05      	ldr	r3, [sp, #20]
 801d934:	9309      	str	r3, [sp, #36]	; 0x24
 801d936:	1c5a      	adds	r2, r3, #1
 801d938:	4606      	mov	r6, r0
 801d93a:	460f      	mov	r7, r1
 801d93c:	d007      	beq.n	801d94e <_vfprintf_r+0x5a6>
 801d93e:	3b01      	subs	r3, #1
 801d940:	9305      	str	r3, [sp, #20]
 801d942:	2200      	movs	r2, #0
 801d944:	2300      	movs	r3, #0
 801d946:	f7e3 f8ef 	bl	8000b28 <__aeabi_dcmpeq>
 801d94a:	2800      	cmp	r0, #0
 801d94c:	d0d9      	beq.n	801d902 <_vfprintf_r+0x55a>
 801d94e:	4ba2      	ldr	r3, [pc, #648]	; (801dbd8 <_vfprintf_r+0x830>)
 801d950:	2200      	movs	r2, #0
 801d952:	4630      	mov	r0, r6
 801d954:	4639      	mov	r1, r7
 801d956:	f7e3 f90f 	bl	8000b78 <__aeabi_dcmpgt>
 801d95a:	b960      	cbnz	r0, 801d976 <_vfprintf_r+0x5ce>
 801d95c:	4b9e      	ldr	r3, [pc, #632]	; (801dbd8 <_vfprintf_r+0x830>)
 801d95e:	2200      	movs	r2, #0
 801d960:	4630      	mov	r0, r6
 801d962:	4639      	mov	r1, r7
 801d964:	f7e3 f8e0 	bl	8000b28 <__aeabi_dcmpeq>
 801d968:	2800      	cmp	r0, #0
 801d96a:	f000 8186 	beq.w	801dc7a <_vfprintf_r+0x8d2>
 801d96e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d970:	07df      	lsls	r7, r3, #31
 801d972:	f140 8182 	bpl.w	801dc7a <_vfprintf_r+0x8d2>
 801d976:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d978:	9520      	str	r5, [sp, #128]	; 0x80
 801d97a:	7bd9      	ldrb	r1, [r3, #15]
 801d97c:	2030      	movs	r0, #48	; 0x30
 801d97e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d980:	1e53      	subs	r3, r2, #1
 801d982:	9320      	str	r3, [sp, #128]	; 0x80
 801d984:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801d988:	428b      	cmp	r3, r1
 801d98a:	f000 8165 	beq.w	801dc58 <_vfprintf_r+0x8b0>
 801d98e:	2b39      	cmp	r3, #57	; 0x39
 801d990:	bf0b      	itete	eq
 801d992:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 801d994:	3301      	addne	r3, #1
 801d996:	7a9b      	ldrbeq	r3, [r3, #10]
 801d998:	b2db      	uxtbne	r3, r3
 801d99a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d99e:	9b03      	ldr	r3, [sp, #12]
 801d9a0:	1aeb      	subs	r3, r5, r3
 801d9a2:	9305      	str	r3, [sp, #20]
 801d9a4:	9b08      	ldr	r3, [sp, #32]
 801d9a6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801d9a8:	2b47      	cmp	r3, #71	; 0x47
 801d9aa:	f040 81b3 	bne.w	801dd14 <_vfprintf_r+0x96c>
 801d9ae:	1cee      	adds	r6, r5, #3
 801d9b0:	db02      	blt.n	801d9b8 <_vfprintf_r+0x610>
 801d9b2:	4545      	cmp	r5, r8
 801d9b4:	f340 81d5 	ble.w	801dd62 <_vfprintf_r+0x9ba>
 801d9b8:	9b07      	ldr	r3, [sp, #28]
 801d9ba:	3b02      	subs	r3, #2
 801d9bc:	9307      	str	r3, [sp, #28]
 801d9be:	9907      	ldr	r1, [sp, #28]
 801d9c0:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801d9c4:	f021 0120 	bic.w	r1, r1, #32
 801d9c8:	2941      	cmp	r1, #65	; 0x41
 801d9ca:	bf08      	it	eq
 801d9cc:	320f      	addeq	r2, #15
 801d9ce:	f105 33ff 	add.w	r3, r5, #4294967295
 801d9d2:	bf06      	itte	eq
 801d9d4:	b2d2      	uxtbeq	r2, r2
 801d9d6:	2101      	moveq	r1, #1
 801d9d8:	2100      	movne	r1, #0
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	931c      	str	r3, [sp, #112]	; 0x70
 801d9de:	bfb8      	it	lt
 801d9e0:	f1c5 0301 	rsblt	r3, r5, #1
 801d9e4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 801d9e8:	bfb4      	ite	lt
 801d9ea:	222d      	movlt	r2, #45	; 0x2d
 801d9ec:	222b      	movge	r2, #43	; 0x2b
 801d9ee:	2b09      	cmp	r3, #9
 801d9f0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 801d9f4:	f340 81a4 	ble.w	801dd40 <_vfprintf_r+0x998>
 801d9f8:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 801d9fc:	260a      	movs	r6, #10
 801d9fe:	4611      	mov	r1, r2
 801da00:	fb93 f5f6 	sdiv	r5, r3, r6
 801da04:	fb06 3015 	mls	r0, r6, r5, r3
 801da08:	3030      	adds	r0, #48	; 0x30
 801da0a:	f801 0c01 	strb.w	r0, [r1, #-1]
 801da0e:	4618      	mov	r0, r3
 801da10:	2863      	cmp	r0, #99	; 0x63
 801da12:	f102 32ff 	add.w	r2, r2, #4294967295
 801da16:	462b      	mov	r3, r5
 801da18:	dcf1      	bgt.n	801d9fe <_vfprintf_r+0x656>
 801da1a:	3330      	adds	r3, #48	; 0x30
 801da1c:	1e88      	subs	r0, r1, #2
 801da1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801da22:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 801da26:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801da2a:	4603      	mov	r3, r0
 801da2c:	42ab      	cmp	r3, r5
 801da2e:	f0c0 8182 	bcc.w	801dd36 <_vfprintf_r+0x98e>
 801da32:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 801da36:	1a52      	subs	r2, r2, r1
 801da38:	42a8      	cmp	r0, r5
 801da3a:	bf88      	it	hi
 801da3c:	2200      	movhi	r2, #0
 801da3e:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 801da42:	441a      	add	r2, r3
 801da44:	ab1e      	add	r3, sp, #120	; 0x78
 801da46:	1ad3      	subs	r3, r2, r3
 801da48:	9a05      	ldr	r2, [sp, #20]
 801da4a:	9315      	str	r3, [sp, #84]	; 0x54
 801da4c:	2a01      	cmp	r2, #1
 801da4e:	eb03 0802 	add.w	r8, r3, r2
 801da52:	dc02      	bgt.n	801da5a <_vfprintf_r+0x6b2>
 801da54:	f01b 0f01 	tst.w	fp, #1
 801da58:	d001      	beq.n	801da5e <_vfprintf_r+0x6b6>
 801da5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801da5c:	4498      	add	r8, r3
 801da5e:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801da62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801da66:	9311      	str	r3, [sp, #68]	; 0x44
 801da68:	2300      	movs	r3, #0
 801da6a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801da6e:	461d      	mov	r5, r3
 801da70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801da72:	b113      	cbz	r3, 801da7a <_vfprintf_r+0x6d2>
 801da74:	232d      	movs	r3, #45	; 0x2d
 801da76:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 801da7a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801da7e:	2600      	movs	r6, #0
 801da80:	4546      	cmp	r6, r8
 801da82:	4633      	mov	r3, r6
 801da84:	bfb8      	it	lt
 801da86:	4643      	movlt	r3, r8
 801da88:	9311      	str	r3, [sp, #68]	; 0x44
 801da8a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801da8e:	b113      	cbz	r3, 801da96 <_vfprintf_r+0x6ee>
 801da90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801da92:	3301      	adds	r3, #1
 801da94:	9311      	str	r3, [sp, #68]	; 0x44
 801da96:	f01b 0302 	ands.w	r3, fp, #2
 801da9a:	9317      	str	r3, [sp, #92]	; 0x5c
 801da9c:	bf1e      	ittt	ne
 801da9e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 801daa0:	3302      	addne	r3, #2
 801daa2:	9311      	strne	r3, [sp, #68]	; 0x44
 801daa4:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801daa8:	9318      	str	r3, [sp, #96]	; 0x60
 801daaa:	d11f      	bne.n	801daec <_vfprintf_r+0x744>
 801daac:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801dab0:	1a9f      	subs	r7, r3, r2
 801dab2:	2f00      	cmp	r7, #0
 801dab4:	dd1a      	ble.n	801daec <_vfprintf_r+0x744>
 801dab6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801daba:	4848      	ldr	r0, [pc, #288]	; (801dbdc <_vfprintf_r+0x834>)
 801dabc:	6020      	str	r0, [r4, #0]
 801dabe:	2f10      	cmp	r7, #16
 801dac0:	f103 0301 	add.w	r3, r3, #1
 801dac4:	f104 0108 	add.w	r1, r4, #8
 801dac8:	f300 82f0 	bgt.w	801e0ac <_vfprintf_r+0xd04>
 801dacc:	6067      	str	r7, [r4, #4]
 801dace:	2b07      	cmp	r3, #7
 801dad0:	4417      	add	r7, r2
 801dad2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801dad6:	f340 82fc 	ble.w	801e0d2 <_vfprintf_r+0xd2a>
 801dada:	aa22      	add	r2, sp, #136	; 0x88
 801dadc:	4649      	mov	r1, r9
 801dade:	4650      	mov	r0, sl
 801dae0:	f004 f963 	bl	8021daa <__sprint_r>
 801dae4:	2800      	cmp	r0, #0
 801dae6:	f040 8632 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801daea:	ac25      	add	r4, sp, #148	; 0x94
 801daec:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 801daf0:	b173      	cbz	r3, 801db10 <_vfprintf_r+0x768>
 801daf2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 801daf6:	6023      	str	r3, [r4, #0]
 801daf8:	2301      	movs	r3, #1
 801dafa:	6063      	str	r3, [r4, #4]
 801dafc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dafe:	3301      	adds	r3, #1
 801db00:	9324      	str	r3, [sp, #144]	; 0x90
 801db02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801db04:	3301      	adds	r3, #1
 801db06:	2b07      	cmp	r3, #7
 801db08:	9323      	str	r3, [sp, #140]	; 0x8c
 801db0a:	f300 82e4 	bgt.w	801e0d6 <_vfprintf_r+0xd2e>
 801db0e:	3408      	adds	r4, #8
 801db10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801db12:	b16b      	cbz	r3, 801db30 <_vfprintf_r+0x788>
 801db14:	ab1b      	add	r3, sp, #108	; 0x6c
 801db16:	6023      	str	r3, [r4, #0]
 801db18:	2302      	movs	r3, #2
 801db1a:	6063      	str	r3, [r4, #4]
 801db1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801db1e:	3302      	adds	r3, #2
 801db20:	9324      	str	r3, [sp, #144]	; 0x90
 801db22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801db24:	3301      	adds	r3, #1
 801db26:	2b07      	cmp	r3, #7
 801db28:	9323      	str	r3, [sp, #140]	; 0x8c
 801db2a:	f300 82de 	bgt.w	801e0ea <_vfprintf_r+0xd42>
 801db2e:	3408      	adds	r4, #8
 801db30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801db32:	2b80      	cmp	r3, #128	; 0x80
 801db34:	d11f      	bne.n	801db76 <_vfprintf_r+0x7ce>
 801db36:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801db3a:	1a9f      	subs	r7, r3, r2
 801db3c:	2f00      	cmp	r7, #0
 801db3e:	dd1a      	ble.n	801db76 <_vfprintf_r+0x7ce>
 801db40:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801db44:	4826      	ldr	r0, [pc, #152]	; (801dbe0 <_vfprintf_r+0x838>)
 801db46:	6020      	str	r0, [r4, #0]
 801db48:	2f10      	cmp	r7, #16
 801db4a:	f103 0301 	add.w	r3, r3, #1
 801db4e:	f104 0108 	add.w	r1, r4, #8
 801db52:	f300 82d4 	bgt.w	801e0fe <_vfprintf_r+0xd56>
 801db56:	6067      	str	r7, [r4, #4]
 801db58:	2b07      	cmp	r3, #7
 801db5a:	4417      	add	r7, r2
 801db5c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801db60:	f340 82e0 	ble.w	801e124 <_vfprintf_r+0xd7c>
 801db64:	aa22      	add	r2, sp, #136	; 0x88
 801db66:	4649      	mov	r1, r9
 801db68:	4650      	mov	r0, sl
 801db6a:	f004 f91e 	bl	8021daa <__sprint_r>
 801db6e:	2800      	cmp	r0, #0
 801db70:	f040 85ed 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801db74:	ac25      	add	r4, sp, #148	; 0x94
 801db76:	eba6 0608 	sub.w	r6, r6, r8
 801db7a:	2e00      	cmp	r6, #0
 801db7c:	dd1a      	ble.n	801dbb4 <_vfprintf_r+0x80c>
 801db7e:	4f18      	ldr	r7, [pc, #96]	; (801dbe0 <_vfprintf_r+0x838>)
 801db80:	6027      	str	r7, [r4, #0]
 801db82:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801db86:	2e10      	cmp	r6, #16
 801db88:	f103 0301 	add.w	r3, r3, #1
 801db8c:	f104 0108 	add.w	r1, r4, #8
 801db90:	f300 82ca 	bgt.w	801e128 <_vfprintf_r+0xd80>
 801db94:	6066      	str	r6, [r4, #4]
 801db96:	2b07      	cmp	r3, #7
 801db98:	4416      	add	r6, r2
 801db9a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801db9e:	f340 82d6 	ble.w	801e14e <_vfprintf_r+0xda6>
 801dba2:	aa22      	add	r2, sp, #136	; 0x88
 801dba4:	4649      	mov	r1, r9
 801dba6:	4650      	mov	r0, sl
 801dba8:	f004 f8ff 	bl	8021daa <__sprint_r>
 801dbac:	2800      	cmp	r0, #0
 801dbae:	f040 85ce 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801dbb2:	ac25      	add	r4, sp, #148	; 0x94
 801dbb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801dbb8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801dbba:	f040 82cf 	bne.w	801e15c <_vfprintf_r+0xdb4>
 801dbbe:	9b03      	ldr	r3, [sp, #12]
 801dbc0:	e9c4 3800 	strd	r3, r8, [r4]
 801dbc4:	4446      	add	r6, r8
 801dbc6:	9624      	str	r6, [sp, #144]	; 0x90
 801dbc8:	e00c      	b.n	801dbe4 <_vfprintf_r+0x83c>
 801dbca:	bf00      	nop
 801dbcc:	0802a119 	.word	0x0802a119
 801dbd0:	0802a108 	.word	0x0802a108
 801dbd4:	40300000 	.word	0x40300000
 801dbd8:	3fe00000 	.word	0x3fe00000
 801dbdc:	0802a188 	.word	0x0802a188
 801dbe0:	0802a198 	.word	0x0802a198
 801dbe4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801dbe6:	3301      	adds	r3, #1
 801dbe8:	2b07      	cmp	r3, #7
 801dbea:	9323      	str	r3, [sp, #140]	; 0x8c
 801dbec:	f300 82fb 	bgt.w	801e1e6 <_vfprintf_r+0xe3e>
 801dbf0:	3408      	adds	r4, #8
 801dbf2:	f01b 0f04 	tst.w	fp, #4
 801dbf6:	f040 858c 	bne.w	801e712 <_vfprintf_r+0x136a>
 801dbfa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801dbfe:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dc00:	428a      	cmp	r2, r1
 801dc02:	bfac      	ite	ge
 801dc04:	189b      	addge	r3, r3, r2
 801dc06:	185b      	addlt	r3, r3, r1
 801dc08:	930f      	str	r3, [sp, #60]	; 0x3c
 801dc0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dc0c:	b13b      	cbz	r3, 801dc1e <_vfprintf_r+0x876>
 801dc0e:	aa22      	add	r2, sp, #136	; 0x88
 801dc10:	4649      	mov	r1, r9
 801dc12:	4650      	mov	r0, sl
 801dc14:	f004 f8c9 	bl	8021daa <__sprint_r>
 801dc18:	2800      	cmp	r0, #0
 801dc1a:	f040 8598 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801dc1e:	2300      	movs	r3, #0
 801dc20:	9323      	str	r3, [sp, #140]	; 0x8c
 801dc22:	9b04      	ldr	r3, [sp, #16]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	f040 85ae 	bne.w	801e786 <_vfprintf_r+0x13de>
 801dc2a:	ac25      	add	r4, sp, #148	; 0x94
 801dc2c:	e0eb      	b.n	801de06 <_vfprintf_r+0xa5e>
 801dc2e:	ab35      	add	r3, sp, #212	; 0xd4
 801dc30:	9004      	str	r0, [sp, #16]
 801dc32:	9303      	str	r3, [sp, #12]
 801dc34:	e62e      	b.n	801d894 <_vfprintf_r+0x4ec>
 801dc36:	9b03      	ldr	r3, [sp, #12]
 801dc38:	9304      	str	r3, [sp, #16]
 801dc3a:	e62b      	b.n	801d894 <_vfprintf_r+0x4ec>
 801dc3c:	9004      	str	r0, [sp, #16]
 801dc3e:	f04f 0806 	mov.w	r8, #6
 801dc42:	e627      	b.n	801d894 <_vfprintf_r+0x4ec>
 801dc44:	9004      	str	r0, [sp, #16]
 801dc46:	e625      	b.n	801d894 <_vfprintf_r+0x4ec>
 801dc48:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	eeb0 8a47 	vmov.f32	s16, s14
 801dc52:	eef0 8a67 	vmov.f32	s17, s15
 801dc56:	e62d      	b.n	801d8b4 <_vfprintf_r+0x50c>
 801dc58:	f802 0c01 	strb.w	r0, [r2, #-1]
 801dc5c:	e68f      	b.n	801d97e <_vfprintf_r+0x5d6>
 801dc5e:	f803 0b01 	strb.w	r0, [r3], #1
 801dc62:	1aca      	subs	r2, r1, r3
 801dc64:	2a00      	cmp	r2, #0
 801dc66:	dafa      	bge.n	801dc5e <_vfprintf_r+0x8b6>
 801dc68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc6c:	3201      	adds	r2, #1
 801dc6e:	f103 0301 	add.w	r3, r3, #1
 801dc72:	bfb8      	it	lt
 801dc74:	2300      	movlt	r3, #0
 801dc76:	441d      	add	r5, r3
 801dc78:	e691      	b.n	801d99e <_vfprintf_r+0x5f6>
 801dc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc7c:	462b      	mov	r3, r5
 801dc7e:	18a9      	adds	r1, r5, r2
 801dc80:	2030      	movs	r0, #48	; 0x30
 801dc82:	e7ee      	b.n	801dc62 <_vfprintf_r+0x8ba>
 801dc84:	9b08      	ldr	r3, [sp, #32]
 801dc86:	2b46      	cmp	r3, #70	; 0x46
 801dc88:	d005      	beq.n	801dc96 <_vfprintf_r+0x8ee>
 801dc8a:	2b45      	cmp	r3, #69	; 0x45
 801dc8c:	d11b      	bne.n	801dcc6 <_vfprintf_r+0x91e>
 801dc8e:	f108 0501 	add.w	r5, r8, #1
 801dc92:	2102      	movs	r1, #2
 801dc94:	e001      	b.n	801dc9a <_vfprintf_r+0x8f2>
 801dc96:	4645      	mov	r5, r8
 801dc98:	2103      	movs	r1, #3
 801dc9a:	ab20      	add	r3, sp, #128	; 0x80
 801dc9c:	9301      	str	r3, [sp, #4]
 801dc9e:	ab1d      	add	r3, sp, #116	; 0x74
 801dca0:	9300      	str	r3, [sp, #0]
 801dca2:	462a      	mov	r2, r5
 801dca4:	ab1c      	add	r3, sp, #112	; 0x70
 801dca6:	4650      	mov	r0, sl
 801dca8:	eeb0 0a48 	vmov.f32	s0, s16
 801dcac:	eef0 0a68 	vmov.f32	s1, s17
 801dcb0:	f000 fefa 	bl	801eaa8 <_dtoa_r>
 801dcb4:	9b08      	ldr	r3, [sp, #32]
 801dcb6:	9003      	str	r0, [sp, #12]
 801dcb8:	2b47      	cmp	r3, #71	; 0x47
 801dcba:	d106      	bne.n	801dcca <_vfprintf_r+0x922>
 801dcbc:	f01b 0f01 	tst.w	fp, #1
 801dcc0:	d103      	bne.n	801dcca <_vfprintf_r+0x922>
 801dcc2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801dcc4:	e66b      	b.n	801d99e <_vfprintf_r+0x5f6>
 801dcc6:	4645      	mov	r5, r8
 801dcc8:	e7e3      	b.n	801dc92 <_vfprintf_r+0x8ea>
 801dcca:	9b03      	ldr	r3, [sp, #12]
 801dccc:	195e      	adds	r6, r3, r5
 801dcce:	9b08      	ldr	r3, [sp, #32]
 801dcd0:	2b46      	cmp	r3, #70	; 0x46
 801dcd2:	d10f      	bne.n	801dcf4 <_vfprintf_r+0x94c>
 801dcd4:	9b03      	ldr	r3, [sp, #12]
 801dcd6:	781b      	ldrb	r3, [r3, #0]
 801dcd8:	2b30      	cmp	r3, #48	; 0x30
 801dcda:	d109      	bne.n	801dcf0 <_vfprintf_r+0x948>
 801dcdc:	ec51 0b18 	vmov	r0, r1, d8
 801dce0:	2200      	movs	r2, #0
 801dce2:	2300      	movs	r3, #0
 801dce4:	f7e2 ff20 	bl	8000b28 <__aeabi_dcmpeq>
 801dce8:	b910      	cbnz	r0, 801dcf0 <_vfprintf_r+0x948>
 801dcea:	f1c5 0501 	rsb	r5, r5, #1
 801dcee:	951c      	str	r5, [sp, #112]	; 0x70
 801dcf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dcf2:	441e      	add	r6, r3
 801dcf4:	ec51 0b18 	vmov	r0, r1, d8
 801dcf8:	2200      	movs	r2, #0
 801dcfa:	2300      	movs	r3, #0
 801dcfc:	f7e2 ff14 	bl	8000b28 <__aeabi_dcmpeq>
 801dd00:	b100      	cbz	r0, 801dd04 <_vfprintf_r+0x95c>
 801dd02:	9620      	str	r6, [sp, #128]	; 0x80
 801dd04:	2230      	movs	r2, #48	; 0x30
 801dd06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dd08:	429e      	cmp	r6, r3
 801dd0a:	d9da      	bls.n	801dcc2 <_vfprintf_r+0x91a>
 801dd0c:	1c59      	adds	r1, r3, #1
 801dd0e:	9120      	str	r1, [sp, #128]	; 0x80
 801dd10:	701a      	strb	r2, [r3, #0]
 801dd12:	e7f8      	b.n	801dd06 <_vfprintf_r+0x95e>
 801dd14:	9b08      	ldr	r3, [sp, #32]
 801dd16:	2b46      	cmp	r3, #70	; 0x46
 801dd18:	f47f ae51 	bne.w	801d9be <_vfprintf_r+0x616>
 801dd1c:	f00b 0301 	and.w	r3, fp, #1
 801dd20:	2d00      	cmp	r5, #0
 801dd22:	ea43 0308 	orr.w	r3, r3, r8
 801dd26:	dd18      	ble.n	801dd5a <_vfprintf_r+0x9b2>
 801dd28:	b383      	cbz	r3, 801dd8c <_vfprintf_r+0x9e4>
 801dd2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd2c:	18eb      	adds	r3, r5, r3
 801dd2e:	4498      	add	r8, r3
 801dd30:	2366      	movs	r3, #102	; 0x66
 801dd32:	9307      	str	r3, [sp, #28]
 801dd34:	e030      	b.n	801dd98 <_vfprintf_r+0x9f0>
 801dd36:	f813 6b01 	ldrb.w	r6, [r3], #1
 801dd3a:	f802 6b01 	strb.w	r6, [r2], #1
 801dd3e:	e675      	b.n	801da2c <_vfprintf_r+0x684>
 801dd40:	b941      	cbnz	r1, 801dd54 <_vfprintf_r+0x9ac>
 801dd42:	2230      	movs	r2, #48	; 0x30
 801dd44:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 801dd48:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801dd4c:	3330      	adds	r3, #48	; 0x30
 801dd4e:	f802 3b01 	strb.w	r3, [r2], #1
 801dd52:	e677      	b.n	801da44 <_vfprintf_r+0x69c>
 801dd54:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 801dd58:	e7f8      	b.n	801dd4c <_vfprintf_r+0x9a4>
 801dd5a:	b1cb      	cbz	r3, 801dd90 <_vfprintf_r+0x9e8>
 801dd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd5e:	3301      	adds	r3, #1
 801dd60:	e7e5      	b.n	801dd2e <_vfprintf_r+0x986>
 801dd62:	9b05      	ldr	r3, [sp, #20]
 801dd64:	429d      	cmp	r5, r3
 801dd66:	db07      	blt.n	801dd78 <_vfprintf_r+0x9d0>
 801dd68:	f01b 0f01 	tst.w	fp, #1
 801dd6c:	d029      	beq.n	801ddc2 <_vfprintf_r+0xa1a>
 801dd6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dd70:	eb05 0803 	add.w	r8, r5, r3
 801dd74:	2367      	movs	r3, #103	; 0x67
 801dd76:	e7dc      	b.n	801dd32 <_vfprintf_r+0x98a>
 801dd78:	9b05      	ldr	r3, [sp, #20]
 801dd7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dd7c:	2d00      	cmp	r5, #0
 801dd7e:	eb03 0802 	add.w	r8, r3, r2
 801dd82:	dcf7      	bgt.n	801dd74 <_vfprintf_r+0x9cc>
 801dd84:	f1c5 0301 	rsb	r3, r5, #1
 801dd88:	4498      	add	r8, r3
 801dd8a:	e7f3      	b.n	801dd74 <_vfprintf_r+0x9cc>
 801dd8c:	46a8      	mov	r8, r5
 801dd8e:	e7cf      	b.n	801dd30 <_vfprintf_r+0x988>
 801dd90:	2366      	movs	r3, #102	; 0x66
 801dd92:	9307      	str	r3, [sp, #28]
 801dd94:	f04f 0801 	mov.w	r8, #1
 801dd98:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801dd9c:	9309      	str	r3, [sp, #36]	; 0x24
 801dd9e:	d023      	beq.n	801dde8 <_vfprintf_r+0xa40>
 801dda0:	2300      	movs	r3, #0
 801dda2:	2d00      	cmp	r5, #0
 801dda4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801dda8:	f77f ae62 	ble.w	801da70 <_vfprintf_r+0x6c8>
 801ddac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddae:	781b      	ldrb	r3, [r3, #0]
 801ddb0:	2bff      	cmp	r3, #255	; 0xff
 801ddb2:	d108      	bne.n	801ddc6 <_vfprintf_r+0xa1e>
 801ddb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ddb8:	4413      	add	r3, r2
 801ddba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ddbc:	fb02 8803 	mla	r8, r2, r3, r8
 801ddc0:	e656      	b.n	801da70 <_vfprintf_r+0x6c8>
 801ddc2:	46a8      	mov	r8, r5
 801ddc4:	e7d6      	b.n	801dd74 <_vfprintf_r+0x9cc>
 801ddc6:	42ab      	cmp	r3, r5
 801ddc8:	daf4      	bge.n	801ddb4 <_vfprintf_r+0xa0c>
 801ddca:	1aed      	subs	r5, r5, r3
 801ddcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddce:	785b      	ldrb	r3, [r3, #1]
 801ddd0:	b133      	cbz	r3, 801dde0 <_vfprintf_r+0xa38>
 801ddd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddd4:	3301      	adds	r3, #1
 801ddd6:	9309      	str	r3, [sp, #36]	; 0x24
 801ddd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddda:	3301      	adds	r3, #1
 801dddc:	930a      	str	r3, [sp, #40]	; 0x28
 801ddde:	e7e5      	b.n	801ddac <_vfprintf_r+0xa04>
 801dde0:	9b08      	ldr	r3, [sp, #32]
 801dde2:	3301      	adds	r3, #1
 801dde4:	9308      	str	r3, [sp, #32]
 801dde6:	e7e1      	b.n	801ddac <_vfprintf_r+0xa04>
 801dde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddea:	9308      	str	r3, [sp, #32]
 801ddec:	e640      	b.n	801da70 <_vfprintf_r+0x6c8>
 801ddee:	4632      	mov	r2, r6
 801ddf0:	f01b 0f20 	tst.w	fp, #32
 801ddf4:	f852 3b04 	ldr.w	r3, [r2], #4
 801ddf8:	9206      	str	r2, [sp, #24]
 801ddfa:	d009      	beq.n	801de10 <_vfprintf_r+0xa68>
 801ddfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ddfe:	4610      	mov	r0, r2
 801de00:	17d1      	asrs	r1, r2, #31
 801de02:	e9c3 0100 	strd	r0, r1, [r3]
 801de06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de08:	9e06      	ldr	r6, [sp, #24]
 801de0a:	9303      	str	r3, [sp, #12]
 801de0c:	f7ff bb4f 	b.w	801d4ae <_vfprintf_r+0x106>
 801de10:	f01b 0f10 	tst.w	fp, #16
 801de14:	d002      	beq.n	801de1c <_vfprintf_r+0xa74>
 801de16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de18:	601a      	str	r2, [r3, #0]
 801de1a:	e7f4      	b.n	801de06 <_vfprintf_r+0xa5e>
 801de1c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801de20:	d002      	beq.n	801de28 <_vfprintf_r+0xa80>
 801de22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de24:	801a      	strh	r2, [r3, #0]
 801de26:	e7ee      	b.n	801de06 <_vfprintf_r+0xa5e>
 801de28:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801de2c:	d0f3      	beq.n	801de16 <_vfprintf_r+0xa6e>
 801de2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801de30:	701a      	strb	r2, [r3, #0]
 801de32:	e7e8      	b.n	801de06 <_vfprintf_r+0xa5e>
 801de34:	f04b 0b10 	orr.w	fp, fp, #16
 801de38:	f01b 0f20 	tst.w	fp, #32
 801de3c:	d01e      	beq.n	801de7c <_vfprintf_r+0xad4>
 801de3e:	3607      	adds	r6, #7
 801de40:	f026 0307 	bic.w	r3, r6, #7
 801de44:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801de48:	9306      	str	r3, [sp, #24]
 801de4a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801de4e:	2300      	movs	r3, #0
 801de50:	2200      	movs	r2, #0
 801de52:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801de56:	f1b8 3fff 	cmp.w	r8, #4294967295
 801de5a:	f000 84a9 	beq.w	801e7b0 <_vfprintf_r+0x1408>
 801de5e:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 801de62:	9204      	str	r2, [sp, #16]
 801de64:	ea56 0207 	orrs.w	r2, r6, r7
 801de68:	f040 84a8 	bne.w	801e7bc <_vfprintf_r+0x1414>
 801de6c:	f1b8 0f00 	cmp.w	r8, #0
 801de70:	f000 8104 	beq.w	801e07c <_vfprintf_r+0xcd4>
 801de74:	2b01      	cmp	r3, #1
 801de76:	f040 84a4 	bne.w	801e7c2 <_vfprintf_r+0x141a>
 801de7a:	e09a      	b.n	801dfb2 <_vfprintf_r+0xc0a>
 801de7c:	1d33      	adds	r3, r6, #4
 801de7e:	f01b 0f10 	tst.w	fp, #16
 801de82:	9306      	str	r3, [sp, #24]
 801de84:	d001      	beq.n	801de8a <_vfprintf_r+0xae2>
 801de86:	6836      	ldr	r6, [r6, #0]
 801de88:	e003      	b.n	801de92 <_vfprintf_r+0xaea>
 801de8a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801de8e:	d002      	beq.n	801de96 <_vfprintf_r+0xaee>
 801de90:	8836      	ldrh	r6, [r6, #0]
 801de92:	2700      	movs	r7, #0
 801de94:	e7d9      	b.n	801de4a <_vfprintf_r+0xaa2>
 801de96:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801de9a:	d0f4      	beq.n	801de86 <_vfprintf_r+0xade>
 801de9c:	7836      	ldrb	r6, [r6, #0]
 801de9e:	e7f8      	b.n	801de92 <_vfprintf_r+0xaea>
 801dea0:	4633      	mov	r3, r6
 801dea2:	2278      	movs	r2, #120	; 0x78
 801dea4:	f853 6b04 	ldr.w	r6, [r3], #4
 801dea8:	9306      	str	r3, [sp, #24]
 801deaa:	f647 0330 	movw	r3, #30768	; 0x7830
 801deae:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 801deb2:	4ba8      	ldr	r3, [pc, #672]	; (801e154 <_vfprintf_r+0xdac>)
 801deb4:	9316      	str	r3, [sp, #88]	; 0x58
 801deb6:	2700      	movs	r7, #0
 801deb8:	f04b 0b02 	orr.w	fp, fp, #2
 801debc:	2302      	movs	r3, #2
 801debe:	9207      	str	r2, [sp, #28]
 801dec0:	e7c6      	b.n	801de50 <_vfprintf_r+0xaa8>
 801dec2:	4632      	mov	r2, r6
 801dec4:	2500      	movs	r5, #0
 801dec6:	f852 3b04 	ldr.w	r3, [r2], #4
 801deca:	9303      	str	r3, [sp, #12]
 801decc:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ded0:	9206      	str	r2, [sp, #24]
 801ded2:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 801ded6:	d010      	beq.n	801defa <_vfprintf_r+0xb52>
 801ded8:	9803      	ldr	r0, [sp, #12]
 801deda:	4642      	mov	r2, r8
 801dedc:	4629      	mov	r1, r5
 801dede:	f7e2 f9af 	bl	8000240 <memchr>
 801dee2:	9004      	str	r0, [sp, #16]
 801dee4:	2800      	cmp	r0, #0
 801dee6:	f000 80df 	beq.w	801e0a8 <_vfprintf_r+0xd00>
 801deea:	9a03      	ldr	r2, [sp, #12]
 801deec:	9504      	str	r5, [sp, #16]
 801deee:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801def2:	eba0 0802 	sub.w	r8, r0, r2
 801def6:	462e      	mov	r6, r5
 801def8:	e5c2      	b.n	801da80 <_vfprintf_r+0x6d8>
 801defa:	9803      	ldr	r0, [sp, #12]
 801defc:	f7e2 f992 	bl	8000224 <strlen>
 801df00:	462e      	mov	r6, r5
 801df02:	4680      	mov	r8, r0
 801df04:	9504      	str	r5, [sp, #16]
 801df06:	4633      	mov	r3, r6
 801df08:	e45e      	b.n	801d7c8 <_vfprintf_r+0x420>
 801df0a:	f04b 0b10 	orr.w	fp, fp, #16
 801df0e:	f01b 0f20 	tst.w	fp, #32
 801df12:	d007      	beq.n	801df24 <_vfprintf_r+0xb7c>
 801df14:	3607      	adds	r6, #7
 801df16:	f026 0307 	bic.w	r3, r6, #7
 801df1a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801df1e:	9306      	str	r3, [sp, #24]
 801df20:	2301      	movs	r3, #1
 801df22:	e795      	b.n	801de50 <_vfprintf_r+0xaa8>
 801df24:	1d33      	adds	r3, r6, #4
 801df26:	f01b 0f10 	tst.w	fp, #16
 801df2a:	9306      	str	r3, [sp, #24]
 801df2c:	d001      	beq.n	801df32 <_vfprintf_r+0xb8a>
 801df2e:	6836      	ldr	r6, [r6, #0]
 801df30:	e003      	b.n	801df3a <_vfprintf_r+0xb92>
 801df32:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801df36:	d002      	beq.n	801df3e <_vfprintf_r+0xb96>
 801df38:	8836      	ldrh	r6, [r6, #0]
 801df3a:	2700      	movs	r7, #0
 801df3c:	e7f0      	b.n	801df20 <_vfprintf_r+0xb78>
 801df3e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801df42:	d0f4      	beq.n	801df2e <_vfprintf_r+0xb86>
 801df44:	7836      	ldrb	r6, [r6, #0]
 801df46:	e7f8      	b.n	801df3a <_vfprintf_r+0xb92>
 801df48:	4b83      	ldr	r3, [pc, #524]	; (801e158 <_vfprintf_r+0xdb0>)
 801df4a:	9316      	str	r3, [sp, #88]	; 0x58
 801df4c:	f01b 0f20 	tst.w	fp, #32
 801df50:	d019      	beq.n	801df86 <_vfprintf_r+0xbde>
 801df52:	3607      	adds	r6, #7
 801df54:	f026 0307 	bic.w	r3, r6, #7
 801df58:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801df5c:	9306      	str	r3, [sp, #24]
 801df5e:	f01b 0f01 	tst.w	fp, #1
 801df62:	d00a      	beq.n	801df7a <_vfprintf_r+0xbd2>
 801df64:	ea56 0307 	orrs.w	r3, r6, r7
 801df68:	d007      	beq.n	801df7a <_vfprintf_r+0xbd2>
 801df6a:	2330      	movs	r3, #48	; 0x30
 801df6c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801df70:	9b07      	ldr	r3, [sp, #28]
 801df72:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 801df76:	f04b 0b02 	orr.w	fp, fp, #2
 801df7a:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801df7e:	2302      	movs	r3, #2
 801df80:	e766      	b.n	801de50 <_vfprintf_r+0xaa8>
 801df82:	4b74      	ldr	r3, [pc, #464]	; (801e154 <_vfprintf_r+0xdac>)
 801df84:	e7e1      	b.n	801df4a <_vfprintf_r+0xba2>
 801df86:	1d33      	adds	r3, r6, #4
 801df88:	f01b 0f10 	tst.w	fp, #16
 801df8c:	9306      	str	r3, [sp, #24]
 801df8e:	d001      	beq.n	801df94 <_vfprintf_r+0xbec>
 801df90:	6836      	ldr	r6, [r6, #0]
 801df92:	e003      	b.n	801df9c <_vfprintf_r+0xbf4>
 801df94:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801df98:	d002      	beq.n	801dfa0 <_vfprintf_r+0xbf8>
 801df9a:	8836      	ldrh	r6, [r6, #0]
 801df9c:	2700      	movs	r7, #0
 801df9e:	e7de      	b.n	801df5e <_vfprintf_r+0xbb6>
 801dfa0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801dfa4:	d0f4      	beq.n	801df90 <_vfprintf_r+0xbe8>
 801dfa6:	7836      	ldrb	r6, [r6, #0]
 801dfa8:	e7f8      	b.n	801df9c <_vfprintf_r+0xbf4>
 801dfaa:	2f00      	cmp	r7, #0
 801dfac:	bf08      	it	eq
 801dfae:	2e0a      	cmpeq	r6, #10
 801dfb0:	d206      	bcs.n	801dfc0 <_vfprintf_r+0xc18>
 801dfb2:	3630      	adds	r6, #48	; 0x30
 801dfb4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 801dfb8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801dfbc:	f000 bc23 	b.w	801e806 <_vfprintf_r+0x145e>
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	9305      	str	r3, [sp, #20]
 801dfc4:	9b04      	ldr	r3, [sp, #16]
 801dfc6:	ad4e      	add	r5, sp, #312	; 0x138
 801dfc8:	f403 6b80 	and.w	fp, r3, #1024	; 0x400
 801dfcc:	1e6b      	subs	r3, r5, #1
 801dfce:	9303      	str	r3, [sp, #12]
 801dfd0:	220a      	movs	r2, #10
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	4639      	mov	r1, r7
 801dfd8:	f7e2 fe66 	bl	8000ca8 <__aeabi_uldivmod>
 801dfdc:	9b05      	ldr	r3, [sp, #20]
 801dfde:	3230      	adds	r2, #48	; 0x30
 801dfe0:	3301      	adds	r3, #1
 801dfe2:	f805 2c01 	strb.w	r2, [r5, #-1]
 801dfe6:	9305      	str	r3, [sp, #20]
 801dfe8:	f1bb 0f00 	cmp.w	fp, #0
 801dfec:	d019      	beq.n	801e022 <_vfprintf_r+0xc7a>
 801dfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dff0:	9a05      	ldr	r2, [sp, #20]
 801dff2:	781b      	ldrb	r3, [r3, #0]
 801dff4:	429a      	cmp	r2, r3
 801dff6:	d114      	bne.n	801e022 <_vfprintf_r+0xc7a>
 801dff8:	2aff      	cmp	r2, #255	; 0xff
 801dffa:	d012      	beq.n	801e022 <_vfprintf_r+0xc7a>
 801dffc:	2f00      	cmp	r7, #0
 801dffe:	bf08      	it	eq
 801e000:	2e0a      	cmpeq	r6, #10
 801e002:	d30e      	bcc.n	801e022 <_vfprintf_r+0xc7a>
 801e004:	9b03      	ldr	r3, [sp, #12]
 801e006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e008:	9914      	ldr	r1, [sp, #80]	; 0x50
 801e00a:	1a9b      	subs	r3, r3, r2
 801e00c:	4618      	mov	r0, r3
 801e00e:	9303      	str	r3, [sp, #12]
 801e010:	f7fd fd0f 	bl	801ba32 <strncpy>
 801e014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e016:	785d      	ldrb	r5, [r3, #1]
 801e018:	b1e5      	cbz	r5, 801e054 <_vfprintf_r+0xcac>
 801e01a:	3301      	adds	r3, #1
 801e01c:	930a      	str	r3, [sp, #40]	; 0x28
 801e01e:	2300      	movs	r3, #0
 801e020:	9305      	str	r3, [sp, #20]
 801e022:	220a      	movs	r2, #10
 801e024:	2300      	movs	r3, #0
 801e026:	4630      	mov	r0, r6
 801e028:	4639      	mov	r1, r7
 801e02a:	f7e2 fe3d 	bl	8000ca8 <__aeabi_uldivmod>
 801e02e:	2f00      	cmp	r7, #0
 801e030:	bf08      	it	eq
 801e032:	2e0a      	cmpeq	r6, #10
 801e034:	d20a      	bcs.n	801e04c <_vfprintf_r+0xca4>
 801e036:	9b03      	ldr	r3, [sp, #12]
 801e038:	f8dd b010 	ldr.w	fp, [sp, #16]
 801e03c:	aa4e      	add	r2, sp, #312	; 0x138
 801e03e:	4646      	mov	r6, r8
 801e040:	eba2 0803 	sub.w	r8, r2, r3
 801e044:	2300      	movs	r3, #0
 801e046:	9304      	str	r3, [sp, #16]
 801e048:	f7ff bbbe 	b.w	801d7c8 <_vfprintf_r+0x420>
 801e04c:	9d03      	ldr	r5, [sp, #12]
 801e04e:	4606      	mov	r6, r0
 801e050:	460f      	mov	r7, r1
 801e052:	e7bb      	b.n	801dfcc <_vfprintf_r+0xc24>
 801e054:	9505      	str	r5, [sp, #20]
 801e056:	e7e4      	b.n	801e022 <_vfprintf_r+0xc7a>
 801e058:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e05a:	f006 030f 	and.w	r3, r6, #15
 801e05e:	5cd3      	ldrb	r3, [r2, r3]
 801e060:	9a03      	ldr	r2, [sp, #12]
 801e062:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801e066:	0933      	lsrs	r3, r6, #4
 801e068:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801e06c:	9203      	str	r2, [sp, #12]
 801e06e:	093a      	lsrs	r2, r7, #4
 801e070:	461e      	mov	r6, r3
 801e072:	4617      	mov	r7, r2
 801e074:	ea56 0307 	orrs.w	r3, r6, r7
 801e078:	d1ee      	bne.n	801e058 <_vfprintf_r+0xcb0>
 801e07a:	e7dc      	b.n	801e036 <_vfprintf_r+0xc8e>
 801e07c:	b933      	cbnz	r3, 801e08c <_vfprintf_r+0xce4>
 801e07e:	f01b 0f01 	tst.w	fp, #1
 801e082:	d003      	beq.n	801e08c <_vfprintf_r+0xce4>
 801e084:	2330      	movs	r3, #48	; 0x30
 801e086:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801e08a:	e795      	b.n	801dfb8 <_vfprintf_r+0xc10>
 801e08c:	ab4e      	add	r3, sp, #312	; 0x138
 801e08e:	e3ba      	b.n	801e806 <_vfprintf_r+0x145e>
 801e090:	9b07      	ldr	r3, [sp, #28]
 801e092:	2b00      	cmp	r3, #0
 801e094:	f000 837d 	beq.w	801e792 <_vfprintf_r+0x13ea>
 801e098:	2000      	movs	r0, #0
 801e09a:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 801e09e:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 801e0a2:	9606      	str	r6, [sp, #24]
 801e0a4:	f7ff bb1e 	b.w	801d6e4 <_vfprintf_r+0x33c>
 801e0a8:	9e04      	ldr	r6, [sp, #16]
 801e0aa:	e72c      	b.n	801df06 <_vfprintf_r+0xb5e>
 801e0ac:	2010      	movs	r0, #16
 801e0ae:	4402      	add	r2, r0
 801e0b0:	2b07      	cmp	r3, #7
 801e0b2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e0b6:	6060      	str	r0, [r4, #4]
 801e0b8:	dd08      	ble.n	801e0cc <_vfprintf_r+0xd24>
 801e0ba:	aa22      	add	r2, sp, #136	; 0x88
 801e0bc:	4649      	mov	r1, r9
 801e0be:	4650      	mov	r0, sl
 801e0c0:	f003 fe73 	bl	8021daa <__sprint_r>
 801e0c4:	2800      	cmp	r0, #0
 801e0c6:	f040 8342 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e0ca:	a925      	add	r1, sp, #148	; 0x94
 801e0cc:	3f10      	subs	r7, #16
 801e0ce:	460c      	mov	r4, r1
 801e0d0:	e4f1      	b.n	801dab6 <_vfprintf_r+0x70e>
 801e0d2:	460c      	mov	r4, r1
 801e0d4:	e50a      	b.n	801daec <_vfprintf_r+0x744>
 801e0d6:	aa22      	add	r2, sp, #136	; 0x88
 801e0d8:	4649      	mov	r1, r9
 801e0da:	4650      	mov	r0, sl
 801e0dc:	f003 fe65 	bl	8021daa <__sprint_r>
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	f040 8334 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e0e6:	ac25      	add	r4, sp, #148	; 0x94
 801e0e8:	e512      	b.n	801db10 <_vfprintf_r+0x768>
 801e0ea:	aa22      	add	r2, sp, #136	; 0x88
 801e0ec:	4649      	mov	r1, r9
 801e0ee:	4650      	mov	r0, sl
 801e0f0:	f003 fe5b 	bl	8021daa <__sprint_r>
 801e0f4:	2800      	cmp	r0, #0
 801e0f6:	f040 832a 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e0fa:	ac25      	add	r4, sp, #148	; 0x94
 801e0fc:	e518      	b.n	801db30 <_vfprintf_r+0x788>
 801e0fe:	2010      	movs	r0, #16
 801e100:	4402      	add	r2, r0
 801e102:	2b07      	cmp	r3, #7
 801e104:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e108:	6060      	str	r0, [r4, #4]
 801e10a:	dd08      	ble.n	801e11e <_vfprintf_r+0xd76>
 801e10c:	aa22      	add	r2, sp, #136	; 0x88
 801e10e:	4649      	mov	r1, r9
 801e110:	4650      	mov	r0, sl
 801e112:	f003 fe4a 	bl	8021daa <__sprint_r>
 801e116:	2800      	cmp	r0, #0
 801e118:	f040 8319 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e11c:	a925      	add	r1, sp, #148	; 0x94
 801e11e:	3f10      	subs	r7, #16
 801e120:	460c      	mov	r4, r1
 801e122:	e50d      	b.n	801db40 <_vfprintf_r+0x798>
 801e124:	460c      	mov	r4, r1
 801e126:	e526      	b.n	801db76 <_vfprintf_r+0x7ce>
 801e128:	2010      	movs	r0, #16
 801e12a:	4402      	add	r2, r0
 801e12c:	2b07      	cmp	r3, #7
 801e12e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e132:	6060      	str	r0, [r4, #4]
 801e134:	dd08      	ble.n	801e148 <_vfprintf_r+0xda0>
 801e136:	aa22      	add	r2, sp, #136	; 0x88
 801e138:	4649      	mov	r1, r9
 801e13a:	4650      	mov	r0, sl
 801e13c:	f003 fe35 	bl	8021daa <__sprint_r>
 801e140:	2800      	cmp	r0, #0
 801e142:	f040 8304 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e146:	a925      	add	r1, sp, #148	; 0x94
 801e148:	3e10      	subs	r6, #16
 801e14a:	460c      	mov	r4, r1
 801e14c:	e518      	b.n	801db80 <_vfprintf_r+0x7d8>
 801e14e:	460c      	mov	r4, r1
 801e150:	e530      	b.n	801dbb4 <_vfprintf_r+0x80c>
 801e152:	bf00      	nop
 801e154:	0802a108 	.word	0x0802a108
 801e158:	0802a119 	.word	0x0802a119
 801e15c:	9b07      	ldr	r3, [sp, #28]
 801e15e:	2b65      	cmp	r3, #101	; 0x65
 801e160:	f340 8242 	ble.w	801e5e8 <_vfprintf_r+0x1240>
 801e164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e168:	2200      	movs	r2, #0
 801e16a:	2300      	movs	r3, #0
 801e16c:	f7e2 fcdc 	bl	8000b28 <__aeabi_dcmpeq>
 801e170:	2800      	cmp	r0, #0
 801e172:	d068      	beq.n	801e246 <_vfprintf_r+0xe9e>
 801e174:	4b6d      	ldr	r3, [pc, #436]	; (801e32c <_vfprintf_r+0xf84>)
 801e176:	6023      	str	r3, [r4, #0]
 801e178:	2301      	movs	r3, #1
 801e17a:	441e      	add	r6, r3
 801e17c:	6063      	str	r3, [r4, #4]
 801e17e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e180:	9624      	str	r6, [sp, #144]	; 0x90
 801e182:	3301      	adds	r3, #1
 801e184:	2b07      	cmp	r3, #7
 801e186:	9323      	str	r3, [sp, #140]	; 0x8c
 801e188:	dc37      	bgt.n	801e1fa <_vfprintf_r+0xe52>
 801e18a:	3408      	adds	r4, #8
 801e18c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e18e:	9a05      	ldr	r2, [sp, #20]
 801e190:	4293      	cmp	r3, r2
 801e192:	db03      	blt.n	801e19c <_vfprintf_r+0xdf4>
 801e194:	f01b 0f01 	tst.w	fp, #1
 801e198:	f43f ad2b 	beq.w	801dbf2 <_vfprintf_r+0x84a>
 801e19c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e19e:	6023      	str	r3, [r4, #0]
 801e1a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e1a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e1a4:	6063      	str	r3, [r4, #4]
 801e1a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e1a8:	4413      	add	r3, r2
 801e1aa:	9324      	str	r3, [sp, #144]	; 0x90
 801e1ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e1ae:	3301      	adds	r3, #1
 801e1b0:	2b07      	cmp	r3, #7
 801e1b2:	9323      	str	r3, [sp, #140]	; 0x8c
 801e1b4:	dc2b      	bgt.n	801e20e <_vfprintf_r+0xe66>
 801e1b6:	3408      	adds	r4, #8
 801e1b8:	9b05      	ldr	r3, [sp, #20]
 801e1ba:	1e5d      	subs	r5, r3, #1
 801e1bc:	2d00      	cmp	r5, #0
 801e1be:	f77f ad18 	ble.w	801dbf2 <_vfprintf_r+0x84a>
 801e1c2:	4e5b      	ldr	r6, [pc, #364]	; (801e330 <_vfprintf_r+0xf88>)
 801e1c4:	2710      	movs	r7, #16
 801e1c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e1ca:	2d10      	cmp	r5, #16
 801e1cc:	f103 0301 	add.w	r3, r3, #1
 801e1d0:	f104 0108 	add.w	r1, r4, #8
 801e1d4:	6026      	str	r6, [r4, #0]
 801e1d6:	dc24      	bgt.n	801e222 <_vfprintf_r+0xe7a>
 801e1d8:	6065      	str	r5, [r4, #4]
 801e1da:	2b07      	cmp	r3, #7
 801e1dc:	4415      	add	r5, r2
 801e1de:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e1e2:	f340 8293 	ble.w	801e70c <_vfprintf_r+0x1364>
 801e1e6:	aa22      	add	r2, sp, #136	; 0x88
 801e1e8:	4649      	mov	r1, r9
 801e1ea:	4650      	mov	r0, sl
 801e1ec:	f003 fddd 	bl	8021daa <__sprint_r>
 801e1f0:	2800      	cmp	r0, #0
 801e1f2:	f040 82ac 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e1f6:	ac25      	add	r4, sp, #148	; 0x94
 801e1f8:	e4fb      	b.n	801dbf2 <_vfprintf_r+0x84a>
 801e1fa:	aa22      	add	r2, sp, #136	; 0x88
 801e1fc:	4649      	mov	r1, r9
 801e1fe:	4650      	mov	r0, sl
 801e200:	f003 fdd3 	bl	8021daa <__sprint_r>
 801e204:	2800      	cmp	r0, #0
 801e206:	f040 82a2 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e20a:	ac25      	add	r4, sp, #148	; 0x94
 801e20c:	e7be      	b.n	801e18c <_vfprintf_r+0xde4>
 801e20e:	aa22      	add	r2, sp, #136	; 0x88
 801e210:	4649      	mov	r1, r9
 801e212:	4650      	mov	r0, sl
 801e214:	f003 fdc9 	bl	8021daa <__sprint_r>
 801e218:	2800      	cmp	r0, #0
 801e21a:	f040 8298 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e21e:	ac25      	add	r4, sp, #148	; 0x94
 801e220:	e7ca      	b.n	801e1b8 <_vfprintf_r+0xe10>
 801e222:	3210      	adds	r2, #16
 801e224:	2b07      	cmp	r3, #7
 801e226:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e22a:	6067      	str	r7, [r4, #4]
 801e22c:	dd08      	ble.n	801e240 <_vfprintf_r+0xe98>
 801e22e:	aa22      	add	r2, sp, #136	; 0x88
 801e230:	4649      	mov	r1, r9
 801e232:	4650      	mov	r0, sl
 801e234:	f003 fdb9 	bl	8021daa <__sprint_r>
 801e238:	2800      	cmp	r0, #0
 801e23a:	f040 8288 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e23e:	a925      	add	r1, sp, #148	; 0x94
 801e240:	3d10      	subs	r5, #16
 801e242:	460c      	mov	r4, r1
 801e244:	e7bf      	b.n	801e1c6 <_vfprintf_r+0xe1e>
 801e246:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e248:	2b00      	cmp	r3, #0
 801e24a:	dc73      	bgt.n	801e334 <_vfprintf_r+0xf8c>
 801e24c:	4b37      	ldr	r3, [pc, #220]	; (801e32c <_vfprintf_r+0xf84>)
 801e24e:	6023      	str	r3, [r4, #0]
 801e250:	2301      	movs	r3, #1
 801e252:	441e      	add	r6, r3
 801e254:	6063      	str	r3, [r4, #4]
 801e256:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e258:	9624      	str	r6, [sp, #144]	; 0x90
 801e25a:	3301      	adds	r3, #1
 801e25c:	2b07      	cmp	r3, #7
 801e25e:	9323      	str	r3, [sp, #140]	; 0x8c
 801e260:	dc3d      	bgt.n	801e2de <_vfprintf_r+0xf36>
 801e262:	3408      	adds	r4, #8
 801e264:	9905      	ldr	r1, [sp, #20]
 801e266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801e268:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e26a:	430a      	orrs	r2, r1
 801e26c:	f00b 0101 	and.w	r1, fp, #1
 801e270:	430a      	orrs	r2, r1
 801e272:	f43f acbe 	beq.w	801dbf2 <_vfprintf_r+0x84a>
 801e276:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e278:	6022      	str	r2, [r4, #0]
 801e27a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e27c:	6062      	str	r2, [r4, #4]
 801e27e:	4413      	add	r3, r2
 801e280:	9324      	str	r3, [sp, #144]	; 0x90
 801e282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e284:	3301      	adds	r3, #1
 801e286:	2b07      	cmp	r3, #7
 801e288:	9323      	str	r3, [sp, #140]	; 0x8c
 801e28a:	dc32      	bgt.n	801e2f2 <_vfprintf_r+0xf4a>
 801e28c:	3408      	adds	r4, #8
 801e28e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e290:	2d00      	cmp	r5, #0
 801e292:	da1b      	bge.n	801e2cc <_vfprintf_r+0xf24>
 801e294:	4e26      	ldr	r6, [pc, #152]	; (801e330 <_vfprintf_r+0xf88>)
 801e296:	426d      	negs	r5, r5
 801e298:	4623      	mov	r3, r4
 801e29a:	2710      	movs	r7, #16
 801e29c:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801e2a0:	2d10      	cmp	r5, #16
 801e2a2:	f102 0201 	add.w	r2, r2, #1
 801e2a6:	f104 0408 	add.w	r4, r4, #8
 801e2aa:	601e      	str	r6, [r3, #0]
 801e2ac:	dc2b      	bgt.n	801e306 <_vfprintf_r+0xf5e>
 801e2ae:	605d      	str	r5, [r3, #4]
 801e2b0:	2a07      	cmp	r2, #7
 801e2b2:	440d      	add	r5, r1
 801e2b4:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 801e2b8:	dd08      	ble.n	801e2cc <_vfprintf_r+0xf24>
 801e2ba:	aa22      	add	r2, sp, #136	; 0x88
 801e2bc:	4649      	mov	r1, r9
 801e2be:	4650      	mov	r0, sl
 801e2c0:	f003 fd73 	bl	8021daa <__sprint_r>
 801e2c4:	2800      	cmp	r0, #0
 801e2c6:	f040 8242 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e2ca:	ac25      	add	r4, sp, #148	; 0x94
 801e2cc:	9b03      	ldr	r3, [sp, #12]
 801e2ce:	6023      	str	r3, [r4, #0]
 801e2d0:	9b05      	ldr	r3, [sp, #20]
 801e2d2:	9a05      	ldr	r2, [sp, #20]
 801e2d4:	6063      	str	r3, [r4, #4]
 801e2d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e2d8:	4413      	add	r3, r2
 801e2da:	9324      	str	r3, [sp, #144]	; 0x90
 801e2dc:	e482      	b.n	801dbe4 <_vfprintf_r+0x83c>
 801e2de:	aa22      	add	r2, sp, #136	; 0x88
 801e2e0:	4649      	mov	r1, r9
 801e2e2:	4650      	mov	r0, sl
 801e2e4:	f003 fd61 	bl	8021daa <__sprint_r>
 801e2e8:	2800      	cmp	r0, #0
 801e2ea:	f040 8230 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e2ee:	ac25      	add	r4, sp, #148	; 0x94
 801e2f0:	e7b8      	b.n	801e264 <_vfprintf_r+0xebc>
 801e2f2:	aa22      	add	r2, sp, #136	; 0x88
 801e2f4:	4649      	mov	r1, r9
 801e2f6:	4650      	mov	r0, sl
 801e2f8:	f003 fd57 	bl	8021daa <__sprint_r>
 801e2fc:	2800      	cmp	r0, #0
 801e2fe:	f040 8226 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e302:	ac25      	add	r4, sp, #148	; 0x94
 801e304:	e7c3      	b.n	801e28e <_vfprintf_r+0xee6>
 801e306:	3110      	adds	r1, #16
 801e308:	2a07      	cmp	r2, #7
 801e30a:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801e30e:	605f      	str	r7, [r3, #4]
 801e310:	dd08      	ble.n	801e324 <_vfprintf_r+0xf7c>
 801e312:	aa22      	add	r2, sp, #136	; 0x88
 801e314:	4649      	mov	r1, r9
 801e316:	4650      	mov	r0, sl
 801e318:	f003 fd47 	bl	8021daa <__sprint_r>
 801e31c:	2800      	cmp	r0, #0
 801e31e:	f040 8216 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e322:	ac25      	add	r4, sp, #148	; 0x94
 801e324:	3d10      	subs	r5, #16
 801e326:	4623      	mov	r3, r4
 801e328:	e7b8      	b.n	801e29c <_vfprintf_r+0xef4>
 801e32a:	bf00      	nop
 801e32c:	0802a12a 	.word	0x0802a12a
 801e330:	0802a198 	.word	0x0802a198
 801e334:	9b05      	ldr	r3, [sp, #20]
 801e336:	42ab      	cmp	r3, r5
 801e338:	bfa8      	it	ge
 801e33a:	462b      	movge	r3, r5
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	461f      	mov	r7, r3
 801e340:	dd0b      	ble.n	801e35a <_vfprintf_r+0xfb2>
 801e342:	9b03      	ldr	r3, [sp, #12]
 801e344:	e9c4 3700 	strd	r3, r7, [r4]
 801e348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e34a:	3301      	adds	r3, #1
 801e34c:	443e      	add	r6, r7
 801e34e:	2b07      	cmp	r3, #7
 801e350:	9624      	str	r6, [sp, #144]	; 0x90
 801e352:	9323      	str	r3, [sp, #140]	; 0x8c
 801e354:	f300 808c 	bgt.w	801e470 <_vfprintf_r+0x10c8>
 801e358:	3408      	adds	r4, #8
 801e35a:	2f00      	cmp	r7, #0
 801e35c:	bfac      	ite	ge
 801e35e:	1bee      	subge	r6, r5, r7
 801e360:	462e      	movlt	r6, r5
 801e362:	2e00      	cmp	r6, #0
 801e364:	dd1c      	ble.n	801e3a0 <_vfprintf_r+0xff8>
 801e366:	4f9f      	ldr	r7, [pc, #636]	; (801e5e4 <_vfprintf_r+0x123c>)
 801e368:	f04f 0810 	mov.w	r8, #16
 801e36c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e370:	2e10      	cmp	r6, #16
 801e372:	f103 0301 	add.w	r3, r3, #1
 801e376:	f104 0108 	add.w	r1, r4, #8
 801e37a:	6027      	str	r7, [r4, #0]
 801e37c:	f300 8082 	bgt.w	801e484 <_vfprintf_r+0x10dc>
 801e380:	6066      	str	r6, [r4, #4]
 801e382:	2b07      	cmp	r3, #7
 801e384:	4416      	add	r6, r2
 801e386:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e38a:	f340 808e 	ble.w	801e4aa <_vfprintf_r+0x1102>
 801e38e:	aa22      	add	r2, sp, #136	; 0x88
 801e390:	4649      	mov	r1, r9
 801e392:	4650      	mov	r0, sl
 801e394:	f003 fd09 	bl	8021daa <__sprint_r>
 801e398:	2800      	cmp	r0, #0
 801e39a:	f040 81d8 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e39e:	ac25      	add	r4, sp, #148	; 0x94
 801e3a0:	9b03      	ldr	r3, [sp, #12]
 801e3a2:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801e3a6:	441d      	add	r5, r3
 801e3a8:	d00d      	beq.n	801e3c6 <_vfprintf_r+0x101e>
 801e3aa:	4e8e      	ldr	r6, [pc, #568]	; (801e5e4 <_vfprintf_r+0x123c>)
 801e3ac:	2710      	movs	r7, #16
 801e3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d17c      	bne.n	801e4ae <_vfprintf_r+0x1106>
 801e3b4:	9b08      	ldr	r3, [sp, #32]
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	d17c      	bne.n	801e4b4 <_vfprintf_r+0x110c>
 801e3ba:	9b03      	ldr	r3, [sp, #12]
 801e3bc:	9a05      	ldr	r2, [sp, #20]
 801e3be:	4413      	add	r3, r2
 801e3c0:	429d      	cmp	r5, r3
 801e3c2:	bf28      	it	cs
 801e3c4:	461d      	movcs	r5, r3
 801e3c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e3c8:	9a05      	ldr	r2, [sp, #20]
 801e3ca:	4293      	cmp	r3, r2
 801e3cc:	db02      	blt.n	801e3d4 <_vfprintf_r+0x102c>
 801e3ce:	f01b 0f01 	tst.w	fp, #1
 801e3d2:	d00e      	beq.n	801e3f2 <_vfprintf_r+0x104a>
 801e3d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e3d6:	6023      	str	r3, [r4, #0]
 801e3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e3da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e3dc:	6063      	str	r3, [r4, #4]
 801e3de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e3e0:	4413      	add	r3, r2
 801e3e2:	9324      	str	r3, [sp, #144]	; 0x90
 801e3e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e3e6:	3301      	adds	r3, #1
 801e3e8:	2b07      	cmp	r3, #7
 801e3ea:	9323      	str	r3, [sp, #140]	; 0x8c
 801e3ec:	f300 80e5 	bgt.w	801e5ba <_vfprintf_r+0x1212>
 801e3f0:	3408      	adds	r4, #8
 801e3f2:	9905      	ldr	r1, [sp, #20]
 801e3f4:	9b03      	ldr	r3, [sp, #12]
 801e3f6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801e3f8:	440b      	add	r3, r1
 801e3fa:	1b8e      	subs	r6, r1, r6
 801e3fc:	1b5a      	subs	r2, r3, r5
 801e3fe:	4296      	cmp	r6, r2
 801e400:	bfa8      	it	ge
 801e402:	4616      	movge	r6, r2
 801e404:	2e00      	cmp	r6, #0
 801e406:	dd0b      	ble.n	801e420 <_vfprintf_r+0x1078>
 801e408:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e40a:	4433      	add	r3, r6
 801e40c:	9324      	str	r3, [sp, #144]	; 0x90
 801e40e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e410:	3301      	adds	r3, #1
 801e412:	2b07      	cmp	r3, #7
 801e414:	e9c4 5600 	strd	r5, r6, [r4]
 801e418:	9323      	str	r3, [sp, #140]	; 0x8c
 801e41a:	f300 80d8 	bgt.w	801e5ce <_vfprintf_r+0x1226>
 801e41e:	3408      	adds	r4, #8
 801e420:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e422:	9b05      	ldr	r3, [sp, #20]
 801e424:	2e00      	cmp	r6, #0
 801e426:	eba3 0505 	sub.w	r5, r3, r5
 801e42a:	bfa8      	it	ge
 801e42c:	1bad      	subge	r5, r5, r6
 801e42e:	2d00      	cmp	r5, #0
 801e430:	f77f abdf 	ble.w	801dbf2 <_vfprintf_r+0x84a>
 801e434:	4e6b      	ldr	r6, [pc, #428]	; (801e5e4 <_vfprintf_r+0x123c>)
 801e436:	2710      	movs	r7, #16
 801e438:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e43c:	2d10      	cmp	r5, #16
 801e43e:	f103 0301 	add.w	r3, r3, #1
 801e442:	f104 0108 	add.w	r1, r4, #8
 801e446:	6026      	str	r6, [r4, #0]
 801e448:	f77f aec6 	ble.w	801e1d8 <_vfprintf_r+0xe30>
 801e44c:	3210      	adds	r2, #16
 801e44e:	2b07      	cmp	r3, #7
 801e450:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e454:	6067      	str	r7, [r4, #4]
 801e456:	dd08      	ble.n	801e46a <_vfprintf_r+0x10c2>
 801e458:	aa22      	add	r2, sp, #136	; 0x88
 801e45a:	4649      	mov	r1, r9
 801e45c:	4650      	mov	r0, sl
 801e45e:	f003 fca4 	bl	8021daa <__sprint_r>
 801e462:	2800      	cmp	r0, #0
 801e464:	f040 8173 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e468:	a925      	add	r1, sp, #148	; 0x94
 801e46a:	3d10      	subs	r5, #16
 801e46c:	460c      	mov	r4, r1
 801e46e:	e7e3      	b.n	801e438 <_vfprintf_r+0x1090>
 801e470:	aa22      	add	r2, sp, #136	; 0x88
 801e472:	4649      	mov	r1, r9
 801e474:	4650      	mov	r0, sl
 801e476:	f003 fc98 	bl	8021daa <__sprint_r>
 801e47a:	2800      	cmp	r0, #0
 801e47c:	f040 8167 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e480:	ac25      	add	r4, sp, #148	; 0x94
 801e482:	e76a      	b.n	801e35a <_vfprintf_r+0xfb2>
 801e484:	3210      	adds	r2, #16
 801e486:	2b07      	cmp	r3, #7
 801e488:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e48c:	f8c4 8004 	str.w	r8, [r4, #4]
 801e490:	dd08      	ble.n	801e4a4 <_vfprintf_r+0x10fc>
 801e492:	aa22      	add	r2, sp, #136	; 0x88
 801e494:	4649      	mov	r1, r9
 801e496:	4650      	mov	r0, sl
 801e498:	f003 fc87 	bl	8021daa <__sprint_r>
 801e49c:	2800      	cmp	r0, #0
 801e49e:	f040 8156 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e4a2:	a925      	add	r1, sp, #148	; 0x94
 801e4a4:	3e10      	subs	r6, #16
 801e4a6:	460c      	mov	r4, r1
 801e4a8:	e760      	b.n	801e36c <_vfprintf_r+0xfc4>
 801e4aa:	460c      	mov	r4, r1
 801e4ac:	e778      	b.n	801e3a0 <_vfprintf_r+0xff8>
 801e4ae:	9b08      	ldr	r3, [sp, #32]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d052      	beq.n	801e55a <_vfprintf_r+0x11b2>
 801e4b4:	9b08      	ldr	r3, [sp, #32]
 801e4b6:	3b01      	subs	r3, #1
 801e4b8:	9308      	str	r3, [sp, #32]
 801e4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e4bc:	6023      	str	r3, [r4, #0]
 801e4be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e4c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e4c2:	6063      	str	r3, [r4, #4]
 801e4c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4c6:	4413      	add	r3, r2
 801e4c8:	9324      	str	r3, [sp, #144]	; 0x90
 801e4ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e4cc:	3301      	adds	r3, #1
 801e4ce:	2b07      	cmp	r3, #7
 801e4d0:	9323      	str	r3, [sp, #140]	; 0x8c
 801e4d2:	dc49      	bgt.n	801e568 <_vfprintf_r+0x11c0>
 801e4d4:	3408      	adds	r4, #8
 801e4d6:	9b03      	ldr	r3, [sp, #12]
 801e4d8:	9a05      	ldr	r2, [sp, #20]
 801e4da:	eb03 0802 	add.w	r8, r3, r2
 801e4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e4e0:	781b      	ldrb	r3, [r3, #0]
 801e4e2:	eba8 0805 	sub.w	r8, r8, r5
 801e4e6:	4598      	cmp	r8, r3
 801e4e8:	bfa8      	it	ge
 801e4ea:	4698      	movge	r8, r3
 801e4ec:	f1b8 0f00 	cmp.w	r8, #0
 801e4f0:	dd0a      	ble.n	801e508 <_vfprintf_r+0x1160>
 801e4f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4f4:	4443      	add	r3, r8
 801e4f6:	9324      	str	r3, [sp, #144]	; 0x90
 801e4f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e4fa:	3301      	adds	r3, #1
 801e4fc:	2b07      	cmp	r3, #7
 801e4fe:	e9c4 5800 	strd	r5, r8, [r4]
 801e502:	9323      	str	r3, [sp, #140]	; 0x8c
 801e504:	dc3a      	bgt.n	801e57c <_vfprintf_r+0x11d4>
 801e506:	3408      	adds	r4, #8
 801e508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e50a:	781b      	ldrb	r3, [r3, #0]
 801e50c:	f1b8 0f00 	cmp.w	r8, #0
 801e510:	bfac      	ite	ge
 801e512:	eba3 0808 	subge.w	r8, r3, r8
 801e516:	4698      	movlt	r8, r3
 801e518:	f1b8 0f00 	cmp.w	r8, #0
 801e51c:	dd19      	ble.n	801e552 <_vfprintf_r+0x11aa>
 801e51e:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 801e522:	f1b8 0f10 	cmp.w	r8, #16
 801e526:	f102 0201 	add.w	r2, r2, #1
 801e52a:	f104 0108 	add.w	r1, r4, #8
 801e52e:	6026      	str	r6, [r4, #0]
 801e530:	dc2e      	bgt.n	801e590 <_vfprintf_r+0x11e8>
 801e532:	4443      	add	r3, r8
 801e534:	2a07      	cmp	r2, #7
 801e536:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e53a:	f8c4 8004 	str.w	r8, [r4, #4]
 801e53e:	dd3a      	ble.n	801e5b6 <_vfprintf_r+0x120e>
 801e540:	aa22      	add	r2, sp, #136	; 0x88
 801e542:	4649      	mov	r1, r9
 801e544:	4650      	mov	r0, sl
 801e546:	f003 fc30 	bl	8021daa <__sprint_r>
 801e54a:	2800      	cmp	r0, #0
 801e54c:	f040 80ff 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e550:	ac25      	add	r4, sp, #148	; 0x94
 801e552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e554:	781b      	ldrb	r3, [r3, #0]
 801e556:	441d      	add	r5, r3
 801e558:	e729      	b.n	801e3ae <_vfprintf_r+0x1006>
 801e55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e55c:	3b01      	subs	r3, #1
 801e55e:	930a      	str	r3, [sp, #40]	; 0x28
 801e560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e562:	3b01      	subs	r3, #1
 801e564:	9309      	str	r3, [sp, #36]	; 0x24
 801e566:	e7a8      	b.n	801e4ba <_vfprintf_r+0x1112>
 801e568:	aa22      	add	r2, sp, #136	; 0x88
 801e56a:	4649      	mov	r1, r9
 801e56c:	4650      	mov	r0, sl
 801e56e:	f003 fc1c 	bl	8021daa <__sprint_r>
 801e572:	2800      	cmp	r0, #0
 801e574:	f040 80eb 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e578:	ac25      	add	r4, sp, #148	; 0x94
 801e57a:	e7ac      	b.n	801e4d6 <_vfprintf_r+0x112e>
 801e57c:	aa22      	add	r2, sp, #136	; 0x88
 801e57e:	4649      	mov	r1, r9
 801e580:	4650      	mov	r0, sl
 801e582:	f003 fc12 	bl	8021daa <__sprint_r>
 801e586:	2800      	cmp	r0, #0
 801e588:	f040 80e1 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e58c:	ac25      	add	r4, sp, #148	; 0x94
 801e58e:	e7bb      	b.n	801e508 <_vfprintf_r+0x1160>
 801e590:	3310      	adds	r3, #16
 801e592:	2a07      	cmp	r2, #7
 801e594:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801e598:	6067      	str	r7, [r4, #4]
 801e59a:	dd08      	ble.n	801e5ae <_vfprintf_r+0x1206>
 801e59c:	aa22      	add	r2, sp, #136	; 0x88
 801e59e:	4649      	mov	r1, r9
 801e5a0:	4650      	mov	r0, sl
 801e5a2:	f003 fc02 	bl	8021daa <__sprint_r>
 801e5a6:	2800      	cmp	r0, #0
 801e5a8:	f040 80d1 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e5ac:	a925      	add	r1, sp, #148	; 0x94
 801e5ae:	f1a8 0810 	sub.w	r8, r8, #16
 801e5b2:	460c      	mov	r4, r1
 801e5b4:	e7b3      	b.n	801e51e <_vfprintf_r+0x1176>
 801e5b6:	460c      	mov	r4, r1
 801e5b8:	e7cb      	b.n	801e552 <_vfprintf_r+0x11aa>
 801e5ba:	aa22      	add	r2, sp, #136	; 0x88
 801e5bc:	4649      	mov	r1, r9
 801e5be:	4650      	mov	r0, sl
 801e5c0:	f003 fbf3 	bl	8021daa <__sprint_r>
 801e5c4:	2800      	cmp	r0, #0
 801e5c6:	f040 80c2 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e5ca:	ac25      	add	r4, sp, #148	; 0x94
 801e5cc:	e711      	b.n	801e3f2 <_vfprintf_r+0x104a>
 801e5ce:	aa22      	add	r2, sp, #136	; 0x88
 801e5d0:	4649      	mov	r1, r9
 801e5d2:	4650      	mov	r0, sl
 801e5d4:	f003 fbe9 	bl	8021daa <__sprint_r>
 801e5d8:	2800      	cmp	r0, #0
 801e5da:	f040 80b8 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e5de:	ac25      	add	r4, sp, #148	; 0x94
 801e5e0:	e71e      	b.n	801e420 <_vfprintf_r+0x1078>
 801e5e2:	bf00      	nop
 801e5e4:	0802a198 	.word	0x0802a198
 801e5e8:	9a05      	ldr	r2, [sp, #20]
 801e5ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e5ec:	2a01      	cmp	r2, #1
 801e5ee:	9a03      	ldr	r2, [sp, #12]
 801e5f0:	6022      	str	r2, [r4, #0]
 801e5f2:	f106 0601 	add.w	r6, r6, #1
 801e5f6:	f103 0301 	add.w	r3, r3, #1
 801e5fa:	f04f 0201 	mov.w	r2, #1
 801e5fe:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 801e602:	f104 0508 	add.w	r5, r4, #8
 801e606:	6062      	str	r2, [r4, #4]
 801e608:	dc02      	bgt.n	801e610 <_vfprintf_r+0x1268>
 801e60a:	f01b 0f01 	tst.w	fp, #1
 801e60e:	d078      	beq.n	801e702 <_vfprintf_r+0x135a>
 801e610:	2b07      	cmp	r3, #7
 801e612:	dd08      	ble.n	801e626 <_vfprintf_r+0x127e>
 801e614:	aa22      	add	r2, sp, #136	; 0x88
 801e616:	4649      	mov	r1, r9
 801e618:	4650      	mov	r0, sl
 801e61a:	f003 fbc6 	bl	8021daa <__sprint_r>
 801e61e:	2800      	cmp	r0, #0
 801e620:	f040 8095 	bne.w	801e74e <_vfprintf_r+0x13a6>
 801e624:	ad25      	add	r5, sp, #148	; 0x94
 801e626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e628:	602b      	str	r3, [r5, #0]
 801e62a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e62c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e62e:	606b      	str	r3, [r5, #4]
 801e630:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e632:	4413      	add	r3, r2
 801e634:	9324      	str	r3, [sp, #144]	; 0x90
 801e636:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e638:	3301      	adds	r3, #1
 801e63a:	2b07      	cmp	r3, #7
 801e63c:	9323      	str	r3, [sp, #140]	; 0x8c
 801e63e:	dc32      	bgt.n	801e6a6 <_vfprintf_r+0x12fe>
 801e640:	3508      	adds	r5, #8
 801e642:	9b05      	ldr	r3, [sp, #20]
 801e644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e648:	1e5c      	subs	r4, r3, #1
 801e64a:	2200      	movs	r2, #0
 801e64c:	2300      	movs	r3, #0
 801e64e:	f7e2 fa6b 	bl	8000b28 <__aeabi_dcmpeq>
 801e652:	2800      	cmp	r0, #0
 801e654:	d130      	bne.n	801e6b8 <_vfprintf_r+0x1310>
 801e656:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e658:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e65a:	9803      	ldr	r0, [sp, #12]
 801e65c:	9a05      	ldr	r2, [sp, #20]
 801e65e:	3101      	adds	r1, #1
 801e660:	3b01      	subs	r3, #1
 801e662:	3001      	adds	r0, #1
 801e664:	4413      	add	r3, r2
 801e666:	2907      	cmp	r1, #7
 801e668:	e9c5 0400 	strd	r0, r4, [r5]
 801e66c:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801e670:	dd4a      	ble.n	801e708 <_vfprintf_r+0x1360>
 801e672:	aa22      	add	r2, sp, #136	; 0x88
 801e674:	4649      	mov	r1, r9
 801e676:	4650      	mov	r0, sl
 801e678:	f003 fb97 	bl	8021daa <__sprint_r>
 801e67c:	2800      	cmp	r0, #0
 801e67e:	d166      	bne.n	801e74e <_vfprintf_r+0x13a6>
 801e680:	ad25      	add	r5, sp, #148	; 0x94
 801e682:	ab1e      	add	r3, sp, #120	; 0x78
 801e684:	602b      	str	r3, [r5, #0]
 801e686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e688:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e68a:	606b      	str	r3, [r5, #4]
 801e68c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e68e:	4413      	add	r3, r2
 801e690:	9324      	str	r3, [sp, #144]	; 0x90
 801e692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e694:	3301      	adds	r3, #1
 801e696:	2b07      	cmp	r3, #7
 801e698:	9323      	str	r3, [sp, #140]	; 0x8c
 801e69a:	f73f ada4 	bgt.w	801e1e6 <_vfprintf_r+0xe3e>
 801e69e:	f105 0408 	add.w	r4, r5, #8
 801e6a2:	f7ff baa6 	b.w	801dbf2 <_vfprintf_r+0x84a>
 801e6a6:	aa22      	add	r2, sp, #136	; 0x88
 801e6a8:	4649      	mov	r1, r9
 801e6aa:	4650      	mov	r0, sl
 801e6ac:	f003 fb7d 	bl	8021daa <__sprint_r>
 801e6b0:	2800      	cmp	r0, #0
 801e6b2:	d14c      	bne.n	801e74e <_vfprintf_r+0x13a6>
 801e6b4:	ad25      	add	r5, sp, #148	; 0x94
 801e6b6:	e7c4      	b.n	801e642 <_vfprintf_r+0x129a>
 801e6b8:	2c00      	cmp	r4, #0
 801e6ba:	dde2      	ble.n	801e682 <_vfprintf_r+0x12da>
 801e6bc:	4e53      	ldr	r6, [pc, #332]	; (801e80c <_vfprintf_r+0x1464>)
 801e6be:	2710      	movs	r7, #16
 801e6c0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e6c4:	2c10      	cmp	r4, #16
 801e6c6:	f103 0301 	add.w	r3, r3, #1
 801e6ca:	f105 0108 	add.w	r1, r5, #8
 801e6ce:	602e      	str	r6, [r5, #0]
 801e6d0:	dc07      	bgt.n	801e6e2 <_vfprintf_r+0x133a>
 801e6d2:	606c      	str	r4, [r5, #4]
 801e6d4:	2b07      	cmp	r3, #7
 801e6d6:	4414      	add	r4, r2
 801e6d8:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 801e6dc:	dcc9      	bgt.n	801e672 <_vfprintf_r+0x12ca>
 801e6de:	460d      	mov	r5, r1
 801e6e0:	e7cf      	b.n	801e682 <_vfprintf_r+0x12da>
 801e6e2:	3210      	adds	r2, #16
 801e6e4:	2b07      	cmp	r3, #7
 801e6e6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e6ea:	606f      	str	r7, [r5, #4]
 801e6ec:	dd06      	ble.n	801e6fc <_vfprintf_r+0x1354>
 801e6ee:	aa22      	add	r2, sp, #136	; 0x88
 801e6f0:	4649      	mov	r1, r9
 801e6f2:	4650      	mov	r0, sl
 801e6f4:	f003 fb59 	bl	8021daa <__sprint_r>
 801e6f8:	bb48      	cbnz	r0, 801e74e <_vfprintf_r+0x13a6>
 801e6fa:	a925      	add	r1, sp, #148	; 0x94
 801e6fc:	3c10      	subs	r4, #16
 801e6fe:	460d      	mov	r5, r1
 801e700:	e7de      	b.n	801e6c0 <_vfprintf_r+0x1318>
 801e702:	2b07      	cmp	r3, #7
 801e704:	ddbd      	ble.n	801e682 <_vfprintf_r+0x12da>
 801e706:	e7b4      	b.n	801e672 <_vfprintf_r+0x12ca>
 801e708:	3508      	adds	r5, #8
 801e70a:	e7ba      	b.n	801e682 <_vfprintf_r+0x12da>
 801e70c:	460c      	mov	r4, r1
 801e70e:	f7ff ba70 	b.w	801dbf2 <_vfprintf_r+0x84a>
 801e712:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 801e716:	1a9d      	subs	r5, r3, r2
 801e718:	2d00      	cmp	r5, #0
 801e71a:	f77f aa6e 	ble.w	801dbfa <_vfprintf_r+0x852>
 801e71e:	4e3c      	ldr	r6, [pc, #240]	; (801e810 <_vfprintf_r+0x1468>)
 801e720:	2710      	movs	r7, #16
 801e722:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801e726:	2d10      	cmp	r5, #16
 801e728:	f103 0301 	add.w	r3, r3, #1
 801e72c:	6026      	str	r6, [r4, #0]
 801e72e:	dc18      	bgt.n	801e762 <_vfprintf_r+0x13ba>
 801e730:	6065      	str	r5, [r4, #4]
 801e732:	2b07      	cmp	r3, #7
 801e734:	4415      	add	r5, r2
 801e736:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801e73a:	f77f aa5e 	ble.w	801dbfa <_vfprintf_r+0x852>
 801e73e:	aa22      	add	r2, sp, #136	; 0x88
 801e740:	4649      	mov	r1, r9
 801e742:	4650      	mov	r0, sl
 801e744:	f003 fb31 	bl	8021daa <__sprint_r>
 801e748:	2800      	cmp	r0, #0
 801e74a:	f43f aa56 	beq.w	801dbfa <_vfprintf_r+0x852>
 801e74e:	9b04      	ldr	r3, [sp, #16]
 801e750:	2b00      	cmp	r3, #0
 801e752:	f43f a872 	beq.w	801d83a <_vfprintf_r+0x492>
 801e756:	4619      	mov	r1, r3
 801e758:	4650      	mov	r0, sl
 801e75a:	f001 f909 	bl	801f970 <_free_r>
 801e75e:	f7ff b86c 	b.w	801d83a <_vfprintf_r+0x492>
 801e762:	3210      	adds	r2, #16
 801e764:	2b07      	cmp	r3, #7
 801e766:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801e76a:	6067      	str	r7, [r4, #4]
 801e76c:	dc02      	bgt.n	801e774 <_vfprintf_r+0x13cc>
 801e76e:	3408      	adds	r4, #8
 801e770:	3d10      	subs	r5, #16
 801e772:	e7d6      	b.n	801e722 <_vfprintf_r+0x137a>
 801e774:	aa22      	add	r2, sp, #136	; 0x88
 801e776:	4649      	mov	r1, r9
 801e778:	4650      	mov	r0, sl
 801e77a:	f003 fb16 	bl	8021daa <__sprint_r>
 801e77e:	2800      	cmp	r0, #0
 801e780:	d1e5      	bne.n	801e74e <_vfprintf_r+0x13a6>
 801e782:	ac25      	add	r4, sp, #148	; 0x94
 801e784:	e7f4      	b.n	801e770 <_vfprintf_r+0x13c8>
 801e786:	9904      	ldr	r1, [sp, #16]
 801e788:	4650      	mov	r0, sl
 801e78a:	f001 f8f1 	bl	801f970 <_free_r>
 801e78e:	f7ff ba4c 	b.w	801dc2a <_vfprintf_r+0x882>
 801e792:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e794:	b91b      	cbnz	r3, 801e79e <_vfprintf_r+0x13f6>
 801e796:	2300      	movs	r3, #0
 801e798:	9323      	str	r3, [sp, #140]	; 0x8c
 801e79a:	f7ff b84e 	b.w	801d83a <_vfprintf_r+0x492>
 801e79e:	aa22      	add	r2, sp, #136	; 0x88
 801e7a0:	4649      	mov	r1, r9
 801e7a2:	4650      	mov	r0, sl
 801e7a4:	f003 fb01 	bl	8021daa <__sprint_r>
 801e7a8:	2800      	cmp	r0, #0
 801e7aa:	d0f4      	beq.n	801e796 <_vfprintf_r+0x13ee>
 801e7ac:	f7ff b845 	b.w	801d83a <_vfprintf_r+0x492>
 801e7b0:	ea56 0207 	orrs.w	r2, r6, r7
 801e7b4:	f8cd b010 	str.w	fp, [sp, #16]
 801e7b8:	f43f ab5c 	beq.w	801de74 <_vfprintf_r+0xacc>
 801e7bc:	2b01      	cmp	r3, #1
 801e7be:	f43f abf4 	beq.w	801dfaa <_vfprintf_r+0xc02>
 801e7c2:	2b02      	cmp	r3, #2
 801e7c4:	ab4e      	add	r3, sp, #312	; 0x138
 801e7c6:	9303      	str	r3, [sp, #12]
 801e7c8:	f43f ac46 	beq.w	801e058 <_vfprintf_r+0xcb0>
 801e7cc:	9903      	ldr	r1, [sp, #12]
 801e7ce:	f006 0307 	and.w	r3, r6, #7
 801e7d2:	460a      	mov	r2, r1
 801e7d4:	3330      	adds	r3, #48	; 0x30
 801e7d6:	f802 3d01 	strb.w	r3, [r2, #-1]!
 801e7da:	9203      	str	r2, [sp, #12]
 801e7dc:	08f2      	lsrs	r2, r6, #3
 801e7de:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801e7e2:	08f8      	lsrs	r0, r7, #3
 801e7e4:	4616      	mov	r6, r2
 801e7e6:	4607      	mov	r7, r0
 801e7e8:	ea56 0207 	orrs.w	r2, r6, r7
 801e7ec:	d1ee      	bne.n	801e7cc <_vfprintf_r+0x1424>
 801e7ee:	9a04      	ldr	r2, [sp, #16]
 801e7f0:	07d0      	lsls	r0, r2, #31
 801e7f2:	f57f ac20 	bpl.w	801e036 <_vfprintf_r+0xc8e>
 801e7f6:	2b30      	cmp	r3, #48	; 0x30
 801e7f8:	f43f ac1d 	beq.w	801e036 <_vfprintf_r+0xc8e>
 801e7fc:	9a03      	ldr	r2, [sp, #12]
 801e7fe:	2330      	movs	r3, #48	; 0x30
 801e800:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e804:	1e8b      	subs	r3, r1, #2
 801e806:	9303      	str	r3, [sp, #12]
 801e808:	e415      	b.n	801e036 <_vfprintf_r+0xc8e>
 801e80a:	bf00      	nop
 801e80c:	0802a198 	.word	0x0802a198
 801e810:	0802a188 	.word	0x0802a188

0801e814 <__sbprintf>:
 801e814:	b570      	push	{r4, r5, r6, lr}
 801e816:	460c      	mov	r4, r1
 801e818:	8989      	ldrh	r1, [r1, #12]
 801e81a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801e81e:	f021 0102 	bic.w	r1, r1, #2
 801e822:	f8ad 1014 	strh.w	r1, [sp, #20]
 801e826:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801e828:	911b      	str	r1, [sp, #108]	; 0x6c
 801e82a:	89e1      	ldrh	r1, [r4, #14]
 801e82c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801e830:	69e1      	ldr	r1, [r4, #28]
 801e832:	9109      	str	r1, [sp, #36]	; 0x24
 801e834:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e836:	910b      	str	r1, [sp, #44]	; 0x2c
 801e838:	a91c      	add	r1, sp, #112	; 0x70
 801e83a:	9102      	str	r1, [sp, #8]
 801e83c:	9106      	str	r1, [sp, #24]
 801e83e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e842:	4606      	mov	r6, r0
 801e844:	9104      	str	r1, [sp, #16]
 801e846:	9107      	str	r1, [sp, #28]
 801e848:	a818      	add	r0, sp, #96	; 0x60
 801e84a:	2100      	movs	r1, #0
 801e84c:	e9cd 3200 	strd	r3, r2, [sp]
 801e850:	9108      	str	r1, [sp, #32]
 801e852:	f001 fa67 	bl	801fd24 <__retarget_lock_init_recursive>
 801e856:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e85a:	a902      	add	r1, sp, #8
 801e85c:	4630      	mov	r0, r6
 801e85e:	f7fe fda3 	bl	801d3a8 <_vfprintf_r>
 801e862:	1e05      	subs	r5, r0, #0
 801e864:	db07      	blt.n	801e876 <__sbprintf+0x62>
 801e866:	a902      	add	r1, sp, #8
 801e868:	4630      	mov	r0, r6
 801e86a:	f000 ff85 	bl	801f778 <_fflush_r>
 801e86e:	2800      	cmp	r0, #0
 801e870:	bf18      	it	ne
 801e872:	f04f 35ff 	movne.w	r5, #4294967295
 801e876:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e87a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e87c:	065b      	lsls	r3, r3, #25
 801e87e:	bf42      	ittt	mi
 801e880:	89a3      	ldrhmi	r3, [r4, #12]
 801e882:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801e886:	81a3      	strhmi	r3, [r4, #12]
 801e888:	f001 fa4d 	bl	801fd26 <__retarget_lock_close_recursive>
 801e88c:	4628      	mov	r0, r5
 801e88e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 801e892:	bd70      	pop	{r4, r5, r6, pc}

0801e894 <__swsetup_r>:
 801e894:	b538      	push	{r3, r4, r5, lr}
 801e896:	4b2a      	ldr	r3, [pc, #168]	; (801e940 <__swsetup_r+0xac>)
 801e898:	4605      	mov	r5, r0
 801e89a:	6818      	ldr	r0, [r3, #0]
 801e89c:	460c      	mov	r4, r1
 801e89e:	b118      	cbz	r0, 801e8a8 <__swsetup_r+0x14>
 801e8a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e8a2:	b90b      	cbnz	r3, 801e8a8 <__swsetup_r+0x14>
 801e8a4:	f000 ffd4 	bl	801f850 <__sinit>
 801e8a8:	89a3      	ldrh	r3, [r4, #12]
 801e8aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8ae:	0718      	lsls	r0, r3, #28
 801e8b0:	d422      	bmi.n	801e8f8 <__swsetup_r+0x64>
 801e8b2:	06d9      	lsls	r1, r3, #27
 801e8b4:	d407      	bmi.n	801e8c6 <__swsetup_r+0x32>
 801e8b6:	2309      	movs	r3, #9
 801e8b8:	602b      	str	r3, [r5, #0]
 801e8ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e8be:	81a3      	strh	r3, [r4, #12]
 801e8c0:	f04f 30ff 	mov.w	r0, #4294967295
 801e8c4:	e034      	b.n	801e930 <__swsetup_r+0x9c>
 801e8c6:	0758      	lsls	r0, r3, #29
 801e8c8:	d512      	bpl.n	801e8f0 <__swsetup_r+0x5c>
 801e8ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801e8cc:	b141      	cbz	r1, 801e8e0 <__swsetup_r+0x4c>
 801e8ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801e8d2:	4299      	cmp	r1, r3
 801e8d4:	d002      	beq.n	801e8dc <__swsetup_r+0x48>
 801e8d6:	4628      	mov	r0, r5
 801e8d8:	f001 f84a 	bl	801f970 <_free_r>
 801e8dc:	2300      	movs	r3, #0
 801e8de:	6323      	str	r3, [r4, #48]	; 0x30
 801e8e0:	89a3      	ldrh	r3, [r4, #12]
 801e8e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e8e6:	81a3      	strh	r3, [r4, #12]
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	6063      	str	r3, [r4, #4]
 801e8ec:	6923      	ldr	r3, [r4, #16]
 801e8ee:	6023      	str	r3, [r4, #0]
 801e8f0:	89a3      	ldrh	r3, [r4, #12]
 801e8f2:	f043 0308 	orr.w	r3, r3, #8
 801e8f6:	81a3      	strh	r3, [r4, #12]
 801e8f8:	6923      	ldr	r3, [r4, #16]
 801e8fa:	b94b      	cbnz	r3, 801e910 <__swsetup_r+0x7c>
 801e8fc:	89a3      	ldrh	r3, [r4, #12]
 801e8fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e906:	d003      	beq.n	801e910 <__swsetup_r+0x7c>
 801e908:	4621      	mov	r1, r4
 801e90a:	4628      	mov	r0, r5
 801e90c:	f001 fa3c 	bl	801fd88 <__smakebuf_r>
 801e910:	89a0      	ldrh	r0, [r4, #12]
 801e912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e916:	f010 0301 	ands.w	r3, r0, #1
 801e91a:	d00a      	beq.n	801e932 <__swsetup_r+0x9e>
 801e91c:	2300      	movs	r3, #0
 801e91e:	60a3      	str	r3, [r4, #8]
 801e920:	6963      	ldr	r3, [r4, #20]
 801e922:	425b      	negs	r3, r3
 801e924:	61a3      	str	r3, [r4, #24]
 801e926:	6923      	ldr	r3, [r4, #16]
 801e928:	b943      	cbnz	r3, 801e93c <__swsetup_r+0xa8>
 801e92a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e92e:	d1c4      	bne.n	801e8ba <__swsetup_r+0x26>
 801e930:	bd38      	pop	{r3, r4, r5, pc}
 801e932:	0781      	lsls	r1, r0, #30
 801e934:	bf58      	it	pl
 801e936:	6963      	ldrpl	r3, [r4, #20]
 801e938:	60a3      	str	r3, [r4, #8]
 801e93a:	e7f4      	b.n	801e926 <__swsetup_r+0x92>
 801e93c:	2000      	movs	r0, #0
 801e93e:	e7f7      	b.n	801e930 <__swsetup_r+0x9c>
 801e940:	20000038 	.word	0x20000038

0801e944 <register_fini>:
 801e944:	4b02      	ldr	r3, [pc, #8]	; (801e950 <register_fini+0xc>)
 801e946:	b113      	cbz	r3, 801e94e <register_fini+0xa>
 801e948:	4802      	ldr	r0, [pc, #8]	; (801e954 <register_fini+0x10>)
 801e94a:	f000 b805 	b.w	801e958 <atexit>
 801e94e:	4770      	bx	lr
 801e950:	00000000 	.word	0x00000000
 801e954:	0801f8a1 	.word	0x0801f8a1

0801e958 <atexit>:
 801e958:	2300      	movs	r3, #0
 801e95a:	4601      	mov	r1, r0
 801e95c:	461a      	mov	r2, r3
 801e95e:	4618      	mov	r0, r3
 801e960:	f003 bf30 	b.w	80227c4 <__register_exitproc>

0801e964 <div>:
 801e964:	2900      	cmp	r1, #0
 801e966:	b510      	push	{r4, lr}
 801e968:	fb91 f4f2 	sdiv	r4, r1, r2
 801e96c:	fb02 1314 	mls	r3, r2, r4, r1
 801e970:	db06      	blt.n	801e980 <div+0x1c>
 801e972:	2b00      	cmp	r3, #0
 801e974:	da01      	bge.n	801e97a <div+0x16>
 801e976:	3401      	adds	r4, #1
 801e978:	1a9b      	subs	r3, r3, r2
 801e97a:	e9c0 4300 	strd	r4, r3, [r0]
 801e97e:	bd10      	pop	{r4, pc}
 801e980:	2b00      	cmp	r3, #0
 801e982:	bfc4      	itt	gt
 801e984:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801e988:	189b      	addgt	r3, r3, r2
 801e98a:	e7f6      	b.n	801e97a <div+0x16>

0801e98c <quorem>:
 801e98c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e990:	6903      	ldr	r3, [r0, #16]
 801e992:	690c      	ldr	r4, [r1, #16]
 801e994:	42a3      	cmp	r3, r4
 801e996:	4607      	mov	r7, r0
 801e998:	f2c0 8081 	blt.w	801ea9e <quorem+0x112>
 801e99c:	3c01      	subs	r4, #1
 801e99e:	f101 0814 	add.w	r8, r1, #20
 801e9a2:	f100 0514 	add.w	r5, r0, #20
 801e9a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e9aa:	9301      	str	r3, [sp, #4]
 801e9ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e9b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e9b4:	3301      	adds	r3, #1
 801e9b6:	429a      	cmp	r2, r3
 801e9b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e9bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e9c0:	fbb2 f6f3 	udiv	r6, r2, r3
 801e9c4:	d331      	bcc.n	801ea2a <quorem+0x9e>
 801e9c6:	f04f 0e00 	mov.w	lr, #0
 801e9ca:	4640      	mov	r0, r8
 801e9cc:	46ac      	mov	ip, r5
 801e9ce:	46f2      	mov	sl, lr
 801e9d0:	f850 2b04 	ldr.w	r2, [r0], #4
 801e9d4:	b293      	uxth	r3, r2
 801e9d6:	fb06 e303 	mla	r3, r6, r3, lr
 801e9da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e9de:	b29b      	uxth	r3, r3
 801e9e0:	ebaa 0303 	sub.w	r3, sl, r3
 801e9e4:	0c12      	lsrs	r2, r2, #16
 801e9e6:	f8dc a000 	ldr.w	sl, [ip]
 801e9ea:	fb06 e202 	mla	r2, r6, r2, lr
 801e9ee:	fa13 f38a 	uxtah	r3, r3, sl
 801e9f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e9f6:	fa1f fa82 	uxth.w	sl, r2
 801e9fa:	f8dc 2000 	ldr.w	r2, [ip]
 801e9fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ea02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ea06:	b29b      	uxth	r3, r3
 801ea08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ea0c:	4581      	cmp	r9, r0
 801ea0e:	f84c 3b04 	str.w	r3, [ip], #4
 801ea12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ea16:	d2db      	bcs.n	801e9d0 <quorem+0x44>
 801ea18:	f855 300b 	ldr.w	r3, [r5, fp]
 801ea1c:	b92b      	cbnz	r3, 801ea2a <quorem+0x9e>
 801ea1e:	9b01      	ldr	r3, [sp, #4]
 801ea20:	3b04      	subs	r3, #4
 801ea22:	429d      	cmp	r5, r3
 801ea24:	461a      	mov	r2, r3
 801ea26:	d32e      	bcc.n	801ea86 <quorem+0xfa>
 801ea28:	613c      	str	r4, [r7, #16]
 801ea2a:	4638      	mov	r0, r7
 801ea2c:	f001 fe7a 	bl	8020724 <__mcmp>
 801ea30:	2800      	cmp	r0, #0
 801ea32:	db24      	blt.n	801ea7e <quorem+0xf2>
 801ea34:	3601      	adds	r6, #1
 801ea36:	4628      	mov	r0, r5
 801ea38:	f04f 0c00 	mov.w	ip, #0
 801ea3c:	f858 2b04 	ldr.w	r2, [r8], #4
 801ea40:	f8d0 e000 	ldr.w	lr, [r0]
 801ea44:	b293      	uxth	r3, r2
 801ea46:	ebac 0303 	sub.w	r3, ip, r3
 801ea4a:	0c12      	lsrs	r2, r2, #16
 801ea4c:	fa13 f38e 	uxtah	r3, r3, lr
 801ea50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ea54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ea58:	b29b      	uxth	r3, r3
 801ea5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ea5e:	45c1      	cmp	r9, r8
 801ea60:	f840 3b04 	str.w	r3, [r0], #4
 801ea64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ea68:	d2e8      	bcs.n	801ea3c <quorem+0xb0>
 801ea6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ea6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ea72:	b922      	cbnz	r2, 801ea7e <quorem+0xf2>
 801ea74:	3b04      	subs	r3, #4
 801ea76:	429d      	cmp	r5, r3
 801ea78:	461a      	mov	r2, r3
 801ea7a:	d30a      	bcc.n	801ea92 <quorem+0x106>
 801ea7c:	613c      	str	r4, [r7, #16]
 801ea7e:	4630      	mov	r0, r6
 801ea80:	b003      	add	sp, #12
 801ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea86:	6812      	ldr	r2, [r2, #0]
 801ea88:	3b04      	subs	r3, #4
 801ea8a:	2a00      	cmp	r2, #0
 801ea8c:	d1cc      	bne.n	801ea28 <quorem+0x9c>
 801ea8e:	3c01      	subs	r4, #1
 801ea90:	e7c7      	b.n	801ea22 <quorem+0x96>
 801ea92:	6812      	ldr	r2, [r2, #0]
 801ea94:	3b04      	subs	r3, #4
 801ea96:	2a00      	cmp	r2, #0
 801ea98:	d1f0      	bne.n	801ea7c <quorem+0xf0>
 801ea9a:	3c01      	subs	r4, #1
 801ea9c:	e7eb      	b.n	801ea76 <quorem+0xea>
 801ea9e:	2000      	movs	r0, #0
 801eaa0:	e7ee      	b.n	801ea80 <quorem+0xf4>
 801eaa2:	0000      	movs	r0, r0
 801eaa4:	0000      	movs	r0, r0
	...

0801eaa8 <_dtoa_r>:
 801eaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaac:	ed2d 8b02 	vpush	{d8}
 801eab0:	b095      	sub	sp, #84	; 0x54
 801eab2:	ec57 6b10 	vmov	r6, r7, d0
 801eab6:	9105      	str	r1, [sp, #20]
 801eab8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801eaba:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801eabc:	9209      	str	r2, [sp, #36]	; 0x24
 801eabe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801eac2:	4604      	mov	r4, r0
 801eac4:	930f      	str	r3, [sp, #60]	; 0x3c
 801eac6:	b141      	cbz	r1, 801eada <_dtoa_r+0x32>
 801eac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801eaca:	604a      	str	r2, [r1, #4]
 801eacc:	2301      	movs	r3, #1
 801eace:	4093      	lsls	r3, r2
 801ead0:	608b      	str	r3, [r1, #8]
 801ead2:	f001 fc1c 	bl	802030e <_Bfree>
 801ead6:	2300      	movs	r3, #0
 801ead8:	6423      	str	r3, [r4, #64]	; 0x40
 801eada:	1e3b      	subs	r3, r7, #0
 801eadc:	bfb9      	ittee	lt
 801eade:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801eae2:	9303      	strlt	r3, [sp, #12]
 801eae4:	2300      	movge	r3, #0
 801eae6:	602b      	strge	r3, [r5, #0]
 801eae8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801eaec:	4ba2      	ldr	r3, [pc, #648]	; (801ed78 <_dtoa_r+0x2d0>)
 801eaee:	bfbc      	itt	lt
 801eaf0:	2201      	movlt	r2, #1
 801eaf2:	602a      	strlt	r2, [r5, #0]
 801eaf4:	ea33 0309 	bics.w	r3, r3, r9
 801eaf8:	d11b      	bne.n	801eb32 <_dtoa_r+0x8a>
 801eafa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eafc:	f242 730f 	movw	r3, #9999	; 0x270f
 801eb00:	6013      	str	r3, [r2, #0]
 801eb02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801eb06:	4333      	orrs	r3, r6
 801eb08:	f000 8578 	beq.w	801f5fc <_dtoa_r+0xb54>
 801eb0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb0e:	b90b      	cbnz	r3, 801eb14 <_dtoa_r+0x6c>
 801eb10:	4b9a      	ldr	r3, [pc, #616]	; (801ed7c <_dtoa_r+0x2d4>)
 801eb12:	e024      	b.n	801eb5e <_dtoa_r+0xb6>
 801eb14:	4b99      	ldr	r3, [pc, #612]	; (801ed7c <_dtoa_r+0x2d4>)
 801eb16:	9300      	str	r3, [sp, #0]
 801eb18:	3303      	adds	r3, #3
 801eb1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801eb1c:	6013      	str	r3, [r2, #0]
 801eb1e:	9800      	ldr	r0, [sp, #0]
 801eb20:	b015      	add	sp, #84	; 0x54
 801eb22:	ecbd 8b02 	vpop	{d8}
 801eb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb2a:	4b95      	ldr	r3, [pc, #596]	; (801ed80 <_dtoa_r+0x2d8>)
 801eb2c:	9300      	str	r3, [sp, #0]
 801eb2e:	3308      	adds	r3, #8
 801eb30:	e7f3      	b.n	801eb1a <_dtoa_r+0x72>
 801eb32:	ed9d 7b02 	vldr	d7, [sp, #8]
 801eb36:	2200      	movs	r2, #0
 801eb38:	ec51 0b17 	vmov	r0, r1, d7
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801eb42:	f7e1 fff1 	bl	8000b28 <__aeabi_dcmpeq>
 801eb46:	4680      	mov	r8, r0
 801eb48:	b158      	cbz	r0, 801eb62 <_dtoa_r+0xba>
 801eb4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb4c:	2301      	movs	r3, #1
 801eb4e:	6013      	str	r3, [r2, #0]
 801eb50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	f000 854f 	beq.w	801f5f6 <_dtoa_r+0xb4e>
 801eb58:	488a      	ldr	r0, [pc, #552]	; (801ed84 <_dtoa_r+0x2dc>)
 801eb5a:	6018      	str	r0, [r3, #0]
 801eb5c:	1e43      	subs	r3, r0, #1
 801eb5e:	9300      	str	r3, [sp, #0]
 801eb60:	e7dd      	b.n	801eb1e <_dtoa_r+0x76>
 801eb62:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801eb66:	aa12      	add	r2, sp, #72	; 0x48
 801eb68:	a913      	add	r1, sp, #76	; 0x4c
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	f001 fe7e 	bl	802086c <__d2b>
 801eb70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801eb74:	4683      	mov	fp, r0
 801eb76:	2d00      	cmp	r5, #0
 801eb78:	d07c      	beq.n	801ec74 <_dtoa_r+0x1cc>
 801eb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eb7c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801eb80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801eb84:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801eb88:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801eb8c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801eb90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801eb94:	4b7c      	ldr	r3, [pc, #496]	; (801ed88 <_dtoa_r+0x2e0>)
 801eb96:	2200      	movs	r2, #0
 801eb98:	4630      	mov	r0, r6
 801eb9a:	4639      	mov	r1, r7
 801eb9c:	f7e1 fba4 	bl	80002e8 <__aeabi_dsub>
 801eba0:	a36f      	add	r3, pc, #444	; (adr r3, 801ed60 <_dtoa_r+0x2b8>)
 801eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eba6:	f7e1 fd57 	bl	8000658 <__aeabi_dmul>
 801ebaa:	a36f      	add	r3, pc, #444	; (adr r3, 801ed68 <_dtoa_r+0x2c0>)
 801ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebb0:	f7e1 fb9c 	bl	80002ec <__adddf3>
 801ebb4:	4606      	mov	r6, r0
 801ebb6:	4628      	mov	r0, r5
 801ebb8:	460f      	mov	r7, r1
 801ebba:	f7e1 fce3 	bl	8000584 <__aeabi_i2d>
 801ebbe:	a36c      	add	r3, pc, #432	; (adr r3, 801ed70 <_dtoa_r+0x2c8>)
 801ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc4:	f7e1 fd48 	bl	8000658 <__aeabi_dmul>
 801ebc8:	4602      	mov	r2, r0
 801ebca:	460b      	mov	r3, r1
 801ebcc:	4630      	mov	r0, r6
 801ebce:	4639      	mov	r1, r7
 801ebd0:	f7e1 fb8c 	bl	80002ec <__adddf3>
 801ebd4:	4606      	mov	r6, r0
 801ebd6:	460f      	mov	r7, r1
 801ebd8:	f7e1 ffee 	bl	8000bb8 <__aeabi_d2iz>
 801ebdc:	2200      	movs	r2, #0
 801ebde:	4682      	mov	sl, r0
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	4630      	mov	r0, r6
 801ebe4:	4639      	mov	r1, r7
 801ebe6:	f7e1 ffa9 	bl	8000b3c <__aeabi_dcmplt>
 801ebea:	b148      	cbz	r0, 801ec00 <_dtoa_r+0x158>
 801ebec:	4650      	mov	r0, sl
 801ebee:	f7e1 fcc9 	bl	8000584 <__aeabi_i2d>
 801ebf2:	4632      	mov	r2, r6
 801ebf4:	463b      	mov	r3, r7
 801ebf6:	f7e1 ff97 	bl	8000b28 <__aeabi_dcmpeq>
 801ebfa:	b908      	cbnz	r0, 801ec00 <_dtoa_r+0x158>
 801ebfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec00:	f1ba 0f16 	cmp.w	sl, #22
 801ec04:	d854      	bhi.n	801ecb0 <_dtoa_r+0x208>
 801ec06:	4b61      	ldr	r3, [pc, #388]	; (801ed8c <_dtoa_r+0x2e4>)
 801ec08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec14:	f7e1 ff92 	bl	8000b3c <__aeabi_dcmplt>
 801ec18:	2800      	cmp	r0, #0
 801ec1a:	d04b      	beq.n	801ecb4 <_dtoa_r+0x20c>
 801ec1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ec20:	2300      	movs	r3, #0
 801ec22:	930e      	str	r3, [sp, #56]	; 0x38
 801ec24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ec26:	1b5d      	subs	r5, r3, r5
 801ec28:	1e6b      	subs	r3, r5, #1
 801ec2a:	9304      	str	r3, [sp, #16]
 801ec2c:	bf43      	ittte	mi
 801ec2e:	2300      	movmi	r3, #0
 801ec30:	f1c5 0801 	rsbmi	r8, r5, #1
 801ec34:	9304      	strmi	r3, [sp, #16]
 801ec36:	f04f 0800 	movpl.w	r8, #0
 801ec3a:	f1ba 0f00 	cmp.w	sl, #0
 801ec3e:	db3b      	blt.n	801ecb8 <_dtoa_r+0x210>
 801ec40:	9b04      	ldr	r3, [sp, #16]
 801ec42:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ec46:	4453      	add	r3, sl
 801ec48:	9304      	str	r3, [sp, #16]
 801ec4a:	2300      	movs	r3, #0
 801ec4c:	9306      	str	r3, [sp, #24]
 801ec4e:	9b05      	ldr	r3, [sp, #20]
 801ec50:	2b09      	cmp	r3, #9
 801ec52:	d86a      	bhi.n	801ed2a <_dtoa_r+0x282>
 801ec54:	2b05      	cmp	r3, #5
 801ec56:	bfc4      	itt	gt
 801ec58:	3b04      	subgt	r3, #4
 801ec5a:	9305      	strgt	r3, [sp, #20]
 801ec5c:	9b05      	ldr	r3, [sp, #20]
 801ec5e:	f1a3 0302 	sub.w	r3, r3, #2
 801ec62:	bfcc      	ite	gt
 801ec64:	2500      	movgt	r5, #0
 801ec66:	2501      	movle	r5, #1
 801ec68:	2b03      	cmp	r3, #3
 801ec6a:	d86a      	bhi.n	801ed42 <_dtoa_r+0x29a>
 801ec6c:	e8df f003 	tbb	[pc, r3]
 801ec70:	5b4d4f2c 	.word	0x5b4d4f2c
 801ec74:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801ec78:	441d      	add	r5, r3
 801ec7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ec7e:	2b20      	cmp	r3, #32
 801ec80:	bfc1      	itttt	gt
 801ec82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ec86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ec8a:	fa09 f303 	lslgt.w	r3, r9, r3
 801ec8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ec92:	bfda      	itte	le
 801ec94:	f1c3 0320 	rsble	r3, r3, #32
 801ec98:	fa06 f003 	lslle.w	r0, r6, r3
 801ec9c:	4318      	orrgt	r0, r3
 801ec9e:	f7e1 fc61 	bl	8000564 <__aeabi_ui2d>
 801eca2:	2301      	movs	r3, #1
 801eca4:	4606      	mov	r6, r0
 801eca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ecaa:	3d01      	subs	r5, #1
 801ecac:	9310      	str	r3, [sp, #64]	; 0x40
 801ecae:	e771      	b.n	801eb94 <_dtoa_r+0xec>
 801ecb0:	2301      	movs	r3, #1
 801ecb2:	e7b6      	b.n	801ec22 <_dtoa_r+0x17a>
 801ecb4:	900e      	str	r0, [sp, #56]	; 0x38
 801ecb6:	e7b5      	b.n	801ec24 <_dtoa_r+0x17c>
 801ecb8:	f1ca 0300 	rsb	r3, sl, #0
 801ecbc:	9306      	str	r3, [sp, #24]
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	eba8 080a 	sub.w	r8, r8, sl
 801ecc4:	930d      	str	r3, [sp, #52]	; 0x34
 801ecc6:	e7c2      	b.n	801ec4e <_dtoa_r+0x1a6>
 801ecc8:	2300      	movs	r3, #0
 801ecca:	9308      	str	r3, [sp, #32]
 801eccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	dc3a      	bgt.n	801ed48 <_dtoa_r+0x2a0>
 801ecd2:	f04f 0901 	mov.w	r9, #1
 801ecd6:	f8cd 9004 	str.w	r9, [sp, #4]
 801ecda:	464b      	mov	r3, r9
 801ecdc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ece0:	2200      	movs	r2, #0
 801ece2:	6462      	str	r2, [r4, #68]	; 0x44
 801ece4:	2204      	movs	r2, #4
 801ece6:	f102 0014 	add.w	r0, r2, #20
 801ecea:	4298      	cmp	r0, r3
 801ecec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801ecee:	d931      	bls.n	801ed54 <_dtoa_r+0x2ac>
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f001 fae7 	bl	80202c4 <_Balloc>
 801ecf6:	9000      	str	r0, [sp, #0]
 801ecf8:	2800      	cmp	r0, #0
 801ecfa:	d14d      	bne.n	801ed98 <_dtoa_r+0x2f0>
 801ecfc:	4b24      	ldr	r3, [pc, #144]	; (801ed90 <_dtoa_r+0x2e8>)
 801ecfe:	4602      	mov	r2, r0
 801ed00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ed04:	4823      	ldr	r0, [pc, #140]	; (801ed94 <_dtoa_r+0x2ec>)
 801ed06:	f003 fd9d 	bl	8022844 <__assert_func>
 801ed0a:	2301      	movs	r3, #1
 801ed0c:	e7dd      	b.n	801ecca <_dtoa_r+0x222>
 801ed0e:	2300      	movs	r3, #0
 801ed10:	9308      	str	r3, [sp, #32]
 801ed12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed14:	eb0a 0903 	add.w	r9, sl, r3
 801ed18:	f109 0301 	add.w	r3, r9, #1
 801ed1c:	2b01      	cmp	r3, #1
 801ed1e:	9301      	str	r3, [sp, #4]
 801ed20:	bfb8      	it	lt
 801ed22:	2301      	movlt	r3, #1
 801ed24:	e7dc      	b.n	801ece0 <_dtoa_r+0x238>
 801ed26:	2301      	movs	r3, #1
 801ed28:	e7f2      	b.n	801ed10 <_dtoa_r+0x268>
 801ed2a:	2501      	movs	r5, #1
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	9305      	str	r3, [sp, #20]
 801ed30:	9508      	str	r5, [sp, #32]
 801ed32:	f04f 39ff 	mov.w	r9, #4294967295
 801ed36:	2200      	movs	r2, #0
 801ed38:	f8cd 9004 	str.w	r9, [sp, #4]
 801ed3c:	2312      	movs	r3, #18
 801ed3e:	9209      	str	r2, [sp, #36]	; 0x24
 801ed40:	e7ce      	b.n	801ece0 <_dtoa_r+0x238>
 801ed42:	2301      	movs	r3, #1
 801ed44:	9308      	str	r3, [sp, #32]
 801ed46:	e7f4      	b.n	801ed32 <_dtoa_r+0x28a>
 801ed48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ed4c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ed50:	464b      	mov	r3, r9
 801ed52:	e7c5      	b.n	801ece0 <_dtoa_r+0x238>
 801ed54:	3101      	adds	r1, #1
 801ed56:	6461      	str	r1, [r4, #68]	; 0x44
 801ed58:	0052      	lsls	r2, r2, #1
 801ed5a:	e7c4      	b.n	801ece6 <_dtoa_r+0x23e>
 801ed5c:	f3af 8000 	nop.w
 801ed60:	636f4361 	.word	0x636f4361
 801ed64:	3fd287a7 	.word	0x3fd287a7
 801ed68:	8b60c8b3 	.word	0x8b60c8b3
 801ed6c:	3fc68a28 	.word	0x3fc68a28
 801ed70:	509f79fb 	.word	0x509f79fb
 801ed74:	3fd34413 	.word	0x3fd34413
 801ed78:	7ff00000 	.word	0x7ff00000
 801ed7c:	0802a1a8 	.word	0x0802a1a8
 801ed80:	0802a1ac 	.word	0x0802a1ac
 801ed84:	0802a12b 	.word	0x0802a12b
 801ed88:	3ff80000 	.word	0x3ff80000
 801ed8c:	0802a2b0 	.word	0x0802a2b0
 801ed90:	0802a1b5 	.word	0x0802a1b5
 801ed94:	0802a1c6 	.word	0x0802a1c6
 801ed98:	9b00      	ldr	r3, [sp, #0]
 801ed9a:	6423      	str	r3, [r4, #64]	; 0x40
 801ed9c:	9b01      	ldr	r3, [sp, #4]
 801ed9e:	2b0e      	cmp	r3, #14
 801eda0:	f200 80ad 	bhi.w	801eefe <_dtoa_r+0x456>
 801eda4:	2d00      	cmp	r5, #0
 801eda6:	f000 80aa 	beq.w	801eefe <_dtoa_r+0x456>
 801edaa:	f1ba 0f00 	cmp.w	sl, #0
 801edae:	dd36      	ble.n	801ee1e <_dtoa_r+0x376>
 801edb0:	4ac2      	ldr	r2, [pc, #776]	; (801f0bc <_dtoa_r+0x614>)
 801edb2:	f00a 030f 	and.w	r3, sl, #15
 801edb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801edba:	ed93 7b00 	vldr	d7, [r3]
 801edbe:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801edc2:	ea4f 172a 	mov.w	r7, sl, asr #4
 801edc6:	eeb0 8a47 	vmov.f32	s16, s14
 801edca:	eef0 8a67 	vmov.f32	s17, s15
 801edce:	d016      	beq.n	801edfe <_dtoa_r+0x356>
 801edd0:	4bbb      	ldr	r3, [pc, #748]	; (801f0c0 <_dtoa_r+0x618>)
 801edd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801edd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801edda:	f7e1 fd67 	bl	80008ac <__aeabi_ddiv>
 801edde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ede2:	f007 070f 	and.w	r7, r7, #15
 801ede6:	2503      	movs	r5, #3
 801ede8:	4eb5      	ldr	r6, [pc, #724]	; (801f0c0 <_dtoa_r+0x618>)
 801edea:	b957      	cbnz	r7, 801ee02 <_dtoa_r+0x35a>
 801edec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edf0:	ec53 2b18 	vmov	r2, r3, d8
 801edf4:	f7e1 fd5a 	bl	80008ac <__aeabi_ddiv>
 801edf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801edfc:	e029      	b.n	801ee52 <_dtoa_r+0x3aa>
 801edfe:	2502      	movs	r5, #2
 801ee00:	e7f2      	b.n	801ede8 <_dtoa_r+0x340>
 801ee02:	07f9      	lsls	r1, r7, #31
 801ee04:	d508      	bpl.n	801ee18 <_dtoa_r+0x370>
 801ee06:	ec51 0b18 	vmov	r0, r1, d8
 801ee0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ee0e:	f7e1 fc23 	bl	8000658 <__aeabi_dmul>
 801ee12:	ec41 0b18 	vmov	d8, r0, r1
 801ee16:	3501      	adds	r5, #1
 801ee18:	107f      	asrs	r7, r7, #1
 801ee1a:	3608      	adds	r6, #8
 801ee1c:	e7e5      	b.n	801edea <_dtoa_r+0x342>
 801ee1e:	f000 80a6 	beq.w	801ef6e <_dtoa_r+0x4c6>
 801ee22:	f1ca 0600 	rsb	r6, sl, #0
 801ee26:	4ba5      	ldr	r3, [pc, #660]	; (801f0bc <_dtoa_r+0x614>)
 801ee28:	4fa5      	ldr	r7, [pc, #660]	; (801f0c0 <_dtoa_r+0x618>)
 801ee2a:	f006 020f 	and.w	r2, r6, #15
 801ee2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ee3a:	f7e1 fc0d 	bl	8000658 <__aeabi_dmul>
 801ee3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee42:	1136      	asrs	r6, r6, #4
 801ee44:	2300      	movs	r3, #0
 801ee46:	2502      	movs	r5, #2
 801ee48:	2e00      	cmp	r6, #0
 801ee4a:	f040 8085 	bne.w	801ef58 <_dtoa_r+0x4b0>
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d1d2      	bne.n	801edf8 <_dtoa_r+0x350>
 801ee52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	f000 808c 	beq.w	801ef72 <_dtoa_r+0x4ca>
 801ee5a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ee5e:	4b99      	ldr	r3, [pc, #612]	; (801f0c4 <_dtoa_r+0x61c>)
 801ee60:	2200      	movs	r2, #0
 801ee62:	4630      	mov	r0, r6
 801ee64:	4639      	mov	r1, r7
 801ee66:	f7e1 fe69 	bl	8000b3c <__aeabi_dcmplt>
 801ee6a:	2800      	cmp	r0, #0
 801ee6c:	f000 8081 	beq.w	801ef72 <_dtoa_r+0x4ca>
 801ee70:	9b01      	ldr	r3, [sp, #4]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d07d      	beq.n	801ef72 <_dtoa_r+0x4ca>
 801ee76:	f1b9 0f00 	cmp.w	r9, #0
 801ee7a:	dd3c      	ble.n	801eef6 <_dtoa_r+0x44e>
 801ee7c:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ee80:	9307      	str	r3, [sp, #28]
 801ee82:	2200      	movs	r2, #0
 801ee84:	4b90      	ldr	r3, [pc, #576]	; (801f0c8 <_dtoa_r+0x620>)
 801ee86:	4630      	mov	r0, r6
 801ee88:	4639      	mov	r1, r7
 801ee8a:	f7e1 fbe5 	bl	8000658 <__aeabi_dmul>
 801ee8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee92:	3501      	adds	r5, #1
 801ee94:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ee98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ee9c:	4628      	mov	r0, r5
 801ee9e:	f7e1 fb71 	bl	8000584 <__aeabi_i2d>
 801eea2:	4632      	mov	r2, r6
 801eea4:	463b      	mov	r3, r7
 801eea6:	f7e1 fbd7 	bl	8000658 <__aeabi_dmul>
 801eeaa:	4b88      	ldr	r3, [pc, #544]	; (801f0cc <_dtoa_r+0x624>)
 801eeac:	2200      	movs	r2, #0
 801eeae:	f7e1 fa1d 	bl	80002ec <__adddf3>
 801eeb2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801eeb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eeba:	9303      	str	r3, [sp, #12]
 801eebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	d15c      	bne.n	801ef7c <_dtoa_r+0x4d4>
 801eec2:	4b83      	ldr	r3, [pc, #524]	; (801f0d0 <_dtoa_r+0x628>)
 801eec4:	2200      	movs	r2, #0
 801eec6:	4630      	mov	r0, r6
 801eec8:	4639      	mov	r1, r7
 801eeca:	f7e1 fa0d 	bl	80002e8 <__aeabi_dsub>
 801eece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eed2:	4606      	mov	r6, r0
 801eed4:	460f      	mov	r7, r1
 801eed6:	f7e1 fe4f 	bl	8000b78 <__aeabi_dcmpgt>
 801eeda:	2800      	cmp	r0, #0
 801eedc:	f040 8295 	bne.w	801f40a <_dtoa_r+0x962>
 801eee0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801eee4:	4630      	mov	r0, r6
 801eee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eeea:	4639      	mov	r1, r7
 801eeec:	f7e1 fe26 	bl	8000b3c <__aeabi_dcmplt>
 801eef0:	2800      	cmp	r0, #0
 801eef2:	f040 8287 	bne.w	801f404 <_dtoa_r+0x95c>
 801eef6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801eefa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801eefe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	f2c0 8157 	blt.w	801f1b4 <_dtoa_r+0x70c>
 801ef06:	f1ba 0f0e 	cmp.w	sl, #14
 801ef0a:	f300 8153 	bgt.w	801f1b4 <_dtoa_r+0x70c>
 801ef0e:	4b6b      	ldr	r3, [pc, #428]	; (801f0bc <_dtoa_r+0x614>)
 801ef10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ef14:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ef18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	f280 80e2 	bge.w	801f0e4 <_dtoa_r+0x63c>
 801ef20:	9b01      	ldr	r3, [sp, #4]
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	f300 80de 	bgt.w	801f0e4 <_dtoa_r+0x63c>
 801ef28:	f040 826c 	bne.w	801f404 <_dtoa_r+0x95c>
 801ef2c:	4b68      	ldr	r3, [pc, #416]	; (801f0d0 <_dtoa_r+0x628>)
 801ef2e:	2200      	movs	r2, #0
 801ef30:	4640      	mov	r0, r8
 801ef32:	4649      	mov	r1, r9
 801ef34:	f7e1 fb90 	bl	8000658 <__aeabi_dmul>
 801ef38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ef3c:	f7e1 fe12 	bl	8000b64 <__aeabi_dcmpge>
 801ef40:	9e01      	ldr	r6, [sp, #4]
 801ef42:	4637      	mov	r7, r6
 801ef44:	2800      	cmp	r0, #0
 801ef46:	f040 8242 	bne.w	801f3ce <_dtoa_r+0x926>
 801ef4a:	9d00      	ldr	r5, [sp, #0]
 801ef4c:	2331      	movs	r3, #49	; 0x31
 801ef4e:	f805 3b01 	strb.w	r3, [r5], #1
 801ef52:	f10a 0a01 	add.w	sl, sl, #1
 801ef56:	e23e      	b.n	801f3d6 <_dtoa_r+0x92e>
 801ef58:	07f2      	lsls	r2, r6, #31
 801ef5a:	d505      	bpl.n	801ef68 <_dtoa_r+0x4c0>
 801ef5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ef60:	f7e1 fb7a 	bl	8000658 <__aeabi_dmul>
 801ef64:	3501      	adds	r5, #1
 801ef66:	2301      	movs	r3, #1
 801ef68:	1076      	asrs	r6, r6, #1
 801ef6a:	3708      	adds	r7, #8
 801ef6c:	e76c      	b.n	801ee48 <_dtoa_r+0x3a0>
 801ef6e:	2502      	movs	r5, #2
 801ef70:	e76f      	b.n	801ee52 <_dtoa_r+0x3aa>
 801ef72:	9b01      	ldr	r3, [sp, #4]
 801ef74:	f8cd a01c 	str.w	sl, [sp, #28]
 801ef78:	930c      	str	r3, [sp, #48]	; 0x30
 801ef7a:	e78d      	b.n	801ee98 <_dtoa_r+0x3f0>
 801ef7c:	9900      	ldr	r1, [sp, #0]
 801ef7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ef80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef82:	4b4e      	ldr	r3, [pc, #312]	; (801f0bc <_dtoa_r+0x614>)
 801ef84:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef88:	4401      	add	r1, r0
 801ef8a:	9102      	str	r1, [sp, #8]
 801ef8c:	9908      	ldr	r1, [sp, #32]
 801ef8e:	eeb0 8a47 	vmov.f32	s16, s14
 801ef92:	eef0 8a67 	vmov.f32	s17, s15
 801ef96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ef9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ef9e:	2900      	cmp	r1, #0
 801efa0:	d045      	beq.n	801f02e <_dtoa_r+0x586>
 801efa2:	494c      	ldr	r1, [pc, #304]	; (801f0d4 <_dtoa_r+0x62c>)
 801efa4:	2000      	movs	r0, #0
 801efa6:	f7e1 fc81 	bl	80008ac <__aeabi_ddiv>
 801efaa:	ec53 2b18 	vmov	r2, r3, d8
 801efae:	f7e1 f99b 	bl	80002e8 <__aeabi_dsub>
 801efb2:	9d00      	ldr	r5, [sp, #0]
 801efb4:	ec41 0b18 	vmov	d8, r0, r1
 801efb8:	4639      	mov	r1, r7
 801efba:	4630      	mov	r0, r6
 801efbc:	f7e1 fdfc 	bl	8000bb8 <__aeabi_d2iz>
 801efc0:	900c      	str	r0, [sp, #48]	; 0x30
 801efc2:	f7e1 fadf 	bl	8000584 <__aeabi_i2d>
 801efc6:	4602      	mov	r2, r0
 801efc8:	460b      	mov	r3, r1
 801efca:	4630      	mov	r0, r6
 801efcc:	4639      	mov	r1, r7
 801efce:	f7e1 f98b 	bl	80002e8 <__aeabi_dsub>
 801efd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801efd4:	3330      	adds	r3, #48	; 0x30
 801efd6:	f805 3b01 	strb.w	r3, [r5], #1
 801efda:	ec53 2b18 	vmov	r2, r3, d8
 801efde:	4606      	mov	r6, r0
 801efe0:	460f      	mov	r7, r1
 801efe2:	f7e1 fdab 	bl	8000b3c <__aeabi_dcmplt>
 801efe6:	2800      	cmp	r0, #0
 801efe8:	d165      	bne.n	801f0b6 <_dtoa_r+0x60e>
 801efea:	4632      	mov	r2, r6
 801efec:	463b      	mov	r3, r7
 801efee:	4935      	ldr	r1, [pc, #212]	; (801f0c4 <_dtoa_r+0x61c>)
 801eff0:	2000      	movs	r0, #0
 801eff2:	f7e1 f979 	bl	80002e8 <__aeabi_dsub>
 801eff6:	ec53 2b18 	vmov	r2, r3, d8
 801effa:	f7e1 fd9f 	bl	8000b3c <__aeabi_dcmplt>
 801effe:	2800      	cmp	r0, #0
 801f000:	f040 80b8 	bne.w	801f174 <_dtoa_r+0x6cc>
 801f004:	9b02      	ldr	r3, [sp, #8]
 801f006:	429d      	cmp	r5, r3
 801f008:	f43f af75 	beq.w	801eef6 <_dtoa_r+0x44e>
 801f00c:	4b2e      	ldr	r3, [pc, #184]	; (801f0c8 <_dtoa_r+0x620>)
 801f00e:	ec51 0b18 	vmov	r0, r1, d8
 801f012:	2200      	movs	r2, #0
 801f014:	f7e1 fb20 	bl	8000658 <__aeabi_dmul>
 801f018:	4b2b      	ldr	r3, [pc, #172]	; (801f0c8 <_dtoa_r+0x620>)
 801f01a:	ec41 0b18 	vmov	d8, r0, r1
 801f01e:	2200      	movs	r2, #0
 801f020:	4630      	mov	r0, r6
 801f022:	4639      	mov	r1, r7
 801f024:	f7e1 fb18 	bl	8000658 <__aeabi_dmul>
 801f028:	4606      	mov	r6, r0
 801f02a:	460f      	mov	r7, r1
 801f02c:	e7c4      	b.n	801efb8 <_dtoa_r+0x510>
 801f02e:	ec51 0b17 	vmov	r0, r1, d7
 801f032:	f7e1 fb11 	bl	8000658 <__aeabi_dmul>
 801f036:	9b02      	ldr	r3, [sp, #8]
 801f038:	9d00      	ldr	r5, [sp, #0]
 801f03a:	930c      	str	r3, [sp, #48]	; 0x30
 801f03c:	ec41 0b18 	vmov	d8, r0, r1
 801f040:	4639      	mov	r1, r7
 801f042:	4630      	mov	r0, r6
 801f044:	f7e1 fdb8 	bl	8000bb8 <__aeabi_d2iz>
 801f048:	9011      	str	r0, [sp, #68]	; 0x44
 801f04a:	f7e1 fa9b 	bl	8000584 <__aeabi_i2d>
 801f04e:	4602      	mov	r2, r0
 801f050:	460b      	mov	r3, r1
 801f052:	4630      	mov	r0, r6
 801f054:	4639      	mov	r1, r7
 801f056:	f7e1 f947 	bl	80002e8 <__aeabi_dsub>
 801f05a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f05c:	3330      	adds	r3, #48	; 0x30
 801f05e:	f805 3b01 	strb.w	r3, [r5], #1
 801f062:	9b02      	ldr	r3, [sp, #8]
 801f064:	429d      	cmp	r5, r3
 801f066:	4606      	mov	r6, r0
 801f068:	460f      	mov	r7, r1
 801f06a:	f04f 0200 	mov.w	r2, #0
 801f06e:	d133      	bne.n	801f0d8 <_dtoa_r+0x630>
 801f070:	4b18      	ldr	r3, [pc, #96]	; (801f0d4 <_dtoa_r+0x62c>)
 801f072:	ec51 0b18 	vmov	r0, r1, d8
 801f076:	f7e1 f939 	bl	80002ec <__adddf3>
 801f07a:	4602      	mov	r2, r0
 801f07c:	460b      	mov	r3, r1
 801f07e:	4630      	mov	r0, r6
 801f080:	4639      	mov	r1, r7
 801f082:	f7e1 fd79 	bl	8000b78 <__aeabi_dcmpgt>
 801f086:	2800      	cmp	r0, #0
 801f088:	d174      	bne.n	801f174 <_dtoa_r+0x6cc>
 801f08a:	ec53 2b18 	vmov	r2, r3, d8
 801f08e:	4911      	ldr	r1, [pc, #68]	; (801f0d4 <_dtoa_r+0x62c>)
 801f090:	2000      	movs	r0, #0
 801f092:	f7e1 f929 	bl	80002e8 <__aeabi_dsub>
 801f096:	4602      	mov	r2, r0
 801f098:	460b      	mov	r3, r1
 801f09a:	4630      	mov	r0, r6
 801f09c:	4639      	mov	r1, r7
 801f09e:	f7e1 fd4d 	bl	8000b3c <__aeabi_dcmplt>
 801f0a2:	2800      	cmp	r0, #0
 801f0a4:	f43f af27 	beq.w	801eef6 <_dtoa_r+0x44e>
 801f0a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f0aa:	1e6b      	subs	r3, r5, #1
 801f0ac:	930c      	str	r3, [sp, #48]	; 0x30
 801f0ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f0b2:	2b30      	cmp	r3, #48	; 0x30
 801f0b4:	d0f8      	beq.n	801f0a8 <_dtoa_r+0x600>
 801f0b6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f0ba:	e049      	b.n	801f150 <_dtoa_r+0x6a8>
 801f0bc:	0802a2b0 	.word	0x0802a2b0
 801f0c0:	0802a288 	.word	0x0802a288
 801f0c4:	3ff00000 	.word	0x3ff00000
 801f0c8:	40240000 	.word	0x40240000
 801f0cc:	401c0000 	.word	0x401c0000
 801f0d0:	40140000 	.word	0x40140000
 801f0d4:	3fe00000 	.word	0x3fe00000
 801f0d8:	4baf      	ldr	r3, [pc, #700]	; (801f398 <_dtoa_r+0x8f0>)
 801f0da:	f7e1 fabd 	bl	8000658 <__aeabi_dmul>
 801f0de:	4606      	mov	r6, r0
 801f0e0:	460f      	mov	r7, r1
 801f0e2:	e7ad      	b.n	801f040 <_dtoa_r+0x598>
 801f0e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801f0e8:	9d00      	ldr	r5, [sp, #0]
 801f0ea:	4642      	mov	r2, r8
 801f0ec:	464b      	mov	r3, r9
 801f0ee:	4630      	mov	r0, r6
 801f0f0:	4639      	mov	r1, r7
 801f0f2:	f7e1 fbdb 	bl	80008ac <__aeabi_ddiv>
 801f0f6:	f7e1 fd5f 	bl	8000bb8 <__aeabi_d2iz>
 801f0fa:	9002      	str	r0, [sp, #8]
 801f0fc:	f7e1 fa42 	bl	8000584 <__aeabi_i2d>
 801f100:	4642      	mov	r2, r8
 801f102:	464b      	mov	r3, r9
 801f104:	f7e1 faa8 	bl	8000658 <__aeabi_dmul>
 801f108:	4602      	mov	r2, r0
 801f10a:	460b      	mov	r3, r1
 801f10c:	4630      	mov	r0, r6
 801f10e:	4639      	mov	r1, r7
 801f110:	f7e1 f8ea 	bl	80002e8 <__aeabi_dsub>
 801f114:	9e02      	ldr	r6, [sp, #8]
 801f116:	9f01      	ldr	r7, [sp, #4]
 801f118:	3630      	adds	r6, #48	; 0x30
 801f11a:	f805 6b01 	strb.w	r6, [r5], #1
 801f11e:	9e00      	ldr	r6, [sp, #0]
 801f120:	1bae      	subs	r6, r5, r6
 801f122:	42b7      	cmp	r7, r6
 801f124:	4602      	mov	r2, r0
 801f126:	460b      	mov	r3, r1
 801f128:	d137      	bne.n	801f19a <_dtoa_r+0x6f2>
 801f12a:	f7e1 f8df 	bl	80002ec <__adddf3>
 801f12e:	4642      	mov	r2, r8
 801f130:	464b      	mov	r3, r9
 801f132:	4606      	mov	r6, r0
 801f134:	460f      	mov	r7, r1
 801f136:	f7e1 fd1f 	bl	8000b78 <__aeabi_dcmpgt>
 801f13a:	b9c8      	cbnz	r0, 801f170 <_dtoa_r+0x6c8>
 801f13c:	4642      	mov	r2, r8
 801f13e:	464b      	mov	r3, r9
 801f140:	4630      	mov	r0, r6
 801f142:	4639      	mov	r1, r7
 801f144:	f7e1 fcf0 	bl	8000b28 <__aeabi_dcmpeq>
 801f148:	b110      	cbz	r0, 801f150 <_dtoa_r+0x6a8>
 801f14a:	9b02      	ldr	r3, [sp, #8]
 801f14c:	07d9      	lsls	r1, r3, #31
 801f14e:	d40f      	bmi.n	801f170 <_dtoa_r+0x6c8>
 801f150:	4620      	mov	r0, r4
 801f152:	4659      	mov	r1, fp
 801f154:	f001 f8db 	bl	802030e <_Bfree>
 801f158:	2300      	movs	r3, #0
 801f15a:	702b      	strb	r3, [r5, #0]
 801f15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f15e:	f10a 0001 	add.w	r0, sl, #1
 801f162:	6018      	str	r0, [r3, #0]
 801f164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f166:	2b00      	cmp	r3, #0
 801f168:	f43f acd9 	beq.w	801eb1e <_dtoa_r+0x76>
 801f16c:	601d      	str	r5, [r3, #0]
 801f16e:	e4d6      	b.n	801eb1e <_dtoa_r+0x76>
 801f170:	f8cd a01c 	str.w	sl, [sp, #28]
 801f174:	462b      	mov	r3, r5
 801f176:	461d      	mov	r5, r3
 801f178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f17c:	2a39      	cmp	r2, #57	; 0x39
 801f17e:	d108      	bne.n	801f192 <_dtoa_r+0x6ea>
 801f180:	9a00      	ldr	r2, [sp, #0]
 801f182:	429a      	cmp	r2, r3
 801f184:	d1f7      	bne.n	801f176 <_dtoa_r+0x6ce>
 801f186:	9a07      	ldr	r2, [sp, #28]
 801f188:	9900      	ldr	r1, [sp, #0]
 801f18a:	3201      	adds	r2, #1
 801f18c:	9207      	str	r2, [sp, #28]
 801f18e:	2230      	movs	r2, #48	; 0x30
 801f190:	700a      	strb	r2, [r1, #0]
 801f192:	781a      	ldrb	r2, [r3, #0]
 801f194:	3201      	adds	r2, #1
 801f196:	701a      	strb	r2, [r3, #0]
 801f198:	e78d      	b.n	801f0b6 <_dtoa_r+0x60e>
 801f19a:	4b7f      	ldr	r3, [pc, #508]	; (801f398 <_dtoa_r+0x8f0>)
 801f19c:	2200      	movs	r2, #0
 801f19e:	f7e1 fa5b 	bl	8000658 <__aeabi_dmul>
 801f1a2:	2200      	movs	r2, #0
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	4606      	mov	r6, r0
 801f1a8:	460f      	mov	r7, r1
 801f1aa:	f7e1 fcbd 	bl	8000b28 <__aeabi_dcmpeq>
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	d09b      	beq.n	801f0ea <_dtoa_r+0x642>
 801f1b2:	e7cd      	b.n	801f150 <_dtoa_r+0x6a8>
 801f1b4:	9a08      	ldr	r2, [sp, #32]
 801f1b6:	2a00      	cmp	r2, #0
 801f1b8:	f000 80c4 	beq.w	801f344 <_dtoa_r+0x89c>
 801f1bc:	9a05      	ldr	r2, [sp, #20]
 801f1be:	2a01      	cmp	r2, #1
 801f1c0:	f300 80a8 	bgt.w	801f314 <_dtoa_r+0x86c>
 801f1c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f1c6:	2a00      	cmp	r2, #0
 801f1c8:	f000 80a0 	beq.w	801f30c <_dtoa_r+0x864>
 801f1cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f1d0:	9e06      	ldr	r6, [sp, #24]
 801f1d2:	4645      	mov	r5, r8
 801f1d4:	9a04      	ldr	r2, [sp, #16]
 801f1d6:	2101      	movs	r1, #1
 801f1d8:	441a      	add	r2, r3
 801f1da:	4620      	mov	r0, r4
 801f1dc:	4498      	add	r8, r3
 801f1de:	9204      	str	r2, [sp, #16]
 801f1e0:	f001 f938 	bl	8020454 <__i2b>
 801f1e4:	4607      	mov	r7, r0
 801f1e6:	2d00      	cmp	r5, #0
 801f1e8:	dd0b      	ble.n	801f202 <_dtoa_r+0x75a>
 801f1ea:	9b04      	ldr	r3, [sp, #16]
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	dd08      	ble.n	801f202 <_dtoa_r+0x75a>
 801f1f0:	42ab      	cmp	r3, r5
 801f1f2:	9a04      	ldr	r2, [sp, #16]
 801f1f4:	bfa8      	it	ge
 801f1f6:	462b      	movge	r3, r5
 801f1f8:	eba8 0803 	sub.w	r8, r8, r3
 801f1fc:	1aed      	subs	r5, r5, r3
 801f1fe:	1ad3      	subs	r3, r2, r3
 801f200:	9304      	str	r3, [sp, #16]
 801f202:	9b06      	ldr	r3, [sp, #24]
 801f204:	b1fb      	cbz	r3, 801f246 <_dtoa_r+0x79e>
 801f206:	9b08      	ldr	r3, [sp, #32]
 801f208:	2b00      	cmp	r3, #0
 801f20a:	f000 809f 	beq.w	801f34c <_dtoa_r+0x8a4>
 801f20e:	2e00      	cmp	r6, #0
 801f210:	dd11      	ble.n	801f236 <_dtoa_r+0x78e>
 801f212:	4639      	mov	r1, r7
 801f214:	4632      	mov	r2, r6
 801f216:	4620      	mov	r0, r4
 801f218:	f001 f9d8 	bl	80205cc <__pow5mult>
 801f21c:	465a      	mov	r2, fp
 801f21e:	4601      	mov	r1, r0
 801f220:	4607      	mov	r7, r0
 801f222:	4620      	mov	r0, r4
 801f224:	f001 f92c 	bl	8020480 <__multiply>
 801f228:	4659      	mov	r1, fp
 801f22a:	9007      	str	r0, [sp, #28]
 801f22c:	4620      	mov	r0, r4
 801f22e:	f001 f86e 	bl	802030e <_Bfree>
 801f232:	9b07      	ldr	r3, [sp, #28]
 801f234:	469b      	mov	fp, r3
 801f236:	9b06      	ldr	r3, [sp, #24]
 801f238:	1b9a      	subs	r2, r3, r6
 801f23a:	d004      	beq.n	801f246 <_dtoa_r+0x79e>
 801f23c:	4659      	mov	r1, fp
 801f23e:	4620      	mov	r0, r4
 801f240:	f001 f9c4 	bl	80205cc <__pow5mult>
 801f244:	4683      	mov	fp, r0
 801f246:	2101      	movs	r1, #1
 801f248:	4620      	mov	r0, r4
 801f24a:	f001 f903 	bl	8020454 <__i2b>
 801f24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f250:	2b00      	cmp	r3, #0
 801f252:	4606      	mov	r6, r0
 801f254:	dd7c      	ble.n	801f350 <_dtoa_r+0x8a8>
 801f256:	461a      	mov	r2, r3
 801f258:	4601      	mov	r1, r0
 801f25a:	4620      	mov	r0, r4
 801f25c:	f001 f9b6 	bl	80205cc <__pow5mult>
 801f260:	9b05      	ldr	r3, [sp, #20]
 801f262:	2b01      	cmp	r3, #1
 801f264:	4606      	mov	r6, r0
 801f266:	dd76      	ble.n	801f356 <_dtoa_r+0x8ae>
 801f268:	2300      	movs	r3, #0
 801f26a:	9306      	str	r3, [sp, #24]
 801f26c:	6933      	ldr	r3, [r6, #16]
 801f26e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f272:	6918      	ldr	r0, [r3, #16]
 801f274:	f001 f89e 	bl	80203b4 <__hi0bits>
 801f278:	f1c0 0020 	rsb	r0, r0, #32
 801f27c:	9b04      	ldr	r3, [sp, #16]
 801f27e:	4418      	add	r0, r3
 801f280:	f010 001f 	ands.w	r0, r0, #31
 801f284:	f000 8086 	beq.w	801f394 <_dtoa_r+0x8ec>
 801f288:	f1c0 0320 	rsb	r3, r0, #32
 801f28c:	2b04      	cmp	r3, #4
 801f28e:	dd7f      	ble.n	801f390 <_dtoa_r+0x8e8>
 801f290:	f1c0 001c 	rsb	r0, r0, #28
 801f294:	9b04      	ldr	r3, [sp, #16]
 801f296:	4403      	add	r3, r0
 801f298:	4480      	add	r8, r0
 801f29a:	4405      	add	r5, r0
 801f29c:	9304      	str	r3, [sp, #16]
 801f29e:	f1b8 0f00 	cmp.w	r8, #0
 801f2a2:	dd05      	ble.n	801f2b0 <_dtoa_r+0x808>
 801f2a4:	4659      	mov	r1, fp
 801f2a6:	4642      	mov	r2, r8
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f001 f9cf 	bl	802064c <__lshift>
 801f2ae:	4683      	mov	fp, r0
 801f2b0:	9b04      	ldr	r3, [sp, #16]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	dd05      	ble.n	801f2c2 <_dtoa_r+0x81a>
 801f2b6:	4631      	mov	r1, r6
 801f2b8:	461a      	mov	r2, r3
 801f2ba:	4620      	mov	r0, r4
 801f2bc:	f001 f9c6 	bl	802064c <__lshift>
 801f2c0:	4606      	mov	r6, r0
 801f2c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	d069      	beq.n	801f39c <_dtoa_r+0x8f4>
 801f2c8:	4631      	mov	r1, r6
 801f2ca:	4658      	mov	r0, fp
 801f2cc:	f001 fa2a 	bl	8020724 <__mcmp>
 801f2d0:	2800      	cmp	r0, #0
 801f2d2:	da63      	bge.n	801f39c <_dtoa_r+0x8f4>
 801f2d4:	2300      	movs	r3, #0
 801f2d6:	4659      	mov	r1, fp
 801f2d8:	220a      	movs	r2, #10
 801f2da:	4620      	mov	r0, r4
 801f2dc:	f001 f820 	bl	8020320 <__multadd>
 801f2e0:	9b08      	ldr	r3, [sp, #32]
 801f2e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f2e6:	4683      	mov	fp, r0
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	f000 818e 	beq.w	801f60a <_dtoa_r+0xb62>
 801f2ee:	4639      	mov	r1, r7
 801f2f0:	2300      	movs	r3, #0
 801f2f2:	220a      	movs	r2, #10
 801f2f4:	4620      	mov	r0, r4
 801f2f6:	f001 f813 	bl	8020320 <__multadd>
 801f2fa:	f1b9 0f00 	cmp.w	r9, #0
 801f2fe:	4607      	mov	r7, r0
 801f300:	f300 808e 	bgt.w	801f420 <_dtoa_r+0x978>
 801f304:	9b05      	ldr	r3, [sp, #20]
 801f306:	2b02      	cmp	r3, #2
 801f308:	dc50      	bgt.n	801f3ac <_dtoa_r+0x904>
 801f30a:	e089      	b.n	801f420 <_dtoa_r+0x978>
 801f30c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f30e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f312:	e75d      	b.n	801f1d0 <_dtoa_r+0x728>
 801f314:	9b01      	ldr	r3, [sp, #4]
 801f316:	1e5e      	subs	r6, r3, #1
 801f318:	9b06      	ldr	r3, [sp, #24]
 801f31a:	42b3      	cmp	r3, r6
 801f31c:	bfbf      	itttt	lt
 801f31e:	9b06      	ldrlt	r3, [sp, #24]
 801f320:	9606      	strlt	r6, [sp, #24]
 801f322:	1af2      	sublt	r2, r6, r3
 801f324:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f326:	bfb6      	itet	lt
 801f328:	189b      	addlt	r3, r3, r2
 801f32a:	1b9e      	subge	r6, r3, r6
 801f32c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f32e:	9b01      	ldr	r3, [sp, #4]
 801f330:	bfb8      	it	lt
 801f332:	2600      	movlt	r6, #0
 801f334:	2b00      	cmp	r3, #0
 801f336:	bfb5      	itete	lt
 801f338:	eba8 0503 	sublt.w	r5, r8, r3
 801f33c:	9b01      	ldrge	r3, [sp, #4]
 801f33e:	2300      	movlt	r3, #0
 801f340:	4645      	movge	r5, r8
 801f342:	e747      	b.n	801f1d4 <_dtoa_r+0x72c>
 801f344:	9e06      	ldr	r6, [sp, #24]
 801f346:	9f08      	ldr	r7, [sp, #32]
 801f348:	4645      	mov	r5, r8
 801f34a:	e74c      	b.n	801f1e6 <_dtoa_r+0x73e>
 801f34c:	9a06      	ldr	r2, [sp, #24]
 801f34e:	e775      	b.n	801f23c <_dtoa_r+0x794>
 801f350:	9b05      	ldr	r3, [sp, #20]
 801f352:	2b01      	cmp	r3, #1
 801f354:	dc18      	bgt.n	801f388 <_dtoa_r+0x8e0>
 801f356:	9b02      	ldr	r3, [sp, #8]
 801f358:	b9b3      	cbnz	r3, 801f388 <_dtoa_r+0x8e0>
 801f35a:	9b03      	ldr	r3, [sp, #12]
 801f35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f360:	b9a3      	cbnz	r3, 801f38c <_dtoa_r+0x8e4>
 801f362:	9b03      	ldr	r3, [sp, #12]
 801f364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f368:	0d1b      	lsrs	r3, r3, #20
 801f36a:	051b      	lsls	r3, r3, #20
 801f36c:	b12b      	cbz	r3, 801f37a <_dtoa_r+0x8d2>
 801f36e:	9b04      	ldr	r3, [sp, #16]
 801f370:	3301      	adds	r3, #1
 801f372:	9304      	str	r3, [sp, #16]
 801f374:	f108 0801 	add.w	r8, r8, #1
 801f378:	2301      	movs	r3, #1
 801f37a:	9306      	str	r3, [sp, #24]
 801f37c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f37e:	2b00      	cmp	r3, #0
 801f380:	f47f af74 	bne.w	801f26c <_dtoa_r+0x7c4>
 801f384:	2001      	movs	r0, #1
 801f386:	e779      	b.n	801f27c <_dtoa_r+0x7d4>
 801f388:	2300      	movs	r3, #0
 801f38a:	e7f6      	b.n	801f37a <_dtoa_r+0x8d2>
 801f38c:	9b02      	ldr	r3, [sp, #8]
 801f38e:	e7f4      	b.n	801f37a <_dtoa_r+0x8d2>
 801f390:	d085      	beq.n	801f29e <_dtoa_r+0x7f6>
 801f392:	4618      	mov	r0, r3
 801f394:	301c      	adds	r0, #28
 801f396:	e77d      	b.n	801f294 <_dtoa_r+0x7ec>
 801f398:	40240000 	.word	0x40240000
 801f39c:	9b01      	ldr	r3, [sp, #4]
 801f39e:	2b00      	cmp	r3, #0
 801f3a0:	dc38      	bgt.n	801f414 <_dtoa_r+0x96c>
 801f3a2:	9b05      	ldr	r3, [sp, #20]
 801f3a4:	2b02      	cmp	r3, #2
 801f3a6:	dd35      	ble.n	801f414 <_dtoa_r+0x96c>
 801f3a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f3ac:	f1b9 0f00 	cmp.w	r9, #0
 801f3b0:	d10d      	bne.n	801f3ce <_dtoa_r+0x926>
 801f3b2:	4631      	mov	r1, r6
 801f3b4:	464b      	mov	r3, r9
 801f3b6:	2205      	movs	r2, #5
 801f3b8:	4620      	mov	r0, r4
 801f3ba:	f000 ffb1 	bl	8020320 <__multadd>
 801f3be:	4601      	mov	r1, r0
 801f3c0:	4606      	mov	r6, r0
 801f3c2:	4658      	mov	r0, fp
 801f3c4:	f001 f9ae 	bl	8020724 <__mcmp>
 801f3c8:	2800      	cmp	r0, #0
 801f3ca:	f73f adbe 	bgt.w	801ef4a <_dtoa_r+0x4a2>
 801f3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3d0:	9d00      	ldr	r5, [sp, #0]
 801f3d2:	ea6f 0a03 	mvn.w	sl, r3
 801f3d6:	f04f 0800 	mov.w	r8, #0
 801f3da:	4631      	mov	r1, r6
 801f3dc:	4620      	mov	r0, r4
 801f3de:	f000 ff96 	bl	802030e <_Bfree>
 801f3e2:	2f00      	cmp	r7, #0
 801f3e4:	f43f aeb4 	beq.w	801f150 <_dtoa_r+0x6a8>
 801f3e8:	f1b8 0f00 	cmp.w	r8, #0
 801f3ec:	d005      	beq.n	801f3fa <_dtoa_r+0x952>
 801f3ee:	45b8      	cmp	r8, r7
 801f3f0:	d003      	beq.n	801f3fa <_dtoa_r+0x952>
 801f3f2:	4641      	mov	r1, r8
 801f3f4:	4620      	mov	r0, r4
 801f3f6:	f000 ff8a 	bl	802030e <_Bfree>
 801f3fa:	4639      	mov	r1, r7
 801f3fc:	4620      	mov	r0, r4
 801f3fe:	f000 ff86 	bl	802030e <_Bfree>
 801f402:	e6a5      	b.n	801f150 <_dtoa_r+0x6a8>
 801f404:	2600      	movs	r6, #0
 801f406:	4637      	mov	r7, r6
 801f408:	e7e1      	b.n	801f3ce <_dtoa_r+0x926>
 801f40a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f40c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f410:	4637      	mov	r7, r6
 801f412:	e59a      	b.n	801ef4a <_dtoa_r+0x4a2>
 801f414:	9b08      	ldr	r3, [sp, #32]
 801f416:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	f000 80fc 	beq.w	801f618 <_dtoa_r+0xb70>
 801f420:	2d00      	cmp	r5, #0
 801f422:	dd05      	ble.n	801f430 <_dtoa_r+0x988>
 801f424:	4639      	mov	r1, r7
 801f426:	462a      	mov	r2, r5
 801f428:	4620      	mov	r0, r4
 801f42a:	f001 f90f 	bl	802064c <__lshift>
 801f42e:	4607      	mov	r7, r0
 801f430:	9b06      	ldr	r3, [sp, #24]
 801f432:	2b00      	cmp	r3, #0
 801f434:	d05b      	beq.n	801f4ee <_dtoa_r+0xa46>
 801f436:	6879      	ldr	r1, [r7, #4]
 801f438:	4620      	mov	r0, r4
 801f43a:	f000 ff43 	bl	80202c4 <_Balloc>
 801f43e:	4605      	mov	r5, r0
 801f440:	b920      	cbnz	r0, 801f44c <_dtoa_r+0x9a4>
 801f442:	4b80      	ldr	r3, [pc, #512]	; (801f644 <_dtoa_r+0xb9c>)
 801f444:	4602      	mov	r2, r0
 801f446:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f44a:	e45b      	b.n	801ed04 <_dtoa_r+0x25c>
 801f44c:	693a      	ldr	r2, [r7, #16]
 801f44e:	3202      	adds	r2, #2
 801f450:	0092      	lsls	r2, r2, #2
 801f452:	f107 010c 	add.w	r1, r7, #12
 801f456:	300c      	adds	r0, #12
 801f458:	f7fb ff9a 	bl	801b390 <memcpy>
 801f45c:	2201      	movs	r2, #1
 801f45e:	4629      	mov	r1, r5
 801f460:	4620      	mov	r0, r4
 801f462:	f001 f8f3 	bl	802064c <__lshift>
 801f466:	9b00      	ldr	r3, [sp, #0]
 801f468:	3301      	adds	r3, #1
 801f46a:	9301      	str	r3, [sp, #4]
 801f46c:	9b00      	ldr	r3, [sp, #0]
 801f46e:	444b      	add	r3, r9
 801f470:	9307      	str	r3, [sp, #28]
 801f472:	9b02      	ldr	r3, [sp, #8]
 801f474:	f003 0301 	and.w	r3, r3, #1
 801f478:	46b8      	mov	r8, r7
 801f47a:	9306      	str	r3, [sp, #24]
 801f47c:	4607      	mov	r7, r0
 801f47e:	9b01      	ldr	r3, [sp, #4]
 801f480:	4631      	mov	r1, r6
 801f482:	3b01      	subs	r3, #1
 801f484:	4658      	mov	r0, fp
 801f486:	9302      	str	r3, [sp, #8]
 801f488:	f7ff fa80 	bl	801e98c <quorem>
 801f48c:	4603      	mov	r3, r0
 801f48e:	3330      	adds	r3, #48	; 0x30
 801f490:	9004      	str	r0, [sp, #16]
 801f492:	4641      	mov	r1, r8
 801f494:	4658      	mov	r0, fp
 801f496:	9308      	str	r3, [sp, #32]
 801f498:	f001 f944 	bl	8020724 <__mcmp>
 801f49c:	463a      	mov	r2, r7
 801f49e:	4681      	mov	r9, r0
 801f4a0:	4631      	mov	r1, r6
 801f4a2:	4620      	mov	r0, r4
 801f4a4:	f001 f95a 	bl	802075c <__mdiff>
 801f4a8:	68c2      	ldr	r2, [r0, #12]
 801f4aa:	9b08      	ldr	r3, [sp, #32]
 801f4ac:	4605      	mov	r5, r0
 801f4ae:	bb02      	cbnz	r2, 801f4f2 <_dtoa_r+0xa4a>
 801f4b0:	4601      	mov	r1, r0
 801f4b2:	4658      	mov	r0, fp
 801f4b4:	f001 f936 	bl	8020724 <__mcmp>
 801f4b8:	9b08      	ldr	r3, [sp, #32]
 801f4ba:	4602      	mov	r2, r0
 801f4bc:	4629      	mov	r1, r5
 801f4be:	4620      	mov	r0, r4
 801f4c0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f4c4:	f000 ff23 	bl	802030e <_Bfree>
 801f4c8:	9b05      	ldr	r3, [sp, #20]
 801f4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f4cc:	9d01      	ldr	r5, [sp, #4]
 801f4ce:	ea43 0102 	orr.w	r1, r3, r2
 801f4d2:	9b06      	ldr	r3, [sp, #24]
 801f4d4:	430b      	orrs	r3, r1
 801f4d6:	9b08      	ldr	r3, [sp, #32]
 801f4d8:	d10d      	bne.n	801f4f6 <_dtoa_r+0xa4e>
 801f4da:	2b39      	cmp	r3, #57	; 0x39
 801f4dc:	d029      	beq.n	801f532 <_dtoa_r+0xa8a>
 801f4de:	f1b9 0f00 	cmp.w	r9, #0
 801f4e2:	dd01      	ble.n	801f4e8 <_dtoa_r+0xa40>
 801f4e4:	9b04      	ldr	r3, [sp, #16]
 801f4e6:	3331      	adds	r3, #49	; 0x31
 801f4e8:	9a02      	ldr	r2, [sp, #8]
 801f4ea:	7013      	strb	r3, [r2, #0]
 801f4ec:	e775      	b.n	801f3da <_dtoa_r+0x932>
 801f4ee:	4638      	mov	r0, r7
 801f4f0:	e7b9      	b.n	801f466 <_dtoa_r+0x9be>
 801f4f2:	2201      	movs	r2, #1
 801f4f4:	e7e2      	b.n	801f4bc <_dtoa_r+0xa14>
 801f4f6:	f1b9 0f00 	cmp.w	r9, #0
 801f4fa:	db06      	blt.n	801f50a <_dtoa_r+0xa62>
 801f4fc:	9905      	ldr	r1, [sp, #20]
 801f4fe:	ea41 0909 	orr.w	r9, r1, r9
 801f502:	9906      	ldr	r1, [sp, #24]
 801f504:	ea59 0101 	orrs.w	r1, r9, r1
 801f508:	d120      	bne.n	801f54c <_dtoa_r+0xaa4>
 801f50a:	2a00      	cmp	r2, #0
 801f50c:	ddec      	ble.n	801f4e8 <_dtoa_r+0xa40>
 801f50e:	4659      	mov	r1, fp
 801f510:	2201      	movs	r2, #1
 801f512:	4620      	mov	r0, r4
 801f514:	9301      	str	r3, [sp, #4]
 801f516:	f001 f899 	bl	802064c <__lshift>
 801f51a:	4631      	mov	r1, r6
 801f51c:	4683      	mov	fp, r0
 801f51e:	f001 f901 	bl	8020724 <__mcmp>
 801f522:	2800      	cmp	r0, #0
 801f524:	9b01      	ldr	r3, [sp, #4]
 801f526:	dc02      	bgt.n	801f52e <_dtoa_r+0xa86>
 801f528:	d1de      	bne.n	801f4e8 <_dtoa_r+0xa40>
 801f52a:	07da      	lsls	r2, r3, #31
 801f52c:	d5dc      	bpl.n	801f4e8 <_dtoa_r+0xa40>
 801f52e:	2b39      	cmp	r3, #57	; 0x39
 801f530:	d1d8      	bne.n	801f4e4 <_dtoa_r+0xa3c>
 801f532:	9a02      	ldr	r2, [sp, #8]
 801f534:	2339      	movs	r3, #57	; 0x39
 801f536:	7013      	strb	r3, [r2, #0]
 801f538:	462b      	mov	r3, r5
 801f53a:	461d      	mov	r5, r3
 801f53c:	3b01      	subs	r3, #1
 801f53e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f542:	2a39      	cmp	r2, #57	; 0x39
 801f544:	d050      	beq.n	801f5e8 <_dtoa_r+0xb40>
 801f546:	3201      	adds	r2, #1
 801f548:	701a      	strb	r2, [r3, #0]
 801f54a:	e746      	b.n	801f3da <_dtoa_r+0x932>
 801f54c:	2a00      	cmp	r2, #0
 801f54e:	dd03      	ble.n	801f558 <_dtoa_r+0xab0>
 801f550:	2b39      	cmp	r3, #57	; 0x39
 801f552:	d0ee      	beq.n	801f532 <_dtoa_r+0xa8a>
 801f554:	3301      	adds	r3, #1
 801f556:	e7c7      	b.n	801f4e8 <_dtoa_r+0xa40>
 801f558:	9a01      	ldr	r2, [sp, #4]
 801f55a:	9907      	ldr	r1, [sp, #28]
 801f55c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f560:	428a      	cmp	r2, r1
 801f562:	d02a      	beq.n	801f5ba <_dtoa_r+0xb12>
 801f564:	4659      	mov	r1, fp
 801f566:	2300      	movs	r3, #0
 801f568:	220a      	movs	r2, #10
 801f56a:	4620      	mov	r0, r4
 801f56c:	f000 fed8 	bl	8020320 <__multadd>
 801f570:	45b8      	cmp	r8, r7
 801f572:	4683      	mov	fp, r0
 801f574:	f04f 0300 	mov.w	r3, #0
 801f578:	f04f 020a 	mov.w	r2, #10
 801f57c:	4641      	mov	r1, r8
 801f57e:	4620      	mov	r0, r4
 801f580:	d107      	bne.n	801f592 <_dtoa_r+0xaea>
 801f582:	f000 fecd 	bl	8020320 <__multadd>
 801f586:	4680      	mov	r8, r0
 801f588:	4607      	mov	r7, r0
 801f58a:	9b01      	ldr	r3, [sp, #4]
 801f58c:	3301      	adds	r3, #1
 801f58e:	9301      	str	r3, [sp, #4]
 801f590:	e775      	b.n	801f47e <_dtoa_r+0x9d6>
 801f592:	f000 fec5 	bl	8020320 <__multadd>
 801f596:	4639      	mov	r1, r7
 801f598:	4680      	mov	r8, r0
 801f59a:	2300      	movs	r3, #0
 801f59c:	220a      	movs	r2, #10
 801f59e:	4620      	mov	r0, r4
 801f5a0:	f000 febe 	bl	8020320 <__multadd>
 801f5a4:	4607      	mov	r7, r0
 801f5a6:	e7f0      	b.n	801f58a <_dtoa_r+0xae2>
 801f5a8:	f1b9 0f00 	cmp.w	r9, #0
 801f5ac:	9a00      	ldr	r2, [sp, #0]
 801f5ae:	bfcc      	ite	gt
 801f5b0:	464d      	movgt	r5, r9
 801f5b2:	2501      	movle	r5, #1
 801f5b4:	4415      	add	r5, r2
 801f5b6:	f04f 0800 	mov.w	r8, #0
 801f5ba:	4659      	mov	r1, fp
 801f5bc:	2201      	movs	r2, #1
 801f5be:	4620      	mov	r0, r4
 801f5c0:	9301      	str	r3, [sp, #4]
 801f5c2:	f001 f843 	bl	802064c <__lshift>
 801f5c6:	4631      	mov	r1, r6
 801f5c8:	4683      	mov	fp, r0
 801f5ca:	f001 f8ab 	bl	8020724 <__mcmp>
 801f5ce:	2800      	cmp	r0, #0
 801f5d0:	dcb2      	bgt.n	801f538 <_dtoa_r+0xa90>
 801f5d2:	d102      	bne.n	801f5da <_dtoa_r+0xb32>
 801f5d4:	9b01      	ldr	r3, [sp, #4]
 801f5d6:	07db      	lsls	r3, r3, #31
 801f5d8:	d4ae      	bmi.n	801f538 <_dtoa_r+0xa90>
 801f5da:	462b      	mov	r3, r5
 801f5dc:	461d      	mov	r5, r3
 801f5de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f5e2:	2a30      	cmp	r2, #48	; 0x30
 801f5e4:	d0fa      	beq.n	801f5dc <_dtoa_r+0xb34>
 801f5e6:	e6f8      	b.n	801f3da <_dtoa_r+0x932>
 801f5e8:	9a00      	ldr	r2, [sp, #0]
 801f5ea:	429a      	cmp	r2, r3
 801f5ec:	d1a5      	bne.n	801f53a <_dtoa_r+0xa92>
 801f5ee:	f10a 0a01 	add.w	sl, sl, #1
 801f5f2:	2331      	movs	r3, #49	; 0x31
 801f5f4:	e779      	b.n	801f4ea <_dtoa_r+0xa42>
 801f5f6:	4b14      	ldr	r3, [pc, #80]	; (801f648 <_dtoa_r+0xba0>)
 801f5f8:	f7ff bab1 	b.w	801eb5e <_dtoa_r+0xb6>
 801f5fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	f47f aa93 	bne.w	801eb2a <_dtoa_r+0x82>
 801f604:	4b11      	ldr	r3, [pc, #68]	; (801f64c <_dtoa_r+0xba4>)
 801f606:	f7ff baaa 	b.w	801eb5e <_dtoa_r+0xb6>
 801f60a:	f1b9 0f00 	cmp.w	r9, #0
 801f60e:	dc03      	bgt.n	801f618 <_dtoa_r+0xb70>
 801f610:	9b05      	ldr	r3, [sp, #20]
 801f612:	2b02      	cmp	r3, #2
 801f614:	f73f aeca 	bgt.w	801f3ac <_dtoa_r+0x904>
 801f618:	9d00      	ldr	r5, [sp, #0]
 801f61a:	4631      	mov	r1, r6
 801f61c:	4658      	mov	r0, fp
 801f61e:	f7ff f9b5 	bl	801e98c <quorem>
 801f622:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f626:	f805 3b01 	strb.w	r3, [r5], #1
 801f62a:	9a00      	ldr	r2, [sp, #0]
 801f62c:	1aaa      	subs	r2, r5, r2
 801f62e:	4591      	cmp	r9, r2
 801f630:	ddba      	ble.n	801f5a8 <_dtoa_r+0xb00>
 801f632:	4659      	mov	r1, fp
 801f634:	2300      	movs	r3, #0
 801f636:	220a      	movs	r2, #10
 801f638:	4620      	mov	r0, r4
 801f63a:	f000 fe71 	bl	8020320 <__multadd>
 801f63e:	4683      	mov	fp, r0
 801f640:	e7eb      	b.n	801f61a <_dtoa_r+0xb72>
 801f642:	bf00      	nop
 801f644:	0802a1b5 	.word	0x0802a1b5
 801f648:	0802a12a 	.word	0x0802a12a
 801f64c:	0802a1ac 	.word	0x0802a1ac

0801f650 <__errno>:
 801f650:	4b01      	ldr	r3, [pc, #4]	; (801f658 <__errno+0x8>)
 801f652:	6818      	ldr	r0, [r3, #0]
 801f654:	4770      	bx	lr
 801f656:	bf00      	nop
 801f658:	20000038 	.word	0x20000038

0801f65c <__sflush_r>:
 801f65c:	898b      	ldrh	r3, [r1, #12]
 801f65e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f666:	4605      	mov	r5, r0
 801f668:	0718      	lsls	r0, r3, #28
 801f66a:	460c      	mov	r4, r1
 801f66c:	d45f      	bmi.n	801f72e <__sflush_r+0xd2>
 801f66e:	684b      	ldr	r3, [r1, #4]
 801f670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f674:	2b00      	cmp	r3, #0
 801f676:	818a      	strh	r2, [r1, #12]
 801f678:	dc05      	bgt.n	801f686 <__sflush_r+0x2a>
 801f67a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801f67c:	2b00      	cmp	r3, #0
 801f67e:	dc02      	bgt.n	801f686 <__sflush_r+0x2a>
 801f680:	2000      	movs	r0, #0
 801f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f688:	2e00      	cmp	r6, #0
 801f68a:	d0f9      	beq.n	801f680 <__sflush_r+0x24>
 801f68c:	2300      	movs	r3, #0
 801f68e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f692:	682f      	ldr	r7, [r5, #0]
 801f694:	602b      	str	r3, [r5, #0]
 801f696:	d036      	beq.n	801f706 <__sflush_r+0xaa>
 801f698:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f69a:	89a3      	ldrh	r3, [r4, #12]
 801f69c:	075a      	lsls	r2, r3, #29
 801f69e:	d505      	bpl.n	801f6ac <__sflush_r+0x50>
 801f6a0:	6863      	ldr	r3, [r4, #4]
 801f6a2:	1ac0      	subs	r0, r0, r3
 801f6a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f6a6:	b10b      	cbz	r3, 801f6ac <__sflush_r+0x50>
 801f6a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f6aa:	1ac0      	subs	r0, r0, r3
 801f6ac:	2300      	movs	r3, #0
 801f6ae:	4602      	mov	r2, r0
 801f6b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f6b2:	69e1      	ldr	r1, [r4, #28]
 801f6b4:	4628      	mov	r0, r5
 801f6b6:	47b0      	blx	r6
 801f6b8:	1c43      	adds	r3, r0, #1
 801f6ba:	89a3      	ldrh	r3, [r4, #12]
 801f6bc:	d106      	bne.n	801f6cc <__sflush_r+0x70>
 801f6be:	6829      	ldr	r1, [r5, #0]
 801f6c0:	291d      	cmp	r1, #29
 801f6c2:	d830      	bhi.n	801f726 <__sflush_r+0xca>
 801f6c4:	4a2b      	ldr	r2, [pc, #172]	; (801f774 <__sflush_r+0x118>)
 801f6c6:	40ca      	lsrs	r2, r1
 801f6c8:	07d6      	lsls	r6, r2, #31
 801f6ca:	d52c      	bpl.n	801f726 <__sflush_r+0xca>
 801f6cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f6d0:	b21b      	sxth	r3, r3
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	6062      	str	r2, [r4, #4]
 801f6d6:	04d9      	lsls	r1, r3, #19
 801f6d8:	6922      	ldr	r2, [r4, #16]
 801f6da:	81a3      	strh	r3, [r4, #12]
 801f6dc:	6022      	str	r2, [r4, #0]
 801f6de:	d504      	bpl.n	801f6ea <__sflush_r+0x8e>
 801f6e0:	1c42      	adds	r2, r0, #1
 801f6e2:	d101      	bne.n	801f6e8 <__sflush_r+0x8c>
 801f6e4:	682b      	ldr	r3, [r5, #0]
 801f6e6:	b903      	cbnz	r3, 801f6ea <__sflush_r+0x8e>
 801f6e8:	6520      	str	r0, [r4, #80]	; 0x50
 801f6ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f6ec:	602f      	str	r7, [r5, #0]
 801f6ee:	2900      	cmp	r1, #0
 801f6f0:	d0c6      	beq.n	801f680 <__sflush_r+0x24>
 801f6f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801f6f6:	4299      	cmp	r1, r3
 801f6f8:	d002      	beq.n	801f700 <__sflush_r+0xa4>
 801f6fa:	4628      	mov	r0, r5
 801f6fc:	f000 f938 	bl	801f970 <_free_r>
 801f700:	2000      	movs	r0, #0
 801f702:	6320      	str	r0, [r4, #48]	; 0x30
 801f704:	e7bd      	b.n	801f682 <__sflush_r+0x26>
 801f706:	69e1      	ldr	r1, [r4, #28]
 801f708:	2301      	movs	r3, #1
 801f70a:	4628      	mov	r0, r5
 801f70c:	47b0      	blx	r6
 801f70e:	1c41      	adds	r1, r0, #1
 801f710:	d1c3      	bne.n	801f69a <__sflush_r+0x3e>
 801f712:	682b      	ldr	r3, [r5, #0]
 801f714:	2b00      	cmp	r3, #0
 801f716:	d0c0      	beq.n	801f69a <__sflush_r+0x3e>
 801f718:	2b1d      	cmp	r3, #29
 801f71a:	d001      	beq.n	801f720 <__sflush_r+0xc4>
 801f71c:	2b16      	cmp	r3, #22
 801f71e:	d101      	bne.n	801f724 <__sflush_r+0xc8>
 801f720:	602f      	str	r7, [r5, #0]
 801f722:	e7ad      	b.n	801f680 <__sflush_r+0x24>
 801f724:	89a3      	ldrh	r3, [r4, #12]
 801f726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f72a:	81a3      	strh	r3, [r4, #12]
 801f72c:	e7a9      	b.n	801f682 <__sflush_r+0x26>
 801f72e:	690f      	ldr	r7, [r1, #16]
 801f730:	2f00      	cmp	r7, #0
 801f732:	d0a5      	beq.n	801f680 <__sflush_r+0x24>
 801f734:	079b      	lsls	r3, r3, #30
 801f736:	680e      	ldr	r6, [r1, #0]
 801f738:	bf08      	it	eq
 801f73a:	694b      	ldreq	r3, [r1, #20]
 801f73c:	600f      	str	r7, [r1, #0]
 801f73e:	bf18      	it	ne
 801f740:	2300      	movne	r3, #0
 801f742:	eba6 0807 	sub.w	r8, r6, r7
 801f746:	608b      	str	r3, [r1, #8]
 801f748:	f1b8 0f00 	cmp.w	r8, #0
 801f74c:	dd98      	ble.n	801f680 <__sflush_r+0x24>
 801f74e:	69e1      	ldr	r1, [r4, #28]
 801f750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801f752:	4643      	mov	r3, r8
 801f754:	463a      	mov	r2, r7
 801f756:	4628      	mov	r0, r5
 801f758:	47b0      	blx	r6
 801f75a:	2800      	cmp	r0, #0
 801f75c:	dc06      	bgt.n	801f76c <__sflush_r+0x110>
 801f75e:	89a3      	ldrh	r3, [r4, #12]
 801f760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f764:	81a3      	strh	r3, [r4, #12]
 801f766:	f04f 30ff 	mov.w	r0, #4294967295
 801f76a:	e78a      	b.n	801f682 <__sflush_r+0x26>
 801f76c:	4407      	add	r7, r0
 801f76e:	eba8 0800 	sub.w	r8, r8, r0
 801f772:	e7e9      	b.n	801f748 <__sflush_r+0xec>
 801f774:	20400001 	.word	0x20400001

0801f778 <_fflush_r>:
 801f778:	b538      	push	{r3, r4, r5, lr}
 801f77a:	460c      	mov	r4, r1
 801f77c:	4605      	mov	r5, r0
 801f77e:	b118      	cbz	r0, 801f788 <_fflush_r+0x10>
 801f780:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801f782:	b90b      	cbnz	r3, 801f788 <_fflush_r+0x10>
 801f784:	f000 f864 	bl	801f850 <__sinit>
 801f788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f78c:	b1bb      	cbz	r3, 801f7be <_fflush_r+0x46>
 801f78e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f790:	07d0      	lsls	r0, r2, #31
 801f792:	d404      	bmi.n	801f79e <_fflush_r+0x26>
 801f794:	0599      	lsls	r1, r3, #22
 801f796:	d402      	bmi.n	801f79e <_fflush_r+0x26>
 801f798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f79a:	f000 fac6 	bl	801fd2a <__retarget_lock_acquire_recursive>
 801f79e:	4628      	mov	r0, r5
 801f7a0:	4621      	mov	r1, r4
 801f7a2:	f7ff ff5b 	bl	801f65c <__sflush_r>
 801f7a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7a8:	07da      	lsls	r2, r3, #31
 801f7aa:	4605      	mov	r5, r0
 801f7ac:	d405      	bmi.n	801f7ba <_fflush_r+0x42>
 801f7ae:	89a3      	ldrh	r3, [r4, #12]
 801f7b0:	059b      	lsls	r3, r3, #22
 801f7b2:	d402      	bmi.n	801f7ba <_fflush_r+0x42>
 801f7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7b6:	f000 faba 	bl	801fd2e <__retarget_lock_release_recursive>
 801f7ba:	4628      	mov	r0, r5
 801f7bc:	bd38      	pop	{r3, r4, r5, pc}
 801f7be:	461d      	mov	r5, r3
 801f7c0:	e7fb      	b.n	801f7ba <_fflush_r+0x42>
	...

0801f7c4 <std>:
 801f7c4:	2300      	movs	r3, #0
 801f7c6:	b510      	push	{r4, lr}
 801f7c8:	4604      	mov	r4, r0
 801f7ca:	e9c0 3300 	strd	r3, r3, [r0]
 801f7ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f7d2:	6083      	str	r3, [r0, #8]
 801f7d4:	8181      	strh	r1, [r0, #12]
 801f7d6:	6643      	str	r3, [r0, #100]	; 0x64
 801f7d8:	81c2      	strh	r2, [r0, #14]
 801f7da:	6183      	str	r3, [r0, #24]
 801f7dc:	4619      	mov	r1, r3
 801f7de:	2208      	movs	r2, #8
 801f7e0:	305c      	adds	r0, #92	; 0x5c
 801f7e2:	f7fb fdfd 	bl	801b3e0 <memset>
 801f7e6:	4b07      	ldr	r3, [pc, #28]	; (801f804 <std+0x40>)
 801f7e8:	6223      	str	r3, [r4, #32]
 801f7ea:	4b07      	ldr	r3, [pc, #28]	; (801f808 <std+0x44>)
 801f7ec:	6263      	str	r3, [r4, #36]	; 0x24
 801f7ee:	4b07      	ldr	r3, [pc, #28]	; (801f80c <std+0x48>)
 801f7f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801f7f2:	4b07      	ldr	r3, [pc, #28]	; (801f810 <std+0x4c>)
 801f7f4:	61e4      	str	r4, [r4, #28]
 801f7f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f7f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f800:	f000 ba90 	b.w	801fd24 <__retarget_lock_init_recursive>
 801f804:	08020a0d 	.word	0x08020a0d
 801f808:	08020a33 	.word	0x08020a33
 801f80c:	08020a6b 	.word	0x08020a6b
 801f810:	08020a8f 	.word	0x08020a8f

0801f814 <_cleanup_r>:
 801f814:	4901      	ldr	r1, [pc, #4]	; (801f81c <_cleanup_r+0x8>)
 801f816:	f000 b96b 	b.w	801faf0 <_fwalk_reent>
 801f81a:	bf00      	nop
 801f81c:	08022915 	.word	0x08022915

0801f820 <__sfp_lock_acquire>:
 801f820:	4801      	ldr	r0, [pc, #4]	; (801f828 <__sfp_lock_acquire+0x8>)
 801f822:	f000 ba82 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 801f826:	bf00      	nop
 801f828:	2000bdfc 	.word	0x2000bdfc

0801f82c <__sfp_lock_release>:
 801f82c:	4801      	ldr	r0, [pc, #4]	; (801f834 <__sfp_lock_release+0x8>)
 801f82e:	f000 ba7e 	b.w	801fd2e <__retarget_lock_release_recursive>
 801f832:	bf00      	nop
 801f834:	2000bdfc 	.word	0x2000bdfc

0801f838 <__sinit_lock_acquire>:
 801f838:	4801      	ldr	r0, [pc, #4]	; (801f840 <__sinit_lock_acquire+0x8>)
 801f83a:	f000 ba76 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 801f83e:	bf00      	nop
 801f840:	2000bdf7 	.word	0x2000bdf7

0801f844 <__sinit_lock_release>:
 801f844:	4801      	ldr	r0, [pc, #4]	; (801f84c <__sinit_lock_release+0x8>)
 801f846:	f000 ba72 	b.w	801fd2e <__retarget_lock_release_recursive>
 801f84a:	bf00      	nop
 801f84c:	2000bdf7 	.word	0x2000bdf7

0801f850 <__sinit>:
 801f850:	b510      	push	{r4, lr}
 801f852:	4604      	mov	r4, r0
 801f854:	f7ff fff0 	bl	801f838 <__sinit_lock_acquire>
 801f858:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801f85a:	b11a      	cbz	r2, 801f864 <__sinit+0x14>
 801f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f860:	f7ff bff0 	b.w	801f844 <__sinit_lock_release>
 801f864:	4b0d      	ldr	r3, [pc, #52]	; (801f89c <__sinit+0x4c>)
 801f866:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f868:	2303      	movs	r3, #3
 801f86a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801f86e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801f872:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801f876:	6860      	ldr	r0, [r4, #4]
 801f878:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801f87c:	2104      	movs	r1, #4
 801f87e:	f7ff ffa1 	bl	801f7c4 <std>
 801f882:	68a0      	ldr	r0, [r4, #8]
 801f884:	2201      	movs	r2, #1
 801f886:	2109      	movs	r1, #9
 801f888:	f7ff ff9c 	bl	801f7c4 <std>
 801f88c:	68e0      	ldr	r0, [r4, #12]
 801f88e:	2202      	movs	r2, #2
 801f890:	2112      	movs	r1, #18
 801f892:	f7ff ff97 	bl	801f7c4 <std>
 801f896:	2301      	movs	r3, #1
 801f898:	63a3      	str	r3, [r4, #56]	; 0x38
 801f89a:	e7df      	b.n	801f85c <__sinit+0xc>
 801f89c:	0801f815 	.word	0x0801f815

0801f8a0 <__libc_fini_array>:
 801f8a0:	b538      	push	{r3, r4, r5, lr}
 801f8a2:	4d07      	ldr	r5, [pc, #28]	; (801f8c0 <__libc_fini_array+0x20>)
 801f8a4:	4c07      	ldr	r4, [pc, #28]	; (801f8c4 <__libc_fini_array+0x24>)
 801f8a6:	1b64      	subs	r4, r4, r5
 801f8a8:	10a4      	asrs	r4, r4, #2
 801f8aa:	b91c      	cbnz	r4, 801f8b4 <__libc_fini_array+0x14>
 801f8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f8b0:	f004 be66 	b.w	8024580 <_fini>
 801f8b4:	3c01      	subs	r4, #1
 801f8b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f8ba:	4798      	blx	r3
 801f8bc:	e7f5      	b.n	801f8aa <__libc_fini_array+0xa>
 801f8be:	bf00      	nop
 801f8c0:	0802a460 	.word	0x0802a460
 801f8c4:	0802a464 	.word	0x0802a464

0801f8c8 <_malloc_trim_r>:
 801f8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8cc:	4606      	mov	r6, r0
 801f8ce:	2008      	movs	r0, #8
 801f8d0:	460c      	mov	r4, r1
 801f8d2:	f002 fa23 	bl	8021d1c <sysconf>
 801f8d6:	4f23      	ldr	r7, [pc, #140]	; (801f964 <_malloc_trim_r+0x9c>)
 801f8d8:	4680      	mov	r8, r0
 801f8da:	4630      	mov	r0, r6
 801f8dc:	f000 fce6 	bl	80202ac <__malloc_lock>
 801f8e0:	68bb      	ldr	r3, [r7, #8]
 801f8e2:	685d      	ldr	r5, [r3, #4]
 801f8e4:	f025 0503 	bic.w	r5, r5, #3
 801f8e8:	1b2c      	subs	r4, r5, r4
 801f8ea:	3c11      	subs	r4, #17
 801f8ec:	4444      	add	r4, r8
 801f8ee:	fbb4 f4f8 	udiv	r4, r4, r8
 801f8f2:	3c01      	subs	r4, #1
 801f8f4:	fb08 f404 	mul.w	r4, r8, r4
 801f8f8:	45a0      	cmp	r8, r4
 801f8fa:	dd05      	ble.n	801f908 <_malloc_trim_r+0x40>
 801f8fc:	4630      	mov	r0, r6
 801f8fe:	f000 fcdb 	bl	80202b8 <__malloc_unlock>
 801f902:	2000      	movs	r0, #0
 801f904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f908:	2100      	movs	r1, #0
 801f90a:	4630      	mov	r0, r6
 801f90c:	f001 f842 	bl	8020994 <_sbrk_r>
 801f910:	68bb      	ldr	r3, [r7, #8]
 801f912:	442b      	add	r3, r5
 801f914:	4298      	cmp	r0, r3
 801f916:	d1f1      	bne.n	801f8fc <_malloc_trim_r+0x34>
 801f918:	4261      	negs	r1, r4
 801f91a:	4630      	mov	r0, r6
 801f91c:	f001 f83a 	bl	8020994 <_sbrk_r>
 801f920:	3001      	adds	r0, #1
 801f922:	d110      	bne.n	801f946 <_malloc_trim_r+0x7e>
 801f924:	2100      	movs	r1, #0
 801f926:	4630      	mov	r0, r6
 801f928:	f001 f834 	bl	8020994 <_sbrk_r>
 801f92c:	68ba      	ldr	r2, [r7, #8]
 801f92e:	1a83      	subs	r3, r0, r2
 801f930:	2b0f      	cmp	r3, #15
 801f932:	dde3      	ble.n	801f8fc <_malloc_trim_r+0x34>
 801f934:	490c      	ldr	r1, [pc, #48]	; (801f968 <_malloc_trim_r+0xa0>)
 801f936:	6809      	ldr	r1, [r1, #0]
 801f938:	1a40      	subs	r0, r0, r1
 801f93a:	490c      	ldr	r1, [pc, #48]	; (801f96c <_malloc_trim_r+0xa4>)
 801f93c:	f043 0301 	orr.w	r3, r3, #1
 801f940:	6008      	str	r0, [r1, #0]
 801f942:	6053      	str	r3, [r2, #4]
 801f944:	e7da      	b.n	801f8fc <_malloc_trim_r+0x34>
 801f946:	68bb      	ldr	r3, [r7, #8]
 801f948:	4a08      	ldr	r2, [pc, #32]	; (801f96c <_malloc_trim_r+0xa4>)
 801f94a:	1b2d      	subs	r5, r5, r4
 801f94c:	f045 0501 	orr.w	r5, r5, #1
 801f950:	605d      	str	r5, [r3, #4]
 801f952:	6813      	ldr	r3, [r2, #0]
 801f954:	4630      	mov	r0, r6
 801f956:	1b1c      	subs	r4, r3, r4
 801f958:	6014      	str	r4, [r2, #0]
 801f95a:	f000 fcad 	bl	80202b8 <__malloc_unlock>
 801f95e:	2001      	movs	r0, #1
 801f960:	e7d0      	b.n	801f904 <_malloc_trim_r+0x3c>
 801f962:	bf00      	nop
 801f964:	200004d0 	.word	0x200004d0
 801f968:	200008d8 	.word	0x200008d8
 801f96c:	20005068 	.word	0x20005068

0801f970 <_free_r>:
 801f970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f972:	4605      	mov	r5, r0
 801f974:	460f      	mov	r7, r1
 801f976:	2900      	cmp	r1, #0
 801f978:	f000 80b1 	beq.w	801fade <_free_r+0x16e>
 801f97c:	f000 fc96 	bl	80202ac <__malloc_lock>
 801f980:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801f984:	4856      	ldr	r0, [pc, #344]	; (801fae0 <_free_r+0x170>)
 801f986:	f022 0401 	bic.w	r4, r2, #1
 801f98a:	f1a7 0308 	sub.w	r3, r7, #8
 801f98e:	eb03 0c04 	add.w	ip, r3, r4
 801f992:	6881      	ldr	r1, [r0, #8]
 801f994:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f998:	4561      	cmp	r1, ip
 801f99a:	f026 0603 	bic.w	r6, r6, #3
 801f99e:	f002 0201 	and.w	r2, r2, #1
 801f9a2:	d11b      	bne.n	801f9dc <_free_r+0x6c>
 801f9a4:	4434      	add	r4, r6
 801f9a6:	b93a      	cbnz	r2, 801f9b8 <_free_r+0x48>
 801f9a8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801f9ac:	1a9b      	subs	r3, r3, r2
 801f9ae:	4414      	add	r4, r2
 801f9b0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801f9b4:	60ca      	str	r2, [r1, #12]
 801f9b6:	6091      	str	r1, [r2, #8]
 801f9b8:	f044 0201 	orr.w	r2, r4, #1
 801f9bc:	605a      	str	r2, [r3, #4]
 801f9be:	6083      	str	r3, [r0, #8]
 801f9c0:	4b48      	ldr	r3, [pc, #288]	; (801fae4 <_free_r+0x174>)
 801f9c2:	681b      	ldr	r3, [r3, #0]
 801f9c4:	42a3      	cmp	r3, r4
 801f9c6:	d804      	bhi.n	801f9d2 <_free_r+0x62>
 801f9c8:	4b47      	ldr	r3, [pc, #284]	; (801fae8 <_free_r+0x178>)
 801f9ca:	4628      	mov	r0, r5
 801f9cc:	6819      	ldr	r1, [r3, #0]
 801f9ce:	f7ff ff7b 	bl	801f8c8 <_malloc_trim_r>
 801f9d2:	4628      	mov	r0, r5
 801f9d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f9d8:	f000 bc6e 	b.w	80202b8 <__malloc_unlock>
 801f9dc:	f8cc 6004 	str.w	r6, [ip, #4]
 801f9e0:	2a00      	cmp	r2, #0
 801f9e2:	d138      	bne.n	801fa56 <_free_r+0xe6>
 801f9e4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801f9e8:	1a5b      	subs	r3, r3, r1
 801f9ea:	440c      	add	r4, r1
 801f9ec:	6899      	ldr	r1, [r3, #8]
 801f9ee:	f100 0708 	add.w	r7, r0, #8
 801f9f2:	42b9      	cmp	r1, r7
 801f9f4:	d031      	beq.n	801fa5a <_free_r+0xea>
 801f9f6:	68df      	ldr	r7, [r3, #12]
 801f9f8:	60cf      	str	r7, [r1, #12]
 801f9fa:	60b9      	str	r1, [r7, #8]
 801f9fc:	eb0c 0106 	add.w	r1, ip, r6
 801fa00:	6849      	ldr	r1, [r1, #4]
 801fa02:	07c9      	lsls	r1, r1, #31
 801fa04:	d40b      	bmi.n	801fa1e <_free_r+0xae>
 801fa06:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801fa0a:	4434      	add	r4, r6
 801fa0c:	bb3a      	cbnz	r2, 801fa5e <_free_r+0xee>
 801fa0e:	4e37      	ldr	r6, [pc, #220]	; (801faec <_free_r+0x17c>)
 801fa10:	42b1      	cmp	r1, r6
 801fa12:	d124      	bne.n	801fa5e <_free_r+0xee>
 801fa14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fa18:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801fa1c:	2201      	movs	r2, #1
 801fa1e:	f044 0101 	orr.w	r1, r4, #1
 801fa22:	6059      	str	r1, [r3, #4]
 801fa24:	511c      	str	r4, [r3, r4]
 801fa26:	2a00      	cmp	r2, #0
 801fa28:	d1d3      	bne.n	801f9d2 <_free_r+0x62>
 801fa2a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801fa2e:	d21b      	bcs.n	801fa68 <_free_r+0xf8>
 801fa30:	0961      	lsrs	r1, r4, #5
 801fa32:	08e2      	lsrs	r2, r4, #3
 801fa34:	2401      	movs	r4, #1
 801fa36:	408c      	lsls	r4, r1
 801fa38:	6841      	ldr	r1, [r0, #4]
 801fa3a:	3201      	adds	r2, #1
 801fa3c:	430c      	orrs	r4, r1
 801fa3e:	6044      	str	r4, [r0, #4]
 801fa40:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801fa44:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801fa48:	3908      	subs	r1, #8
 801fa4a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801fa4e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801fa52:	60e3      	str	r3, [r4, #12]
 801fa54:	e7bd      	b.n	801f9d2 <_free_r+0x62>
 801fa56:	2200      	movs	r2, #0
 801fa58:	e7d0      	b.n	801f9fc <_free_r+0x8c>
 801fa5a:	2201      	movs	r2, #1
 801fa5c:	e7ce      	b.n	801f9fc <_free_r+0x8c>
 801fa5e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801fa62:	60ce      	str	r6, [r1, #12]
 801fa64:	60b1      	str	r1, [r6, #8]
 801fa66:	e7da      	b.n	801fa1e <_free_r+0xae>
 801fa68:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801fa6c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801fa70:	d214      	bcs.n	801fa9c <_free_r+0x12c>
 801fa72:	09a2      	lsrs	r2, r4, #6
 801fa74:	3238      	adds	r2, #56	; 0x38
 801fa76:	1c51      	adds	r1, r2, #1
 801fa78:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801fa7c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801fa80:	428e      	cmp	r6, r1
 801fa82:	d125      	bne.n	801fad0 <_free_r+0x160>
 801fa84:	2401      	movs	r4, #1
 801fa86:	1092      	asrs	r2, r2, #2
 801fa88:	fa04 f202 	lsl.w	r2, r4, r2
 801fa8c:	6844      	ldr	r4, [r0, #4]
 801fa8e:	4322      	orrs	r2, r4
 801fa90:	6042      	str	r2, [r0, #4]
 801fa92:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801fa96:	60b3      	str	r3, [r6, #8]
 801fa98:	60cb      	str	r3, [r1, #12]
 801fa9a:	e79a      	b.n	801f9d2 <_free_r+0x62>
 801fa9c:	2a14      	cmp	r2, #20
 801fa9e:	d801      	bhi.n	801faa4 <_free_r+0x134>
 801faa0:	325b      	adds	r2, #91	; 0x5b
 801faa2:	e7e8      	b.n	801fa76 <_free_r+0x106>
 801faa4:	2a54      	cmp	r2, #84	; 0x54
 801faa6:	d802      	bhi.n	801faae <_free_r+0x13e>
 801faa8:	0b22      	lsrs	r2, r4, #12
 801faaa:	326e      	adds	r2, #110	; 0x6e
 801faac:	e7e3      	b.n	801fa76 <_free_r+0x106>
 801faae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801fab2:	d802      	bhi.n	801faba <_free_r+0x14a>
 801fab4:	0be2      	lsrs	r2, r4, #15
 801fab6:	3277      	adds	r2, #119	; 0x77
 801fab8:	e7dd      	b.n	801fa76 <_free_r+0x106>
 801faba:	f240 5154 	movw	r1, #1364	; 0x554
 801fabe:	428a      	cmp	r2, r1
 801fac0:	bf9a      	itte	ls
 801fac2:	0ca2      	lsrls	r2, r4, #18
 801fac4:	327c      	addls	r2, #124	; 0x7c
 801fac6:	227e      	movhi	r2, #126	; 0x7e
 801fac8:	e7d5      	b.n	801fa76 <_free_r+0x106>
 801faca:	6889      	ldr	r1, [r1, #8]
 801facc:	428e      	cmp	r6, r1
 801face:	d004      	beq.n	801fada <_free_r+0x16a>
 801fad0:	684a      	ldr	r2, [r1, #4]
 801fad2:	f022 0203 	bic.w	r2, r2, #3
 801fad6:	42a2      	cmp	r2, r4
 801fad8:	d8f7      	bhi.n	801faca <_free_r+0x15a>
 801fada:	68ce      	ldr	r6, [r1, #12]
 801fadc:	e7d9      	b.n	801fa92 <_free_r+0x122>
 801fade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fae0:	200004d0 	.word	0x200004d0
 801fae4:	200008dc 	.word	0x200008dc
 801fae8:	20005098 	.word	0x20005098
 801faec:	200004d8 	.word	0x200004d8

0801faf0 <_fwalk_reent>:
 801faf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801faf4:	4606      	mov	r6, r0
 801faf6:	4688      	mov	r8, r1
 801faf8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801fafc:	2700      	movs	r7, #0
 801fafe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fb02:	f1b9 0901 	subs.w	r9, r9, #1
 801fb06:	d505      	bpl.n	801fb14 <_fwalk_reent+0x24>
 801fb08:	6824      	ldr	r4, [r4, #0]
 801fb0a:	2c00      	cmp	r4, #0
 801fb0c:	d1f7      	bne.n	801fafe <_fwalk_reent+0xe>
 801fb0e:	4638      	mov	r0, r7
 801fb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb14:	89ab      	ldrh	r3, [r5, #12]
 801fb16:	2b01      	cmp	r3, #1
 801fb18:	d907      	bls.n	801fb2a <_fwalk_reent+0x3a>
 801fb1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fb1e:	3301      	adds	r3, #1
 801fb20:	d003      	beq.n	801fb2a <_fwalk_reent+0x3a>
 801fb22:	4629      	mov	r1, r5
 801fb24:	4630      	mov	r0, r6
 801fb26:	47c0      	blx	r8
 801fb28:	4307      	orrs	r7, r0
 801fb2a:	3568      	adds	r5, #104	; 0x68
 801fb2c:	e7e9      	b.n	801fb02 <_fwalk_reent+0x12>
	...

0801fb30 <_findenv_r>:
 801fb30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb34:	4607      	mov	r7, r0
 801fb36:	4689      	mov	r9, r1
 801fb38:	4616      	mov	r6, r2
 801fb3a:	f002 fedf 	bl	80228fc <__env_lock>
 801fb3e:	4b18      	ldr	r3, [pc, #96]	; (801fba0 <_findenv_r+0x70>)
 801fb40:	681c      	ldr	r4, [r3, #0]
 801fb42:	469a      	mov	sl, r3
 801fb44:	b134      	cbz	r4, 801fb54 <_findenv_r+0x24>
 801fb46:	464b      	mov	r3, r9
 801fb48:	4698      	mov	r8, r3
 801fb4a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801fb4e:	b139      	cbz	r1, 801fb60 <_findenv_r+0x30>
 801fb50:	293d      	cmp	r1, #61	; 0x3d
 801fb52:	d1f9      	bne.n	801fb48 <_findenv_r+0x18>
 801fb54:	4638      	mov	r0, r7
 801fb56:	f002 fed7 	bl	8022908 <__env_unlock>
 801fb5a:	2000      	movs	r0, #0
 801fb5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb60:	eba8 0809 	sub.w	r8, r8, r9
 801fb64:	46a3      	mov	fp, r4
 801fb66:	f854 0b04 	ldr.w	r0, [r4], #4
 801fb6a:	2800      	cmp	r0, #0
 801fb6c:	d0f2      	beq.n	801fb54 <_findenv_r+0x24>
 801fb6e:	4642      	mov	r2, r8
 801fb70:	4649      	mov	r1, r9
 801fb72:	f7fb ff4c 	bl	801ba0e <strncmp>
 801fb76:	2800      	cmp	r0, #0
 801fb78:	d1f4      	bne.n	801fb64 <_findenv_r+0x34>
 801fb7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fb7e:	eb03 0508 	add.w	r5, r3, r8
 801fb82:	f813 3008 	ldrb.w	r3, [r3, r8]
 801fb86:	2b3d      	cmp	r3, #61	; 0x3d
 801fb88:	d1ec      	bne.n	801fb64 <_findenv_r+0x34>
 801fb8a:	f8da 3000 	ldr.w	r3, [sl]
 801fb8e:	ebab 0303 	sub.w	r3, fp, r3
 801fb92:	109b      	asrs	r3, r3, #2
 801fb94:	4638      	mov	r0, r7
 801fb96:	6033      	str	r3, [r6, #0]
 801fb98:	f002 feb6 	bl	8022908 <__env_unlock>
 801fb9c:	1c68      	adds	r0, r5, #1
 801fb9e:	e7dd      	b.n	801fb5c <_findenv_r+0x2c>
 801fba0:	20000018 	.word	0x20000018

0801fba4 <_getenv_r>:
 801fba4:	b507      	push	{r0, r1, r2, lr}
 801fba6:	aa01      	add	r2, sp, #4
 801fba8:	f7ff ffc2 	bl	801fb30 <_findenv_r>
 801fbac:	b003      	add	sp, #12
 801fbae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801fbb4 <__gettzinfo>:
 801fbb4:	4800      	ldr	r0, [pc, #0]	; (801fbb8 <__gettzinfo+0x4>)
 801fbb6:	4770      	bx	lr
 801fbb8:	20000478 	.word	0x20000478

0801fbbc <gmtime_r>:
 801fbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbc0:	e9d0 6700 	ldrd	r6, r7, [r0]
 801fbc4:	460c      	mov	r4, r1
 801fbc6:	4a51      	ldr	r2, [pc, #324]	; (801fd0c <gmtime_r+0x150>)
 801fbc8:	2300      	movs	r3, #0
 801fbca:	4630      	mov	r0, r6
 801fbcc:	4639      	mov	r1, r7
 801fbce:	f7e1 f81b 	bl	8000c08 <__aeabi_ldivmod>
 801fbd2:	4639      	mov	r1, r7
 801fbd4:	4605      	mov	r5, r0
 801fbd6:	4a4d      	ldr	r2, [pc, #308]	; (801fd0c <gmtime_r+0x150>)
 801fbd8:	4630      	mov	r0, r6
 801fbda:	2300      	movs	r3, #0
 801fbdc:	f7e1 f814 	bl	8000c08 <__aeabi_ldivmod>
 801fbe0:	2a00      	cmp	r2, #0
 801fbe2:	bfbc      	itt	lt
 801fbe4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801fbe8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801fbec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fbf0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801fbf4:	fbb2 f3f1 	udiv	r3, r2, r1
 801fbf8:	fb01 2213 	mls	r2, r1, r3, r2
 801fbfc:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801fc00:	bfac      	ite	ge
 801fc02:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801fc06:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801fc0a:	60a3      	str	r3, [r4, #8]
 801fc0c:	fbb2 f3f1 	udiv	r3, r2, r1
 801fc10:	fb01 2213 	mls	r2, r1, r3, r2
 801fc14:	6063      	str	r3, [r4, #4]
 801fc16:	6022      	str	r2, [r4, #0]
 801fc18:	1cc3      	adds	r3, r0, #3
 801fc1a:	2207      	movs	r2, #7
 801fc1c:	fb93 f2f2 	sdiv	r2, r3, r2
 801fc20:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801fc24:	1a9b      	subs	r3, r3, r2
 801fc26:	bf48      	it	mi
 801fc28:	3307      	addmi	r3, #7
 801fc2a:	2800      	cmp	r0, #0
 801fc2c:	61a3      	str	r3, [r4, #24]
 801fc2e:	bfb8      	it	lt
 801fc30:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801fc34:	4936      	ldr	r1, [pc, #216]	; (801fd10 <gmtime_r+0x154>)
 801fc36:	bfae      	itee	ge
 801fc38:	fb90 f1f1 	sdivge	r1, r0, r1
 801fc3c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801fc40:	fb93 f1f1 	sdivlt	r1, r3, r1
 801fc44:	4b33      	ldr	r3, [pc, #204]	; (801fd14 <gmtime_r+0x158>)
 801fc46:	fb03 0001 	mla	r0, r3, r1, r0
 801fc4a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801fc4e:	fbb0 f2f2 	udiv	r2, r0, r2
 801fc52:	4402      	add	r2, r0
 801fc54:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801fc58:	fbb0 f3fc 	udiv	r3, r0, ip
 801fc5c:	1ad2      	subs	r2, r2, r3
 801fc5e:	f240 176d 	movw	r7, #365	; 0x16d
 801fc62:	4b2d      	ldr	r3, [pc, #180]	; (801fd18 <gmtime_r+0x15c>)
 801fc64:	fbb0 f3f3 	udiv	r3, r0, r3
 801fc68:	2664      	movs	r6, #100	; 0x64
 801fc6a:	1ad3      	subs	r3, r2, r3
 801fc6c:	fbb3 f5f7 	udiv	r5, r3, r7
 801fc70:	fbb3 f3fc 	udiv	r3, r3, ip
 801fc74:	fbb5 f2f6 	udiv	r2, r5, r6
 801fc78:	1ad3      	subs	r3, r2, r3
 801fc7a:	4403      	add	r3, r0
 801fc7c:	fb07 3315 	mls	r3, r7, r5, r3
 801fc80:	2099      	movs	r0, #153	; 0x99
 801fc82:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801fc86:	f10c 0c02 	add.w	ip, ip, #2
 801fc8a:	f103 0e01 	add.w	lr, r3, #1
 801fc8e:	fbbc f7f0 	udiv	r7, ip, r0
 801fc92:	4378      	muls	r0, r7
 801fc94:	3002      	adds	r0, #2
 801fc96:	f04f 0805 	mov.w	r8, #5
 801fc9a:	fbb0 f0f8 	udiv	r0, r0, r8
 801fc9e:	ebae 0000 	sub.w	r0, lr, r0
 801fca2:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801fca6:	45f4      	cmp	ip, lr
 801fca8:	bf94      	ite	ls
 801fcaa:	f04f 0c02 	movls.w	ip, #2
 801fcae:	f06f 0c09 	mvnhi.w	ip, #9
 801fcb2:	4467      	add	r7, ip
 801fcb4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801fcb8:	fb0c 5101 	mla	r1, ip, r1, r5
 801fcbc:	2f01      	cmp	r7, #1
 801fcbe:	bf98      	it	ls
 801fcc0:	3101      	addls	r1, #1
 801fcc2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801fcc6:	d30c      	bcc.n	801fce2 <gmtime_r+0x126>
 801fcc8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801fccc:	61e3      	str	r3, [r4, #28]
 801fcce:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	60e0      	str	r0, [r4, #12]
 801fcd6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801fcda:	6223      	str	r3, [r4, #32]
 801fcdc:	4620      	mov	r0, r4
 801fcde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fce2:	f015 0f03 	tst.w	r5, #3
 801fce6:	d102      	bne.n	801fcee <gmtime_r+0x132>
 801fce8:	fb06 5212 	mls	r2, r6, r2, r5
 801fcec:	b95a      	cbnz	r2, 801fd06 <gmtime_r+0x14a>
 801fcee:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801fcf2:	fbb5 f2f6 	udiv	r2, r5, r6
 801fcf6:	fb06 5212 	mls	r2, r6, r2, r5
 801fcfa:	fab2 f282 	clz	r2, r2
 801fcfe:	0952      	lsrs	r2, r2, #5
 801fd00:	333b      	adds	r3, #59	; 0x3b
 801fd02:	4413      	add	r3, r2
 801fd04:	e7e2      	b.n	801fccc <gmtime_r+0x110>
 801fd06:	2201      	movs	r2, #1
 801fd08:	e7fa      	b.n	801fd00 <gmtime_r+0x144>
 801fd0a:	bf00      	nop
 801fd0c:	00015180 	.word	0x00015180
 801fd10:	00023ab1 	.word	0x00023ab1
 801fd14:	fffdc54f 	.word	0xfffdc54f
 801fd18:	00023ab0 	.word	0x00023ab0

0801fd1c <_localeconv_r>:
 801fd1c:	4800      	ldr	r0, [pc, #0]	; (801fd20 <_localeconv_r+0x4>)
 801fd1e:	4770      	bx	lr
 801fd20:	200009d0 	.word	0x200009d0

0801fd24 <__retarget_lock_init_recursive>:
 801fd24:	4770      	bx	lr

0801fd26 <__retarget_lock_close_recursive>:
 801fd26:	4770      	bx	lr

0801fd28 <__retarget_lock_acquire>:
 801fd28:	4770      	bx	lr

0801fd2a <__retarget_lock_acquire_recursive>:
 801fd2a:	4770      	bx	lr

0801fd2c <__retarget_lock_release>:
 801fd2c:	4770      	bx	lr

0801fd2e <__retarget_lock_release_recursive>:
 801fd2e:	4770      	bx	lr

0801fd30 <__swhatbuf_r>:
 801fd30:	b570      	push	{r4, r5, r6, lr}
 801fd32:	460e      	mov	r6, r1
 801fd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd38:	2900      	cmp	r1, #0
 801fd3a:	b096      	sub	sp, #88	; 0x58
 801fd3c:	4614      	mov	r4, r2
 801fd3e:	461d      	mov	r5, r3
 801fd40:	da09      	bge.n	801fd56 <__swhatbuf_r+0x26>
 801fd42:	89b3      	ldrh	r3, [r6, #12]
 801fd44:	2200      	movs	r2, #0
 801fd46:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fd4a:	602a      	str	r2, [r5, #0]
 801fd4c:	d116      	bne.n	801fd7c <__swhatbuf_r+0x4c>
 801fd4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd52:	6023      	str	r3, [r4, #0]
 801fd54:	e015      	b.n	801fd82 <__swhatbuf_r+0x52>
 801fd56:	466a      	mov	r2, sp
 801fd58:	f002 feb2 	bl	8022ac0 <_fstat_r>
 801fd5c:	2800      	cmp	r0, #0
 801fd5e:	dbf0      	blt.n	801fd42 <__swhatbuf_r+0x12>
 801fd60:	9a01      	ldr	r2, [sp, #4]
 801fd62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fd66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fd6a:	425a      	negs	r2, r3
 801fd6c:	415a      	adcs	r2, r3
 801fd6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fd72:	602a      	str	r2, [r5, #0]
 801fd74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801fd78:	6023      	str	r3, [r4, #0]
 801fd7a:	e002      	b.n	801fd82 <__swhatbuf_r+0x52>
 801fd7c:	2340      	movs	r3, #64	; 0x40
 801fd7e:	6023      	str	r3, [r4, #0]
 801fd80:	4610      	mov	r0, r2
 801fd82:	b016      	add	sp, #88	; 0x58
 801fd84:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fd88 <__smakebuf_r>:
 801fd88:	898b      	ldrh	r3, [r1, #12]
 801fd8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fd8c:	079d      	lsls	r5, r3, #30
 801fd8e:	4606      	mov	r6, r0
 801fd90:	460c      	mov	r4, r1
 801fd92:	d507      	bpl.n	801fda4 <__smakebuf_r+0x1c>
 801fd94:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801fd98:	6023      	str	r3, [r4, #0]
 801fd9a:	6123      	str	r3, [r4, #16]
 801fd9c:	2301      	movs	r3, #1
 801fd9e:	6163      	str	r3, [r4, #20]
 801fda0:	b002      	add	sp, #8
 801fda2:	bd70      	pop	{r4, r5, r6, pc}
 801fda4:	ab01      	add	r3, sp, #4
 801fda6:	466a      	mov	r2, sp
 801fda8:	f7ff ffc2 	bl	801fd30 <__swhatbuf_r>
 801fdac:	9900      	ldr	r1, [sp, #0]
 801fdae:	4605      	mov	r5, r0
 801fdb0:	4630      	mov	r0, r6
 801fdb2:	f000 f839 	bl	801fe28 <_malloc_r>
 801fdb6:	b948      	cbnz	r0, 801fdcc <__smakebuf_r+0x44>
 801fdb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fdbc:	059a      	lsls	r2, r3, #22
 801fdbe:	d4ef      	bmi.n	801fda0 <__smakebuf_r+0x18>
 801fdc0:	f023 0303 	bic.w	r3, r3, #3
 801fdc4:	f043 0302 	orr.w	r3, r3, #2
 801fdc8:	81a3      	strh	r3, [r4, #12]
 801fdca:	e7e3      	b.n	801fd94 <__smakebuf_r+0xc>
 801fdcc:	4b0d      	ldr	r3, [pc, #52]	; (801fe04 <__smakebuf_r+0x7c>)
 801fdce:	63f3      	str	r3, [r6, #60]	; 0x3c
 801fdd0:	89a3      	ldrh	r3, [r4, #12]
 801fdd2:	6020      	str	r0, [r4, #0]
 801fdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdd8:	81a3      	strh	r3, [r4, #12]
 801fdda:	9b00      	ldr	r3, [sp, #0]
 801fddc:	6163      	str	r3, [r4, #20]
 801fdde:	9b01      	ldr	r3, [sp, #4]
 801fde0:	6120      	str	r0, [r4, #16]
 801fde2:	b15b      	cbz	r3, 801fdfc <__smakebuf_r+0x74>
 801fde4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fde8:	4630      	mov	r0, r6
 801fdea:	f002 ffc5 	bl	8022d78 <_isatty_r>
 801fdee:	b128      	cbz	r0, 801fdfc <__smakebuf_r+0x74>
 801fdf0:	89a3      	ldrh	r3, [r4, #12]
 801fdf2:	f023 0303 	bic.w	r3, r3, #3
 801fdf6:	f043 0301 	orr.w	r3, r3, #1
 801fdfa:	81a3      	strh	r3, [r4, #12]
 801fdfc:	89a0      	ldrh	r0, [r4, #12]
 801fdfe:	4305      	orrs	r5, r0
 801fe00:	81a5      	strh	r5, [r4, #12]
 801fe02:	e7cd      	b.n	801fda0 <__smakebuf_r+0x18>
 801fe04:	0801f815 	.word	0x0801f815

0801fe08 <malloc>:
 801fe08:	4b02      	ldr	r3, [pc, #8]	; (801fe14 <malloc+0xc>)
 801fe0a:	4601      	mov	r1, r0
 801fe0c:	6818      	ldr	r0, [r3, #0]
 801fe0e:	f000 b80b 	b.w	801fe28 <_malloc_r>
 801fe12:	bf00      	nop
 801fe14:	20000038 	.word	0x20000038

0801fe18 <free>:
 801fe18:	4b02      	ldr	r3, [pc, #8]	; (801fe24 <free+0xc>)
 801fe1a:	4601      	mov	r1, r0
 801fe1c:	6818      	ldr	r0, [r3, #0]
 801fe1e:	f7ff bda7 	b.w	801f970 <_free_r>
 801fe22:	bf00      	nop
 801fe24:	20000038 	.word	0x20000038

0801fe28 <_malloc_r>:
 801fe28:	f101 030b 	add.w	r3, r1, #11
 801fe2c:	2b16      	cmp	r3, #22
 801fe2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe32:	4605      	mov	r5, r0
 801fe34:	d906      	bls.n	801fe44 <_malloc_r+0x1c>
 801fe36:	f033 0707 	bics.w	r7, r3, #7
 801fe3a:	d504      	bpl.n	801fe46 <_malloc_r+0x1e>
 801fe3c:	230c      	movs	r3, #12
 801fe3e:	602b      	str	r3, [r5, #0]
 801fe40:	2400      	movs	r4, #0
 801fe42:	e1ae      	b.n	80201a2 <_malloc_r+0x37a>
 801fe44:	2710      	movs	r7, #16
 801fe46:	42b9      	cmp	r1, r7
 801fe48:	d8f8      	bhi.n	801fe3c <_malloc_r+0x14>
 801fe4a:	4628      	mov	r0, r5
 801fe4c:	f000 fa2e 	bl	80202ac <__malloc_lock>
 801fe50:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801fe54:	4ec3      	ldr	r6, [pc, #780]	; (8020164 <_malloc_r+0x33c>)
 801fe56:	d238      	bcs.n	801feca <_malloc_r+0xa2>
 801fe58:	f107 0208 	add.w	r2, r7, #8
 801fe5c:	4432      	add	r2, r6
 801fe5e:	f1a2 0108 	sub.w	r1, r2, #8
 801fe62:	6854      	ldr	r4, [r2, #4]
 801fe64:	428c      	cmp	r4, r1
 801fe66:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801fe6a:	d102      	bne.n	801fe72 <_malloc_r+0x4a>
 801fe6c:	68d4      	ldr	r4, [r2, #12]
 801fe6e:	42a2      	cmp	r2, r4
 801fe70:	d010      	beq.n	801fe94 <_malloc_r+0x6c>
 801fe72:	6863      	ldr	r3, [r4, #4]
 801fe74:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801fe78:	f023 0303 	bic.w	r3, r3, #3
 801fe7c:	60ca      	str	r2, [r1, #12]
 801fe7e:	4423      	add	r3, r4
 801fe80:	6091      	str	r1, [r2, #8]
 801fe82:	685a      	ldr	r2, [r3, #4]
 801fe84:	f042 0201 	orr.w	r2, r2, #1
 801fe88:	605a      	str	r2, [r3, #4]
 801fe8a:	4628      	mov	r0, r5
 801fe8c:	f000 fa14 	bl	80202b8 <__malloc_unlock>
 801fe90:	3408      	adds	r4, #8
 801fe92:	e186      	b.n	80201a2 <_malloc_r+0x37a>
 801fe94:	3302      	adds	r3, #2
 801fe96:	4ab4      	ldr	r2, [pc, #720]	; (8020168 <_malloc_r+0x340>)
 801fe98:	6934      	ldr	r4, [r6, #16]
 801fe9a:	4294      	cmp	r4, r2
 801fe9c:	4611      	mov	r1, r2
 801fe9e:	d077      	beq.n	801ff90 <_malloc_r+0x168>
 801fea0:	6860      	ldr	r0, [r4, #4]
 801fea2:	f020 0c03 	bic.w	ip, r0, #3
 801fea6:	ebac 0007 	sub.w	r0, ip, r7
 801feaa:	280f      	cmp	r0, #15
 801feac:	dd48      	ble.n	801ff40 <_malloc_r+0x118>
 801feae:	19e1      	adds	r1, r4, r7
 801feb0:	f040 0301 	orr.w	r3, r0, #1
 801feb4:	f047 0701 	orr.w	r7, r7, #1
 801feb8:	6067      	str	r7, [r4, #4]
 801feba:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801febe:	e9c1 2202 	strd	r2, r2, [r1, #8]
 801fec2:	604b      	str	r3, [r1, #4]
 801fec4:	f844 000c 	str.w	r0, [r4, ip]
 801fec8:	e7df      	b.n	801fe8a <_malloc_r+0x62>
 801feca:	0a7b      	lsrs	r3, r7, #9
 801fecc:	d02a      	beq.n	801ff24 <_malloc_r+0xfc>
 801fece:	2b04      	cmp	r3, #4
 801fed0:	d812      	bhi.n	801fef8 <_malloc_r+0xd0>
 801fed2:	09bb      	lsrs	r3, r7, #6
 801fed4:	3338      	adds	r3, #56	; 0x38
 801fed6:	1c5a      	adds	r2, r3, #1
 801fed8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801fedc:	f1a2 0c08 	sub.w	ip, r2, #8
 801fee0:	6854      	ldr	r4, [r2, #4]
 801fee2:	4564      	cmp	r4, ip
 801fee4:	d006      	beq.n	801fef4 <_malloc_r+0xcc>
 801fee6:	6862      	ldr	r2, [r4, #4]
 801fee8:	f022 0203 	bic.w	r2, r2, #3
 801feec:	1bd0      	subs	r0, r2, r7
 801feee:	280f      	cmp	r0, #15
 801fef0:	dd1c      	ble.n	801ff2c <_malloc_r+0x104>
 801fef2:	3b01      	subs	r3, #1
 801fef4:	3301      	adds	r3, #1
 801fef6:	e7ce      	b.n	801fe96 <_malloc_r+0x6e>
 801fef8:	2b14      	cmp	r3, #20
 801fefa:	d801      	bhi.n	801ff00 <_malloc_r+0xd8>
 801fefc:	335b      	adds	r3, #91	; 0x5b
 801fefe:	e7ea      	b.n	801fed6 <_malloc_r+0xae>
 801ff00:	2b54      	cmp	r3, #84	; 0x54
 801ff02:	d802      	bhi.n	801ff0a <_malloc_r+0xe2>
 801ff04:	0b3b      	lsrs	r3, r7, #12
 801ff06:	336e      	adds	r3, #110	; 0x6e
 801ff08:	e7e5      	b.n	801fed6 <_malloc_r+0xae>
 801ff0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801ff0e:	d802      	bhi.n	801ff16 <_malloc_r+0xee>
 801ff10:	0bfb      	lsrs	r3, r7, #15
 801ff12:	3377      	adds	r3, #119	; 0x77
 801ff14:	e7df      	b.n	801fed6 <_malloc_r+0xae>
 801ff16:	f240 5254 	movw	r2, #1364	; 0x554
 801ff1a:	4293      	cmp	r3, r2
 801ff1c:	d804      	bhi.n	801ff28 <_malloc_r+0x100>
 801ff1e:	0cbb      	lsrs	r3, r7, #18
 801ff20:	337c      	adds	r3, #124	; 0x7c
 801ff22:	e7d8      	b.n	801fed6 <_malloc_r+0xae>
 801ff24:	233f      	movs	r3, #63	; 0x3f
 801ff26:	e7d6      	b.n	801fed6 <_malloc_r+0xae>
 801ff28:	237e      	movs	r3, #126	; 0x7e
 801ff2a:	e7d4      	b.n	801fed6 <_malloc_r+0xae>
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	68e1      	ldr	r1, [r4, #12]
 801ff30:	db04      	blt.n	801ff3c <_malloc_r+0x114>
 801ff32:	68a3      	ldr	r3, [r4, #8]
 801ff34:	60d9      	str	r1, [r3, #12]
 801ff36:	608b      	str	r3, [r1, #8]
 801ff38:	18a3      	adds	r3, r4, r2
 801ff3a:	e7a2      	b.n	801fe82 <_malloc_r+0x5a>
 801ff3c:	460c      	mov	r4, r1
 801ff3e:	e7d0      	b.n	801fee2 <_malloc_r+0xba>
 801ff40:	2800      	cmp	r0, #0
 801ff42:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801ff46:	db07      	blt.n	801ff58 <_malloc_r+0x130>
 801ff48:	44a4      	add	ip, r4
 801ff4a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ff4e:	f043 0301 	orr.w	r3, r3, #1
 801ff52:	f8cc 3004 	str.w	r3, [ip, #4]
 801ff56:	e798      	b.n	801fe8a <_malloc_r+0x62>
 801ff58:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801ff5c:	6870      	ldr	r0, [r6, #4]
 801ff5e:	f080 809e 	bcs.w	802009e <_malloc_r+0x276>
 801ff62:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801ff66:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801ff6a:	f04f 0c01 	mov.w	ip, #1
 801ff6e:	3201      	adds	r2, #1
 801ff70:	fa0c fc0e 	lsl.w	ip, ip, lr
 801ff74:	ea4c 0000 	orr.w	r0, ip, r0
 801ff78:	6070      	str	r0, [r6, #4]
 801ff7a:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801ff7e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801ff82:	3808      	subs	r0, #8
 801ff84:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801ff88:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801ff8c:	f8cc 400c 	str.w	r4, [ip, #12]
 801ff90:	2001      	movs	r0, #1
 801ff92:	109a      	asrs	r2, r3, #2
 801ff94:	fa00 f202 	lsl.w	r2, r0, r2
 801ff98:	6870      	ldr	r0, [r6, #4]
 801ff9a:	4290      	cmp	r0, r2
 801ff9c:	d326      	bcc.n	801ffec <_malloc_r+0x1c4>
 801ff9e:	4210      	tst	r0, r2
 801ffa0:	d106      	bne.n	801ffb0 <_malloc_r+0x188>
 801ffa2:	f023 0303 	bic.w	r3, r3, #3
 801ffa6:	0052      	lsls	r2, r2, #1
 801ffa8:	4210      	tst	r0, r2
 801ffaa:	f103 0304 	add.w	r3, r3, #4
 801ffae:	d0fa      	beq.n	801ffa6 <_malloc_r+0x17e>
 801ffb0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801ffb4:	46c1      	mov	r9, r8
 801ffb6:	469e      	mov	lr, r3
 801ffb8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801ffbc:	454c      	cmp	r4, r9
 801ffbe:	f040 80b3 	bne.w	8020128 <_malloc_r+0x300>
 801ffc2:	f10e 0e01 	add.w	lr, lr, #1
 801ffc6:	f01e 0f03 	tst.w	lr, #3
 801ffca:	f109 0908 	add.w	r9, r9, #8
 801ffce:	d1f3      	bne.n	801ffb8 <_malloc_r+0x190>
 801ffd0:	0798      	lsls	r0, r3, #30
 801ffd2:	f040 80ec 	bne.w	80201ae <_malloc_r+0x386>
 801ffd6:	6873      	ldr	r3, [r6, #4]
 801ffd8:	ea23 0302 	bic.w	r3, r3, r2
 801ffdc:	6073      	str	r3, [r6, #4]
 801ffde:	6870      	ldr	r0, [r6, #4]
 801ffe0:	0052      	lsls	r2, r2, #1
 801ffe2:	4290      	cmp	r0, r2
 801ffe4:	d302      	bcc.n	801ffec <_malloc_r+0x1c4>
 801ffe6:	2a00      	cmp	r2, #0
 801ffe8:	f040 80ee 	bne.w	80201c8 <_malloc_r+0x3a0>
 801ffec:	f8d6 b008 	ldr.w	fp, [r6, #8]
 801fff0:	f8db 1004 	ldr.w	r1, [fp, #4]
 801fff4:	f021 0903 	bic.w	r9, r1, #3
 801fff8:	45b9      	cmp	r9, r7
 801fffa:	d304      	bcc.n	8020006 <_malloc_r+0x1de>
 801fffc:	eba9 0207 	sub.w	r2, r9, r7
 8020000:	2a0f      	cmp	r2, #15
 8020002:	f300 8149 	bgt.w	8020298 <_malloc_r+0x470>
 8020006:	4a59      	ldr	r2, [pc, #356]	; (802016c <_malloc_r+0x344>)
 8020008:	6811      	ldr	r1, [r2, #0]
 802000a:	3110      	adds	r1, #16
 802000c:	eb0b 0309 	add.w	r3, fp, r9
 8020010:	4439      	add	r1, r7
 8020012:	2008      	movs	r0, #8
 8020014:	9301      	str	r3, [sp, #4]
 8020016:	9100      	str	r1, [sp, #0]
 8020018:	f001 fe80 	bl	8021d1c <sysconf>
 802001c:	4a54      	ldr	r2, [pc, #336]	; (8020170 <_malloc_r+0x348>)
 802001e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8020022:	4680      	mov	r8, r0
 8020024:	6810      	ldr	r0, [r2, #0]
 8020026:	3001      	adds	r0, #1
 8020028:	bf1f      	itttt	ne
 802002a:	f101 31ff 	addne.w	r1, r1, #4294967295
 802002e:	4441      	addne	r1, r8
 8020030:	f1c8 0000 	rsbne	r0, r8, #0
 8020034:	4001      	andne	r1, r0
 8020036:	4628      	mov	r0, r5
 8020038:	e9cd 1300 	strd	r1, r3, [sp]
 802003c:	f000 fcaa 	bl	8020994 <_sbrk_r>
 8020040:	1c42      	adds	r2, r0, #1
 8020042:	4604      	mov	r4, r0
 8020044:	f000 80fc 	beq.w	8020240 <_malloc_r+0x418>
 8020048:	9b01      	ldr	r3, [sp, #4]
 802004a:	9900      	ldr	r1, [sp, #0]
 802004c:	4a48      	ldr	r2, [pc, #288]	; (8020170 <_malloc_r+0x348>)
 802004e:	4283      	cmp	r3, r0
 8020050:	d902      	bls.n	8020058 <_malloc_r+0x230>
 8020052:	45b3      	cmp	fp, r6
 8020054:	f040 80f4 	bne.w	8020240 <_malloc_r+0x418>
 8020058:	f8df a120 	ldr.w	sl, [pc, #288]	; 802017c <_malloc_r+0x354>
 802005c:	f8da 0000 	ldr.w	r0, [sl]
 8020060:	42a3      	cmp	r3, r4
 8020062:	eb00 0e01 	add.w	lr, r0, r1
 8020066:	f8ca e000 	str.w	lr, [sl]
 802006a:	f108 3cff 	add.w	ip, r8, #4294967295
 802006e:	f040 80ad 	bne.w	80201cc <_malloc_r+0x3a4>
 8020072:	ea13 0f0c 	tst.w	r3, ip
 8020076:	f040 80a9 	bne.w	80201cc <_malloc_r+0x3a4>
 802007a:	68b3      	ldr	r3, [r6, #8]
 802007c:	4449      	add	r1, r9
 802007e:	f041 0101 	orr.w	r1, r1, #1
 8020082:	6059      	str	r1, [r3, #4]
 8020084:	4a3b      	ldr	r2, [pc, #236]	; (8020174 <_malloc_r+0x34c>)
 8020086:	f8da 3000 	ldr.w	r3, [sl]
 802008a:	6811      	ldr	r1, [r2, #0]
 802008c:	428b      	cmp	r3, r1
 802008e:	bf88      	it	hi
 8020090:	6013      	strhi	r3, [r2, #0]
 8020092:	4a39      	ldr	r2, [pc, #228]	; (8020178 <_malloc_r+0x350>)
 8020094:	6811      	ldr	r1, [r2, #0]
 8020096:	428b      	cmp	r3, r1
 8020098:	bf88      	it	hi
 802009a:	6013      	strhi	r3, [r2, #0]
 802009c:	e0d0      	b.n	8020240 <_malloc_r+0x418>
 802009e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80200a2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80200a6:	d218      	bcs.n	80200da <_malloc_r+0x2b2>
 80200a8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80200ac:	3238      	adds	r2, #56	; 0x38
 80200ae:	f102 0e01 	add.w	lr, r2, #1
 80200b2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80200b6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80200ba:	45f0      	cmp	r8, lr
 80200bc:	d12b      	bne.n	8020116 <_malloc_r+0x2ee>
 80200be:	1092      	asrs	r2, r2, #2
 80200c0:	f04f 0c01 	mov.w	ip, #1
 80200c4:	fa0c f202 	lsl.w	r2, ip, r2
 80200c8:	4310      	orrs	r0, r2
 80200ca:	6070      	str	r0, [r6, #4]
 80200cc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80200d0:	f8c8 4008 	str.w	r4, [r8, #8]
 80200d4:	f8ce 400c 	str.w	r4, [lr, #12]
 80200d8:	e75a      	b.n	801ff90 <_malloc_r+0x168>
 80200da:	2a14      	cmp	r2, #20
 80200dc:	d801      	bhi.n	80200e2 <_malloc_r+0x2ba>
 80200de:	325b      	adds	r2, #91	; 0x5b
 80200e0:	e7e5      	b.n	80200ae <_malloc_r+0x286>
 80200e2:	2a54      	cmp	r2, #84	; 0x54
 80200e4:	d803      	bhi.n	80200ee <_malloc_r+0x2c6>
 80200e6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80200ea:	326e      	adds	r2, #110	; 0x6e
 80200ec:	e7df      	b.n	80200ae <_malloc_r+0x286>
 80200ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80200f2:	d803      	bhi.n	80200fc <_malloc_r+0x2d4>
 80200f4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80200f8:	3277      	adds	r2, #119	; 0x77
 80200fa:	e7d8      	b.n	80200ae <_malloc_r+0x286>
 80200fc:	f240 5e54 	movw	lr, #1364	; 0x554
 8020100:	4572      	cmp	r2, lr
 8020102:	bf9a      	itte	ls
 8020104:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8020108:	327c      	addls	r2, #124	; 0x7c
 802010a:	227e      	movhi	r2, #126	; 0x7e
 802010c:	e7cf      	b.n	80200ae <_malloc_r+0x286>
 802010e:	f8de e008 	ldr.w	lr, [lr, #8]
 8020112:	45f0      	cmp	r8, lr
 8020114:	d005      	beq.n	8020122 <_malloc_r+0x2fa>
 8020116:	f8de 2004 	ldr.w	r2, [lr, #4]
 802011a:	f022 0203 	bic.w	r2, r2, #3
 802011e:	4562      	cmp	r2, ip
 8020120:	d8f5      	bhi.n	802010e <_malloc_r+0x2e6>
 8020122:	f8de 800c 	ldr.w	r8, [lr, #12]
 8020126:	e7d1      	b.n	80200cc <_malloc_r+0x2a4>
 8020128:	6860      	ldr	r0, [r4, #4]
 802012a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802012e:	f020 0003 	bic.w	r0, r0, #3
 8020132:	eba0 0a07 	sub.w	sl, r0, r7
 8020136:	f1ba 0f0f 	cmp.w	sl, #15
 802013a:	dd21      	ble.n	8020180 <_malloc_r+0x358>
 802013c:	68a3      	ldr	r3, [r4, #8]
 802013e:	19e2      	adds	r2, r4, r7
 8020140:	f047 0701 	orr.w	r7, r7, #1
 8020144:	6067      	str	r7, [r4, #4]
 8020146:	f8c3 c00c 	str.w	ip, [r3, #12]
 802014a:	f8cc 3008 	str.w	r3, [ip, #8]
 802014e:	f04a 0301 	orr.w	r3, sl, #1
 8020152:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8020156:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802015a:	6053      	str	r3, [r2, #4]
 802015c:	f844 a000 	str.w	sl, [r4, r0]
 8020160:	e693      	b.n	801fe8a <_malloc_r+0x62>
 8020162:	bf00      	nop
 8020164:	200004d0 	.word	0x200004d0
 8020168:	200004d8 	.word	0x200004d8
 802016c:	20005098 	.word	0x20005098
 8020170:	200008d8 	.word	0x200008d8
 8020174:	20005090 	.word	0x20005090
 8020178:	20005094 	.word	0x20005094
 802017c:	20005068 	.word	0x20005068
 8020180:	f1ba 0f00 	cmp.w	sl, #0
 8020184:	db11      	blt.n	80201aa <_malloc_r+0x382>
 8020186:	4420      	add	r0, r4
 8020188:	6843      	ldr	r3, [r0, #4]
 802018a:	f043 0301 	orr.w	r3, r3, #1
 802018e:	6043      	str	r3, [r0, #4]
 8020190:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8020194:	4628      	mov	r0, r5
 8020196:	f8c3 c00c 	str.w	ip, [r3, #12]
 802019a:	f8cc 3008 	str.w	r3, [ip, #8]
 802019e:	f000 f88b 	bl	80202b8 <__malloc_unlock>
 80201a2:	4620      	mov	r0, r4
 80201a4:	b003      	add	sp, #12
 80201a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201aa:	4664      	mov	r4, ip
 80201ac:	e706      	b.n	801ffbc <_malloc_r+0x194>
 80201ae:	f858 0908 	ldr.w	r0, [r8], #-8
 80201b2:	4540      	cmp	r0, r8
 80201b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80201b8:	f43f af0a 	beq.w	801ffd0 <_malloc_r+0x1a8>
 80201bc:	e70f      	b.n	801ffde <_malloc_r+0x1b6>
 80201be:	3304      	adds	r3, #4
 80201c0:	0052      	lsls	r2, r2, #1
 80201c2:	4210      	tst	r0, r2
 80201c4:	d0fb      	beq.n	80201be <_malloc_r+0x396>
 80201c6:	e6f3      	b.n	801ffb0 <_malloc_r+0x188>
 80201c8:	4673      	mov	r3, lr
 80201ca:	e7fa      	b.n	80201c2 <_malloc_r+0x39a>
 80201cc:	6810      	ldr	r0, [r2, #0]
 80201ce:	3001      	adds	r0, #1
 80201d0:	bf1b      	ittet	ne
 80201d2:	1ae3      	subne	r3, r4, r3
 80201d4:	4473      	addne	r3, lr
 80201d6:	6014      	streq	r4, [r2, #0]
 80201d8:	f8ca 3000 	strne.w	r3, [sl]
 80201dc:	f014 0307 	ands.w	r3, r4, #7
 80201e0:	bf1a      	itte	ne
 80201e2:	f1c3 0008 	rsbne	r0, r3, #8
 80201e6:	1824      	addne	r4, r4, r0
 80201e8:	4618      	moveq	r0, r3
 80201ea:	1862      	adds	r2, r4, r1
 80201ec:	ea02 010c 	and.w	r1, r2, ip
 80201f0:	4480      	add	r8, r0
 80201f2:	eba8 0801 	sub.w	r8, r8, r1
 80201f6:	ea08 080c 	and.w	r8, r8, ip
 80201fa:	4641      	mov	r1, r8
 80201fc:	4628      	mov	r0, r5
 80201fe:	9301      	str	r3, [sp, #4]
 8020200:	9200      	str	r2, [sp, #0]
 8020202:	f000 fbc7 	bl	8020994 <_sbrk_r>
 8020206:	1c43      	adds	r3, r0, #1
 8020208:	e9dd 2300 	ldrd	r2, r3, [sp]
 802020c:	d105      	bne.n	802021a <_malloc_r+0x3f2>
 802020e:	b32b      	cbz	r3, 802025c <_malloc_r+0x434>
 8020210:	f1a3 0008 	sub.w	r0, r3, #8
 8020214:	4410      	add	r0, r2
 8020216:	f04f 0800 	mov.w	r8, #0
 802021a:	f8da 2000 	ldr.w	r2, [sl]
 802021e:	60b4      	str	r4, [r6, #8]
 8020220:	1b00      	subs	r0, r0, r4
 8020222:	4440      	add	r0, r8
 8020224:	4442      	add	r2, r8
 8020226:	f040 0001 	orr.w	r0, r0, #1
 802022a:	45b3      	cmp	fp, r6
 802022c:	f8ca 2000 	str.w	r2, [sl]
 8020230:	6060      	str	r0, [r4, #4]
 8020232:	f43f af27 	beq.w	8020084 <_malloc_r+0x25c>
 8020236:	f1b9 0f0f 	cmp.w	r9, #15
 802023a:	d812      	bhi.n	8020262 <_malloc_r+0x43a>
 802023c:	2301      	movs	r3, #1
 802023e:	6063      	str	r3, [r4, #4]
 8020240:	68b3      	ldr	r3, [r6, #8]
 8020242:	685b      	ldr	r3, [r3, #4]
 8020244:	f023 0303 	bic.w	r3, r3, #3
 8020248:	42bb      	cmp	r3, r7
 802024a:	eba3 0207 	sub.w	r2, r3, r7
 802024e:	d301      	bcc.n	8020254 <_malloc_r+0x42c>
 8020250:	2a0f      	cmp	r2, #15
 8020252:	dc21      	bgt.n	8020298 <_malloc_r+0x470>
 8020254:	4628      	mov	r0, r5
 8020256:	f000 f82f 	bl	80202b8 <__malloc_unlock>
 802025a:	e5f1      	b.n	801fe40 <_malloc_r+0x18>
 802025c:	4610      	mov	r0, r2
 802025e:	4698      	mov	r8, r3
 8020260:	e7db      	b.n	802021a <_malloc_r+0x3f2>
 8020262:	f8db 3004 	ldr.w	r3, [fp, #4]
 8020266:	f1a9 090c 	sub.w	r9, r9, #12
 802026a:	f029 0907 	bic.w	r9, r9, #7
 802026e:	f003 0301 	and.w	r3, r3, #1
 8020272:	ea43 0309 	orr.w	r3, r3, r9
 8020276:	f8cb 3004 	str.w	r3, [fp, #4]
 802027a:	2205      	movs	r2, #5
 802027c:	eb0b 0309 	add.w	r3, fp, r9
 8020280:	f1b9 0f0f 	cmp.w	r9, #15
 8020284:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8020288:	f67f aefc 	bls.w	8020084 <_malloc_r+0x25c>
 802028c:	f10b 0108 	add.w	r1, fp, #8
 8020290:	4628      	mov	r0, r5
 8020292:	f7ff fb6d 	bl	801f970 <_free_r>
 8020296:	e6f5      	b.n	8020084 <_malloc_r+0x25c>
 8020298:	68b4      	ldr	r4, [r6, #8]
 802029a:	f047 0301 	orr.w	r3, r7, #1
 802029e:	4427      	add	r7, r4
 80202a0:	f042 0201 	orr.w	r2, r2, #1
 80202a4:	6063      	str	r3, [r4, #4]
 80202a6:	60b7      	str	r7, [r6, #8]
 80202a8:	607a      	str	r2, [r7, #4]
 80202aa:	e5ee      	b.n	801fe8a <_malloc_r+0x62>

080202ac <__malloc_lock>:
 80202ac:	4801      	ldr	r0, [pc, #4]	; (80202b4 <__malloc_lock+0x8>)
 80202ae:	f7ff bd3c 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 80202b2:	bf00      	nop
 80202b4:	2000bdf8 	.word	0x2000bdf8

080202b8 <__malloc_unlock>:
 80202b8:	4801      	ldr	r0, [pc, #4]	; (80202c0 <__malloc_unlock+0x8>)
 80202ba:	f7ff bd38 	b.w	801fd2e <__retarget_lock_release_recursive>
 80202be:	bf00      	nop
 80202c0:	2000bdf8 	.word	0x2000bdf8

080202c4 <_Balloc>:
 80202c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80202c6:	b570      	push	{r4, r5, r6, lr}
 80202c8:	4605      	mov	r5, r0
 80202ca:	460c      	mov	r4, r1
 80202cc:	b17b      	cbz	r3, 80202ee <_Balloc+0x2a>
 80202ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80202d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80202d4:	b9a0      	cbnz	r0, 8020300 <_Balloc+0x3c>
 80202d6:	2101      	movs	r1, #1
 80202d8:	fa01 f604 	lsl.w	r6, r1, r4
 80202dc:	1d72      	adds	r2, r6, #5
 80202de:	0092      	lsls	r2, r2, #2
 80202e0:	4628      	mov	r0, r5
 80202e2:	f002 facd 	bl	8022880 <_calloc_r>
 80202e6:	b148      	cbz	r0, 80202fc <_Balloc+0x38>
 80202e8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80202ec:	e00b      	b.n	8020306 <_Balloc+0x42>
 80202ee:	2221      	movs	r2, #33	; 0x21
 80202f0:	2104      	movs	r1, #4
 80202f2:	f002 fac5 	bl	8022880 <_calloc_r>
 80202f6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80202f8:	2800      	cmp	r0, #0
 80202fa:	d1e8      	bne.n	80202ce <_Balloc+0xa>
 80202fc:	2000      	movs	r0, #0
 80202fe:	bd70      	pop	{r4, r5, r6, pc}
 8020300:	6802      	ldr	r2, [r0, #0]
 8020302:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8020306:	2300      	movs	r3, #0
 8020308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802030c:	e7f7      	b.n	80202fe <_Balloc+0x3a>

0802030e <_Bfree>:
 802030e:	b131      	cbz	r1, 802031e <_Bfree+0x10>
 8020310:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8020312:	684a      	ldr	r2, [r1, #4]
 8020314:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020318:	6008      	str	r0, [r1, #0]
 802031a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802031e:	4770      	bx	lr

08020320 <__multadd>:
 8020320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020324:	690e      	ldr	r6, [r1, #16]
 8020326:	4607      	mov	r7, r0
 8020328:	4698      	mov	r8, r3
 802032a:	460c      	mov	r4, r1
 802032c:	f101 0014 	add.w	r0, r1, #20
 8020330:	2300      	movs	r3, #0
 8020332:	6805      	ldr	r5, [r0, #0]
 8020334:	b2a9      	uxth	r1, r5
 8020336:	fb02 8101 	mla	r1, r2, r1, r8
 802033a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802033e:	0c2d      	lsrs	r5, r5, #16
 8020340:	fb02 c505 	mla	r5, r2, r5, ip
 8020344:	b289      	uxth	r1, r1
 8020346:	3301      	adds	r3, #1
 8020348:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 802034c:	429e      	cmp	r6, r3
 802034e:	f840 1b04 	str.w	r1, [r0], #4
 8020352:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8020356:	dcec      	bgt.n	8020332 <__multadd+0x12>
 8020358:	f1b8 0f00 	cmp.w	r8, #0
 802035c:	d022      	beq.n	80203a4 <__multadd+0x84>
 802035e:	68a3      	ldr	r3, [r4, #8]
 8020360:	42b3      	cmp	r3, r6
 8020362:	dc19      	bgt.n	8020398 <__multadd+0x78>
 8020364:	6861      	ldr	r1, [r4, #4]
 8020366:	4638      	mov	r0, r7
 8020368:	3101      	adds	r1, #1
 802036a:	f7ff ffab 	bl	80202c4 <_Balloc>
 802036e:	4605      	mov	r5, r0
 8020370:	b928      	cbnz	r0, 802037e <__multadd+0x5e>
 8020372:	4602      	mov	r2, r0
 8020374:	4b0d      	ldr	r3, [pc, #52]	; (80203ac <__multadd+0x8c>)
 8020376:	480e      	ldr	r0, [pc, #56]	; (80203b0 <__multadd+0x90>)
 8020378:	21b5      	movs	r1, #181	; 0xb5
 802037a:	f002 fa63 	bl	8022844 <__assert_func>
 802037e:	6922      	ldr	r2, [r4, #16]
 8020380:	3202      	adds	r2, #2
 8020382:	f104 010c 	add.w	r1, r4, #12
 8020386:	0092      	lsls	r2, r2, #2
 8020388:	300c      	adds	r0, #12
 802038a:	f7fb f801 	bl	801b390 <memcpy>
 802038e:	4621      	mov	r1, r4
 8020390:	4638      	mov	r0, r7
 8020392:	f7ff ffbc 	bl	802030e <_Bfree>
 8020396:	462c      	mov	r4, r5
 8020398:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802039c:	3601      	adds	r6, #1
 802039e:	f8c3 8014 	str.w	r8, [r3, #20]
 80203a2:	6126      	str	r6, [r4, #16]
 80203a4:	4620      	mov	r0, r4
 80203a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203aa:	bf00      	nop
 80203ac:	0802a1b5 	.word	0x0802a1b5
 80203b0:	0802a225 	.word	0x0802a225

080203b4 <__hi0bits>:
 80203b4:	0c03      	lsrs	r3, r0, #16
 80203b6:	041b      	lsls	r3, r3, #16
 80203b8:	b9d3      	cbnz	r3, 80203f0 <__hi0bits+0x3c>
 80203ba:	0400      	lsls	r0, r0, #16
 80203bc:	2310      	movs	r3, #16
 80203be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80203c2:	bf04      	itt	eq
 80203c4:	0200      	lsleq	r0, r0, #8
 80203c6:	3308      	addeq	r3, #8
 80203c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80203cc:	bf04      	itt	eq
 80203ce:	0100      	lsleq	r0, r0, #4
 80203d0:	3304      	addeq	r3, #4
 80203d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80203d6:	bf04      	itt	eq
 80203d8:	0080      	lsleq	r0, r0, #2
 80203da:	3302      	addeq	r3, #2
 80203dc:	2800      	cmp	r0, #0
 80203de:	db05      	blt.n	80203ec <__hi0bits+0x38>
 80203e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80203e4:	f103 0301 	add.w	r3, r3, #1
 80203e8:	bf08      	it	eq
 80203ea:	2320      	moveq	r3, #32
 80203ec:	4618      	mov	r0, r3
 80203ee:	4770      	bx	lr
 80203f0:	2300      	movs	r3, #0
 80203f2:	e7e4      	b.n	80203be <__hi0bits+0xa>

080203f4 <__lo0bits>:
 80203f4:	6803      	ldr	r3, [r0, #0]
 80203f6:	f013 0207 	ands.w	r2, r3, #7
 80203fa:	4601      	mov	r1, r0
 80203fc:	d00b      	beq.n	8020416 <__lo0bits+0x22>
 80203fe:	07da      	lsls	r2, r3, #31
 8020400:	d424      	bmi.n	802044c <__lo0bits+0x58>
 8020402:	0798      	lsls	r0, r3, #30
 8020404:	bf49      	itett	mi
 8020406:	085b      	lsrmi	r3, r3, #1
 8020408:	089b      	lsrpl	r3, r3, #2
 802040a:	2001      	movmi	r0, #1
 802040c:	600b      	strmi	r3, [r1, #0]
 802040e:	bf5c      	itt	pl
 8020410:	600b      	strpl	r3, [r1, #0]
 8020412:	2002      	movpl	r0, #2
 8020414:	4770      	bx	lr
 8020416:	b298      	uxth	r0, r3
 8020418:	b9b0      	cbnz	r0, 8020448 <__lo0bits+0x54>
 802041a:	0c1b      	lsrs	r3, r3, #16
 802041c:	2010      	movs	r0, #16
 802041e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020422:	bf04      	itt	eq
 8020424:	0a1b      	lsreq	r3, r3, #8
 8020426:	3008      	addeq	r0, #8
 8020428:	071a      	lsls	r2, r3, #28
 802042a:	bf04      	itt	eq
 802042c:	091b      	lsreq	r3, r3, #4
 802042e:	3004      	addeq	r0, #4
 8020430:	079a      	lsls	r2, r3, #30
 8020432:	bf04      	itt	eq
 8020434:	089b      	lsreq	r3, r3, #2
 8020436:	3002      	addeq	r0, #2
 8020438:	07da      	lsls	r2, r3, #31
 802043a:	d403      	bmi.n	8020444 <__lo0bits+0x50>
 802043c:	085b      	lsrs	r3, r3, #1
 802043e:	f100 0001 	add.w	r0, r0, #1
 8020442:	d005      	beq.n	8020450 <__lo0bits+0x5c>
 8020444:	600b      	str	r3, [r1, #0]
 8020446:	4770      	bx	lr
 8020448:	4610      	mov	r0, r2
 802044a:	e7e8      	b.n	802041e <__lo0bits+0x2a>
 802044c:	2000      	movs	r0, #0
 802044e:	4770      	bx	lr
 8020450:	2020      	movs	r0, #32
 8020452:	4770      	bx	lr

08020454 <__i2b>:
 8020454:	b510      	push	{r4, lr}
 8020456:	460c      	mov	r4, r1
 8020458:	2101      	movs	r1, #1
 802045a:	f7ff ff33 	bl	80202c4 <_Balloc>
 802045e:	4602      	mov	r2, r0
 8020460:	b928      	cbnz	r0, 802046e <__i2b+0x1a>
 8020462:	4b05      	ldr	r3, [pc, #20]	; (8020478 <__i2b+0x24>)
 8020464:	4805      	ldr	r0, [pc, #20]	; (802047c <__i2b+0x28>)
 8020466:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802046a:	f002 f9eb 	bl	8022844 <__assert_func>
 802046e:	2301      	movs	r3, #1
 8020470:	6144      	str	r4, [r0, #20]
 8020472:	6103      	str	r3, [r0, #16]
 8020474:	bd10      	pop	{r4, pc}
 8020476:	bf00      	nop
 8020478:	0802a1b5 	.word	0x0802a1b5
 802047c:	0802a225 	.word	0x0802a225

08020480 <__multiply>:
 8020480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020484:	4614      	mov	r4, r2
 8020486:	690a      	ldr	r2, [r1, #16]
 8020488:	6923      	ldr	r3, [r4, #16]
 802048a:	429a      	cmp	r2, r3
 802048c:	bfb8      	it	lt
 802048e:	460b      	movlt	r3, r1
 8020490:	460d      	mov	r5, r1
 8020492:	bfbc      	itt	lt
 8020494:	4625      	movlt	r5, r4
 8020496:	461c      	movlt	r4, r3
 8020498:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802049c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80204a0:	68ab      	ldr	r3, [r5, #8]
 80204a2:	6869      	ldr	r1, [r5, #4]
 80204a4:	eb0a 0709 	add.w	r7, sl, r9
 80204a8:	42bb      	cmp	r3, r7
 80204aa:	b085      	sub	sp, #20
 80204ac:	bfb8      	it	lt
 80204ae:	3101      	addlt	r1, #1
 80204b0:	f7ff ff08 	bl	80202c4 <_Balloc>
 80204b4:	b930      	cbnz	r0, 80204c4 <__multiply+0x44>
 80204b6:	4602      	mov	r2, r0
 80204b8:	4b42      	ldr	r3, [pc, #264]	; (80205c4 <__multiply+0x144>)
 80204ba:	4843      	ldr	r0, [pc, #268]	; (80205c8 <__multiply+0x148>)
 80204bc:	f240 115d 	movw	r1, #349	; 0x15d
 80204c0:	f002 f9c0 	bl	8022844 <__assert_func>
 80204c4:	f100 0614 	add.w	r6, r0, #20
 80204c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80204cc:	4633      	mov	r3, r6
 80204ce:	2200      	movs	r2, #0
 80204d0:	4543      	cmp	r3, r8
 80204d2:	d31e      	bcc.n	8020512 <__multiply+0x92>
 80204d4:	f105 0c14 	add.w	ip, r5, #20
 80204d8:	f104 0314 	add.w	r3, r4, #20
 80204dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80204e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80204e4:	9202      	str	r2, [sp, #8]
 80204e6:	ebac 0205 	sub.w	r2, ip, r5
 80204ea:	3a15      	subs	r2, #21
 80204ec:	f022 0203 	bic.w	r2, r2, #3
 80204f0:	3204      	adds	r2, #4
 80204f2:	f105 0115 	add.w	r1, r5, #21
 80204f6:	458c      	cmp	ip, r1
 80204f8:	bf38      	it	cc
 80204fa:	2204      	movcc	r2, #4
 80204fc:	9201      	str	r2, [sp, #4]
 80204fe:	9a02      	ldr	r2, [sp, #8]
 8020500:	9303      	str	r3, [sp, #12]
 8020502:	429a      	cmp	r2, r3
 8020504:	d808      	bhi.n	8020518 <__multiply+0x98>
 8020506:	2f00      	cmp	r7, #0
 8020508:	dc55      	bgt.n	80205b6 <__multiply+0x136>
 802050a:	6107      	str	r7, [r0, #16]
 802050c:	b005      	add	sp, #20
 802050e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020512:	f843 2b04 	str.w	r2, [r3], #4
 8020516:	e7db      	b.n	80204d0 <__multiply+0x50>
 8020518:	f8b3 a000 	ldrh.w	sl, [r3]
 802051c:	f1ba 0f00 	cmp.w	sl, #0
 8020520:	d020      	beq.n	8020564 <__multiply+0xe4>
 8020522:	f105 0e14 	add.w	lr, r5, #20
 8020526:	46b1      	mov	r9, r6
 8020528:	2200      	movs	r2, #0
 802052a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802052e:	f8d9 b000 	ldr.w	fp, [r9]
 8020532:	b2a1      	uxth	r1, r4
 8020534:	fa1f fb8b 	uxth.w	fp, fp
 8020538:	fb0a b101 	mla	r1, sl, r1, fp
 802053c:	4411      	add	r1, r2
 802053e:	f8d9 2000 	ldr.w	r2, [r9]
 8020542:	0c24      	lsrs	r4, r4, #16
 8020544:	0c12      	lsrs	r2, r2, #16
 8020546:	fb0a 2404 	mla	r4, sl, r4, r2
 802054a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802054e:	b289      	uxth	r1, r1
 8020550:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020554:	45f4      	cmp	ip, lr
 8020556:	f849 1b04 	str.w	r1, [r9], #4
 802055a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802055e:	d8e4      	bhi.n	802052a <__multiply+0xaa>
 8020560:	9901      	ldr	r1, [sp, #4]
 8020562:	5072      	str	r2, [r6, r1]
 8020564:	9a03      	ldr	r2, [sp, #12]
 8020566:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802056a:	3304      	adds	r3, #4
 802056c:	f1b9 0f00 	cmp.w	r9, #0
 8020570:	d01f      	beq.n	80205b2 <__multiply+0x132>
 8020572:	6834      	ldr	r4, [r6, #0]
 8020574:	f105 0114 	add.w	r1, r5, #20
 8020578:	46b6      	mov	lr, r6
 802057a:	f04f 0a00 	mov.w	sl, #0
 802057e:	880a      	ldrh	r2, [r1, #0]
 8020580:	f8be b002 	ldrh.w	fp, [lr, #2]
 8020584:	fb09 b202 	mla	r2, r9, r2, fp
 8020588:	4492      	add	sl, r2
 802058a:	b2a4      	uxth	r4, r4
 802058c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8020590:	f84e 4b04 	str.w	r4, [lr], #4
 8020594:	f851 4b04 	ldr.w	r4, [r1], #4
 8020598:	f8be 2000 	ldrh.w	r2, [lr]
 802059c:	0c24      	lsrs	r4, r4, #16
 802059e:	fb09 2404 	mla	r4, r9, r4, r2
 80205a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80205a6:	458c      	cmp	ip, r1
 80205a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80205ac:	d8e7      	bhi.n	802057e <__multiply+0xfe>
 80205ae:	9a01      	ldr	r2, [sp, #4]
 80205b0:	50b4      	str	r4, [r6, r2]
 80205b2:	3604      	adds	r6, #4
 80205b4:	e7a3      	b.n	80204fe <__multiply+0x7e>
 80205b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80205ba:	2b00      	cmp	r3, #0
 80205bc:	d1a5      	bne.n	802050a <__multiply+0x8a>
 80205be:	3f01      	subs	r7, #1
 80205c0:	e7a1      	b.n	8020506 <__multiply+0x86>
 80205c2:	bf00      	nop
 80205c4:	0802a1b5 	.word	0x0802a1b5
 80205c8:	0802a225 	.word	0x0802a225

080205cc <__pow5mult>:
 80205cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205d0:	4615      	mov	r5, r2
 80205d2:	f012 0203 	ands.w	r2, r2, #3
 80205d6:	4606      	mov	r6, r0
 80205d8:	460f      	mov	r7, r1
 80205da:	d007      	beq.n	80205ec <__pow5mult+0x20>
 80205dc:	4c1a      	ldr	r4, [pc, #104]	; (8020648 <__pow5mult+0x7c>)
 80205de:	3a01      	subs	r2, #1
 80205e0:	2300      	movs	r3, #0
 80205e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80205e6:	f7ff fe9b 	bl	8020320 <__multadd>
 80205ea:	4607      	mov	r7, r0
 80205ec:	10ad      	asrs	r5, r5, #2
 80205ee:	d027      	beq.n	8020640 <__pow5mult+0x74>
 80205f0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80205f2:	b944      	cbnz	r4, 8020606 <__pow5mult+0x3a>
 80205f4:	f240 2171 	movw	r1, #625	; 0x271
 80205f8:	4630      	mov	r0, r6
 80205fa:	f7ff ff2b 	bl	8020454 <__i2b>
 80205fe:	2300      	movs	r3, #0
 8020600:	64b0      	str	r0, [r6, #72]	; 0x48
 8020602:	4604      	mov	r4, r0
 8020604:	6003      	str	r3, [r0, #0]
 8020606:	f04f 0900 	mov.w	r9, #0
 802060a:	07eb      	lsls	r3, r5, #31
 802060c:	d50a      	bpl.n	8020624 <__pow5mult+0x58>
 802060e:	4639      	mov	r1, r7
 8020610:	4622      	mov	r2, r4
 8020612:	4630      	mov	r0, r6
 8020614:	f7ff ff34 	bl	8020480 <__multiply>
 8020618:	4639      	mov	r1, r7
 802061a:	4680      	mov	r8, r0
 802061c:	4630      	mov	r0, r6
 802061e:	f7ff fe76 	bl	802030e <_Bfree>
 8020622:	4647      	mov	r7, r8
 8020624:	106d      	asrs	r5, r5, #1
 8020626:	d00b      	beq.n	8020640 <__pow5mult+0x74>
 8020628:	6820      	ldr	r0, [r4, #0]
 802062a:	b938      	cbnz	r0, 802063c <__pow5mult+0x70>
 802062c:	4622      	mov	r2, r4
 802062e:	4621      	mov	r1, r4
 8020630:	4630      	mov	r0, r6
 8020632:	f7ff ff25 	bl	8020480 <__multiply>
 8020636:	6020      	str	r0, [r4, #0]
 8020638:	f8c0 9000 	str.w	r9, [r0]
 802063c:	4604      	mov	r4, r0
 802063e:	e7e4      	b.n	802060a <__pow5mult+0x3e>
 8020640:	4638      	mov	r0, r7
 8020642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020646:	bf00      	nop
 8020648:	0802a378 	.word	0x0802a378

0802064c <__lshift>:
 802064c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020650:	460c      	mov	r4, r1
 8020652:	6849      	ldr	r1, [r1, #4]
 8020654:	6923      	ldr	r3, [r4, #16]
 8020656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802065a:	68a3      	ldr	r3, [r4, #8]
 802065c:	4607      	mov	r7, r0
 802065e:	4691      	mov	r9, r2
 8020660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020664:	f108 0601 	add.w	r6, r8, #1
 8020668:	42b3      	cmp	r3, r6
 802066a:	db0b      	blt.n	8020684 <__lshift+0x38>
 802066c:	4638      	mov	r0, r7
 802066e:	f7ff fe29 	bl	80202c4 <_Balloc>
 8020672:	4605      	mov	r5, r0
 8020674:	b948      	cbnz	r0, 802068a <__lshift+0x3e>
 8020676:	4602      	mov	r2, r0
 8020678:	4b28      	ldr	r3, [pc, #160]	; (802071c <__lshift+0xd0>)
 802067a:	4829      	ldr	r0, [pc, #164]	; (8020720 <__lshift+0xd4>)
 802067c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020680:	f002 f8e0 	bl	8022844 <__assert_func>
 8020684:	3101      	adds	r1, #1
 8020686:	005b      	lsls	r3, r3, #1
 8020688:	e7ee      	b.n	8020668 <__lshift+0x1c>
 802068a:	2300      	movs	r3, #0
 802068c:	f100 0114 	add.w	r1, r0, #20
 8020690:	f100 0210 	add.w	r2, r0, #16
 8020694:	4618      	mov	r0, r3
 8020696:	4553      	cmp	r3, sl
 8020698:	db33      	blt.n	8020702 <__lshift+0xb6>
 802069a:	6920      	ldr	r0, [r4, #16]
 802069c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80206a0:	f104 0314 	add.w	r3, r4, #20
 80206a4:	f019 091f 	ands.w	r9, r9, #31
 80206a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80206ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80206b0:	d02b      	beq.n	802070a <__lshift+0xbe>
 80206b2:	f1c9 0e20 	rsb	lr, r9, #32
 80206b6:	468a      	mov	sl, r1
 80206b8:	2200      	movs	r2, #0
 80206ba:	6818      	ldr	r0, [r3, #0]
 80206bc:	fa00 f009 	lsl.w	r0, r0, r9
 80206c0:	4302      	orrs	r2, r0
 80206c2:	f84a 2b04 	str.w	r2, [sl], #4
 80206c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80206ca:	459c      	cmp	ip, r3
 80206cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80206d0:	d8f3      	bhi.n	80206ba <__lshift+0x6e>
 80206d2:	ebac 0304 	sub.w	r3, ip, r4
 80206d6:	3b15      	subs	r3, #21
 80206d8:	f023 0303 	bic.w	r3, r3, #3
 80206dc:	3304      	adds	r3, #4
 80206de:	f104 0015 	add.w	r0, r4, #21
 80206e2:	4584      	cmp	ip, r0
 80206e4:	bf38      	it	cc
 80206e6:	2304      	movcc	r3, #4
 80206e8:	50ca      	str	r2, [r1, r3]
 80206ea:	b10a      	cbz	r2, 80206f0 <__lshift+0xa4>
 80206ec:	f108 0602 	add.w	r6, r8, #2
 80206f0:	3e01      	subs	r6, #1
 80206f2:	4638      	mov	r0, r7
 80206f4:	612e      	str	r6, [r5, #16]
 80206f6:	4621      	mov	r1, r4
 80206f8:	f7ff fe09 	bl	802030e <_Bfree>
 80206fc:	4628      	mov	r0, r5
 80206fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020702:	f842 0f04 	str.w	r0, [r2, #4]!
 8020706:	3301      	adds	r3, #1
 8020708:	e7c5      	b.n	8020696 <__lshift+0x4a>
 802070a:	3904      	subs	r1, #4
 802070c:	f853 2b04 	ldr.w	r2, [r3], #4
 8020710:	f841 2f04 	str.w	r2, [r1, #4]!
 8020714:	459c      	cmp	ip, r3
 8020716:	d8f9      	bhi.n	802070c <__lshift+0xc0>
 8020718:	e7ea      	b.n	80206f0 <__lshift+0xa4>
 802071a:	bf00      	nop
 802071c:	0802a1b5 	.word	0x0802a1b5
 8020720:	0802a225 	.word	0x0802a225

08020724 <__mcmp>:
 8020724:	b530      	push	{r4, r5, lr}
 8020726:	6902      	ldr	r2, [r0, #16]
 8020728:	690c      	ldr	r4, [r1, #16]
 802072a:	1b12      	subs	r2, r2, r4
 802072c:	d10e      	bne.n	802074c <__mcmp+0x28>
 802072e:	f100 0314 	add.w	r3, r0, #20
 8020732:	3114      	adds	r1, #20
 8020734:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020738:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802073c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020740:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020744:	42a5      	cmp	r5, r4
 8020746:	d003      	beq.n	8020750 <__mcmp+0x2c>
 8020748:	d305      	bcc.n	8020756 <__mcmp+0x32>
 802074a:	2201      	movs	r2, #1
 802074c:	4610      	mov	r0, r2
 802074e:	bd30      	pop	{r4, r5, pc}
 8020750:	4283      	cmp	r3, r0
 8020752:	d3f3      	bcc.n	802073c <__mcmp+0x18>
 8020754:	e7fa      	b.n	802074c <__mcmp+0x28>
 8020756:	f04f 32ff 	mov.w	r2, #4294967295
 802075a:	e7f7      	b.n	802074c <__mcmp+0x28>

0802075c <__mdiff>:
 802075c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020760:	460c      	mov	r4, r1
 8020762:	4606      	mov	r6, r0
 8020764:	4611      	mov	r1, r2
 8020766:	4620      	mov	r0, r4
 8020768:	4617      	mov	r7, r2
 802076a:	f7ff ffdb 	bl	8020724 <__mcmp>
 802076e:	1e05      	subs	r5, r0, #0
 8020770:	d110      	bne.n	8020794 <__mdiff+0x38>
 8020772:	4629      	mov	r1, r5
 8020774:	4630      	mov	r0, r6
 8020776:	f7ff fda5 	bl	80202c4 <_Balloc>
 802077a:	b930      	cbnz	r0, 802078a <__mdiff+0x2e>
 802077c:	4b39      	ldr	r3, [pc, #228]	; (8020864 <__mdiff+0x108>)
 802077e:	4602      	mov	r2, r0
 8020780:	f240 2132 	movw	r1, #562	; 0x232
 8020784:	4838      	ldr	r0, [pc, #224]	; (8020868 <__mdiff+0x10c>)
 8020786:	f002 f85d 	bl	8022844 <__assert_func>
 802078a:	2301      	movs	r3, #1
 802078c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020794:	bfa4      	itt	ge
 8020796:	463b      	movge	r3, r7
 8020798:	4627      	movge	r7, r4
 802079a:	4630      	mov	r0, r6
 802079c:	6879      	ldr	r1, [r7, #4]
 802079e:	bfa6      	itte	ge
 80207a0:	461c      	movge	r4, r3
 80207a2:	2500      	movge	r5, #0
 80207a4:	2501      	movlt	r5, #1
 80207a6:	f7ff fd8d 	bl	80202c4 <_Balloc>
 80207aa:	b920      	cbnz	r0, 80207b6 <__mdiff+0x5a>
 80207ac:	4b2d      	ldr	r3, [pc, #180]	; (8020864 <__mdiff+0x108>)
 80207ae:	4602      	mov	r2, r0
 80207b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80207b4:	e7e6      	b.n	8020784 <__mdiff+0x28>
 80207b6:	693e      	ldr	r6, [r7, #16]
 80207b8:	60c5      	str	r5, [r0, #12]
 80207ba:	6925      	ldr	r5, [r4, #16]
 80207bc:	f107 0114 	add.w	r1, r7, #20
 80207c0:	f104 0914 	add.w	r9, r4, #20
 80207c4:	f100 0e14 	add.w	lr, r0, #20
 80207c8:	f107 0210 	add.w	r2, r7, #16
 80207cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80207d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80207d4:	46f2      	mov	sl, lr
 80207d6:	2700      	movs	r7, #0
 80207d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80207dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80207e0:	fa1f f883 	uxth.w	r8, r3
 80207e4:	fa17 f78b 	uxtah	r7, r7, fp
 80207e8:	0c1b      	lsrs	r3, r3, #16
 80207ea:	eba7 0808 	sub.w	r8, r7, r8
 80207ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80207f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80207f6:	fa1f f888 	uxth.w	r8, r8
 80207fa:	141f      	asrs	r7, r3, #16
 80207fc:	454d      	cmp	r5, r9
 80207fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020802:	f84a 3b04 	str.w	r3, [sl], #4
 8020806:	d8e7      	bhi.n	80207d8 <__mdiff+0x7c>
 8020808:	1b2b      	subs	r3, r5, r4
 802080a:	3b15      	subs	r3, #21
 802080c:	f023 0303 	bic.w	r3, r3, #3
 8020810:	3304      	adds	r3, #4
 8020812:	3415      	adds	r4, #21
 8020814:	42a5      	cmp	r5, r4
 8020816:	bf38      	it	cc
 8020818:	2304      	movcc	r3, #4
 802081a:	4419      	add	r1, r3
 802081c:	4473      	add	r3, lr
 802081e:	469e      	mov	lr, r3
 8020820:	460d      	mov	r5, r1
 8020822:	4565      	cmp	r5, ip
 8020824:	d30e      	bcc.n	8020844 <__mdiff+0xe8>
 8020826:	f10c 0203 	add.w	r2, ip, #3
 802082a:	1a52      	subs	r2, r2, r1
 802082c:	f022 0203 	bic.w	r2, r2, #3
 8020830:	3903      	subs	r1, #3
 8020832:	458c      	cmp	ip, r1
 8020834:	bf38      	it	cc
 8020836:	2200      	movcc	r2, #0
 8020838:	441a      	add	r2, r3
 802083a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802083e:	b17b      	cbz	r3, 8020860 <__mdiff+0x104>
 8020840:	6106      	str	r6, [r0, #16]
 8020842:	e7a5      	b.n	8020790 <__mdiff+0x34>
 8020844:	f855 8b04 	ldr.w	r8, [r5], #4
 8020848:	fa17 f488 	uxtah	r4, r7, r8
 802084c:	1422      	asrs	r2, r4, #16
 802084e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020852:	b2a4      	uxth	r4, r4
 8020854:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020858:	f84e 4b04 	str.w	r4, [lr], #4
 802085c:	1417      	asrs	r7, r2, #16
 802085e:	e7e0      	b.n	8020822 <__mdiff+0xc6>
 8020860:	3e01      	subs	r6, #1
 8020862:	e7ea      	b.n	802083a <__mdiff+0xde>
 8020864:	0802a1b5 	.word	0x0802a1b5
 8020868:	0802a225 	.word	0x0802a225

0802086c <__d2b>:
 802086c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020870:	4689      	mov	r9, r1
 8020872:	2101      	movs	r1, #1
 8020874:	ec57 6b10 	vmov	r6, r7, d0
 8020878:	4690      	mov	r8, r2
 802087a:	f7ff fd23 	bl	80202c4 <_Balloc>
 802087e:	4604      	mov	r4, r0
 8020880:	b930      	cbnz	r0, 8020890 <__d2b+0x24>
 8020882:	4602      	mov	r2, r0
 8020884:	4b25      	ldr	r3, [pc, #148]	; (802091c <__d2b+0xb0>)
 8020886:	4826      	ldr	r0, [pc, #152]	; (8020920 <__d2b+0xb4>)
 8020888:	f240 310a 	movw	r1, #778	; 0x30a
 802088c:	f001 ffda 	bl	8022844 <__assert_func>
 8020890:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8020894:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8020898:	bb35      	cbnz	r5, 80208e8 <__d2b+0x7c>
 802089a:	2e00      	cmp	r6, #0
 802089c:	9301      	str	r3, [sp, #4]
 802089e:	d028      	beq.n	80208f2 <__d2b+0x86>
 80208a0:	4668      	mov	r0, sp
 80208a2:	9600      	str	r6, [sp, #0]
 80208a4:	f7ff fda6 	bl	80203f4 <__lo0bits>
 80208a8:	9900      	ldr	r1, [sp, #0]
 80208aa:	b300      	cbz	r0, 80208ee <__d2b+0x82>
 80208ac:	9a01      	ldr	r2, [sp, #4]
 80208ae:	f1c0 0320 	rsb	r3, r0, #32
 80208b2:	fa02 f303 	lsl.w	r3, r2, r3
 80208b6:	430b      	orrs	r3, r1
 80208b8:	40c2      	lsrs	r2, r0
 80208ba:	6163      	str	r3, [r4, #20]
 80208bc:	9201      	str	r2, [sp, #4]
 80208be:	9b01      	ldr	r3, [sp, #4]
 80208c0:	61a3      	str	r3, [r4, #24]
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	bf14      	ite	ne
 80208c6:	2202      	movne	r2, #2
 80208c8:	2201      	moveq	r2, #1
 80208ca:	6122      	str	r2, [r4, #16]
 80208cc:	b1d5      	cbz	r5, 8020904 <__d2b+0x98>
 80208ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80208d2:	4405      	add	r5, r0
 80208d4:	f8c9 5000 	str.w	r5, [r9]
 80208d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80208dc:	f8c8 0000 	str.w	r0, [r8]
 80208e0:	4620      	mov	r0, r4
 80208e2:	b003      	add	sp, #12
 80208e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80208ec:	e7d5      	b.n	802089a <__d2b+0x2e>
 80208ee:	6161      	str	r1, [r4, #20]
 80208f0:	e7e5      	b.n	80208be <__d2b+0x52>
 80208f2:	a801      	add	r0, sp, #4
 80208f4:	f7ff fd7e 	bl	80203f4 <__lo0bits>
 80208f8:	9b01      	ldr	r3, [sp, #4]
 80208fa:	6163      	str	r3, [r4, #20]
 80208fc:	2201      	movs	r2, #1
 80208fe:	6122      	str	r2, [r4, #16]
 8020900:	3020      	adds	r0, #32
 8020902:	e7e3      	b.n	80208cc <__d2b+0x60>
 8020904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020908:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802090c:	f8c9 0000 	str.w	r0, [r9]
 8020910:	6918      	ldr	r0, [r3, #16]
 8020912:	f7ff fd4f 	bl	80203b4 <__hi0bits>
 8020916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802091a:	e7df      	b.n	80208dc <__d2b+0x70>
 802091c:	0802a1b5 	.word	0x0802a1b5
 8020920:	0802a225 	.word	0x0802a225

08020924 <frexp>:
 8020924:	b570      	push	{r4, r5, r6, lr}
 8020926:	2100      	movs	r1, #0
 8020928:	ec55 4b10 	vmov	r4, r5, d0
 802092c:	6001      	str	r1, [r0, #0]
 802092e:	4916      	ldr	r1, [pc, #88]	; (8020988 <frexp+0x64>)
 8020930:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8020934:	428a      	cmp	r2, r1
 8020936:	4606      	mov	r6, r0
 8020938:	462b      	mov	r3, r5
 802093a:	dc22      	bgt.n	8020982 <frexp+0x5e>
 802093c:	ee10 1a10 	vmov	r1, s0
 8020940:	4311      	orrs	r1, r2
 8020942:	d01e      	beq.n	8020982 <frexp+0x5e>
 8020944:	4911      	ldr	r1, [pc, #68]	; (802098c <frexp+0x68>)
 8020946:	4029      	ands	r1, r5
 8020948:	b969      	cbnz	r1, 8020966 <frexp+0x42>
 802094a:	4b11      	ldr	r3, [pc, #68]	; (8020990 <frexp+0x6c>)
 802094c:	2200      	movs	r2, #0
 802094e:	ee10 0a10 	vmov	r0, s0
 8020952:	4629      	mov	r1, r5
 8020954:	f7df fe80 	bl	8000658 <__aeabi_dmul>
 8020958:	460b      	mov	r3, r1
 802095a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802095e:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8020962:	4604      	mov	r4, r0
 8020964:	6031      	str	r1, [r6, #0]
 8020966:	6831      	ldr	r1, [r6, #0]
 8020968:	1512      	asrs	r2, r2, #20
 802096a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802096e:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8020972:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020976:	440a      	add	r2, r1
 8020978:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 802097c:	6032      	str	r2, [r6, #0]
 802097e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8020982:	ec45 4b10 	vmov	d0, r4, r5
 8020986:	bd70      	pop	{r4, r5, r6, pc}
 8020988:	7fefffff 	.word	0x7fefffff
 802098c:	7ff00000 	.word	0x7ff00000
 8020990:	43500000 	.word	0x43500000

08020994 <_sbrk_r>:
 8020994:	b538      	push	{r3, r4, r5, lr}
 8020996:	4d06      	ldr	r5, [pc, #24]	; (80209b0 <_sbrk_r+0x1c>)
 8020998:	2300      	movs	r3, #0
 802099a:	4604      	mov	r4, r0
 802099c:	4608      	mov	r0, r1
 802099e:	602b      	str	r3, [r5, #0]
 80209a0:	f7e3 fb10 	bl	8003fc4 <_sbrk>
 80209a4:	1c43      	adds	r3, r0, #1
 80209a6:	d102      	bne.n	80209ae <_sbrk_r+0x1a>
 80209a8:	682b      	ldr	r3, [r5, #0]
 80209aa:	b103      	cbz	r3, 80209ae <_sbrk_r+0x1a>
 80209ac:	6023      	str	r3, [r4, #0]
 80209ae:	bd38      	pop	{r3, r4, r5, pc}
 80209b0:	2000bdec 	.word	0x2000bdec

080209b4 <siscanf>:
 80209b4:	b40e      	push	{r1, r2, r3}
 80209b6:	b510      	push	{r4, lr}
 80209b8:	b09f      	sub	sp, #124	; 0x7c
 80209ba:	ac21      	add	r4, sp, #132	; 0x84
 80209bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80209c0:	f854 2b04 	ldr.w	r2, [r4], #4
 80209c4:	9201      	str	r2, [sp, #4]
 80209c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80209ca:	9004      	str	r0, [sp, #16]
 80209cc:	9008      	str	r0, [sp, #32]
 80209ce:	f7df fc29 	bl	8000224 <strlen>
 80209d2:	4b0c      	ldr	r3, [pc, #48]	; (8020a04 <siscanf+0x50>)
 80209d4:	9005      	str	r0, [sp, #20]
 80209d6:	9009      	str	r0, [sp, #36]	; 0x24
 80209d8:	930c      	str	r3, [sp, #48]	; 0x30
 80209da:	480b      	ldr	r0, [pc, #44]	; (8020a08 <siscanf+0x54>)
 80209dc:	9a01      	ldr	r2, [sp, #4]
 80209de:	6800      	ldr	r0, [r0, #0]
 80209e0:	9403      	str	r4, [sp, #12]
 80209e2:	2300      	movs	r3, #0
 80209e4:	9310      	str	r3, [sp, #64]	; 0x40
 80209e6:	9315      	str	r3, [sp, #84]	; 0x54
 80209e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80209ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80209f0:	a904      	add	r1, sp, #16
 80209f2:	4623      	mov	r3, r4
 80209f4:	f000 f9ee 	bl	8020dd4 <__ssvfiscanf_r>
 80209f8:	b01f      	add	sp, #124	; 0x7c
 80209fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80209fe:	b003      	add	sp, #12
 8020a00:	4770      	bx	lr
 8020a02:	bf00      	nop
 8020a04:	08020a2f 	.word	0x08020a2f
 8020a08:	20000038 	.word	0x20000038

08020a0c <__sread>:
 8020a0c:	b510      	push	{r4, lr}
 8020a0e:	460c      	mov	r4, r1
 8020a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a14:	f002 fa12 	bl	8022e3c <_read_r>
 8020a18:	2800      	cmp	r0, #0
 8020a1a:	bfab      	itete	ge
 8020a1c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8020a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8020a20:	181b      	addge	r3, r3, r0
 8020a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020a26:	bfac      	ite	ge
 8020a28:	6523      	strge	r3, [r4, #80]	; 0x50
 8020a2a:	81a3      	strhlt	r3, [r4, #12]
 8020a2c:	bd10      	pop	{r4, pc}

08020a2e <__seofread>:
 8020a2e:	2000      	movs	r0, #0
 8020a30:	4770      	bx	lr

08020a32 <__swrite>:
 8020a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a36:	461f      	mov	r7, r3
 8020a38:	898b      	ldrh	r3, [r1, #12]
 8020a3a:	05db      	lsls	r3, r3, #23
 8020a3c:	4605      	mov	r5, r0
 8020a3e:	460c      	mov	r4, r1
 8020a40:	4616      	mov	r6, r2
 8020a42:	d505      	bpl.n	8020a50 <__swrite+0x1e>
 8020a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a48:	2302      	movs	r3, #2
 8020a4a:	2200      	movs	r2, #0
 8020a4c:	f002 f9b8 	bl	8022dc0 <_lseek_r>
 8020a50:	89a3      	ldrh	r3, [r4, #12]
 8020a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020a5a:	81a3      	strh	r3, [r4, #12]
 8020a5c:	4632      	mov	r2, r6
 8020a5e:	463b      	mov	r3, r7
 8020a60:	4628      	mov	r0, r5
 8020a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020a66:	f001 be9b 	b.w	80227a0 <_write_r>

08020a6a <__sseek>:
 8020a6a:	b510      	push	{r4, lr}
 8020a6c:	460c      	mov	r4, r1
 8020a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a72:	f002 f9a5 	bl	8022dc0 <_lseek_r>
 8020a76:	1c43      	adds	r3, r0, #1
 8020a78:	89a3      	ldrh	r3, [r4, #12]
 8020a7a:	bf15      	itete	ne
 8020a7c:	6520      	strne	r0, [r4, #80]	; 0x50
 8020a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020a86:	81a3      	strheq	r3, [r4, #12]
 8020a88:	bf18      	it	ne
 8020a8a:	81a3      	strhne	r3, [r4, #12]
 8020a8c:	bd10      	pop	{r4, pc}

08020a8e <__sclose>:
 8020a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a92:	f001 bf23 	b.w	80228dc <_close_r>

08020a96 <strcpy>:
 8020a96:	4603      	mov	r3, r0
 8020a98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020a9c:	f803 2b01 	strb.w	r2, [r3], #1
 8020aa0:	2a00      	cmp	r2, #0
 8020aa2:	d1f9      	bne.n	8020a98 <strcpy+0x2>
 8020aa4:	4770      	bx	lr
	...

08020aa8 <_strtoul_l.isra.0>:
 8020aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020aac:	4e3b      	ldr	r6, [pc, #236]	; (8020b9c <_strtoul_l.isra.0+0xf4>)
 8020aae:	4686      	mov	lr, r0
 8020ab0:	468c      	mov	ip, r1
 8020ab2:	4660      	mov	r0, ip
 8020ab4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020ab8:	5da5      	ldrb	r5, [r4, r6]
 8020aba:	f015 0508 	ands.w	r5, r5, #8
 8020abe:	d1f8      	bne.n	8020ab2 <_strtoul_l.isra.0+0xa>
 8020ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8020ac2:	d134      	bne.n	8020b2e <_strtoul_l.isra.0+0x86>
 8020ac4:	f89c 4000 	ldrb.w	r4, [ip]
 8020ac8:	f04f 0801 	mov.w	r8, #1
 8020acc:	f100 0c02 	add.w	ip, r0, #2
 8020ad0:	2b00      	cmp	r3, #0
 8020ad2:	d05e      	beq.n	8020b92 <_strtoul_l.isra.0+0xea>
 8020ad4:	2b10      	cmp	r3, #16
 8020ad6:	d10c      	bne.n	8020af2 <_strtoul_l.isra.0+0x4a>
 8020ad8:	2c30      	cmp	r4, #48	; 0x30
 8020ada:	d10a      	bne.n	8020af2 <_strtoul_l.isra.0+0x4a>
 8020adc:	f89c 0000 	ldrb.w	r0, [ip]
 8020ae0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8020ae4:	2858      	cmp	r0, #88	; 0x58
 8020ae6:	d14f      	bne.n	8020b88 <_strtoul_l.isra.0+0xe0>
 8020ae8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8020aec:	2310      	movs	r3, #16
 8020aee:	f10c 0c02 	add.w	ip, ip, #2
 8020af2:	f04f 37ff 	mov.w	r7, #4294967295
 8020af6:	2500      	movs	r5, #0
 8020af8:	fbb7 f7f3 	udiv	r7, r7, r3
 8020afc:	fb03 f907 	mul.w	r9, r3, r7
 8020b00:	ea6f 0909 	mvn.w	r9, r9
 8020b04:	4628      	mov	r0, r5
 8020b06:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8020b0a:	2e09      	cmp	r6, #9
 8020b0c:	d818      	bhi.n	8020b40 <_strtoul_l.isra.0+0x98>
 8020b0e:	4634      	mov	r4, r6
 8020b10:	42a3      	cmp	r3, r4
 8020b12:	dd24      	ble.n	8020b5e <_strtoul_l.isra.0+0xb6>
 8020b14:	2d00      	cmp	r5, #0
 8020b16:	db1f      	blt.n	8020b58 <_strtoul_l.isra.0+0xb0>
 8020b18:	4287      	cmp	r7, r0
 8020b1a:	d31d      	bcc.n	8020b58 <_strtoul_l.isra.0+0xb0>
 8020b1c:	d101      	bne.n	8020b22 <_strtoul_l.isra.0+0x7a>
 8020b1e:	45a1      	cmp	r9, r4
 8020b20:	db1a      	blt.n	8020b58 <_strtoul_l.isra.0+0xb0>
 8020b22:	fb00 4003 	mla	r0, r0, r3, r4
 8020b26:	2501      	movs	r5, #1
 8020b28:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020b2c:	e7eb      	b.n	8020b06 <_strtoul_l.isra.0+0x5e>
 8020b2e:	2c2b      	cmp	r4, #43	; 0x2b
 8020b30:	bf08      	it	eq
 8020b32:	f89c 4000 	ldrbeq.w	r4, [ip]
 8020b36:	46a8      	mov	r8, r5
 8020b38:	bf08      	it	eq
 8020b3a:	f100 0c02 	addeq.w	ip, r0, #2
 8020b3e:	e7c7      	b.n	8020ad0 <_strtoul_l.isra.0+0x28>
 8020b40:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020b44:	2e19      	cmp	r6, #25
 8020b46:	d801      	bhi.n	8020b4c <_strtoul_l.isra.0+0xa4>
 8020b48:	3c37      	subs	r4, #55	; 0x37
 8020b4a:	e7e1      	b.n	8020b10 <_strtoul_l.isra.0+0x68>
 8020b4c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020b50:	2e19      	cmp	r6, #25
 8020b52:	d804      	bhi.n	8020b5e <_strtoul_l.isra.0+0xb6>
 8020b54:	3c57      	subs	r4, #87	; 0x57
 8020b56:	e7db      	b.n	8020b10 <_strtoul_l.isra.0+0x68>
 8020b58:	f04f 35ff 	mov.w	r5, #4294967295
 8020b5c:	e7e4      	b.n	8020b28 <_strtoul_l.isra.0+0x80>
 8020b5e:	2d00      	cmp	r5, #0
 8020b60:	da07      	bge.n	8020b72 <_strtoul_l.isra.0+0xca>
 8020b62:	2322      	movs	r3, #34	; 0x22
 8020b64:	f8ce 3000 	str.w	r3, [lr]
 8020b68:	f04f 30ff 	mov.w	r0, #4294967295
 8020b6c:	b942      	cbnz	r2, 8020b80 <_strtoul_l.isra.0+0xd8>
 8020b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b72:	f1b8 0f00 	cmp.w	r8, #0
 8020b76:	d000      	beq.n	8020b7a <_strtoul_l.isra.0+0xd2>
 8020b78:	4240      	negs	r0, r0
 8020b7a:	2a00      	cmp	r2, #0
 8020b7c:	d0f7      	beq.n	8020b6e <_strtoul_l.isra.0+0xc6>
 8020b7e:	b10d      	cbz	r5, 8020b84 <_strtoul_l.isra.0+0xdc>
 8020b80:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020b84:	6011      	str	r1, [r2, #0]
 8020b86:	e7f2      	b.n	8020b6e <_strtoul_l.isra.0+0xc6>
 8020b88:	2430      	movs	r4, #48	; 0x30
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d1b1      	bne.n	8020af2 <_strtoul_l.isra.0+0x4a>
 8020b8e:	2308      	movs	r3, #8
 8020b90:	e7af      	b.n	8020af2 <_strtoul_l.isra.0+0x4a>
 8020b92:	2c30      	cmp	r4, #48	; 0x30
 8020b94:	d0a2      	beq.n	8020adc <_strtoul_l.isra.0+0x34>
 8020b96:	230a      	movs	r3, #10
 8020b98:	e7ab      	b.n	8020af2 <_strtoul_l.isra.0+0x4a>
 8020b9a:	bf00      	nop
 8020b9c:	08029f31 	.word	0x08029f31

08020ba0 <_strtoul_r>:
 8020ba0:	f7ff bf82 	b.w	8020aa8 <_strtoul_l.isra.0>

08020ba4 <strtoul>:
 8020ba4:	4613      	mov	r3, r2
 8020ba6:	460a      	mov	r2, r1
 8020ba8:	4601      	mov	r1, r0
 8020baa:	4802      	ldr	r0, [pc, #8]	; (8020bb4 <strtoul+0x10>)
 8020bac:	6800      	ldr	r0, [r0, #0]
 8020bae:	f7ff bf7b 	b.w	8020aa8 <_strtoul_l.isra.0>
 8020bb2:	bf00      	nop
 8020bb4:	20000038 	.word	0x20000038

08020bb8 <__ssprint_r>:
 8020bb8:	6893      	ldr	r3, [r2, #8]
 8020bba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bbe:	4680      	mov	r8, r0
 8020bc0:	460c      	mov	r4, r1
 8020bc2:	4617      	mov	r7, r2
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d061      	beq.n	8020c8c <__ssprint_r+0xd4>
 8020bc8:	2300      	movs	r3, #0
 8020bca:	f8d2 a000 	ldr.w	sl, [r2]
 8020bce:	9301      	str	r3, [sp, #4]
 8020bd0:	469b      	mov	fp, r3
 8020bd2:	f1bb 0f00 	cmp.w	fp, #0
 8020bd6:	d02b      	beq.n	8020c30 <__ssprint_r+0x78>
 8020bd8:	68a6      	ldr	r6, [r4, #8]
 8020bda:	45b3      	cmp	fp, r6
 8020bdc:	d342      	bcc.n	8020c64 <__ssprint_r+0xac>
 8020bde:	89a2      	ldrh	r2, [r4, #12]
 8020be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020be4:	d03e      	beq.n	8020c64 <__ssprint_r+0xac>
 8020be6:	6825      	ldr	r5, [r4, #0]
 8020be8:	6921      	ldr	r1, [r4, #16]
 8020bea:	eba5 0901 	sub.w	r9, r5, r1
 8020bee:	6965      	ldr	r5, [r4, #20]
 8020bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020bf8:	f109 0001 	add.w	r0, r9, #1
 8020bfc:	106d      	asrs	r5, r5, #1
 8020bfe:	4458      	add	r0, fp
 8020c00:	4285      	cmp	r5, r0
 8020c02:	bf38      	it	cc
 8020c04:	4605      	movcc	r5, r0
 8020c06:	0553      	lsls	r3, r2, #21
 8020c08:	d545      	bpl.n	8020c96 <__ssprint_r+0xde>
 8020c0a:	4629      	mov	r1, r5
 8020c0c:	4640      	mov	r0, r8
 8020c0e:	f7ff f90b 	bl	801fe28 <_malloc_r>
 8020c12:	4606      	mov	r6, r0
 8020c14:	b9a0      	cbnz	r0, 8020c40 <__ssprint_r+0x88>
 8020c16:	230c      	movs	r3, #12
 8020c18:	f8c8 3000 	str.w	r3, [r8]
 8020c1c:	89a3      	ldrh	r3, [r4, #12]
 8020c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020c22:	81a3      	strh	r3, [r4, #12]
 8020c24:	2300      	movs	r3, #0
 8020c26:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8020c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8020c2e:	e02f      	b.n	8020c90 <__ssprint_r+0xd8>
 8020c30:	f8da 3000 	ldr.w	r3, [sl]
 8020c34:	f8da b004 	ldr.w	fp, [sl, #4]
 8020c38:	9301      	str	r3, [sp, #4]
 8020c3a:	f10a 0a08 	add.w	sl, sl, #8
 8020c3e:	e7c8      	b.n	8020bd2 <__ssprint_r+0x1a>
 8020c40:	464a      	mov	r2, r9
 8020c42:	6921      	ldr	r1, [r4, #16]
 8020c44:	f7fa fba4 	bl	801b390 <memcpy>
 8020c48:	89a2      	ldrh	r2, [r4, #12]
 8020c4a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8020c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8020c52:	81a2      	strh	r2, [r4, #12]
 8020c54:	6126      	str	r6, [r4, #16]
 8020c56:	6165      	str	r5, [r4, #20]
 8020c58:	444e      	add	r6, r9
 8020c5a:	eba5 0509 	sub.w	r5, r5, r9
 8020c5e:	6026      	str	r6, [r4, #0]
 8020c60:	60a5      	str	r5, [r4, #8]
 8020c62:	465e      	mov	r6, fp
 8020c64:	455e      	cmp	r6, fp
 8020c66:	bf28      	it	cs
 8020c68:	465e      	movcs	r6, fp
 8020c6a:	4632      	mov	r2, r6
 8020c6c:	9901      	ldr	r1, [sp, #4]
 8020c6e:	6820      	ldr	r0, [r4, #0]
 8020c70:	f7fa fb9c 	bl	801b3ac <memmove>
 8020c74:	68a2      	ldr	r2, [r4, #8]
 8020c76:	1b92      	subs	r2, r2, r6
 8020c78:	60a2      	str	r2, [r4, #8]
 8020c7a:	6822      	ldr	r2, [r4, #0]
 8020c7c:	4432      	add	r2, r6
 8020c7e:	6022      	str	r2, [r4, #0]
 8020c80:	68ba      	ldr	r2, [r7, #8]
 8020c82:	eba2 030b 	sub.w	r3, r2, fp
 8020c86:	60bb      	str	r3, [r7, #8]
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d1d1      	bne.n	8020c30 <__ssprint_r+0x78>
 8020c8c:	2000      	movs	r0, #0
 8020c8e:	6078      	str	r0, [r7, #4]
 8020c90:	b003      	add	sp, #12
 8020c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c96:	462a      	mov	r2, r5
 8020c98:	4640      	mov	r0, r8
 8020c9a:	f002 f8e9 	bl	8022e70 <_realloc_r>
 8020c9e:	4606      	mov	r6, r0
 8020ca0:	2800      	cmp	r0, #0
 8020ca2:	d1d7      	bne.n	8020c54 <__ssprint_r+0x9c>
 8020ca4:	6921      	ldr	r1, [r4, #16]
 8020ca6:	4640      	mov	r0, r8
 8020ca8:	f7fe fe62 	bl	801f970 <_free_r>
 8020cac:	e7b3      	b.n	8020c16 <__ssprint_r+0x5e>

08020cae <_sungetc_r>:
 8020cae:	b538      	push	{r3, r4, r5, lr}
 8020cb0:	1c4b      	adds	r3, r1, #1
 8020cb2:	4614      	mov	r4, r2
 8020cb4:	d103      	bne.n	8020cbe <_sungetc_r+0x10>
 8020cb6:	f04f 35ff 	mov.w	r5, #4294967295
 8020cba:	4628      	mov	r0, r5
 8020cbc:	bd38      	pop	{r3, r4, r5, pc}
 8020cbe:	8993      	ldrh	r3, [r2, #12]
 8020cc0:	f023 0320 	bic.w	r3, r3, #32
 8020cc4:	8193      	strh	r3, [r2, #12]
 8020cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020cc8:	6852      	ldr	r2, [r2, #4]
 8020cca:	b2cd      	uxtb	r5, r1
 8020ccc:	b18b      	cbz	r3, 8020cf2 <_sungetc_r+0x44>
 8020cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	dd08      	ble.n	8020ce6 <_sungetc_r+0x38>
 8020cd4:	6823      	ldr	r3, [r4, #0]
 8020cd6:	1e5a      	subs	r2, r3, #1
 8020cd8:	6022      	str	r2, [r4, #0]
 8020cda:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020cde:	6863      	ldr	r3, [r4, #4]
 8020ce0:	3301      	adds	r3, #1
 8020ce2:	6063      	str	r3, [r4, #4]
 8020ce4:	e7e9      	b.n	8020cba <_sungetc_r+0xc>
 8020ce6:	4621      	mov	r1, r4
 8020ce8:	f001 f825 	bl	8021d36 <__submore>
 8020cec:	2800      	cmp	r0, #0
 8020cee:	d0f1      	beq.n	8020cd4 <_sungetc_r+0x26>
 8020cf0:	e7e1      	b.n	8020cb6 <_sungetc_r+0x8>
 8020cf2:	6921      	ldr	r1, [r4, #16]
 8020cf4:	6823      	ldr	r3, [r4, #0]
 8020cf6:	b151      	cbz	r1, 8020d0e <_sungetc_r+0x60>
 8020cf8:	4299      	cmp	r1, r3
 8020cfa:	d208      	bcs.n	8020d0e <_sungetc_r+0x60>
 8020cfc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020d00:	42a9      	cmp	r1, r5
 8020d02:	d104      	bne.n	8020d0e <_sungetc_r+0x60>
 8020d04:	3b01      	subs	r3, #1
 8020d06:	3201      	adds	r2, #1
 8020d08:	6023      	str	r3, [r4, #0]
 8020d0a:	6062      	str	r2, [r4, #4]
 8020d0c:	e7d5      	b.n	8020cba <_sungetc_r+0xc>
 8020d0e:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8020d12:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020d16:	6323      	str	r3, [r4, #48]	; 0x30
 8020d18:	2303      	movs	r3, #3
 8020d1a:	6363      	str	r3, [r4, #52]	; 0x34
 8020d1c:	4623      	mov	r3, r4
 8020d1e:	f803 5f42 	strb.w	r5, [r3, #66]!
 8020d22:	6023      	str	r3, [r4, #0]
 8020d24:	2301      	movs	r3, #1
 8020d26:	e7dc      	b.n	8020ce2 <_sungetc_r+0x34>

08020d28 <__ssrefill_r>:
 8020d28:	b510      	push	{r4, lr}
 8020d2a:	460c      	mov	r4, r1
 8020d2c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8020d2e:	b169      	cbz	r1, 8020d4c <__ssrefill_r+0x24>
 8020d30:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8020d34:	4299      	cmp	r1, r3
 8020d36:	d001      	beq.n	8020d3c <__ssrefill_r+0x14>
 8020d38:	f7fe fe1a 	bl	801f970 <_free_r>
 8020d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020d3e:	6063      	str	r3, [r4, #4]
 8020d40:	2000      	movs	r0, #0
 8020d42:	6320      	str	r0, [r4, #48]	; 0x30
 8020d44:	b113      	cbz	r3, 8020d4c <__ssrefill_r+0x24>
 8020d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020d48:	6023      	str	r3, [r4, #0]
 8020d4a:	bd10      	pop	{r4, pc}
 8020d4c:	6923      	ldr	r3, [r4, #16]
 8020d4e:	6023      	str	r3, [r4, #0]
 8020d50:	2300      	movs	r3, #0
 8020d52:	6063      	str	r3, [r4, #4]
 8020d54:	89a3      	ldrh	r3, [r4, #12]
 8020d56:	f043 0320 	orr.w	r3, r3, #32
 8020d5a:	81a3      	strh	r3, [r4, #12]
 8020d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8020d60:	e7f3      	b.n	8020d4a <__ssrefill_r+0x22>

08020d62 <_sfread_r>:
 8020d62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d66:	461f      	mov	r7, r3
 8020d68:	4613      	mov	r3, r2
 8020d6a:	437b      	muls	r3, r7
 8020d6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020d6e:	4682      	mov	sl, r0
 8020d70:	4688      	mov	r8, r1
 8020d72:	4691      	mov	r9, r2
 8020d74:	d027      	beq.n	8020dc6 <_sfread_r+0x64>
 8020d76:	461e      	mov	r6, r3
 8020d78:	e9d4 1500 	ldrd	r1, r5, [r4]
 8020d7c:	42b5      	cmp	r5, r6
 8020d7e:	d30b      	bcc.n	8020d98 <_sfread_r+0x36>
 8020d80:	4632      	mov	r2, r6
 8020d82:	4640      	mov	r0, r8
 8020d84:	f7fa fb04 	bl	801b390 <memcpy>
 8020d88:	6862      	ldr	r2, [r4, #4]
 8020d8a:	1b92      	subs	r2, r2, r6
 8020d8c:	6062      	str	r2, [r4, #4]
 8020d8e:	6822      	ldr	r2, [r4, #0]
 8020d90:	4432      	add	r2, r6
 8020d92:	6022      	str	r2, [r4, #0]
 8020d94:	463b      	mov	r3, r7
 8020d96:	e016      	b.n	8020dc6 <_sfread_r+0x64>
 8020d98:	462a      	mov	r2, r5
 8020d9a:	4640      	mov	r0, r8
 8020d9c:	9301      	str	r3, [sp, #4]
 8020d9e:	f7fa faf7 	bl	801b390 <memcpy>
 8020da2:	6822      	ldr	r2, [r4, #0]
 8020da4:	2300      	movs	r3, #0
 8020da6:	442a      	add	r2, r5
 8020da8:	6063      	str	r3, [r4, #4]
 8020daa:	6022      	str	r2, [r4, #0]
 8020dac:	4621      	mov	r1, r4
 8020dae:	4650      	mov	r0, sl
 8020db0:	f7ff ffba 	bl	8020d28 <__ssrefill_r>
 8020db4:	44a8      	add	r8, r5
 8020db6:	9b01      	ldr	r3, [sp, #4]
 8020db8:	eba6 0b05 	sub.w	fp, r6, r5
 8020dbc:	b138      	cbz	r0, 8020dce <_sfread_r+0x6c>
 8020dbe:	441d      	add	r5, r3
 8020dc0:	1bad      	subs	r5, r5, r6
 8020dc2:	fbb5 f3f9 	udiv	r3, r5, r9
 8020dc6:	4618      	mov	r0, r3
 8020dc8:	b003      	add	sp, #12
 8020dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dce:	465e      	mov	r6, fp
 8020dd0:	e7d2      	b.n	8020d78 <_sfread_r+0x16>
	...

08020dd4 <__ssvfiscanf_r>:
 8020dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd8:	ed2d 8b02 	vpush	{d8}
 8020ddc:	b0df      	sub	sp, #380	; 0x17c
 8020dde:	461e      	mov	r6, r3
 8020de0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8020de4:	af02      	add	r7, sp, #8
 8020de6:	049d      	lsls	r5, r3, #18
 8020de8:	ee08 0a10 	vmov	s16, r0
 8020dec:	460c      	mov	r4, r1
 8020dee:	613a      	str	r2, [r7, #16]
 8020df0:	d406      	bmi.n	8020e00 <__ssvfiscanf_r+0x2c>
 8020df2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8020df6:	818b      	strh	r3, [r1, #12]
 8020df8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8020dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020dfe:	664b      	str	r3, [r1, #100]	; 0x64
 8020e00:	2300      	movs	r3, #0
 8020e02:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8020e06:	617b      	str	r3, [r7, #20]
 8020e08:	469b      	mov	fp, r3
 8020e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8020e0e:	693a      	ldr	r2, [r7, #16]
 8020e10:	f812 3b01 	ldrb.w	r3, [r2], #1
 8020e14:	613a      	str	r2, [r7, #16]
 8020e16:	637b      	str	r3, [r7, #52]	; 0x34
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d035      	beq.n	8020e88 <__ssvfiscanf_r+0xb4>
 8020e1c:	4a9f      	ldr	r2, [pc, #636]	; (802109c <__ssvfiscanf_r+0x2c8>)
 8020e1e:	f813 9002 	ldrb.w	r9, [r3, r2]
 8020e22:	f019 0908 	ands.w	r9, r9, #8
 8020e26:	d019      	beq.n	8020e5c <__ssvfiscanf_r+0x88>
 8020e28:	6863      	ldr	r3, [r4, #4]
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	dd0e      	ble.n	8020e4c <__ssvfiscanf_r+0x78>
 8020e2e:	6823      	ldr	r3, [r4, #0]
 8020e30:	499a      	ldr	r1, [pc, #616]	; (802109c <__ssvfiscanf_r+0x2c8>)
 8020e32:	781a      	ldrb	r2, [r3, #0]
 8020e34:	5c8a      	ldrb	r2, [r1, r2]
 8020e36:	0710      	lsls	r0, r2, #28
 8020e38:	d5e9      	bpl.n	8020e0e <__ssvfiscanf_r+0x3a>
 8020e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020e3c:	3201      	adds	r2, #1
 8020e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020e40:	6862      	ldr	r2, [r4, #4]
 8020e42:	3301      	adds	r3, #1
 8020e44:	3a01      	subs	r2, #1
 8020e46:	6062      	str	r2, [r4, #4]
 8020e48:	6023      	str	r3, [r4, #0]
 8020e4a:	e7ed      	b.n	8020e28 <__ssvfiscanf_r+0x54>
 8020e4c:	ee18 0a10 	vmov	r0, s16
 8020e50:	4621      	mov	r1, r4
 8020e52:	f7ff ff69 	bl	8020d28 <__ssrefill_r>
 8020e56:	2800      	cmp	r0, #0
 8020e58:	d0e9      	beq.n	8020e2e <__ssvfiscanf_r+0x5a>
 8020e5a:	e7d8      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 8020e5c:	2b25      	cmp	r3, #37	; 0x25
 8020e5e:	f040 809f 	bne.w	8020fa0 <__ssvfiscanf_r+0x1cc>
 8020e62:	693b      	ldr	r3, [r7, #16]
 8020e64:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 8020e68:	220a      	movs	r2, #10
 8020e6a:	6939      	ldr	r1, [r7, #16]
 8020e6c:	781d      	ldrb	r5, [r3, #0]
 8020e6e:	3101      	adds	r1, #1
 8020e70:	2d7a      	cmp	r5, #122	; 0x7a
 8020e72:	6139      	str	r1, [r7, #16]
 8020e74:	d808      	bhi.n	8020e88 <__ssvfiscanf_r+0xb4>
 8020e76:	2d42      	cmp	r5, #66	; 0x42
 8020e78:	d80b      	bhi.n	8020e92 <__ssvfiscanf_r+0xbe>
 8020e7a:	2d2a      	cmp	r5, #42	; 0x2a
 8020e7c:	f000 80b9 	beq.w	8020ff2 <__ssvfiscanf_r+0x21e>
 8020e80:	d87e      	bhi.n	8020f80 <__ssvfiscanf_r+0x1ac>
 8020e82:	2d25      	cmp	r5, #37	; 0x25
 8020e84:	f000 808c 	beq.w	8020fa0 <__ssvfiscanf_r+0x1cc>
 8020e88:	f1bb 0f00 	cmp.w	fp, #0
 8020e8c:	f000 815f 	beq.w	802114e <__ssvfiscanf_r+0x37a>
 8020e90:	e158      	b.n	8021144 <__ssvfiscanf_r+0x370>
 8020e92:	3d43      	subs	r5, #67	; 0x43
 8020e94:	2d37      	cmp	r5, #55	; 0x37
 8020e96:	d8f7      	bhi.n	8020e88 <__ssvfiscanf_r+0xb4>
 8020e98:	a101      	add	r1, pc, #4	; (adr r1, 8020ea0 <__ssvfiscanf_r+0xcc>)
 8020e9a:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8020e9e:	bf00      	nop
 8020ea0:	08021173 	.word	0x08021173
 8020ea4:	0802106f 	.word	0x0802106f
 8020ea8:	08020e89 	.word	0x08020e89
 8020eac:	08020e89 	.word	0x08020e89
 8020eb0:	08020e89 	.word	0x08020e89
 8020eb4:	08020e89 	.word	0x08020e89
 8020eb8:	08020e89 	.word	0x08020e89
 8020ebc:	08020e89 	.word	0x08020e89
 8020ec0:	08020e89 	.word	0x08020e89
 8020ec4:	08021041 	.word	0x08021041
 8020ec8:	08020e89 	.word	0x08020e89
 8020ecc:	08020e89 	.word	0x08020e89
 8020ed0:	08021077 	.word	0x08021077
 8020ed4:	08020e89 	.word	0x08020e89
 8020ed8:	08020e89 	.word	0x08020e89
 8020edc:	08020e89 	.word	0x08020e89
 8020ee0:	080210a9 	.word	0x080210a9
 8020ee4:	08020e89 	.word	0x08020e89
 8020ee8:	08020e89 	.word	0x08020e89
 8020eec:	08020e89 	.word	0x08020e89
 8020ef0:	08020e89 	.word	0x08020e89
 8020ef4:	0802108f 	.word	0x0802108f
 8020ef8:	08020e89 	.word	0x08020e89
 8020efc:	08020e89 	.word	0x08020e89
 8020f00:	0802115f 	.word	0x0802115f
 8020f04:	08020e89 	.word	0x08020e89
 8020f08:	08020e89 	.word	0x08020e89
 8020f0c:	08020e89 	.word	0x08020e89
 8020f10:	08020e89 	.word	0x08020e89
 8020f14:	08020e89 	.word	0x08020e89
 8020f18:	08020e89 	.word	0x08020e89
 8020f1c:	08020e89 	.word	0x08020e89
 8020f20:	08021177 	.word	0x08021177
 8020f24:	08021073 	.word	0x08021073
 8020f28:	08020e89 	.word	0x08020e89
 8020f2c:	08020e89 	.word	0x08020e89
 8020f30:	08020e89 	.word	0x08020e89
 8020f34:	08021025 	.word	0x08021025
 8020f38:	080211cb 	.word	0x080211cb
 8020f3c:	08021041 	.word	0x08021041
 8020f40:	08020e89 	.word	0x08020e89
 8020f44:	08021007 	.word	0x08021007
 8020f48:	08021051 	.word	0x08021051
 8020f4c:	08021185 	.word	0x08021185
 8020f50:	0802107b 	.word	0x0802107b
 8020f54:	0802117f 	.word	0x0802117f
 8020f58:	08020e89 	.word	0x08020e89
 8020f5c:	08020e89 	.word	0x08020e89
 8020f60:	080210ad 	.word	0x080210ad
 8020f64:	08021049 	.word	0x08021049
 8020f68:	08021087 	.word	0x08021087
 8020f6c:	08020e89 	.word	0x08020e89
 8020f70:	08020e89 	.word	0x08020e89
 8020f74:	0802108f 	.word	0x0802108f
 8020f78:	08020e89 	.word	0x08020e89
 8020f7c:	08021049 	.word	0x08021049
 8020f80:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8020f84:	2b09      	cmp	r3, #9
 8020f86:	f63f af7f 	bhi.w	8020e88 <__ssvfiscanf_r+0xb4>
 8020f8a:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 8020f8e:	f47f af7b 	bne.w	8020e88 <__ssvfiscanf_r+0xb4>
 8020f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f94:	fb02 5503 	mla	r5, r2, r3, r5
 8020f98:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8020f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8020f9e:	e030      	b.n	8021002 <__ssvfiscanf_r+0x22e>
 8020fa0:	6863      	ldr	r3, [r4, #4]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	dd10      	ble.n	8020fc8 <__ssvfiscanf_r+0x1f4>
 8020fa6:	6823      	ldr	r3, [r4, #0]
 8020fa8:	693a      	ldr	r2, [r7, #16]
 8020faa:	7819      	ldrb	r1, [r3, #0]
 8020fac:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8020fb0:	4291      	cmp	r1, r2
 8020fb2:	f47f af69 	bne.w	8020e88 <__ssvfiscanf_r+0xb4>
 8020fb6:	6862      	ldr	r2, [r4, #4]
 8020fb8:	3301      	adds	r3, #1
 8020fba:	6023      	str	r3, [r4, #0]
 8020fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fbe:	3a01      	subs	r2, #1
 8020fc0:	6062      	str	r2, [r4, #4]
 8020fc2:	3301      	adds	r3, #1
 8020fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020fc6:	e722      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 8020fc8:	ee18 0a10 	vmov	r0, s16
 8020fcc:	4621      	mov	r1, r4
 8020fce:	f7ff feab 	bl	8020d28 <__ssrefill_r>
 8020fd2:	2800      	cmp	r0, #0
 8020fd4:	d0e7      	beq.n	8020fa6 <__ssvfiscanf_r+0x1d2>
 8020fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fd8:	b11b      	cbz	r3, 8020fe2 <__ssvfiscanf_r+0x20e>
 8020fda:	89a3      	ldrh	r3, [r4, #12]
 8020fdc:	065b      	lsls	r3, r3, #25
 8020fde:	f57f af53 	bpl.w	8020e88 <__ssvfiscanf_r+0xb4>
 8020fe2:	f1bb 0f00 	cmp.w	fp, #0
 8020fe6:	f040 80a1 	bne.w	802112c <__ssvfiscanf_r+0x358>
 8020fea:	f04f 33ff 	mov.w	r3, #4294967295
 8020fee:	627b      	str	r3, [r7, #36]	; 0x24
 8020ff0:	e0ad      	b.n	802114e <__ssvfiscanf_r+0x37a>
 8020ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ff4:	ea53 0309 	orrs.w	r3, r3, r9
 8020ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8020ffa:	f47f af45 	bne.w	8020e88 <__ssvfiscanf_r+0xb4>
 8020ffe:	f04f 0910 	mov.w	r9, #16
 8021002:	693b      	ldr	r3, [r7, #16]
 8021004:	e731      	b.n	8020e6a <__ssvfiscanf_r+0x96>
 8021006:	f019 0f0f 	tst.w	r9, #15
 802100a:	f47f af3d 	bne.w	8020e88 <__ssvfiscanf_r+0xb4>
 802100e:	7859      	ldrb	r1, [r3, #1]
 8021010:	296c      	cmp	r1, #108	; 0x6c
 8021012:	d104      	bne.n	802101e <__ssvfiscanf_r+0x24a>
 8021014:	3302      	adds	r3, #2
 8021016:	613b      	str	r3, [r7, #16]
 8021018:	f049 0902 	orr.w	r9, r9, #2
 802101c:	e7f1      	b.n	8021002 <__ssvfiscanf_r+0x22e>
 802101e:	f049 0901 	orr.w	r9, r9, #1
 8021022:	e7ee      	b.n	8021002 <__ssvfiscanf_r+0x22e>
 8021024:	f019 0f0f 	tst.w	r9, #15
 8021028:	f47f af2e 	bne.w	8020e88 <__ssvfiscanf_r+0xb4>
 802102c:	7859      	ldrb	r1, [r3, #1]
 802102e:	2968      	cmp	r1, #104	; 0x68
 8021030:	bf03      	ittte	eq
 8021032:	3302      	addeq	r3, #2
 8021034:	613b      	streq	r3, [r7, #16]
 8021036:	f049 0908 	orreq.w	r9, r9, #8
 802103a:	f049 0904 	orrne.w	r9, r9, #4
 802103e:	e7e0      	b.n	8021002 <__ssvfiscanf_r+0x22e>
 8021040:	f019 0f0f 	tst.w	r9, #15
 8021044:	d0e8      	beq.n	8021018 <__ssvfiscanf_r+0x244>
 8021046:	e71f      	b.n	8020e88 <__ssvfiscanf_r+0xb4>
 8021048:	f019 0f0f 	tst.w	r9, #15
 802104c:	d0d9      	beq.n	8021002 <__ssvfiscanf_r+0x22e>
 802104e:	e71b      	b.n	8020e88 <__ssvfiscanf_r+0xb4>
 8021050:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 8021054:	f47f af18 	bne.w	8020e88 <__ssvfiscanf_r+0xb4>
 8021058:	f1bb 0f00 	cmp.w	fp, #0
 802105c:	d104      	bne.n	8021068 <__ssvfiscanf_r+0x294>
 802105e:	b082      	sub	sp, #8
 8021060:	f10d 0b08 	add.w	fp, sp, #8
 8021064:	e9cb 3300 	strd	r3, r3, [fp]
 8021068:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 802106c:	e7c9      	b.n	8021002 <__ssvfiscanf_r+0x22e>
 802106e:	f049 0901 	orr.w	r9, r9, #1
 8021072:	4b0b      	ldr	r3, [pc, #44]	; (80210a0 <__ssvfiscanf_r+0x2cc>)
 8021074:	e008      	b.n	8021088 <__ssvfiscanf_r+0x2b4>
 8021076:	f049 0901 	orr.w	r9, r9, #1
 802107a:	4b0a      	ldr	r3, [pc, #40]	; (80210a4 <__ssvfiscanf_r+0x2d0>)
 802107c:	617b      	str	r3, [r7, #20]
 802107e:	2308      	movs	r3, #8
 8021080:	61fb      	str	r3, [r7, #28]
 8021082:	2503      	movs	r5, #3
 8021084:	e013      	b.n	80210ae <__ssvfiscanf_r+0x2da>
 8021086:	4b07      	ldr	r3, [pc, #28]	; (80210a4 <__ssvfiscanf_r+0x2d0>)
 8021088:	617b      	str	r3, [r7, #20]
 802108a:	230a      	movs	r3, #10
 802108c:	e7f8      	b.n	8021080 <__ssvfiscanf_r+0x2ac>
 802108e:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021092:	4b04      	ldr	r3, [pc, #16]	; (80210a4 <__ssvfiscanf_r+0x2d0>)
 8021094:	617b      	str	r3, [r7, #20]
 8021096:	2310      	movs	r3, #16
 8021098:	e7f2      	b.n	8021080 <__ssvfiscanf_r+0x2ac>
 802109a:	bf00      	nop
 802109c:	08029f31 	.word	0x08029f31
 80210a0:	0801bb61 	.word	0x0801bb61
 80210a4:	08020ba1 	.word	0x08020ba1
 80210a8:	f049 0901 	orr.w	r9, r9, #1
 80210ac:	2502      	movs	r5, #2
 80210ae:	6863      	ldr	r3, [r4, #4]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	f340 808e 	ble.w	80211d2 <__ssvfiscanf_r+0x3fe>
 80210b6:	f019 0f40 	tst.w	r9, #64	; 0x40
 80210ba:	d106      	bne.n	80210ca <__ssvfiscanf_r+0x2f6>
 80210bc:	6823      	ldr	r3, [r4, #0]
 80210be:	49b3      	ldr	r1, [pc, #716]	; (802138c <__ssvfiscanf_r+0x5b8>)
 80210c0:	781a      	ldrb	r2, [r3, #0]
 80210c2:	5c52      	ldrb	r2, [r2, r1]
 80210c4:	0711      	lsls	r1, r2, #28
 80210c6:	f100 808d 	bmi.w	80211e4 <__ssvfiscanf_r+0x410>
 80210ca:	2d02      	cmp	r5, #2
 80210cc:	f000 8394 	beq.w	80217f8 <__ssvfiscanf_r+0xa24>
 80210d0:	2d03      	cmp	r5, #3
 80210d2:	f000 8535 	beq.w	8021b40 <__ssvfiscanf_r+0xd6c>
 80210d6:	f009 0310 	and.w	r3, r9, #16
 80210da:	2d01      	cmp	r5, #1
 80210dc:	61bb      	str	r3, [r7, #24]
 80210de:	f009 0301 	and.w	r3, r9, #1
 80210e2:	f000 81cc 	beq.w	802147e <__ssvfiscanf_r+0x6aa>
 80210e6:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80210e8:	2d01      	cmp	r5, #1
 80210ea:	bf38      	it	cc
 80210ec:	2501      	movcc	r5, #1
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	f000 8150 	beq.w	8021394 <__ssvfiscanf_r+0x5c0>
 80210f4:	69bb      	ldr	r3, [r7, #24]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	f040 810d 	bne.w	8021316 <__ssvfiscanf_r+0x542>
 80210fc:	4633      	mov	r3, r6
 80210fe:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021102:	f853 6b04 	ldr.w	r6, [r3], #4
 8021106:	62bb      	str	r3, [r7, #40]	; 0x28
 8021108:	f000 810c 	beq.w	8021324 <__ssvfiscanf_r+0x550>
 802110c:	b146      	cbz	r6, 8021120 <__ssvfiscanf_r+0x34c>
 802110e:	2080      	movs	r0, #128	; 0x80
 8021110:	f7fe fe7a 	bl	801fe08 <malloc>
 8021114:	4680      	mov	r8, r0
 8021116:	2800      	cmp	r0, #0
 8021118:	d178      	bne.n	802120c <__ssvfiscanf_r+0x438>
 802111a:	f04f 33ff 	mov.w	r3, #4294967295
 802111e:	627b      	str	r3, [r7, #36]	; 0x24
 8021120:	f1bb 0f00 	cmp.w	fp, #0
 8021124:	d013      	beq.n	802114e <__ssvfiscanf_r+0x37a>
 8021126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021128:	3301      	adds	r3, #1
 802112a:	d10b      	bne.n	8021144 <__ssvfiscanf_r+0x370>
 802112c:	2400      	movs	r4, #0
 802112e:	4626      	mov	r6, r4
 8021130:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8021134:	f8db 5000 	ldr.w	r5, [fp]
 8021138:	42a3      	cmp	r3, r4
 802113a:	f300 85df 	bgt.w	8021cfc <__ssvfiscanf_r+0xf28>
 802113e:	f04f 33ff 	mov.w	r3, #4294967295
 8021142:	627b      	str	r3, [r7, #36]	; 0x24
 8021144:	f8db 0000 	ldr.w	r0, [fp]
 8021148:	b108      	cbz	r0, 802114e <__ssvfiscanf_r+0x37a>
 802114a:	f7fe fe65 	bl	801fe18 <free>
 802114e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021150:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8021154:	46bd      	mov	sp, r7
 8021156:	ecbd 8b02 	vpop	{d8}
 802115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802115e:	6939      	ldr	r1, [r7, #16]
 8021160:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8021164:	f002 f82a 	bl	80231bc <__sccl>
 8021168:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 802116c:	6138      	str	r0, [r7, #16]
 802116e:	2501      	movs	r5, #1
 8021170:	e79d      	b.n	80210ae <__ssvfiscanf_r+0x2da>
 8021172:	f049 0901 	orr.w	r9, r9, #1
 8021176:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 802117a:	2500      	movs	r5, #0
 802117c:	e797      	b.n	80210ae <__ssvfiscanf_r+0x2da>
 802117e:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8021182:	e786      	b.n	8021092 <__ssvfiscanf_r+0x2be>
 8021184:	f019 0f10 	tst.w	r9, #16
 8021188:	f47f ae41 	bne.w	8020e0e <__ssvfiscanf_r+0x3a>
 802118c:	f019 0f08 	tst.w	r9, #8
 8021190:	f856 1b04 	ldr.w	r1, [r6], #4
 8021194:	d002      	beq.n	802119c <__ssvfiscanf_r+0x3c8>
 8021196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021198:	700b      	strb	r3, [r1, #0]
 802119a:	e638      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 802119c:	f019 0f04 	tst.w	r9, #4
 80211a0:	d002      	beq.n	80211a8 <__ssvfiscanf_r+0x3d4>
 80211a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211a4:	800b      	strh	r3, [r1, #0]
 80211a6:	e632      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 80211a8:	f019 0f01 	tst.w	r9, #1
 80211ac:	d002      	beq.n	80211b4 <__ssvfiscanf_r+0x3e0>
 80211ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211b0:	600b      	str	r3, [r1, #0]
 80211b2:	e62c      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 80211b4:	f019 0f02 	tst.w	r9, #2
 80211b8:	d0f9      	beq.n	80211ae <__ssvfiscanf_r+0x3da>
 80211ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211bc:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80211c0:	461a      	mov	r2, r3
 80211c2:	464b      	mov	r3, r9
 80211c4:	e9c1 2300 	strd	r2, r3, [r1]
 80211c8:	e621      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 80211ca:	4b71      	ldr	r3, [pc, #452]	; (8021390 <__ssvfiscanf_r+0x5bc>)
 80211cc:	617b      	str	r3, [r7, #20]
 80211ce:	2300      	movs	r3, #0
 80211d0:	e756      	b.n	8021080 <__ssvfiscanf_r+0x2ac>
 80211d2:	ee18 0a10 	vmov	r0, s16
 80211d6:	4621      	mov	r1, r4
 80211d8:	f7ff fda6 	bl	8020d28 <__ssrefill_r>
 80211dc:	2800      	cmp	r0, #0
 80211de:	f43f af6a 	beq.w	80210b6 <__ssvfiscanf_r+0x2e2>
 80211e2:	e6f8      	b.n	8020fd6 <__ssvfiscanf_r+0x202>
 80211e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80211e6:	3201      	adds	r2, #1
 80211e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80211ea:	6862      	ldr	r2, [r4, #4]
 80211ec:	3a01      	subs	r2, #1
 80211ee:	2a00      	cmp	r2, #0
 80211f0:	6062      	str	r2, [r4, #4]
 80211f2:	dd02      	ble.n	80211fa <__ssvfiscanf_r+0x426>
 80211f4:	3301      	adds	r3, #1
 80211f6:	6023      	str	r3, [r4, #0]
 80211f8:	e760      	b.n	80210bc <__ssvfiscanf_r+0x2e8>
 80211fa:	ee18 0a10 	vmov	r0, s16
 80211fe:	4621      	mov	r1, r4
 8021200:	f7ff fd92 	bl	8020d28 <__ssrefill_r>
 8021204:	2800      	cmp	r0, #0
 8021206:	f43f af59 	beq.w	80210bc <__ssvfiscanf_r+0x2e8>
 802120a:	e6e4      	b.n	8020fd6 <__ssvfiscanf_r+0x202>
 802120c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021210:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8021214:	6030      	str	r0, [r6, #0]
 8021216:	45ca      	cmp	sl, r9
 8021218:	d313      	bcc.n	8021242 <__ssvfiscanf_r+0x46e>
 802121a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 802121e:	4599      	cmp	r9, r3
 8021220:	f63f af7b 	bhi.w	802111a <__ssvfiscanf_r+0x346>
 8021224:	f109 0908 	add.w	r9, r9, #8
 8021228:	f8db 0000 	ldr.w	r0, [fp]
 802122c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021230:	f001 fe16 	bl	8022e60 <realloc>
 8021234:	2800      	cmp	r0, #0
 8021236:	f43f af70 	beq.w	802111a <__ssvfiscanf_r+0x346>
 802123a:	f8cb 0000 	str.w	r0, [fp]
 802123e:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021242:	f8db 3000 	ldr.w	r3, [fp]
 8021246:	f10a 0201 	add.w	r2, sl, #1
 802124a:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 802124e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021252:	46b2      	mov	sl, r6
 8021254:	f04f 0920 	mov.w	r9, #32
 8021258:	4646      	mov	r6, r8
 802125a:	2200      	movs	r2, #0
 802125c:	60fa      	str	r2, [r7, #12]
 802125e:	f001 fda9 	bl	8022db4 <__locale_mb_cur_max>
 8021262:	68fa      	ldr	r2, [r7, #12]
 8021264:	4290      	cmp	r0, r2
 8021266:	f43f aeb6 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 802126a:	6821      	ldr	r1, [r4, #0]
 802126c:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8021270:	f811 0b01 	ldrb.w	r0, [r1], #1
 8021274:	f80c 0002 	strb.w	r0, [ip, r2]
 8021278:	1c53      	adds	r3, r2, #1
 802127a:	6862      	ldr	r2, [r4, #4]
 802127c:	3a01      	subs	r2, #1
 802127e:	e9c4 1200 	strd	r1, r2, [r4]
 8021282:	6a3a      	ldr	r2, [r7, #32]
 8021284:	2a03      	cmp	r2, #3
 8021286:	d102      	bne.n	802128e <__ssvfiscanf_r+0x4ba>
 8021288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802128a:	2a04      	cmp	r2, #4
 802128c:	d007      	beq.n	802129e <__ssvfiscanf_r+0x4ca>
 802128e:	2208      	movs	r2, #8
 8021290:	2100      	movs	r1, #0
 8021292:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021296:	623b      	str	r3, [r7, #32]
 8021298:	f7fa f8a2 	bl	801b3e0 <memset>
 802129c:	6a3b      	ldr	r3, [r7, #32]
 802129e:	60fb      	str	r3, [r7, #12]
 80212a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80212a4:	9200      	str	r2, [sp, #0]
 80212a6:	ee18 0a10 	vmov	r0, s16
 80212aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80212ae:	4631      	mov	r1, r6
 80212b0:	f001 fd98 	bl	8022de4 <_mbrtowc_r>
 80212b4:	1c42      	adds	r2, r0, #1
 80212b6:	6238      	str	r0, [r7, #32]
 80212b8:	f43f ae8d 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	2800      	cmp	r0, #0
 80212c0:	d135      	bne.n	802132e <__ssvfiscanf_r+0x55a>
 80212c2:	69ba      	ldr	r2, [r7, #24]
 80212c4:	b902      	cbnz	r2, 80212c8 <__ssvfiscanf_r+0x4f4>
 80212c6:	6032      	str	r2, [r6, #0]
 80212c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80212ca:	441a      	add	r2, r3
 80212cc:	6a3b      	ldr	r3, [r7, #32]
 80212ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80212d0:	2b03      	cmp	r3, #3
 80212d2:	d102      	bne.n	80212da <__ssvfiscanf_r+0x506>
 80212d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80212d6:	2b04      	cmp	r3, #4
 80212d8:	d000      	beq.n	80212dc <__ssvfiscanf_r+0x508>
 80212da:	3d01      	subs	r5, #1
 80212dc:	69bb      	ldr	r3, [r7, #24]
 80212de:	b9c3      	cbnz	r3, 8021312 <__ssvfiscanf_r+0x53e>
 80212e0:	f1ba 0f00 	cmp.w	sl, #0
 80212e4:	d014      	beq.n	8021310 <__ssvfiscanf_r+0x53c>
 80212e6:	eba6 0308 	sub.w	r3, r6, r8
 80212ea:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80212ee:	d80f      	bhi.n	8021310 <__ssvfiscanf_r+0x53c>
 80212f0:	4640      	mov	r0, r8
 80212f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80212f6:	60fb      	str	r3, [r7, #12]
 80212f8:	f001 fdb2 	bl	8022e60 <realloc>
 80212fc:	4680      	mov	r8, r0
 80212fe:	2800      	cmp	r0, #0
 8021300:	f43f af0b 	beq.w	802111a <__ssvfiscanf_r+0x346>
 8021304:	68fb      	ldr	r3, [r7, #12]
 8021306:	f8ca 0000 	str.w	r0, [sl]
 802130a:	18c6      	adds	r6, r0, r3
 802130c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021310:	3604      	adds	r6, #4
 8021312:	2200      	movs	r2, #0
 8021314:	e00f      	b.n	8021336 <__ssvfiscanf_r+0x562>
 8021316:	f04f 0900 	mov.w	r9, #0
 802131a:	62be      	str	r6, [r7, #40]	; 0x28
 802131c:	46c8      	mov	r8, r9
 802131e:	46ca      	mov	sl, r9
 8021320:	464e      	mov	r6, r9
 8021322:	e79a      	b.n	802125a <__ssvfiscanf_r+0x486>
 8021324:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8021328:	46c8      	mov	r8, r9
 802132a:	46ca      	mov	sl, r9
 802132c:	e795      	b.n	802125a <__ssvfiscanf_r+0x486>
 802132e:	6a3a      	ldr	r2, [r7, #32]
 8021330:	3202      	adds	r2, #2
 8021332:	d1c9      	bne.n	80212c8 <__ssvfiscanf_r+0x4f4>
 8021334:	461a      	mov	r2, r3
 8021336:	6863      	ldr	r3, [r4, #4]
 8021338:	2b00      	cmp	r3, #0
 802133a:	dc14      	bgt.n	8021366 <__ssvfiscanf_r+0x592>
 802133c:	ee18 0a10 	vmov	r0, s16
 8021340:	4621      	mov	r1, r4
 8021342:	60fa      	str	r2, [r7, #12]
 8021344:	f7ff fcf0 	bl	8020d28 <__ssrefill_r>
 8021348:	68fa      	ldr	r2, [r7, #12]
 802134a:	b160      	cbz	r0, 8021366 <__ssvfiscanf_r+0x592>
 802134c:	2a00      	cmp	r2, #0
 802134e:	f47f ae42 	bne.w	8020fd6 <__ssvfiscanf_r+0x202>
 8021352:	f1ba 0f00 	cmp.w	sl, #0
 8021356:	d10a      	bne.n	802136e <__ssvfiscanf_r+0x59a>
 8021358:	69bb      	ldr	r3, [r7, #24]
 802135a:	b913      	cbnz	r3, 8021362 <__ssvfiscanf_r+0x58e>
 802135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802135e:	3301      	adds	r3, #1
 8021360:	627b      	str	r3, [r7, #36]	; 0x24
 8021362:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8021364:	e553      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 8021366:	2d00      	cmp	r5, #0
 8021368:	f47f af78 	bne.w	802125c <__ssvfiscanf_r+0x488>
 802136c:	e7f1      	b.n	8021352 <__ssvfiscanf_r+0x57e>
 802136e:	eba6 0108 	sub.w	r1, r6, r8
 8021372:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8021376:	d9ef      	bls.n	8021358 <__ssvfiscanf_r+0x584>
 8021378:	f8da 0000 	ldr.w	r0, [sl]
 802137c:	f001 fd70 	bl	8022e60 <realloc>
 8021380:	2800      	cmp	r0, #0
 8021382:	d0e9      	beq.n	8021358 <__ssvfiscanf_r+0x584>
 8021384:	f8ca 0000 	str.w	r0, [sl]
 8021388:	e7e6      	b.n	8021358 <__ssvfiscanf_r+0x584>
 802138a:	bf00      	nop
 802138c:	08029f31 	.word	0x08029f31
 8021390:	0801bb61 	.word	0x0801bb61
 8021394:	69ba      	ldr	r2, [r7, #24]
 8021396:	b1e2      	cbz	r2, 80213d2 <__ssvfiscanf_r+0x5fe>
 8021398:	4698      	mov	r8, r3
 802139a:	e9d4 2300 	ldrd	r2, r3, [r4]
 802139e:	429d      	cmp	r5, r3
 80213a0:	dd11      	ble.n	80213c6 <__ssvfiscanf_r+0x5f2>
 80213a2:	4498      	add	r8, r3
 80213a4:	1aed      	subs	r5, r5, r3
 80213a6:	4413      	add	r3, r2
 80213a8:	ee18 0a10 	vmov	r0, s16
 80213ac:	6023      	str	r3, [r4, #0]
 80213ae:	4621      	mov	r1, r4
 80213b0:	f7ff fcba 	bl	8020d28 <__ssrefill_r>
 80213b4:	2800      	cmp	r0, #0
 80213b6:	d0f0      	beq.n	802139a <__ssvfiscanf_r+0x5c6>
 80213b8:	f1b8 0f00 	cmp.w	r8, #0
 80213bc:	f43f ae0b 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 80213c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213c2:	4443      	add	r3, r8
 80213c4:	e5fe      	b.n	8020fc4 <__ssvfiscanf_r+0x1f0>
 80213c6:	1b5b      	subs	r3, r3, r5
 80213c8:	44a8      	add	r8, r5
 80213ca:	4415      	add	r5, r2
 80213cc:	6063      	str	r3, [r4, #4]
 80213ce:	6025      	str	r5, [r4, #0]
 80213d0:	e7f6      	b.n	80213c0 <__ssvfiscanf_r+0x5ec>
 80213d2:	46b0      	mov	r8, r6
 80213d4:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 80213d8:	f858 6b04 	ldr.w	r6, [r8], #4
 80213dc:	d02e      	beq.n	802143c <__ssvfiscanf_r+0x668>
 80213de:	2e00      	cmp	r6, #0
 80213e0:	f43f ad52 	beq.w	8020e88 <__ssvfiscanf_r+0xb4>
 80213e4:	4628      	mov	r0, r5
 80213e6:	f7fe fd0f 	bl	801fe08 <malloc>
 80213ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80213ec:	2800      	cmp	r0, #0
 80213ee:	f43f adf8 	beq.w	8020fe2 <__ssvfiscanf_r+0x20e>
 80213f2:	f8bb a006 	ldrh.w	sl, [fp, #6]
 80213f6:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 80213fa:	6030      	str	r0, [r6, #0]
 80213fc:	45ca      	cmp	sl, r9
 80213fe:	d313      	bcc.n	8021428 <__ssvfiscanf_r+0x654>
 8021400:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021404:	4599      	cmp	r9, r3
 8021406:	f63f ae91 	bhi.w	802112c <__ssvfiscanf_r+0x358>
 802140a:	f109 0908 	add.w	r9, r9, #8
 802140e:	f8db 0000 	ldr.w	r0, [fp]
 8021412:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021416:	f001 fd23 	bl	8022e60 <realloc>
 802141a:	2800      	cmp	r0, #0
 802141c:	f43f ae86 	beq.w	802112c <__ssvfiscanf_r+0x358>
 8021420:	f8cb 0000 	str.w	r0, [fp]
 8021424:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021428:	f8db 3000 	ldr.w	r3, [fp]
 802142c:	f10a 0201 	add.w	r2, sl, #1
 8021430:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8021434:	46b1      	mov	r9, r6
 8021436:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8021438:	f8ab 2006 	strh.w	r2, [fp, #6]
 802143c:	4631      	mov	r1, r6
 802143e:	ee18 0a10 	vmov	r0, s16
 8021442:	9400      	str	r4, [sp, #0]
 8021444:	462b      	mov	r3, r5
 8021446:	2201      	movs	r2, #1
 8021448:	f7ff fc8b 	bl	8020d62 <_sfread_r>
 802144c:	4606      	mov	r6, r0
 802144e:	2800      	cmp	r0, #0
 8021450:	f43f adc1 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 8021454:	f1b9 0f00 	cmp.w	r9, #0
 8021458:	d009      	beq.n	802146e <__ssvfiscanf_r+0x69a>
 802145a:	4285      	cmp	r5, r0
 802145c:	d907      	bls.n	802146e <__ssvfiscanf_r+0x69a>
 802145e:	4601      	mov	r1, r0
 8021460:	f8d9 0000 	ldr.w	r0, [r9]
 8021464:	f001 fcfc 	bl	8022e60 <realloc>
 8021468:	b108      	cbz	r0, 802146e <__ssvfiscanf_r+0x69a>
 802146a:	f8c9 0000 	str.w	r0, [r9]
 802146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021470:	4433      	add	r3, r6
 8021472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021476:	3301      	adds	r3, #1
 8021478:	627b      	str	r3, [r7, #36]	; 0x24
 802147a:	4646      	mov	r6, r8
 802147c:	e4c7      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 802147e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021480:	2a00      	cmp	r2, #0
 8021482:	bf08      	it	eq
 8021484:	f04f 32ff 	moveq.w	r2, #4294967295
 8021488:	461d      	mov	r5, r3
 802148a:	62ba      	str	r2, [r7, #40]	; 0x28
 802148c:	69bb      	ldr	r3, [r7, #24]
 802148e:	2d00      	cmp	r5, #0
 8021490:	f000 8105 	beq.w	802169e <__ssvfiscanf_r+0x8ca>
 8021494:	2b00      	cmp	r3, #0
 8021496:	f040 80a5 	bne.w	80215e4 <__ssvfiscanf_r+0x810>
 802149a:	4633      	mov	r3, r6
 802149c:	f019 0f80 	tst.w	r9, #128	; 0x80
 80214a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80214a4:	607b      	str	r3, [r7, #4]
 80214a6:	f000 80a6 	beq.w	80215f6 <__ssvfiscanf_r+0x822>
 80214aa:	2d00      	cmp	r5, #0
 80214ac:	f43f ae38 	beq.w	8021120 <__ssvfiscanf_r+0x34c>
 80214b0:	2080      	movs	r0, #128	; 0x80
 80214b2:	f7fe fca9 	bl	801fe08 <malloc>
 80214b6:	4680      	mov	r8, r0
 80214b8:	2800      	cmp	r0, #0
 80214ba:	f43f ae2e 	beq.w	802111a <__ssvfiscanf_r+0x346>
 80214be:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 80214c2:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 80214c6:	6028      	str	r0, [r5, #0]
 80214c8:	45b1      	cmp	r9, r6
 80214ca:	d311      	bcc.n	80214f0 <__ssvfiscanf_r+0x71c>
 80214cc:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80214d0:	429e      	cmp	r6, r3
 80214d2:	f63f ae22 	bhi.w	802111a <__ssvfiscanf_r+0x346>
 80214d6:	3608      	adds	r6, #8
 80214d8:	f8db 0000 	ldr.w	r0, [fp]
 80214dc:	00b1      	lsls	r1, r6, #2
 80214de:	f001 fcbf 	bl	8022e60 <realloc>
 80214e2:	2800      	cmp	r0, #0
 80214e4:	f43f ae19 	beq.w	802111a <__ssvfiscanf_r+0x346>
 80214e8:	f8cb 0000 	str.w	r0, [fp]
 80214ec:	f8ab 6004 	strh.w	r6, [fp, #4]
 80214f0:	f8db 3000 	ldr.w	r3, [fp]
 80214f4:	60fd      	str	r5, [r7, #12]
 80214f6:	f109 0201 	add.w	r2, r9, #1
 80214fa:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80214fe:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021502:	4645      	mov	r5, r8
 8021504:	f04f 0920 	mov.w	r9, #32
 8021508:	2600      	movs	r6, #0
 802150a:	f001 fc53 	bl	8022db4 <__locale_mb_cur_max>
 802150e:	42b0      	cmp	r0, r6
 8021510:	f43f ad61 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 8021514:	1c73      	adds	r3, r6, #1
 8021516:	60bb      	str	r3, [r7, #8]
 8021518:	6823      	ldr	r3, [r4, #0]
 802151a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802151e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021522:	558a      	strb	r2, [r1, r6]
 8021524:	6862      	ldr	r2, [r4, #4]
 8021526:	3a01      	subs	r2, #1
 8021528:	e9c4 3200 	strd	r3, r2, [r4]
 802152c:	6a3b      	ldr	r3, [r7, #32]
 802152e:	2b03      	cmp	r3, #3
 8021530:	d102      	bne.n	8021538 <__ssvfiscanf_r+0x764>
 8021532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021534:	2b04      	cmp	r3, #4
 8021536:	d005      	beq.n	8021544 <__ssvfiscanf_r+0x770>
 8021538:	2208      	movs	r2, #8
 802153a:	2100      	movs	r1, #0
 802153c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8021540:	f7f9 ff4e 	bl	801b3e0 <memset>
 8021544:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021548:	9300      	str	r3, [sp, #0]
 802154a:	ee18 0a10 	vmov	r0, s16
 802154e:	68bb      	ldr	r3, [r7, #8]
 8021550:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8021554:	4629      	mov	r1, r5
 8021556:	f001 fc45 	bl	8022de4 <_mbrtowc_r>
 802155a:	4603      	mov	r3, r0
 802155c:	6238      	str	r0, [r7, #32]
 802155e:	1c58      	adds	r0, r3, #1
 8021560:	f43f ad39 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 8021564:	2b00      	cmp	r3, #0
 8021566:	d14c      	bne.n	8021602 <__ssvfiscanf_r+0x82e>
 8021568:	602b      	str	r3, [r5, #0]
 802156a:	682e      	ldr	r6, [r5, #0]
 802156c:	1c71      	adds	r1, r6, #1
 802156e:	d059      	beq.n	8021624 <__ssvfiscanf_r+0x850>
 8021570:	2208      	movs	r2, #8
 8021572:	2100      	movs	r1, #0
 8021574:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8021578:	f7f9 ff32 	bl	801b3e0 <memset>
 802157c:	4b9d      	ldr	r3, [pc, #628]	; (80217f4 <__ssvfiscanf_r+0xa20>)
 802157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021582:	603b      	str	r3, [r7, #0]
 8021584:	4632      	mov	r2, r6
 8021586:	ee18 0a10 	vmov	r0, s16
 802158a:	683e      	ldr	r6, [r7, #0]
 802158c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021590:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8021594:	47b0      	blx	r6
 8021596:	2801      	cmp	r0, #1
 8021598:	d146      	bne.n	8021628 <__ssvfiscanf_r+0x854>
 802159a:	f897 a030 	ldrb.w	sl, [r7, #48]	; 0x30
 802159e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80215a2:	f813 300a 	ldrb.w	r3, [r3, sl]
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d14b      	bne.n	8021642 <__ssvfiscanf_r+0x86e>
 80215aa:	f107 0648 	add.w	r6, r7, #72	; 0x48
 80215ae:	68bb      	ldr	r3, [r7, #8]
 80215b0:	2b00      	cmp	r3, #0
 80215b2:	d13c      	bne.n	802162e <__ssvfiscanf_r+0x85a>
 80215b4:	69bb      	ldr	r3, [r7, #24]
 80215b6:	b99b      	cbnz	r3, 80215e0 <__ssvfiscanf_r+0x80c>
 80215b8:	602b      	str	r3, [r5, #0]
 80215ba:	68fb      	ldr	r3, [r7, #12]
 80215bc:	b16b      	cbz	r3, 80215da <__ssvfiscanf_r+0x806>
 80215be:	eba5 0108 	sub.w	r1, r5, r8
 80215c2:	108b      	asrs	r3, r1, #2
 80215c4:	3301      	adds	r3, #1
 80215c6:	4599      	cmp	r9, r3
 80215c8:	d907      	bls.n	80215da <__ssvfiscanf_r+0x806>
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	3104      	adds	r1, #4
 80215ce:	6818      	ldr	r0, [r3, #0]
 80215d0:	f001 fc46 	bl	8022e60 <realloc>
 80215d4:	b108      	cbz	r0, 80215da <__ssvfiscanf_r+0x806>
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	6018      	str	r0, [r3, #0]
 80215da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215dc:	3301      	adds	r3, #1
 80215de:	627b      	str	r3, [r7, #36]	; 0x24
 80215e0:	687e      	ldr	r6, [r7, #4]
 80215e2:	e414      	b.n	8020e0e <__ssvfiscanf_r+0x3a>
 80215e4:	f04f 0900 	mov.w	r9, #0
 80215e8:	607e      	str	r6, [r7, #4]
 80215ea:	46c8      	mov	r8, r9
 80215ec:	f8c7 900c 	str.w	r9, [r7, #12]
 80215f0:	f107 0534 	add.w	r5, r7, #52	; 0x34
 80215f4:	e788      	b.n	8021508 <__ssvfiscanf_r+0x734>
 80215f6:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80215fa:	f8c7 900c 	str.w	r9, [r7, #12]
 80215fe:	46c8      	mov	r8, r9
 8021600:	e782      	b.n	8021508 <__ssvfiscanf_r+0x734>
 8021602:	6a3b      	ldr	r3, [r7, #32]
 8021604:	3302      	adds	r3, #2
 8021606:	d1b0      	bne.n	802156a <__ssvfiscanf_r+0x796>
 8021608:	68be      	ldr	r6, [r7, #8]
 802160a:	6863      	ldr	r3, [r4, #4]
 802160c:	2b00      	cmp	r3, #0
 802160e:	dc41      	bgt.n	8021694 <__ssvfiscanf_r+0x8c0>
 8021610:	ee18 0a10 	vmov	r0, s16
 8021614:	4621      	mov	r1, r4
 8021616:	f7ff fb87 	bl	8020d28 <__ssrefill_r>
 802161a:	2800      	cmp	r0, #0
 802161c:	d03a      	beq.n	8021694 <__ssvfiscanf_r+0x8c0>
 802161e:	2e00      	cmp	r6, #0
 8021620:	d0c8      	beq.n	80215b4 <__ssvfiscanf_r+0x7e0>
 8021622:	e4d8      	b.n	8020fd6 <__ssvfiscanf_r+0x202>
 8021624:	46b2      	mov	sl, r6
 8021626:	e7ba      	b.n	802159e <__ssvfiscanf_r+0x7ca>
 8021628:	f04f 0a00 	mov.w	sl, #0
 802162c:	e7b7      	b.n	802159e <__ssvfiscanf_r+0x7ca>
 802162e:	68bb      	ldr	r3, [r7, #8]
 8021630:	3b01      	subs	r3, #1
 8021632:	ee18 0a10 	vmov	r0, s16
 8021636:	5cf1      	ldrb	r1, [r6, r3]
 8021638:	60bb      	str	r3, [r7, #8]
 802163a:	4622      	mov	r2, r4
 802163c:	f7ff fb37 	bl	8020cae <_sungetc_r>
 8021640:	e7b5      	b.n	80215ae <__ssvfiscanf_r+0x7da>
 8021642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021644:	68ba      	ldr	r2, [r7, #8]
 8021646:	4413      	add	r3, r2
 8021648:	62fb      	str	r3, [r7, #44]	; 0x2c
 802164a:	6a3b      	ldr	r3, [r7, #32]
 802164c:	2b03      	cmp	r3, #3
 802164e:	d102      	bne.n	8021656 <__ssvfiscanf_r+0x882>
 8021650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021652:	2b04      	cmp	r3, #4
 8021654:	d002      	beq.n	802165c <__ssvfiscanf_r+0x888>
 8021656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021658:	3b01      	subs	r3, #1
 802165a:	62bb      	str	r3, [r7, #40]	; 0x28
 802165c:	69bb      	ldr	r3, [r7, #24]
 802165e:	b9bb      	cbnz	r3, 8021690 <__ssvfiscanf_r+0x8bc>
 8021660:	68fb      	ldr	r3, [r7, #12]
 8021662:	3504      	adds	r5, #4
 8021664:	b1a3      	cbz	r3, 8021690 <__ssvfiscanf_r+0x8bc>
 8021666:	eba5 0608 	sub.w	r6, r5, r8
 802166a:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802166e:	d80d      	bhi.n	802168c <__ssvfiscanf_r+0x8b8>
 8021670:	4640      	mov	r0, r8
 8021672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021676:	f001 fbf3 	bl	8022e60 <realloc>
 802167a:	4680      	mov	r8, r0
 802167c:	2800      	cmp	r0, #0
 802167e:	f43f ad4c 	beq.w	802111a <__ssvfiscanf_r+0x346>
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	1985      	adds	r5, r0, r6
 8021686:	6018      	str	r0, [r3, #0]
 8021688:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802168c:	69be      	ldr	r6, [r7, #24]
 802168e:	e7bc      	b.n	802160a <__ssvfiscanf_r+0x836>
 8021690:	2600      	movs	r6, #0
 8021692:	e7ba      	b.n	802160a <__ssvfiscanf_r+0x836>
 8021694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021696:	2b00      	cmp	r3, #0
 8021698:	f47f af37 	bne.w	802150a <__ssvfiscanf_r+0x736>
 802169c:	e78a      	b.n	80215b4 <__ssvfiscanf_r+0x7e0>
 802169e:	b1f3      	cbz	r3, 80216de <__ssvfiscanf_r+0x90a>
 80216a0:	f107 0870 	add.w	r8, r7, #112	; 0x70
 80216a4:	6823      	ldr	r3, [r4, #0]
 80216a6:	781a      	ldrb	r2, [r3, #0]
 80216a8:	f818 2002 	ldrb.w	r2, [r8, r2]
 80216ac:	b912      	cbnz	r2, 80216b4 <__ssvfiscanf_r+0x8e0>
 80216ae:	b99d      	cbnz	r5, 80216d8 <__ssvfiscanf_r+0x904>
 80216b0:	f7ff bbea 	b.w	8020e88 <__ssvfiscanf_r+0xb4>
 80216b4:	3301      	adds	r3, #1
 80216b6:	6862      	ldr	r2, [r4, #4]
 80216b8:	6023      	str	r3, [r4, #0]
 80216ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216bc:	3501      	adds	r5, #1
 80216be:	3a01      	subs	r2, #1
 80216c0:	42ab      	cmp	r3, r5
 80216c2:	6062      	str	r2, [r4, #4]
 80216c4:	d008      	beq.n	80216d8 <__ssvfiscanf_r+0x904>
 80216c6:	2a00      	cmp	r2, #0
 80216c8:	dcec      	bgt.n	80216a4 <__ssvfiscanf_r+0x8d0>
 80216ca:	ee18 0a10 	vmov	r0, s16
 80216ce:	4621      	mov	r1, r4
 80216d0:	f7ff fb2a 	bl	8020d28 <__ssrefill_r>
 80216d4:	2800      	cmp	r0, #0
 80216d6:	d0e5      	beq.n	80216a4 <__ssvfiscanf_r+0x8d0>
 80216d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216da:	442b      	add	r3, r5
 80216dc:	e472      	b.n	8020fc4 <__ssvfiscanf_r+0x1f0>
 80216de:	4633      	mov	r3, r6
 80216e0:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 80216e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80216e8:	61bb      	str	r3, [r7, #24]
 80216ea:	f000 8081 	beq.w	80217f0 <__ssvfiscanf_r+0xa1c>
 80216ee:	2e00      	cmp	r6, #0
 80216f0:	f43f abca 	beq.w	8020e88 <__ssvfiscanf_r+0xb4>
 80216f4:	2020      	movs	r0, #32
 80216f6:	f7fe fb87 	bl	801fe08 <malloc>
 80216fa:	4680      	mov	r8, r0
 80216fc:	2800      	cmp	r0, #0
 80216fe:	f43f ac70 	beq.w	8020fe2 <__ssvfiscanf_r+0x20e>
 8021702:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8021706:	f8bb 5004 	ldrh.w	r5, [fp, #4]
 802170a:	6030      	str	r0, [r6, #0]
 802170c:	45a9      	cmp	r9, r5
 802170e:	d311      	bcc.n	8021734 <__ssvfiscanf_r+0x960>
 8021710:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021714:	429d      	cmp	r5, r3
 8021716:	f63f ad09 	bhi.w	802112c <__ssvfiscanf_r+0x358>
 802171a:	3508      	adds	r5, #8
 802171c:	f8db 0000 	ldr.w	r0, [fp]
 8021720:	00a9      	lsls	r1, r5, #2
 8021722:	f001 fb9d 	bl	8022e60 <realloc>
 8021726:	2800      	cmp	r0, #0
 8021728:	f43f ad00 	beq.w	802112c <__ssvfiscanf_r+0x358>
 802172c:	f8cb 0000 	str.w	r0, [fp]
 8021730:	f8ab 5004 	strh.w	r5, [fp, #4]
 8021734:	f8db 3000 	ldr.w	r3, [fp]
 8021738:	f109 0201 	add.w	r2, r9, #1
 802173c:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8021740:	46b2      	mov	sl, r6
 8021742:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021746:	4646      	mov	r6, r8
 8021748:	2520      	movs	r5, #32
 802174a:	46b0      	mov	r8, r6
 802174c:	f107 0970 	add.w	r9, r7, #112	; 0x70
 8021750:	6823      	ldr	r3, [r4, #0]
 8021752:	781a      	ldrb	r2, [r3, #0]
 8021754:	f819 2002 	ldrb.w	r2, [r9, r2]
 8021758:	b36a      	cbz	r2, 80217b6 <__ssvfiscanf_r+0x9e2>
 802175a:	6862      	ldr	r2, [r4, #4]
 802175c:	3a01      	subs	r2, #1
 802175e:	6062      	str	r2, [r4, #4]
 8021760:	1c5a      	adds	r2, r3, #1
 8021762:	6022      	str	r2, [r4, #0]
 8021764:	781b      	ldrb	r3, [r3, #0]
 8021766:	f806 3b01 	strb.w	r3, [r6], #1
 802176a:	f1ba 0f00 	cmp.w	sl, #0
 802176e:	d011      	beq.n	8021794 <__ssvfiscanf_r+0x9c0>
 8021770:	eba6 0308 	sub.w	r3, r6, r8
 8021774:	42ab      	cmp	r3, r5
 8021776:	d30d      	bcc.n	8021794 <__ssvfiscanf_r+0x9c0>
 8021778:	006d      	lsls	r5, r5, #1
 802177a:	4640      	mov	r0, r8
 802177c:	4629      	mov	r1, r5
 802177e:	60fb      	str	r3, [r7, #12]
 8021780:	f001 fb6e 	bl	8022e60 <realloc>
 8021784:	4680      	mov	r8, r0
 8021786:	2800      	cmp	r0, #0
 8021788:	f43f ac2b 	beq.w	8020fe2 <__ssvfiscanf_r+0x20e>
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	f8ca 0000 	str.w	r0, [sl]
 8021792:	18c6      	adds	r6, r0, r3
 8021794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021796:	3b01      	subs	r3, #1
 8021798:	62bb      	str	r3, [r7, #40]	; 0x28
 802179a:	d00c      	beq.n	80217b6 <__ssvfiscanf_r+0x9e2>
 802179c:	6863      	ldr	r3, [r4, #4]
 802179e:	2b00      	cmp	r3, #0
 80217a0:	dcd6      	bgt.n	8021750 <__ssvfiscanf_r+0x97c>
 80217a2:	ee18 0a10 	vmov	r0, s16
 80217a6:	4621      	mov	r1, r4
 80217a8:	f7ff fabe 	bl	8020d28 <__ssrefill_r>
 80217ac:	2800      	cmp	r0, #0
 80217ae:	d0cf      	beq.n	8021750 <__ssvfiscanf_r+0x97c>
 80217b0:	4546      	cmp	r6, r8
 80217b2:	f43f ac10 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 80217b6:	ebb6 0808 	subs.w	r8, r6, r8
 80217ba:	f43f ab65 	beq.w	8020e88 <__ssvfiscanf_r+0xb4>
 80217be:	2300      	movs	r3, #0
 80217c0:	7033      	strb	r3, [r6, #0]
 80217c2:	f1ba 0f00 	cmp.w	sl, #0
 80217c6:	d00a      	beq.n	80217de <__ssvfiscanf_r+0xa0a>
 80217c8:	f108 0101 	add.w	r1, r8, #1
 80217cc:	428d      	cmp	r5, r1
 80217ce:	d906      	bls.n	80217de <__ssvfiscanf_r+0xa0a>
 80217d0:	f8da 0000 	ldr.w	r0, [sl]
 80217d4:	f001 fb44 	bl	8022e60 <realloc>
 80217d8:	b108      	cbz	r0, 80217de <__ssvfiscanf_r+0xa0a>
 80217da:	f8ca 0000 	str.w	r0, [sl]
 80217de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80217e0:	3301      	adds	r3, #1
 80217e2:	627b      	str	r3, [r7, #36]	; 0x24
 80217e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217e6:	4443      	add	r3, r8
 80217e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80217ea:	69be      	ldr	r6, [r7, #24]
 80217ec:	f7ff bb0f 	b.w	8020e0e <__ssvfiscanf_r+0x3a>
 80217f0:	46aa      	mov	sl, r5
 80217f2:	e7aa      	b.n	802174a <__ssvfiscanf_r+0x976>
 80217f4:	200008e0 	.word	0x200008e0
 80217f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	bf08      	it	eq
 80217fe:	f04f 33ff 	moveq.w	r3, #4294967295
 8021802:	f019 0501 	ands.w	r5, r9, #1
 8021806:	62bb      	str	r3, [r7, #40]	; 0x28
 8021808:	f009 0810 	and.w	r8, r9, #16
 802180c:	f000 80f5 	beq.w	80219fa <__ssvfiscanf_r+0xc26>
 8021810:	f1b8 0f00 	cmp.w	r8, #0
 8021814:	f040 809a 	bne.w	802194c <__ssvfiscanf_r+0xb78>
 8021818:	4633      	mov	r3, r6
 802181a:	f019 0f80 	tst.w	r9, #128	; 0x80
 802181e:	f853 5b04 	ldr.w	r5, [r3], #4
 8021822:	61bb      	str	r3, [r7, #24]
 8021824:	f000 809a 	beq.w	802195c <__ssvfiscanf_r+0xb88>
 8021828:	2d00      	cmp	r5, #0
 802182a:	f43f ac79 	beq.w	8021120 <__ssvfiscanf_r+0x34c>
 802182e:	2080      	movs	r0, #128	; 0x80
 8021830:	f7fe faea 	bl	801fe08 <malloc>
 8021834:	4606      	mov	r6, r0
 8021836:	2800      	cmp	r0, #0
 8021838:	f43f ac6f 	beq.w	802111a <__ssvfiscanf_r+0x346>
 802183c:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021840:	f8bb 9004 	ldrh.w	r9, [fp, #4]
 8021844:	6028      	str	r0, [r5, #0]
 8021846:	45ca      	cmp	sl, r9
 8021848:	d313      	bcc.n	8021872 <__ssvfiscanf_r+0xa9e>
 802184a:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 802184e:	4599      	cmp	r9, r3
 8021850:	f63f ac63 	bhi.w	802111a <__ssvfiscanf_r+0x346>
 8021854:	f109 0908 	add.w	r9, r9, #8
 8021858:	f8db 0000 	ldr.w	r0, [fp]
 802185c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021860:	f001 fafe 	bl	8022e60 <realloc>
 8021864:	2800      	cmp	r0, #0
 8021866:	f43f ac58 	beq.w	802111a <__ssvfiscanf_r+0x346>
 802186a:	f8cb 0000 	str.w	r0, [fp]
 802186e:	f8ab 9004 	strh.w	r9, [fp, #4]
 8021872:	f8db 3000 	ldr.w	r3, [fp]
 8021876:	f10a 0201 	add.w	r2, sl, #1
 802187a:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802187e:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021882:	46aa      	mov	sl, r5
 8021884:	f04f 0920 	mov.w	r9, #32
 8021888:	4635      	mov	r5, r6
 802188a:	2200      	movs	r2, #0
 802188c:	6823      	ldr	r3, [r4, #0]
 802188e:	49ab      	ldr	r1, [pc, #684]	; (8021b3c <__ssvfiscanf_r+0xd68>)
 8021890:	781b      	ldrb	r3, [r3, #0]
 8021892:	5c5b      	ldrb	r3, [r3, r1]
 8021894:	0718      	lsls	r0, r3, #28
 8021896:	d43f      	bmi.n	8021918 <__ssvfiscanf_r+0xb44>
 8021898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802189a:	2b00      	cmp	r3, #0
 802189c:	d03c      	beq.n	8021918 <__ssvfiscanf_r+0xb44>
 802189e:	60fa      	str	r2, [r7, #12]
 80218a0:	f001 fa88 	bl	8022db4 <__locale_mb_cur_max>
 80218a4:	68fa      	ldr	r2, [r7, #12]
 80218a6:	4290      	cmp	r0, r2
 80218a8:	f43f ab95 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 80218ac:	6821      	ldr	r1, [r4, #0]
 80218ae:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 80218b2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80218b6:	f80c 0002 	strb.w	r0, [ip, r2]
 80218ba:	1c53      	adds	r3, r2, #1
 80218bc:	6862      	ldr	r2, [r4, #4]
 80218be:	3a01      	subs	r2, #1
 80218c0:	e9c4 1200 	strd	r1, r2, [r4]
 80218c4:	6a3a      	ldr	r2, [r7, #32]
 80218c6:	2a03      	cmp	r2, #3
 80218c8:	d102      	bne.n	80218d0 <__ssvfiscanf_r+0xafc>
 80218ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80218cc:	2a04      	cmp	r2, #4
 80218ce:	d007      	beq.n	80218e0 <__ssvfiscanf_r+0xb0c>
 80218d0:	2208      	movs	r2, #8
 80218d2:	2100      	movs	r1, #0
 80218d4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80218d8:	623b      	str	r3, [r7, #32]
 80218da:	f7f9 fd81 	bl	801b3e0 <memset>
 80218de:	6a3b      	ldr	r3, [r7, #32]
 80218e0:	60fb      	str	r3, [r7, #12]
 80218e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80218e6:	9200      	str	r2, [sp, #0]
 80218e8:	ee18 0a10 	vmov	r0, s16
 80218ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80218f0:	4629      	mov	r1, r5
 80218f2:	f001 fa77 	bl	8022de4 <_mbrtowc_r>
 80218f6:	1c42      	adds	r2, r0, #1
 80218f8:	6238      	str	r0, [r7, #32]
 80218fa:	f43f ab6c 	beq.w	8020fd6 <__ssvfiscanf_r+0x202>
 80218fe:	68fb      	ldr	r3, [r7, #12]
 8021900:	bb80      	cbnz	r0, 8021964 <__ssvfiscanf_r+0xb90>
 8021902:	6028      	str	r0, [r5, #0]
 8021904:	6828      	ldr	r0, [r5, #0]
 8021906:	60fb      	str	r3, [r7, #12]
 8021908:	f001 fa46 	bl	8022d98 <iswspace>
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	4602      	mov	r2, r0
 8021910:	2800      	cmp	r0, #0
 8021912:	d047      	beq.n	80219a4 <__ssvfiscanf_r+0xbd0>
 8021914:	2b00      	cmp	r3, #0
 8021916:	d139      	bne.n	802198c <__ssvfiscanf_r+0xbb8>
 8021918:	f1b8 0f00 	cmp.w	r8, #0
 802191c:	f47f af65 	bne.w	80217ea <__ssvfiscanf_r+0xa16>
 8021920:	f8c5 8000 	str.w	r8, [r5]
 8021924:	f1ba 0f00 	cmp.w	sl, #0
 8021928:	d00c      	beq.n	8021944 <__ssvfiscanf_r+0xb70>
 802192a:	1ba9      	subs	r1, r5, r6
 802192c:	108b      	asrs	r3, r1, #2
 802192e:	3301      	adds	r3, #1
 8021930:	4599      	cmp	r9, r3
 8021932:	d907      	bls.n	8021944 <__ssvfiscanf_r+0xb70>
 8021934:	f8da 0000 	ldr.w	r0, [sl]
 8021938:	3104      	adds	r1, #4
 802193a:	f001 fa91 	bl	8022e60 <realloc>
 802193e:	b108      	cbz	r0, 8021944 <__ssvfiscanf_r+0xb70>
 8021940:	f8ca 0000 	str.w	r0, [sl]
 8021944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021946:	3301      	adds	r3, #1
 8021948:	627b      	str	r3, [r7, #36]	; 0x24
 802194a:	e74e      	b.n	80217ea <__ssvfiscanf_r+0xa16>
 802194c:	f04f 0900 	mov.w	r9, #0
 8021950:	61be      	str	r6, [r7, #24]
 8021952:	46ca      	mov	sl, r9
 8021954:	464e      	mov	r6, r9
 8021956:	f107 0534 	add.w	r5, r7, #52	; 0x34
 802195a:	e796      	b.n	802188a <__ssvfiscanf_r+0xab6>
 802195c:	46c1      	mov	r9, r8
 802195e:	4646      	mov	r6, r8
 8021960:	46c2      	mov	sl, r8
 8021962:	e792      	b.n	802188a <__ssvfiscanf_r+0xab6>
 8021964:	6a3a      	ldr	r2, [r7, #32]
 8021966:	3202      	adds	r2, #2
 8021968:	d1cc      	bne.n	8021904 <__ssvfiscanf_r+0xb30>
 802196a:	461a      	mov	r2, r3
 802196c:	6863      	ldr	r3, [r4, #4]
 802196e:	2b00      	cmp	r3, #0
 8021970:	dc8c      	bgt.n	802188c <__ssvfiscanf_r+0xab8>
 8021972:	ee18 0a10 	vmov	r0, s16
 8021976:	4621      	mov	r1, r4
 8021978:	60fa      	str	r2, [r7, #12]
 802197a:	f7ff f9d5 	bl	8020d28 <__ssrefill_r>
 802197e:	68fa      	ldr	r2, [r7, #12]
 8021980:	2800      	cmp	r0, #0
 8021982:	d083      	beq.n	802188c <__ssvfiscanf_r+0xab8>
 8021984:	2a00      	cmp	r2, #0
 8021986:	f47f ab26 	bne.w	8020fd6 <__ssvfiscanf_r+0x202>
 802198a:	e7c5      	b.n	8021918 <__ssvfiscanf_r+0xb44>
 802198c:	3b01      	subs	r3, #1
 802198e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021992:	ee18 0a10 	vmov	r0, s16
 8021996:	5cc9      	ldrb	r1, [r1, r3]
 8021998:	62bb      	str	r3, [r7, #40]	; 0x28
 802199a:	4622      	mov	r2, r4
 802199c:	f7ff f987 	bl	8020cae <_sungetc_r>
 80219a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219a2:	e7b7      	b.n	8021914 <__ssvfiscanf_r+0xb40>
 80219a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80219a6:	4419      	add	r1, r3
 80219a8:	6a3b      	ldr	r3, [r7, #32]
 80219aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80219ac:	2b03      	cmp	r3, #3
 80219ae:	d102      	bne.n	80219b6 <__ssvfiscanf_r+0xbe2>
 80219b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80219b2:	2b04      	cmp	r3, #4
 80219b4:	d002      	beq.n	80219bc <__ssvfiscanf_r+0xbe8>
 80219b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219b8:	3b01      	subs	r3, #1
 80219ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80219bc:	f1b8 0f00 	cmp.w	r8, #0
 80219c0:	d1d4      	bne.n	802196c <__ssvfiscanf_r+0xb98>
 80219c2:	3504      	adds	r5, #4
 80219c4:	f1ba 0f00 	cmp.w	sl, #0
 80219c8:	d015      	beq.n	80219f6 <__ssvfiscanf_r+0xc22>
 80219ca:	1bab      	subs	r3, r5, r6
 80219cc:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 80219d0:	d80f      	bhi.n	80219f2 <__ssvfiscanf_r+0xc1e>
 80219d2:	4630      	mov	r0, r6
 80219d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80219d8:	60fb      	str	r3, [r7, #12]
 80219da:	f001 fa41 	bl	8022e60 <realloc>
 80219de:	4606      	mov	r6, r0
 80219e0:	2800      	cmp	r0, #0
 80219e2:	f43f ab9a 	beq.w	802111a <__ssvfiscanf_r+0x346>
 80219e6:	68fb      	ldr	r3, [r7, #12]
 80219e8:	f8ca 0000 	str.w	r0, [sl]
 80219ec:	18c5      	adds	r5, r0, r3
 80219ee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80219f2:	4642      	mov	r2, r8
 80219f4:	e7ba      	b.n	802196c <__ssvfiscanf_r+0xb98>
 80219f6:	4652      	mov	r2, sl
 80219f8:	e7b8      	b.n	802196c <__ssvfiscanf_r+0xb98>
 80219fa:	f1b8 0f00 	cmp.w	r8, #0
 80219fe:	d01a      	beq.n	8021a36 <__ssvfiscanf_r+0xc62>
 8021a00:	6823      	ldr	r3, [r4, #0]
 8021a02:	494e      	ldr	r1, [pc, #312]	; (8021b3c <__ssvfiscanf_r+0xd68>)
 8021a04:	781a      	ldrb	r2, [r3, #0]
 8021a06:	5c52      	ldrb	r2, [r2, r1]
 8021a08:	0711      	lsls	r1, r2, #28
 8021a0a:	f53f ae65 	bmi.w	80216d8 <__ssvfiscanf_r+0x904>
 8021a0e:	3301      	adds	r3, #1
 8021a10:	6862      	ldr	r2, [r4, #4]
 8021a12:	6023      	str	r3, [r4, #0]
 8021a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a16:	3501      	adds	r5, #1
 8021a18:	3a01      	subs	r2, #1
 8021a1a:	42ab      	cmp	r3, r5
 8021a1c:	6062      	str	r2, [r4, #4]
 8021a1e:	f43f ae5b 	beq.w	80216d8 <__ssvfiscanf_r+0x904>
 8021a22:	2a00      	cmp	r2, #0
 8021a24:	dcec      	bgt.n	8021a00 <__ssvfiscanf_r+0xc2c>
 8021a26:	ee18 0a10 	vmov	r0, s16
 8021a2a:	4621      	mov	r1, r4
 8021a2c:	f7ff f97c 	bl	8020d28 <__ssrefill_r>
 8021a30:	2800      	cmp	r0, #0
 8021a32:	d0e5      	beq.n	8021a00 <__ssvfiscanf_r+0xc2c>
 8021a34:	e650      	b.n	80216d8 <__ssvfiscanf_r+0x904>
 8021a36:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8021a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8021a3e:	d07b      	beq.n	8021b38 <__ssvfiscanf_r+0xd64>
 8021a40:	2d00      	cmp	r5, #0
 8021a42:	f43f aa21 	beq.w	8020e88 <__ssvfiscanf_r+0xb4>
 8021a46:	2020      	movs	r0, #32
 8021a48:	f7fe f9de 	bl	801fe08 <malloc>
 8021a4c:	4681      	mov	r9, r0
 8021a4e:	2800      	cmp	r0, #0
 8021a50:	f43f aac7 	beq.w	8020fe2 <__ssvfiscanf_r+0x20e>
 8021a54:	f8bb a006 	ldrh.w	sl, [fp, #6]
 8021a58:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 8021a5c:	6028      	str	r0, [r5, #0]
 8021a5e:	45c2      	cmp	sl, r8
 8021a60:	d313      	bcc.n	8021a8a <__ssvfiscanf_r+0xcb6>
 8021a62:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8021a66:	4598      	cmp	r8, r3
 8021a68:	f63f ab60 	bhi.w	802112c <__ssvfiscanf_r+0x358>
 8021a6c:	f108 0808 	add.w	r8, r8, #8
 8021a70:	f8db 0000 	ldr.w	r0, [fp]
 8021a74:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8021a78:	f001 f9f2 	bl	8022e60 <realloc>
 8021a7c:	2800      	cmp	r0, #0
 8021a7e:	f43f ab55 	beq.w	802112c <__ssvfiscanf_r+0x358>
 8021a82:	f8cb 0000 	str.w	r0, [fp]
 8021a86:	f8ab 8004 	strh.w	r8, [fp, #4]
 8021a8a:	f8db 3000 	ldr.w	r3, [fp]
 8021a8e:	f10a 0201 	add.w	r2, sl, #1
 8021a92:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8021a96:	f8ab 2006 	strh.w	r2, [fp, #6]
 8021a9a:	46aa      	mov	sl, r5
 8021a9c:	464d      	mov	r5, r9
 8021a9e:	f04f 0920 	mov.w	r9, #32
 8021aa2:	46a8      	mov	r8, r5
 8021aa4:	6823      	ldr	r3, [r4, #0]
 8021aa6:	4925      	ldr	r1, [pc, #148]	; (8021b3c <__ssvfiscanf_r+0xd68>)
 8021aa8:	781a      	ldrb	r2, [r3, #0]
 8021aaa:	5c52      	ldrb	r2, [r2, r1]
 8021aac:	0712      	lsls	r2, r2, #28
 8021aae:	d42b      	bmi.n	8021b08 <__ssvfiscanf_r+0xd34>
 8021ab0:	6862      	ldr	r2, [r4, #4]
 8021ab2:	3a01      	subs	r2, #1
 8021ab4:	6062      	str	r2, [r4, #4]
 8021ab6:	1c5a      	adds	r2, r3, #1
 8021ab8:	6022      	str	r2, [r4, #0]
 8021aba:	781b      	ldrb	r3, [r3, #0]
 8021abc:	f805 3b01 	strb.w	r3, [r5], #1
 8021ac0:	f1ba 0f00 	cmp.w	sl, #0
 8021ac4:	d012      	beq.n	8021aec <__ssvfiscanf_r+0xd18>
 8021ac6:	eba5 0308 	sub.w	r3, r5, r8
 8021aca:	454b      	cmp	r3, r9
 8021acc:	d30e      	bcc.n	8021aec <__ssvfiscanf_r+0xd18>
 8021ace:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021ad2:	4640      	mov	r0, r8
 8021ad4:	4649      	mov	r1, r9
 8021ad6:	61bb      	str	r3, [r7, #24]
 8021ad8:	f001 f9c2 	bl	8022e60 <realloc>
 8021adc:	4680      	mov	r8, r0
 8021ade:	2800      	cmp	r0, #0
 8021ae0:	f43f aa7f 	beq.w	8020fe2 <__ssvfiscanf_r+0x20e>
 8021ae4:	69bb      	ldr	r3, [r7, #24]
 8021ae6:	f8ca 0000 	str.w	r0, [sl]
 8021aea:	18c5      	adds	r5, r0, r3
 8021aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aee:	3b01      	subs	r3, #1
 8021af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8021af2:	d009      	beq.n	8021b08 <__ssvfiscanf_r+0xd34>
 8021af4:	6863      	ldr	r3, [r4, #4]
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	dcd4      	bgt.n	8021aa4 <__ssvfiscanf_r+0xcd0>
 8021afa:	ee18 0a10 	vmov	r0, s16
 8021afe:	4621      	mov	r1, r4
 8021b00:	f7ff f912 	bl	8020d28 <__ssrefill_r>
 8021b04:	2800      	cmp	r0, #0
 8021b06:	d0cd      	beq.n	8021aa4 <__ssvfiscanf_r+0xcd0>
 8021b08:	2300      	movs	r3, #0
 8021b0a:	702b      	strb	r3, [r5, #0]
 8021b0c:	eba5 0508 	sub.w	r5, r5, r8
 8021b10:	f1ba 0f00 	cmp.w	sl, #0
 8021b14:	d009      	beq.n	8021b2a <__ssvfiscanf_r+0xd56>
 8021b16:	1c69      	adds	r1, r5, #1
 8021b18:	4589      	cmp	r9, r1
 8021b1a:	d906      	bls.n	8021b2a <__ssvfiscanf_r+0xd56>
 8021b1c:	f8da 0000 	ldr.w	r0, [sl]
 8021b20:	f001 f99e 	bl	8022e60 <realloc>
 8021b24:	b108      	cbz	r0, 8021b2a <__ssvfiscanf_r+0xd56>
 8021b26:	f8ca 0000 	str.w	r0, [sl]
 8021b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b2c:	442b      	add	r3, r5
 8021b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b32:	3301      	adds	r3, #1
 8021b34:	f7ff b96a 	b.w	8020e0c <__ssvfiscanf_r+0x38>
 8021b38:	46ca      	mov	sl, r9
 8021b3a:	e7b2      	b.n	8021aa2 <__ssvfiscanf_r+0xcce>
 8021b3c:	08029f31 	.word	0x08029f31
 8021b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b42:	3b01      	subs	r3, #1
 8021b44:	2b26      	cmp	r3, #38	; 0x26
 8021b46:	bf81      	itttt	hi
 8021b48:	6abb      	ldrhi	r3, [r7, #40]	; 0x28
 8021b4a:	f1a3 0527 	subhi.w	r5, r3, #39	; 0x27
 8021b4e:	2327      	movhi	r3, #39	; 0x27
 8021b50:	62bb      	strhi	r3, [r7, #40]	; 0x28
 8021b52:	bf98      	it	ls
 8021b54:	2500      	movls	r5, #0
 8021b56:	f449 6958 	orr.w	r9, r9, #3456	; 0xd80
 8021b5a:	f04f 0a00 	mov.w	sl, #0
 8021b5e:	f107 0848 	add.w	r8, r7, #72	; 0x48
 8021b62:	6822      	ldr	r2, [r4, #0]
 8021b64:	7813      	ldrb	r3, [r2, #0]
 8021b66:	2b39      	cmp	r3, #57	; 0x39
 8021b68:	d80f      	bhi.n	8021b8a <__ssvfiscanf_r+0xdb6>
 8021b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8021b6c:	d91a      	bls.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021b6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8021b72:	290e      	cmp	r1, #14
 8021b74:	d816      	bhi.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021b76:	e8df f001 	tbb	[pc, r1]
 8021b7a:	1577      	.short	0x1577
 8021b7c:	41151577 	.word	0x41151577
 8021b80:	67676767 	.word	0x67676767
 8021b84:	6f676767 	.word	0x6f676767
 8021b88:	6f          	.byte	0x6f
 8021b89:	00          	.byte	0x00
 8021b8a:	2b66      	cmp	r3, #102	; 0x66
 8021b8c:	d834      	bhi.n	8021bf8 <__ssvfiscanf_r+0xe24>
 8021b8e:	2b60      	cmp	r3, #96	; 0x60
 8021b90:	d803      	bhi.n	8021b9a <__ssvfiscanf_r+0xdc6>
 8021b92:	2b46      	cmp	r3, #70	; 0x46
 8021b94:	d804      	bhi.n	8021ba0 <__ssvfiscanf_r+0xdcc>
 8021b96:	2b40      	cmp	r3, #64	; 0x40
 8021b98:	d904      	bls.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021b9a:	69f9      	ldr	r1, [r7, #28]
 8021b9c:	290a      	cmp	r1, #10
 8021b9e:	e061      	b.n	8021c64 <__ssvfiscanf_r+0xe90>
 8021ba0:	2b58      	cmp	r3, #88	; 0x58
 8021ba2:	d067      	beq.n	8021c74 <__ssvfiscanf_r+0xea0>
 8021ba4:	f419 7f80 	tst.w	r9, #256	; 0x100
 8021ba8:	d012      	beq.n	8021bd0 <__ssvfiscanf_r+0xdfc>
 8021baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021bae:	4598      	cmp	r8, r3
 8021bb0:	d909      	bls.n	8021bc6 <__ssvfiscanf_r+0xdf2>
 8021bb2:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8021bb6:	ee18 0a10 	vmov	r0, s16
 8021bba:	4622      	mov	r2, r4
 8021bbc:	f7ff f877 	bl	8020cae <_sungetc_r>
 8021bc0:	f108 35ff 	add.w	r5, r8, #4294967295
 8021bc4:	46a8      	mov	r8, r5
 8021bc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021bca:	4598      	cmp	r8, r3
 8021bcc:	f43f a95c 	beq.w	8020e88 <__ssvfiscanf_r+0xb4>
 8021bd0:	f019 0210 	ands.w	r2, r9, #16
 8021bd4:	d16b      	bne.n	8021cae <__ssvfiscanf_r+0xeda>
 8021bd6:	697d      	ldr	r5, [r7, #20]
 8021bd8:	69fb      	ldr	r3, [r7, #28]
 8021bda:	f888 2000 	strb.w	r2, [r8]
 8021bde:	ee18 0a10 	vmov	r0, s16
 8021be2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021be6:	47a8      	blx	r5
 8021be8:	f019 0f20 	tst.w	r9, #32
 8021bec:	f106 0504 	add.w	r5, r6, #4
 8021bf0:	d054      	beq.n	8021c9c <__ssvfiscanf_r+0xec8>
 8021bf2:	6833      	ldr	r3, [r6, #0]
 8021bf4:	6018      	str	r0, [r3, #0]
 8021bf6:	e056      	b.n	8021ca6 <__ssvfiscanf_r+0xed2>
 8021bf8:	2b78      	cmp	r3, #120	; 0x78
 8021bfa:	e7d2      	b.n	8021ba2 <__ssvfiscanf_r+0xdce>
 8021bfc:	f419 6f00 	tst.w	r9, #2048	; 0x800
 8021c00:	d00a      	beq.n	8021c18 <__ssvfiscanf_r+0xe44>
 8021c02:	69f9      	ldr	r1, [r7, #28]
 8021c04:	b919      	cbnz	r1, 8021c0e <__ssvfiscanf_r+0xe3a>
 8021c06:	2108      	movs	r1, #8
 8021c08:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 8021c0c:	61f9      	str	r1, [r7, #28]
 8021c0e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8021c12:	d004      	beq.n	8021c1e <__ssvfiscanf_r+0xe4a>
 8021c14:	f429 69b0 	bic.w	r9, r9, #1408	; 0x580
 8021c18:	f808 3b01 	strb.w	r3, [r8], #1
 8021c1c:	e008      	b.n	8021c30 <__ssvfiscanf_r+0xe5c>
 8021c1e:	f429 7960 	bic.w	r9, r9, #896	; 0x380
 8021c22:	b11d      	cbz	r5, 8021c2c <__ssvfiscanf_r+0xe58>
 8021c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c26:	3301      	adds	r3, #1
 8021c28:	3d01      	subs	r5, #1
 8021c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c2c:	f10a 0a01 	add.w	sl, sl, #1
 8021c30:	6863      	ldr	r3, [r4, #4]
 8021c32:	3b01      	subs	r3, #1
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	6063      	str	r3, [r4, #4]
 8021c38:	dd28      	ble.n	8021c8c <__ssvfiscanf_r+0xeb8>
 8021c3a:	3201      	adds	r2, #1
 8021c3c:	6022      	str	r2, [r4, #0]
 8021c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c40:	3b01      	subs	r3, #1
 8021c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c44:	d18d      	bne.n	8021b62 <__ssvfiscanf_r+0xd8e>
 8021c46:	e7ad      	b.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021c48:	69f8      	ldr	r0, [r7, #28]
 8021c4a:	4932      	ldr	r1, [pc, #200]	; (8021d14 <__ssvfiscanf_r+0xf40>)
 8021c4c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021c50:	61f9      	str	r1, [r7, #28]
 8021c52:	f429 6938 	bic.w	r9, r9, #2944	; 0xb80
 8021c56:	e7df      	b.n	8021c18 <__ssvfiscanf_r+0xe44>
 8021c58:	69f8      	ldr	r0, [r7, #28]
 8021c5a:	492e      	ldr	r1, [pc, #184]	; (8021d14 <__ssvfiscanf_r+0xf40>)
 8021c5c:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8021c60:	61f9      	str	r1, [r7, #28]
 8021c62:	2908      	cmp	r1, #8
 8021c64:	dcf5      	bgt.n	8021c52 <__ssvfiscanf_r+0xe7e>
 8021c66:	e79d      	b.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021c68:	f019 0f80 	tst.w	r9, #128	; 0x80
 8021c6c:	d09a      	beq.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021c6e:	f029 0980 	bic.w	r9, r9, #128	; 0x80
 8021c72:	e7d1      	b.n	8021c18 <__ssvfiscanf_r+0xe44>
 8021c74:	f409 61c0 	and.w	r1, r9, #1536	; 0x600
 8021c78:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021c7c:	d192      	bne.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021c7e:	f429 7900 	bic.w	r9, r9, #512	; 0x200
 8021c82:	2110      	movs	r1, #16
 8021c84:	f449 69a0 	orr.w	r9, r9, #1280	; 0x500
 8021c88:	61f9      	str	r1, [r7, #28]
 8021c8a:	e7c5      	b.n	8021c18 <__ssvfiscanf_r+0xe44>
 8021c8c:	ee18 0a10 	vmov	r0, s16
 8021c90:	4621      	mov	r1, r4
 8021c92:	f7ff f849 	bl	8020d28 <__ssrefill_r>
 8021c96:	2800      	cmp	r0, #0
 8021c98:	d0d1      	beq.n	8021c3e <__ssvfiscanf_r+0xe6a>
 8021c9a:	e783      	b.n	8021ba4 <__ssvfiscanf_r+0xdd0>
 8021c9c:	f019 0f08 	tst.w	r9, #8
 8021ca0:	d00e      	beq.n	8021cc0 <__ssvfiscanf_r+0xeec>
 8021ca2:	6833      	ldr	r3, [r6, #0]
 8021ca4:	7018      	strb	r0, [r3, #0]
 8021ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ca8:	3301      	adds	r3, #1
 8021caa:	627b      	str	r3, [r7, #36]	; 0x24
 8021cac:	462e      	mov	r6, r5
 8021cae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021cb2:	eba8 0803 	sub.w	r8, r8, r3
 8021cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cb8:	44c2      	add	sl, r8
 8021cba:	4453      	add	r3, sl
 8021cbc:	f7ff b982 	b.w	8020fc4 <__ssvfiscanf_r+0x1f0>
 8021cc0:	f019 0f04 	tst.w	r9, #4
 8021cc4:	d002      	beq.n	8021ccc <__ssvfiscanf_r+0xef8>
 8021cc6:	6833      	ldr	r3, [r6, #0]
 8021cc8:	8018      	strh	r0, [r3, #0]
 8021cca:	e7ec      	b.n	8021ca6 <__ssvfiscanf_r+0xed2>
 8021ccc:	f019 0201 	ands.w	r2, r9, #1
 8021cd0:	d18f      	bne.n	8021bf2 <__ssvfiscanf_r+0xe1e>
 8021cd2:	f019 0f02 	tst.w	r9, #2
 8021cd6:	d08c      	beq.n	8021bf2 <__ssvfiscanf_r+0xe1e>
 8021cd8:	4b0f      	ldr	r3, [pc, #60]	; (8021d18 <__ssvfiscanf_r+0xf44>)
 8021cda:	6979      	ldr	r1, [r7, #20]
 8021cdc:	4299      	cmp	r1, r3
 8021cde:	ee18 0a10 	vmov	r0, s16
 8021ce2:	69fb      	ldr	r3, [r7, #28]
 8021ce4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8021ce8:	d105      	bne.n	8021cf6 <__ssvfiscanf_r+0xf22>
 8021cea:	f001 fbd3 	bl	8023494 <_strtoull_r>
 8021cee:	6833      	ldr	r3, [r6, #0]
 8021cf0:	e9c3 0100 	strd	r0, r1, [r3]
 8021cf4:	e7d7      	b.n	8021ca6 <__ssvfiscanf_r+0xed2>
 8021cf6:	f001 fb31 	bl	802335c <_strtoll_r>
 8021cfa:	e7f8      	b.n	8021cee <__ssvfiscanf_r+0xf1a>
 8021cfc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021d00:	6818      	ldr	r0, [r3, #0]
 8021d02:	f7fe f889 	bl	801fe18 <free>
 8021d06:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8021d0a:	3401      	adds	r4, #1
 8021d0c:	601e      	str	r6, [r3, #0]
 8021d0e:	f7ff ba0f 	b.w	8021130 <__ssvfiscanf_r+0x35c>
 8021d12:	bf00      	nop
 8021d14:	0802a384 	.word	0x0802a384
 8021d18:	08020ba1 	.word	0x08020ba1

08021d1c <sysconf>:
 8021d1c:	2808      	cmp	r0, #8
 8021d1e:	b508      	push	{r3, lr}
 8021d20:	d006      	beq.n	8021d30 <sysconf+0x14>
 8021d22:	f7fd fc95 	bl	801f650 <__errno>
 8021d26:	2316      	movs	r3, #22
 8021d28:	6003      	str	r3, [r0, #0]
 8021d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8021d2e:	bd08      	pop	{r3, pc}
 8021d30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8021d34:	e7fb      	b.n	8021d2e <sysconf+0x12>

08021d36 <__submore>:
 8021d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d3a:	460c      	mov	r4, r1
 8021d3c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8021d3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8021d42:	4299      	cmp	r1, r3
 8021d44:	d11d      	bne.n	8021d82 <__submore+0x4c>
 8021d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021d4a:	f7fe f86d 	bl	801fe28 <_malloc_r>
 8021d4e:	b918      	cbnz	r0, 8021d58 <__submore+0x22>
 8021d50:	f04f 30ff 	mov.w	r0, #4294967295
 8021d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8021d5e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8021d62:	6320      	str	r0, [r4, #48]	; 0x30
 8021d64:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021d68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8021d6c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021d70:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8021d74:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021d78:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021d7c:	6020      	str	r0, [r4, #0]
 8021d7e:	2000      	movs	r0, #0
 8021d80:	e7e8      	b.n	8021d54 <__submore+0x1e>
 8021d82:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8021d84:	0077      	lsls	r7, r6, #1
 8021d86:	463a      	mov	r2, r7
 8021d88:	f001 f872 	bl	8022e70 <_realloc_r>
 8021d8c:	4605      	mov	r5, r0
 8021d8e:	2800      	cmp	r0, #0
 8021d90:	d0de      	beq.n	8021d50 <__submore+0x1a>
 8021d92:	eb00 0806 	add.w	r8, r0, r6
 8021d96:	4601      	mov	r1, r0
 8021d98:	4632      	mov	r2, r6
 8021d9a:	4640      	mov	r0, r8
 8021d9c:	f7f9 faf8 	bl	801b390 <memcpy>
 8021da0:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 8021da4:	f8c4 8000 	str.w	r8, [r4]
 8021da8:	e7e9      	b.n	8021d7e <__submore+0x48>

08021daa <__sprint_r>:
 8021daa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dae:	6893      	ldr	r3, [r2, #8]
 8021db0:	4680      	mov	r8, r0
 8021db2:	460f      	mov	r7, r1
 8021db4:	4614      	mov	r4, r2
 8021db6:	b91b      	cbnz	r3, 8021dc0 <__sprint_r+0x16>
 8021db8:	6053      	str	r3, [r2, #4]
 8021dba:	4618      	mov	r0, r3
 8021dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8021dc2:	049d      	lsls	r5, r3, #18
 8021dc4:	d520      	bpl.n	8021e08 <__sprint_r+0x5e>
 8021dc6:	6815      	ldr	r5, [r2, #0]
 8021dc8:	3508      	adds	r5, #8
 8021dca:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8021dce:	f04f 0900 	mov.w	r9, #0
 8021dd2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8021dd6:	45ca      	cmp	sl, r9
 8021dd8:	dc0b      	bgt.n	8021df2 <__sprint_r+0x48>
 8021dda:	68a3      	ldr	r3, [r4, #8]
 8021ddc:	f026 0003 	bic.w	r0, r6, #3
 8021de0:	1a18      	subs	r0, r3, r0
 8021de2:	60a0      	str	r0, [r4, #8]
 8021de4:	3508      	adds	r5, #8
 8021de6:	2800      	cmp	r0, #0
 8021de8:	d1ef      	bne.n	8021dca <__sprint_r+0x20>
 8021dea:	2300      	movs	r3, #0
 8021dec:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8021df0:	e7e4      	b.n	8021dbc <__sprint_r+0x12>
 8021df2:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8021df6:	463a      	mov	r2, r7
 8021df8:	4640      	mov	r0, r8
 8021dfa:	f000 fe36 	bl	8022a6a <_fputwc_r>
 8021dfe:	1c43      	adds	r3, r0, #1
 8021e00:	d0f3      	beq.n	8021dea <__sprint_r+0x40>
 8021e02:	f109 0901 	add.w	r9, r9, #1
 8021e06:	e7e6      	b.n	8021dd6 <__sprint_r+0x2c>
 8021e08:	f000 fe6c 	bl	8022ae4 <__sfvwrite_r>
 8021e0c:	e7ed      	b.n	8021dea <__sprint_r+0x40>
	...

08021e10 <_vfiprintf_r>:
 8021e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e14:	ed2d 8b02 	vpush	{d8}
 8021e18:	b0b9      	sub	sp, #228	; 0xe4
 8021e1a:	460f      	mov	r7, r1
 8021e1c:	9201      	str	r2, [sp, #4]
 8021e1e:	461d      	mov	r5, r3
 8021e20:	461c      	mov	r4, r3
 8021e22:	4681      	mov	r9, r0
 8021e24:	b118      	cbz	r0, 8021e2e <_vfiprintf_r+0x1e>
 8021e26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8021e28:	b90b      	cbnz	r3, 8021e2e <_vfiprintf_r+0x1e>
 8021e2a:	f7fd fd11 	bl	801f850 <__sinit>
 8021e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021e30:	07d8      	lsls	r0, r3, #31
 8021e32:	d405      	bmi.n	8021e40 <_vfiprintf_r+0x30>
 8021e34:	89bb      	ldrh	r3, [r7, #12]
 8021e36:	0599      	lsls	r1, r3, #22
 8021e38:	d402      	bmi.n	8021e40 <_vfiprintf_r+0x30>
 8021e3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021e3c:	f7fd ff75 	bl	801fd2a <__retarget_lock_acquire_recursive>
 8021e40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8021e44:	049a      	lsls	r2, r3, #18
 8021e46:	d406      	bmi.n	8021e56 <_vfiprintf_r+0x46>
 8021e48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021e4c:	81bb      	strh	r3, [r7, #12]
 8021e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021e54:	667b      	str	r3, [r7, #100]	; 0x64
 8021e56:	89bb      	ldrh	r3, [r7, #12]
 8021e58:	071e      	lsls	r6, r3, #28
 8021e5a:	d501      	bpl.n	8021e60 <_vfiprintf_r+0x50>
 8021e5c:	693b      	ldr	r3, [r7, #16]
 8021e5e:	b9bb      	cbnz	r3, 8021e90 <_vfiprintf_r+0x80>
 8021e60:	4639      	mov	r1, r7
 8021e62:	4648      	mov	r0, r9
 8021e64:	f7fc fd16 	bl	801e894 <__swsetup_r>
 8021e68:	b190      	cbz	r0, 8021e90 <_vfiprintf_r+0x80>
 8021e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021e6c:	07d8      	lsls	r0, r3, #31
 8021e6e:	d508      	bpl.n	8021e82 <_vfiprintf_r+0x72>
 8021e70:	f04f 33ff 	mov.w	r3, #4294967295
 8021e74:	9302      	str	r3, [sp, #8]
 8021e76:	9802      	ldr	r0, [sp, #8]
 8021e78:	b039      	add	sp, #228	; 0xe4
 8021e7a:	ecbd 8b02 	vpop	{d8}
 8021e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e82:	89bb      	ldrh	r3, [r7, #12]
 8021e84:	0599      	lsls	r1, r3, #22
 8021e86:	d4f3      	bmi.n	8021e70 <_vfiprintf_r+0x60>
 8021e88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021e8a:	f7fd ff50 	bl	801fd2e <__retarget_lock_release_recursive>
 8021e8e:	e7ef      	b.n	8021e70 <_vfiprintf_r+0x60>
 8021e90:	89bb      	ldrh	r3, [r7, #12]
 8021e92:	f003 021a 	and.w	r2, r3, #26
 8021e96:	2a0a      	cmp	r2, #10
 8021e98:	d113      	bne.n	8021ec2 <_vfiprintf_r+0xb2>
 8021e9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021e9e:	2a00      	cmp	r2, #0
 8021ea0:	db0f      	blt.n	8021ec2 <_vfiprintf_r+0xb2>
 8021ea2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021ea4:	07d2      	lsls	r2, r2, #31
 8021ea6:	d404      	bmi.n	8021eb2 <_vfiprintf_r+0xa2>
 8021ea8:	059e      	lsls	r6, r3, #22
 8021eaa:	d402      	bmi.n	8021eb2 <_vfiprintf_r+0xa2>
 8021eac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8021eae:	f7fd ff3e 	bl	801fd2e <__retarget_lock_release_recursive>
 8021eb2:	9a01      	ldr	r2, [sp, #4]
 8021eb4:	462b      	mov	r3, r5
 8021eb6:	4639      	mov	r1, r7
 8021eb8:	4648      	mov	r0, r9
 8021eba:	f000 fc31 	bl	8022720 <__sbprintf>
 8021ebe:	9002      	str	r0, [sp, #8]
 8021ec0:	e7d9      	b.n	8021e76 <_vfiprintf_r+0x66>
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8021ec8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021ecc:	ae0f      	add	r6, sp, #60	; 0x3c
 8021ece:	ee08 3a10 	vmov	s16, r3
 8021ed2:	960c      	str	r6, [sp, #48]	; 0x30
 8021ed4:	9307      	str	r3, [sp, #28]
 8021ed6:	9302      	str	r3, [sp, #8]
 8021ed8:	9b01      	ldr	r3, [sp, #4]
 8021eda:	461d      	mov	r5, r3
 8021edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ee0:	b10a      	cbz	r2, 8021ee6 <_vfiprintf_r+0xd6>
 8021ee2:	2a25      	cmp	r2, #37	; 0x25
 8021ee4:	d1f9      	bne.n	8021eda <_vfiprintf_r+0xca>
 8021ee6:	9b01      	ldr	r3, [sp, #4]
 8021ee8:	ebb5 0803 	subs.w	r8, r5, r3
 8021eec:	d00d      	beq.n	8021f0a <_vfiprintf_r+0xfa>
 8021eee:	e9c6 3800 	strd	r3, r8, [r6]
 8021ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ef4:	4443      	add	r3, r8
 8021ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8021ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021efa:	3301      	adds	r3, #1
 8021efc:	2b07      	cmp	r3, #7
 8021efe:	930d      	str	r3, [sp, #52]	; 0x34
 8021f00:	dc75      	bgt.n	8021fee <_vfiprintf_r+0x1de>
 8021f02:	3608      	adds	r6, #8
 8021f04:	9b02      	ldr	r3, [sp, #8]
 8021f06:	4443      	add	r3, r8
 8021f08:	9302      	str	r3, [sp, #8]
 8021f0a:	782b      	ldrb	r3, [r5, #0]
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	f000 83c8 	beq.w	80226a2 <_vfiprintf_r+0x892>
 8021f12:	2300      	movs	r3, #0
 8021f14:	f04f 31ff 	mov.w	r1, #4294967295
 8021f18:	1c6a      	adds	r2, r5, #1
 8021f1a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8021f1e:	9100      	str	r1, [sp, #0]
 8021f20:	9303      	str	r3, [sp, #12]
 8021f22:	469a      	mov	sl, r3
 8021f24:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021f28:	9201      	str	r2, [sp, #4]
 8021f2a:	f1a3 0220 	sub.w	r2, r3, #32
 8021f2e:	2a5a      	cmp	r2, #90	; 0x5a
 8021f30:	f200 8310 	bhi.w	8022554 <_vfiprintf_r+0x744>
 8021f34:	e8df f012 	tbh	[pc, r2, lsl #1]
 8021f38:	030e0099 	.word	0x030e0099
 8021f3c:	00a1030e 	.word	0x00a1030e
 8021f40:	030e030e 	.word	0x030e030e
 8021f44:	0080030e 	.word	0x0080030e
 8021f48:	030e030e 	.word	0x030e030e
 8021f4c:	00ae00a4 	.word	0x00ae00a4
 8021f50:	00ab030e 	.word	0x00ab030e
 8021f54:	030e00b0 	.word	0x030e00b0
 8021f58:	00ce00cb 	.word	0x00ce00cb
 8021f5c:	00ce00ce 	.word	0x00ce00ce
 8021f60:	00ce00ce 	.word	0x00ce00ce
 8021f64:	00ce00ce 	.word	0x00ce00ce
 8021f68:	00ce00ce 	.word	0x00ce00ce
 8021f6c:	030e030e 	.word	0x030e030e
 8021f70:	030e030e 	.word	0x030e030e
 8021f74:	030e030e 	.word	0x030e030e
 8021f78:	030e030e 	.word	0x030e030e
 8021f7c:	00f8030e 	.word	0x00f8030e
 8021f80:	030e0106 	.word	0x030e0106
 8021f84:	030e030e 	.word	0x030e030e
 8021f88:	030e030e 	.word	0x030e030e
 8021f8c:	030e030e 	.word	0x030e030e
 8021f90:	030e030e 	.word	0x030e030e
 8021f94:	014d030e 	.word	0x014d030e
 8021f98:	030e030e 	.word	0x030e030e
 8021f9c:	0192030e 	.word	0x0192030e
 8021fa0:	0270030e 	.word	0x0270030e
 8021fa4:	030e030e 	.word	0x030e030e
 8021fa8:	030e028e 	.word	0x030e028e
 8021fac:	030e030e 	.word	0x030e030e
 8021fb0:	030e030e 	.word	0x030e030e
 8021fb4:	030e030e 	.word	0x030e030e
 8021fb8:	030e030e 	.word	0x030e030e
 8021fbc:	00f8030e 	.word	0x00f8030e
 8021fc0:	030e0108 	.word	0x030e0108
 8021fc4:	030e030e 	.word	0x030e030e
 8021fc8:	010800de 	.word	0x010800de
 8021fcc:	030e00f2 	.word	0x030e00f2
 8021fd0:	030e00eb 	.word	0x030e00eb
 8021fd4:	014f0130 	.word	0x014f0130
 8021fd8:	00f20182 	.word	0x00f20182
 8021fdc:	0192030e 	.word	0x0192030e
 8021fe0:	02720097 	.word	0x02720097
 8021fe4:	030e030e 	.word	0x030e030e
 8021fe8:	030e0065 	.word	0x030e0065
 8021fec:	0097      	.short	0x0097
 8021fee:	aa0c      	add	r2, sp, #48	; 0x30
 8021ff0:	4639      	mov	r1, r7
 8021ff2:	4648      	mov	r0, r9
 8021ff4:	f7ff fed9 	bl	8021daa <__sprint_r>
 8021ff8:	2800      	cmp	r0, #0
 8021ffa:	f040 8331 	bne.w	8022660 <_vfiprintf_r+0x850>
 8021ffe:	ae0f      	add	r6, sp, #60	; 0x3c
 8022000:	e780      	b.n	8021f04 <_vfiprintf_r+0xf4>
 8022002:	4a95      	ldr	r2, [pc, #596]	; (8022258 <_vfiprintf_r+0x448>)
 8022004:	9205      	str	r2, [sp, #20]
 8022006:	f01a 0f20 	tst.w	sl, #32
 802200a:	f000 8225 	beq.w	8022458 <_vfiprintf_r+0x648>
 802200e:	3407      	adds	r4, #7
 8022010:	f024 0b07 	bic.w	fp, r4, #7
 8022014:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022018:	f01a 0f01 	tst.w	sl, #1
 802201c:	d009      	beq.n	8022032 <_vfiprintf_r+0x222>
 802201e:	ea54 0205 	orrs.w	r2, r4, r5
 8022022:	bf1f      	itttt	ne
 8022024:	2230      	movne	r2, #48	; 0x30
 8022026:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 802202a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 802202e:	f04a 0a02 	orrne.w	sl, sl, #2
 8022032:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8022036:	e10d      	b.n	8022254 <_vfiprintf_r+0x444>
 8022038:	4648      	mov	r0, r9
 802203a:	f7fd fe6f 	bl	801fd1c <_localeconv_r>
 802203e:	6843      	ldr	r3, [r0, #4]
 8022040:	4618      	mov	r0, r3
 8022042:	ee08 3a10 	vmov	s16, r3
 8022046:	f7de f8ed 	bl	8000224 <strlen>
 802204a:	9007      	str	r0, [sp, #28]
 802204c:	4648      	mov	r0, r9
 802204e:	f7fd fe65 	bl	801fd1c <_localeconv_r>
 8022052:	6883      	ldr	r3, [r0, #8]
 8022054:	9306      	str	r3, [sp, #24]
 8022056:	9b07      	ldr	r3, [sp, #28]
 8022058:	b12b      	cbz	r3, 8022066 <_vfiprintf_r+0x256>
 802205a:	9b06      	ldr	r3, [sp, #24]
 802205c:	b11b      	cbz	r3, 8022066 <_vfiprintf_r+0x256>
 802205e:	781b      	ldrb	r3, [r3, #0]
 8022060:	b10b      	cbz	r3, 8022066 <_vfiprintf_r+0x256>
 8022062:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8022066:	9a01      	ldr	r2, [sp, #4]
 8022068:	e75c      	b.n	8021f24 <_vfiprintf_r+0x114>
 802206a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 802206e:	2b00      	cmp	r3, #0
 8022070:	d1f9      	bne.n	8022066 <_vfiprintf_r+0x256>
 8022072:	2320      	movs	r3, #32
 8022074:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022078:	e7f5      	b.n	8022066 <_vfiprintf_r+0x256>
 802207a:	f04a 0a01 	orr.w	sl, sl, #1
 802207e:	e7f2      	b.n	8022066 <_vfiprintf_r+0x256>
 8022080:	f854 3b04 	ldr.w	r3, [r4], #4
 8022084:	9303      	str	r3, [sp, #12]
 8022086:	2b00      	cmp	r3, #0
 8022088:	daed      	bge.n	8022066 <_vfiprintf_r+0x256>
 802208a:	425b      	negs	r3, r3
 802208c:	9303      	str	r3, [sp, #12]
 802208e:	f04a 0a04 	orr.w	sl, sl, #4
 8022092:	e7e8      	b.n	8022066 <_vfiprintf_r+0x256>
 8022094:	232b      	movs	r3, #43	; 0x2b
 8022096:	e7ed      	b.n	8022074 <_vfiprintf_r+0x264>
 8022098:	9a01      	ldr	r2, [sp, #4]
 802209a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802209e:	2b2a      	cmp	r3, #42	; 0x2a
 80220a0:	d112      	bne.n	80220c8 <_vfiprintf_r+0x2b8>
 80220a2:	f854 0b04 	ldr.w	r0, [r4], #4
 80220a6:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80220aa:	e9cd 3200 	strd	r3, r2, [sp]
 80220ae:	e7da      	b.n	8022066 <_vfiprintf_r+0x256>
 80220b0:	9b00      	ldr	r3, [sp, #0]
 80220b2:	200a      	movs	r0, #10
 80220b4:	fb00 1303 	mla	r3, r0, r3, r1
 80220b8:	9300      	str	r3, [sp, #0]
 80220ba:	f812 3b01 	ldrb.w	r3, [r2], #1
 80220be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80220c2:	2909      	cmp	r1, #9
 80220c4:	d9f4      	bls.n	80220b0 <_vfiprintf_r+0x2a0>
 80220c6:	e72f      	b.n	8021f28 <_vfiprintf_r+0x118>
 80220c8:	2100      	movs	r1, #0
 80220ca:	9100      	str	r1, [sp, #0]
 80220cc:	e7f7      	b.n	80220be <_vfiprintf_r+0x2ae>
 80220ce:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80220d2:	e7c8      	b.n	8022066 <_vfiprintf_r+0x256>
 80220d4:	2100      	movs	r1, #0
 80220d6:	9a01      	ldr	r2, [sp, #4]
 80220d8:	9103      	str	r1, [sp, #12]
 80220da:	9903      	ldr	r1, [sp, #12]
 80220dc:	3b30      	subs	r3, #48	; 0x30
 80220de:	200a      	movs	r0, #10
 80220e0:	fb00 3301 	mla	r3, r0, r1, r3
 80220e4:	9303      	str	r3, [sp, #12]
 80220e6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80220ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80220ee:	2909      	cmp	r1, #9
 80220f0:	d9f3      	bls.n	80220da <_vfiprintf_r+0x2ca>
 80220f2:	e719      	b.n	8021f28 <_vfiprintf_r+0x118>
 80220f4:	9b01      	ldr	r3, [sp, #4]
 80220f6:	781b      	ldrb	r3, [r3, #0]
 80220f8:	2b68      	cmp	r3, #104	; 0x68
 80220fa:	bf01      	itttt	eq
 80220fc:	9b01      	ldreq	r3, [sp, #4]
 80220fe:	3301      	addeq	r3, #1
 8022100:	9301      	streq	r3, [sp, #4]
 8022102:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8022106:	bf18      	it	ne
 8022108:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 802210c:	e7ab      	b.n	8022066 <_vfiprintf_r+0x256>
 802210e:	9b01      	ldr	r3, [sp, #4]
 8022110:	781b      	ldrb	r3, [r3, #0]
 8022112:	2b6c      	cmp	r3, #108	; 0x6c
 8022114:	d105      	bne.n	8022122 <_vfiprintf_r+0x312>
 8022116:	9b01      	ldr	r3, [sp, #4]
 8022118:	3301      	adds	r3, #1
 802211a:	9301      	str	r3, [sp, #4]
 802211c:	f04a 0a20 	orr.w	sl, sl, #32
 8022120:	e7a1      	b.n	8022066 <_vfiprintf_r+0x256>
 8022122:	f04a 0a10 	orr.w	sl, sl, #16
 8022126:	e79e      	b.n	8022066 <_vfiprintf_r+0x256>
 8022128:	46a3      	mov	fp, r4
 802212a:	2100      	movs	r1, #0
 802212c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8022130:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022134:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022138:	2301      	movs	r3, #1
 802213a:	9300      	str	r3, [sp, #0]
 802213c:	460d      	mov	r5, r1
 802213e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8022142:	e0a0      	b.n	8022286 <_vfiprintf_r+0x476>
 8022144:	f04a 0a10 	orr.w	sl, sl, #16
 8022148:	f01a 0f20 	tst.w	sl, #32
 802214c:	d011      	beq.n	8022172 <_vfiprintf_r+0x362>
 802214e:	3407      	adds	r4, #7
 8022150:	f024 0b07 	bic.w	fp, r4, #7
 8022154:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8022158:	2c00      	cmp	r4, #0
 802215a:	f175 0300 	sbcs.w	r3, r5, #0
 802215e:	da06      	bge.n	802216e <_vfiprintf_r+0x35e>
 8022160:	4264      	negs	r4, r4
 8022162:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8022166:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802216a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802216e:	2301      	movs	r3, #1
 8022170:	e03f      	b.n	80221f2 <_vfiprintf_r+0x3e2>
 8022172:	f01a 0f10 	tst.w	sl, #16
 8022176:	f104 0b04 	add.w	fp, r4, #4
 802217a:	d002      	beq.n	8022182 <_vfiprintf_r+0x372>
 802217c:	6824      	ldr	r4, [r4, #0]
 802217e:	17e5      	asrs	r5, r4, #31
 8022180:	e7ea      	b.n	8022158 <_vfiprintf_r+0x348>
 8022182:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022186:	6824      	ldr	r4, [r4, #0]
 8022188:	d001      	beq.n	802218e <_vfiprintf_r+0x37e>
 802218a:	b224      	sxth	r4, r4
 802218c:	e7f7      	b.n	802217e <_vfiprintf_r+0x36e>
 802218e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022192:	bf18      	it	ne
 8022194:	b264      	sxtbne	r4, r4
 8022196:	e7f2      	b.n	802217e <_vfiprintf_r+0x36e>
 8022198:	f01a 0f20 	tst.w	sl, #32
 802219c:	f854 3b04 	ldr.w	r3, [r4], #4
 80221a0:	d005      	beq.n	80221ae <_vfiprintf_r+0x39e>
 80221a2:	9a02      	ldr	r2, [sp, #8]
 80221a4:	4610      	mov	r0, r2
 80221a6:	17d1      	asrs	r1, r2, #31
 80221a8:	e9c3 0100 	strd	r0, r1, [r3]
 80221ac:	e694      	b.n	8021ed8 <_vfiprintf_r+0xc8>
 80221ae:	f01a 0f10 	tst.w	sl, #16
 80221b2:	d002      	beq.n	80221ba <_vfiprintf_r+0x3aa>
 80221b4:	9a02      	ldr	r2, [sp, #8]
 80221b6:	601a      	str	r2, [r3, #0]
 80221b8:	e68e      	b.n	8021ed8 <_vfiprintf_r+0xc8>
 80221ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80221be:	d002      	beq.n	80221c6 <_vfiprintf_r+0x3b6>
 80221c0:	9a02      	ldr	r2, [sp, #8]
 80221c2:	801a      	strh	r2, [r3, #0]
 80221c4:	e688      	b.n	8021ed8 <_vfiprintf_r+0xc8>
 80221c6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80221ca:	d0f3      	beq.n	80221b4 <_vfiprintf_r+0x3a4>
 80221cc:	9a02      	ldr	r2, [sp, #8]
 80221ce:	701a      	strb	r2, [r3, #0]
 80221d0:	e682      	b.n	8021ed8 <_vfiprintf_r+0xc8>
 80221d2:	f04a 0a10 	orr.w	sl, sl, #16
 80221d6:	f01a 0f20 	tst.w	sl, #32
 80221da:	d01d      	beq.n	8022218 <_vfiprintf_r+0x408>
 80221dc:	3407      	adds	r4, #7
 80221de:	f024 0b07 	bic.w	fp, r4, #7
 80221e2:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80221e6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80221ea:	2300      	movs	r3, #0
 80221ec:	2200      	movs	r2, #0
 80221ee:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 80221f2:	9a00      	ldr	r2, [sp, #0]
 80221f4:	3201      	adds	r2, #1
 80221f6:	f000 8261 	beq.w	80226bc <_vfiprintf_r+0x8ac>
 80221fa:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80221fe:	9204      	str	r2, [sp, #16]
 8022200:	ea54 0205 	orrs.w	r2, r4, r5
 8022204:	f040 8260 	bne.w	80226c8 <_vfiprintf_r+0x8b8>
 8022208:	9a00      	ldr	r2, [sp, #0]
 802220a:	2a00      	cmp	r2, #0
 802220c:	f000 8197 	beq.w	802253e <_vfiprintf_r+0x72e>
 8022210:	2b01      	cmp	r3, #1
 8022212:	f040 825c 	bne.w	80226ce <_vfiprintf_r+0x8be>
 8022216:	e135      	b.n	8022484 <_vfiprintf_r+0x674>
 8022218:	f01a 0f10 	tst.w	sl, #16
 802221c:	f104 0b04 	add.w	fp, r4, #4
 8022220:	d001      	beq.n	8022226 <_vfiprintf_r+0x416>
 8022222:	6824      	ldr	r4, [r4, #0]
 8022224:	e003      	b.n	802222e <_vfiprintf_r+0x41e>
 8022226:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802222a:	d002      	beq.n	8022232 <_vfiprintf_r+0x422>
 802222c:	8824      	ldrh	r4, [r4, #0]
 802222e:	2500      	movs	r5, #0
 8022230:	e7d9      	b.n	80221e6 <_vfiprintf_r+0x3d6>
 8022232:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022236:	d0f4      	beq.n	8022222 <_vfiprintf_r+0x412>
 8022238:	7824      	ldrb	r4, [r4, #0]
 802223a:	e7f8      	b.n	802222e <_vfiprintf_r+0x41e>
 802223c:	46a3      	mov	fp, r4
 802223e:	f647 0330 	movw	r3, #30768	; 0x7830
 8022242:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022246:	f85b 4b04 	ldr.w	r4, [fp], #4
 802224a:	4b03      	ldr	r3, [pc, #12]	; (8022258 <_vfiprintf_r+0x448>)
 802224c:	9305      	str	r3, [sp, #20]
 802224e:	2500      	movs	r5, #0
 8022250:	f04a 0a02 	orr.w	sl, sl, #2
 8022254:	2302      	movs	r3, #2
 8022256:	e7c9      	b.n	80221ec <_vfiprintf_r+0x3dc>
 8022258:	0802a108 	.word	0x0802a108
 802225c:	9b00      	ldr	r3, [sp, #0]
 802225e:	46a3      	mov	fp, r4
 8022260:	2500      	movs	r5, #0
 8022262:	1c5c      	adds	r4, r3, #1
 8022264:	f85b 8b04 	ldr.w	r8, [fp], #4
 8022268:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 802226c:	f000 80cf 	beq.w	802240e <_vfiprintf_r+0x5fe>
 8022270:	461a      	mov	r2, r3
 8022272:	4629      	mov	r1, r5
 8022274:	4640      	mov	r0, r8
 8022276:	f7dd ffe3 	bl	8000240 <memchr>
 802227a:	2800      	cmp	r0, #0
 802227c:	f000 8174 	beq.w	8022568 <_vfiprintf_r+0x758>
 8022280:	eba0 0308 	sub.w	r3, r0, r8
 8022284:	9300      	str	r3, [sp, #0]
 8022286:	9b00      	ldr	r3, [sp, #0]
 8022288:	42ab      	cmp	r3, r5
 802228a:	bfb8      	it	lt
 802228c:	462b      	movlt	r3, r5
 802228e:	9304      	str	r3, [sp, #16]
 8022290:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8022294:	b113      	cbz	r3, 802229c <_vfiprintf_r+0x48c>
 8022296:	9b04      	ldr	r3, [sp, #16]
 8022298:	3301      	adds	r3, #1
 802229a:	9304      	str	r3, [sp, #16]
 802229c:	f01a 0302 	ands.w	r3, sl, #2
 80222a0:	9308      	str	r3, [sp, #32]
 80222a2:	bf1e      	ittt	ne
 80222a4:	9b04      	ldrne	r3, [sp, #16]
 80222a6:	3302      	addne	r3, #2
 80222a8:	9304      	strne	r3, [sp, #16]
 80222aa:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 80222ae:	9309      	str	r3, [sp, #36]	; 0x24
 80222b0:	d11f      	bne.n	80222f2 <_vfiprintf_r+0x4e2>
 80222b2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80222b6:	1a9c      	subs	r4, r3, r2
 80222b8:	2c00      	cmp	r4, #0
 80222ba:	dd1a      	ble.n	80222f2 <_vfiprintf_r+0x4e2>
 80222bc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80222c0:	48b9      	ldr	r0, [pc, #740]	; (80225a8 <_vfiprintf_r+0x798>)
 80222c2:	6030      	str	r0, [r6, #0]
 80222c4:	2c10      	cmp	r4, #16
 80222c6:	f103 0301 	add.w	r3, r3, #1
 80222ca:	f106 0108 	add.w	r1, r6, #8
 80222ce:	f300 814d 	bgt.w	802256c <_vfiprintf_r+0x75c>
 80222d2:	6074      	str	r4, [r6, #4]
 80222d4:	2b07      	cmp	r3, #7
 80222d6:	4414      	add	r4, r2
 80222d8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80222dc:	f340 8158 	ble.w	8022590 <_vfiprintf_r+0x780>
 80222e0:	aa0c      	add	r2, sp, #48	; 0x30
 80222e2:	4639      	mov	r1, r7
 80222e4:	4648      	mov	r0, r9
 80222e6:	f7ff fd60 	bl	8021daa <__sprint_r>
 80222ea:	2800      	cmp	r0, #0
 80222ec:	f040 81b8 	bne.w	8022660 <_vfiprintf_r+0x850>
 80222f0:	ae0f      	add	r6, sp, #60	; 0x3c
 80222f2:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80222f6:	b173      	cbz	r3, 8022316 <_vfiprintf_r+0x506>
 80222f8:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 80222fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222fe:	6032      	str	r2, [r6, #0]
 8022300:	2201      	movs	r2, #1
 8022302:	6072      	str	r2, [r6, #4]
 8022304:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022306:	3301      	adds	r3, #1
 8022308:	3201      	adds	r2, #1
 802230a:	2b07      	cmp	r3, #7
 802230c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022310:	f300 8140 	bgt.w	8022594 <_vfiprintf_r+0x784>
 8022314:	3608      	adds	r6, #8
 8022316:	9b08      	ldr	r3, [sp, #32]
 8022318:	b16b      	cbz	r3, 8022336 <_vfiprintf_r+0x526>
 802231a:	aa0b      	add	r2, sp, #44	; 0x2c
 802231c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802231e:	6032      	str	r2, [r6, #0]
 8022320:	2202      	movs	r2, #2
 8022322:	6072      	str	r2, [r6, #4]
 8022324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022326:	3301      	adds	r3, #1
 8022328:	3202      	adds	r2, #2
 802232a:	2b07      	cmp	r3, #7
 802232c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022330:	f300 8140 	bgt.w	80225b4 <_vfiprintf_r+0x7a4>
 8022334:	3608      	adds	r6, #8
 8022336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022338:	2b80      	cmp	r3, #128	; 0x80
 802233a:	d11f      	bne.n	802237c <_vfiprintf_r+0x56c>
 802233c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8022340:	1a9c      	subs	r4, r3, r2
 8022342:	2c00      	cmp	r4, #0
 8022344:	dd1a      	ble.n	802237c <_vfiprintf_r+0x56c>
 8022346:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 802234a:	4898      	ldr	r0, [pc, #608]	; (80225ac <_vfiprintf_r+0x79c>)
 802234c:	6030      	str	r0, [r6, #0]
 802234e:	2c10      	cmp	r4, #16
 8022350:	f103 0301 	add.w	r3, r3, #1
 8022354:	f106 0108 	add.w	r1, r6, #8
 8022358:	f300 8135 	bgt.w	80225c6 <_vfiprintf_r+0x7b6>
 802235c:	6074      	str	r4, [r6, #4]
 802235e:	2b07      	cmp	r3, #7
 8022360:	4414      	add	r4, r2
 8022362:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8022366:	f340 8140 	ble.w	80225ea <_vfiprintf_r+0x7da>
 802236a:	aa0c      	add	r2, sp, #48	; 0x30
 802236c:	4639      	mov	r1, r7
 802236e:	4648      	mov	r0, r9
 8022370:	f7ff fd1b 	bl	8021daa <__sprint_r>
 8022374:	2800      	cmp	r0, #0
 8022376:	f040 8173 	bne.w	8022660 <_vfiprintf_r+0x850>
 802237a:	ae0f      	add	r6, sp, #60	; 0x3c
 802237c:	9b00      	ldr	r3, [sp, #0]
 802237e:	1aec      	subs	r4, r5, r3
 8022380:	2c00      	cmp	r4, #0
 8022382:	dd1a      	ble.n	80223ba <_vfiprintf_r+0x5aa>
 8022384:	4d89      	ldr	r5, [pc, #548]	; (80225ac <_vfiprintf_r+0x79c>)
 8022386:	6035      	str	r5, [r6, #0]
 8022388:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 802238c:	2c10      	cmp	r4, #16
 802238e:	f103 0301 	add.w	r3, r3, #1
 8022392:	f106 0208 	add.w	r2, r6, #8
 8022396:	f300 812a 	bgt.w	80225ee <_vfiprintf_r+0x7de>
 802239a:	6074      	str	r4, [r6, #4]
 802239c:	2b07      	cmp	r3, #7
 802239e:	440c      	add	r4, r1
 80223a0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80223a4:	f340 8134 	ble.w	8022610 <_vfiprintf_r+0x800>
 80223a8:	aa0c      	add	r2, sp, #48	; 0x30
 80223aa:	4639      	mov	r1, r7
 80223ac:	4648      	mov	r0, r9
 80223ae:	f7ff fcfc 	bl	8021daa <__sprint_r>
 80223b2:	2800      	cmp	r0, #0
 80223b4:	f040 8154 	bne.w	8022660 <_vfiprintf_r+0x850>
 80223b8:	ae0f      	add	r6, sp, #60	; 0x3c
 80223ba:	9b00      	ldr	r3, [sp, #0]
 80223bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80223be:	6073      	str	r3, [r6, #4]
 80223c0:	4418      	add	r0, r3
 80223c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80223c4:	f8c6 8000 	str.w	r8, [r6]
 80223c8:	3301      	adds	r3, #1
 80223ca:	2b07      	cmp	r3, #7
 80223cc:	900e      	str	r0, [sp, #56]	; 0x38
 80223ce:	930d      	str	r3, [sp, #52]	; 0x34
 80223d0:	f300 8120 	bgt.w	8022614 <_vfiprintf_r+0x804>
 80223d4:	f106 0308 	add.w	r3, r6, #8
 80223d8:	f01a 0f04 	tst.w	sl, #4
 80223dc:	f040 8122 	bne.w	8022624 <_vfiprintf_r+0x814>
 80223e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80223e4:	9904      	ldr	r1, [sp, #16]
 80223e6:	428a      	cmp	r2, r1
 80223e8:	bfac      	ite	ge
 80223ea:	189b      	addge	r3, r3, r2
 80223ec:	185b      	addlt	r3, r3, r1
 80223ee:	9302      	str	r3, [sp, #8]
 80223f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80223f2:	b13b      	cbz	r3, 8022404 <_vfiprintf_r+0x5f4>
 80223f4:	aa0c      	add	r2, sp, #48	; 0x30
 80223f6:	4639      	mov	r1, r7
 80223f8:	4648      	mov	r0, r9
 80223fa:	f7ff fcd6 	bl	8021daa <__sprint_r>
 80223fe:	2800      	cmp	r0, #0
 8022400:	f040 812e 	bne.w	8022660 <_vfiprintf_r+0x850>
 8022404:	2300      	movs	r3, #0
 8022406:	930d      	str	r3, [sp, #52]	; 0x34
 8022408:	465c      	mov	r4, fp
 802240a:	ae0f      	add	r6, sp, #60	; 0x3c
 802240c:	e564      	b.n	8021ed8 <_vfiprintf_r+0xc8>
 802240e:	4640      	mov	r0, r8
 8022410:	f7dd ff08 	bl	8000224 <strlen>
 8022414:	9000      	str	r0, [sp, #0]
 8022416:	e736      	b.n	8022286 <_vfiprintf_r+0x476>
 8022418:	f04a 0a10 	orr.w	sl, sl, #16
 802241c:	f01a 0f20 	tst.w	sl, #32
 8022420:	d006      	beq.n	8022430 <_vfiprintf_r+0x620>
 8022422:	3407      	adds	r4, #7
 8022424:	f024 0b07 	bic.w	fp, r4, #7
 8022428:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 802242c:	2301      	movs	r3, #1
 802242e:	e6dd      	b.n	80221ec <_vfiprintf_r+0x3dc>
 8022430:	f01a 0f10 	tst.w	sl, #16
 8022434:	f104 0b04 	add.w	fp, r4, #4
 8022438:	d001      	beq.n	802243e <_vfiprintf_r+0x62e>
 802243a:	6824      	ldr	r4, [r4, #0]
 802243c:	e003      	b.n	8022446 <_vfiprintf_r+0x636>
 802243e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8022442:	d002      	beq.n	802244a <_vfiprintf_r+0x63a>
 8022444:	8824      	ldrh	r4, [r4, #0]
 8022446:	2500      	movs	r5, #0
 8022448:	e7f0      	b.n	802242c <_vfiprintf_r+0x61c>
 802244a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 802244e:	d0f4      	beq.n	802243a <_vfiprintf_r+0x62a>
 8022450:	7824      	ldrb	r4, [r4, #0]
 8022452:	e7f8      	b.n	8022446 <_vfiprintf_r+0x636>
 8022454:	4a56      	ldr	r2, [pc, #344]	; (80225b0 <_vfiprintf_r+0x7a0>)
 8022456:	e5d5      	b.n	8022004 <_vfiprintf_r+0x1f4>
 8022458:	f01a 0f10 	tst.w	sl, #16
 802245c:	f104 0b04 	add.w	fp, r4, #4
 8022460:	d001      	beq.n	8022466 <_vfiprintf_r+0x656>
 8022462:	6824      	ldr	r4, [r4, #0]
 8022464:	e003      	b.n	802246e <_vfiprintf_r+0x65e>
 8022466:	f01a 0f40 	tst.w	sl, #64	; 0x40
 802246a:	d002      	beq.n	8022472 <_vfiprintf_r+0x662>
 802246c:	8824      	ldrh	r4, [r4, #0]
 802246e:	2500      	movs	r5, #0
 8022470:	e5d2      	b.n	8022018 <_vfiprintf_r+0x208>
 8022472:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8022476:	d0f4      	beq.n	8022462 <_vfiprintf_r+0x652>
 8022478:	7824      	ldrb	r4, [r4, #0]
 802247a:	e7f8      	b.n	802246e <_vfiprintf_r+0x65e>
 802247c:	2d00      	cmp	r5, #0
 802247e:	bf08      	it	eq
 8022480:	2c0a      	cmpeq	r4, #10
 8022482:	d205      	bcs.n	8022490 <_vfiprintf_r+0x680>
 8022484:	3430      	adds	r4, #48	; 0x30
 8022486:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 802248a:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 802248e:	e13c      	b.n	802270a <_vfiprintf_r+0x8fa>
 8022490:	ab38      	add	r3, sp, #224	; 0xe0
 8022492:	9308      	str	r3, [sp, #32]
 8022494:	9b04      	ldr	r3, [sp, #16]
 8022496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802249a:	f04f 0a00 	mov.w	sl, #0
 802249e:	9309      	str	r3, [sp, #36]	; 0x24
 80224a0:	9b08      	ldr	r3, [sp, #32]
 80224a2:	220a      	movs	r2, #10
 80224a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80224a8:	4620      	mov	r0, r4
 80224aa:	2300      	movs	r3, #0
 80224ac:	4629      	mov	r1, r5
 80224ae:	f7de fbfb 	bl	8000ca8 <__aeabi_uldivmod>
 80224b2:	9b08      	ldr	r3, [sp, #32]
 80224b4:	3230      	adds	r2, #48	; 0x30
 80224b6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80224ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224bc:	f10a 0a01 	add.w	sl, sl, #1
 80224c0:	b1db      	cbz	r3, 80224fa <_vfiprintf_r+0x6ea>
 80224c2:	9b06      	ldr	r3, [sp, #24]
 80224c4:	781b      	ldrb	r3, [r3, #0]
 80224c6:	4553      	cmp	r3, sl
 80224c8:	d117      	bne.n	80224fa <_vfiprintf_r+0x6ea>
 80224ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80224ce:	d014      	beq.n	80224fa <_vfiprintf_r+0x6ea>
 80224d0:	2d00      	cmp	r5, #0
 80224d2:	bf08      	it	eq
 80224d4:	2c0a      	cmpeq	r4, #10
 80224d6:	d310      	bcc.n	80224fa <_vfiprintf_r+0x6ea>
 80224d8:	9b07      	ldr	r3, [sp, #28]
 80224da:	eba8 0803 	sub.w	r8, r8, r3
 80224de:	461a      	mov	r2, r3
 80224e0:	ee18 1a10 	vmov	r1, s16
 80224e4:	4640      	mov	r0, r8
 80224e6:	f7f9 faa4 	bl	801ba32 <strncpy>
 80224ea:	9b06      	ldr	r3, [sp, #24]
 80224ec:	785b      	ldrb	r3, [r3, #1]
 80224ee:	b1a3      	cbz	r3, 802251a <_vfiprintf_r+0x70a>
 80224f0:	9b06      	ldr	r3, [sp, #24]
 80224f2:	3301      	adds	r3, #1
 80224f4:	9306      	str	r3, [sp, #24]
 80224f6:	f04f 0a00 	mov.w	sl, #0
 80224fa:	220a      	movs	r2, #10
 80224fc:	2300      	movs	r3, #0
 80224fe:	4620      	mov	r0, r4
 8022500:	4629      	mov	r1, r5
 8022502:	f7de fbd1 	bl	8000ca8 <__aeabi_uldivmod>
 8022506:	2d00      	cmp	r5, #0
 8022508:	bf08      	it	eq
 802250a:	2c0a      	cmpeq	r4, #10
 802250c:	f0c0 80fd 	bcc.w	802270a <_vfiprintf_r+0x8fa>
 8022510:	4604      	mov	r4, r0
 8022512:	460d      	mov	r5, r1
 8022514:	f8cd 8020 	str.w	r8, [sp, #32]
 8022518:	e7c2      	b.n	80224a0 <_vfiprintf_r+0x690>
 802251a:	469a      	mov	sl, r3
 802251c:	e7ed      	b.n	80224fa <_vfiprintf_r+0x6ea>
 802251e:	9a05      	ldr	r2, [sp, #20]
 8022520:	f004 030f 	and.w	r3, r4, #15
 8022524:	5cd3      	ldrb	r3, [r2, r3]
 8022526:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802252a:	0923      	lsrs	r3, r4, #4
 802252c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8022530:	092a      	lsrs	r2, r5, #4
 8022532:	461c      	mov	r4, r3
 8022534:	4615      	mov	r5, r2
 8022536:	ea54 0305 	orrs.w	r3, r4, r5
 802253a:	d1f0      	bne.n	802251e <_vfiprintf_r+0x70e>
 802253c:	e0e5      	b.n	802270a <_vfiprintf_r+0x8fa>
 802253e:	b933      	cbnz	r3, 802254e <_vfiprintf_r+0x73e>
 8022540:	f01a 0f01 	tst.w	sl, #1
 8022544:	d003      	beq.n	802254e <_vfiprintf_r+0x73e>
 8022546:	2330      	movs	r3, #48	; 0x30
 8022548:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 802254c:	e79d      	b.n	802248a <_vfiprintf_r+0x67a>
 802254e:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8022552:	e0da      	b.n	802270a <_vfiprintf_r+0x8fa>
 8022554:	2b00      	cmp	r3, #0
 8022556:	f000 80a4 	beq.w	80226a2 <_vfiprintf_r+0x892>
 802255a:	2100      	movs	r1, #0
 802255c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8022560:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8022564:	46a3      	mov	fp, r4
 8022566:	e5e7      	b.n	8022138 <_vfiprintf_r+0x328>
 8022568:	4605      	mov	r5, r0
 802256a:	e68c      	b.n	8022286 <_vfiprintf_r+0x476>
 802256c:	2010      	movs	r0, #16
 802256e:	4402      	add	r2, r0
 8022570:	2b07      	cmp	r3, #7
 8022572:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8022576:	6070      	str	r0, [r6, #4]
 8022578:	dd07      	ble.n	802258a <_vfiprintf_r+0x77a>
 802257a:	aa0c      	add	r2, sp, #48	; 0x30
 802257c:	4639      	mov	r1, r7
 802257e:	4648      	mov	r0, r9
 8022580:	f7ff fc13 	bl	8021daa <__sprint_r>
 8022584:	2800      	cmp	r0, #0
 8022586:	d16b      	bne.n	8022660 <_vfiprintf_r+0x850>
 8022588:	a90f      	add	r1, sp, #60	; 0x3c
 802258a:	3c10      	subs	r4, #16
 802258c:	460e      	mov	r6, r1
 802258e:	e695      	b.n	80222bc <_vfiprintf_r+0x4ac>
 8022590:	460e      	mov	r6, r1
 8022592:	e6ae      	b.n	80222f2 <_vfiprintf_r+0x4e2>
 8022594:	aa0c      	add	r2, sp, #48	; 0x30
 8022596:	4639      	mov	r1, r7
 8022598:	4648      	mov	r0, r9
 802259a:	f7ff fc06 	bl	8021daa <__sprint_r>
 802259e:	2800      	cmp	r0, #0
 80225a0:	d15e      	bne.n	8022660 <_vfiprintf_r+0x850>
 80225a2:	ae0f      	add	r6, sp, #60	; 0x3c
 80225a4:	e6b7      	b.n	8022316 <_vfiprintf_r+0x506>
 80225a6:	bf00      	nop
 80225a8:	0802a3a6 	.word	0x0802a3a6
 80225ac:	0802a3b6 	.word	0x0802a3b6
 80225b0:	0802a119 	.word	0x0802a119
 80225b4:	aa0c      	add	r2, sp, #48	; 0x30
 80225b6:	4639      	mov	r1, r7
 80225b8:	4648      	mov	r0, r9
 80225ba:	f7ff fbf6 	bl	8021daa <__sprint_r>
 80225be:	2800      	cmp	r0, #0
 80225c0:	d14e      	bne.n	8022660 <_vfiprintf_r+0x850>
 80225c2:	ae0f      	add	r6, sp, #60	; 0x3c
 80225c4:	e6b7      	b.n	8022336 <_vfiprintf_r+0x526>
 80225c6:	2010      	movs	r0, #16
 80225c8:	4402      	add	r2, r0
 80225ca:	2b07      	cmp	r3, #7
 80225cc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80225d0:	6070      	str	r0, [r6, #4]
 80225d2:	dd07      	ble.n	80225e4 <_vfiprintf_r+0x7d4>
 80225d4:	aa0c      	add	r2, sp, #48	; 0x30
 80225d6:	4639      	mov	r1, r7
 80225d8:	4648      	mov	r0, r9
 80225da:	f7ff fbe6 	bl	8021daa <__sprint_r>
 80225de:	2800      	cmp	r0, #0
 80225e0:	d13e      	bne.n	8022660 <_vfiprintf_r+0x850>
 80225e2:	a90f      	add	r1, sp, #60	; 0x3c
 80225e4:	3c10      	subs	r4, #16
 80225e6:	460e      	mov	r6, r1
 80225e8:	e6ad      	b.n	8022346 <_vfiprintf_r+0x536>
 80225ea:	460e      	mov	r6, r1
 80225ec:	e6c6      	b.n	802237c <_vfiprintf_r+0x56c>
 80225ee:	2010      	movs	r0, #16
 80225f0:	4401      	add	r1, r0
 80225f2:	2b07      	cmp	r3, #7
 80225f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80225f8:	6070      	str	r0, [r6, #4]
 80225fa:	dd06      	ble.n	802260a <_vfiprintf_r+0x7fa>
 80225fc:	aa0c      	add	r2, sp, #48	; 0x30
 80225fe:	4639      	mov	r1, r7
 8022600:	4648      	mov	r0, r9
 8022602:	f7ff fbd2 	bl	8021daa <__sprint_r>
 8022606:	bb58      	cbnz	r0, 8022660 <_vfiprintf_r+0x850>
 8022608:	aa0f      	add	r2, sp, #60	; 0x3c
 802260a:	3c10      	subs	r4, #16
 802260c:	4616      	mov	r6, r2
 802260e:	e6ba      	b.n	8022386 <_vfiprintf_r+0x576>
 8022610:	4616      	mov	r6, r2
 8022612:	e6d2      	b.n	80223ba <_vfiprintf_r+0x5aa>
 8022614:	aa0c      	add	r2, sp, #48	; 0x30
 8022616:	4639      	mov	r1, r7
 8022618:	4648      	mov	r0, r9
 802261a:	f7ff fbc6 	bl	8021daa <__sprint_r>
 802261e:	b9f8      	cbnz	r0, 8022660 <_vfiprintf_r+0x850>
 8022620:	ab0f      	add	r3, sp, #60	; 0x3c
 8022622:	e6d9      	b.n	80223d8 <_vfiprintf_r+0x5c8>
 8022624:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8022628:	1a54      	subs	r4, r2, r1
 802262a:	2c00      	cmp	r4, #0
 802262c:	f77f aed8 	ble.w	80223e0 <_vfiprintf_r+0x5d0>
 8022630:	4d3a      	ldr	r5, [pc, #232]	; (802271c <_vfiprintf_r+0x90c>)
 8022632:	2610      	movs	r6, #16
 8022634:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8022638:	2c10      	cmp	r4, #16
 802263a:	f102 0201 	add.w	r2, r2, #1
 802263e:	601d      	str	r5, [r3, #0]
 8022640:	dc1d      	bgt.n	802267e <_vfiprintf_r+0x86e>
 8022642:	605c      	str	r4, [r3, #4]
 8022644:	2a07      	cmp	r2, #7
 8022646:	440c      	add	r4, r1
 8022648:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 802264c:	f77f aec8 	ble.w	80223e0 <_vfiprintf_r+0x5d0>
 8022650:	aa0c      	add	r2, sp, #48	; 0x30
 8022652:	4639      	mov	r1, r7
 8022654:	4648      	mov	r0, r9
 8022656:	f7ff fba8 	bl	8021daa <__sprint_r>
 802265a:	2800      	cmp	r0, #0
 802265c:	f43f aec0 	beq.w	80223e0 <_vfiprintf_r+0x5d0>
 8022660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8022662:	07d9      	lsls	r1, r3, #31
 8022664:	d405      	bmi.n	8022672 <_vfiprintf_r+0x862>
 8022666:	89bb      	ldrh	r3, [r7, #12]
 8022668:	059a      	lsls	r2, r3, #22
 802266a:	d402      	bmi.n	8022672 <_vfiprintf_r+0x862>
 802266c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802266e:	f7fd fb5e 	bl	801fd2e <__retarget_lock_release_recursive>
 8022672:	89bb      	ldrh	r3, [r7, #12]
 8022674:	065b      	lsls	r3, r3, #25
 8022676:	f57f abfe 	bpl.w	8021e76 <_vfiprintf_r+0x66>
 802267a:	f7ff bbf9 	b.w	8021e70 <_vfiprintf_r+0x60>
 802267e:	3110      	adds	r1, #16
 8022680:	2a07      	cmp	r2, #7
 8022682:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8022686:	605e      	str	r6, [r3, #4]
 8022688:	dc02      	bgt.n	8022690 <_vfiprintf_r+0x880>
 802268a:	3308      	adds	r3, #8
 802268c:	3c10      	subs	r4, #16
 802268e:	e7d1      	b.n	8022634 <_vfiprintf_r+0x824>
 8022690:	aa0c      	add	r2, sp, #48	; 0x30
 8022692:	4639      	mov	r1, r7
 8022694:	4648      	mov	r0, r9
 8022696:	f7ff fb88 	bl	8021daa <__sprint_r>
 802269a:	2800      	cmp	r0, #0
 802269c:	d1e0      	bne.n	8022660 <_vfiprintf_r+0x850>
 802269e:	ab0f      	add	r3, sp, #60	; 0x3c
 80226a0:	e7f4      	b.n	802268c <_vfiprintf_r+0x87c>
 80226a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226a4:	b913      	cbnz	r3, 80226ac <_vfiprintf_r+0x89c>
 80226a6:	2300      	movs	r3, #0
 80226a8:	930d      	str	r3, [sp, #52]	; 0x34
 80226aa:	e7d9      	b.n	8022660 <_vfiprintf_r+0x850>
 80226ac:	aa0c      	add	r2, sp, #48	; 0x30
 80226ae:	4639      	mov	r1, r7
 80226b0:	4648      	mov	r0, r9
 80226b2:	f7ff fb7a 	bl	8021daa <__sprint_r>
 80226b6:	2800      	cmp	r0, #0
 80226b8:	d0f5      	beq.n	80226a6 <_vfiprintf_r+0x896>
 80226ba:	e7d1      	b.n	8022660 <_vfiprintf_r+0x850>
 80226bc:	ea54 0205 	orrs.w	r2, r4, r5
 80226c0:	f8cd a010 	str.w	sl, [sp, #16]
 80226c4:	f43f ada4 	beq.w	8022210 <_vfiprintf_r+0x400>
 80226c8:	2b01      	cmp	r3, #1
 80226ca:	f43f aed7 	beq.w	802247c <_vfiprintf_r+0x66c>
 80226ce:	2b02      	cmp	r3, #2
 80226d0:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 80226d4:	f43f af23 	beq.w	802251e <_vfiprintf_r+0x70e>
 80226d8:	08e2      	lsrs	r2, r4, #3
 80226da:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80226de:	08e8      	lsrs	r0, r5, #3
 80226e0:	f004 0307 	and.w	r3, r4, #7
 80226e4:	4605      	mov	r5, r0
 80226e6:	4614      	mov	r4, r2
 80226e8:	3330      	adds	r3, #48	; 0x30
 80226ea:	ea54 0205 	orrs.w	r2, r4, r5
 80226ee:	4641      	mov	r1, r8
 80226f0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80226f4:	d1f0      	bne.n	80226d8 <_vfiprintf_r+0x8c8>
 80226f6:	9a04      	ldr	r2, [sp, #16]
 80226f8:	07d0      	lsls	r0, r2, #31
 80226fa:	d506      	bpl.n	802270a <_vfiprintf_r+0x8fa>
 80226fc:	2b30      	cmp	r3, #48	; 0x30
 80226fe:	d004      	beq.n	802270a <_vfiprintf_r+0x8fa>
 8022700:	2330      	movs	r3, #48	; 0x30
 8022702:	f808 3c01 	strb.w	r3, [r8, #-1]
 8022706:	f1a1 0802 	sub.w	r8, r1, #2
 802270a:	ab38      	add	r3, sp, #224	; 0xe0
 802270c:	eba3 0308 	sub.w	r3, r3, r8
 8022710:	9d00      	ldr	r5, [sp, #0]
 8022712:	f8dd a010 	ldr.w	sl, [sp, #16]
 8022716:	9300      	str	r3, [sp, #0]
 8022718:	e5b5      	b.n	8022286 <_vfiprintf_r+0x476>
 802271a:	bf00      	nop
 802271c:	0802a3a6 	.word	0x0802a3a6

08022720 <__sbprintf>:
 8022720:	b570      	push	{r4, r5, r6, lr}
 8022722:	460c      	mov	r4, r1
 8022724:	8989      	ldrh	r1, [r1, #12]
 8022726:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 802272a:	f021 0102 	bic.w	r1, r1, #2
 802272e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8022732:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8022734:	911b      	str	r1, [sp, #108]	; 0x6c
 8022736:	89e1      	ldrh	r1, [r4, #14]
 8022738:	f8ad 1016 	strh.w	r1, [sp, #22]
 802273c:	69e1      	ldr	r1, [r4, #28]
 802273e:	9109      	str	r1, [sp, #36]	; 0x24
 8022740:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8022742:	910b      	str	r1, [sp, #44]	; 0x2c
 8022744:	a91c      	add	r1, sp, #112	; 0x70
 8022746:	9102      	str	r1, [sp, #8]
 8022748:	9106      	str	r1, [sp, #24]
 802274a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802274e:	4606      	mov	r6, r0
 8022750:	9104      	str	r1, [sp, #16]
 8022752:	9107      	str	r1, [sp, #28]
 8022754:	a818      	add	r0, sp, #96	; 0x60
 8022756:	2100      	movs	r1, #0
 8022758:	e9cd 3200 	strd	r3, r2, [sp]
 802275c:	9108      	str	r1, [sp, #32]
 802275e:	f7fd fae1 	bl	801fd24 <__retarget_lock_init_recursive>
 8022762:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022766:	a902      	add	r1, sp, #8
 8022768:	4630      	mov	r0, r6
 802276a:	f7ff fb51 	bl	8021e10 <_vfiprintf_r>
 802276e:	1e05      	subs	r5, r0, #0
 8022770:	db07      	blt.n	8022782 <__sbprintf+0x62>
 8022772:	a902      	add	r1, sp, #8
 8022774:	4630      	mov	r0, r6
 8022776:	f7fc ffff 	bl	801f778 <_fflush_r>
 802277a:	2800      	cmp	r0, #0
 802277c:	bf18      	it	ne
 802277e:	f04f 35ff 	movne.w	r5, #4294967295
 8022782:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8022786:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022788:	065b      	lsls	r3, r3, #25
 802278a:	bf42      	ittt	mi
 802278c:	89a3      	ldrhmi	r3, [r4, #12]
 802278e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8022792:	81a3      	strhmi	r3, [r4, #12]
 8022794:	f7fd fac7 	bl	801fd26 <__retarget_lock_close_recursive>
 8022798:	4628      	mov	r0, r5
 802279a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 802279e:	bd70      	pop	{r4, r5, r6, pc}

080227a0 <_write_r>:
 80227a0:	b538      	push	{r3, r4, r5, lr}
 80227a2:	4d07      	ldr	r5, [pc, #28]	; (80227c0 <_write_r+0x20>)
 80227a4:	4604      	mov	r4, r0
 80227a6:	4608      	mov	r0, r1
 80227a8:	4611      	mov	r1, r2
 80227aa:	2200      	movs	r2, #0
 80227ac:	602a      	str	r2, [r5, #0]
 80227ae:	461a      	mov	r2, r3
 80227b0:	f7de fcb3 	bl	800111a <_write>
 80227b4:	1c43      	adds	r3, r0, #1
 80227b6:	d102      	bne.n	80227be <_write_r+0x1e>
 80227b8:	682b      	ldr	r3, [r5, #0]
 80227ba:	b103      	cbz	r3, 80227be <_write_r+0x1e>
 80227bc:	6023      	str	r3, [r4, #0]
 80227be:	bd38      	pop	{r3, r4, r5, pc}
 80227c0:	2000bdec 	.word	0x2000bdec

080227c4 <__register_exitproc>:
 80227c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80227c8:	4d1c      	ldr	r5, [pc, #112]	; (802283c <__register_exitproc+0x78>)
 80227ca:	4606      	mov	r6, r0
 80227cc:	6828      	ldr	r0, [r5, #0]
 80227ce:	4698      	mov	r8, r3
 80227d0:	460f      	mov	r7, r1
 80227d2:	4691      	mov	r9, r2
 80227d4:	f7fd faa9 	bl	801fd2a <__retarget_lock_acquire_recursive>
 80227d8:	4b19      	ldr	r3, [pc, #100]	; (8022840 <__register_exitproc+0x7c>)
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80227e0:	4628      	mov	r0, r5
 80227e2:	b91c      	cbnz	r4, 80227ec <__register_exitproc+0x28>
 80227e4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80227e8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80227ec:	6865      	ldr	r5, [r4, #4]
 80227ee:	6800      	ldr	r0, [r0, #0]
 80227f0:	2d1f      	cmp	r5, #31
 80227f2:	dd05      	ble.n	8022800 <__register_exitproc+0x3c>
 80227f4:	f7fd fa9b 	bl	801fd2e <__retarget_lock_release_recursive>
 80227f8:	f04f 30ff 	mov.w	r0, #4294967295
 80227fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022800:	b19e      	cbz	r6, 802282a <__register_exitproc+0x66>
 8022802:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8022806:	2201      	movs	r2, #1
 8022808:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 802280c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8022810:	40aa      	lsls	r2, r5
 8022812:	4313      	orrs	r3, r2
 8022814:	2e02      	cmp	r6, #2
 8022816:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 802281a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 802281e:	bf02      	ittt	eq
 8022820:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8022824:	431a      	orreq	r2, r3
 8022826:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 802282a:	1c6b      	adds	r3, r5, #1
 802282c:	3502      	adds	r5, #2
 802282e:	6063      	str	r3, [r4, #4]
 8022830:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8022834:	f7fd fa7b 	bl	801fd2e <__retarget_lock_release_recursive>
 8022838:	2000      	movs	r0, #0
 802283a:	e7df      	b.n	80227fc <__register_exitproc+0x38>
 802283c:	20000470 	.word	0x20000470
 8022840:	0802a034 	.word	0x0802a034

08022844 <__assert_func>:
 8022844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022846:	4614      	mov	r4, r2
 8022848:	461a      	mov	r2, r3
 802284a:	4b09      	ldr	r3, [pc, #36]	; (8022870 <__assert_func+0x2c>)
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	4605      	mov	r5, r0
 8022850:	68d8      	ldr	r0, [r3, #12]
 8022852:	b14c      	cbz	r4, 8022868 <__assert_func+0x24>
 8022854:	4b07      	ldr	r3, [pc, #28]	; (8022874 <__assert_func+0x30>)
 8022856:	9100      	str	r1, [sp, #0]
 8022858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802285c:	4906      	ldr	r1, [pc, #24]	; (8022878 <__assert_func+0x34>)
 802285e:	462b      	mov	r3, r5
 8022860:	f000 f8b0 	bl	80229c4 <fiprintf>
 8022864:	f000 fe85 	bl	8023572 <abort>
 8022868:	4b04      	ldr	r3, [pc, #16]	; (802287c <__assert_func+0x38>)
 802286a:	461c      	mov	r4, r3
 802286c:	e7f3      	b.n	8022856 <__assert_func+0x12>
 802286e:	bf00      	nop
 8022870:	20000038 	.word	0x20000038
 8022874:	0802a3c6 	.word	0x0802a3c6
 8022878:	0802a3d3 	.word	0x0802a3d3
 802287c:	0802a401 	.word	0x0802a401

08022880 <_calloc_r>:
 8022880:	b510      	push	{r4, lr}
 8022882:	4351      	muls	r1, r2
 8022884:	f7fd fad0 	bl	801fe28 <_malloc_r>
 8022888:	4604      	mov	r4, r0
 802288a:	b198      	cbz	r0, 80228b4 <_calloc_r+0x34>
 802288c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022890:	f022 0203 	bic.w	r2, r2, #3
 8022894:	3a04      	subs	r2, #4
 8022896:	2a24      	cmp	r2, #36	; 0x24
 8022898:	d81b      	bhi.n	80228d2 <_calloc_r+0x52>
 802289a:	2a13      	cmp	r2, #19
 802289c:	d917      	bls.n	80228ce <_calloc_r+0x4e>
 802289e:	2100      	movs	r1, #0
 80228a0:	2a1b      	cmp	r2, #27
 80228a2:	e9c0 1100 	strd	r1, r1, [r0]
 80228a6:	d807      	bhi.n	80228b8 <_calloc_r+0x38>
 80228a8:	f100 0308 	add.w	r3, r0, #8
 80228ac:	2200      	movs	r2, #0
 80228ae:	e9c3 2200 	strd	r2, r2, [r3]
 80228b2:	609a      	str	r2, [r3, #8]
 80228b4:	4620      	mov	r0, r4
 80228b6:	bd10      	pop	{r4, pc}
 80228b8:	2a24      	cmp	r2, #36	; 0x24
 80228ba:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80228be:	bf11      	iteee	ne
 80228c0:	f100 0310 	addne.w	r3, r0, #16
 80228c4:	6101      	streq	r1, [r0, #16]
 80228c6:	f100 0318 	addeq.w	r3, r0, #24
 80228ca:	6141      	streq	r1, [r0, #20]
 80228cc:	e7ee      	b.n	80228ac <_calloc_r+0x2c>
 80228ce:	4603      	mov	r3, r0
 80228d0:	e7ec      	b.n	80228ac <_calloc_r+0x2c>
 80228d2:	2100      	movs	r1, #0
 80228d4:	f7f8 fd84 	bl	801b3e0 <memset>
 80228d8:	e7ec      	b.n	80228b4 <_calloc_r+0x34>
	...

080228dc <_close_r>:
 80228dc:	b538      	push	{r3, r4, r5, lr}
 80228de:	4d06      	ldr	r5, [pc, #24]	; (80228f8 <_close_r+0x1c>)
 80228e0:	2300      	movs	r3, #0
 80228e2:	4604      	mov	r4, r0
 80228e4:	4608      	mov	r0, r1
 80228e6:	602b      	str	r3, [r5, #0]
 80228e8:	f7e1 fb37 	bl	8003f5a <_close>
 80228ec:	1c43      	adds	r3, r0, #1
 80228ee:	d102      	bne.n	80228f6 <_close_r+0x1a>
 80228f0:	682b      	ldr	r3, [r5, #0]
 80228f2:	b103      	cbz	r3, 80228f6 <_close_r+0x1a>
 80228f4:	6023      	str	r3, [r4, #0]
 80228f6:	bd38      	pop	{r3, r4, r5, pc}
 80228f8:	2000bdec 	.word	0x2000bdec

080228fc <__env_lock>:
 80228fc:	4801      	ldr	r0, [pc, #4]	; (8022904 <__env_lock+0x8>)
 80228fe:	f7fd ba14 	b.w	801fd2a <__retarget_lock_acquire_recursive>
 8022902:	bf00      	nop
 8022904:	2000bdf6 	.word	0x2000bdf6

08022908 <__env_unlock>:
 8022908:	4801      	ldr	r0, [pc, #4]	; (8022910 <__env_unlock+0x8>)
 802290a:	f7fd ba10 	b.w	801fd2e <__retarget_lock_release_recursive>
 802290e:	bf00      	nop
 8022910:	2000bdf6 	.word	0x2000bdf6

08022914 <_fclose_r>:
 8022914:	b570      	push	{r4, r5, r6, lr}
 8022916:	4606      	mov	r6, r0
 8022918:	460c      	mov	r4, r1
 802291a:	b911      	cbnz	r1, 8022922 <_fclose_r+0xe>
 802291c:	2500      	movs	r5, #0
 802291e:	4628      	mov	r0, r5
 8022920:	bd70      	pop	{r4, r5, r6, pc}
 8022922:	b118      	cbz	r0, 802292c <_fclose_r+0x18>
 8022924:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8022926:	b90b      	cbnz	r3, 802292c <_fclose_r+0x18>
 8022928:	f7fc ff92 	bl	801f850 <__sinit>
 802292c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802292e:	07d8      	lsls	r0, r3, #31
 8022930:	d405      	bmi.n	802293e <_fclose_r+0x2a>
 8022932:	89a3      	ldrh	r3, [r4, #12]
 8022934:	0599      	lsls	r1, r3, #22
 8022936:	d402      	bmi.n	802293e <_fclose_r+0x2a>
 8022938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802293a:	f7fd f9f6 	bl	801fd2a <__retarget_lock_acquire_recursive>
 802293e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022942:	b93b      	cbnz	r3, 8022954 <_fclose_r+0x40>
 8022944:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8022946:	f015 0501 	ands.w	r5, r5, #1
 802294a:	d1e7      	bne.n	802291c <_fclose_r+0x8>
 802294c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802294e:	f7fd f9ee 	bl	801fd2e <__retarget_lock_release_recursive>
 8022952:	e7e4      	b.n	802291e <_fclose_r+0xa>
 8022954:	4621      	mov	r1, r4
 8022956:	4630      	mov	r0, r6
 8022958:	f7fc fe80 	bl	801f65c <__sflush_r>
 802295c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802295e:	4605      	mov	r5, r0
 8022960:	b133      	cbz	r3, 8022970 <_fclose_r+0x5c>
 8022962:	69e1      	ldr	r1, [r4, #28]
 8022964:	4630      	mov	r0, r6
 8022966:	4798      	blx	r3
 8022968:	2800      	cmp	r0, #0
 802296a:	bfb8      	it	lt
 802296c:	f04f 35ff 	movlt.w	r5, #4294967295
 8022970:	89a3      	ldrh	r3, [r4, #12]
 8022972:	061a      	lsls	r2, r3, #24
 8022974:	d503      	bpl.n	802297e <_fclose_r+0x6a>
 8022976:	6921      	ldr	r1, [r4, #16]
 8022978:	4630      	mov	r0, r6
 802297a:	f7fc fff9 	bl	801f970 <_free_r>
 802297e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022980:	b141      	cbz	r1, 8022994 <_fclose_r+0x80>
 8022982:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8022986:	4299      	cmp	r1, r3
 8022988:	d002      	beq.n	8022990 <_fclose_r+0x7c>
 802298a:	4630      	mov	r0, r6
 802298c:	f7fc fff0 	bl	801f970 <_free_r>
 8022990:	2300      	movs	r3, #0
 8022992:	6323      	str	r3, [r4, #48]	; 0x30
 8022994:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022996:	b121      	cbz	r1, 80229a2 <_fclose_r+0x8e>
 8022998:	4630      	mov	r0, r6
 802299a:	f7fc ffe9 	bl	801f970 <_free_r>
 802299e:	2300      	movs	r3, #0
 80229a0:	6463      	str	r3, [r4, #68]	; 0x44
 80229a2:	f7fc ff3d 	bl	801f820 <__sfp_lock_acquire>
 80229a6:	2300      	movs	r3, #0
 80229a8:	81a3      	strh	r3, [r4, #12]
 80229aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80229ac:	07db      	lsls	r3, r3, #31
 80229ae:	d402      	bmi.n	80229b6 <_fclose_r+0xa2>
 80229b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229b2:	f7fd f9bc 	bl	801fd2e <__retarget_lock_release_recursive>
 80229b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80229b8:	f7fd f9b5 	bl	801fd26 <__retarget_lock_close_recursive>
 80229bc:	f7fc ff36 	bl	801f82c <__sfp_lock_release>
 80229c0:	e7ad      	b.n	802291e <_fclose_r+0xa>
	...

080229c4 <fiprintf>:
 80229c4:	b40e      	push	{r1, r2, r3}
 80229c6:	b503      	push	{r0, r1, lr}
 80229c8:	4601      	mov	r1, r0
 80229ca:	ab03      	add	r3, sp, #12
 80229cc:	4805      	ldr	r0, [pc, #20]	; (80229e4 <fiprintf+0x20>)
 80229ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80229d2:	6800      	ldr	r0, [r0, #0]
 80229d4:	9301      	str	r3, [sp, #4]
 80229d6:	f7ff fa1b 	bl	8021e10 <_vfiprintf_r>
 80229da:	b002      	add	sp, #8
 80229dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80229e0:	b003      	add	sp, #12
 80229e2:	4770      	bx	lr
 80229e4:	20000038 	.word	0x20000038

080229e8 <__fputwc>:
 80229e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80229ec:	4680      	mov	r8, r0
 80229ee:	460e      	mov	r6, r1
 80229f0:	4615      	mov	r5, r2
 80229f2:	f000 f9df 	bl	8022db4 <__locale_mb_cur_max>
 80229f6:	2801      	cmp	r0, #1
 80229f8:	d11c      	bne.n	8022a34 <__fputwc+0x4c>
 80229fa:	1e73      	subs	r3, r6, #1
 80229fc:	2bfe      	cmp	r3, #254	; 0xfe
 80229fe:	d819      	bhi.n	8022a34 <__fputwc+0x4c>
 8022a00:	f88d 6004 	strb.w	r6, [sp, #4]
 8022a04:	4604      	mov	r4, r0
 8022a06:	2700      	movs	r7, #0
 8022a08:	f10d 0904 	add.w	r9, sp, #4
 8022a0c:	42a7      	cmp	r7, r4
 8022a0e:	d020      	beq.n	8022a52 <__fputwc+0x6a>
 8022a10:	68ab      	ldr	r3, [r5, #8]
 8022a12:	f817 1009 	ldrb.w	r1, [r7, r9]
 8022a16:	3b01      	subs	r3, #1
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	60ab      	str	r3, [r5, #8]
 8022a1c:	da04      	bge.n	8022a28 <__fputwc+0x40>
 8022a1e:	69aa      	ldr	r2, [r5, #24]
 8022a20:	4293      	cmp	r3, r2
 8022a22:	db1a      	blt.n	8022a5a <__fputwc+0x72>
 8022a24:	290a      	cmp	r1, #10
 8022a26:	d018      	beq.n	8022a5a <__fputwc+0x72>
 8022a28:	682b      	ldr	r3, [r5, #0]
 8022a2a:	1c5a      	adds	r2, r3, #1
 8022a2c:	602a      	str	r2, [r5, #0]
 8022a2e:	7019      	strb	r1, [r3, #0]
 8022a30:	3701      	adds	r7, #1
 8022a32:	e7eb      	b.n	8022a0c <__fputwc+0x24>
 8022a34:	4632      	mov	r2, r6
 8022a36:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8022a3a:	a901      	add	r1, sp, #4
 8022a3c:	4640      	mov	r0, r8
 8022a3e:	f000 fd75 	bl	802352c <_wcrtomb_r>
 8022a42:	1c42      	adds	r2, r0, #1
 8022a44:	4604      	mov	r4, r0
 8022a46:	d1de      	bne.n	8022a06 <__fputwc+0x1e>
 8022a48:	89ab      	ldrh	r3, [r5, #12]
 8022a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a4e:	81ab      	strh	r3, [r5, #12]
 8022a50:	4606      	mov	r6, r0
 8022a52:	4630      	mov	r0, r6
 8022a54:	b003      	add	sp, #12
 8022a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a5a:	462a      	mov	r2, r5
 8022a5c:	4640      	mov	r0, r8
 8022a5e:	f000 fd1b 	bl	8023498 <__swbuf_r>
 8022a62:	1c43      	adds	r3, r0, #1
 8022a64:	d1e4      	bne.n	8022a30 <__fputwc+0x48>
 8022a66:	4606      	mov	r6, r0
 8022a68:	e7f3      	b.n	8022a52 <__fputwc+0x6a>

08022a6a <_fputwc_r>:
 8022a6a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8022a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022a6e:	4614      	mov	r4, r2
 8022a70:	07da      	lsls	r2, r3, #31
 8022a72:	4605      	mov	r5, r0
 8022a74:	d407      	bmi.n	8022a86 <_fputwc_r+0x1c>
 8022a76:	89a3      	ldrh	r3, [r4, #12]
 8022a78:	059b      	lsls	r3, r3, #22
 8022a7a:	d404      	bmi.n	8022a86 <_fputwc_r+0x1c>
 8022a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022a7e:	9101      	str	r1, [sp, #4]
 8022a80:	f7fd f953 	bl	801fd2a <__retarget_lock_acquire_recursive>
 8022a84:	9901      	ldr	r1, [sp, #4]
 8022a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a8a:	0498      	lsls	r0, r3, #18
 8022a8c:	d406      	bmi.n	8022a9c <_fputwc_r+0x32>
 8022a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022a92:	81a3      	strh	r3, [r4, #12]
 8022a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022a96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022a9a:	6663      	str	r3, [r4, #100]	; 0x64
 8022a9c:	4622      	mov	r2, r4
 8022a9e:	4628      	mov	r0, r5
 8022aa0:	f7ff ffa2 	bl	80229e8 <__fputwc>
 8022aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022aa6:	07da      	lsls	r2, r3, #31
 8022aa8:	4605      	mov	r5, r0
 8022aaa:	d405      	bmi.n	8022ab8 <_fputwc_r+0x4e>
 8022aac:	89a3      	ldrh	r3, [r4, #12]
 8022aae:	059b      	lsls	r3, r3, #22
 8022ab0:	d402      	bmi.n	8022ab8 <_fputwc_r+0x4e>
 8022ab2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ab4:	f7fd f93b 	bl	801fd2e <__retarget_lock_release_recursive>
 8022ab8:	4628      	mov	r0, r5
 8022aba:	b003      	add	sp, #12
 8022abc:	bd30      	pop	{r4, r5, pc}
	...

08022ac0 <_fstat_r>:
 8022ac0:	b538      	push	{r3, r4, r5, lr}
 8022ac2:	4d07      	ldr	r5, [pc, #28]	; (8022ae0 <_fstat_r+0x20>)
 8022ac4:	2300      	movs	r3, #0
 8022ac6:	4604      	mov	r4, r0
 8022ac8:	4608      	mov	r0, r1
 8022aca:	4611      	mov	r1, r2
 8022acc:	602b      	str	r3, [r5, #0]
 8022ace:	f7e1 fa50 	bl	8003f72 <_fstat>
 8022ad2:	1c43      	adds	r3, r0, #1
 8022ad4:	d102      	bne.n	8022adc <_fstat_r+0x1c>
 8022ad6:	682b      	ldr	r3, [r5, #0]
 8022ad8:	b103      	cbz	r3, 8022adc <_fstat_r+0x1c>
 8022ada:	6023      	str	r3, [r4, #0]
 8022adc:	bd38      	pop	{r3, r4, r5, pc}
 8022ade:	bf00      	nop
 8022ae0:	2000bdec 	.word	0x2000bdec

08022ae4 <__sfvwrite_r>:
 8022ae4:	6893      	ldr	r3, [r2, #8]
 8022ae6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aea:	4606      	mov	r6, r0
 8022aec:	460c      	mov	r4, r1
 8022aee:	4690      	mov	r8, r2
 8022af0:	b91b      	cbnz	r3, 8022afa <__sfvwrite_r+0x16>
 8022af2:	2000      	movs	r0, #0
 8022af4:	b003      	add	sp, #12
 8022af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022afa:	898b      	ldrh	r3, [r1, #12]
 8022afc:	0718      	lsls	r0, r3, #28
 8022afe:	d550      	bpl.n	8022ba2 <__sfvwrite_r+0xbe>
 8022b00:	690b      	ldr	r3, [r1, #16]
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d04d      	beq.n	8022ba2 <__sfvwrite_r+0xbe>
 8022b06:	89a3      	ldrh	r3, [r4, #12]
 8022b08:	f8d8 7000 	ldr.w	r7, [r8]
 8022b0c:	f013 0902 	ands.w	r9, r3, #2
 8022b10:	d16c      	bne.n	8022bec <__sfvwrite_r+0x108>
 8022b12:	f013 0301 	ands.w	r3, r3, #1
 8022b16:	f000 809c 	beq.w	8022c52 <__sfvwrite_r+0x16e>
 8022b1a:	4648      	mov	r0, r9
 8022b1c:	46ca      	mov	sl, r9
 8022b1e:	46cb      	mov	fp, r9
 8022b20:	f1bb 0f00 	cmp.w	fp, #0
 8022b24:	f000 8103 	beq.w	8022d2e <__sfvwrite_r+0x24a>
 8022b28:	b950      	cbnz	r0, 8022b40 <__sfvwrite_r+0x5c>
 8022b2a:	465a      	mov	r2, fp
 8022b2c:	210a      	movs	r1, #10
 8022b2e:	4650      	mov	r0, sl
 8022b30:	f7dd fb86 	bl	8000240 <memchr>
 8022b34:	2800      	cmp	r0, #0
 8022b36:	f000 80ff 	beq.w	8022d38 <__sfvwrite_r+0x254>
 8022b3a:	3001      	adds	r0, #1
 8022b3c:	eba0 090a 	sub.w	r9, r0, sl
 8022b40:	6820      	ldr	r0, [r4, #0]
 8022b42:	6921      	ldr	r1, [r4, #16]
 8022b44:	6963      	ldr	r3, [r4, #20]
 8022b46:	45d9      	cmp	r9, fp
 8022b48:	464a      	mov	r2, r9
 8022b4a:	bf28      	it	cs
 8022b4c:	465a      	movcs	r2, fp
 8022b4e:	4288      	cmp	r0, r1
 8022b50:	f240 80f5 	bls.w	8022d3e <__sfvwrite_r+0x25a>
 8022b54:	68a5      	ldr	r5, [r4, #8]
 8022b56:	441d      	add	r5, r3
 8022b58:	42aa      	cmp	r2, r5
 8022b5a:	f340 80f0 	ble.w	8022d3e <__sfvwrite_r+0x25a>
 8022b5e:	4651      	mov	r1, sl
 8022b60:	462a      	mov	r2, r5
 8022b62:	f7f8 fc23 	bl	801b3ac <memmove>
 8022b66:	6823      	ldr	r3, [r4, #0]
 8022b68:	442b      	add	r3, r5
 8022b6a:	6023      	str	r3, [r4, #0]
 8022b6c:	4621      	mov	r1, r4
 8022b6e:	4630      	mov	r0, r6
 8022b70:	f7fc fe02 	bl	801f778 <_fflush_r>
 8022b74:	2800      	cmp	r0, #0
 8022b76:	d167      	bne.n	8022c48 <__sfvwrite_r+0x164>
 8022b78:	ebb9 0905 	subs.w	r9, r9, r5
 8022b7c:	f040 80f7 	bne.w	8022d6e <__sfvwrite_r+0x28a>
 8022b80:	4621      	mov	r1, r4
 8022b82:	4630      	mov	r0, r6
 8022b84:	f7fc fdf8 	bl	801f778 <_fflush_r>
 8022b88:	2800      	cmp	r0, #0
 8022b8a:	d15d      	bne.n	8022c48 <__sfvwrite_r+0x164>
 8022b8c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8022b90:	44aa      	add	sl, r5
 8022b92:	ebab 0b05 	sub.w	fp, fp, r5
 8022b96:	1b55      	subs	r5, r2, r5
 8022b98:	f8c8 5008 	str.w	r5, [r8, #8]
 8022b9c:	2d00      	cmp	r5, #0
 8022b9e:	d1bf      	bne.n	8022b20 <__sfvwrite_r+0x3c>
 8022ba0:	e7a7      	b.n	8022af2 <__sfvwrite_r+0xe>
 8022ba2:	4621      	mov	r1, r4
 8022ba4:	4630      	mov	r0, r6
 8022ba6:	f7fb fe75 	bl	801e894 <__swsetup_r>
 8022baa:	2800      	cmp	r0, #0
 8022bac:	d0ab      	beq.n	8022b06 <__sfvwrite_r+0x22>
 8022bae:	f04f 30ff 	mov.w	r0, #4294967295
 8022bb2:	e79f      	b.n	8022af4 <__sfvwrite_r+0x10>
 8022bb4:	e9d7 b900 	ldrd	fp, r9, [r7]
 8022bb8:	3708      	adds	r7, #8
 8022bba:	f1b9 0f00 	cmp.w	r9, #0
 8022bbe:	d0f9      	beq.n	8022bb4 <__sfvwrite_r+0xd0>
 8022bc0:	45d1      	cmp	r9, sl
 8022bc2:	464b      	mov	r3, r9
 8022bc4:	69e1      	ldr	r1, [r4, #28]
 8022bc6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022bc8:	bf28      	it	cs
 8022bca:	4653      	movcs	r3, sl
 8022bcc:	465a      	mov	r2, fp
 8022bce:	4630      	mov	r0, r6
 8022bd0:	47a8      	blx	r5
 8022bd2:	2800      	cmp	r0, #0
 8022bd4:	dd38      	ble.n	8022c48 <__sfvwrite_r+0x164>
 8022bd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022bda:	4483      	add	fp, r0
 8022bdc:	eba9 0900 	sub.w	r9, r9, r0
 8022be0:	1a18      	subs	r0, r3, r0
 8022be2:	f8c8 0008 	str.w	r0, [r8, #8]
 8022be6:	2800      	cmp	r0, #0
 8022be8:	d1e7      	bne.n	8022bba <__sfvwrite_r+0xd6>
 8022bea:	e782      	b.n	8022af2 <__sfvwrite_r+0xe>
 8022bec:	f04f 0b00 	mov.w	fp, #0
 8022bf0:	f8df a180 	ldr.w	sl, [pc, #384]	; 8022d74 <__sfvwrite_r+0x290>
 8022bf4:	46d9      	mov	r9, fp
 8022bf6:	e7e0      	b.n	8022bba <__sfvwrite_r+0xd6>
 8022bf8:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8022bfc:	3708      	adds	r7, #8
 8022bfe:	f1ba 0f00 	cmp.w	sl, #0
 8022c02:	d0f9      	beq.n	8022bf8 <__sfvwrite_r+0x114>
 8022c04:	89a3      	ldrh	r3, [r4, #12]
 8022c06:	68a2      	ldr	r2, [r4, #8]
 8022c08:	6820      	ldr	r0, [r4, #0]
 8022c0a:	0599      	lsls	r1, r3, #22
 8022c0c:	d563      	bpl.n	8022cd6 <__sfvwrite_r+0x1f2>
 8022c0e:	4552      	cmp	r2, sl
 8022c10:	d836      	bhi.n	8022c80 <__sfvwrite_r+0x19c>
 8022c12:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8022c16:	d033      	beq.n	8022c80 <__sfvwrite_r+0x19c>
 8022c18:	6921      	ldr	r1, [r4, #16]
 8022c1a:	6965      	ldr	r5, [r4, #20]
 8022c1c:	eba0 0b01 	sub.w	fp, r0, r1
 8022c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022c28:	f10b 0201 	add.w	r2, fp, #1
 8022c2c:	106d      	asrs	r5, r5, #1
 8022c2e:	4452      	add	r2, sl
 8022c30:	4295      	cmp	r5, r2
 8022c32:	bf38      	it	cc
 8022c34:	4615      	movcc	r5, r2
 8022c36:	055b      	lsls	r3, r3, #21
 8022c38:	d53d      	bpl.n	8022cb6 <__sfvwrite_r+0x1d2>
 8022c3a:	4629      	mov	r1, r5
 8022c3c:	4630      	mov	r0, r6
 8022c3e:	f7fd f8f3 	bl	801fe28 <_malloc_r>
 8022c42:	b948      	cbnz	r0, 8022c58 <__sfvwrite_r+0x174>
 8022c44:	230c      	movs	r3, #12
 8022c46:	6033      	str	r3, [r6, #0]
 8022c48:	89a3      	ldrh	r3, [r4, #12]
 8022c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c4e:	81a3      	strh	r3, [r4, #12]
 8022c50:	e7ad      	b.n	8022bae <__sfvwrite_r+0xca>
 8022c52:	4699      	mov	r9, r3
 8022c54:	469a      	mov	sl, r3
 8022c56:	e7d2      	b.n	8022bfe <__sfvwrite_r+0x11a>
 8022c58:	465a      	mov	r2, fp
 8022c5a:	6921      	ldr	r1, [r4, #16]
 8022c5c:	9001      	str	r0, [sp, #4]
 8022c5e:	f7f8 fb97 	bl	801b390 <memcpy>
 8022c62:	89a2      	ldrh	r2, [r4, #12]
 8022c64:	9b01      	ldr	r3, [sp, #4]
 8022c66:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022c6e:	81a2      	strh	r2, [r4, #12]
 8022c70:	6123      	str	r3, [r4, #16]
 8022c72:	6165      	str	r5, [r4, #20]
 8022c74:	445b      	add	r3, fp
 8022c76:	eba5 050b 	sub.w	r5, r5, fp
 8022c7a:	6023      	str	r3, [r4, #0]
 8022c7c:	4652      	mov	r2, sl
 8022c7e:	60a5      	str	r5, [r4, #8]
 8022c80:	4552      	cmp	r2, sl
 8022c82:	bf28      	it	cs
 8022c84:	4652      	movcs	r2, sl
 8022c86:	6820      	ldr	r0, [r4, #0]
 8022c88:	9201      	str	r2, [sp, #4]
 8022c8a:	4649      	mov	r1, r9
 8022c8c:	f7f8 fb8e 	bl	801b3ac <memmove>
 8022c90:	68a3      	ldr	r3, [r4, #8]
 8022c92:	9a01      	ldr	r2, [sp, #4]
 8022c94:	1a9b      	subs	r3, r3, r2
 8022c96:	60a3      	str	r3, [r4, #8]
 8022c98:	6823      	ldr	r3, [r4, #0]
 8022c9a:	441a      	add	r2, r3
 8022c9c:	4655      	mov	r5, sl
 8022c9e:	6022      	str	r2, [r4, #0]
 8022ca0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8022ca4:	44a9      	add	r9, r5
 8022ca6:	ebaa 0a05 	sub.w	sl, sl, r5
 8022caa:	1b45      	subs	r5, r0, r5
 8022cac:	f8c8 5008 	str.w	r5, [r8, #8]
 8022cb0:	2d00      	cmp	r5, #0
 8022cb2:	d1a4      	bne.n	8022bfe <__sfvwrite_r+0x11a>
 8022cb4:	e71d      	b.n	8022af2 <__sfvwrite_r+0xe>
 8022cb6:	462a      	mov	r2, r5
 8022cb8:	4630      	mov	r0, r6
 8022cba:	f000 f8d9 	bl	8022e70 <_realloc_r>
 8022cbe:	4603      	mov	r3, r0
 8022cc0:	2800      	cmp	r0, #0
 8022cc2:	d1d5      	bne.n	8022c70 <__sfvwrite_r+0x18c>
 8022cc4:	6921      	ldr	r1, [r4, #16]
 8022cc6:	4630      	mov	r0, r6
 8022cc8:	f7fc fe52 	bl	801f970 <_free_r>
 8022ccc:	89a3      	ldrh	r3, [r4, #12]
 8022cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022cd2:	81a3      	strh	r3, [r4, #12]
 8022cd4:	e7b6      	b.n	8022c44 <__sfvwrite_r+0x160>
 8022cd6:	6923      	ldr	r3, [r4, #16]
 8022cd8:	4283      	cmp	r3, r0
 8022cda:	d302      	bcc.n	8022ce2 <__sfvwrite_r+0x1fe>
 8022cdc:	6961      	ldr	r1, [r4, #20]
 8022cde:	4551      	cmp	r1, sl
 8022ce0:	d915      	bls.n	8022d0e <__sfvwrite_r+0x22a>
 8022ce2:	4552      	cmp	r2, sl
 8022ce4:	bf28      	it	cs
 8022ce6:	4652      	movcs	r2, sl
 8022ce8:	4649      	mov	r1, r9
 8022cea:	4615      	mov	r5, r2
 8022cec:	f7f8 fb5e 	bl	801b3ac <memmove>
 8022cf0:	68a3      	ldr	r3, [r4, #8]
 8022cf2:	6822      	ldr	r2, [r4, #0]
 8022cf4:	1b5b      	subs	r3, r3, r5
 8022cf6:	442a      	add	r2, r5
 8022cf8:	60a3      	str	r3, [r4, #8]
 8022cfa:	6022      	str	r2, [r4, #0]
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	d1cf      	bne.n	8022ca0 <__sfvwrite_r+0x1bc>
 8022d00:	4621      	mov	r1, r4
 8022d02:	4630      	mov	r0, r6
 8022d04:	f7fc fd38 	bl	801f778 <_fflush_r>
 8022d08:	2800      	cmp	r0, #0
 8022d0a:	d0c9      	beq.n	8022ca0 <__sfvwrite_r+0x1bc>
 8022d0c:	e79c      	b.n	8022c48 <__sfvwrite_r+0x164>
 8022d0e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8022d12:	459a      	cmp	sl, r3
 8022d14:	bf38      	it	cc
 8022d16:	4653      	movcc	r3, sl
 8022d18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022d1a:	fb93 f3f1 	sdiv	r3, r3, r1
 8022d1e:	464a      	mov	r2, r9
 8022d20:	434b      	muls	r3, r1
 8022d22:	4630      	mov	r0, r6
 8022d24:	69e1      	ldr	r1, [r4, #28]
 8022d26:	47a8      	blx	r5
 8022d28:	1e05      	subs	r5, r0, #0
 8022d2a:	dcb9      	bgt.n	8022ca0 <__sfvwrite_r+0x1bc>
 8022d2c:	e78c      	b.n	8022c48 <__sfvwrite_r+0x164>
 8022d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8022d32:	2000      	movs	r0, #0
 8022d34:	3708      	adds	r7, #8
 8022d36:	e6f3      	b.n	8022b20 <__sfvwrite_r+0x3c>
 8022d38:	f10b 0901 	add.w	r9, fp, #1
 8022d3c:	e700      	b.n	8022b40 <__sfvwrite_r+0x5c>
 8022d3e:	4293      	cmp	r3, r2
 8022d40:	dc08      	bgt.n	8022d54 <__sfvwrite_r+0x270>
 8022d42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022d44:	69e1      	ldr	r1, [r4, #28]
 8022d46:	4652      	mov	r2, sl
 8022d48:	4630      	mov	r0, r6
 8022d4a:	47a8      	blx	r5
 8022d4c:	1e05      	subs	r5, r0, #0
 8022d4e:	f73f af13 	bgt.w	8022b78 <__sfvwrite_r+0x94>
 8022d52:	e779      	b.n	8022c48 <__sfvwrite_r+0x164>
 8022d54:	4651      	mov	r1, sl
 8022d56:	9201      	str	r2, [sp, #4]
 8022d58:	f7f8 fb28 	bl	801b3ac <memmove>
 8022d5c:	9a01      	ldr	r2, [sp, #4]
 8022d5e:	68a3      	ldr	r3, [r4, #8]
 8022d60:	1a9b      	subs	r3, r3, r2
 8022d62:	60a3      	str	r3, [r4, #8]
 8022d64:	6823      	ldr	r3, [r4, #0]
 8022d66:	4413      	add	r3, r2
 8022d68:	6023      	str	r3, [r4, #0]
 8022d6a:	4615      	mov	r5, r2
 8022d6c:	e704      	b.n	8022b78 <__sfvwrite_r+0x94>
 8022d6e:	2001      	movs	r0, #1
 8022d70:	e70c      	b.n	8022b8c <__sfvwrite_r+0xa8>
 8022d72:	bf00      	nop
 8022d74:	7ffffc00 	.word	0x7ffffc00

08022d78 <_isatty_r>:
 8022d78:	b538      	push	{r3, r4, r5, lr}
 8022d7a:	4d06      	ldr	r5, [pc, #24]	; (8022d94 <_isatty_r+0x1c>)
 8022d7c:	2300      	movs	r3, #0
 8022d7e:	4604      	mov	r4, r0
 8022d80:	4608      	mov	r0, r1
 8022d82:	602b      	str	r3, [r5, #0]
 8022d84:	f7e1 f905 	bl	8003f92 <_isatty>
 8022d88:	1c43      	adds	r3, r0, #1
 8022d8a:	d102      	bne.n	8022d92 <_isatty_r+0x1a>
 8022d8c:	682b      	ldr	r3, [r5, #0]
 8022d8e:	b103      	cbz	r3, 8022d92 <_isatty_r+0x1a>
 8022d90:	6023      	str	r3, [r4, #0]
 8022d92:	bd38      	pop	{r3, r4, r5, pc}
 8022d94:	2000bdec 	.word	0x2000bdec

08022d98 <iswspace>:
 8022d98:	2100      	movs	r1, #0
 8022d9a:	f000 b801 	b.w	8022da0 <iswspace_l>
	...

08022da0 <iswspace_l>:
 8022da0:	28ff      	cmp	r0, #255	; 0xff
 8022da2:	bf9d      	ittte	ls
 8022da4:	4b02      	ldrls	r3, [pc, #8]	; (8022db0 <iswspace_l+0x10>)
 8022da6:	5cc0      	ldrbls	r0, [r0, r3]
 8022da8:	f000 0008 	andls.w	r0, r0, #8
 8022dac:	2000      	movhi	r0, #0
 8022dae:	4770      	bx	lr
 8022db0:	08029f31 	.word	0x08029f31

08022db4 <__locale_mb_cur_max>:
 8022db4:	4b01      	ldr	r3, [pc, #4]	; (8022dbc <__locale_mb_cur_max+0x8>)
 8022db6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8022dba:	4770      	bx	lr
 8022dbc:	200008e0 	.word	0x200008e0

08022dc0 <_lseek_r>:
 8022dc0:	b538      	push	{r3, r4, r5, lr}
 8022dc2:	4d07      	ldr	r5, [pc, #28]	; (8022de0 <_lseek_r+0x20>)
 8022dc4:	4604      	mov	r4, r0
 8022dc6:	4608      	mov	r0, r1
 8022dc8:	4611      	mov	r1, r2
 8022dca:	2200      	movs	r2, #0
 8022dcc:	602a      	str	r2, [r5, #0]
 8022dce:	461a      	mov	r2, r3
 8022dd0:	f7e1 f8ea 	bl	8003fa8 <_lseek>
 8022dd4:	1c43      	adds	r3, r0, #1
 8022dd6:	d102      	bne.n	8022dde <_lseek_r+0x1e>
 8022dd8:	682b      	ldr	r3, [r5, #0]
 8022dda:	b103      	cbz	r3, 8022dde <_lseek_r+0x1e>
 8022ddc:	6023      	str	r3, [r4, #0]
 8022dde:	bd38      	pop	{r3, r4, r5, pc}
 8022de0:	2000bdec 	.word	0x2000bdec

08022de4 <_mbrtowc_r>:
 8022de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022de6:	4c0a      	ldr	r4, [pc, #40]	; (8022e10 <_mbrtowc_r+0x2c>)
 8022de8:	9e08      	ldr	r6, [sp, #32]
 8022dea:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8022dee:	9600      	str	r6, [sp, #0]
 8022df0:	4605      	mov	r5, r0
 8022df2:	4614      	mov	r4, r2
 8022df4:	b912      	cbnz	r2, 8022dfc <_mbrtowc_r+0x18>
 8022df6:	4a07      	ldr	r2, [pc, #28]	; (8022e14 <_mbrtowc_r+0x30>)
 8022df8:	2301      	movs	r3, #1
 8022dfa:	4621      	mov	r1, r4
 8022dfc:	47b8      	blx	r7
 8022dfe:	1c43      	adds	r3, r0, #1
 8022e00:	bf01      	itttt	eq
 8022e02:	2300      	moveq	r3, #0
 8022e04:	6033      	streq	r3, [r6, #0]
 8022e06:	238a      	moveq	r3, #138	; 0x8a
 8022e08:	602b      	streq	r3, [r5, #0]
 8022e0a:	b003      	add	sp, #12
 8022e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e0e:	bf00      	nop
 8022e10:	200008e0 	.word	0x200008e0
 8022e14:	0802a401 	.word	0x0802a401

08022e18 <__ascii_mbtowc>:
 8022e18:	b082      	sub	sp, #8
 8022e1a:	b901      	cbnz	r1, 8022e1e <__ascii_mbtowc+0x6>
 8022e1c:	a901      	add	r1, sp, #4
 8022e1e:	b142      	cbz	r2, 8022e32 <__ascii_mbtowc+0x1a>
 8022e20:	b14b      	cbz	r3, 8022e36 <__ascii_mbtowc+0x1e>
 8022e22:	7813      	ldrb	r3, [r2, #0]
 8022e24:	600b      	str	r3, [r1, #0]
 8022e26:	7812      	ldrb	r2, [r2, #0]
 8022e28:	1e10      	subs	r0, r2, #0
 8022e2a:	bf18      	it	ne
 8022e2c:	2001      	movne	r0, #1
 8022e2e:	b002      	add	sp, #8
 8022e30:	4770      	bx	lr
 8022e32:	4610      	mov	r0, r2
 8022e34:	e7fb      	b.n	8022e2e <__ascii_mbtowc+0x16>
 8022e36:	f06f 0001 	mvn.w	r0, #1
 8022e3a:	e7f8      	b.n	8022e2e <__ascii_mbtowc+0x16>

08022e3c <_read_r>:
 8022e3c:	b538      	push	{r3, r4, r5, lr}
 8022e3e:	4d07      	ldr	r5, [pc, #28]	; (8022e5c <_read_r+0x20>)
 8022e40:	4604      	mov	r4, r0
 8022e42:	4608      	mov	r0, r1
 8022e44:	4611      	mov	r1, r2
 8022e46:	2200      	movs	r2, #0
 8022e48:	602a      	str	r2, [r5, #0]
 8022e4a:	461a      	mov	r2, r3
 8022e4c:	f7e1 f868 	bl	8003f20 <_read>
 8022e50:	1c43      	adds	r3, r0, #1
 8022e52:	d102      	bne.n	8022e5a <_read_r+0x1e>
 8022e54:	682b      	ldr	r3, [r5, #0]
 8022e56:	b103      	cbz	r3, 8022e5a <_read_r+0x1e>
 8022e58:	6023      	str	r3, [r4, #0]
 8022e5a:	bd38      	pop	{r3, r4, r5, pc}
 8022e5c:	2000bdec 	.word	0x2000bdec

08022e60 <realloc>:
 8022e60:	4b02      	ldr	r3, [pc, #8]	; (8022e6c <realloc+0xc>)
 8022e62:	460a      	mov	r2, r1
 8022e64:	4601      	mov	r1, r0
 8022e66:	6818      	ldr	r0, [r3, #0]
 8022e68:	f000 b802 	b.w	8022e70 <_realloc_r>
 8022e6c:	20000038 	.word	0x20000038

08022e70 <_realloc_r>:
 8022e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e74:	4681      	mov	r9, r0
 8022e76:	460c      	mov	r4, r1
 8022e78:	b929      	cbnz	r1, 8022e86 <_realloc_r+0x16>
 8022e7a:	4611      	mov	r1, r2
 8022e7c:	b003      	add	sp, #12
 8022e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e82:	f7fc bfd1 	b.w	801fe28 <_malloc_r>
 8022e86:	9201      	str	r2, [sp, #4]
 8022e88:	f7fd fa10 	bl	80202ac <__malloc_lock>
 8022e8c:	9a01      	ldr	r2, [sp, #4]
 8022e8e:	f102 080b 	add.w	r8, r2, #11
 8022e92:	f1b8 0f16 	cmp.w	r8, #22
 8022e96:	d90b      	bls.n	8022eb0 <_realloc_r+0x40>
 8022e98:	f038 0807 	bics.w	r8, r8, #7
 8022e9c:	d50a      	bpl.n	8022eb4 <_realloc_r+0x44>
 8022e9e:	230c      	movs	r3, #12
 8022ea0:	f8c9 3000 	str.w	r3, [r9]
 8022ea4:	f04f 0b00 	mov.w	fp, #0
 8022ea8:	4658      	mov	r0, fp
 8022eaa:	b003      	add	sp, #12
 8022eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eb0:	f04f 0810 	mov.w	r8, #16
 8022eb4:	4590      	cmp	r8, r2
 8022eb6:	d3f2      	bcc.n	8022e9e <_realloc_r+0x2e>
 8022eb8:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022ebc:	f025 0603 	bic.w	r6, r5, #3
 8022ec0:	45b0      	cmp	r8, r6
 8022ec2:	f1a4 0a08 	sub.w	sl, r4, #8
 8022ec6:	f340 8170 	ble.w	80231aa <_realloc_r+0x33a>
 8022eca:	48a9      	ldr	r0, [pc, #676]	; (8023170 <_realloc_r+0x300>)
 8022ecc:	9001      	str	r0, [sp, #4]
 8022ece:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8022ed2:	eb0a 0306 	add.w	r3, sl, r6
 8022ed6:	459c      	cmp	ip, r3
 8022ed8:	6859      	ldr	r1, [r3, #4]
 8022eda:	d005      	beq.n	8022ee8 <_realloc_r+0x78>
 8022edc:	f021 0001 	bic.w	r0, r1, #1
 8022ee0:	4418      	add	r0, r3
 8022ee2:	6840      	ldr	r0, [r0, #4]
 8022ee4:	07c7      	lsls	r7, r0, #31
 8022ee6:	d427      	bmi.n	8022f38 <_realloc_r+0xc8>
 8022ee8:	f021 0103 	bic.w	r1, r1, #3
 8022eec:	459c      	cmp	ip, r3
 8022eee:	eb06 0701 	add.w	r7, r6, r1
 8022ef2:	d119      	bne.n	8022f28 <_realloc_r+0xb8>
 8022ef4:	f108 0010 	add.w	r0, r8, #16
 8022ef8:	42b8      	cmp	r0, r7
 8022efa:	dc1f      	bgt.n	8022f3c <_realloc_r+0xcc>
 8022efc:	eb0a 0308 	add.w	r3, sl, r8
 8022f00:	9a01      	ldr	r2, [sp, #4]
 8022f02:	eba7 0708 	sub.w	r7, r7, r8
 8022f06:	f047 0701 	orr.w	r7, r7, #1
 8022f0a:	6093      	str	r3, [r2, #8]
 8022f0c:	605f      	str	r7, [r3, #4]
 8022f0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022f12:	f003 0301 	and.w	r3, r3, #1
 8022f16:	ea43 0308 	orr.w	r3, r3, r8
 8022f1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8022f1e:	4648      	mov	r0, r9
 8022f20:	f7fd f9ca 	bl	80202b8 <__malloc_unlock>
 8022f24:	46a3      	mov	fp, r4
 8022f26:	e7bf      	b.n	8022ea8 <_realloc_r+0x38>
 8022f28:	45b8      	cmp	r8, r7
 8022f2a:	dc07      	bgt.n	8022f3c <_realloc_r+0xcc>
 8022f2c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8022f30:	60da      	str	r2, [r3, #12]
 8022f32:	6093      	str	r3, [r2, #8]
 8022f34:	4655      	mov	r5, sl
 8022f36:	e07f      	b.n	8023038 <_realloc_r+0x1c8>
 8022f38:	2100      	movs	r1, #0
 8022f3a:	460b      	mov	r3, r1
 8022f3c:	07e8      	lsls	r0, r5, #31
 8022f3e:	f100 80e5 	bmi.w	802310c <_realloc_r+0x29c>
 8022f42:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8022f46:	ebaa 0505 	sub.w	r5, sl, r5
 8022f4a:	6868      	ldr	r0, [r5, #4]
 8022f4c:	f020 0003 	bic.w	r0, r0, #3
 8022f50:	eb00 0b06 	add.w	fp, r0, r6
 8022f54:	2b00      	cmp	r3, #0
 8022f56:	f000 80a5 	beq.w	80230a4 <_realloc_r+0x234>
 8022f5a:	459c      	cmp	ip, r3
 8022f5c:	eb01 070b 	add.w	r7, r1, fp
 8022f60:	d14a      	bne.n	8022ff8 <_realloc_r+0x188>
 8022f62:	f108 0310 	add.w	r3, r8, #16
 8022f66:	42bb      	cmp	r3, r7
 8022f68:	f300 809c 	bgt.w	80230a4 <_realloc_r+0x234>
 8022f6c:	46ab      	mov	fp, r5
 8022f6e:	68eb      	ldr	r3, [r5, #12]
 8022f70:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8022f74:	60d3      	str	r3, [r2, #12]
 8022f76:	609a      	str	r2, [r3, #8]
 8022f78:	1f32      	subs	r2, r6, #4
 8022f7a:	2a24      	cmp	r2, #36	; 0x24
 8022f7c:	d837      	bhi.n	8022fee <_realloc_r+0x17e>
 8022f7e:	2a13      	cmp	r2, #19
 8022f80:	d933      	bls.n	8022fea <_realloc_r+0x17a>
 8022f82:	6823      	ldr	r3, [r4, #0]
 8022f84:	60ab      	str	r3, [r5, #8]
 8022f86:	6863      	ldr	r3, [r4, #4]
 8022f88:	60eb      	str	r3, [r5, #12]
 8022f8a:	2a1b      	cmp	r2, #27
 8022f8c:	d81b      	bhi.n	8022fc6 <_realloc_r+0x156>
 8022f8e:	3408      	adds	r4, #8
 8022f90:	f105 0310 	add.w	r3, r5, #16
 8022f94:	6822      	ldr	r2, [r4, #0]
 8022f96:	601a      	str	r2, [r3, #0]
 8022f98:	6862      	ldr	r2, [r4, #4]
 8022f9a:	605a      	str	r2, [r3, #4]
 8022f9c:	68a2      	ldr	r2, [r4, #8]
 8022f9e:	609a      	str	r2, [r3, #8]
 8022fa0:	eb05 0308 	add.w	r3, r5, r8
 8022fa4:	9a01      	ldr	r2, [sp, #4]
 8022fa6:	eba7 0708 	sub.w	r7, r7, r8
 8022faa:	f047 0701 	orr.w	r7, r7, #1
 8022fae:	6093      	str	r3, [r2, #8]
 8022fb0:	605f      	str	r7, [r3, #4]
 8022fb2:	686b      	ldr	r3, [r5, #4]
 8022fb4:	f003 0301 	and.w	r3, r3, #1
 8022fb8:	ea43 0308 	orr.w	r3, r3, r8
 8022fbc:	606b      	str	r3, [r5, #4]
 8022fbe:	4648      	mov	r0, r9
 8022fc0:	f7fd f97a 	bl	80202b8 <__malloc_unlock>
 8022fc4:	e770      	b.n	8022ea8 <_realloc_r+0x38>
 8022fc6:	68a3      	ldr	r3, [r4, #8]
 8022fc8:	612b      	str	r3, [r5, #16]
 8022fca:	68e3      	ldr	r3, [r4, #12]
 8022fcc:	616b      	str	r3, [r5, #20]
 8022fce:	2a24      	cmp	r2, #36	; 0x24
 8022fd0:	bf01      	itttt	eq
 8022fd2:	6923      	ldreq	r3, [r4, #16]
 8022fd4:	61ab      	streq	r3, [r5, #24]
 8022fd6:	6962      	ldreq	r2, [r4, #20]
 8022fd8:	61ea      	streq	r2, [r5, #28]
 8022fda:	bf19      	ittee	ne
 8022fdc:	3410      	addne	r4, #16
 8022fde:	f105 0318 	addne.w	r3, r5, #24
 8022fe2:	f105 0320 	addeq.w	r3, r5, #32
 8022fe6:	3418      	addeq	r4, #24
 8022fe8:	e7d4      	b.n	8022f94 <_realloc_r+0x124>
 8022fea:	465b      	mov	r3, fp
 8022fec:	e7d2      	b.n	8022f94 <_realloc_r+0x124>
 8022fee:	4621      	mov	r1, r4
 8022ff0:	4658      	mov	r0, fp
 8022ff2:	f7f8 f9db 	bl	801b3ac <memmove>
 8022ff6:	e7d3      	b.n	8022fa0 <_realloc_r+0x130>
 8022ff8:	45b8      	cmp	r8, r7
 8022ffa:	dc53      	bgt.n	80230a4 <_realloc_r+0x234>
 8022ffc:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8023000:	4628      	mov	r0, r5
 8023002:	60da      	str	r2, [r3, #12]
 8023004:	6093      	str	r3, [r2, #8]
 8023006:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802300a:	68eb      	ldr	r3, [r5, #12]
 802300c:	60d3      	str	r3, [r2, #12]
 802300e:	609a      	str	r2, [r3, #8]
 8023010:	1f32      	subs	r2, r6, #4
 8023012:	2a24      	cmp	r2, #36	; 0x24
 8023014:	d842      	bhi.n	802309c <_realloc_r+0x22c>
 8023016:	2a13      	cmp	r2, #19
 8023018:	d908      	bls.n	802302c <_realloc_r+0x1bc>
 802301a:	6823      	ldr	r3, [r4, #0]
 802301c:	60ab      	str	r3, [r5, #8]
 802301e:	6863      	ldr	r3, [r4, #4]
 8023020:	60eb      	str	r3, [r5, #12]
 8023022:	2a1b      	cmp	r2, #27
 8023024:	d828      	bhi.n	8023078 <_realloc_r+0x208>
 8023026:	3408      	adds	r4, #8
 8023028:	f105 0010 	add.w	r0, r5, #16
 802302c:	6823      	ldr	r3, [r4, #0]
 802302e:	6003      	str	r3, [r0, #0]
 8023030:	6863      	ldr	r3, [r4, #4]
 8023032:	6043      	str	r3, [r0, #4]
 8023034:	68a3      	ldr	r3, [r4, #8]
 8023036:	6083      	str	r3, [r0, #8]
 8023038:	686a      	ldr	r2, [r5, #4]
 802303a:	eba7 0008 	sub.w	r0, r7, r8
 802303e:	280f      	cmp	r0, #15
 8023040:	f002 0201 	and.w	r2, r2, #1
 8023044:	eb05 0307 	add.w	r3, r5, r7
 8023048:	f240 80b1 	bls.w	80231ae <_realloc_r+0x33e>
 802304c:	eb05 0108 	add.w	r1, r5, r8
 8023050:	ea48 0202 	orr.w	r2, r8, r2
 8023054:	f040 0001 	orr.w	r0, r0, #1
 8023058:	606a      	str	r2, [r5, #4]
 802305a:	6048      	str	r0, [r1, #4]
 802305c:	685a      	ldr	r2, [r3, #4]
 802305e:	f042 0201 	orr.w	r2, r2, #1
 8023062:	605a      	str	r2, [r3, #4]
 8023064:	3108      	adds	r1, #8
 8023066:	4648      	mov	r0, r9
 8023068:	f7fc fc82 	bl	801f970 <_free_r>
 802306c:	4648      	mov	r0, r9
 802306e:	f7fd f923 	bl	80202b8 <__malloc_unlock>
 8023072:	f105 0b08 	add.w	fp, r5, #8
 8023076:	e717      	b.n	8022ea8 <_realloc_r+0x38>
 8023078:	68a3      	ldr	r3, [r4, #8]
 802307a:	612b      	str	r3, [r5, #16]
 802307c:	68e3      	ldr	r3, [r4, #12]
 802307e:	616b      	str	r3, [r5, #20]
 8023080:	2a24      	cmp	r2, #36	; 0x24
 8023082:	bf01      	itttt	eq
 8023084:	6923      	ldreq	r3, [r4, #16]
 8023086:	61ab      	streq	r3, [r5, #24]
 8023088:	6963      	ldreq	r3, [r4, #20]
 802308a:	61eb      	streq	r3, [r5, #28]
 802308c:	bf19      	ittee	ne
 802308e:	3410      	addne	r4, #16
 8023090:	f105 0018 	addne.w	r0, r5, #24
 8023094:	f105 0020 	addeq.w	r0, r5, #32
 8023098:	3418      	addeq	r4, #24
 802309a:	e7c7      	b.n	802302c <_realloc_r+0x1bc>
 802309c:	4621      	mov	r1, r4
 802309e:	f7f8 f985 	bl	801b3ac <memmove>
 80230a2:	e7c9      	b.n	8023038 <_realloc_r+0x1c8>
 80230a4:	45d8      	cmp	r8, fp
 80230a6:	dc31      	bgt.n	802310c <_realloc_r+0x29c>
 80230a8:	4628      	mov	r0, r5
 80230aa:	68eb      	ldr	r3, [r5, #12]
 80230ac:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80230b0:	60d3      	str	r3, [r2, #12]
 80230b2:	609a      	str	r2, [r3, #8]
 80230b4:	1f32      	subs	r2, r6, #4
 80230b6:	2a24      	cmp	r2, #36	; 0x24
 80230b8:	d824      	bhi.n	8023104 <_realloc_r+0x294>
 80230ba:	2a13      	cmp	r2, #19
 80230bc:	d908      	bls.n	80230d0 <_realloc_r+0x260>
 80230be:	6823      	ldr	r3, [r4, #0]
 80230c0:	60ab      	str	r3, [r5, #8]
 80230c2:	6863      	ldr	r3, [r4, #4]
 80230c4:	60eb      	str	r3, [r5, #12]
 80230c6:	2a1b      	cmp	r2, #27
 80230c8:	d80a      	bhi.n	80230e0 <_realloc_r+0x270>
 80230ca:	3408      	adds	r4, #8
 80230cc:	f105 0010 	add.w	r0, r5, #16
 80230d0:	6823      	ldr	r3, [r4, #0]
 80230d2:	6003      	str	r3, [r0, #0]
 80230d4:	6863      	ldr	r3, [r4, #4]
 80230d6:	6043      	str	r3, [r0, #4]
 80230d8:	68a3      	ldr	r3, [r4, #8]
 80230da:	6083      	str	r3, [r0, #8]
 80230dc:	465f      	mov	r7, fp
 80230de:	e7ab      	b.n	8023038 <_realloc_r+0x1c8>
 80230e0:	68a3      	ldr	r3, [r4, #8]
 80230e2:	612b      	str	r3, [r5, #16]
 80230e4:	68e3      	ldr	r3, [r4, #12]
 80230e6:	616b      	str	r3, [r5, #20]
 80230e8:	2a24      	cmp	r2, #36	; 0x24
 80230ea:	bf01      	itttt	eq
 80230ec:	6923      	ldreq	r3, [r4, #16]
 80230ee:	61ab      	streq	r3, [r5, #24]
 80230f0:	6963      	ldreq	r3, [r4, #20]
 80230f2:	61eb      	streq	r3, [r5, #28]
 80230f4:	bf19      	ittee	ne
 80230f6:	3410      	addne	r4, #16
 80230f8:	f105 0018 	addne.w	r0, r5, #24
 80230fc:	f105 0020 	addeq.w	r0, r5, #32
 8023100:	3418      	addeq	r4, #24
 8023102:	e7e5      	b.n	80230d0 <_realloc_r+0x260>
 8023104:	4621      	mov	r1, r4
 8023106:	f7f8 f951 	bl	801b3ac <memmove>
 802310a:	e7e7      	b.n	80230dc <_realloc_r+0x26c>
 802310c:	4611      	mov	r1, r2
 802310e:	4648      	mov	r0, r9
 8023110:	f7fc fe8a 	bl	801fe28 <_malloc_r>
 8023114:	4683      	mov	fp, r0
 8023116:	2800      	cmp	r0, #0
 8023118:	f43f af51 	beq.w	8022fbe <_realloc_r+0x14e>
 802311c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023120:	f023 0301 	bic.w	r3, r3, #1
 8023124:	4453      	add	r3, sl
 8023126:	f1a0 0208 	sub.w	r2, r0, #8
 802312a:	4293      	cmp	r3, r2
 802312c:	d105      	bne.n	802313a <_realloc_r+0x2ca>
 802312e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8023132:	f027 0703 	bic.w	r7, r7, #3
 8023136:	4437      	add	r7, r6
 8023138:	e6fc      	b.n	8022f34 <_realloc_r+0xc4>
 802313a:	1f32      	subs	r2, r6, #4
 802313c:	2a24      	cmp	r2, #36	; 0x24
 802313e:	d830      	bhi.n	80231a2 <_realloc_r+0x332>
 8023140:	2a13      	cmp	r2, #19
 8023142:	d92b      	bls.n	802319c <_realloc_r+0x32c>
 8023144:	6823      	ldr	r3, [r4, #0]
 8023146:	6003      	str	r3, [r0, #0]
 8023148:	6863      	ldr	r3, [r4, #4]
 802314a:	6043      	str	r3, [r0, #4]
 802314c:	2a1b      	cmp	r2, #27
 802314e:	d811      	bhi.n	8023174 <_realloc_r+0x304>
 8023150:	f104 0208 	add.w	r2, r4, #8
 8023154:	f100 0308 	add.w	r3, r0, #8
 8023158:	6811      	ldr	r1, [r2, #0]
 802315a:	6019      	str	r1, [r3, #0]
 802315c:	6851      	ldr	r1, [r2, #4]
 802315e:	6059      	str	r1, [r3, #4]
 8023160:	6892      	ldr	r2, [r2, #8]
 8023162:	609a      	str	r2, [r3, #8]
 8023164:	4621      	mov	r1, r4
 8023166:	4648      	mov	r0, r9
 8023168:	f7fc fc02 	bl	801f970 <_free_r>
 802316c:	e727      	b.n	8022fbe <_realloc_r+0x14e>
 802316e:	bf00      	nop
 8023170:	200004d0 	.word	0x200004d0
 8023174:	68a3      	ldr	r3, [r4, #8]
 8023176:	6083      	str	r3, [r0, #8]
 8023178:	68e3      	ldr	r3, [r4, #12]
 802317a:	60c3      	str	r3, [r0, #12]
 802317c:	2a24      	cmp	r2, #36	; 0x24
 802317e:	bf01      	itttt	eq
 8023180:	6923      	ldreq	r3, [r4, #16]
 8023182:	6103      	streq	r3, [r0, #16]
 8023184:	6961      	ldreq	r1, [r4, #20]
 8023186:	6141      	streq	r1, [r0, #20]
 8023188:	bf19      	ittee	ne
 802318a:	f104 0210 	addne.w	r2, r4, #16
 802318e:	f100 0310 	addne.w	r3, r0, #16
 8023192:	f104 0218 	addeq.w	r2, r4, #24
 8023196:	f100 0318 	addeq.w	r3, r0, #24
 802319a:	e7dd      	b.n	8023158 <_realloc_r+0x2e8>
 802319c:	4603      	mov	r3, r0
 802319e:	4622      	mov	r2, r4
 80231a0:	e7da      	b.n	8023158 <_realloc_r+0x2e8>
 80231a2:	4621      	mov	r1, r4
 80231a4:	f7f8 f902 	bl	801b3ac <memmove>
 80231a8:	e7dc      	b.n	8023164 <_realloc_r+0x2f4>
 80231aa:	4637      	mov	r7, r6
 80231ac:	e6c2      	b.n	8022f34 <_realloc_r+0xc4>
 80231ae:	4317      	orrs	r7, r2
 80231b0:	606f      	str	r7, [r5, #4]
 80231b2:	685a      	ldr	r2, [r3, #4]
 80231b4:	f042 0201 	orr.w	r2, r2, #1
 80231b8:	605a      	str	r2, [r3, #4]
 80231ba:	e757      	b.n	802306c <_realloc_r+0x1fc>

080231bc <__sccl>:
 80231bc:	b570      	push	{r4, r5, r6, lr}
 80231be:	780b      	ldrb	r3, [r1, #0]
 80231c0:	4604      	mov	r4, r0
 80231c2:	2b5e      	cmp	r3, #94	; 0x5e
 80231c4:	bf0b      	itete	eq
 80231c6:	784b      	ldrbeq	r3, [r1, #1]
 80231c8:	1c48      	addne	r0, r1, #1
 80231ca:	1c88      	addeq	r0, r1, #2
 80231cc:	2200      	movne	r2, #0
 80231ce:	bf08      	it	eq
 80231d0:	2201      	moveq	r2, #1
 80231d2:	1e61      	subs	r1, r4, #1
 80231d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80231d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80231dc:	42a9      	cmp	r1, r5
 80231de:	d1fb      	bne.n	80231d8 <__sccl+0x1c>
 80231e0:	b90b      	cbnz	r3, 80231e6 <__sccl+0x2a>
 80231e2:	3801      	subs	r0, #1
 80231e4:	bd70      	pop	{r4, r5, r6, pc}
 80231e6:	f082 0101 	eor.w	r1, r2, #1
 80231ea:	54e1      	strb	r1, [r4, r3]
 80231ec:	1c42      	adds	r2, r0, #1
 80231ee:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80231f2:	2d2d      	cmp	r5, #45	; 0x2d
 80231f4:	f102 36ff 	add.w	r6, r2, #4294967295
 80231f8:	4610      	mov	r0, r2
 80231fa:	d006      	beq.n	802320a <__sccl+0x4e>
 80231fc:	2d5d      	cmp	r5, #93	; 0x5d
 80231fe:	d0f1      	beq.n	80231e4 <__sccl+0x28>
 8023200:	b90d      	cbnz	r5, 8023206 <__sccl+0x4a>
 8023202:	4630      	mov	r0, r6
 8023204:	e7ee      	b.n	80231e4 <__sccl+0x28>
 8023206:	462b      	mov	r3, r5
 8023208:	e7ef      	b.n	80231ea <__sccl+0x2e>
 802320a:	7816      	ldrb	r6, [r2, #0]
 802320c:	2e5d      	cmp	r6, #93	; 0x5d
 802320e:	d0fa      	beq.n	8023206 <__sccl+0x4a>
 8023210:	42b3      	cmp	r3, r6
 8023212:	dcf8      	bgt.n	8023206 <__sccl+0x4a>
 8023214:	4618      	mov	r0, r3
 8023216:	3001      	adds	r0, #1
 8023218:	4286      	cmp	r6, r0
 802321a:	5421      	strb	r1, [r4, r0]
 802321c:	dcfb      	bgt.n	8023216 <__sccl+0x5a>
 802321e:	43d8      	mvns	r0, r3
 8023220:	4430      	add	r0, r6
 8023222:	1c5d      	adds	r5, r3, #1
 8023224:	42b3      	cmp	r3, r6
 8023226:	bfa8      	it	ge
 8023228:	2000      	movge	r0, #0
 802322a:	182b      	adds	r3, r5, r0
 802322c:	3202      	adds	r2, #2
 802322e:	e7de      	b.n	80231ee <__sccl+0x32>

08023230 <_strtoll_l.isra.0>:
 8023230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023234:	b087      	sub	sp, #28
 8023236:	4691      	mov	r9, r2
 8023238:	4a47      	ldr	r2, [pc, #284]	; (8023358 <_strtoll_l.isra.0+0x128>)
 802323a:	9005      	str	r0, [sp, #20]
 802323c:	4688      	mov	r8, r1
 802323e:	461f      	mov	r7, r3
 8023240:	460d      	mov	r5, r1
 8023242:	462b      	mov	r3, r5
 8023244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023248:	5ca6      	ldrb	r6, [r4, r2]
 802324a:	f016 0608 	ands.w	r6, r6, #8
 802324e:	d1f8      	bne.n	8023242 <_strtoll_l.isra.0+0x12>
 8023250:	2c2d      	cmp	r4, #45	; 0x2d
 8023252:	d147      	bne.n	80232e4 <_strtoll_l.isra.0+0xb4>
 8023254:	782c      	ldrb	r4, [r5, #0]
 8023256:	2601      	movs	r6, #1
 8023258:	1c9d      	adds	r5, r3, #2
 802325a:	2f00      	cmp	r7, #0
 802325c:	d077      	beq.n	802334e <_strtoll_l.isra.0+0x11e>
 802325e:	2f10      	cmp	r7, #16
 8023260:	d109      	bne.n	8023276 <_strtoll_l.isra.0+0x46>
 8023262:	2c30      	cmp	r4, #48	; 0x30
 8023264:	d107      	bne.n	8023276 <_strtoll_l.isra.0+0x46>
 8023266:	782b      	ldrb	r3, [r5, #0]
 8023268:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802326c:	2b58      	cmp	r3, #88	; 0x58
 802326e:	d169      	bne.n	8023344 <_strtoll_l.isra.0+0x114>
 8023270:	786c      	ldrb	r4, [r5, #1]
 8023272:	2710      	movs	r7, #16
 8023274:	3502      	adds	r5, #2
 8023276:	f04f 32ff 	mov.w	r2, #4294967295
 802327a:	1990      	adds	r0, r2, r6
 802327c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023280:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8023284:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 8023288:	463a      	mov	r2, r7
 802328a:	465b      	mov	r3, fp
 802328c:	e9cd 0100 	strd	r0, r1, [sp]
 8023290:	f7dd fd0a 	bl	8000ca8 <__aeabi_uldivmod>
 8023294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023298:	46ba      	mov	sl, r7
 802329a:	4696      	mov	lr, r2
 802329c:	2300      	movs	r3, #0
 802329e:	2000      	movs	r0, #0
 80232a0:	2100      	movs	r1, #0
 80232a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80232a6:	f1bc 0f09 	cmp.w	ip, #9
 80232aa:	d820      	bhi.n	80232ee <_strtoll_l.isra.0+0xbe>
 80232ac:	4664      	mov	r4, ip
 80232ae:	42a7      	cmp	r7, r4
 80232b0:	dd2e      	ble.n	8023310 <_strtoll_l.isra.0+0xe0>
 80232b2:	1c5a      	adds	r2, r3, #1
 80232b4:	d013      	beq.n	80232de <_strtoll_l.isra.0+0xae>
 80232b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80232ba:	428b      	cmp	r3, r1
 80232bc:	bf08      	it	eq
 80232be:	4282      	cmpeq	r2, r0
 80232c0:	d323      	bcc.n	802330a <_strtoll_l.isra.0+0xda>
 80232c2:	d101      	bne.n	80232c8 <_strtoll_l.isra.0+0x98>
 80232c4:	45a6      	cmp	lr, r4
 80232c6:	db20      	blt.n	802330a <_strtoll_l.isra.0+0xda>
 80232c8:	fb0a f301 	mul.w	r3, sl, r1
 80232cc:	fb00 330b 	mla	r3, r0, fp, r3
 80232d0:	fbaa 0100 	umull	r0, r1, sl, r0
 80232d4:	4419      	add	r1, r3
 80232d6:	1900      	adds	r0, r0, r4
 80232d8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80232dc:	2301      	movs	r3, #1
 80232de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80232e2:	e7de      	b.n	80232a2 <_strtoll_l.isra.0+0x72>
 80232e4:	2c2b      	cmp	r4, #43	; 0x2b
 80232e6:	bf04      	itt	eq
 80232e8:	782c      	ldrbeq	r4, [r5, #0]
 80232ea:	1c9d      	addeq	r5, r3, #2
 80232ec:	e7b5      	b.n	802325a <_strtoll_l.isra.0+0x2a>
 80232ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80232f2:	f1bc 0f19 	cmp.w	ip, #25
 80232f6:	d801      	bhi.n	80232fc <_strtoll_l.isra.0+0xcc>
 80232f8:	3c37      	subs	r4, #55	; 0x37
 80232fa:	e7d8      	b.n	80232ae <_strtoll_l.isra.0+0x7e>
 80232fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023300:	f1bc 0f19 	cmp.w	ip, #25
 8023304:	d804      	bhi.n	8023310 <_strtoll_l.isra.0+0xe0>
 8023306:	3c57      	subs	r4, #87	; 0x57
 8023308:	e7d1      	b.n	80232ae <_strtoll_l.isra.0+0x7e>
 802330a:	f04f 33ff 	mov.w	r3, #4294967295
 802330e:	e7e6      	b.n	80232de <_strtoll_l.isra.0+0xae>
 8023310:	1c5a      	adds	r2, r3, #1
 8023312:	d10a      	bne.n	802332a <_strtoll_l.isra.0+0xfa>
 8023314:	9a05      	ldr	r2, [sp, #20]
 8023316:	2322      	movs	r3, #34	; 0x22
 8023318:	e9dd 0100 	ldrd	r0, r1, [sp]
 802331c:	6013      	str	r3, [r2, #0]
 802331e:	f1b9 0f00 	cmp.w	r9, #0
 8023322:	d10a      	bne.n	802333a <_strtoll_l.isra.0+0x10a>
 8023324:	b007      	add	sp, #28
 8023326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802332a:	b116      	cbz	r6, 8023332 <_strtoll_l.isra.0+0x102>
 802332c:	4240      	negs	r0, r0
 802332e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8023332:	f1b9 0f00 	cmp.w	r9, #0
 8023336:	d0f5      	beq.n	8023324 <_strtoll_l.isra.0+0xf4>
 8023338:	b10b      	cbz	r3, 802333e <_strtoll_l.isra.0+0x10e>
 802333a:	f105 38ff 	add.w	r8, r5, #4294967295
 802333e:	f8c9 8000 	str.w	r8, [r9]
 8023342:	e7ef      	b.n	8023324 <_strtoll_l.isra.0+0xf4>
 8023344:	2430      	movs	r4, #48	; 0x30
 8023346:	2f00      	cmp	r7, #0
 8023348:	d195      	bne.n	8023276 <_strtoll_l.isra.0+0x46>
 802334a:	2708      	movs	r7, #8
 802334c:	e793      	b.n	8023276 <_strtoll_l.isra.0+0x46>
 802334e:	2c30      	cmp	r4, #48	; 0x30
 8023350:	d089      	beq.n	8023266 <_strtoll_l.isra.0+0x36>
 8023352:	270a      	movs	r7, #10
 8023354:	e78f      	b.n	8023276 <_strtoll_l.isra.0+0x46>
 8023356:	bf00      	nop
 8023358:	08029f31 	.word	0x08029f31

0802335c <_strtoll_r>:
 802335c:	f7ff bf68 	b.w	8023230 <_strtoll_l.isra.0>

08023360 <_strtoull_l.isra.0>:
 8023360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023364:	b085      	sub	sp, #20
 8023366:	4691      	mov	r9, r2
 8023368:	4a49      	ldr	r2, [pc, #292]	; (8023490 <_strtoull_l.isra.0+0x130>)
 802336a:	9003      	str	r0, [sp, #12]
 802336c:	4688      	mov	r8, r1
 802336e:	461e      	mov	r6, r3
 8023370:	460d      	mov	r5, r1
 8023372:	462b      	mov	r3, r5
 8023374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023378:	5ca7      	ldrb	r7, [r4, r2]
 802337a:	f017 0708 	ands.w	r7, r7, #8
 802337e:	d1f8      	bne.n	8023372 <_strtoull_l.isra.0+0x12>
 8023380:	2c2d      	cmp	r4, #45	; 0x2d
 8023382:	d14a      	bne.n	802341a <_strtoull_l.isra.0+0xba>
 8023384:	782c      	ldrb	r4, [r5, #0]
 8023386:	2701      	movs	r7, #1
 8023388:	1c9d      	adds	r5, r3, #2
 802338a:	2e00      	cmp	r6, #0
 802338c:	d07c      	beq.n	8023488 <_strtoull_l.isra.0+0x128>
 802338e:	2e10      	cmp	r6, #16
 8023390:	d109      	bne.n	80233a6 <_strtoull_l.isra.0+0x46>
 8023392:	2c30      	cmp	r4, #48	; 0x30
 8023394:	d107      	bne.n	80233a6 <_strtoull_l.isra.0+0x46>
 8023396:	782b      	ldrb	r3, [r5, #0]
 8023398:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802339c:	2b58      	cmp	r3, #88	; 0x58
 802339e:	d16e      	bne.n	802347e <_strtoull_l.isra.0+0x11e>
 80233a0:	786c      	ldrb	r4, [r5, #1]
 80233a2:	2610      	movs	r6, #16
 80233a4:	3502      	adds	r5, #2
 80233a6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 80233aa:	4632      	mov	r2, r6
 80233ac:	465b      	mov	r3, fp
 80233ae:	f04f 30ff 	mov.w	r0, #4294967295
 80233b2:	f04f 31ff 	mov.w	r1, #4294967295
 80233b6:	f7dd fc77 	bl	8000ca8 <__aeabi_uldivmod>
 80233ba:	e9cd 0100 	strd	r0, r1, [sp]
 80233be:	4632      	mov	r2, r6
 80233c0:	465b      	mov	r3, fp
 80233c2:	f04f 30ff 	mov.w	r0, #4294967295
 80233c6:	f04f 31ff 	mov.w	r1, #4294967295
 80233ca:	f7dd fc6d 	bl	8000ca8 <__aeabi_uldivmod>
 80233ce:	46b2      	mov	sl, r6
 80233d0:	4696      	mov	lr, r2
 80233d2:	2300      	movs	r3, #0
 80233d4:	2000      	movs	r0, #0
 80233d6:	2100      	movs	r1, #0
 80233d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80233dc:	f1bc 0f09 	cmp.w	ip, #9
 80233e0:	d820      	bhi.n	8023424 <_strtoull_l.isra.0+0xc4>
 80233e2:	4664      	mov	r4, ip
 80233e4:	42a6      	cmp	r6, r4
 80233e6:	dd2e      	ble.n	8023446 <_strtoull_l.isra.0+0xe6>
 80233e8:	2b00      	cmp	r3, #0
 80233ea:	db29      	blt.n	8023440 <_strtoull_l.isra.0+0xe0>
 80233ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233f0:	428b      	cmp	r3, r1
 80233f2:	bf08      	it	eq
 80233f4:	4282      	cmpeq	r2, r0
 80233f6:	d323      	bcc.n	8023440 <_strtoull_l.isra.0+0xe0>
 80233f8:	d101      	bne.n	80233fe <_strtoull_l.isra.0+0x9e>
 80233fa:	45a6      	cmp	lr, r4
 80233fc:	db20      	blt.n	8023440 <_strtoull_l.isra.0+0xe0>
 80233fe:	fb0a f301 	mul.w	r3, sl, r1
 8023402:	fb00 330b 	mla	r3, r0, fp, r3
 8023406:	fbaa 0100 	umull	r0, r1, sl, r0
 802340a:	4419      	add	r1, r3
 802340c:	1900      	adds	r0, r0, r4
 802340e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8023412:	2301      	movs	r3, #1
 8023414:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023418:	e7de      	b.n	80233d8 <_strtoull_l.isra.0+0x78>
 802341a:	2c2b      	cmp	r4, #43	; 0x2b
 802341c:	bf04      	itt	eq
 802341e:	782c      	ldrbeq	r4, [r5, #0]
 8023420:	1c9d      	addeq	r5, r3, #2
 8023422:	e7b2      	b.n	802338a <_strtoull_l.isra.0+0x2a>
 8023424:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8023428:	f1bc 0f19 	cmp.w	ip, #25
 802342c:	d801      	bhi.n	8023432 <_strtoull_l.isra.0+0xd2>
 802342e:	3c37      	subs	r4, #55	; 0x37
 8023430:	e7d8      	b.n	80233e4 <_strtoull_l.isra.0+0x84>
 8023432:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8023436:	f1bc 0f19 	cmp.w	ip, #25
 802343a:	d804      	bhi.n	8023446 <_strtoull_l.isra.0+0xe6>
 802343c:	3c57      	subs	r4, #87	; 0x57
 802343e:	e7d1      	b.n	80233e4 <_strtoull_l.isra.0+0x84>
 8023440:	f04f 33ff 	mov.w	r3, #4294967295
 8023444:	e7e6      	b.n	8023414 <_strtoull_l.isra.0+0xb4>
 8023446:	2b00      	cmp	r3, #0
 8023448:	da0c      	bge.n	8023464 <_strtoull_l.isra.0+0x104>
 802344a:	9a03      	ldr	r2, [sp, #12]
 802344c:	2322      	movs	r3, #34	; 0x22
 802344e:	6013      	str	r3, [r2, #0]
 8023450:	f04f 30ff 	mov.w	r0, #4294967295
 8023454:	f04f 31ff 	mov.w	r1, #4294967295
 8023458:	f1b9 0f00 	cmp.w	r9, #0
 802345c:	d10a      	bne.n	8023474 <_strtoull_l.isra.0+0x114>
 802345e:	b005      	add	sp, #20
 8023460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023464:	b117      	cbz	r7, 802346c <_strtoull_l.isra.0+0x10c>
 8023466:	4240      	negs	r0, r0
 8023468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802346c:	f1b9 0f00 	cmp.w	r9, #0
 8023470:	d0f5      	beq.n	802345e <_strtoull_l.isra.0+0xfe>
 8023472:	b10b      	cbz	r3, 8023478 <_strtoull_l.isra.0+0x118>
 8023474:	f105 38ff 	add.w	r8, r5, #4294967295
 8023478:	f8c9 8000 	str.w	r8, [r9]
 802347c:	e7ef      	b.n	802345e <_strtoull_l.isra.0+0xfe>
 802347e:	2430      	movs	r4, #48	; 0x30
 8023480:	2e00      	cmp	r6, #0
 8023482:	d190      	bne.n	80233a6 <_strtoull_l.isra.0+0x46>
 8023484:	2608      	movs	r6, #8
 8023486:	e78e      	b.n	80233a6 <_strtoull_l.isra.0+0x46>
 8023488:	2c30      	cmp	r4, #48	; 0x30
 802348a:	d084      	beq.n	8023396 <_strtoull_l.isra.0+0x36>
 802348c:	260a      	movs	r6, #10
 802348e:	e78a      	b.n	80233a6 <_strtoull_l.isra.0+0x46>
 8023490:	08029f31 	.word	0x08029f31

08023494 <_strtoull_r>:
 8023494:	f7ff bf64 	b.w	8023360 <_strtoull_l.isra.0>

08023498 <__swbuf_r>:
 8023498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802349a:	460e      	mov	r6, r1
 802349c:	4614      	mov	r4, r2
 802349e:	4605      	mov	r5, r0
 80234a0:	b118      	cbz	r0, 80234aa <__swbuf_r+0x12>
 80234a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80234a4:	b90b      	cbnz	r3, 80234aa <__swbuf_r+0x12>
 80234a6:	f7fc f9d3 	bl	801f850 <__sinit>
 80234aa:	69a3      	ldr	r3, [r4, #24]
 80234ac:	60a3      	str	r3, [r4, #8]
 80234ae:	89a3      	ldrh	r3, [r4, #12]
 80234b0:	0719      	lsls	r1, r3, #28
 80234b2:	d529      	bpl.n	8023508 <__swbuf_r+0x70>
 80234b4:	6923      	ldr	r3, [r4, #16]
 80234b6:	b33b      	cbz	r3, 8023508 <__swbuf_r+0x70>
 80234b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80234bc:	b2f6      	uxtb	r6, r6
 80234be:	049a      	lsls	r2, r3, #18
 80234c0:	4637      	mov	r7, r6
 80234c2:	d52a      	bpl.n	802351a <__swbuf_r+0x82>
 80234c4:	6823      	ldr	r3, [r4, #0]
 80234c6:	6920      	ldr	r0, [r4, #16]
 80234c8:	1a18      	subs	r0, r3, r0
 80234ca:	6963      	ldr	r3, [r4, #20]
 80234cc:	4283      	cmp	r3, r0
 80234ce:	dc04      	bgt.n	80234da <__swbuf_r+0x42>
 80234d0:	4621      	mov	r1, r4
 80234d2:	4628      	mov	r0, r5
 80234d4:	f7fc f950 	bl	801f778 <_fflush_r>
 80234d8:	b9e0      	cbnz	r0, 8023514 <__swbuf_r+0x7c>
 80234da:	68a3      	ldr	r3, [r4, #8]
 80234dc:	3b01      	subs	r3, #1
 80234de:	60a3      	str	r3, [r4, #8]
 80234e0:	6823      	ldr	r3, [r4, #0]
 80234e2:	1c5a      	adds	r2, r3, #1
 80234e4:	6022      	str	r2, [r4, #0]
 80234e6:	701e      	strb	r6, [r3, #0]
 80234e8:	6962      	ldr	r2, [r4, #20]
 80234ea:	1c43      	adds	r3, r0, #1
 80234ec:	429a      	cmp	r2, r3
 80234ee:	d004      	beq.n	80234fa <__swbuf_r+0x62>
 80234f0:	89a3      	ldrh	r3, [r4, #12]
 80234f2:	07db      	lsls	r3, r3, #31
 80234f4:	d506      	bpl.n	8023504 <__swbuf_r+0x6c>
 80234f6:	2e0a      	cmp	r6, #10
 80234f8:	d104      	bne.n	8023504 <__swbuf_r+0x6c>
 80234fa:	4621      	mov	r1, r4
 80234fc:	4628      	mov	r0, r5
 80234fe:	f7fc f93b 	bl	801f778 <_fflush_r>
 8023502:	b938      	cbnz	r0, 8023514 <__swbuf_r+0x7c>
 8023504:	4638      	mov	r0, r7
 8023506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023508:	4621      	mov	r1, r4
 802350a:	4628      	mov	r0, r5
 802350c:	f7fb f9c2 	bl	801e894 <__swsetup_r>
 8023510:	2800      	cmp	r0, #0
 8023512:	d0d1      	beq.n	80234b8 <__swbuf_r+0x20>
 8023514:	f04f 37ff 	mov.w	r7, #4294967295
 8023518:	e7f4      	b.n	8023504 <__swbuf_r+0x6c>
 802351a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 802351e:	81a3      	strh	r3, [r4, #12]
 8023520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8023526:	6663      	str	r3, [r4, #100]	; 0x64
 8023528:	e7cc      	b.n	80234c4 <__swbuf_r+0x2c>
	...

0802352c <_wcrtomb_r>:
 802352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802352e:	4c09      	ldr	r4, [pc, #36]	; (8023554 <_wcrtomb_r+0x28>)
 8023530:	b085      	sub	sp, #20
 8023532:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8023536:	4605      	mov	r5, r0
 8023538:	461e      	mov	r6, r3
 802353a:	b909      	cbnz	r1, 8023540 <_wcrtomb_r+0x14>
 802353c:	460a      	mov	r2, r1
 802353e:	a901      	add	r1, sp, #4
 8023540:	47b8      	blx	r7
 8023542:	1c43      	adds	r3, r0, #1
 8023544:	bf01      	itttt	eq
 8023546:	2300      	moveq	r3, #0
 8023548:	6033      	streq	r3, [r6, #0]
 802354a:	238a      	moveq	r3, #138	; 0x8a
 802354c:	602b      	streq	r3, [r5, #0]
 802354e:	b005      	add	sp, #20
 8023550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023552:	bf00      	nop
 8023554:	200008e0 	.word	0x200008e0

08023558 <__ascii_wctomb>:
 8023558:	b149      	cbz	r1, 802356e <__ascii_wctomb+0x16>
 802355a:	2aff      	cmp	r2, #255	; 0xff
 802355c:	bf85      	ittet	hi
 802355e:	238a      	movhi	r3, #138	; 0x8a
 8023560:	6003      	strhi	r3, [r0, #0]
 8023562:	700a      	strbls	r2, [r1, #0]
 8023564:	f04f 30ff 	movhi.w	r0, #4294967295
 8023568:	bf98      	it	ls
 802356a:	2001      	movls	r0, #1
 802356c:	4770      	bx	lr
 802356e:	4608      	mov	r0, r1
 8023570:	4770      	bx	lr

08023572 <abort>:
 8023572:	b508      	push	{r3, lr}
 8023574:	2006      	movs	r0, #6
 8023576:	f000 f82d 	bl	80235d4 <raise>
 802357a:	2001      	movs	r0, #1
 802357c:	f7e0 fcc6 	bl	8003f0c <_exit>

08023580 <_raise_r>:
 8023580:	291f      	cmp	r1, #31
 8023582:	b538      	push	{r3, r4, r5, lr}
 8023584:	4604      	mov	r4, r0
 8023586:	460d      	mov	r5, r1
 8023588:	d904      	bls.n	8023594 <_raise_r+0x14>
 802358a:	2316      	movs	r3, #22
 802358c:	6003      	str	r3, [r0, #0]
 802358e:	f04f 30ff 	mov.w	r0, #4294967295
 8023592:	bd38      	pop	{r3, r4, r5, pc}
 8023594:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8023598:	b112      	cbz	r2, 80235a0 <_raise_r+0x20>
 802359a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802359e:	b94b      	cbnz	r3, 80235b4 <_raise_r+0x34>
 80235a0:	4620      	mov	r0, r4
 80235a2:	f000 f831 	bl	8023608 <_getpid_r>
 80235a6:	462a      	mov	r2, r5
 80235a8:	4601      	mov	r1, r0
 80235aa:	4620      	mov	r0, r4
 80235ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80235b0:	f000 b818 	b.w	80235e4 <_kill_r>
 80235b4:	2b01      	cmp	r3, #1
 80235b6:	d00a      	beq.n	80235ce <_raise_r+0x4e>
 80235b8:	1c59      	adds	r1, r3, #1
 80235ba:	d103      	bne.n	80235c4 <_raise_r+0x44>
 80235bc:	2316      	movs	r3, #22
 80235be:	6003      	str	r3, [r0, #0]
 80235c0:	2001      	movs	r0, #1
 80235c2:	e7e6      	b.n	8023592 <_raise_r+0x12>
 80235c4:	2400      	movs	r4, #0
 80235c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80235ca:	4628      	mov	r0, r5
 80235cc:	4798      	blx	r3
 80235ce:	2000      	movs	r0, #0
 80235d0:	e7df      	b.n	8023592 <_raise_r+0x12>
	...

080235d4 <raise>:
 80235d4:	4b02      	ldr	r3, [pc, #8]	; (80235e0 <raise+0xc>)
 80235d6:	4601      	mov	r1, r0
 80235d8:	6818      	ldr	r0, [r3, #0]
 80235da:	f7ff bfd1 	b.w	8023580 <_raise_r>
 80235de:	bf00      	nop
 80235e0:	20000038 	.word	0x20000038

080235e4 <_kill_r>:
 80235e4:	b538      	push	{r3, r4, r5, lr}
 80235e6:	4d07      	ldr	r5, [pc, #28]	; (8023604 <_kill_r+0x20>)
 80235e8:	2300      	movs	r3, #0
 80235ea:	4604      	mov	r4, r0
 80235ec:	4608      	mov	r0, r1
 80235ee:	4611      	mov	r1, r2
 80235f0:	602b      	str	r3, [r5, #0]
 80235f2:	f7e0 fc79 	bl	8003ee8 <_kill>
 80235f6:	1c43      	adds	r3, r0, #1
 80235f8:	d102      	bne.n	8023600 <_kill_r+0x1c>
 80235fa:	682b      	ldr	r3, [r5, #0]
 80235fc:	b103      	cbz	r3, 8023600 <_kill_r+0x1c>
 80235fe:	6023      	str	r3, [r4, #0]
 8023600:	bd38      	pop	{r3, r4, r5, pc}
 8023602:	bf00      	nop
 8023604:	2000bdec 	.word	0x2000bdec

08023608 <_getpid_r>:
 8023608:	f7e0 bc66 	b.w	8003ed8 <_getpid>

0802360c <pow>:
 802360c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023610:	ec59 8b10 	vmov	r8, r9, d0
 8023614:	ec57 6b11 	vmov	r6, r7, d1
 8023618:	f000 f8a6 	bl	8023768 <__ieee754_pow>
 802361c:	4b4e      	ldr	r3, [pc, #312]	; (8023758 <pow+0x14c>)
 802361e:	f993 3000 	ldrsb.w	r3, [r3]
 8023622:	3301      	adds	r3, #1
 8023624:	ec55 4b10 	vmov	r4, r5, d0
 8023628:	d015      	beq.n	8023656 <pow+0x4a>
 802362a:	4632      	mov	r2, r6
 802362c:	463b      	mov	r3, r7
 802362e:	4630      	mov	r0, r6
 8023630:	4639      	mov	r1, r7
 8023632:	f7dd faab 	bl	8000b8c <__aeabi_dcmpun>
 8023636:	b970      	cbnz	r0, 8023656 <pow+0x4a>
 8023638:	4642      	mov	r2, r8
 802363a:	464b      	mov	r3, r9
 802363c:	4640      	mov	r0, r8
 802363e:	4649      	mov	r1, r9
 8023640:	f7dd faa4 	bl	8000b8c <__aeabi_dcmpun>
 8023644:	2200      	movs	r2, #0
 8023646:	2300      	movs	r3, #0
 8023648:	b148      	cbz	r0, 802365e <pow+0x52>
 802364a:	4630      	mov	r0, r6
 802364c:	4639      	mov	r1, r7
 802364e:	f7dd fa6b 	bl	8000b28 <__aeabi_dcmpeq>
 8023652:	2800      	cmp	r0, #0
 8023654:	d17d      	bne.n	8023752 <pow+0x146>
 8023656:	ec45 4b10 	vmov	d0, r4, r5
 802365a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802365e:	4640      	mov	r0, r8
 8023660:	4649      	mov	r1, r9
 8023662:	f7dd fa61 	bl	8000b28 <__aeabi_dcmpeq>
 8023666:	b1e0      	cbz	r0, 80236a2 <pow+0x96>
 8023668:	2200      	movs	r2, #0
 802366a:	2300      	movs	r3, #0
 802366c:	4630      	mov	r0, r6
 802366e:	4639      	mov	r1, r7
 8023670:	f7dd fa5a 	bl	8000b28 <__aeabi_dcmpeq>
 8023674:	2800      	cmp	r0, #0
 8023676:	d16c      	bne.n	8023752 <pow+0x146>
 8023678:	ec47 6b10 	vmov	d0, r6, r7
 802367c:	f000 fe53 	bl	8024326 <finite>
 8023680:	2800      	cmp	r0, #0
 8023682:	d0e8      	beq.n	8023656 <pow+0x4a>
 8023684:	2200      	movs	r2, #0
 8023686:	2300      	movs	r3, #0
 8023688:	4630      	mov	r0, r6
 802368a:	4639      	mov	r1, r7
 802368c:	f7dd fa56 	bl	8000b3c <__aeabi_dcmplt>
 8023690:	2800      	cmp	r0, #0
 8023692:	d0e0      	beq.n	8023656 <pow+0x4a>
 8023694:	f7fb ffdc 	bl	801f650 <__errno>
 8023698:	2321      	movs	r3, #33	; 0x21
 802369a:	6003      	str	r3, [r0, #0]
 802369c:	2400      	movs	r4, #0
 802369e:	4d2f      	ldr	r5, [pc, #188]	; (802375c <pow+0x150>)
 80236a0:	e7d9      	b.n	8023656 <pow+0x4a>
 80236a2:	ec45 4b10 	vmov	d0, r4, r5
 80236a6:	f000 fe3e 	bl	8024326 <finite>
 80236aa:	bbb8      	cbnz	r0, 802371c <pow+0x110>
 80236ac:	ec49 8b10 	vmov	d0, r8, r9
 80236b0:	f000 fe39 	bl	8024326 <finite>
 80236b4:	b390      	cbz	r0, 802371c <pow+0x110>
 80236b6:	ec47 6b10 	vmov	d0, r6, r7
 80236ba:	f000 fe34 	bl	8024326 <finite>
 80236be:	b368      	cbz	r0, 802371c <pow+0x110>
 80236c0:	4622      	mov	r2, r4
 80236c2:	462b      	mov	r3, r5
 80236c4:	4620      	mov	r0, r4
 80236c6:	4629      	mov	r1, r5
 80236c8:	f7dd fa60 	bl	8000b8c <__aeabi_dcmpun>
 80236cc:	b160      	cbz	r0, 80236e8 <pow+0xdc>
 80236ce:	f7fb ffbf 	bl	801f650 <__errno>
 80236d2:	2321      	movs	r3, #33	; 0x21
 80236d4:	6003      	str	r3, [r0, #0]
 80236d6:	2200      	movs	r2, #0
 80236d8:	2300      	movs	r3, #0
 80236da:	4610      	mov	r0, r2
 80236dc:	4619      	mov	r1, r3
 80236de:	f7dd f8e5 	bl	80008ac <__aeabi_ddiv>
 80236e2:	4604      	mov	r4, r0
 80236e4:	460d      	mov	r5, r1
 80236e6:	e7b6      	b.n	8023656 <pow+0x4a>
 80236e8:	f7fb ffb2 	bl	801f650 <__errno>
 80236ec:	2322      	movs	r3, #34	; 0x22
 80236ee:	6003      	str	r3, [r0, #0]
 80236f0:	2200      	movs	r2, #0
 80236f2:	2300      	movs	r3, #0
 80236f4:	4640      	mov	r0, r8
 80236f6:	4649      	mov	r1, r9
 80236f8:	f7dd fa20 	bl	8000b3c <__aeabi_dcmplt>
 80236fc:	2400      	movs	r4, #0
 80236fe:	b158      	cbz	r0, 8023718 <pow+0x10c>
 8023700:	ec47 6b10 	vmov	d0, r6, r7
 8023704:	f000 fe24 	bl	8024350 <rint>
 8023708:	4632      	mov	r2, r6
 802370a:	ec51 0b10 	vmov	r0, r1, d0
 802370e:	463b      	mov	r3, r7
 8023710:	f7dd fa0a 	bl	8000b28 <__aeabi_dcmpeq>
 8023714:	2800      	cmp	r0, #0
 8023716:	d0c2      	beq.n	802369e <pow+0x92>
 8023718:	4d11      	ldr	r5, [pc, #68]	; (8023760 <pow+0x154>)
 802371a:	e79c      	b.n	8023656 <pow+0x4a>
 802371c:	2200      	movs	r2, #0
 802371e:	2300      	movs	r3, #0
 8023720:	4620      	mov	r0, r4
 8023722:	4629      	mov	r1, r5
 8023724:	f7dd fa00 	bl	8000b28 <__aeabi_dcmpeq>
 8023728:	2800      	cmp	r0, #0
 802372a:	d094      	beq.n	8023656 <pow+0x4a>
 802372c:	ec49 8b10 	vmov	d0, r8, r9
 8023730:	f000 fdf9 	bl	8024326 <finite>
 8023734:	2800      	cmp	r0, #0
 8023736:	d08e      	beq.n	8023656 <pow+0x4a>
 8023738:	ec47 6b10 	vmov	d0, r6, r7
 802373c:	f000 fdf3 	bl	8024326 <finite>
 8023740:	2800      	cmp	r0, #0
 8023742:	d088      	beq.n	8023656 <pow+0x4a>
 8023744:	f7fb ff84 	bl	801f650 <__errno>
 8023748:	2322      	movs	r3, #34	; 0x22
 802374a:	6003      	str	r3, [r0, #0]
 802374c:	2400      	movs	r4, #0
 802374e:	2500      	movs	r5, #0
 8023750:	e781      	b.n	8023656 <pow+0x4a>
 8023752:	4d04      	ldr	r5, [pc, #16]	; (8023764 <pow+0x158>)
 8023754:	2400      	movs	r4, #0
 8023756:	e77e      	b.n	8023656 <pow+0x4a>
 8023758:	20000a4c 	.word	0x20000a4c
 802375c:	fff00000 	.word	0xfff00000
 8023760:	7ff00000 	.word	0x7ff00000
 8023764:	3ff00000 	.word	0x3ff00000

08023768 <__ieee754_pow>:
 8023768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802376c:	ed2d 8b06 	vpush	{d8-d10}
 8023770:	b08d      	sub	sp, #52	; 0x34
 8023772:	ed8d 1b02 	vstr	d1, [sp, #8]
 8023776:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 802377a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 802377e:	ea56 0100 	orrs.w	r1, r6, r0
 8023782:	ec53 2b10 	vmov	r2, r3, d0
 8023786:	f000 84d1 	beq.w	802412c <__ieee754_pow+0x9c4>
 802378a:	497f      	ldr	r1, [pc, #508]	; (8023988 <__ieee754_pow+0x220>)
 802378c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8023790:	428c      	cmp	r4, r1
 8023792:	ee10 8a10 	vmov	r8, s0
 8023796:	4699      	mov	r9, r3
 8023798:	dc09      	bgt.n	80237ae <__ieee754_pow+0x46>
 802379a:	d103      	bne.n	80237a4 <__ieee754_pow+0x3c>
 802379c:	b97a      	cbnz	r2, 80237be <__ieee754_pow+0x56>
 802379e:	42a6      	cmp	r6, r4
 80237a0:	dd02      	ble.n	80237a8 <__ieee754_pow+0x40>
 80237a2:	e00c      	b.n	80237be <__ieee754_pow+0x56>
 80237a4:	428e      	cmp	r6, r1
 80237a6:	dc02      	bgt.n	80237ae <__ieee754_pow+0x46>
 80237a8:	428e      	cmp	r6, r1
 80237aa:	d110      	bne.n	80237ce <__ieee754_pow+0x66>
 80237ac:	b178      	cbz	r0, 80237ce <__ieee754_pow+0x66>
 80237ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80237b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80237b6:	ea54 0308 	orrs.w	r3, r4, r8
 80237ba:	f000 84b7 	beq.w	802412c <__ieee754_pow+0x9c4>
 80237be:	4873      	ldr	r0, [pc, #460]	; (802398c <__ieee754_pow+0x224>)
 80237c0:	b00d      	add	sp, #52	; 0x34
 80237c2:	ecbd 8b06 	vpop	{d8-d10}
 80237c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237ca:	f000 bdb9 	b.w	8024340 <nan>
 80237ce:	f1b9 0f00 	cmp.w	r9, #0
 80237d2:	da36      	bge.n	8023842 <__ieee754_pow+0xda>
 80237d4:	496e      	ldr	r1, [pc, #440]	; (8023990 <__ieee754_pow+0x228>)
 80237d6:	428e      	cmp	r6, r1
 80237d8:	dc51      	bgt.n	802387e <__ieee754_pow+0x116>
 80237da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80237de:	428e      	cmp	r6, r1
 80237e0:	f340 84af 	ble.w	8024142 <__ieee754_pow+0x9da>
 80237e4:	1531      	asrs	r1, r6, #20
 80237e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80237ea:	2914      	cmp	r1, #20
 80237ec:	dd0f      	ble.n	802380e <__ieee754_pow+0xa6>
 80237ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80237f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80237f6:	fa0c f101 	lsl.w	r1, ip, r1
 80237fa:	4281      	cmp	r1, r0
 80237fc:	f040 84a1 	bne.w	8024142 <__ieee754_pow+0x9da>
 8023800:	f00c 0c01 	and.w	ip, ip, #1
 8023804:	f1cc 0102 	rsb	r1, ip, #2
 8023808:	9100      	str	r1, [sp, #0]
 802380a:	b180      	cbz	r0, 802382e <__ieee754_pow+0xc6>
 802380c:	e059      	b.n	80238c2 <__ieee754_pow+0x15a>
 802380e:	2800      	cmp	r0, #0
 8023810:	d155      	bne.n	80238be <__ieee754_pow+0x156>
 8023812:	f1c1 0114 	rsb	r1, r1, #20
 8023816:	fa46 fc01 	asr.w	ip, r6, r1
 802381a:	fa0c f101 	lsl.w	r1, ip, r1
 802381e:	42b1      	cmp	r1, r6
 8023820:	f040 848c 	bne.w	802413c <__ieee754_pow+0x9d4>
 8023824:	f00c 0c01 	and.w	ip, ip, #1
 8023828:	f1cc 0102 	rsb	r1, ip, #2
 802382c:	9100      	str	r1, [sp, #0]
 802382e:	4959      	ldr	r1, [pc, #356]	; (8023994 <__ieee754_pow+0x22c>)
 8023830:	428e      	cmp	r6, r1
 8023832:	d12d      	bne.n	8023890 <__ieee754_pow+0x128>
 8023834:	2f00      	cmp	r7, #0
 8023836:	da79      	bge.n	802392c <__ieee754_pow+0x1c4>
 8023838:	4956      	ldr	r1, [pc, #344]	; (8023994 <__ieee754_pow+0x22c>)
 802383a:	2000      	movs	r0, #0
 802383c:	f7dd f836 	bl	80008ac <__aeabi_ddiv>
 8023840:	e016      	b.n	8023870 <__ieee754_pow+0x108>
 8023842:	2100      	movs	r1, #0
 8023844:	9100      	str	r1, [sp, #0]
 8023846:	2800      	cmp	r0, #0
 8023848:	d13b      	bne.n	80238c2 <__ieee754_pow+0x15a>
 802384a:	494f      	ldr	r1, [pc, #316]	; (8023988 <__ieee754_pow+0x220>)
 802384c:	428e      	cmp	r6, r1
 802384e:	d1ee      	bne.n	802382e <__ieee754_pow+0xc6>
 8023850:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8023854:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8023858:	ea53 0308 	orrs.w	r3, r3, r8
 802385c:	f000 8466 	beq.w	802412c <__ieee754_pow+0x9c4>
 8023860:	4b4d      	ldr	r3, [pc, #308]	; (8023998 <__ieee754_pow+0x230>)
 8023862:	429c      	cmp	r4, r3
 8023864:	dd0d      	ble.n	8023882 <__ieee754_pow+0x11a>
 8023866:	2f00      	cmp	r7, #0
 8023868:	f280 8464 	bge.w	8024134 <__ieee754_pow+0x9cc>
 802386c:	2000      	movs	r0, #0
 802386e:	2100      	movs	r1, #0
 8023870:	ec41 0b10 	vmov	d0, r0, r1
 8023874:	b00d      	add	sp, #52	; 0x34
 8023876:	ecbd 8b06 	vpop	{d8-d10}
 802387a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802387e:	2102      	movs	r1, #2
 8023880:	e7e0      	b.n	8023844 <__ieee754_pow+0xdc>
 8023882:	2f00      	cmp	r7, #0
 8023884:	daf2      	bge.n	802386c <__ieee754_pow+0x104>
 8023886:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 802388a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802388e:	e7ef      	b.n	8023870 <__ieee754_pow+0x108>
 8023890:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8023894:	d104      	bne.n	80238a0 <__ieee754_pow+0x138>
 8023896:	4610      	mov	r0, r2
 8023898:	4619      	mov	r1, r3
 802389a:	f7dc fedd 	bl	8000658 <__aeabi_dmul>
 802389e:	e7e7      	b.n	8023870 <__ieee754_pow+0x108>
 80238a0:	493e      	ldr	r1, [pc, #248]	; (802399c <__ieee754_pow+0x234>)
 80238a2:	428f      	cmp	r7, r1
 80238a4:	d10d      	bne.n	80238c2 <__ieee754_pow+0x15a>
 80238a6:	f1b9 0f00 	cmp.w	r9, #0
 80238aa:	db0a      	blt.n	80238c2 <__ieee754_pow+0x15a>
 80238ac:	ec43 2b10 	vmov	d0, r2, r3
 80238b0:	b00d      	add	sp, #52	; 0x34
 80238b2:	ecbd 8b06 	vpop	{d8-d10}
 80238b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238ba:	f000 bc77 	b.w	80241ac <__ieee754_sqrt>
 80238be:	2100      	movs	r1, #0
 80238c0:	9100      	str	r1, [sp, #0]
 80238c2:	ec43 2b10 	vmov	d0, r2, r3
 80238c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80238ca:	f000 fd23 	bl	8024314 <fabs>
 80238ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80238d2:	ec51 0b10 	vmov	r0, r1, d0
 80238d6:	f1b8 0f00 	cmp.w	r8, #0
 80238da:	d12a      	bne.n	8023932 <__ieee754_pow+0x1ca>
 80238dc:	b12c      	cbz	r4, 80238ea <__ieee754_pow+0x182>
 80238de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8023994 <__ieee754_pow+0x22c>
 80238e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80238e6:	45e6      	cmp	lr, ip
 80238e8:	d123      	bne.n	8023932 <__ieee754_pow+0x1ca>
 80238ea:	2f00      	cmp	r7, #0
 80238ec:	da05      	bge.n	80238fa <__ieee754_pow+0x192>
 80238ee:	4602      	mov	r2, r0
 80238f0:	460b      	mov	r3, r1
 80238f2:	2000      	movs	r0, #0
 80238f4:	4927      	ldr	r1, [pc, #156]	; (8023994 <__ieee754_pow+0x22c>)
 80238f6:	f7dc ffd9 	bl	80008ac <__aeabi_ddiv>
 80238fa:	f1b9 0f00 	cmp.w	r9, #0
 80238fe:	dab7      	bge.n	8023870 <__ieee754_pow+0x108>
 8023900:	9b00      	ldr	r3, [sp, #0]
 8023902:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8023906:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802390a:	4323      	orrs	r3, r4
 802390c:	d108      	bne.n	8023920 <__ieee754_pow+0x1b8>
 802390e:	4602      	mov	r2, r0
 8023910:	460b      	mov	r3, r1
 8023912:	4610      	mov	r0, r2
 8023914:	4619      	mov	r1, r3
 8023916:	f7dc fce7 	bl	80002e8 <__aeabi_dsub>
 802391a:	4602      	mov	r2, r0
 802391c:	460b      	mov	r3, r1
 802391e:	e78d      	b.n	802383c <__ieee754_pow+0xd4>
 8023920:	9b00      	ldr	r3, [sp, #0]
 8023922:	2b01      	cmp	r3, #1
 8023924:	d1a4      	bne.n	8023870 <__ieee754_pow+0x108>
 8023926:	4602      	mov	r2, r0
 8023928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802392c:	4610      	mov	r0, r2
 802392e:	4619      	mov	r1, r3
 8023930:	e79e      	b.n	8023870 <__ieee754_pow+0x108>
 8023932:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8023936:	f10c 35ff 	add.w	r5, ip, #4294967295
 802393a:	950a      	str	r5, [sp, #40]	; 0x28
 802393c:	9d00      	ldr	r5, [sp, #0]
 802393e:	46ac      	mov	ip, r5
 8023940:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023942:	ea5c 0505 	orrs.w	r5, ip, r5
 8023946:	d0e4      	beq.n	8023912 <__ieee754_pow+0x1aa>
 8023948:	4b15      	ldr	r3, [pc, #84]	; (80239a0 <__ieee754_pow+0x238>)
 802394a:	429e      	cmp	r6, r3
 802394c:	f340 80fc 	ble.w	8023b48 <__ieee754_pow+0x3e0>
 8023950:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023954:	429e      	cmp	r6, r3
 8023956:	4b10      	ldr	r3, [pc, #64]	; (8023998 <__ieee754_pow+0x230>)
 8023958:	dd07      	ble.n	802396a <__ieee754_pow+0x202>
 802395a:	429c      	cmp	r4, r3
 802395c:	dc0a      	bgt.n	8023974 <__ieee754_pow+0x20c>
 802395e:	2f00      	cmp	r7, #0
 8023960:	da84      	bge.n	802386c <__ieee754_pow+0x104>
 8023962:	a307      	add	r3, pc, #28	; (adr r3, 8023980 <__ieee754_pow+0x218>)
 8023964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023968:	e795      	b.n	8023896 <__ieee754_pow+0x12e>
 802396a:	429c      	cmp	r4, r3
 802396c:	dbf7      	blt.n	802395e <__ieee754_pow+0x1f6>
 802396e:	4b09      	ldr	r3, [pc, #36]	; (8023994 <__ieee754_pow+0x22c>)
 8023970:	429c      	cmp	r4, r3
 8023972:	dd17      	ble.n	80239a4 <__ieee754_pow+0x23c>
 8023974:	2f00      	cmp	r7, #0
 8023976:	dcf4      	bgt.n	8023962 <__ieee754_pow+0x1fa>
 8023978:	e778      	b.n	802386c <__ieee754_pow+0x104>
 802397a:	bf00      	nop
 802397c:	f3af 8000 	nop.w
 8023980:	8800759c 	.word	0x8800759c
 8023984:	7e37e43c 	.word	0x7e37e43c
 8023988:	7ff00000 	.word	0x7ff00000
 802398c:	0802a401 	.word	0x0802a401
 8023990:	433fffff 	.word	0x433fffff
 8023994:	3ff00000 	.word	0x3ff00000
 8023998:	3fefffff 	.word	0x3fefffff
 802399c:	3fe00000 	.word	0x3fe00000
 80239a0:	41e00000 	.word	0x41e00000
 80239a4:	4b64      	ldr	r3, [pc, #400]	; (8023b38 <__ieee754_pow+0x3d0>)
 80239a6:	2200      	movs	r2, #0
 80239a8:	f7dc fc9e 	bl	80002e8 <__aeabi_dsub>
 80239ac:	a356      	add	r3, pc, #344	; (adr r3, 8023b08 <__ieee754_pow+0x3a0>)
 80239ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239b2:	4604      	mov	r4, r0
 80239b4:	460d      	mov	r5, r1
 80239b6:	f7dc fe4f 	bl	8000658 <__aeabi_dmul>
 80239ba:	a355      	add	r3, pc, #340	; (adr r3, 8023b10 <__ieee754_pow+0x3a8>)
 80239bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239c0:	4606      	mov	r6, r0
 80239c2:	460f      	mov	r7, r1
 80239c4:	4620      	mov	r0, r4
 80239c6:	4629      	mov	r1, r5
 80239c8:	f7dc fe46 	bl	8000658 <__aeabi_dmul>
 80239cc:	4b5b      	ldr	r3, [pc, #364]	; (8023b3c <__ieee754_pow+0x3d4>)
 80239ce:	4682      	mov	sl, r0
 80239d0:	468b      	mov	fp, r1
 80239d2:	2200      	movs	r2, #0
 80239d4:	4620      	mov	r0, r4
 80239d6:	4629      	mov	r1, r5
 80239d8:	f7dc fe3e 	bl	8000658 <__aeabi_dmul>
 80239dc:	4602      	mov	r2, r0
 80239de:	460b      	mov	r3, r1
 80239e0:	a14d      	add	r1, pc, #308	; (adr r1, 8023b18 <__ieee754_pow+0x3b0>)
 80239e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80239e6:	f7dc fc7f 	bl	80002e8 <__aeabi_dsub>
 80239ea:	4622      	mov	r2, r4
 80239ec:	462b      	mov	r3, r5
 80239ee:	f7dc fe33 	bl	8000658 <__aeabi_dmul>
 80239f2:	4602      	mov	r2, r0
 80239f4:	460b      	mov	r3, r1
 80239f6:	2000      	movs	r0, #0
 80239f8:	4951      	ldr	r1, [pc, #324]	; (8023b40 <__ieee754_pow+0x3d8>)
 80239fa:	f7dc fc75 	bl	80002e8 <__aeabi_dsub>
 80239fe:	4622      	mov	r2, r4
 8023a00:	4680      	mov	r8, r0
 8023a02:	4689      	mov	r9, r1
 8023a04:	462b      	mov	r3, r5
 8023a06:	4620      	mov	r0, r4
 8023a08:	4629      	mov	r1, r5
 8023a0a:	f7dc fe25 	bl	8000658 <__aeabi_dmul>
 8023a0e:	4602      	mov	r2, r0
 8023a10:	460b      	mov	r3, r1
 8023a12:	4640      	mov	r0, r8
 8023a14:	4649      	mov	r1, r9
 8023a16:	f7dc fe1f 	bl	8000658 <__aeabi_dmul>
 8023a1a:	a341      	add	r3, pc, #260	; (adr r3, 8023b20 <__ieee754_pow+0x3b8>)
 8023a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a20:	f7dc fe1a 	bl	8000658 <__aeabi_dmul>
 8023a24:	4602      	mov	r2, r0
 8023a26:	460b      	mov	r3, r1
 8023a28:	4650      	mov	r0, sl
 8023a2a:	4659      	mov	r1, fp
 8023a2c:	f7dc fc5c 	bl	80002e8 <__aeabi_dsub>
 8023a30:	4602      	mov	r2, r0
 8023a32:	460b      	mov	r3, r1
 8023a34:	4680      	mov	r8, r0
 8023a36:	4689      	mov	r9, r1
 8023a38:	4630      	mov	r0, r6
 8023a3a:	4639      	mov	r1, r7
 8023a3c:	f7dc fc56 	bl	80002ec <__adddf3>
 8023a40:	2400      	movs	r4, #0
 8023a42:	4632      	mov	r2, r6
 8023a44:	463b      	mov	r3, r7
 8023a46:	4620      	mov	r0, r4
 8023a48:	460d      	mov	r5, r1
 8023a4a:	f7dc fc4d 	bl	80002e8 <__aeabi_dsub>
 8023a4e:	4602      	mov	r2, r0
 8023a50:	460b      	mov	r3, r1
 8023a52:	4640      	mov	r0, r8
 8023a54:	4649      	mov	r1, r9
 8023a56:	f7dc fc47 	bl	80002e8 <__aeabi_dsub>
 8023a5a:	9b00      	ldr	r3, [sp, #0]
 8023a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a5e:	3b01      	subs	r3, #1
 8023a60:	4313      	orrs	r3, r2
 8023a62:	4682      	mov	sl, r0
 8023a64:	468b      	mov	fp, r1
 8023a66:	f040 81f1 	bne.w	8023e4c <__ieee754_pow+0x6e4>
 8023a6a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8023b28 <__ieee754_pow+0x3c0>
 8023a6e:	eeb0 8a47 	vmov.f32	s16, s14
 8023a72:	eef0 8a67 	vmov.f32	s17, s15
 8023a76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023a7a:	2600      	movs	r6, #0
 8023a7c:	4632      	mov	r2, r6
 8023a7e:	463b      	mov	r3, r7
 8023a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023a84:	f7dc fc30 	bl	80002e8 <__aeabi_dsub>
 8023a88:	4622      	mov	r2, r4
 8023a8a:	462b      	mov	r3, r5
 8023a8c:	f7dc fde4 	bl	8000658 <__aeabi_dmul>
 8023a90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023a94:	4680      	mov	r8, r0
 8023a96:	4689      	mov	r9, r1
 8023a98:	4650      	mov	r0, sl
 8023a9a:	4659      	mov	r1, fp
 8023a9c:	f7dc fddc 	bl	8000658 <__aeabi_dmul>
 8023aa0:	4602      	mov	r2, r0
 8023aa2:	460b      	mov	r3, r1
 8023aa4:	4640      	mov	r0, r8
 8023aa6:	4649      	mov	r1, r9
 8023aa8:	f7dc fc20 	bl	80002ec <__adddf3>
 8023aac:	4632      	mov	r2, r6
 8023aae:	463b      	mov	r3, r7
 8023ab0:	4680      	mov	r8, r0
 8023ab2:	4689      	mov	r9, r1
 8023ab4:	4620      	mov	r0, r4
 8023ab6:	4629      	mov	r1, r5
 8023ab8:	f7dc fdce 	bl	8000658 <__aeabi_dmul>
 8023abc:	460b      	mov	r3, r1
 8023abe:	4604      	mov	r4, r0
 8023ac0:	460d      	mov	r5, r1
 8023ac2:	4602      	mov	r2, r0
 8023ac4:	4649      	mov	r1, r9
 8023ac6:	4640      	mov	r0, r8
 8023ac8:	f7dc fc10 	bl	80002ec <__adddf3>
 8023acc:	4b1d      	ldr	r3, [pc, #116]	; (8023b44 <__ieee754_pow+0x3dc>)
 8023ace:	4299      	cmp	r1, r3
 8023ad0:	ec45 4b19 	vmov	d9, r4, r5
 8023ad4:	4606      	mov	r6, r0
 8023ad6:	460f      	mov	r7, r1
 8023ad8:	468b      	mov	fp, r1
 8023ada:	f340 82fe 	ble.w	80240da <__ieee754_pow+0x972>
 8023ade:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023ae2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023ae6:	4303      	orrs	r3, r0
 8023ae8:	f000 81f0 	beq.w	8023ecc <__ieee754_pow+0x764>
 8023aec:	a310      	add	r3, pc, #64	; (adr r3, 8023b30 <__ieee754_pow+0x3c8>)
 8023aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023af2:	ec51 0b18 	vmov	r0, r1, d8
 8023af6:	f7dc fdaf 	bl	8000658 <__aeabi_dmul>
 8023afa:	a30d      	add	r3, pc, #52	; (adr r3, 8023b30 <__ieee754_pow+0x3c8>)
 8023afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b00:	e6cb      	b.n	802389a <__ieee754_pow+0x132>
 8023b02:	bf00      	nop
 8023b04:	f3af 8000 	nop.w
 8023b08:	60000000 	.word	0x60000000
 8023b0c:	3ff71547 	.word	0x3ff71547
 8023b10:	f85ddf44 	.word	0xf85ddf44
 8023b14:	3e54ae0b 	.word	0x3e54ae0b
 8023b18:	55555555 	.word	0x55555555
 8023b1c:	3fd55555 	.word	0x3fd55555
 8023b20:	652b82fe 	.word	0x652b82fe
 8023b24:	3ff71547 	.word	0x3ff71547
 8023b28:	00000000 	.word	0x00000000
 8023b2c:	bff00000 	.word	0xbff00000
 8023b30:	8800759c 	.word	0x8800759c
 8023b34:	7e37e43c 	.word	0x7e37e43c
 8023b38:	3ff00000 	.word	0x3ff00000
 8023b3c:	3fd00000 	.word	0x3fd00000
 8023b40:	3fe00000 	.word	0x3fe00000
 8023b44:	408fffff 	.word	0x408fffff
 8023b48:	4bd7      	ldr	r3, [pc, #860]	; (8023ea8 <__ieee754_pow+0x740>)
 8023b4a:	ea03 0309 	and.w	r3, r3, r9
 8023b4e:	2200      	movs	r2, #0
 8023b50:	b92b      	cbnz	r3, 8023b5e <__ieee754_pow+0x3f6>
 8023b52:	4bd6      	ldr	r3, [pc, #856]	; (8023eac <__ieee754_pow+0x744>)
 8023b54:	f7dc fd80 	bl	8000658 <__aeabi_dmul>
 8023b58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023b5c:	460c      	mov	r4, r1
 8023b5e:	1523      	asrs	r3, r4, #20
 8023b60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023b64:	4413      	add	r3, r2
 8023b66:	9309      	str	r3, [sp, #36]	; 0x24
 8023b68:	4bd1      	ldr	r3, [pc, #836]	; (8023eb0 <__ieee754_pow+0x748>)
 8023b6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023b6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8023b72:	429c      	cmp	r4, r3
 8023b74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023b78:	dd08      	ble.n	8023b8c <__ieee754_pow+0x424>
 8023b7a:	4bce      	ldr	r3, [pc, #824]	; (8023eb4 <__ieee754_pow+0x74c>)
 8023b7c:	429c      	cmp	r4, r3
 8023b7e:	f340 8163 	ble.w	8023e48 <__ieee754_pow+0x6e0>
 8023b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b84:	3301      	adds	r3, #1
 8023b86:	9309      	str	r3, [sp, #36]	; 0x24
 8023b88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023b8c:	2400      	movs	r4, #0
 8023b8e:	00e3      	lsls	r3, r4, #3
 8023b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8023b92:	4bc9      	ldr	r3, [pc, #804]	; (8023eb8 <__ieee754_pow+0x750>)
 8023b94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023b98:	ed93 7b00 	vldr	d7, [r3]
 8023b9c:	4629      	mov	r1, r5
 8023b9e:	ec53 2b17 	vmov	r2, r3, d7
 8023ba2:	eeb0 8a47 	vmov.f32	s16, s14
 8023ba6:	eef0 8a67 	vmov.f32	s17, s15
 8023baa:	4682      	mov	sl, r0
 8023bac:	f7dc fb9c 	bl	80002e8 <__aeabi_dsub>
 8023bb0:	4652      	mov	r2, sl
 8023bb2:	4606      	mov	r6, r0
 8023bb4:	460f      	mov	r7, r1
 8023bb6:	462b      	mov	r3, r5
 8023bb8:	ec51 0b18 	vmov	r0, r1, d8
 8023bbc:	f7dc fb96 	bl	80002ec <__adddf3>
 8023bc0:	4602      	mov	r2, r0
 8023bc2:	460b      	mov	r3, r1
 8023bc4:	2000      	movs	r0, #0
 8023bc6:	49bd      	ldr	r1, [pc, #756]	; (8023ebc <__ieee754_pow+0x754>)
 8023bc8:	f7dc fe70 	bl	80008ac <__aeabi_ddiv>
 8023bcc:	ec41 0b19 	vmov	d9, r0, r1
 8023bd0:	4602      	mov	r2, r0
 8023bd2:	460b      	mov	r3, r1
 8023bd4:	4630      	mov	r0, r6
 8023bd6:	4639      	mov	r1, r7
 8023bd8:	f7dc fd3e 	bl	8000658 <__aeabi_dmul>
 8023bdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023be0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023be4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023be8:	2300      	movs	r3, #0
 8023bea:	9304      	str	r3, [sp, #16]
 8023bec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8023bf0:	46ab      	mov	fp, r5
 8023bf2:	106d      	asrs	r5, r5, #1
 8023bf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023bf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023bfc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8023c00:	2200      	movs	r2, #0
 8023c02:	4640      	mov	r0, r8
 8023c04:	4649      	mov	r1, r9
 8023c06:	4614      	mov	r4, r2
 8023c08:	461d      	mov	r5, r3
 8023c0a:	f7dc fd25 	bl	8000658 <__aeabi_dmul>
 8023c0e:	4602      	mov	r2, r0
 8023c10:	460b      	mov	r3, r1
 8023c12:	4630      	mov	r0, r6
 8023c14:	4639      	mov	r1, r7
 8023c16:	f7dc fb67 	bl	80002e8 <__aeabi_dsub>
 8023c1a:	ec53 2b18 	vmov	r2, r3, d8
 8023c1e:	4606      	mov	r6, r0
 8023c20:	460f      	mov	r7, r1
 8023c22:	4620      	mov	r0, r4
 8023c24:	4629      	mov	r1, r5
 8023c26:	f7dc fb5f 	bl	80002e8 <__aeabi_dsub>
 8023c2a:	4602      	mov	r2, r0
 8023c2c:	460b      	mov	r3, r1
 8023c2e:	4650      	mov	r0, sl
 8023c30:	4659      	mov	r1, fp
 8023c32:	f7dc fb59 	bl	80002e8 <__aeabi_dsub>
 8023c36:	4642      	mov	r2, r8
 8023c38:	464b      	mov	r3, r9
 8023c3a:	f7dc fd0d 	bl	8000658 <__aeabi_dmul>
 8023c3e:	4602      	mov	r2, r0
 8023c40:	460b      	mov	r3, r1
 8023c42:	4630      	mov	r0, r6
 8023c44:	4639      	mov	r1, r7
 8023c46:	f7dc fb4f 	bl	80002e8 <__aeabi_dsub>
 8023c4a:	ec53 2b19 	vmov	r2, r3, d9
 8023c4e:	f7dc fd03 	bl	8000658 <__aeabi_dmul>
 8023c52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023c56:	ec41 0b18 	vmov	d8, r0, r1
 8023c5a:	4610      	mov	r0, r2
 8023c5c:	4619      	mov	r1, r3
 8023c5e:	f7dc fcfb 	bl	8000658 <__aeabi_dmul>
 8023c62:	a37d      	add	r3, pc, #500	; (adr r3, 8023e58 <__ieee754_pow+0x6f0>)
 8023c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c68:	4604      	mov	r4, r0
 8023c6a:	460d      	mov	r5, r1
 8023c6c:	f7dc fcf4 	bl	8000658 <__aeabi_dmul>
 8023c70:	a37b      	add	r3, pc, #492	; (adr r3, 8023e60 <__ieee754_pow+0x6f8>)
 8023c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c76:	f7dc fb39 	bl	80002ec <__adddf3>
 8023c7a:	4622      	mov	r2, r4
 8023c7c:	462b      	mov	r3, r5
 8023c7e:	f7dc fceb 	bl	8000658 <__aeabi_dmul>
 8023c82:	a379      	add	r3, pc, #484	; (adr r3, 8023e68 <__ieee754_pow+0x700>)
 8023c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c88:	f7dc fb30 	bl	80002ec <__adddf3>
 8023c8c:	4622      	mov	r2, r4
 8023c8e:	462b      	mov	r3, r5
 8023c90:	f7dc fce2 	bl	8000658 <__aeabi_dmul>
 8023c94:	a376      	add	r3, pc, #472	; (adr r3, 8023e70 <__ieee754_pow+0x708>)
 8023c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c9a:	f7dc fb27 	bl	80002ec <__adddf3>
 8023c9e:	4622      	mov	r2, r4
 8023ca0:	462b      	mov	r3, r5
 8023ca2:	f7dc fcd9 	bl	8000658 <__aeabi_dmul>
 8023ca6:	a374      	add	r3, pc, #464	; (adr r3, 8023e78 <__ieee754_pow+0x710>)
 8023ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cac:	f7dc fb1e 	bl	80002ec <__adddf3>
 8023cb0:	4622      	mov	r2, r4
 8023cb2:	462b      	mov	r3, r5
 8023cb4:	f7dc fcd0 	bl	8000658 <__aeabi_dmul>
 8023cb8:	a371      	add	r3, pc, #452	; (adr r3, 8023e80 <__ieee754_pow+0x718>)
 8023cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cbe:	f7dc fb15 	bl	80002ec <__adddf3>
 8023cc2:	4622      	mov	r2, r4
 8023cc4:	4606      	mov	r6, r0
 8023cc6:	460f      	mov	r7, r1
 8023cc8:	462b      	mov	r3, r5
 8023cca:	4620      	mov	r0, r4
 8023ccc:	4629      	mov	r1, r5
 8023cce:	f7dc fcc3 	bl	8000658 <__aeabi_dmul>
 8023cd2:	4602      	mov	r2, r0
 8023cd4:	460b      	mov	r3, r1
 8023cd6:	4630      	mov	r0, r6
 8023cd8:	4639      	mov	r1, r7
 8023cda:	f7dc fcbd 	bl	8000658 <__aeabi_dmul>
 8023cde:	4642      	mov	r2, r8
 8023ce0:	4604      	mov	r4, r0
 8023ce2:	460d      	mov	r5, r1
 8023ce4:	464b      	mov	r3, r9
 8023ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023cea:	f7dc faff 	bl	80002ec <__adddf3>
 8023cee:	ec53 2b18 	vmov	r2, r3, d8
 8023cf2:	f7dc fcb1 	bl	8000658 <__aeabi_dmul>
 8023cf6:	4622      	mov	r2, r4
 8023cf8:	462b      	mov	r3, r5
 8023cfa:	f7dc faf7 	bl	80002ec <__adddf3>
 8023cfe:	4642      	mov	r2, r8
 8023d00:	4682      	mov	sl, r0
 8023d02:	468b      	mov	fp, r1
 8023d04:	464b      	mov	r3, r9
 8023d06:	4640      	mov	r0, r8
 8023d08:	4649      	mov	r1, r9
 8023d0a:	f7dc fca5 	bl	8000658 <__aeabi_dmul>
 8023d0e:	4b6c      	ldr	r3, [pc, #432]	; (8023ec0 <__ieee754_pow+0x758>)
 8023d10:	2200      	movs	r2, #0
 8023d12:	4606      	mov	r6, r0
 8023d14:	460f      	mov	r7, r1
 8023d16:	f7dc fae9 	bl	80002ec <__adddf3>
 8023d1a:	4652      	mov	r2, sl
 8023d1c:	465b      	mov	r3, fp
 8023d1e:	f7dc fae5 	bl	80002ec <__adddf3>
 8023d22:	9c04      	ldr	r4, [sp, #16]
 8023d24:	460d      	mov	r5, r1
 8023d26:	4622      	mov	r2, r4
 8023d28:	460b      	mov	r3, r1
 8023d2a:	4640      	mov	r0, r8
 8023d2c:	4649      	mov	r1, r9
 8023d2e:	f7dc fc93 	bl	8000658 <__aeabi_dmul>
 8023d32:	4b63      	ldr	r3, [pc, #396]	; (8023ec0 <__ieee754_pow+0x758>)
 8023d34:	4680      	mov	r8, r0
 8023d36:	4689      	mov	r9, r1
 8023d38:	2200      	movs	r2, #0
 8023d3a:	4620      	mov	r0, r4
 8023d3c:	4629      	mov	r1, r5
 8023d3e:	f7dc fad3 	bl	80002e8 <__aeabi_dsub>
 8023d42:	4632      	mov	r2, r6
 8023d44:	463b      	mov	r3, r7
 8023d46:	f7dc facf 	bl	80002e8 <__aeabi_dsub>
 8023d4a:	4602      	mov	r2, r0
 8023d4c:	460b      	mov	r3, r1
 8023d4e:	4650      	mov	r0, sl
 8023d50:	4659      	mov	r1, fp
 8023d52:	f7dc fac9 	bl	80002e8 <__aeabi_dsub>
 8023d56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023d5a:	f7dc fc7d 	bl	8000658 <__aeabi_dmul>
 8023d5e:	4622      	mov	r2, r4
 8023d60:	4606      	mov	r6, r0
 8023d62:	460f      	mov	r7, r1
 8023d64:	462b      	mov	r3, r5
 8023d66:	ec51 0b18 	vmov	r0, r1, d8
 8023d6a:	f7dc fc75 	bl	8000658 <__aeabi_dmul>
 8023d6e:	4602      	mov	r2, r0
 8023d70:	460b      	mov	r3, r1
 8023d72:	4630      	mov	r0, r6
 8023d74:	4639      	mov	r1, r7
 8023d76:	f7dc fab9 	bl	80002ec <__adddf3>
 8023d7a:	4606      	mov	r6, r0
 8023d7c:	460f      	mov	r7, r1
 8023d7e:	4602      	mov	r2, r0
 8023d80:	460b      	mov	r3, r1
 8023d82:	4640      	mov	r0, r8
 8023d84:	4649      	mov	r1, r9
 8023d86:	f7dc fab1 	bl	80002ec <__adddf3>
 8023d8a:	9c04      	ldr	r4, [sp, #16]
 8023d8c:	a33e      	add	r3, pc, #248	; (adr r3, 8023e88 <__ieee754_pow+0x720>)
 8023d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d92:	4620      	mov	r0, r4
 8023d94:	460d      	mov	r5, r1
 8023d96:	f7dc fc5f 	bl	8000658 <__aeabi_dmul>
 8023d9a:	4642      	mov	r2, r8
 8023d9c:	ec41 0b18 	vmov	d8, r0, r1
 8023da0:	464b      	mov	r3, r9
 8023da2:	4620      	mov	r0, r4
 8023da4:	4629      	mov	r1, r5
 8023da6:	f7dc fa9f 	bl	80002e8 <__aeabi_dsub>
 8023daa:	4602      	mov	r2, r0
 8023dac:	460b      	mov	r3, r1
 8023dae:	4630      	mov	r0, r6
 8023db0:	4639      	mov	r1, r7
 8023db2:	f7dc fa99 	bl	80002e8 <__aeabi_dsub>
 8023db6:	a336      	add	r3, pc, #216	; (adr r3, 8023e90 <__ieee754_pow+0x728>)
 8023db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dbc:	f7dc fc4c 	bl	8000658 <__aeabi_dmul>
 8023dc0:	a335      	add	r3, pc, #212	; (adr r3, 8023e98 <__ieee754_pow+0x730>)
 8023dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dc6:	4606      	mov	r6, r0
 8023dc8:	460f      	mov	r7, r1
 8023dca:	4620      	mov	r0, r4
 8023dcc:	4629      	mov	r1, r5
 8023dce:	f7dc fc43 	bl	8000658 <__aeabi_dmul>
 8023dd2:	4602      	mov	r2, r0
 8023dd4:	460b      	mov	r3, r1
 8023dd6:	4630      	mov	r0, r6
 8023dd8:	4639      	mov	r1, r7
 8023dda:	f7dc fa87 	bl	80002ec <__adddf3>
 8023dde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023de0:	4b38      	ldr	r3, [pc, #224]	; (8023ec4 <__ieee754_pow+0x75c>)
 8023de2:	4413      	add	r3, r2
 8023de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023de8:	f7dc fa80 	bl	80002ec <__adddf3>
 8023dec:	4682      	mov	sl, r0
 8023dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023df0:	468b      	mov	fp, r1
 8023df2:	f7dc fbc7 	bl	8000584 <__aeabi_i2d>
 8023df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023df8:	4b33      	ldr	r3, [pc, #204]	; (8023ec8 <__ieee754_pow+0x760>)
 8023dfa:	4413      	add	r3, r2
 8023dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023e00:	4606      	mov	r6, r0
 8023e02:	460f      	mov	r7, r1
 8023e04:	4652      	mov	r2, sl
 8023e06:	465b      	mov	r3, fp
 8023e08:	ec51 0b18 	vmov	r0, r1, d8
 8023e0c:	f7dc fa6e 	bl	80002ec <__adddf3>
 8023e10:	4642      	mov	r2, r8
 8023e12:	464b      	mov	r3, r9
 8023e14:	f7dc fa6a 	bl	80002ec <__adddf3>
 8023e18:	4632      	mov	r2, r6
 8023e1a:	463b      	mov	r3, r7
 8023e1c:	f7dc fa66 	bl	80002ec <__adddf3>
 8023e20:	9c04      	ldr	r4, [sp, #16]
 8023e22:	4632      	mov	r2, r6
 8023e24:	463b      	mov	r3, r7
 8023e26:	4620      	mov	r0, r4
 8023e28:	460d      	mov	r5, r1
 8023e2a:	f7dc fa5d 	bl	80002e8 <__aeabi_dsub>
 8023e2e:	4642      	mov	r2, r8
 8023e30:	464b      	mov	r3, r9
 8023e32:	f7dc fa59 	bl	80002e8 <__aeabi_dsub>
 8023e36:	ec53 2b18 	vmov	r2, r3, d8
 8023e3a:	f7dc fa55 	bl	80002e8 <__aeabi_dsub>
 8023e3e:	4602      	mov	r2, r0
 8023e40:	460b      	mov	r3, r1
 8023e42:	4650      	mov	r0, sl
 8023e44:	4659      	mov	r1, fp
 8023e46:	e606      	b.n	8023a56 <__ieee754_pow+0x2ee>
 8023e48:	2401      	movs	r4, #1
 8023e4a:	e6a0      	b.n	8023b8e <__ieee754_pow+0x426>
 8023e4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023ea0 <__ieee754_pow+0x738>
 8023e50:	e60d      	b.n	8023a6e <__ieee754_pow+0x306>
 8023e52:	bf00      	nop
 8023e54:	f3af 8000 	nop.w
 8023e58:	4a454eef 	.word	0x4a454eef
 8023e5c:	3fca7e28 	.word	0x3fca7e28
 8023e60:	93c9db65 	.word	0x93c9db65
 8023e64:	3fcd864a 	.word	0x3fcd864a
 8023e68:	a91d4101 	.word	0xa91d4101
 8023e6c:	3fd17460 	.word	0x3fd17460
 8023e70:	518f264d 	.word	0x518f264d
 8023e74:	3fd55555 	.word	0x3fd55555
 8023e78:	db6fabff 	.word	0xdb6fabff
 8023e7c:	3fdb6db6 	.word	0x3fdb6db6
 8023e80:	33333303 	.word	0x33333303
 8023e84:	3fe33333 	.word	0x3fe33333
 8023e88:	e0000000 	.word	0xe0000000
 8023e8c:	3feec709 	.word	0x3feec709
 8023e90:	dc3a03fd 	.word	0xdc3a03fd
 8023e94:	3feec709 	.word	0x3feec709
 8023e98:	145b01f5 	.word	0x145b01f5
 8023e9c:	be3e2fe0 	.word	0xbe3e2fe0
 8023ea0:	00000000 	.word	0x00000000
 8023ea4:	3ff00000 	.word	0x3ff00000
 8023ea8:	7ff00000 	.word	0x7ff00000
 8023eac:	43400000 	.word	0x43400000
 8023eb0:	0003988e 	.word	0x0003988e
 8023eb4:	000bb679 	.word	0x000bb679
 8023eb8:	0802a410 	.word	0x0802a410
 8023ebc:	3ff00000 	.word	0x3ff00000
 8023ec0:	40080000 	.word	0x40080000
 8023ec4:	0802a430 	.word	0x0802a430
 8023ec8:	0802a420 	.word	0x0802a420
 8023ecc:	a3b5      	add	r3, pc, #724	; (adr r3, 80241a4 <__ieee754_pow+0xa3c>)
 8023ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ed2:	4640      	mov	r0, r8
 8023ed4:	4649      	mov	r1, r9
 8023ed6:	f7dc fa09 	bl	80002ec <__adddf3>
 8023eda:	4622      	mov	r2, r4
 8023edc:	ec41 0b1a 	vmov	d10, r0, r1
 8023ee0:	462b      	mov	r3, r5
 8023ee2:	4630      	mov	r0, r6
 8023ee4:	4639      	mov	r1, r7
 8023ee6:	f7dc f9ff 	bl	80002e8 <__aeabi_dsub>
 8023eea:	4602      	mov	r2, r0
 8023eec:	460b      	mov	r3, r1
 8023eee:	ec51 0b1a 	vmov	r0, r1, d10
 8023ef2:	f7dc fe41 	bl	8000b78 <__aeabi_dcmpgt>
 8023ef6:	2800      	cmp	r0, #0
 8023ef8:	f47f adf8 	bne.w	8023aec <__ieee754_pow+0x384>
 8023efc:	4aa4      	ldr	r2, [pc, #656]	; (8024190 <__ieee754_pow+0xa28>)
 8023efe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023f02:	4293      	cmp	r3, r2
 8023f04:	f340 810b 	ble.w	802411e <__ieee754_pow+0x9b6>
 8023f08:	151b      	asrs	r3, r3, #20
 8023f0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023f0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023f12:	fa4a f303 	asr.w	r3, sl, r3
 8023f16:	445b      	add	r3, fp
 8023f18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023f1c:	4e9d      	ldr	r6, [pc, #628]	; (8024194 <__ieee754_pow+0xa2c>)
 8023f1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023f22:	4116      	asrs	r6, r2
 8023f24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023f28:	2000      	movs	r0, #0
 8023f2a:	ea23 0106 	bic.w	r1, r3, r6
 8023f2e:	f1c2 0214 	rsb	r2, r2, #20
 8023f32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023f36:	fa4a fa02 	asr.w	sl, sl, r2
 8023f3a:	f1bb 0f00 	cmp.w	fp, #0
 8023f3e:	4602      	mov	r2, r0
 8023f40:	460b      	mov	r3, r1
 8023f42:	4620      	mov	r0, r4
 8023f44:	4629      	mov	r1, r5
 8023f46:	bfb8      	it	lt
 8023f48:	f1ca 0a00 	rsblt	sl, sl, #0
 8023f4c:	f7dc f9cc 	bl	80002e8 <__aeabi_dsub>
 8023f50:	ec41 0b19 	vmov	d9, r0, r1
 8023f54:	4642      	mov	r2, r8
 8023f56:	464b      	mov	r3, r9
 8023f58:	ec51 0b19 	vmov	r0, r1, d9
 8023f5c:	f7dc f9c6 	bl	80002ec <__adddf3>
 8023f60:	2400      	movs	r4, #0
 8023f62:	a379      	add	r3, pc, #484	; (adr r3, 8024148 <__ieee754_pow+0x9e0>)
 8023f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f68:	4620      	mov	r0, r4
 8023f6a:	460d      	mov	r5, r1
 8023f6c:	f7dc fb74 	bl	8000658 <__aeabi_dmul>
 8023f70:	ec53 2b19 	vmov	r2, r3, d9
 8023f74:	4606      	mov	r6, r0
 8023f76:	460f      	mov	r7, r1
 8023f78:	4620      	mov	r0, r4
 8023f7a:	4629      	mov	r1, r5
 8023f7c:	f7dc f9b4 	bl	80002e8 <__aeabi_dsub>
 8023f80:	4602      	mov	r2, r0
 8023f82:	460b      	mov	r3, r1
 8023f84:	4640      	mov	r0, r8
 8023f86:	4649      	mov	r1, r9
 8023f88:	f7dc f9ae 	bl	80002e8 <__aeabi_dsub>
 8023f8c:	a370      	add	r3, pc, #448	; (adr r3, 8024150 <__ieee754_pow+0x9e8>)
 8023f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f92:	f7dc fb61 	bl	8000658 <__aeabi_dmul>
 8023f96:	a370      	add	r3, pc, #448	; (adr r3, 8024158 <__ieee754_pow+0x9f0>)
 8023f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f9c:	4680      	mov	r8, r0
 8023f9e:	4689      	mov	r9, r1
 8023fa0:	4620      	mov	r0, r4
 8023fa2:	4629      	mov	r1, r5
 8023fa4:	f7dc fb58 	bl	8000658 <__aeabi_dmul>
 8023fa8:	4602      	mov	r2, r0
 8023faa:	460b      	mov	r3, r1
 8023fac:	4640      	mov	r0, r8
 8023fae:	4649      	mov	r1, r9
 8023fb0:	f7dc f99c 	bl	80002ec <__adddf3>
 8023fb4:	4604      	mov	r4, r0
 8023fb6:	460d      	mov	r5, r1
 8023fb8:	4602      	mov	r2, r0
 8023fba:	460b      	mov	r3, r1
 8023fbc:	4630      	mov	r0, r6
 8023fbe:	4639      	mov	r1, r7
 8023fc0:	f7dc f994 	bl	80002ec <__adddf3>
 8023fc4:	4632      	mov	r2, r6
 8023fc6:	463b      	mov	r3, r7
 8023fc8:	4680      	mov	r8, r0
 8023fca:	4689      	mov	r9, r1
 8023fcc:	f7dc f98c 	bl	80002e8 <__aeabi_dsub>
 8023fd0:	4602      	mov	r2, r0
 8023fd2:	460b      	mov	r3, r1
 8023fd4:	4620      	mov	r0, r4
 8023fd6:	4629      	mov	r1, r5
 8023fd8:	f7dc f986 	bl	80002e8 <__aeabi_dsub>
 8023fdc:	4642      	mov	r2, r8
 8023fde:	4606      	mov	r6, r0
 8023fe0:	460f      	mov	r7, r1
 8023fe2:	464b      	mov	r3, r9
 8023fe4:	4640      	mov	r0, r8
 8023fe6:	4649      	mov	r1, r9
 8023fe8:	f7dc fb36 	bl	8000658 <__aeabi_dmul>
 8023fec:	a35c      	add	r3, pc, #368	; (adr r3, 8024160 <__ieee754_pow+0x9f8>)
 8023fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ff2:	4604      	mov	r4, r0
 8023ff4:	460d      	mov	r5, r1
 8023ff6:	f7dc fb2f 	bl	8000658 <__aeabi_dmul>
 8023ffa:	a35b      	add	r3, pc, #364	; (adr r3, 8024168 <__ieee754_pow+0xa00>)
 8023ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024000:	f7dc f972 	bl	80002e8 <__aeabi_dsub>
 8024004:	4622      	mov	r2, r4
 8024006:	462b      	mov	r3, r5
 8024008:	f7dc fb26 	bl	8000658 <__aeabi_dmul>
 802400c:	a358      	add	r3, pc, #352	; (adr r3, 8024170 <__ieee754_pow+0xa08>)
 802400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024012:	f7dc f96b 	bl	80002ec <__adddf3>
 8024016:	4622      	mov	r2, r4
 8024018:	462b      	mov	r3, r5
 802401a:	f7dc fb1d 	bl	8000658 <__aeabi_dmul>
 802401e:	a356      	add	r3, pc, #344	; (adr r3, 8024178 <__ieee754_pow+0xa10>)
 8024020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024024:	f7dc f960 	bl	80002e8 <__aeabi_dsub>
 8024028:	4622      	mov	r2, r4
 802402a:	462b      	mov	r3, r5
 802402c:	f7dc fb14 	bl	8000658 <__aeabi_dmul>
 8024030:	a353      	add	r3, pc, #332	; (adr r3, 8024180 <__ieee754_pow+0xa18>)
 8024032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024036:	f7dc f959 	bl	80002ec <__adddf3>
 802403a:	4622      	mov	r2, r4
 802403c:	462b      	mov	r3, r5
 802403e:	f7dc fb0b 	bl	8000658 <__aeabi_dmul>
 8024042:	4602      	mov	r2, r0
 8024044:	460b      	mov	r3, r1
 8024046:	4640      	mov	r0, r8
 8024048:	4649      	mov	r1, r9
 802404a:	f7dc f94d 	bl	80002e8 <__aeabi_dsub>
 802404e:	4604      	mov	r4, r0
 8024050:	460d      	mov	r5, r1
 8024052:	4602      	mov	r2, r0
 8024054:	460b      	mov	r3, r1
 8024056:	4640      	mov	r0, r8
 8024058:	4649      	mov	r1, r9
 802405a:	f7dc fafd 	bl	8000658 <__aeabi_dmul>
 802405e:	2200      	movs	r2, #0
 8024060:	ec41 0b19 	vmov	d9, r0, r1
 8024064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8024068:	4620      	mov	r0, r4
 802406a:	4629      	mov	r1, r5
 802406c:	f7dc f93c 	bl	80002e8 <__aeabi_dsub>
 8024070:	4602      	mov	r2, r0
 8024072:	460b      	mov	r3, r1
 8024074:	ec51 0b19 	vmov	r0, r1, d9
 8024078:	f7dc fc18 	bl	80008ac <__aeabi_ddiv>
 802407c:	4632      	mov	r2, r6
 802407e:	4604      	mov	r4, r0
 8024080:	460d      	mov	r5, r1
 8024082:	463b      	mov	r3, r7
 8024084:	4640      	mov	r0, r8
 8024086:	4649      	mov	r1, r9
 8024088:	f7dc fae6 	bl	8000658 <__aeabi_dmul>
 802408c:	4632      	mov	r2, r6
 802408e:	463b      	mov	r3, r7
 8024090:	f7dc f92c 	bl	80002ec <__adddf3>
 8024094:	4602      	mov	r2, r0
 8024096:	460b      	mov	r3, r1
 8024098:	4620      	mov	r0, r4
 802409a:	4629      	mov	r1, r5
 802409c:	f7dc f924 	bl	80002e8 <__aeabi_dsub>
 80240a0:	4642      	mov	r2, r8
 80240a2:	464b      	mov	r3, r9
 80240a4:	f7dc f920 	bl	80002e8 <__aeabi_dsub>
 80240a8:	460b      	mov	r3, r1
 80240aa:	4602      	mov	r2, r0
 80240ac:	493a      	ldr	r1, [pc, #232]	; (8024198 <__ieee754_pow+0xa30>)
 80240ae:	2000      	movs	r0, #0
 80240b0:	f7dc f91a 	bl	80002e8 <__aeabi_dsub>
 80240b4:	e9cd 0100 	strd	r0, r1, [sp]
 80240b8:	9b01      	ldr	r3, [sp, #4]
 80240ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80240be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80240c2:	da2f      	bge.n	8024124 <__ieee754_pow+0x9bc>
 80240c4:	4650      	mov	r0, sl
 80240c6:	ed9d 0b00 	vldr	d0, [sp]
 80240ca:	f000 f9cd 	bl	8024468 <scalbn>
 80240ce:	ec51 0b10 	vmov	r0, r1, d0
 80240d2:	ec53 2b18 	vmov	r2, r3, d8
 80240d6:	f7ff bbe0 	b.w	802389a <__ieee754_pow+0x132>
 80240da:	4b30      	ldr	r3, [pc, #192]	; (802419c <__ieee754_pow+0xa34>)
 80240dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80240e0:	429e      	cmp	r6, r3
 80240e2:	f77f af0b 	ble.w	8023efc <__ieee754_pow+0x794>
 80240e6:	4b2e      	ldr	r3, [pc, #184]	; (80241a0 <__ieee754_pow+0xa38>)
 80240e8:	440b      	add	r3, r1
 80240ea:	4303      	orrs	r3, r0
 80240ec:	d00b      	beq.n	8024106 <__ieee754_pow+0x99e>
 80240ee:	a326      	add	r3, pc, #152	; (adr r3, 8024188 <__ieee754_pow+0xa20>)
 80240f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240f4:	ec51 0b18 	vmov	r0, r1, d8
 80240f8:	f7dc faae 	bl	8000658 <__aeabi_dmul>
 80240fc:	a322      	add	r3, pc, #136	; (adr r3, 8024188 <__ieee754_pow+0xa20>)
 80240fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024102:	f7ff bbca 	b.w	802389a <__ieee754_pow+0x132>
 8024106:	4622      	mov	r2, r4
 8024108:	462b      	mov	r3, r5
 802410a:	f7dc f8ed 	bl	80002e8 <__aeabi_dsub>
 802410e:	4642      	mov	r2, r8
 8024110:	464b      	mov	r3, r9
 8024112:	f7dc fd27 	bl	8000b64 <__aeabi_dcmpge>
 8024116:	2800      	cmp	r0, #0
 8024118:	f43f aef0 	beq.w	8023efc <__ieee754_pow+0x794>
 802411c:	e7e7      	b.n	80240ee <__ieee754_pow+0x986>
 802411e:	f04f 0a00 	mov.w	sl, #0
 8024122:	e717      	b.n	8023f54 <__ieee754_pow+0x7ec>
 8024124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024128:	4619      	mov	r1, r3
 802412a:	e7d2      	b.n	80240d2 <__ieee754_pow+0x96a>
 802412c:	491a      	ldr	r1, [pc, #104]	; (8024198 <__ieee754_pow+0xa30>)
 802412e:	2000      	movs	r0, #0
 8024130:	f7ff bb9e 	b.w	8023870 <__ieee754_pow+0x108>
 8024134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024138:	f7ff bb9a 	b.w	8023870 <__ieee754_pow+0x108>
 802413c:	9000      	str	r0, [sp, #0]
 802413e:	f7ff bb76 	b.w	802382e <__ieee754_pow+0xc6>
 8024142:	2100      	movs	r1, #0
 8024144:	f7ff bb60 	b.w	8023808 <__ieee754_pow+0xa0>
 8024148:	00000000 	.word	0x00000000
 802414c:	3fe62e43 	.word	0x3fe62e43
 8024150:	fefa39ef 	.word	0xfefa39ef
 8024154:	3fe62e42 	.word	0x3fe62e42
 8024158:	0ca86c39 	.word	0x0ca86c39
 802415c:	be205c61 	.word	0xbe205c61
 8024160:	72bea4d0 	.word	0x72bea4d0
 8024164:	3e663769 	.word	0x3e663769
 8024168:	c5d26bf1 	.word	0xc5d26bf1
 802416c:	3ebbbd41 	.word	0x3ebbbd41
 8024170:	af25de2c 	.word	0xaf25de2c
 8024174:	3f11566a 	.word	0x3f11566a
 8024178:	16bebd93 	.word	0x16bebd93
 802417c:	3f66c16c 	.word	0x3f66c16c
 8024180:	5555553e 	.word	0x5555553e
 8024184:	3fc55555 	.word	0x3fc55555
 8024188:	c2f8f359 	.word	0xc2f8f359
 802418c:	01a56e1f 	.word	0x01a56e1f
 8024190:	3fe00000 	.word	0x3fe00000
 8024194:	000fffff 	.word	0x000fffff
 8024198:	3ff00000 	.word	0x3ff00000
 802419c:	4090cbff 	.word	0x4090cbff
 80241a0:	3f6f3400 	.word	0x3f6f3400
 80241a4:	652b82fe 	.word	0x652b82fe
 80241a8:	3c971547 	.word	0x3c971547

080241ac <__ieee754_sqrt>:
 80241ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241b0:	ec55 4b10 	vmov	r4, r5, d0
 80241b4:	4e56      	ldr	r6, [pc, #344]	; (8024310 <__ieee754_sqrt+0x164>)
 80241b6:	43ae      	bics	r6, r5
 80241b8:	ee10 0a10 	vmov	r0, s0
 80241bc:	ee10 3a10 	vmov	r3, s0
 80241c0:	4629      	mov	r1, r5
 80241c2:	462a      	mov	r2, r5
 80241c4:	d110      	bne.n	80241e8 <__ieee754_sqrt+0x3c>
 80241c6:	ee10 2a10 	vmov	r2, s0
 80241ca:	462b      	mov	r3, r5
 80241cc:	f7dc fa44 	bl	8000658 <__aeabi_dmul>
 80241d0:	4602      	mov	r2, r0
 80241d2:	460b      	mov	r3, r1
 80241d4:	4620      	mov	r0, r4
 80241d6:	4629      	mov	r1, r5
 80241d8:	f7dc f888 	bl	80002ec <__adddf3>
 80241dc:	4604      	mov	r4, r0
 80241de:	460d      	mov	r5, r1
 80241e0:	ec45 4b10 	vmov	d0, r4, r5
 80241e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241e8:	2d00      	cmp	r5, #0
 80241ea:	dc10      	bgt.n	802420e <__ieee754_sqrt+0x62>
 80241ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80241f0:	4330      	orrs	r0, r6
 80241f2:	d0f5      	beq.n	80241e0 <__ieee754_sqrt+0x34>
 80241f4:	b15d      	cbz	r5, 802420e <__ieee754_sqrt+0x62>
 80241f6:	ee10 2a10 	vmov	r2, s0
 80241fa:	462b      	mov	r3, r5
 80241fc:	ee10 0a10 	vmov	r0, s0
 8024200:	f7dc f872 	bl	80002e8 <__aeabi_dsub>
 8024204:	4602      	mov	r2, r0
 8024206:	460b      	mov	r3, r1
 8024208:	f7dc fb50 	bl	80008ac <__aeabi_ddiv>
 802420c:	e7e6      	b.n	80241dc <__ieee754_sqrt+0x30>
 802420e:	1509      	asrs	r1, r1, #20
 8024210:	d076      	beq.n	8024300 <__ieee754_sqrt+0x154>
 8024212:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024216:	07ce      	lsls	r6, r1, #31
 8024218:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802421c:	bf5e      	ittt	pl
 802421e:	0fda      	lsrpl	r2, r3, #31
 8024220:	005b      	lslpl	r3, r3, #1
 8024222:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8024226:	0fda      	lsrs	r2, r3, #31
 8024228:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802422c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8024230:	2000      	movs	r0, #0
 8024232:	106d      	asrs	r5, r5, #1
 8024234:	005b      	lsls	r3, r3, #1
 8024236:	f04f 0e16 	mov.w	lr, #22
 802423a:	4684      	mov	ip, r0
 802423c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8024240:	eb0c 0401 	add.w	r4, ip, r1
 8024244:	4294      	cmp	r4, r2
 8024246:	bfde      	ittt	le
 8024248:	1b12      	suble	r2, r2, r4
 802424a:	eb04 0c01 	addle.w	ip, r4, r1
 802424e:	1840      	addle	r0, r0, r1
 8024250:	0052      	lsls	r2, r2, #1
 8024252:	f1be 0e01 	subs.w	lr, lr, #1
 8024256:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802425a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802425e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8024262:	d1ed      	bne.n	8024240 <__ieee754_sqrt+0x94>
 8024264:	4671      	mov	r1, lr
 8024266:	2720      	movs	r7, #32
 8024268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802426c:	4562      	cmp	r2, ip
 802426e:	eb04 060e 	add.w	r6, r4, lr
 8024272:	dc02      	bgt.n	802427a <__ieee754_sqrt+0xce>
 8024274:	d113      	bne.n	802429e <__ieee754_sqrt+0xf2>
 8024276:	429e      	cmp	r6, r3
 8024278:	d811      	bhi.n	802429e <__ieee754_sqrt+0xf2>
 802427a:	2e00      	cmp	r6, #0
 802427c:	eb06 0e04 	add.w	lr, r6, r4
 8024280:	da43      	bge.n	802430a <__ieee754_sqrt+0x15e>
 8024282:	f1be 0f00 	cmp.w	lr, #0
 8024286:	db40      	blt.n	802430a <__ieee754_sqrt+0x15e>
 8024288:	f10c 0801 	add.w	r8, ip, #1
 802428c:	eba2 020c 	sub.w	r2, r2, ip
 8024290:	429e      	cmp	r6, r3
 8024292:	bf88      	it	hi
 8024294:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024298:	1b9b      	subs	r3, r3, r6
 802429a:	4421      	add	r1, r4
 802429c:	46c4      	mov	ip, r8
 802429e:	0052      	lsls	r2, r2, #1
 80242a0:	3f01      	subs	r7, #1
 80242a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80242a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80242aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80242ae:	d1dd      	bne.n	802426c <__ieee754_sqrt+0xc0>
 80242b0:	4313      	orrs	r3, r2
 80242b2:	d006      	beq.n	80242c2 <__ieee754_sqrt+0x116>
 80242b4:	1c4c      	adds	r4, r1, #1
 80242b6:	bf13      	iteet	ne
 80242b8:	3101      	addne	r1, #1
 80242ba:	3001      	addeq	r0, #1
 80242bc:	4639      	moveq	r1, r7
 80242be:	f021 0101 	bicne.w	r1, r1, #1
 80242c2:	1043      	asrs	r3, r0, #1
 80242c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80242c8:	0849      	lsrs	r1, r1, #1
 80242ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80242ce:	07c2      	lsls	r2, r0, #31
 80242d0:	bf48      	it	mi
 80242d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80242d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80242da:	460c      	mov	r4, r1
 80242dc:	463d      	mov	r5, r7
 80242de:	e77f      	b.n	80241e0 <__ieee754_sqrt+0x34>
 80242e0:	0ada      	lsrs	r2, r3, #11
 80242e2:	3815      	subs	r0, #21
 80242e4:	055b      	lsls	r3, r3, #21
 80242e6:	2a00      	cmp	r2, #0
 80242e8:	d0fa      	beq.n	80242e0 <__ieee754_sqrt+0x134>
 80242ea:	02d7      	lsls	r7, r2, #11
 80242ec:	d50a      	bpl.n	8024304 <__ieee754_sqrt+0x158>
 80242ee:	f1c1 0420 	rsb	r4, r1, #32
 80242f2:	fa23 f404 	lsr.w	r4, r3, r4
 80242f6:	1e4d      	subs	r5, r1, #1
 80242f8:	408b      	lsls	r3, r1
 80242fa:	4322      	orrs	r2, r4
 80242fc:	1b41      	subs	r1, r0, r5
 80242fe:	e788      	b.n	8024212 <__ieee754_sqrt+0x66>
 8024300:	4608      	mov	r0, r1
 8024302:	e7f0      	b.n	80242e6 <__ieee754_sqrt+0x13a>
 8024304:	0052      	lsls	r2, r2, #1
 8024306:	3101      	adds	r1, #1
 8024308:	e7ef      	b.n	80242ea <__ieee754_sqrt+0x13e>
 802430a:	46e0      	mov	r8, ip
 802430c:	e7be      	b.n	802428c <__ieee754_sqrt+0xe0>
 802430e:	bf00      	nop
 8024310:	7ff00000 	.word	0x7ff00000

08024314 <fabs>:
 8024314:	ec51 0b10 	vmov	r0, r1, d0
 8024318:	ee10 2a10 	vmov	r2, s0
 802431c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024320:	ec43 2b10 	vmov	d0, r2, r3
 8024324:	4770      	bx	lr

08024326 <finite>:
 8024326:	b082      	sub	sp, #8
 8024328:	ed8d 0b00 	vstr	d0, [sp]
 802432c:	9801      	ldr	r0, [sp, #4]
 802432e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8024332:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024336:	0fc0      	lsrs	r0, r0, #31
 8024338:	b002      	add	sp, #8
 802433a:	4770      	bx	lr
 802433c:	0000      	movs	r0, r0
	...

08024340 <nan>:
 8024340:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024348 <nan+0x8>
 8024344:	4770      	bx	lr
 8024346:	bf00      	nop
 8024348:	00000000 	.word	0x00000000
 802434c:	7ff80000 	.word	0x7ff80000

08024350 <rint>:
 8024350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024352:	ec51 0b10 	vmov	r0, r1, d0
 8024356:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802435a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802435e:	2e13      	cmp	r6, #19
 8024360:	ee10 4a10 	vmov	r4, s0
 8024364:	460b      	mov	r3, r1
 8024366:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802436a:	dc58      	bgt.n	802441e <rint+0xce>
 802436c:	2e00      	cmp	r6, #0
 802436e:	da2b      	bge.n	80243c8 <rint+0x78>
 8024370:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024374:	4302      	orrs	r2, r0
 8024376:	d023      	beq.n	80243c0 <rint+0x70>
 8024378:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802437c:	4302      	orrs	r2, r0
 802437e:	4254      	negs	r4, r2
 8024380:	4314      	orrs	r4, r2
 8024382:	0c4b      	lsrs	r3, r1, #17
 8024384:	0b24      	lsrs	r4, r4, #12
 8024386:	045b      	lsls	r3, r3, #17
 8024388:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 802438c:	ea44 0103 	orr.w	r1, r4, r3
 8024390:	4b32      	ldr	r3, [pc, #200]	; (802445c <rint+0x10c>)
 8024392:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024396:	e9d3 6700 	ldrd	r6, r7, [r3]
 802439a:	4602      	mov	r2, r0
 802439c:	460b      	mov	r3, r1
 802439e:	4630      	mov	r0, r6
 80243a0:	4639      	mov	r1, r7
 80243a2:	f7db ffa3 	bl	80002ec <__adddf3>
 80243a6:	e9cd 0100 	strd	r0, r1, [sp]
 80243aa:	463b      	mov	r3, r7
 80243ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80243b0:	4632      	mov	r2, r6
 80243b2:	f7db ff99 	bl	80002e8 <__aeabi_dsub>
 80243b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80243ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80243be:	4639      	mov	r1, r7
 80243c0:	ec41 0b10 	vmov	d0, r0, r1
 80243c4:	b003      	add	sp, #12
 80243c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80243c8:	4a25      	ldr	r2, [pc, #148]	; (8024460 <rint+0x110>)
 80243ca:	4132      	asrs	r2, r6
 80243cc:	ea01 0702 	and.w	r7, r1, r2
 80243d0:	4307      	orrs	r7, r0
 80243d2:	d0f5      	beq.n	80243c0 <rint+0x70>
 80243d4:	0851      	lsrs	r1, r2, #1
 80243d6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80243da:	4314      	orrs	r4, r2
 80243dc:	d00c      	beq.n	80243f8 <rint+0xa8>
 80243de:	ea23 0201 	bic.w	r2, r3, r1
 80243e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80243e6:	2e13      	cmp	r6, #19
 80243e8:	fa43 f606 	asr.w	r6, r3, r6
 80243ec:	bf0c      	ite	eq
 80243ee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80243f2:	2400      	movne	r4, #0
 80243f4:	ea42 0306 	orr.w	r3, r2, r6
 80243f8:	4918      	ldr	r1, [pc, #96]	; (802445c <rint+0x10c>)
 80243fa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80243fe:	4622      	mov	r2, r4
 8024400:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024404:	4620      	mov	r0, r4
 8024406:	4629      	mov	r1, r5
 8024408:	f7db ff70 	bl	80002ec <__adddf3>
 802440c:	e9cd 0100 	strd	r0, r1, [sp]
 8024410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024414:	4622      	mov	r2, r4
 8024416:	462b      	mov	r3, r5
 8024418:	f7db ff66 	bl	80002e8 <__aeabi_dsub>
 802441c:	e7d0      	b.n	80243c0 <rint+0x70>
 802441e:	2e33      	cmp	r6, #51	; 0x33
 8024420:	dd07      	ble.n	8024432 <rint+0xe2>
 8024422:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024426:	d1cb      	bne.n	80243c0 <rint+0x70>
 8024428:	ee10 2a10 	vmov	r2, s0
 802442c:	f7db ff5e 	bl	80002ec <__adddf3>
 8024430:	e7c6      	b.n	80243c0 <rint+0x70>
 8024432:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8024436:	f04f 36ff 	mov.w	r6, #4294967295
 802443a:	40d6      	lsrs	r6, r2
 802443c:	4230      	tst	r0, r6
 802443e:	d0bf      	beq.n	80243c0 <rint+0x70>
 8024440:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8024444:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8024448:	bf1f      	itttt	ne
 802444a:	ea24 0101 	bicne.w	r1, r4, r1
 802444e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8024452:	fa44 f202 	asrne.w	r2, r4, r2
 8024456:	ea41 0402 	orrne.w	r4, r1, r2
 802445a:	e7cd      	b.n	80243f8 <rint+0xa8>
 802445c:	0802a440 	.word	0x0802a440
 8024460:	000fffff 	.word	0x000fffff
 8024464:	00000000 	.word	0x00000000

08024468 <scalbn>:
 8024468:	b570      	push	{r4, r5, r6, lr}
 802446a:	ec55 4b10 	vmov	r4, r5, d0
 802446e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024472:	4606      	mov	r6, r0
 8024474:	462b      	mov	r3, r5
 8024476:	b99a      	cbnz	r2, 80244a0 <scalbn+0x38>
 8024478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802447c:	4323      	orrs	r3, r4
 802447e:	d036      	beq.n	80244ee <scalbn+0x86>
 8024480:	4b39      	ldr	r3, [pc, #228]	; (8024568 <scalbn+0x100>)
 8024482:	4629      	mov	r1, r5
 8024484:	ee10 0a10 	vmov	r0, s0
 8024488:	2200      	movs	r2, #0
 802448a:	f7dc f8e5 	bl	8000658 <__aeabi_dmul>
 802448e:	4b37      	ldr	r3, [pc, #220]	; (802456c <scalbn+0x104>)
 8024490:	429e      	cmp	r6, r3
 8024492:	4604      	mov	r4, r0
 8024494:	460d      	mov	r5, r1
 8024496:	da10      	bge.n	80244ba <scalbn+0x52>
 8024498:	a32b      	add	r3, pc, #172	; (adr r3, 8024548 <scalbn+0xe0>)
 802449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802449e:	e03a      	b.n	8024516 <scalbn+0xae>
 80244a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80244a4:	428a      	cmp	r2, r1
 80244a6:	d10c      	bne.n	80244c2 <scalbn+0x5a>
 80244a8:	ee10 2a10 	vmov	r2, s0
 80244ac:	4620      	mov	r0, r4
 80244ae:	4629      	mov	r1, r5
 80244b0:	f7db ff1c 	bl	80002ec <__adddf3>
 80244b4:	4604      	mov	r4, r0
 80244b6:	460d      	mov	r5, r1
 80244b8:	e019      	b.n	80244ee <scalbn+0x86>
 80244ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80244be:	460b      	mov	r3, r1
 80244c0:	3a36      	subs	r2, #54	; 0x36
 80244c2:	4432      	add	r2, r6
 80244c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80244c8:	428a      	cmp	r2, r1
 80244ca:	dd08      	ble.n	80244de <scalbn+0x76>
 80244cc:	2d00      	cmp	r5, #0
 80244ce:	a120      	add	r1, pc, #128	; (adr r1, 8024550 <scalbn+0xe8>)
 80244d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80244d4:	da1c      	bge.n	8024510 <scalbn+0xa8>
 80244d6:	a120      	add	r1, pc, #128	; (adr r1, 8024558 <scalbn+0xf0>)
 80244d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80244dc:	e018      	b.n	8024510 <scalbn+0xa8>
 80244de:	2a00      	cmp	r2, #0
 80244e0:	dd08      	ble.n	80244f4 <scalbn+0x8c>
 80244e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80244e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80244ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80244ee:	ec45 4b10 	vmov	d0, r4, r5
 80244f2:	bd70      	pop	{r4, r5, r6, pc}
 80244f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80244f8:	da19      	bge.n	802452e <scalbn+0xc6>
 80244fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80244fe:	429e      	cmp	r6, r3
 8024500:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024504:	dd0a      	ble.n	802451c <scalbn+0xb4>
 8024506:	a112      	add	r1, pc, #72	; (adr r1, 8024550 <scalbn+0xe8>)
 8024508:	e9d1 0100 	ldrd	r0, r1, [r1]
 802450c:	2b00      	cmp	r3, #0
 802450e:	d1e2      	bne.n	80244d6 <scalbn+0x6e>
 8024510:	a30f      	add	r3, pc, #60	; (adr r3, 8024550 <scalbn+0xe8>)
 8024512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024516:	f7dc f89f 	bl	8000658 <__aeabi_dmul>
 802451a:	e7cb      	b.n	80244b4 <scalbn+0x4c>
 802451c:	a10a      	add	r1, pc, #40	; (adr r1, 8024548 <scalbn+0xe0>)
 802451e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024522:	2b00      	cmp	r3, #0
 8024524:	d0b8      	beq.n	8024498 <scalbn+0x30>
 8024526:	a10e      	add	r1, pc, #56	; (adr r1, 8024560 <scalbn+0xf8>)
 8024528:	e9d1 0100 	ldrd	r0, r1, [r1]
 802452c:	e7b4      	b.n	8024498 <scalbn+0x30>
 802452e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024532:	3236      	adds	r2, #54	; 0x36
 8024534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802453c:	4620      	mov	r0, r4
 802453e:	4b0c      	ldr	r3, [pc, #48]	; (8024570 <scalbn+0x108>)
 8024540:	2200      	movs	r2, #0
 8024542:	e7e8      	b.n	8024516 <scalbn+0xae>
 8024544:	f3af 8000 	nop.w
 8024548:	c2f8f359 	.word	0xc2f8f359
 802454c:	01a56e1f 	.word	0x01a56e1f
 8024550:	8800759c 	.word	0x8800759c
 8024554:	7e37e43c 	.word	0x7e37e43c
 8024558:	8800759c 	.word	0x8800759c
 802455c:	fe37e43c 	.word	0xfe37e43c
 8024560:	c2f8f359 	.word	0xc2f8f359
 8024564:	81a56e1f 	.word	0x81a56e1f
 8024568:	43500000 	.word	0x43500000
 802456c:	ffff3cb0 	.word	0xffff3cb0
 8024570:	3c900000 	.word	0x3c900000

08024574 <_init>:
 8024574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024576:	bf00      	nop
 8024578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802457a:	bc08      	pop	{r3}
 802457c:	469e      	mov	lr, r3
 802457e:	4770      	bx	lr

08024580 <_fini>:
 8024580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024582:	bf00      	nop
 8024584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024586:	bc08      	pop	{r3}
 8024588:	469e      	mov	lr, r3
 802458a:	4770      	bx	lr
